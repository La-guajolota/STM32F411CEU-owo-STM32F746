
NEOPIXELS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006948  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08006ae0  08006ae0  00007ae0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cd0  08006cd0  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  08006cd0  08006cd0  00007cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006cd8  08006cd8  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cd8  08006cd8  00007cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006cdc  08006cdc  00007cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006ce0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c4  2000000c  08006cec  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d0  08006cec  000084d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c90f  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002096  00000000  00000000  0001494b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  000169e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a6b  00000000  00000000  00017768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001669d  00000000  00000000  000181d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e68b  00000000  00000000  0002e870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e00f  00000000  00000000  0003cefb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000caf0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c58  00000000  00000000  000caf50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000ceba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006ac8 	.word	0x08006ac8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08006ac8 	.word	0x08006ac8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2uiz>:
 8000ad4:	004a      	lsls	r2, r1, #1
 8000ad6:	d211      	bcs.n	8000afc <__aeabi_d2uiz+0x28>
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000adc:	d211      	bcs.n	8000b02 <__aeabi_d2uiz+0x2e>
 8000ade:	d50d      	bpl.n	8000afc <__aeabi_d2uiz+0x28>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d40e      	bmi.n	8000b08 <__aeabi_d2uiz+0x34>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d102      	bne.n	8000b0e <__aeabi_d2uiz+0x3a>
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	4770      	bx	lr
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	4770      	bx	lr

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_uldivmod>:
 8000bb4:	b953      	cbnz	r3, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb6:	b94a      	cbnz	r2, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb8:	2900      	cmp	r1, #0
 8000bba:	bf08      	it	eq
 8000bbc:	2800      	cmpeq	r0, #0
 8000bbe:	bf1c      	itt	ne
 8000bc0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc8:	f000 b96a 	b.w	8000ea0 <__aeabi_idiv0>
 8000bcc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd4:	f000 f806 	bl	8000be4 <__udivmoddi4>
 8000bd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be0:	b004      	add	sp, #16
 8000be2:	4770      	bx	lr

08000be4 <__udivmoddi4>:
 8000be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be8:	9d08      	ldr	r5, [sp, #32]
 8000bea:	460c      	mov	r4, r1
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d14e      	bne.n	8000c8e <__udivmoddi4+0xaa>
 8000bf0:	4694      	mov	ip, r2
 8000bf2:	458c      	cmp	ip, r1
 8000bf4:	4686      	mov	lr, r0
 8000bf6:	fab2 f282 	clz	r2, r2
 8000bfa:	d962      	bls.n	8000cc2 <__udivmoddi4+0xde>
 8000bfc:	b14a      	cbz	r2, 8000c12 <__udivmoddi4+0x2e>
 8000bfe:	f1c2 0320 	rsb	r3, r2, #32
 8000c02:	4091      	lsls	r1, r2
 8000c04:	fa20 f303 	lsr.w	r3, r0, r3
 8000c08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c0c:	4319      	orrs	r1, r3
 8000c0e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c16:	fa1f f68c 	uxth.w	r6, ip
 8000c1a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c22:	fb07 1114 	mls	r1, r7, r4, r1
 8000c26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2a:	fb04 f106 	mul.w	r1, r4, r6
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	d90a      	bls.n	8000c48 <__udivmoddi4+0x64>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3a:	f080 8112 	bcs.w	8000e62 <__udivmoddi4+0x27e>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 810f 	bls.w	8000e62 <__udivmoddi4+0x27e>
 8000c44:	3c02      	subs	r4, #2
 8000c46:	4463      	add	r3, ip
 8000c48:	1a59      	subs	r1, r3, r1
 8000c4a:	fa1f f38e 	uxth.w	r3, lr
 8000c4e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c52:	fb07 1110 	mls	r1, r7, r0, r1
 8000c56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5a:	fb00 f606 	mul.w	r6, r0, r6
 8000c5e:	429e      	cmp	r6, r3
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x94>
 8000c62:	eb1c 0303 	adds.w	r3, ip, r3
 8000c66:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6a:	f080 80fc 	bcs.w	8000e66 <__udivmoddi4+0x282>
 8000c6e:	429e      	cmp	r6, r3
 8000c70:	f240 80f9 	bls.w	8000e66 <__udivmoddi4+0x282>
 8000c74:	4463      	add	r3, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	1b9b      	subs	r3, r3, r6
 8000c7a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa6>
 8000c82:	40d3      	lsrs	r3, r2
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xba>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb4>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x150>
 8000ca6:	42a3      	cmp	r3, r4
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xcc>
 8000caa:	4290      	cmp	r0, r2
 8000cac:	f0c0 80f0 	bcc.w	8000e90 <__udivmoddi4+0x2ac>
 8000cb0:	1a86      	subs	r6, r0, r2
 8000cb2:	eb64 0303 	sbc.w	r3, r4, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	2d00      	cmp	r5, #0
 8000cba:	d0e6      	beq.n	8000c8a <__udivmoddi4+0xa6>
 8000cbc:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc0:	e7e3      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000cc2:	2a00      	cmp	r2, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x204>
 8000cc8:	eba1 040c 	sub.w	r4, r1, ip
 8000ccc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd0:	fa1f f78c 	uxth.w	r7, ip
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cda:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cde:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ce6:	fb07 f006 	mul.w	r0, r7, r6
 8000cea:	4298      	cmp	r0, r3
 8000cec:	d908      	bls.n	8000d00 <__udivmoddi4+0x11c>
 8000cee:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x11a>
 8000cf8:	4298      	cmp	r0, r3
 8000cfa:	f200 80cd 	bhi.w	8000e98 <__udivmoddi4+0x2b4>
 8000cfe:	4626      	mov	r6, r4
 8000d00:	1a1c      	subs	r4, r3, r0
 8000d02:	fa1f f38e 	uxth.w	r3, lr
 8000d06:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0a:	fb08 4410 	mls	r4, r8, r0, r4
 8000d0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d12:	fb00 f707 	mul.w	r7, r0, r7
 8000d16:	429f      	cmp	r7, r3
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x148>
 8000d1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x146>
 8000d24:	429f      	cmp	r7, r3
 8000d26:	f200 80b0 	bhi.w	8000e8a <__udivmoddi4+0x2a6>
 8000d2a:	4620      	mov	r0, r4
 8000d2c:	1bdb      	subs	r3, r3, r7
 8000d2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x9c>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d44:	fa04 f301 	lsl.w	r3, r4, r1
 8000d48:	ea43 030c 	orr.w	r3, r3, ip
 8000d4c:	40f4      	lsrs	r4, r6
 8000d4e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d52:	0c38      	lsrs	r0, r7, #16
 8000d54:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d58:	fbb4 fef0 	udiv	lr, r4, r0
 8000d5c:	fa1f fc87 	uxth.w	ip, r7
 8000d60:	fb00 441e 	mls	r4, r0, lr, r4
 8000d64:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d68:	fb0e f90c 	mul.w	r9, lr, ip
 8000d6c:	45a1      	cmp	r9, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x1a6>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7a:	f080 8084 	bcs.w	8000e86 <__udivmoddi4+0x2a2>
 8000d7e:	45a1      	cmp	r9, r4
 8000d80:	f240 8081 	bls.w	8000e86 <__udivmoddi4+0x2a2>
 8000d84:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d88:	443c      	add	r4, r7
 8000d8a:	eba4 0409 	sub.w	r4, r4, r9
 8000d8e:	fa1f f983 	uxth.w	r9, r3
 8000d92:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d96:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x1d2>
 8000da6:	193c      	adds	r4, r7, r4
 8000da8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dac:	d267      	bcs.n	8000e7e <__udivmoddi4+0x29a>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d965      	bls.n	8000e7e <__udivmoddi4+0x29a>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dba:	fba0 9302 	umull	r9, r3, r0, r2
 8000dbe:	eba4 040c 	sub.w	r4, r4, ip
 8000dc2:	429c      	cmp	r4, r3
 8000dc4:	46ce      	mov	lr, r9
 8000dc6:	469c      	mov	ip, r3
 8000dc8:	d351      	bcc.n	8000e6e <__udivmoddi4+0x28a>
 8000dca:	d04e      	beq.n	8000e6a <__udivmoddi4+0x286>
 8000dcc:	b155      	cbz	r5, 8000de4 <__udivmoddi4+0x200>
 8000dce:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd2:	eb64 040c 	sbc.w	r4, r4, ip
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	40cb      	lsrs	r3, r1
 8000ddc:	431e      	orrs	r6, r3
 8000dde:	40cc      	lsrs	r4, r1
 8000de0:	e9c5 6400 	strd	r6, r4, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	e750      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f103 	lsr.w	r1, r0, r3
 8000df0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df4:	fa24 f303 	lsr.w	r3, r4, r3
 8000df8:	4094      	lsls	r4, r2
 8000dfa:	430c      	orrs	r4, r1
 8000dfc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e00:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e04:	fa1f f78c 	uxth.w	r7, ip
 8000e08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e0c:	fb08 3110 	mls	r1, r8, r0, r3
 8000e10:	0c23      	lsrs	r3, r4, #16
 8000e12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e16:	fb00 f107 	mul.w	r1, r0, r7
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x24c>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e26:	d22c      	bcs.n	8000e82 <__udivmoddi4+0x29e>
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	d92a      	bls.n	8000e82 <__udivmoddi4+0x29e>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4463      	add	r3, ip
 8000e30:	1a5b      	subs	r3, r3, r1
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e38:	fb08 3311 	mls	r3, r8, r1, r3
 8000e3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e40:	fb01 f307 	mul.w	r3, r1, r7
 8000e44:	42a3      	cmp	r3, r4
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x276>
 8000e48:	eb1c 0404 	adds.w	r4, ip, r4
 8000e4c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e50:	d213      	bcs.n	8000e7a <__udivmoddi4+0x296>
 8000e52:	42a3      	cmp	r3, r4
 8000e54:	d911      	bls.n	8000e7a <__udivmoddi4+0x296>
 8000e56:	3902      	subs	r1, #2
 8000e58:	4464      	add	r4, ip
 8000e5a:	1ae4      	subs	r4, r4, r3
 8000e5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e60:	e739      	b.n	8000cd6 <__udivmoddi4+0xf2>
 8000e62:	4604      	mov	r4, r0
 8000e64:	e6f0      	b.n	8000c48 <__udivmoddi4+0x64>
 8000e66:	4608      	mov	r0, r1
 8000e68:	e706      	b.n	8000c78 <__udivmoddi4+0x94>
 8000e6a:	45c8      	cmp	r8, r9
 8000e6c:	d2ae      	bcs.n	8000dcc <__udivmoddi4+0x1e8>
 8000e6e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e72:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e76:	3801      	subs	r0, #1
 8000e78:	e7a8      	b.n	8000dcc <__udivmoddi4+0x1e8>
 8000e7a:	4631      	mov	r1, r6
 8000e7c:	e7ed      	b.n	8000e5a <__udivmoddi4+0x276>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	e799      	b.n	8000db6 <__udivmoddi4+0x1d2>
 8000e82:	4630      	mov	r0, r6
 8000e84:	e7d4      	b.n	8000e30 <__udivmoddi4+0x24c>
 8000e86:	46d6      	mov	lr, sl
 8000e88:	e77f      	b.n	8000d8a <__udivmoddi4+0x1a6>
 8000e8a:	4463      	add	r3, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e74d      	b.n	8000d2c <__udivmoddi4+0x148>
 8000e90:	4606      	mov	r6, r0
 8000e92:	4623      	mov	r3, r4
 8000e94:	4608      	mov	r0, r1
 8000e96:	e70f      	b.n	8000cb8 <__udivmoddi4+0xd4>
 8000e98:	3e02      	subs	r6, #2
 8000e9a:	4463      	add	r3, ip
 8000e9c:	e730      	b.n	8000d00 <__udivmoddi4+0x11c>
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <cs_high>:
 */

#include "NRF24L01.h"

static void cs_high()
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_SET);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	2110      	movs	r1, #16
 8000eac:	4802      	ldr	r0, [pc, #8]	@ (8000eb8 <cs_high+0x14>)
 8000eae:	f002 fa43 	bl	8003338 <HAL_GPIO_WritePin>
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40020000 	.word	0x40020000

08000ebc <cs_low>:

static void cs_low()
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_RESET);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2110      	movs	r1, #16
 8000ec4:	4802      	ldr	r0, [pc, #8]	@ (8000ed0 <cs_low+0x14>)
 8000ec6:	f002 fa37 	bl	8003338 <HAL_GPIO_WritePin>
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40020000 	.word	0x40020000

08000ed4 <ce_high>:

static void ce_high()
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_SET);
 8000ed8:	2201      	movs	r2, #1
 8000eda:	2101      	movs	r1, #1
 8000edc:	4802      	ldr	r0, [pc, #8]	@ (8000ee8 <ce_high+0x14>)
 8000ede:	f002 fa2b 	bl	8003338 <HAL_GPIO_WritePin>
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40020400 	.word	0x40020400

08000eec <ce_low>:

static void ce_low()
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_RESET);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	4802      	ldr	r0, [pc, #8]	@ (8000f00 <ce_low+0x14>)
 8000ef6:	f002 fa1f 	bl	8003338 <HAL_GPIO_WritePin>
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40020400 	.word	0x40020400

08000f04 <read_register>:

static uint8_t read_register(uint8_t reg)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af02      	add	r7, sp, #8
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
    uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t read_val;

    cs_low();
 8000f12:	f7ff ffd3 	bl	8000ebc <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000f16:	f107 020e 	add.w	r2, r7, #14
 8000f1a:	f107 010f 	add.w	r1, r7, #15
 8000f1e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000f22:	9300      	str	r3, [sp, #0]
 8000f24:	2301      	movs	r3, #1
 8000f26:	4809      	ldr	r0, [pc, #36]	@ (8000f4c <read_register+0x48>)
 8000f28:	f003 f95a 	bl	80041e0 <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, &read_val, 1, 2000);
 8000f2c:	f107 010d 	add.w	r1, r7, #13
 8000f30:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000f34:	2201      	movs	r2, #1
 8000f36:	4805      	ldr	r0, [pc, #20]	@ (8000f4c <read_register+0x48>)
 8000f38:	f003 f83a 	bl	8003fb0 <HAL_SPI_Receive>
    cs_high();
 8000f3c:	f7ff ffb2 	bl	8000ea4 <cs_high>

    return read_val;
 8000f40:	7b7b      	ldrb	r3, [r7, #13]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200003c0 	.word	0x200003c0

08000f50 <write_register>:

static uint8_t write_register(uint8_t reg, uint8_t value)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af02      	add	r7, sp, #8
 8000f56:	4603      	mov	r3, r0
 8000f58:	460a      	mov	r2, r1
 8000f5a:	71fb      	strb	r3, [r7, #7]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	71bb      	strb	r3, [r7, #6]
    uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	f043 0320 	orr.w	r3, r3, #32
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t write_val = value;
 8000f6a:	79bb      	ldrb	r3, [r7, #6]
 8000f6c:	737b      	strb	r3, [r7, #13]

    cs_low();
 8000f6e:	f7ff ffa5 	bl	8000ebc <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000f72:	f107 020e 	add.w	r2, r7, #14
 8000f76:	f107 010f 	add.w	r1, r7, #15
 8000f7a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	2301      	movs	r3, #1
 8000f82:	4809      	ldr	r0, [pc, #36]	@ (8000fa8 <write_register+0x58>)
 8000f84:	f003 f92c 	bl	80041e0 <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, &write_val, 1, 2000);
 8000f88:	f107 010d 	add.w	r1, r7, #13
 8000f8c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000f90:	2201      	movs	r2, #1
 8000f92:	4805      	ldr	r0, [pc, #20]	@ (8000fa8 <write_register+0x58>)
 8000f94:	f002 fec9 	bl	8003d2a <HAL_SPI_Transmit>
    cs_high();
 8000f98:	f7ff ff84 	bl	8000ea4 <cs_high>

    return write_val;
 8000f9c:	7b7b      	ldrb	r3, [r7, #13]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	200003c0 	.word	0x200003c0

08000fac <nrf24l01p_rx_init>:


/* nRF24L01+ Main Functions */
void nrf24l01p_rx_init(channel MHz, air_data_rate bps)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	460a      	mov	r2, r1
 8000fb6:	80fb      	strh	r3, [r7, #6]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	717b      	strb	r3, [r7, #5]
    nrf24l01p_reset();
 8000fbc:	f000 f838 	bl	8001030 <nrf24l01p_reset>

    nrf24l01p_prx_mode();
 8000fc0:	f000 f88a 	bl	80010d8 <nrf24l01p_prx_mode>
    nrf24l01p_power_up();
 8000fc4:	f000 f92e 	bl	8001224 <nrf24l01p_power_up>

    nrf24l01p_rx_set_payload_widths(NRF24L01P_PAYLOAD_LENGTH);
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f000 f909 	bl	80011e0 <nrf24l01p_rx_set_payload_widths>

    nrf24l01p_set_rf_channel(MHz);
 8000fce:	88fb      	ldrh	r3, [r7, #6]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 f9b3 	bl	800133c <nrf24l01p_set_rf_channel>
    nrf24l01p_set_rf_air_data_rate(bps);
 8000fd6:	797b      	ldrb	r3, [r7, #5]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f000 f9df 	bl	800139c <nrf24l01p_set_rf_air_data_rate>
    nrf24l01p_set_rf_tx_output_power(_0dBm);
 8000fde:	2003      	movs	r0, #3
 8000fe0:	f000 f9bf 	bl	8001362 <nrf24l01p_set_rf_tx_output_power>

    nrf24l01p_set_crc_length(1);
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	f000 f932 	bl	800124e <nrf24l01p_set_crc_length>
    nrf24l01p_set_address_widths(5);
 8000fea:	2005      	movs	r0, #5
 8000fec:	f000 f952 	bl	8001294 <nrf24l01p_set_address_widths>

    nrf24l01p_auto_retransmit_count(3);
 8000ff0:	2003      	movs	r0, #3
 8000ff2:	f000 f95f 	bl	80012b4 <nrf24l01p_auto_retransmit_count>
    nrf24l01p_auto_retransmit_delay(250);
 8000ff6:	20fa      	movs	r0, #250	@ 0xfa
 8000ff8:	f000 f978 	bl	80012ec <nrf24l01p_auto_retransmit_delay>

    ce_high();
 8000ffc:	f7ff ff6a 	bl	8000ed4 <ce_high>
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <nrf24l01p_rx_receive>:

    ce_high();
}

void nrf24l01p_rx_receive(uint8_t* rx_payload)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
    nrf24l01p_read_rx_fifo(rx_payload);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f000 f877 	bl	8001104 <nrf24l01p_read_rx_fifo>
    nrf24l01p_clear_rx_dr();
 8001016:	f000 f8f1 	bl	80011fc <nrf24l01p_clear_rx_dr>

    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800101a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800101e:	4803      	ldr	r0, [pc, #12]	@ (800102c <nrf24l01p_rx_receive+0x24>)
 8001020:	f002 f9a3 	bl	800336a <HAL_GPIO_TogglePin>
}
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40020800 	.word	0x40020800

08001030 <nrf24l01p_reset>:
    }
}

/* nRF24L01+ Sub Functions */
void nrf24l01p_reset()
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
    // Reset pins
    cs_high();
 8001034:	f7ff ff36 	bl	8000ea4 <cs_high>
    ce_low();
 8001038:	f7ff ff58 	bl	8000eec <ce_low>

    // Reset registers
    write_register(NRF24L01P_REG_CONFIG, 0x08);
 800103c:	2108      	movs	r1, #8
 800103e:	2000      	movs	r0, #0
 8001040:	f7ff ff86 	bl	8000f50 <write_register>
    write_register(NRF24L01P_REG_EN_AA, 0x3F);
 8001044:	213f      	movs	r1, #63	@ 0x3f
 8001046:	2001      	movs	r0, #1
 8001048:	f7ff ff82 	bl	8000f50 <write_register>
    write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 800104c:	2103      	movs	r1, #3
 800104e:	2002      	movs	r0, #2
 8001050:	f7ff ff7e 	bl	8000f50 <write_register>
    write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 8001054:	2103      	movs	r1, #3
 8001056:	2003      	movs	r0, #3
 8001058:	f7ff ff7a 	bl	8000f50 <write_register>
    write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 800105c:	2103      	movs	r1, #3
 800105e:	2004      	movs	r0, #4
 8001060:	f7ff ff76 	bl	8000f50 <write_register>
    write_register(NRF24L01P_REG_RF_CH, 0x02);
 8001064:	2102      	movs	r1, #2
 8001066:	2005      	movs	r0, #5
 8001068:	f7ff ff72 	bl	8000f50 <write_register>
    write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 800106c:	2107      	movs	r1, #7
 800106e:	2006      	movs	r0, #6
 8001070:	f7ff ff6e 	bl	8000f50 <write_register>
    write_register(NRF24L01P_REG_STATUS, 0x7E);
 8001074:	217e      	movs	r1, #126	@ 0x7e
 8001076:	2007      	movs	r0, #7
 8001078:	f7ff ff6a 	bl	8000f50 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 800107c:	2100      	movs	r1, #0
 800107e:	2011      	movs	r0, #17
 8001080:	f7ff ff66 	bl	8000f50 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 8001084:	2100      	movs	r1, #0
 8001086:	2011      	movs	r0, #17
 8001088:	f7ff ff62 	bl	8000f50 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P1, 0x00);
 800108c:	2100      	movs	r1, #0
 800108e:	2012      	movs	r0, #18
 8001090:	f7ff ff5e 	bl	8000f50 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 8001094:	2100      	movs	r1, #0
 8001096:	2013      	movs	r0, #19
 8001098:	f7ff ff5a 	bl	8000f50 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 800109c:	2100      	movs	r1, #0
 800109e:	2014      	movs	r0, #20
 80010a0:	f7ff ff56 	bl	8000f50 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 80010a4:	2100      	movs	r1, #0
 80010a6:	2015      	movs	r0, #21
 80010a8:	f7ff ff52 	bl	8000f50 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 80010ac:	2100      	movs	r1, #0
 80010ae:	2016      	movs	r0, #22
 80010b0:	f7ff ff4e 	bl	8000f50 <write_register>
    write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 80010b4:	2111      	movs	r1, #17
 80010b6:	2017      	movs	r0, #23
 80010b8:	f7ff ff4a 	bl	8000f50 <write_register>
    write_register(NRF24L01P_REG_DYNPD, 0x00);
 80010bc:	2100      	movs	r1, #0
 80010be:	201c      	movs	r0, #28
 80010c0:	f7ff ff46 	bl	8000f50 <write_register>
    write_register(NRF24L01P_REG_FEATURE, 0x00);
 80010c4:	2100      	movs	r1, #0
 80010c6:	201d      	movs	r0, #29
 80010c8:	f7ff ff42 	bl	8000f50 <write_register>

    // Reset FIFO
    nrf24l01p_flush_rx_fifo();
 80010cc:	f000 f83e 	bl	800114c <nrf24l01p_flush_rx_fifo>
    nrf24l01p_flush_tx_fifo();
 80010d0:	f000 f854 	bl	800117c <nrf24l01p_flush_tx_fifo>
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <nrf24l01p_prx_mode>:

void nrf24l01p_prx_mode()
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 80010de:	2000      	movs	r0, #0
 80010e0:	f7ff ff10 	bl	8000f04 <read_register>
 80010e4:	4603      	mov	r3, r0
 80010e6:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 0;
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	f043 0301 	orr.w	r3, r3, #1
 80010ee:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	4619      	mov	r1, r3
 80010f4:	2000      	movs	r0, #0
 80010f6:	f7ff ff2b 	bl	8000f50 <write_register>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <nrf24l01p_read_rx_fifo>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

uint8_t nrf24l01p_read_rx_fifo(uint8_t* rx_payload)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af02      	add	r7, sp, #8
 800110a:	6078      	str	r0, [r7, #4]
    uint8_t command = NRF24L01P_CMD_R_RX_PAYLOAD;
 800110c:	2361      	movs	r3, #97	@ 0x61
 800110e:	73fb      	strb	r3, [r7, #15]
    uint8_t status;

    cs_low();
 8001110:	f7ff fed4 	bl	8000ebc <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8001114:	f107 020e 	add.w	r2, r7, #14
 8001118:	f107 010f 	add.w	r1, r7, #15
 800111c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2301      	movs	r3, #1
 8001124:	4808      	ldr	r0, [pc, #32]	@ (8001148 <nrf24l01p_read_rx_fifo+0x44>)
 8001126:	f003 f85b 	bl	80041e0 <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, rx_payload, NRF24L01P_PAYLOAD_LENGTH, 2000);
 800112a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800112e:	2203      	movs	r2, #3
 8001130:	6879      	ldr	r1, [r7, #4]
 8001132:	4805      	ldr	r0, [pc, #20]	@ (8001148 <nrf24l01p_read_rx_fifo+0x44>)
 8001134:	f002 ff3c 	bl	8003fb0 <HAL_SPI_Receive>
    cs_high();
 8001138:	f7ff feb4 	bl	8000ea4 <cs_high>

    return status;
 800113c:	7bbb      	ldrb	r3, [r7, #14]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	200003c0 	.word	0x200003c0

0800114c <nrf24l01p_flush_rx_fifo>:

    return status;
}

void nrf24l01p_flush_rx_fifo()
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_RX;
 8001152:	23e2      	movs	r3, #226	@ 0xe2
 8001154:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8001156:	f7ff feb1 	bl	8000ebc <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 800115a:	1dba      	adds	r2, r7, #6
 800115c:	1df9      	adds	r1, r7, #7
 800115e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2301      	movs	r3, #1
 8001166:	4804      	ldr	r0, [pc, #16]	@ (8001178 <nrf24l01p_flush_rx_fifo+0x2c>)
 8001168:	f003 f83a 	bl	80041e0 <HAL_SPI_TransmitReceive>
    cs_high();
 800116c:	f7ff fe9a 	bl	8000ea4 <cs_high>
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	200003c0 	.word	0x200003c0

0800117c <nrf24l01p_flush_tx_fifo>:

void nrf24l01p_flush_tx_fifo()
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 8001182:	23e1      	movs	r3, #225	@ 0xe1
 8001184:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8001186:	f7ff fe99 	bl	8000ebc <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 800118a:	1dba      	adds	r2, r7, #6
 800118c:	1df9      	adds	r1, r7, #7
 800118e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2301      	movs	r3, #1
 8001196:	4804      	ldr	r0, [pc, #16]	@ (80011a8 <nrf24l01p_flush_tx_fifo+0x2c>)
 8001198:	f003 f822 	bl	80041e0 <HAL_SPI_TransmitReceive>
    cs_high();
 800119c:	f7ff fe82 	bl	8000ea4 <cs_high>
}
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	200003c0 	.word	0x200003c0

080011ac <nrf24l01p_get_status>:

uint8_t nrf24l01p_get_status()
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_NOP;
 80011b2:	23ff      	movs	r3, #255	@ 0xff
 80011b4:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 80011b6:	f7ff fe81 	bl	8000ebc <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80011ba:	1dba      	adds	r2, r7, #6
 80011bc:	1df9      	adds	r1, r7, #7
 80011be:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	2301      	movs	r3, #1
 80011c6:	4805      	ldr	r0, [pc, #20]	@ (80011dc <nrf24l01p_get_status+0x30>)
 80011c8:	f003 f80a 	bl	80041e0 <HAL_SPI_TransmitReceive>
    cs_high();
 80011cc:	f7ff fe6a 	bl	8000ea4 <cs_high>

    return status;
 80011d0:	79bb      	ldrb	r3, [r7, #6]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200003c0 	.word	0x200003c0

080011e0 <nrf24l01p_rx_set_payload_widths>:
{
    return read_register(NRF24L01P_REG_FIFO_STATUS);
}

void nrf24l01p_rx_set_payload_widths(widths bytes)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_RX_PW_P0, bytes);
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	4619      	mov	r1, r3
 80011ee:	2011      	movs	r0, #17
 80011f0:	f7ff feae 	bl	8000f50 <write_register>
}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <nrf24l01p_clear_rx_dr>:

void nrf24l01p_clear_rx_dr()
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 8001202:	f7ff ffd3 	bl	80011ac <nrf24l01p_get_status>
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x40;
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001210:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	4619      	mov	r1, r3
 8001216:	2007      	movs	r0, #7
 8001218:	f7ff fe9a 	bl	8000f50 <write_register>
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <nrf24l01p_power_up>:

    write_register(NRF24L01P_REG_STATUS, new_status);
}

void nrf24l01p_power_up()
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 800122a:	2000      	movs	r0, #0
 800122c:	f7ff fe6a 	bl	8000f04 <read_register>
 8001230:	4603      	mov	r3, r0
 8001232:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 1;
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	f043 0302 	orr.w	r3, r3, #2
 800123a:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	4619      	mov	r1, r3
 8001240:	2000      	movs	r0, #0
 8001242:	f7ff fe85 	bl	8000f50 <write_register>
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <nrf24l01p_set_crc_length>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_set_crc_length(length bytes)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b084      	sub	sp, #16
 8001252:	af00      	add	r7, sp, #0
 8001254:	4603      	mov	r3, r0
 8001256:	71fb      	strb	r3, [r7, #7]
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8001258:	2000      	movs	r0, #0
 800125a:	f7ff fe53 	bl	8000f04 <read_register>
 800125e:	4603      	mov	r3, r0
 8001260:	73fb      	strb	r3, [r7, #15]

    switch(bytes)
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d002      	beq.n	800126e <nrf24l01p_set_crc_length+0x20>
 8001268:	2b02      	cmp	r3, #2
 800126a:	d005      	beq.n	8001278 <nrf24l01p_set_crc_length+0x2a>
 800126c:	e009      	b.n	8001282 <nrf24l01p_set_crc_length+0x34>
    {
        // CRCO bit in CONFIG resiger set 0
        case 1:
            new_config &= 0xFB;
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	f023 0304 	bic.w	r3, r3, #4
 8001274:	73fb      	strb	r3, [r7, #15]
            break;
 8001276:	e004      	b.n	8001282 <nrf24l01p_set_crc_length+0x34>
        // CRCO bit in CONFIG resiger set 1
        case 2:
            new_config |= 1 << 2;
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	f043 0304 	orr.w	r3, r3, #4
 800127e:	73fb      	strb	r3, [r7, #15]
            break;
 8001280:	bf00      	nop
    }

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8001282:	7bfb      	ldrb	r3, [r7, #15]
 8001284:	4619      	mov	r1, r3
 8001286:	2000      	movs	r0, #0
 8001288:	f7ff fe62 	bl	8000f50 <write_register>
}
 800128c:	bf00      	nop
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <nrf24l01p_set_address_widths>:

void nrf24l01p_set_address_widths(widths bytes)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_SETUP_AW, bytes - 2);
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	3b02      	subs	r3, #2
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	4619      	mov	r1, r3
 80012a6:	2003      	movs	r0, #3
 80012a8:	f7ff fe52 	bl	8000f50 <write_register>
}
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <nrf24l01p_auto_retransmit_count>:

void nrf24l01p_auto_retransmit_count(count cnt)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 80012be:	2004      	movs	r0, #4
 80012c0:	f7ff fe20 	bl	8000f04 <read_register>
 80012c4:	4603      	mov	r3, r0
 80012c6:	73fb      	strb	r3, [r7, #15]

    // Reset ARC register 0
    new_setup_retr |= 0xF0;
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
 80012ca:	f063 030f 	orn	r3, r3, #15
 80012ce:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= cnt;
 80012d0:	7bfa      	ldrb	r2, [r7, #15]
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	4619      	mov	r1, r3
 80012dc:	2004      	movs	r0, #4
 80012de:	f7ff fe37 	bl	8000f50 <write_register>
}
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <nrf24l01p_auto_retransmit_delay>:

void nrf24l01p_auto_retransmit_delay(delay us)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	80fb      	strh	r3, [r7, #6]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 80012f6:	2004      	movs	r0, #4
 80012f8:	f7ff fe04 	bl	8000f04 <read_register>
 80012fc:	4603      	mov	r3, r0
 80012fe:	73fb      	strb	r3, [r7, #15]

    // Reset ARD register 0
    new_setup_retr |= 0x0F;
 8001300:	7bfb      	ldrb	r3, [r7, #15]
 8001302:	f043 030f 	orr.w	r3, r3, #15
 8001306:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= ((us / 250) - 1) << 4;
 8001308:	88fb      	ldrh	r3, [r7, #6]
 800130a:	4a0b      	ldr	r2, [pc, #44]	@ (8001338 <nrf24l01p_auto_retransmit_delay+0x4c>)
 800130c:	fba2 2303 	umull	r2, r3, r2, r3
 8001310:	091b      	lsrs	r3, r3, #4
 8001312:	b29b      	uxth	r3, r3
 8001314:	3b01      	subs	r3, #1
 8001316:	011b      	lsls	r3, r3, #4
 8001318:	b25a      	sxtb	r2, r3
 800131a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131e:	4313      	orrs	r3, r2
 8001320:	b25b      	sxtb	r3, r3
 8001322:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	4619      	mov	r1, r3
 8001328:	2004      	movs	r0, #4
 800132a:	f7ff fe11 	bl	8000f50 <write_register>
}
 800132e:	bf00      	nop
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	10624dd3 	.word	0x10624dd3

0800133c <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(channel MHz)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	80fb      	strh	r3, [r7, #6]
	uint16_t new_rf_ch = MHz - 2400;
 8001346:	88fb      	ldrh	r3, [r7, #6]
 8001348:	f5a3 6316 	sub.w	r3, r3, #2400	@ 0x960
 800134c:	81fb      	strh	r3, [r7, #14]
    write_register(NRF24L01P_REG_RF_CH, new_rf_ch);
 800134e:	89fb      	ldrh	r3, [r7, #14]
 8001350:	b2db      	uxtb	r3, r3
 8001352:	4619      	mov	r1, r3
 8001354:	2005      	movs	r0, #5
 8001356:	f7ff fdfb 	bl	8000f50 <write_register>
}
 800135a:	bf00      	nop
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <nrf24l01p_set_rf_tx_output_power>:

void nrf24l01p_set_rf_tx_output_power(output_power dBm)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b084      	sub	sp, #16
 8001366:	af00      	add	r7, sp, #0
 8001368:	4603      	mov	r3, r0
 800136a:	71fb      	strb	r3, [r7, #7]
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xF9;
 800136c:	2006      	movs	r0, #6
 800136e:	f7ff fdc9 	bl	8000f04 <read_register>
 8001372:	4603      	mov	r3, r0
 8001374:	f023 0306 	bic.w	r3, r3, #6
 8001378:	73fb      	strb	r3, [r7, #15]
    new_rf_setup |= (dBm << 1);
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	b25a      	sxtb	r2, r3
 8001380:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001384:	4313      	orrs	r3, r2
 8001386:	b25b      	sxtb	r3, r3
 8001388:	73fb      	strb	r3, [r7, #15]

    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 800138a:	7bfb      	ldrb	r3, [r7, #15]
 800138c:	4619      	mov	r1, r3
 800138e:	2006      	movs	r0, #6
 8001390:	f7ff fdde 	bl	8000f50 <write_register>
}
 8001394:	bf00      	nop
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <nrf24l01p_set_rf_air_data_rate>:

void nrf24l01p_set_rf_air_data_rate(air_data_rate bps)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
    // Set value to 0
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 80013a6:	2006      	movs	r0, #6
 80013a8:	f7ff fdac 	bl	8000f04 <read_register>
 80013ac:	4603      	mov	r3, r0
 80013ae:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 80013b2:	73fb      	strb	r3, [r7, #15]

    switch(bps)
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d00a      	beq.n	80013d0 <nrf24l01p_set_rf_air_data_rate+0x34>
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	dc0e      	bgt.n	80013dc <nrf24l01p_set_rf_air_data_rate+0x40>
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d00b      	beq.n	80013da <nrf24l01p_set_rf_air_data_rate+0x3e>
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d10a      	bne.n	80013dc <nrf24l01p_set_rf_air_data_rate+0x40>
    {
        case _1Mbps:
            break;
        case _2Mbps:
            new_rf_setup |= 1 << 3;
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	f043 0308 	orr.w	r3, r3, #8
 80013cc:	73fb      	strb	r3, [r7, #15]
            break;
 80013ce:	e005      	b.n	80013dc <nrf24l01p_set_rf_air_data_rate+0x40>
        case _250kbps:
            new_rf_setup |= 1 << 5;
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
 80013d2:	f043 0320 	orr.w	r3, r3, #32
 80013d6:	73fb      	strb	r3, [r7, #15]
            break;
 80013d8:	e000      	b.n	80013dc <nrf24l01p_set_rf_air_data_rate+0x40>
            break;
 80013da:	bf00      	nop
    }
    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
 80013de:	4619      	mov	r1, r3
 80013e0:	2006      	movs	r0, #6
 80013e2:	f7ff fdb5 	bl	8000f50 <write_register>
}
 80013e6:	bf00      	nop
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <Set_LED>:

/*
 * Funciones
 */
void Set_LED(TIRA_t* regleta,uint8_t led_num,uint8_t R,uint8_t G,uint8_t B)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b083      	sub	sp, #12
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
 80013f6:	4608      	mov	r0, r1
 80013f8:	4611      	mov	r1, r2
 80013fa:	461a      	mov	r2, r3
 80013fc:	4603      	mov	r3, r0
 80013fe:	70fb      	strb	r3, [r7, #3]
 8001400:	460b      	mov	r3, r1
 8001402:	70bb      	strb	r3, [r7, #2]
 8001404:	4613      	mov	r3, r2
 8001406:	707b      	strb	r3, [r7, #1]
	regleta->LEDS[led_num].RGB[0] = R;
 8001408:	78fa      	ldrb	r2, [r7, #3]
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	4613      	mov	r3, r2
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	4413      	add	r3, r2
 8001412:	440b      	add	r3, r1
 8001414:	78ba      	ldrb	r2, [r7, #2]
 8001416:	701a      	strb	r2, [r3, #0]
	regleta->LEDS[led_num].RGB[1] = G;
 8001418:	78fa      	ldrb	r2, [r7, #3]
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	4613      	mov	r3, r2
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	4413      	add	r3, r2
 8001422:	440b      	add	r3, r1
 8001424:	3301      	adds	r3, #1
 8001426:	787a      	ldrb	r2, [r7, #1]
 8001428:	701a      	strb	r2, [r3, #0]
	regleta->LEDS[led_num].RGB[2] = B;
 800142a:	78fa      	ldrb	r2, [r7, #3]
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	4613      	mov	r3, r2
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	4413      	add	r3, r2
 8001434:	440b      	add	r3, r1
 8001436:	3302      	adds	r3, #2
 8001438:	7c3a      	ldrb	r2, [r7, #16]
 800143a:	701a      	strb	r2, [r3, #0]
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <Init_tira>:

void Init_tira(TIRA_t* regleta)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af02      	add	r7, sp, #8
 800144e:	6078      	str	r0, [r7, #4]
	regleta->datasentflag = 0;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	631a      	str	r2, [r3, #48]	@ 0x30
	for (int num=0;num<MAX_LED;num++) {
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	e00b      	b.n	8001474 <Init_tira+0x2c>
		Set_LED(regleta,num,0,0,0);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	b2d9      	uxtb	r1, r3
 8001460:	2300      	movs	r3, #0
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	2300      	movs	r3, #0
 8001466:	2200      	movs	r2, #0
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff ffc0 	bl	80013ee <Set_LED>
	for (int num=0;num<MAX_LED;num++) {
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	3301      	adds	r3, #1
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2b0f      	cmp	r3, #15
 8001478:	ddf0      	ble.n	800145c <Init_tira+0x14>
	}
}
 800147a:	bf00      	nop
 800147c:	bf00      	nop
 800147e:	3710      	adds	r7, #16
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <WS2812_Send>:

void WS2812_Send (TIRA_t* regleta)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b088      	sub	sp, #32
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
	uint32_t indx = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
	uint32_t color; //8bits_G 8bits_R 8bits_B

	//Iteramos N leds rgb de la tira
	for (int led_num=0; led_num<MAX_LED; led_num++)
 8001490:	2300      	movs	r3, #0
 8001492:	61bb      	str	r3, [r7, #24]
 8001494:	e03e      	b.n	8001514 <WS2812_Send+0x90>
	{
		color = ((regleta->LEDS[led_num].RGB[1]<<16) | (regleta->LEDS[led_num].RGB[0]<<8) | (regleta->LEDS[led_num].RGB[2]));
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4613      	mov	r3, r2
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	4413      	add	r3, r2
 80014a0:	440b      	add	r3, r1
 80014a2:	3301      	adds	r3, #1
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	0419      	lsls	r1, r3, #16
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4613      	mov	r3, r2
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	4413      	add	r3, r2
 80014b2:	4403      	add	r3, r0
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	021b      	lsls	r3, r3, #8
 80014b8:	4319      	orrs	r1, r3
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4613      	mov	r3, r2
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	4413      	add	r3, r2
 80014c4:	4403      	add	r3, r0
 80014c6:	3302      	adds	r3, #2
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	430b      	orrs	r3, r1
 80014cc:	60fb      	str	r3, [r7, #12]

		for (int i=23; i>=0; i--)//Iteramos por la trama total
 80014ce:	2317      	movs	r3, #23
 80014d0:	617b      	str	r3, [r7, #20]
 80014d2:	e019      	b.n	8001508 <WS2812_Send+0x84>
		{
			if (color&(1<<i))//Enmascaramos para sacar los bits
 80014d4:	2201      	movs	r2, #1
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	461a      	mov	r2, r3
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	4013      	ands	r3, r2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d005      	beq.n	80014f2 <WS2812_Send+0x6e>
			{
				//Logico 1
				pwmData[indx] = 66;  // 2/3 de 99
 80014e6:	4a1f      	ldr	r2, [pc, #124]	@ (8001564 <WS2812_Send+0xe0>)
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	2142      	movs	r1, #66	@ 0x42
 80014ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80014f0:	e004      	b.n	80014fc <WS2812_Send+0x78>
			}
			else
			{
				//Logico 0
				pwmData[indx] = 33;  // 1/3 de 99
 80014f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001564 <WS2812_Send+0xe0>)
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	2121      	movs	r1, #33	@ 0x21
 80014f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			indx++;
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	3301      	adds	r3, #1
 8001500:	61fb      	str	r3, [r7, #28]
		for (int i=23; i>=0; i--)//Iteramos por la trama total
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	3b01      	subs	r3, #1
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	2b00      	cmp	r3, #0
 800150c:	dae2      	bge.n	80014d4 <WS2812_Send+0x50>
	for (int led_num=0; led_num<MAX_LED; led_num++)
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	3301      	adds	r3, #1
 8001512:	61bb      	str	r3, [r7, #24]
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	2b0f      	cmp	r3, #15
 8001518:	ddbd      	ble.n	8001496 <WS2812_Send+0x12>
		}
	}

	//Llenamos de ceros RESET
	for (int i=0; i<50; i++)
 800151a:	2300      	movs	r3, #0
 800151c:	613b      	str	r3, [r7, #16]
 800151e:	e00a      	b.n	8001536 <WS2812_Send+0xb2>
	{
		pwmData[indx] = 0;
 8001520:	4a10      	ldr	r2, [pc, #64]	@ (8001564 <WS2812_Send+0xe0>)
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	2100      	movs	r1, #0
 8001526:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3301      	adds	r3, #1
 800152e:	61fb      	str	r3, [r7, #28]
	for (int i=0; i<50; i++)
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	3301      	adds	r3, #1
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	2b31      	cmp	r3, #49	@ 0x31
 800153a:	ddf1      	ble.n	8001520 <WS2812_Send+0x9c>
	}

	//Mandamos data al DMA
	HAL_TIM_PWM_Start_DMA(pwm_timer, pwm_channel, (uint32_t *)pwmData, indx);
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	b29b      	uxth	r3, r3
 8001540:	4a08      	ldr	r2, [pc, #32]	@ (8001564 <WS2812_Send+0xe0>)
 8001542:	2100      	movs	r1, #0
 8001544:	4808      	ldr	r0, [pc, #32]	@ (8001568 <WS2812_Send+0xe4>)
 8001546:	f003 f9e5 	bl	8004914 <HAL_TIM_PWM_Start_DMA>
	while (!regleta->datasentflag){};
 800154a:	bf00      	nop
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001550:	2b00      	cmp	r3, #0
 8001552:	d0fb      	beq.n	800154c <WS2812_Send+0xc8>
	regleta->datasentflag = 0;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800155a:	bf00      	nop
 800155c:	3720      	adds	r7, #32
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000028 	.word	0x20000028
 8001568:	20000418 	.word	0x20000418

0800156c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001570:	f001 f824 	bl	80025bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001574:	f000 f848 	bl	8001608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001578:	f000 f9a4 	bl	80018c4 <MX_GPIO_Init>
  MX_DMA_Init();
 800157c:	f000 f982 	bl	8001884 <MX_DMA_Init>
  MX_TIM1_Init();
 8001580:	f000 f8e0 	bl	8001744 <MX_TIM1_Init>
  MX_SPI1_Init();
 8001584:	f000 f8a8 	bl	80016d8 <MX_SPI1_Init>
  /*
   * Configuramos el transciver
   * CANAL 2500Mhz
   * Baudrate en 1Mbps
   */
  nrf24l01p_rx_init(2500, _1Mbps);
 8001588:	2100      	movs	r1, #0
 800158a:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 800158e:	f7ff fd0d 	bl	8000fac <nrf24l01p_rx_init>

  //inicializamos la bandera de la tira
  Init_tira(&regleta_leds);
 8001592:	481b      	ldr	r0, [pc, #108]	@ (8001600 <main+0x94>)
 8001594:	f7ff ff58 	bl	8001448 <Init_tira>
  WS2812_Send(&regleta_leds);
 8001598:	4819      	ldr	r0, [pc, #100]	@ (8001600 <main+0x94>)
 800159a:	f7ff ff73 	bl	8001484 <WS2812_Send>
	  /*
	   * Maquina de estados para
	   * efectos de RGB
	   */

	if(rx_data[0])
 800159e:	4b19      	ldr	r3, [pc, #100]	@ (8001604 <main+0x98>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d024      	beq.n	80015f0 <main+0x84>
	{
		switch (rx_data[1])
 80015a6:	4b17      	ldr	r3, [pc, #92]	@ (8001604 <main+0x98>)
 80015a8:	785b      	ldrb	r3, [r3, #1]
 80015aa:	2b05      	cmp	r3, #5
 80015ac:	d826      	bhi.n	80015fc <main+0x90>
 80015ae:	a201      	add	r2, pc, #4	@ (adr r2, 80015b4 <main+0x48>)
 80015b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b4:	080015cd 	.word	0x080015cd
 80015b8:	080015d3 	.word	0x080015d3
 80015bc:	080015d9 	.word	0x080015d9
 80015c0:	080015df 	.word	0x080015df
 80015c4:	080015e5 	.word	0x080015e5
 80015c8:	080015eb 	.word	0x080015eb
		{//EFECTOS DE RGB
			case 0:
				EFECTO1();
 80015cc:	f000 fa4c 	bl	8001a68 <EFECTO1>
				break;
 80015d0:	e015      	b.n	80015fe <main+0x92>
			case 1:
				EFECTO2();
 80015d2:	f000 fb49 	bl	8001c68 <EFECTO2>
				break;
 80015d6:	e012      	b.n	80015fe <main+0x92>
			case 2:
				EFECTO3();
 80015d8:	f000 fbba 	bl	8001d50 <EFECTO3>
				break;
 80015dc:	e00f      	b.n	80015fe <main+0x92>
			case 3:
				EFECTO4();
 80015de:	f000 fc2b 	bl	8001e38 <EFECTO4>
				break;
 80015e2:	e00c      	b.n	80015fe <main+0x92>
			case 4:
				EFECTO5();
 80015e4:	f000 fd2c 	bl	8002040 <EFECTO5>
				break;
 80015e8:	e009      	b.n	80015fe <main+0x92>
			case 5:
				ONOFF();
 80015ea:	f000 fa19 	bl	8001a20 <ONOFF>
				break;
 80015ee:	e006      	b.n	80015fe <main+0x92>
			default:
				break;
		}
	}else
	{//EFECTOS DE LUZ BLANCA
		LUZ_BLANCA(rx_data[2]);
 80015f0:	4b04      	ldr	r3, [pc, #16]	@ (8001604 <main+0x98>)
 80015f2:	789b      	ldrb	r3, [r3, #2]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f000 fe23 	bl	8002240 <LUZ_BLANCA>
 80015fa:	e7d0      	b.n	800159e <main+0x32>
				break;
 80015fc:	bf00      	nop
	if(rx_data[0])
 80015fe:	e7ce      	b.n	800159e <main+0x32>
 8001600:	2000038c 	.word	0x2000038c
 8001604:	200004c0 	.word	0x200004c0

08001608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b094      	sub	sp, #80	@ 0x50
 800160c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800160e:	f107 0320 	add.w	r3, r7, #32
 8001612:	2230      	movs	r2, #48	@ 0x30
 8001614:	2100      	movs	r1, #0
 8001616:	4618      	mov	r0, r3
 8001618:	f004 f9f8 	bl	8005a0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800161c:	f107 030c 	add.w	r3, r7, #12
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800162c:	2300      	movs	r3, #0
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	4b27      	ldr	r3, [pc, #156]	@ (80016d0 <SystemClock_Config+0xc8>)
 8001632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001634:	4a26      	ldr	r2, [pc, #152]	@ (80016d0 <SystemClock_Config+0xc8>)
 8001636:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800163a:	6413      	str	r3, [r2, #64]	@ 0x40
 800163c:	4b24      	ldr	r3, [pc, #144]	@ (80016d0 <SystemClock_Config+0xc8>)
 800163e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001640:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001648:	2300      	movs	r3, #0
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	4b21      	ldr	r3, [pc, #132]	@ (80016d4 <SystemClock_Config+0xcc>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a20      	ldr	r2, [pc, #128]	@ (80016d4 <SystemClock_Config+0xcc>)
 8001652:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001656:	6013      	str	r3, [r2, #0]
 8001658:	4b1e      	ldr	r3, [pc, #120]	@ (80016d4 <SystemClock_Config+0xcc>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001660:	607b      	str	r3, [r7, #4]
 8001662:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001664:	2301      	movs	r3, #1
 8001666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001668:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800166c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800166e:	2302      	movs	r3, #2
 8001670:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001672:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001676:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 20;
 8001678:	2314      	movs	r3, #20
 800167a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 800167c:	23a0      	movs	r3, #160	@ 0xa0
 800167e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001680:	2302      	movs	r3, #2
 8001682:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001684:	2304      	movs	r3, #4
 8001686:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001688:	f107 0320 	add.w	r3, r7, #32
 800168c:	4618      	mov	r0, r3
 800168e:	f001 fe9f 	bl	80033d0 <HAL_RCC_OscConfig>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001698:	f000 fe02 	bl	80022a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800169c:	230f      	movs	r3, #15
 800169e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016a0:	2302      	movs	r3, #2
 80016a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80016b2:	f107 030c 	add.w	r3, r7, #12
 80016b6:	2103      	movs	r1, #3
 80016b8:	4618      	mov	r0, r3
 80016ba:	f002 f901 	bl	80038c0 <HAL_RCC_ClockConfig>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80016c4:	f000 fdec 	bl	80022a0 <Error_Handler>
  }
}
 80016c8:	bf00      	nop
 80016ca:	3750      	adds	r7, #80	@ 0x50
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40007000 	.word	0x40007000

080016d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016dc:	4b17      	ldr	r3, [pc, #92]	@ (800173c <MX_SPI1_Init+0x64>)
 80016de:	4a18      	ldr	r2, [pc, #96]	@ (8001740 <MX_SPI1_Init+0x68>)
 80016e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016e2:	4b16      	ldr	r3, [pc, #88]	@ (800173c <MX_SPI1_Init+0x64>)
 80016e4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80016e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016ea:	4b14      	ldr	r3, [pc, #80]	@ (800173c <MX_SPI1_Init+0x64>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016f0:	4b12      	ldr	r3, [pc, #72]	@ (800173c <MX_SPI1_Init+0x64>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016f6:	4b11      	ldr	r3, [pc, #68]	@ (800173c <MX_SPI1_Init+0x64>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016fc:	4b0f      	ldr	r3, [pc, #60]	@ (800173c <MX_SPI1_Init+0x64>)
 80016fe:	2200      	movs	r2, #0
 8001700:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001702:	4b0e      	ldr	r3, [pc, #56]	@ (800173c <MX_SPI1_Init+0x64>)
 8001704:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001708:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800170a:	4b0c      	ldr	r3, [pc, #48]	@ (800173c <MX_SPI1_Init+0x64>)
 800170c:	2218      	movs	r2, #24
 800170e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001710:	4b0a      	ldr	r3, [pc, #40]	@ (800173c <MX_SPI1_Init+0x64>)
 8001712:	2200      	movs	r2, #0
 8001714:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001716:	4b09      	ldr	r3, [pc, #36]	@ (800173c <MX_SPI1_Init+0x64>)
 8001718:	2200      	movs	r2, #0
 800171a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800171c:	4b07      	ldr	r3, [pc, #28]	@ (800173c <MX_SPI1_Init+0x64>)
 800171e:	2200      	movs	r2, #0
 8001720:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001722:	4b06      	ldr	r3, [pc, #24]	@ (800173c <MX_SPI1_Init+0x64>)
 8001724:	220a      	movs	r2, #10
 8001726:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001728:	4804      	ldr	r0, [pc, #16]	@ (800173c <MX_SPI1_Init+0x64>)
 800172a:	f002 fa75 	bl	8003c18 <HAL_SPI_Init>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001734:	f000 fdb4 	bl	80022a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}
 800173c:	200003c0 	.word	0x200003c0
 8001740:	40013000 	.word	0x40013000

08001744 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b096      	sub	sp, #88	@ 0x58
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800174a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]
 8001756:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001758:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001762:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]
 800176c:	609a      	str	r2, [r3, #8]
 800176e:	60da      	str	r2, [r3, #12]
 8001770:	611a      	str	r2, [r3, #16]
 8001772:	615a      	str	r2, [r3, #20]
 8001774:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	2220      	movs	r2, #32
 800177a:	2100      	movs	r1, #0
 800177c:	4618      	mov	r0, r3
 800177e:	f004 f945 	bl	8005a0c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001782:	4b3e      	ldr	r3, [pc, #248]	@ (800187c <MX_TIM1_Init+0x138>)
 8001784:	4a3e      	ldr	r2, [pc, #248]	@ (8001880 <MX_TIM1_Init+0x13c>)
 8001786:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001788:	4b3c      	ldr	r3, [pc, #240]	@ (800187c <MX_TIM1_Init+0x138>)
 800178a:	2200      	movs	r2, #0
 800178c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800178e:	4b3b      	ldr	r3, [pc, #236]	@ (800187c <MX_TIM1_Init+0x138>)
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001794:	4b39      	ldr	r3, [pc, #228]	@ (800187c <MX_TIM1_Init+0x138>)
 8001796:	2263      	movs	r2, #99	@ 0x63
 8001798:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800179a:	4b38      	ldr	r3, [pc, #224]	@ (800187c <MX_TIM1_Init+0x138>)
 800179c:	2200      	movs	r2, #0
 800179e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017a0:	4b36      	ldr	r3, [pc, #216]	@ (800187c <MX_TIM1_Init+0x138>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017a6:	4b35      	ldr	r3, [pc, #212]	@ (800187c <MX_TIM1_Init+0x138>)
 80017a8:	2280      	movs	r2, #128	@ 0x80
 80017aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017ac:	4833      	ldr	r0, [pc, #204]	@ (800187c <MX_TIM1_Init+0x138>)
 80017ae:	f003 f809 	bl	80047c4 <HAL_TIM_Base_Init>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80017b8:	f000 fd72 	bl	80022a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017c2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80017c6:	4619      	mov	r1, r3
 80017c8:	482c      	ldr	r0, [pc, #176]	@ (800187c <MX_TIM1_Init+0x138>)
 80017ca:	f003 fbdb 	bl	8004f84 <HAL_TIM_ConfigClockSource>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80017d4:	f000 fd64 	bl	80022a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017d8:	4828      	ldr	r0, [pc, #160]	@ (800187c <MX_TIM1_Init+0x138>)
 80017da:	f003 f842 	bl	8004862 <HAL_TIM_PWM_Init>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80017e4:	f000 fd5c 	bl	80022a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017e8:	2300      	movs	r3, #0
 80017ea:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017f0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80017f4:	4619      	mov	r1, r3
 80017f6:	4821      	ldr	r0, [pc, #132]	@ (800187c <MX_TIM1_Init+0x138>)
 80017f8:	f004 f848 	bl	800588c <HAL_TIMEx_MasterConfigSynchronization>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001802:	f000 fd4d 	bl	80022a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001806:	2360      	movs	r3, #96	@ 0x60
 8001808:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800180a:	2300      	movs	r3, #0
 800180c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800180e:	2300      	movs	r3, #0
 8001810:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001812:	2300      	movs	r3, #0
 8001814:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001816:	2300      	movs	r3, #0
 8001818:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800181a:	2300      	movs	r3, #0
 800181c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800181e:	2300      	movs	r3, #0
 8001820:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001822:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001826:	2200      	movs	r2, #0
 8001828:	4619      	mov	r1, r3
 800182a:	4814      	ldr	r0, [pc, #80]	@ (800187c <MX_TIM1_Init+0x138>)
 800182c:	f003 fae8 	bl	8004e00 <HAL_TIM_PWM_ConfigChannel>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001836:	f000 fd33 	bl	80022a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800183a:	2300      	movs	r3, #0
 800183c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800183e:	2300      	movs	r3, #0
 8001840:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001846:	2300      	movs	r3, #0
 8001848:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800184a:	2300      	movs	r3, #0
 800184c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800184e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001852:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001854:	2300      	movs	r3, #0
 8001856:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001858:	1d3b      	adds	r3, r7, #4
 800185a:	4619      	mov	r1, r3
 800185c:	4807      	ldr	r0, [pc, #28]	@ (800187c <MX_TIM1_Init+0x138>)
 800185e:	f004 f883 	bl	8005968 <HAL_TIMEx_ConfigBreakDeadTime>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001868:	f000 fd1a 	bl	80022a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800186c:	4803      	ldr	r0, [pc, #12]	@ (800187c <MX_TIM1_Init+0x138>)
 800186e:	f000 fde7 	bl	8002440 <HAL_TIM_MspPostInit>

}
 8001872:	bf00      	nop
 8001874:	3758      	adds	r7, #88	@ 0x58
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000418 	.word	0x20000418
 8001880:	40010000 	.word	0x40010000

08001884 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	607b      	str	r3, [r7, #4]
 800188e:	4b0c      	ldr	r3, [pc, #48]	@ (80018c0 <MX_DMA_Init+0x3c>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	4a0b      	ldr	r2, [pc, #44]	@ (80018c0 <MX_DMA_Init+0x3c>)
 8001894:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001898:	6313      	str	r3, [r2, #48]	@ 0x30
 800189a:	4b09      	ldr	r3, [pc, #36]	@ (80018c0 <MX_DMA_Init+0x3c>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018a2:	607b      	str	r3, [r7, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80018a6:	2200      	movs	r2, #0
 80018a8:	2100      	movs	r1, #0
 80018aa:	2039      	movs	r0, #57	@ 0x39
 80018ac:	f000 fff7 	bl	800289e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80018b0:	2039      	movs	r0, #57	@ 0x39
 80018b2:	f001 f810 	bl	80028d6 <HAL_NVIC_EnableIRQ>

}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40023800 	.word	0x40023800

080018c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08a      	sub	sp, #40	@ 0x28
 80018c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ca:	f107 0314 	add.w	r3, r7, #20
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	605a      	str	r2, [r3, #4]
 80018d4:	609a      	str	r2, [r3, #8]
 80018d6:	60da      	str	r2, [r3, #12]
 80018d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	613b      	str	r3, [r7, #16]
 80018de:	4b3a      	ldr	r3, [pc, #232]	@ (80019c8 <MX_GPIO_Init+0x104>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e2:	4a39      	ldr	r2, [pc, #228]	@ (80019c8 <MX_GPIO_Init+0x104>)
 80018e4:	f043 0304 	orr.w	r3, r3, #4
 80018e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ea:	4b37      	ldr	r3, [pc, #220]	@ (80019c8 <MX_GPIO_Init+0x104>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ee:	f003 0304 	and.w	r3, r3, #4
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	4b33      	ldr	r3, [pc, #204]	@ (80019c8 <MX_GPIO_Init+0x104>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	4a32      	ldr	r2, [pc, #200]	@ (80019c8 <MX_GPIO_Init+0x104>)
 8001900:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001904:	6313      	str	r3, [r2, #48]	@ 0x30
 8001906:	4b30      	ldr	r3, [pc, #192]	@ (80019c8 <MX_GPIO_Init+0x104>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	60bb      	str	r3, [r7, #8]
 8001916:	4b2c      	ldr	r3, [pc, #176]	@ (80019c8 <MX_GPIO_Init+0x104>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	4a2b      	ldr	r2, [pc, #172]	@ (80019c8 <MX_GPIO_Init+0x104>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	6313      	str	r3, [r2, #48]	@ 0x30
 8001922:	4b29      	ldr	r3, [pc, #164]	@ (80019c8 <MX_GPIO_Init+0x104>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	60bb      	str	r3, [r7, #8]
 800192c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	4b25      	ldr	r3, [pc, #148]	@ (80019c8 <MX_GPIO_Init+0x104>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	4a24      	ldr	r2, [pc, #144]	@ (80019c8 <MX_GPIO_Init+0x104>)
 8001938:	f043 0302 	orr.w	r3, r3, #2
 800193c:	6313      	str	r3, [r2, #48]	@ 0x30
 800193e:	4b22      	ldr	r3, [pc, #136]	@ (80019c8 <MX_GPIO_Init+0x104>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	607b      	str	r3, [r7, #4]
 8001948:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800194a:	2201      	movs	r2, #1
 800194c:	2110      	movs	r1, #16
 800194e:	481f      	ldr	r0, [pc, #124]	@ (80019cc <MX_GPIO_Init+0x108>)
 8001950:	f001 fcf2 	bl	8003338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8001954:	2200      	movs	r2, #0
 8001956:	2101      	movs	r1, #1
 8001958:	481d      	ldr	r0, [pc, #116]	@ (80019d0 <MX_GPIO_Init+0x10c>)
 800195a:	f001 fced 	bl	8003338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 800195e:	2308      	movs	r3, #8
 8001960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001962:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001966:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 800196c:	f107 0314 	add.w	r3, r7, #20
 8001970:	4619      	mov	r1, r3
 8001972:	4816      	ldr	r0, [pc, #88]	@ (80019cc <MX_GPIO_Init+0x108>)
 8001974:	f001 fb5c 	bl	8003030 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8001978:	2310      	movs	r3, #16
 800197a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197c:	2301      	movs	r3, #1
 800197e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001984:	2303      	movs	r3, #3
 8001986:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	4619      	mov	r1, r3
 800198e:	480f      	ldr	r0, [pc, #60]	@ (80019cc <MX_GPIO_Init+0x108>)
 8001990:	f001 fb4e 	bl	8003030 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_Pin */
  GPIO_InitStruct.Pin = EN_Pin;
 8001994:	2301      	movs	r3, #1
 8001996:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001998:	2301      	movs	r3, #1
 800199a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019a0:	2302      	movs	r3, #2
 80019a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	4619      	mov	r1, r3
 80019aa:	4809      	ldr	r0, [pc, #36]	@ (80019d0 <MX_GPIO_Init+0x10c>)
 80019ac:	f001 fb40 	bl	8003030 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80019b0:	2200      	movs	r2, #0
 80019b2:	2100      	movs	r1, #0
 80019b4:	2009      	movs	r0, #9
 80019b6:	f000 ff72 	bl	800289e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80019ba:	2009      	movs	r0, #9
 80019bc:	f000 ff8b 	bl	80028d6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019c0:	bf00      	nop
 80019c2:	3728      	adds	r7, #40	@ 0x28
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40023800 	.word	0x40023800
 80019cc:	40020000 	.word	0x40020000
 80019d0:	40020400 	.word	0x40020400

080019d4 <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80019dc:	2100      	movs	r1, #0
 80019de:	4805      	ldr	r0, [pc, #20]	@ (80019f4 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80019e0:	f003 f948 	bl	8004c74 <HAL_TIM_PWM_Stop_DMA>
	regleta_leds.datasentflag = 1;
 80019e4:	4b04      	ldr	r3, [pc, #16]	@ (80019f8 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000418 	.word	0x20000418
 80019f8:	2000038c 	.word	0x2000038c

080019fc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF24L01P_IRQ_PIN_NUMBER)
 8001a06:	88fb      	ldrh	r3, [r7, #6]
 8001a08:	2b08      	cmp	r3, #8
 8001a0a:	d102      	bne.n	8001a12 <HAL_GPIO_EXTI_Callback+0x16>
		nrf24l01p_rx_receive(rx_data); // read data when data ready flag is set
 8001a0c:	4803      	ldr	r0, [pc, #12]	@ (8001a1c <HAL_GPIO_EXTI_Callback+0x20>)
 8001a0e:	f7ff fafb 	bl	8001008 <nrf24l01p_rx_receive>
}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200004c0 	.word	0x200004c0

08001a20 <ONOFF>:
/*
 * ONOFF
 */
void ONOFF(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af02      	add	r7, sp, #8
	//Actualizamos los valores
	for (int num=0;num<MAX_LED;num++) {
 8001a26:	2300      	movs	r3, #0
 8001a28:	607b      	str	r3, [r7, #4]
 8001a2a:	e00b      	b.n	8001a44 <ONOFF+0x24>
		Set_LED(&regleta_leds,num,0,0,0);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	b2d9      	uxtb	r1, r3
 8001a30:	2300      	movs	r3, #0
 8001a32:	9300      	str	r3, [sp, #0]
 8001a34:	2300      	movs	r3, #0
 8001a36:	2200      	movs	r2, #0
 8001a38:	4809      	ldr	r0, [pc, #36]	@ (8001a60 <ONOFF+0x40>)
 8001a3a:	f7ff fcd8 	bl	80013ee <Set_LED>
	for (int num=0;num<MAX_LED;num++) {
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3301      	adds	r3, #1
 8001a42:	607b      	str	r3, [r7, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b0f      	cmp	r3, #15
 8001a48:	ddf0      	ble.n	8001a2c <ONOFF+0xc>
	}

	//Mandamos los valores
	WS2812_Send(&regleta_leds);
 8001a4a:	4805      	ldr	r0, [pc, #20]	@ (8001a60 <ONOFF+0x40>)
 8001a4c:	f7ff fd1a 	bl	8001484 <WS2812_Send>

	HAL_Delay(25);
 8001a50:	2019      	movs	r0, #25
 8001a52:	f000 fe25 	bl	80026a0 <HAL_Delay>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	2000038c 	.word	0x2000038c
 8001a64:	00000000 	.word	0x00000000

08001a68 <EFECTO1>:
 * EFECTOS RGB
 */
uint8_t colores[3] = {0};
float N = 0; //timepo en iteracion
void EFECTO1(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af02      	add	r7, sp, #8
	//Calculamos los colores para dar efecto
	colores[0] = (uint8_t)(254.0*((sin(N           )+1.0)/2.0));
 8001a6e:	4b7a      	ldr	r3, [pc, #488]	@ (8001c58 <EFECTO1+0x1f0>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7fe fd14 	bl	80004a0 <__aeabi_f2d>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	ec43 2b10 	vmov	d0, r2, r3
 8001a80:	f003 fff2 	bl	8005a68 <sin>
 8001a84:	ec51 0b10 	vmov	r0, r1, d0
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	4b73      	ldr	r3, [pc, #460]	@ (8001c5c <EFECTO1+0x1f4>)
 8001a8e:	f7fe fba9 	bl	80001e4 <__adddf3>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	4610      	mov	r0, r2
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001aa2:	f7fe fe7f 	bl	80007a4 <__aeabi_ddiv>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4619      	mov	r1, r3
 8001aae:	a362      	add	r3, pc, #392	@ (adr r3, 8001c38 <EFECTO1+0x1d0>)
 8001ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab4:	f7fe fd4c 	bl	8000550 <__aeabi_dmul>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4610      	mov	r0, r2
 8001abe:	4619      	mov	r1, r3
 8001ac0:	f7ff f808 	bl	8000ad4 <__aeabi_d2uiz>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	4b65      	ldr	r3, [pc, #404]	@ (8001c60 <EFECTO1+0x1f8>)
 8001aca:	701a      	strb	r2, [r3, #0]
	colores[1] = (uint8_t)(254.0*((sin(N + (2.0*PI)/3)+1.0)/2.0));
 8001acc:	4b62      	ldr	r3, [pc, #392]	@ (8001c58 <EFECTO1+0x1f0>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7fe fce5 	bl	80004a0 <__aeabi_f2d>
 8001ad6:	a35a      	add	r3, pc, #360	@ (adr r3, 8001c40 <EFECTO1+0x1d8>)
 8001ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001adc:	f7fe fb82 	bl	80001e4 <__adddf3>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	ec43 2b17 	vmov	d7, r2, r3
 8001ae8:	eeb0 0a47 	vmov.f32	s0, s14
 8001aec:	eef0 0a67 	vmov.f32	s1, s15
 8001af0:	f003 ffba 	bl	8005a68 <sin>
 8001af4:	ec51 0b10 	vmov	r0, r1, d0
 8001af8:	f04f 0200 	mov.w	r2, #0
 8001afc:	4b57      	ldr	r3, [pc, #348]	@ (8001c5c <EFECTO1+0x1f4>)
 8001afe:	f7fe fb71 	bl	80001e4 <__adddf3>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4610      	mov	r0, r2
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b12:	f7fe fe47 	bl	80007a4 <__aeabi_ddiv>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4610      	mov	r0, r2
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	a346      	add	r3, pc, #280	@ (adr r3, 8001c38 <EFECTO1+0x1d0>)
 8001b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b24:	f7fe fd14 	bl	8000550 <__aeabi_dmul>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	4619      	mov	r1, r3
 8001b30:	f7fe ffd0 	bl	8000ad4 <__aeabi_d2uiz>
 8001b34:	4603      	mov	r3, r0
 8001b36:	b2da      	uxtb	r2, r3
 8001b38:	4b49      	ldr	r3, [pc, #292]	@ (8001c60 <EFECTO1+0x1f8>)
 8001b3a:	705a      	strb	r2, [r3, #1]
	colores[2] = (uint8_t)(254.0*((sin(N - (2.0*PI)/3)+1.0)/2.0));
 8001b3c:	4b46      	ldr	r3, [pc, #280]	@ (8001c58 <EFECTO1+0x1f0>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7fe fcad 	bl	80004a0 <__aeabi_f2d>
 8001b46:	a33e      	add	r3, pc, #248	@ (adr r3, 8001c40 <EFECTO1+0x1d8>)
 8001b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4c:	f7fe fb48 	bl	80001e0 <__aeabi_dsub>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	ec43 2b17 	vmov	d7, r2, r3
 8001b58:	eeb0 0a47 	vmov.f32	s0, s14
 8001b5c:	eef0 0a67 	vmov.f32	s1, s15
 8001b60:	f003 ff82 	bl	8005a68 <sin>
 8001b64:	ec51 0b10 	vmov	r0, r1, d0
 8001b68:	f04f 0200 	mov.w	r2, #0
 8001b6c:	4b3b      	ldr	r3, [pc, #236]	@ (8001c5c <EFECTO1+0x1f4>)
 8001b6e:	f7fe fb39 	bl	80001e4 <__adddf3>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	4610      	mov	r0, r2
 8001b78:	4619      	mov	r1, r3
 8001b7a:	f04f 0200 	mov.w	r2, #0
 8001b7e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b82:	f7fe fe0f 	bl	80007a4 <__aeabi_ddiv>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	a32a      	add	r3, pc, #168	@ (adr r3, 8001c38 <EFECTO1+0x1d0>)
 8001b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b94:	f7fe fcdc 	bl	8000550 <__aeabi_dmul>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	4610      	mov	r0, r2
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	f7fe ff98 	bl	8000ad4 <__aeabi_d2uiz>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	4b2d      	ldr	r3, [pc, #180]	@ (8001c60 <EFECTO1+0x1f8>)
 8001baa:	709a      	strb	r2, [r3, #2]

	//Actualizamos los valores
	for (int num=0;num<MAX_LED;num++) {
 8001bac:	2300      	movs	r3, #0
 8001bae:	607b      	str	r3, [r7, #4]
 8001bb0:	e00f      	b.n	8001bd2 <EFECTO1+0x16a>
		Set_LED(&regleta_leds,num,colores[0],colores[1],colores[2]);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	b2d9      	uxtb	r1, r3
 8001bb6:	4b2a      	ldr	r3, [pc, #168]	@ (8001c60 <EFECTO1+0x1f8>)
 8001bb8:	781a      	ldrb	r2, [r3, #0]
 8001bba:	4b29      	ldr	r3, [pc, #164]	@ (8001c60 <EFECTO1+0x1f8>)
 8001bbc:	7858      	ldrb	r0, [r3, #1]
 8001bbe:	4b28      	ldr	r3, [pc, #160]	@ (8001c60 <EFECTO1+0x1f8>)
 8001bc0:	789b      	ldrb	r3, [r3, #2]
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	4827      	ldr	r0, [pc, #156]	@ (8001c64 <EFECTO1+0x1fc>)
 8001bc8:	f7ff fc11 	bl	80013ee <Set_LED>
	for (int num=0;num<MAX_LED;num++) {
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	607b      	str	r3, [r7, #4]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2b0f      	cmp	r3, #15
 8001bd6:	ddec      	ble.n	8001bb2 <EFECTO1+0x14a>
	}

	//Mandamos los valores
	WS2812_Send(&regleta_leds);
 8001bd8:	4822      	ldr	r0, [pc, #136]	@ (8001c64 <EFECTO1+0x1fc>)
 8001bda:	f7ff fc53 	bl	8001484 <WS2812_Send>

	if( N <= (2.0*PI)) //Mayor a 360grados
 8001bde:	4b1e      	ldr	r3, [pc, #120]	@ (8001c58 <EFECTO1+0x1f0>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7fe fc5c 	bl	80004a0 <__aeabi_f2d>
 8001be8:	a317      	add	r3, pc, #92	@ (adr r3, 8001c48 <EFECTO1+0x1e0>)
 8001bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bee:	f7fe ff2b 	bl	8000a48 <__aeabi_dcmple>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d013      	beq.n	8001c20 <EFECTO1+0x1b8>
	{
		N += PI/100; // +0.9GRADOS
 8001bf8:	4b17      	ldr	r3, [pc, #92]	@ (8001c58 <EFECTO1+0x1f0>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7fe fc4f 	bl	80004a0 <__aeabi_f2d>
 8001c02:	a313      	add	r3, pc, #76	@ (adr r3, 8001c50 <EFECTO1+0x1e8>)
 8001c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c08:	f7fe faec 	bl	80001e4 <__adddf3>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4610      	mov	r0, r2
 8001c12:	4619      	mov	r1, r3
 8001c14:	f7fe ff7e 	bl	8000b14 <__aeabi_d2f>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	4a0f      	ldr	r2, [pc, #60]	@ (8001c58 <EFECTO1+0x1f0>)
 8001c1c:	6013      	str	r3, [r2, #0]
 8001c1e:	e003      	b.n	8001c28 <EFECTO1+0x1c0>
	}
	else
	{
		N = 0;
 8001c20:	4b0d      	ldr	r3, [pc, #52]	@ (8001c58 <EFECTO1+0x1f0>)
 8001c22:	f04f 0200 	mov.w	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
	}

	HAL_Delay(15);
 8001c28:	200f      	movs	r0, #15
 8001c2a:	f000 fd39 	bl	80026a0 <HAL_Delay>
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	00000000 	.word	0x00000000
 8001c3c:	406fc000 	.word	0x406fc000
 8001c40:	c985f06f 	.word	0xc985f06f
 8001c44:	4000c154 	.word	0x4000c154
 8001c48:	2e48e8a7 	.word	0x2e48e8a7
 8001c4c:	401921ff 	.word	0x401921ff
 8001c50:	09246bf0 	.word	0x09246bf0
 8001c54:	3fa015c2 	.word	0x3fa015c2
 8001c58:	200004c8 	.word	0x200004c8
 8001c5c:	3ff00000 	.word	0x3ff00000
 8001c60:	200004c4 	.word	0x200004c4
 8001c64:	2000038c 	.word	0x2000038c

08001c68 <EFECTO2>:
void EFECTO2(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af02      	add	r7, sp, #8
	//Calculamos los colores para dar efecto
	switch ((uint8_t)N) {
 8001c6e:	4b35      	ldr	r3, [pc, #212]	@ (8001d44 <EFECTO2+0xdc>)
 8001c70:	edd3 7a00 	vldr	s15, [r3]
 8001c74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c78:	edc7 7a01 	vstr	s15, [r7, #4]
 8001c7c:	793b      	ldrb	r3, [r7, #4]
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d01a      	beq.n	8001cba <EFECTO2+0x52>
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	dc22      	bgt.n	8001cce <EFECTO2+0x66>
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d002      	beq.n	8001c92 <EFECTO2+0x2a>
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d00a      	beq.n	8001ca6 <EFECTO2+0x3e>
			colores[0] = (uint8_t)(0);
			colores[1] = (uint8_t)(0);
			colores[2] = (uint8_t)(255);
			break;
		default:
			break;
 8001c90:	e01d      	b.n	8001cce <EFECTO2+0x66>
			colores[0] = (uint8_t)(255);
 8001c92:	4b2d      	ldr	r3, [pc, #180]	@ (8001d48 <EFECTO2+0xe0>)
 8001c94:	22ff      	movs	r2, #255	@ 0xff
 8001c96:	701a      	strb	r2, [r3, #0]
			colores[1] = (uint8_t)(0);
 8001c98:	4b2b      	ldr	r3, [pc, #172]	@ (8001d48 <EFECTO2+0xe0>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	705a      	strb	r2, [r3, #1]
			colores[2] = (uint8_t)(0);
 8001c9e:	4b2a      	ldr	r3, [pc, #168]	@ (8001d48 <EFECTO2+0xe0>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	709a      	strb	r2, [r3, #2]
			break;
 8001ca4:	e014      	b.n	8001cd0 <EFECTO2+0x68>
			colores[0] = (uint8_t)(0);
 8001ca6:	4b28      	ldr	r3, [pc, #160]	@ (8001d48 <EFECTO2+0xe0>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	701a      	strb	r2, [r3, #0]
			colores[1] = (uint8_t)(255);
 8001cac:	4b26      	ldr	r3, [pc, #152]	@ (8001d48 <EFECTO2+0xe0>)
 8001cae:	22ff      	movs	r2, #255	@ 0xff
 8001cb0:	705a      	strb	r2, [r3, #1]
			colores[2] = (uint8_t)(0);
 8001cb2:	4b25      	ldr	r3, [pc, #148]	@ (8001d48 <EFECTO2+0xe0>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	709a      	strb	r2, [r3, #2]
			break;
 8001cb8:	e00a      	b.n	8001cd0 <EFECTO2+0x68>
			colores[0] = (uint8_t)(0);
 8001cba:	4b23      	ldr	r3, [pc, #140]	@ (8001d48 <EFECTO2+0xe0>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	701a      	strb	r2, [r3, #0]
			colores[1] = (uint8_t)(0);
 8001cc0:	4b21      	ldr	r3, [pc, #132]	@ (8001d48 <EFECTO2+0xe0>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	705a      	strb	r2, [r3, #1]
			colores[2] = (uint8_t)(255);
 8001cc6:	4b20      	ldr	r3, [pc, #128]	@ (8001d48 <EFECTO2+0xe0>)
 8001cc8:	22ff      	movs	r2, #255	@ 0xff
 8001cca:	709a      	strb	r2, [r3, #2]
			break;
 8001ccc:	e000      	b.n	8001cd0 <EFECTO2+0x68>
			break;
 8001cce:	bf00      	nop
	}

	//Actualizamos los valores
	for (int num=0;num<MAX_LED;num++) {
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	e00f      	b.n	8001cf6 <EFECTO2+0x8e>
		Set_LED(&regleta_leds,num,colores[0],colores[1],colores[2]);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	b2d9      	uxtb	r1, r3
 8001cda:	4b1b      	ldr	r3, [pc, #108]	@ (8001d48 <EFECTO2+0xe0>)
 8001cdc:	781a      	ldrb	r2, [r3, #0]
 8001cde:	4b1a      	ldr	r3, [pc, #104]	@ (8001d48 <EFECTO2+0xe0>)
 8001ce0:	7858      	ldrb	r0, [r3, #1]
 8001ce2:	4b19      	ldr	r3, [pc, #100]	@ (8001d48 <EFECTO2+0xe0>)
 8001ce4:	789b      	ldrb	r3, [r3, #2]
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	4603      	mov	r3, r0
 8001cea:	4818      	ldr	r0, [pc, #96]	@ (8001d4c <EFECTO2+0xe4>)
 8001cec:	f7ff fb7f 	bl	80013ee <Set_LED>
	for (int num=0;num<MAX_LED;num++) {
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2b0f      	cmp	r3, #15
 8001cfa:	ddec      	ble.n	8001cd6 <EFECTO2+0x6e>
	}

	//Mandamos los valores
	WS2812_Send(&regleta_leds);
 8001cfc:	4813      	ldr	r0, [pc, #76]	@ (8001d4c <EFECTO2+0xe4>)
 8001cfe:	f7ff fbc1 	bl	8001484 <WS2812_Send>

	if( N < 2)
 8001d02:	4b10      	ldr	r3, [pc, #64]	@ (8001d44 <EFECTO2+0xdc>)
 8001d04:	edd3 7a00 	vldr	s15, [r3]
 8001d08:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001d0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d14:	d50a      	bpl.n	8001d2c <EFECTO2+0xc4>
	{
		N += 1;
 8001d16:	4b0b      	ldr	r3, [pc, #44]	@ (8001d44 <EFECTO2+0xdc>)
 8001d18:	edd3 7a00 	vldr	s15, [r3]
 8001d1c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001d20:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d24:	4b07      	ldr	r3, [pc, #28]	@ (8001d44 <EFECTO2+0xdc>)
 8001d26:	edc3 7a00 	vstr	s15, [r3]
 8001d2a:	e003      	b.n	8001d34 <EFECTO2+0xcc>
	}
	else
	{
		N = 0;
 8001d2c:	4b05      	ldr	r3, [pc, #20]	@ (8001d44 <EFECTO2+0xdc>)
 8001d2e:	f04f 0200 	mov.w	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
	}

	HAL_Delay(750);
 8001d34:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8001d38:	f000 fcb2 	bl	80026a0 <HAL_Delay>
}
 8001d3c:	bf00      	nop
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	200004c8 	.word	0x200004c8
 8001d48:	200004c4 	.word	0x200004c4
 8001d4c:	2000038c 	.word	0x2000038c

08001d50 <EFECTO3>:
void EFECTO3(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af02      	add	r7, sp, #8
	//Calculamos los colores para dar efecto
	switch ((uint8_t)N) {
 8001d56:	4b35      	ldr	r3, [pc, #212]	@ (8001e2c <EFECTO3+0xdc>)
 8001d58:	edd3 7a00 	vldr	s15, [r3]
 8001d5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d60:	edc7 7a01 	vstr	s15, [r7, #4]
 8001d64:	793b      	ldrb	r3, [r7, #4]
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d01a      	beq.n	8001da2 <EFECTO3+0x52>
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	dc22      	bgt.n	8001db6 <EFECTO3+0x66>
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d002      	beq.n	8001d7a <EFECTO3+0x2a>
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d00a      	beq.n	8001d8e <EFECTO3+0x3e>
			colores[0] = (uint8_t)(0);
			colores[1] = (uint8_t)(255);
			colores[2] = (uint8_t)(255);
			break;
		default:
			break;
 8001d78:	e01d      	b.n	8001db6 <EFECTO3+0x66>
			colores[0] = (uint8_t)(255);
 8001d7a:	4b2d      	ldr	r3, [pc, #180]	@ (8001e30 <EFECTO3+0xe0>)
 8001d7c:	22ff      	movs	r2, #255	@ 0xff
 8001d7e:	701a      	strb	r2, [r3, #0]
			colores[1] = (uint8_t)(255);
 8001d80:	4b2b      	ldr	r3, [pc, #172]	@ (8001e30 <EFECTO3+0xe0>)
 8001d82:	22ff      	movs	r2, #255	@ 0xff
 8001d84:	705a      	strb	r2, [r3, #1]
			colores[2] = (uint8_t)(0);
 8001d86:	4b2a      	ldr	r3, [pc, #168]	@ (8001e30 <EFECTO3+0xe0>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	709a      	strb	r2, [r3, #2]
			break;
 8001d8c:	e014      	b.n	8001db8 <EFECTO3+0x68>
			colores[0] = (uint8_t)(255);
 8001d8e:	4b28      	ldr	r3, [pc, #160]	@ (8001e30 <EFECTO3+0xe0>)
 8001d90:	22ff      	movs	r2, #255	@ 0xff
 8001d92:	701a      	strb	r2, [r3, #0]
			colores[1] = (uint8_t)(0);
 8001d94:	4b26      	ldr	r3, [pc, #152]	@ (8001e30 <EFECTO3+0xe0>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	705a      	strb	r2, [r3, #1]
			colores[2] = (uint8_t)(255);
 8001d9a:	4b25      	ldr	r3, [pc, #148]	@ (8001e30 <EFECTO3+0xe0>)
 8001d9c:	22ff      	movs	r2, #255	@ 0xff
 8001d9e:	709a      	strb	r2, [r3, #2]
			break;
 8001da0:	e00a      	b.n	8001db8 <EFECTO3+0x68>
			colores[0] = (uint8_t)(0);
 8001da2:	4b23      	ldr	r3, [pc, #140]	@ (8001e30 <EFECTO3+0xe0>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	701a      	strb	r2, [r3, #0]
			colores[1] = (uint8_t)(255);
 8001da8:	4b21      	ldr	r3, [pc, #132]	@ (8001e30 <EFECTO3+0xe0>)
 8001daa:	22ff      	movs	r2, #255	@ 0xff
 8001dac:	705a      	strb	r2, [r3, #1]
			colores[2] = (uint8_t)(255);
 8001dae:	4b20      	ldr	r3, [pc, #128]	@ (8001e30 <EFECTO3+0xe0>)
 8001db0:	22ff      	movs	r2, #255	@ 0xff
 8001db2:	709a      	strb	r2, [r3, #2]
			break;
 8001db4:	e000      	b.n	8001db8 <EFECTO3+0x68>
			break;
 8001db6:	bf00      	nop
	}

	//Actualizamos los valores
	for (int num=0;num<MAX_LED;num++) {
 8001db8:	2300      	movs	r3, #0
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	e00f      	b.n	8001dde <EFECTO3+0x8e>
		Set_LED(&regleta_leds,num,colores[0],colores[1],colores[2]);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	b2d9      	uxtb	r1, r3
 8001dc2:	4b1b      	ldr	r3, [pc, #108]	@ (8001e30 <EFECTO3+0xe0>)
 8001dc4:	781a      	ldrb	r2, [r3, #0]
 8001dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e30 <EFECTO3+0xe0>)
 8001dc8:	7858      	ldrb	r0, [r3, #1]
 8001dca:	4b19      	ldr	r3, [pc, #100]	@ (8001e30 <EFECTO3+0xe0>)
 8001dcc:	789b      	ldrb	r3, [r3, #2]
 8001dce:	9300      	str	r3, [sp, #0]
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	4818      	ldr	r0, [pc, #96]	@ (8001e34 <EFECTO3+0xe4>)
 8001dd4:	f7ff fb0b 	bl	80013ee <Set_LED>
	for (int num=0;num<MAX_LED;num++) {
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2b0f      	cmp	r3, #15
 8001de2:	ddec      	ble.n	8001dbe <EFECTO3+0x6e>
	}

	//Mandamos los valores
	WS2812_Send(&regleta_leds);
 8001de4:	4813      	ldr	r0, [pc, #76]	@ (8001e34 <EFECTO3+0xe4>)
 8001de6:	f7ff fb4d 	bl	8001484 <WS2812_Send>

	if( N < 2)
 8001dea:	4b10      	ldr	r3, [pc, #64]	@ (8001e2c <EFECTO3+0xdc>)
 8001dec:	edd3 7a00 	vldr	s15, [r3]
 8001df0:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001df4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dfc:	d50a      	bpl.n	8001e14 <EFECTO3+0xc4>
	{
		N++;
 8001dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8001e2c <EFECTO3+0xdc>)
 8001e00:	edd3 7a00 	vldr	s15, [r3]
 8001e04:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e0c:	4b07      	ldr	r3, [pc, #28]	@ (8001e2c <EFECTO3+0xdc>)
 8001e0e:	edc3 7a00 	vstr	s15, [r3]
 8001e12:	e003      	b.n	8001e1c <EFECTO3+0xcc>
	}
	else
	{
		N = 0;
 8001e14:	4b05      	ldr	r3, [pc, #20]	@ (8001e2c <EFECTO3+0xdc>)
 8001e16:	f04f 0200 	mov.w	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
	}

	HAL_Delay(750);
 8001e1c:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8001e20:	f000 fc3e 	bl	80026a0 <HAL_Delay>
}
 8001e24:	bf00      	nop
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	200004c8 	.word	0x200004c8
 8001e30:	200004c4 	.word	0x200004c4
 8001e34:	2000038c 	.word	0x2000038c

08001e38 <EFECTO4>:
void EFECTO4(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af02      	add	r7, sp, #8
	//Calculamos los colores para dar efecto
	colores[0] = (uint8_t)(254.0*((sin(N           )+1.0)/2.0));
 8001e3e:	4b7a      	ldr	r3, [pc, #488]	@ (8002028 <EFECTO4+0x1f0>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7fe fb2c 	bl	80004a0 <__aeabi_f2d>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	ec43 2b10 	vmov	d0, r2, r3
 8001e50:	f003 fe0a 	bl	8005a68 <sin>
 8001e54:	ec51 0b10 	vmov	r0, r1, d0
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	4b73      	ldr	r3, [pc, #460]	@ (800202c <EFECTO4+0x1f4>)
 8001e5e:	f7fe f9c1 	bl	80001e4 <__adddf3>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	4610      	mov	r0, r2
 8001e68:	4619      	mov	r1, r3
 8001e6a:	f04f 0200 	mov.w	r2, #0
 8001e6e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e72:	f7fe fc97 	bl	80007a4 <__aeabi_ddiv>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	a362      	add	r3, pc, #392	@ (adr r3, 8002008 <EFECTO4+0x1d0>)
 8001e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e84:	f7fe fb64 	bl	8000550 <__aeabi_dmul>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	4610      	mov	r0, r2
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f7fe fe20 	bl	8000ad4 <__aeabi_d2uiz>
 8001e94:	4603      	mov	r3, r0
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	4b65      	ldr	r3, [pc, #404]	@ (8002030 <EFECTO4+0x1f8>)
 8001e9a:	701a      	strb	r2, [r3, #0]
	colores[1] = (uint8_t)(254.0*((sin(N + (2.0*PI)/3)+1.0)/4.0));
 8001e9c:	4b62      	ldr	r3, [pc, #392]	@ (8002028 <EFECTO4+0x1f0>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7fe fafd 	bl	80004a0 <__aeabi_f2d>
 8001ea6:	a35a      	add	r3, pc, #360	@ (adr r3, 8002010 <EFECTO4+0x1d8>)
 8001ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eac:	f7fe f99a 	bl	80001e4 <__adddf3>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	ec43 2b17 	vmov	d7, r2, r3
 8001eb8:	eeb0 0a47 	vmov.f32	s0, s14
 8001ebc:	eef0 0a67 	vmov.f32	s1, s15
 8001ec0:	f003 fdd2 	bl	8005a68 <sin>
 8001ec4:	ec51 0b10 	vmov	r0, r1, d0
 8001ec8:	f04f 0200 	mov.w	r2, #0
 8001ecc:	4b57      	ldr	r3, [pc, #348]	@ (800202c <EFECTO4+0x1f4>)
 8001ece:	f7fe f989 	bl	80001e4 <__adddf3>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	4610      	mov	r0, r2
 8001ed8:	4619      	mov	r1, r3
 8001eda:	f04f 0200 	mov.w	r2, #0
 8001ede:	4b55      	ldr	r3, [pc, #340]	@ (8002034 <EFECTO4+0x1fc>)
 8001ee0:	f7fe fc60 	bl	80007a4 <__aeabi_ddiv>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4610      	mov	r0, r2
 8001eea:	4619      	mov	r1, r3
 8001eec:	a346      	add	r3, pc, #280	@ (adr r3, 8002008 <EFECTO4+0x1d0>)
 8001eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef2:	f7fe fb2d 	bl	8000550 <__aeabi_dmul>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	4610      	mov	r0, r2
 8001efc:	4619      	mov	r1, r3
 8001efe:	f7fe fde9 	bl	8000ad4 <__aeabi_d2uiz>
 8001f02:	4603      	mov	r3, r0
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	4b4a      	ldr	r3, [pc, #296]	@ (8002030 <EFECTO4+0x1f8>)
 8001f08:	705a      	strb	r2, [r3, #1]
	colores[2] = (uint8_t)(254.0*((sin(N - (2.0*PI)/3)+1.0)/16.0));
 8001f0a:	4b47      	ldr	r3, [pc, #284]	@ (8002028 <EFECTO4+0x1f0>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7fe fac6 	bl	80004a0 <__aeabi_f2d>
 8001f14:	a33e      	add	r3, pc, #248	@ (adr r3, 8002010 <EFECTO4+0x1d8>)
 8001f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1a:	f7fe f961 	bl	80001e0 <__aeabi_dsub>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	460b      	mov	r3, r1
 8001f22:	ec43 2b17 	vmov	d7, r2, r3
 8001f26:	eeb0 0a47 	vmov.f32	s0, s14
 8001f2a:	eef0 0a67 	vmov.f32	s1, s15
 8001f2e:	f003 fd9b 	bl	8005a68 <sin>
 8001f32:	ec51 0b10 	vmov	r0, r1, d0
 8001f36:	f04f 0200 	mov.w	r2, #0
 8001f3a:	4b3c      	ldr	r3, [pc, #240]	@ (800202c <EFECTO4+0x1f4>)
 8001f3c:	f7fe f952 	bl	80001e4 <__adddf3>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	4610      	mov	r0, r2
 8001f46:	4619      	mov	r1, r3
 8001f48:	f04f 0200 	mov.w	r2, #0
 8001f4c:	4b3a      	ldr	r3, [pc, #232]	@ (8002038 <EFECTO4+0x200>)
 8001f4e:	f7fe fc29 	bl	80007a4 <__aeabi_ddiv>
 8001f52:	4602      	mov	r2, r0
 8001f54:	460b      	mov	r3, r1
 8001f56:	4610      	mov	r0, r2
 8001f58:	4619      	mov	r1, r3
 8001f5a:	a32b      	add	r3, pc, #172	@ (adr r3, 8002008 <EFECTO4+0x1d0>)
 8001f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f60:	f7fe faf6 	bl	8000550 <__aeabi_dmul>
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	4610      	mov	r0, r2
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	f7fe fdb2 	bl	8000ad4 <__aeabi_d2uiz>
 8001f70:	4603      	mov	r3, r0
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	4b2e      	ldr	r3, [pc, #184]	@ (8002030 <EFECTO4+0x1f8>)
 8001f76:	709a      	strb	r2, [r3, #2]

	//Actualizamos los valores
	for (int num=0;num<MAX_LED;num++) {
 8001f78:	2300      	movs	r3, #0
 8001f7a:	607b      	str	r3, [r7, #4]
 8001f7c:	e00f      	b.n	8001f9e <EFECTO4+0x166>
		Set_LED(&regleta_leds,num,colores[0],colores[1],colores[2]);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	b2d9      	uxtb	r1, r3
 8001f82:	4b2b      	ldr	r3, [pc, #172]	@ (8002030 <EFECTO4+0x1f8>)
 8001f84:	781a      	ldrb	r2, [r3, #0]
 8001f86:	4b2a      	ldr	r3, [pc, #168]	@ (8002030 <EFECTO4+0x1f8>)
 8001f88:	7858      	ldrb	r0, [r3, #1]
 8001f8a:	4b29      	ldr	r3, [pc, #164]	@ (8002030 <EFECTO4+0x1f8>)
 8001f8c:	789b      	ldrb	r3, [r3, #2]
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	4603      	mov	r3, r0
 8001f92:	482a      	ldr	r0, [pc, #168]	@ (800203c <EFECTO4+0x204>)
 8001f94:	f7ff fa2b 	bl	80013ee <Set_LED>
	for (int num=0;num<MAX_LED;num++) {
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	607b      	str	r3, [r7, #4]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b0f      	cmp	r3, #15
 8001fa2:	ddec      	ble.n	8001f7e <EFECTO4+0x146>
	}

	//Mandamos los valores
	WS2812_Send(&regleta_leds);
 8001fa4:	4825      	ldr	r0, [pc, #148]	@ (800203c <EFECTO4+0x204>)
 8001fa6:	f7ff fa6d 	bl	8001484 <WS2812_Send>

	if( N <= (2.0*PI)) //Mayor a 360grados
 8001faa:	4b1f      	ldr	r3, [pc, #124]	@ (8002028 <EFECTO4+0x1f0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe fa76 	bl	80004a0 <__aeabi_f2d>
 8001fb4:	a318      	add	r3, pc, #96	@ (adr r3, 8002018 <EFECTO4+0x1e0>)
 8001fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fba:	f7fe fd45 	bl	8000a48 <__aeabi_dcmple>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d013      	beq.n	8001fec <EFECTO4+0x1b4>
	{
		N += PI/100; // +0.9GRADOS
 8001fc4:	4b18      	ldr	r3, [pc, #96]	@ (8002028 <EFECTO4+0x1f0>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7fe fa69 	bl	80004a0 <__aeabi_f2d>
 8001fce:	a314      	add	r3, pc, #80	@ (adr r3, 8002020 <EFECTO4+0x1e8>)
 8001fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd4:	f7fe f906 	bl	80001e4 <__adddf3>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4610      	mov	r0, r2
 8001fde:	4619      	mov	r1, r3
 8001fe0:	f7fe fd98 	bl	8000b14 <__aeabi_d2f>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	4a10      	ldr	r2, [pc, #64]	@ (8002028 <EFECTO4+0x1f0>)
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	e003      	b.n	8001ff4 <EFECTO4+0x1bc>
	}
	else
	{
		N = 0;
 8001fec:	4b0e      	ldr	r3, [pc, #56]	@ (8002028 <EFECTO4+0x1f0>)
 8001fee:	f04f 0200 	mov.w	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
	}

	HAL_Delay(15);
 8001ff4:	200f      	movs	r0, #15
 8001ff6:	f000 fb53 	bl	80026a0 <HAL_Delay>
}
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	f3af 8000 	nop.w
 8002008:	00000000 	.word	0x00000000
 800200c:	406fc000 	.word	0x406fc000
 8002010:	c985f06f 	.word	0xc985f06f
 8002014:	4000c154 	.word	0x4000c154
 8002018:	2e48e8a7 	.word	0x2e48e8a7
 800201c:	401921ff 	.word	0x401921ff
 8002020:	09246bf0 	.word	0x09246bf0
 8002024:	3fa015c2 	.word	0x3fa015c2
 8002028:	200004c8 	.word	0x200004c8
 800202c:	3ff00000 	.word	0x3ff00000
 8002030:	200004c4 	.word	0x200004c4
 8002034:	40100000 	.word	0x40100000
 8002038:	40300000 	.word	0x40300000
 800203c:	2000038c 	.word	0x2000038c

08002040 <EFECTO5>:
void EFECTO5(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af02      	add	r7, sp, #8
	//Calculamos los colores para dar efecto
	colores[0] = (uint8_t)(254.0*((sin(N + PI/2)+1.0)/2.0));
 8002046:	4b7a      	ldr	r3, [pc, #488]	@ (8002230 <EFECTO5+0x1f0>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f7fe fa28 	bl	80004a0 <__aeabi_f2d>
 8002050:	a36f      	add	r3, pc, #444	@ (adr r3, 8002210 <EFECTO5+0x1d0>)
 8002052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002056:	f7fe f8c5 	bl	80001e4 <__adddf3>
 800205a:	4602      	mov	r2, r0
 800205c:	460b      	mov	r3, r1
 800205e:	ec43 2b17 	vmov	d7, r2, r3
 8002062:	eeb0 0a47 	vmov.f32	s0, s14
 8002066:	eef0 0a67 	vmov.f32	s1, s15
 800206a:	f003 fcfd 	bl	8005a68 <sin>
 800206e:	ec51 0b10 	vmov	r0, r1, d0
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	4b6f      	ldr	r3, [pc, #444]	@ (8002234 <EFECTO5+0x1f4>)
 8002078:	f7fe f8b4 	bl	80001e4 <__adddf3>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	4610      	mov	r0, r2
 8002082:	4619      	mov	r1, r3
 8002084:	f04f 0200 	mov.w	r2, #0
 8002088:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800208c:	f7fe fb8a 	bl	80007a4 <__aeabi_ddiv>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4610      	mov	r0, r2
 8002096:	4619      	mov	r1, r3
 8002098:	a35f      	add	r3, pc, #380	@ (adr r3, 8002218 <EFECTO5+0x1d8>)
 800209a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209e:	f7fe fa57 	bl	8000550 <__aeabi_dmul>
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	4610      	mov	r0, r2
 80020a8:	4619      	mov	r1, r3
 80020aa:	f7fe fd13 	bl	8000ad4 <__aeabi_d2uiz>
 80020ae:	4603      	mov	r3, r0
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	4b61      	ldr	r3, [pc, #388]	@ (8002238 <EFECTO5+0x1f8>)
 80020b4:	701a      	strb	r2, [r3, #0]
	colores[1] = (uint8_t)(254.0*((sin(N)       +1.0)/2.0));
 80020b6:	4b5e      	ldr	r3, [pc, #376]	@ (8002230 <EFECTO5+0x1f0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe f9f0 	bl	80004a0 <__aeabi_f2d>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	ec43 2b10 	vmov	d0, r2, r3
 80020c8:	f003 fcce 	bl	8005a68 <sin>
 80020cc:	ec51 0b10 	vmov	r0, r1, d0
 80020d0:	f04f 0200 	mov.w	r2, #0
 80020d4:	4b57      	ldr	r3, [pc, #348]	@ (8002234 <EFECTO5+0x1f4>)
 80020d6:	f7fe f885 	bl	80001e4 <__adddf3>
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	4610      	mov	r0, r2
 80020e0:	4619      	mov	r1, r3
 80020e2:	f04f 0200 	mov.w	r2, #0
 80020e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80020ea:	f7fe fb5b 	bl	80007a4 <__aeabi_ddiv>
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	4610      	mov	r0, r2
 80020f4:	4619      	mov	r1, r3
 80020f6:	a348      	add	r3, pc, #288	@ (adr r3, 8002218 <EFECTO5+0x1d8>)
 80020f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fc:	f7fe fa28 	bl	8000550 <__aeabi_dmul>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	4610      	mov	r0, r2
 8002106:	4619      	mov	r1, r3
 8002108:	f7fe fce4 	bl	8000ad4 <__aeabi_d2uiz>
 800210c:	4603      	mov	r3, r0
 800210e:	b2da      	uxtb	r2, r3
 8002110:	4b49      	ldr	r3, [pc, #292]	@ (8002238 <EFECTO5+0x1f8>)
 8002112:	705a      	strb	r2, [r3, #1]
	colores[2] = (uint8_t)(254.0*((sin(N - PI/2)+1.0)/2.0));
 8002114:	4b46      	ldr	r3, [pc, #280]	@ (8002230 <EFECTO5+0x1f0>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f7fe f9c1 	bl	80004a0 <__aeabi_f2d>
 800211e:	a33c      	add	r3, pc, #240	@ (adr r3, 8002210 <EFECTO5+0x1d0>)
 8002120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002124:	f7fe f85c 	bl	80001e0 <__aeabi_dsub>
 8002128:	4602      	mov	r2, r0
 800212a:	460b      	mov	r3, r1
 800212c:	ec43 2b17 	vmov	d7, r2, r3
 8002130:	eeb0 0a47 	vmov.f32	s0, s14
 8002134:	eef0 0a67 	vmov.f32	s1, s15
 8002138:	f003 fc96 	bl	8005a68 <sin>
 800213c:	ec51 0b10 	vmov	r0, r1, d0
 8002140:	f04f 0200 	mov.w	r2, #0
 8002144:	4b3b      	ldr	r3, [pc, #236]	@ (8002234 <EFECTO5+0x1f4>)
 8002146:	f7fe f84d 	bl	80001e4 <__adddf3>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4610      	mov	r0, r2
 8002150:	4619      	mov	r1, r3
 8002152:	f04f 0200 	mov.w	r2, #0
 8002156:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800215a:	f7fe fb23 	bl	80007a4 <__aeabi_ddiv>
 800215e:	4602      	mov	r2, r0
 8002160:	460b      	mov	r3, r1
 8002162:	4610      	mov	r0, r2
 8002164:	4619      	mov	r1, r3
 8002166:	a32c      	add	r3, pc, #176	@ (adr r3, 8002218 <EFECTO5+0x1d8>)
 8002168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800216c:	f7fe f9f0 	bl	8000550 <__aeabi_dmul>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	4610      	mov	r0, r2
 8002176:	4619      	mov	r1, r3
 8002178:	f7fe fcac 	bl	8000ad4 <__aeabi_d2uiz>
 800217c:	4603      	mov	r3, r0
 800217e:	b2da      	uxtb	r2, r3
 8002180:	4b2d      	ldr	r3, [pc, #180]	@ (8002238 <EFECTO5+0x1f8>)
 8002182:	709a      	strb	r2, [r3, #2]

	//Actualizamos los valores
	for (int num=0;num<MAX_LED;num++) {
 8002184:	2300      	movs	r3, #0
 8002186:	607b      	str	r3, [r7, #4]
 8002188:	e00f      	b.n	80021aa <EFECTO5+0x16a>
		Set_LED(&regleta_leds,num,colores[0],colores[1],colores[2]);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	b2d9      	uxtb	r1, r3
 800218e:	4b2a      	ldr	r3, [pc, #168]	@ (8002238 <EFECTO5+0x1f8>)
 8002190:	781a      	ldrb	r2, [r3, #0]
 8002192:	4b29      	ldr	r3, [pc, #164]	@ (8002238 <EFECTO5+0x1f8>)
 8002194:	7858      	ldrb	r0, [r3, #1]
 8002196:	4b28      	ldr	r3, [pc, #160]	@ (8002238 <EFECTO5+0x1f8>)
 8002198:	789b      	ldrb	r3, [r3, #2]
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	4603      	mov	r3, r0
 800219e:	4827      	ldr	r0, [pc, #156]	@ (800223c <EFECTO5+0x1fc>)
 80021a0:	f7ff f925 	bl	80013ee <Set_LED>
	for (int num=0;num<MAX_LED;num++) {
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3301      	adds	r3, #1
 80021a8:	607b      	str	r3, [r7, #4]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b0f      	cmp	r3, #15
 80021ae:	ddec      	ble.n	800218a <EFECTO5+0x14a>
	}

	//Mandamos los valores
	WS2812_Send(&regleta_leds);
 80021b0:	4822      	ldr	r0, [pc, #136]	@ (800223c <EFECTO5+0x1fc>)
 80021b2:	f7ff f967 	bl	8001484 <WS2812_Send>

	if( N <= (2.0*PI)) //Mayor a 360grados
 80021b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002230 <EFECTO5+0x1f0>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fe f970 	bl	80004a0 <__aeabi_f2d>
 80021c0:	a317      	add	r3, pc, #92	@ (adr r3, 8002220 <EFECTO5+0x1e0>)
 80021c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c6:	f7fe fc3f 	bl	8000a48 <__aeabi_dcmple>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d013      	beq.n	80021f8 <EFECTO5+0x1b8>
	{
		N += PI/100; // +0.9GRADOS
 80021d0:	4b17      	ldr	r3, [pc, #92]	@ (8002230 <EFECTO5+0x1f0>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe f963 	bl	80004a0 <__aeabi_f2d>
 80021da:	a313      	add	r3, pc, #76	@ (adr r3, 8002228 <EFECTO5+0x1e8>)
 80021dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e0:	f7fe f800 	bl	80001e4 <__adddf3>
 80021e4:	4602      	mov	r2, r0
 80021e6:	460b      	mov	r3, r1
 80021e8:	4610      	mov	r0, r2
 80021ea:	4619      	mov	r1, r3
 80021ec:	f7fe fc92 	bl	8000b14 <__aeabi_d2f>
 80021f0:	4603      	mov	r3, r0
 80021f2:	4a0f      	ldr	r2, [pc, #60]	@ (8002230 <EFECTO5+0x1f0>)
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	e003      	b.n	8002200 <EFECTO5+0x1c0>
	}
	else
	{
		N = 0;
 80021f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002230 <EFECTO5+0x1f0>)
 80021fa:	f04f 0200 	mov.w	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
	}

	HAL_Delay(15);
 8002200:	200f      	movs	r0, #15
 8002202:	f000 fa4d 	bl	80026a0 <HAL_Delay>
}
 8002206:	bf00      	nop
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	2e48e8a7 	.word	0x2e48e8a7
 8002214:	3ff921ff 	.word	0x3ff921ff
 8002218:	00000000 	.word	0x00000000
 800221c:	406fc000 	.word	0x406fc000
 8002220:	2e48e8a7 	.word	0x2e48e8a7
 8002224:	401921ff 	.word	0x401921ff
 8002228:	09246bf0 	.word	0x09246bf0
 800222c:	3fa015c2 	.word	0x3fa015c2
 8002230:	200004c8 	.word	0x200004c8
 8002234:	3ff00000 	.word	0x3ff00000
 8002238:	200004c4 	.word	0x200004c4
 800223c:	2000038c 	.word	0x2000038c

08002240 <LUZ_BLANCA>:

/*
 * EFECTO DE LUZ BLANCA
 */
void LUZ_BLANCA(uint8_t dim)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af02      	add	r7, sp, #8
 8002246:	4603      	mov	r3, r0
 8002248:	71fb      	strb	r3, [r7, #7]
	 * hot                 cold
	 * 254 <-------------> 0
	 *
	 */
	//Calculamos los colores para dar efecto
	colores[0] = dim;//R
 800224a:	4a13      	ldr	r2, [pc, #76]	@ (8002298 <LUZ_BLANCA+0x58>)
 800224c:	79fb      	ldrb	r3, [r7, #7]
 800224e:	7013      	strb	r3, [r2, #0]
	colores[2] = 254-dim; //G
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 8002256:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 800225a:	33fe      	adds	r3, #254	@ 0xfe
 800225c:	b2da      	uxtb	r2, r3
 800225e:	4b0e      	ldr	r3, [pc, #56]	@ (8002298 <LUZ_BLANCA+0x58>)
 8002260:	709a      	strb	r2, [r3, #2]

	//Actualizamos los valores
	for (int num=0;num<MAX_LED;num++)
 8002262:	2300      	movs	r3, #0
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	e00d      	b.n	8002284 <LUZ_BLANCA+0x44>
	{
		Set_LED(&regleta_leds,num,colores[0],110,colores[2]);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	b2d9      	uxtb	r1, r3
 800226c:	4b0a      	ldr	r3, [pc, #40]	@ (8002298 <LUZ_BLANCA+0x58>)
 800226e:	781a      	ldrb	r2, [r3, #0]
 8002270:	4b09      	ldr	r3, [pc, #36]	@ (8002298 <LUZ_BLANCA+0x58>)
 8002272:	789b      	ldrb	r3, [r3, #2]
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	236e      	movs	r3, #110	@ 0x6e
 8002278:	4808      	ldr	r0, [pc, #32]	@ (800229c <LUZ_BLANCA+0x5c>)
 800227a:	f7ff f8b8 	bl	80013ee <Set_LED>
	for (int num=0;num<MAX_LED;num++)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	3301      	adds	r3, #1
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2b0f      	cmp	r3, #15
 8002288:	ddee      	ble.n	8002268 <LUZ_BLANCA+0x28>
	}

	//Mandamos los valores
	WS2812_Send(&regleta_leds);
 800228a:	4804      	ldr	r0, [pc, #16]	@ (800229c <LUZ_BLANCA+0x5c>)
 800228c:	f7ff f8fa 	bl	8001484 <WS2812_Send>

}
 8002290:	bf00      	nop
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	200004c4 	.word	0x200004c4
 800229c:	2000038c 	.word	0x2000038c

080022a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022a4:	b672      	cpsid	i
}
 80022a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022a8:	bf00      	nop
 80022aa:	e7fd      	b.n	80022a8 <Error_Handler+0x8>

080022ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	607b      	str	r3, [r7, #4]
 80022b6:	4b13      	ldr	r3, [pc, #76]	@ (8002304 <HAL_MspInit+0x58>)
 80022b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ba:	4a12      	ldr	r2, [pc, #72]	@ (8002304 <HAL_MspInit+0x58>)
 80022bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80022c2:	4b10      	ldr	r3, [pc, #64]	@ (8002304 <HAL_MspInit+0x58>)
 80022c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022ca:	607b      	str	r3, [r7, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	603b      	str	r3, [r7, #0]
 80022d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002304 <HAL_MspInit+0x58>)
 80022d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d6:	4a0b      	ldr	r2, [pc, #44]	@ (8002304 <HAL_MspInit+0x58>)
 80022d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80022de:	4b09      	ldr	r3, [pc, #36]	@ (8002304 <HAL_MspInit+0x58>)
 80022e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022e6:	603b      	str	r3, [r7, #0]
 80022e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80022ea:	2200      	movs	r2, #0
 80022ec:	2100      	movs	r1, #0
 80022ee:	2005      	movs	r0, #5
 80022f0:	f000 fad5 	bl	800289e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80022f4:	2005      	movs	r0, #5
 80022f6:	f000 faee 	bl	80028d6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40023800 	.word	0x40023800

08002308 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08a      	sub	sp, #40	@ 0x28
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002310:	f107 0314 	add.w	r3, r7, #20
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	60da      	str	r2, [r3, #12]
 800231e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a19      	ldr	r2, [pc, #100]	@ (800238c <HAL_SPI_MspInit+0x84>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d12b      	bne.n	8002382 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	613b      	str	r3, [r7, #16]
 800232e:	4b18      	ldr	r3, [pc, #96]	@ (8002390 <HAL_SPI_MspInit+0x88>)
 8002330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002332:	4a17      	ldr	r2, [pc, #92]	@ (8002390 <HAL_SPI_MspInit+0x88>)
 8002334:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002338:	6453      	str	r3, [r2, #68]	@ 0x44
 800233a:	4b15      	ldr	r3, [pc, #84]	@ (8002390 <HAL_SPI_MspInit+0x88>)
 800233c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800233e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	4b11      	ldr	r3, [pc, #68]	@ (8002390 <HAL_SPI_MspInit+0x88>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234e:	4a10      	ldr	r2, [pc, #64]	@ (8002390 <HAL_SPI_MspInit+0x88>)
 8002350:	f043 0301 	orr.w	r3, r3, #1
 8002354:	6313      	str	r3, [r2, #48]	@ 0x30
 8002356:	4b0e      	ldr	r3, [pc, #56]	@ (8002390 <HAL_SPI_MspInit+0x88>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002362:	23e0      	movs	r3, #224	@ 0xe0
 8002364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002366:	2302      	movs	r3, #2
 8002368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236a:	2300      	movs	r3, #0
 800236c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800236e:	2303      	movs	r3, #3
 8002370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002372:	2305      	movs	r3, #5
 8002374:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002376:	f107 0314 	add.w	r3, r7, #20
 800237a:	4619      	mov	r1, r3
 800237c:	4805      	ldr	r0, [pc, #20]	@ (8002394 <HAL_SPI_MspInit+0x8c>)
 800237e:	f000 fe57 	bl	8003030 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002382:	bf00      	nop
 8002384:	3728      	adds	r7, #40	@ 0x28
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40013000 	.word	0x40013000
 8002390:	40023800 	.word	0x40023800
 8002394:	40020000 	.word	0x40020000

08002398 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a22      	ldr	r2, [pc, #136]	@ (8002430 <HAL_TIM_Base_MspInit+0x98>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d13d      	bne.n	8002426 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	4b21      	ldr	r3, [pc, #132]	@ (8002434 <HAL_TIM_Base_MspInit+0x9c>)
 80023b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b2:	4a20      	ldr	r2, [pc, #128]	@ (8002434 <HAL_TIM_Base_MspInit+0x9c>)
 80023b4:	f043 0301 	orr.w	r3, r3, #1
 80023b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002434 <HAL_TIM_Base_MspInit+0x9c>)
 80023bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80023c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002438 <HAL_TIM_Base_MspInit+0xa0>)
 80023c8:	4a1c      	ldr	r2, [pc, #112]	@ (800243c <HAL_TIM_Base_MspInit+0xa4>)
 80023ca:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80023cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002438 <HAL_TIM_Base_MspInit+0xa0>)
 80023ce:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 80023d2:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023d4:	4b18      	ldr	r3, [pc, #96]	@ (8002438 <HAL_TIM_Base_MspInit+0xa0>)
 80023d6:	2240      	movs	r2, #64	@ 0x40
 80023d8:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80023da:	4b17      	ldr	r3, [pc, #92]	@ (8002438 <HAL_TIM_Base_MspInit+0xa0>)
 80023dc:	2200      	movs	r2, #0
 80023de:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80023e0:	4b15      	ldr	r3, [pc, #84]	@ (8002438 <HAL_TIM_Base_MspInit+0xa0>)
 80023e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023e6:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80023e8:	4b13      	ldr	r3, [pc, #76]	@ (8002438 <HAL_TIM_Base_MspInit+0xa0>)
 80023ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80023ee:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023f0:	4b11      	ldr	r3, [pc, #68]	@ (8002438 <HAL_TIM_Base_MspInit+0xa0>)
 80023f2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023f6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80023f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002438 <HAL_TIM_Base_MspInit+0xa0>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80023fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002438 <HAL_TIM_Base_MspInit+0xa0>)
 8002400:	2200      	movs	r2, #0
 8002402:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002404:	4b0c      	ldr	r3, [pc, #48]	@ (8002438 <HAL_TIM_Base_MspInit+0xa0>)
 8002406:	2200      	movs	r2, #0
 8002408:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800240a:	480b      	ldr	r0, [pc, #44]	@ (8002438 <HAL_TIM_Base_MspInit+0xa0>)
 800240c:	f000 fa7e 	bl	800290c <HAL_DMA_Init>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8002416:	f7ff ff43 	bl	80022a0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a06      	ldr	r2, [pc, #24]	@ (8002438 <HAL_TIM_Base_MspInit+0xa0>)
 800241e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002420:	4a05      	ldr	r2, [pc, #20]	@ (8002438 <HAL_TIM_Base_MspInit+0xa0>)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002426:	bf00      	nop
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40010000 	.word	0x40010000
 8002434:	40023800 	.word	0x40023800
 8002438:	20000460 	.word	0x20000460
 800243c:	40026428 	.word	0x40026428

08002440 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b088      	sub	sp, #32
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002448:	f107 030c 	add.w	r3, r7, #12
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	60da      	str	r2, [r3, #12]
 8002456:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a12      	ldr	r2, [pc, #72]	@ (80024a8 <HAL_TIM_MspPostInit+0x68>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d11e      	bne.n	80024a0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	60bb      	str	r3, [r7, #8]
 8002466:	4b11      	ldr	r3, [pc, #68]	@ (80024ac <HAL_TIM_MspPostInit+0x6c>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246a:	4a10      	ldr	r2, [pc, #64]	@ (80024ac <HAL_TIM_MspPostInit+0x6c>)
 800246c:	f043 0301 	orr.w	r3, r3, #1
 8002470:	6313      	str	r3, [r2, #48]	@ 0x30
 8002472:	4b0e      	ldr	r3, [pc, #56]	@ (80024ac <HAL_TIM_MspPostInit+0x6c>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	60bb      	str	r3, [r7, #8]
 800247c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800247e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002482:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002484:	2302      	movs	r3, #2
 8002486:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800248c:	2302      	movs	r3, #2
 800248e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002490:	2301      	movs	r3, #1
 8002492:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002494:	f107 030c 	add.w	r3, r7, #12
 8002498:	4619      	mov	r1, r3
 800249a:	4805      	ldr	r0, [pc, #20]	@ (80024b0 <HAL_TIM_MspPostInit+0x70>)
 800249c:	f000 fdc8 	bl	8003030 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80024a0:	bf00      	nop
 80024a2:	3720      	adds	r7, #32
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40010000 	.word	0x40010000
 80024ac:	40023800 	.word	0x40023800
 80024b0:	40020000 	.word	0x40020000

080024b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024b8:	bf00      	nop
 80024ba:	e7fd      	b.n	80024b8 <NMI_Handler+0x4>

080024bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024c0:	bf00      	nop
 80024c2:	e7fd      	b.n	80024c0 <HardFault_Handler+0x4>

080024c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024c8:	bf00      	nop
 80024ca:	e7fd      	b.n	80024c8 <MemManage_Handler+0x4>

080024cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024d0:	bf00      	nop
 80024d2:	e7fd      	b.n	80024d0 <BusFault_Handler+0x4>

080024d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024d8:	bf00      	nop
 80024da:	e7fd      	b.n	80024d8 <UsageFault_Handler+0x4>

080024dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024e0:	bf00      	nop
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr

080024ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024ea:	b480      	push	{r7}
 80024ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024fc:	bf00      	nop
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800250a:	f000 f8a9 	bl	8002660 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}

08002512 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002512:	b480      	push	{r7}
 8002514:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002516:	bf00      	nop
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_Pin);
 8002524:	2008      	movs	r0, #8
 8002526:	f000 ff3b 	bl	80033a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
	...

08002530 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002534:	4802      	ldr	r0, [pc, #8]	@ (8002540 <DMA2_Stream1_IRQHandler+0x10>)
 8002536:	f000 fb11 	bl	8002b5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	20000460 	.word	0x20000460

08002544 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002548:	4b06      	ldr	r3, [pc, #24]	@ (8002564 <SystemInit+0x20>)
 800254a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800254e:	4a05      	ldr	r2, [pc, #20]	@ (8002564 <SystemInit+0x20>)
 8002550:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002554:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002558:	bf00      	nop
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	e000ed00 	.word	0xe000ed00

08002568 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002568:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80025a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800256c:	f7ff ffea 	bl	8002544 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002570:	480c      	ldr	r0, [pc, #48]	@ (80025a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002572:	490d      	ldr	r1, [pc, #52]	@ (80025a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002574:	4a0d      	ldr	r2, [pc, #52]	@ (80025ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002578:	e002      	b.n	8002580 <LoopCopyDataInit>

0800257a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800257a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800257c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800257e:	3304      	adds	r3, #4

08002580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002584:	d3f9      	bcc.n	800257a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002586:	4a0a      	ldr	r2, [pc, #40]	@ (80025b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002588:	4c0a      	ldr	r4, [pc, #40]	@ (80025b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800258a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800258c:	e001      	b.n	8002592 <LoopFillZerobss>

0800258e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800258e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002590:	3204      	adds	r2, #4

08002592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002594:	d3fb      	bcc.n	800258e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002596:	f003 fa41 	bl	8005a1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800259a:	f7fe ffe7 	bl	800156c <main>
  bx  lr    
 800259e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80025a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80025ac:	08006ce0 	.word	0x08006ce0
  ldr r2, =_sbss
 80025b0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80025b4:	200004d0 	.word	0x200004d0

080025b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025b8:	e7fe      	b.n	80025b8 <ADC_IRQHandler>
	...

080025bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025c0:	4b0e      	ldr	r3, [pc, #56]	@ (80025fc <HAL_Init+0x40>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a0d      	ldr	r2, [pc, #52]	@ (80025fc <HAL_Init+0x40>)
 80025c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025cc:	4b0b      	ldr	r3, [pc, #44]	@ (80025fc <HAL_Init+0x40>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a0a      	ldr	r2, [pc, #40]	@ (80025fc <HAL_Init+0x40>)
 80025d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025d8:	4b08      	ldr	r3, [pc, #32]	@ (80025fc <HAL_Init+0x40>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a07      	ldr	r2, [pc, #28]	@ (80025fc <HAL_Init+0x40>)
 80025de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025e4:	2003      	movs	r0, #3
 80025e6:	f000 f94f 	bl	8002888 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025ea:	200f      	movs	r0, #15
 80025ec:	f000 f808 	bl	8002600 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025f0:	f7ff fe5c 	bl	80022ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40023c00 	.word	0x40023c00

08002600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002608:	4b12      	ldr	r3, [pc, #72]	@ (8002654 <HAL_InitTick+0x54>)
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	4b12      	ldr	r3, [pc, #72]	@ (8002658 <HAL_InitTick+0x58>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	4619      	mov	r1, r3
 8002612:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002616:	fbb3 f3f1 	udiv	r3, r3, r1
 800261a:	fbb2 f3f3 	udiv	r3, r2, r3
 800261e:	4618      	mov	r0, r3
 8002620:	f000 f967 	bl	80028f2 <HAL_SYSTICK_Config>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e00e      	b.n	800264c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b0f      	cmp	r3, #15
 8002632:	d80a      	bhi.n	800264a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002634:	2200      	movs	r2, #0
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	f04f 30ff 	mov.w	r0, #4294967295
 800263c:	f000 f92f 	bl	800289e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002640:	4a06      	ldr	r2, [pc, #24]	@ (800265c <HAL_InitTick+0x5c>)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002646:	2300      	movs	r3, #0
 8002648:	e000      	b.n	800264c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
}
 800264c:	4618      	mov	r0, r3
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	20000000 	.word	0x20000000
 8002658:	20000008 	.word	0x20000008
 800265c:	20000004 	.word	0x20000004

08002660 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002664:	4b06      	ldr	r3, [pc, #24]	@ (8002680 <HAL_IncTick+0x20>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	461a      	mov	r2, r3
 800266a:	4b06      	ldr	r3, [pc, #24]	@ (8002684 <HAL_IncTick+0x24>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4413      	add	r3, r2
 8002670:	4a04      	ldr	r2, [pc, #16]	@ (8002684 <HAL_IncTick+0x24>)
 8002672:	6013      	str	r3, [r2, #0]
}
 8002674:	bf00      	nop
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	20000008 	.word	0x20000008
 8002684:	200004cc 	.word	0x200004cc

08002688 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  return uwTick;
 800268c:	4b03      	ldr	r3, [pc, #12]	@ (800269c <HAL_GetTick+0x14>)
 800268e:	681b      	ldr	r3, [r3, #0]
}
 8002690:	4618      	mov	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	200004cc 	.word	0x200004cc

080026a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026a8:	f7ff ffee 	bl	8002688 <HAL_GetTick>
 80026ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b8:	d005      	beq.n	80026c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026ba:	4b0a      	ldr	r3, [pc, #40]	@ (80026e4 <HAL_Delay+0x44>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	461a      	mov	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4413      	add	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026c6:	bf00      	nop
 80026c8:	f7ff ffde 	bl	8002688 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d8f7      	bhi.n	80026c8 <HAL_Delay+0x28>
  {
  }
}
 80026d8:	bf00      	nop
 80026da:	bf00      	nop
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20000008 	.word	0x20000008

080026e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026f8:	4b0c      	ldr	r3, [pc, #48]	@ (800272c <__NVIC_SetPriorityGrouping+0x44>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026fe:	68ba      	ldr	r2, [r7, #8]
 8002700:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002704:	4013      	ands	r3, r2
 8002706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002710:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002714:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800271a:	4a04      	ldr	r2, [pc, #16]	@ (800272c <__NVIC_SetPriorityGrouping+0x44>)
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	60d3      	str	r3, [r2, #12]
}
 8002720:	bf00      	nop
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	e000ed00 	.word	0xe000ed00

08002730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002734:	4b04      	ldr	r3, [pc, #16]	@ (8002748 <__NVIC_GetPriorityGrouping+0x18>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	0a1b      	lsrs	r3, r3, #8
 800273a:	f003 0307 	and.w	r3, r3, #7
}
 800273e:	4618      	mov	r0, r3
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	e000ed00 	.word	0xe000ed00

0800274c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	4603      	mov	r3, r0
 8002754:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275a:	2b00      	cmp	r3, #0
 800275c:	db0b      	blt.n	8002776 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800275e:	79fb      	ldrb	r3, [r7, #7]
 8002760:	f003 021f 	and.w	r2, r3, #31
 8002764:	4907      	ldr	r1, [pc, #28]	@ (8002784 <__NVIC_EnableIRQ+0x38>)
 8002766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276a:	095b      	lsrs	r3, r3, #5
 800276c:	2001      	movs	r0, #1
 800276e:	fa00 f202 	lsl.w	r2, r0, r2
 8002772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	e000e100 	.word	0xe000e100

08002788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	6039      	str	r1, [r7, #0]
 8002792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002798:	2b00      	cmp	r3, #0
 800279a:	db0a      	blt.n	80027b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	490c      	ldr	r1, [pc, #48]	@ (80027d4 <__NVIC_SetPriority+0x4c>)
 80027a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a6:	0112      	lsls	r2, r2, #4
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	440b      	add	r3, r1
 80027ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027b0:	e00a      	b.n	80027c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	4908      	ldr	r1, [pc, #32]	@ (80027d8 <__NVIC_SetPriority+0x50>)
 80027b8:	79fb      	ldrb	r3, [r7, #7]
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	3b04      	subs	r3, #4
 80027c0:	0112      	lsls	r2, r2, #4
 80027c2:	b2d2      	uxtb	r2, r2
 80027c4:	440b      	add	r3, r1
 80027c6:	761a      	strb	r2, [r3, #24]
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	e000e100 	.word	0xe000e100
 80027d8:	e000ed00 	.word	0xe000ed00

080027dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027dc:	b480      	push	{r7}
 80027de:	b089      	sub	sp, #36	@ 0x24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f1c3 0307 	rsb	r3, r3, #7
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	bf28      	it	cs
 80027fa:	2304      	movcs	r3, #4
 80027fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	3304      	adds	r3, #4
 8002802:	2b06      	cmp	r3, #6
 8002804:	d902      	bls.n	800280c <NVIC_EncodePriority+0x30>
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	3b03      	subs	r3, #3
 800280a:	e000      	b.n	800280e <NVIC_EncodePriority+0x32>
 800280c:	2300      	movs	r3, #0
 800280e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002810:	f04f 32ff 	mov.w	r2, #4294967295
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	43da      	mvns	r2, r3
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	401a      	ands	r2, r3
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002824:	f04f 31ff 	mov.w	r1, #4294967295
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	fa01 f303 	lsl.w	r3, r1, r3
 800282e:	43d9      	mvns	r1, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002834:	4313      	orrs	r3, r2
         );
}
 8002836:	4618      	mov	r0, r3
 8002838:	3724      	adds	r7, #36	@ 0x24
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
	...

08002844 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3b01      	subs	r3, #1
 8002850:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002854:	d301      	bcc.n	800285a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002856:	2301      	movs	r3, #1
 8002858:	e00f      	b.n	800287a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800285a:	4a0a      	ldr	r2, [pc, #40]	@ (8002884 <SysTick_Config+0x40>)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3b01      	subs	r3, #1
 8002860:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002862:	210f      	movs	r1, #15
 8002864:	f04f 30ff 	mov.w	r0, #4294967295
 8002868:	f7ff ff8e 	bl	8002788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800286c:	4b05      	ldr	r3, [pc, #20]	@ (8002884 <SysTick_Config+0x40>)
 800286e:	2200      	movs	r2, #0
 8002870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002872:	4b04      	ldr	r3, [pc, #16]	@ (8002884 <SysTick_Config+0x40>)
 8002874:	2207      	movs	r2, #7
 8002876:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	e000e010 	.word	0xe000e010

08002888 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f7ff ff29 	bl	80026e8 <__NVIC_SetPriorityGrouping>
}
 8002896:	bf00      	nop
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800289e:	b580      	push	{r7, lr}
 80028a0:	b086      	sub	sp, #24
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	4603      	mov	r3, r0
 80028a6:	60b9      	str	r1, [r7, #8]
 80028a8:	607a      	str	r2, [r7, #4]
 80028aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028ac:	2300      	movs	r3, #0
 80028ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028b0:	f7ff ff3e 	bl	8002730 <__NVIC_GetPriorityGrouping>
 80028b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	68b9      	ldr	r1, [r7, #8]
 80028ba:	6978      	ldr	r0, [r7, #20]
 80028bc:	f7ff ff8e 	bl	80027dc <NVIC_EncodePriority>
 80028c0:	4602      	mov	r2, r0
 80028c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028c6:	4611      	mov	r1, r2
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff ff5d 	bl	8002788 <__NVIC_SetPriority>
}
 80028ce:	bf00      	nop
 80028d0:	3718      	adds	r7, #24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b082      	sub	sp, #8
 80028da:	af00      	add	r7, sp, #0
 80028dc:	4603      	mov	r3, r0
 80028de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff ff31 	bl	800274c <__NVIC_EnableIRQ>
}
 80028ea:	bf00      	nop
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7ff ffa2 	bl	8002844 <SysTick_Config>
 8002900:	4603      	mov	r3, r0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
	...

0800290c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002918:	f7ff feb6 	bl	8002688 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e099      	b.n	8002a5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2202      	movs	r2, #2
 800292c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 0201 	bic.w	r2, r2, #1
 8002946:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002948:	e00f      	b.n	800296a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800294a:	f7ff fe9d 	bl	8002688 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b05      	cmp	r3, #5
 8002956:	d908      	bls.n	800296a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2220      	movs	r2, #32
 800295c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2203      	movs	r2, #3
 8002962:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e078      	b.n	8002a5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1e8      	bne.n	800294a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	4b38      	ldr	r3, [pc, #224]	@ (8002a64 <HAL_DMA_Init+0x158>)
 8002984:	4013      	ands	r3, r2
 8002986:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002996:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	d107      	bne.n	80029d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029cc:	4313      	orrs	r3, r2
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	f023 0307 	bic.w	r3, r3, #7
 80029ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d117      	bne.n	8002a2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00e      	beq.n	8002a2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 fa91 	bl	8002f38 <DMA_CheckFifoParam>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d008      	beq.n	8002a2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2240      	movs	r2, #64	@ 0x40
 8002a20:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e016      	b.n	8002a5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 fa48 	bl	8002ecc <DMA_CalcBaseAndBitshift>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a44:	223f      	movs	r2, #63	@ 0x3f
 8002a46:	409a      	lsls	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3718      	adds	r7, #24
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	f010803f 	.word	0xf010803f

08002a68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
 8002a74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a76:	2300      	movs	r3, #0
 8002a78:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a7e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d101      	bne.n	8002a8e <HAL_DMA_Start_IT+0x26>
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	e040      	b.n	8002b10 <HAL_DMA_Start_IT+0xa8>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d12f      	bne.n	8002b02 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	68b9      	ldr	r1, [r7, #8]
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f000 f9da 	bl	8002e70 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ac0:	223f      	movs	r2, #63	@ 0x3f
 8002ac2:	409a      	lsls	r2, r3
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0216 	orr.w	r2, r2, #22
 8002ad6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d007      	beq.n	8002af0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 0208 	orr.w	r2, r2, #8
 8002aee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f042 0201 	orr.w	r2, r2, #1
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	e005      	b.n	8002b0e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3718      	adds	r7, #24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d004      	beq.n	8002b36 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2280      	movs	r2, #128	@ 0x80
 8002b30:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e00c      	b.n	8002b50 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2205      	movs	r2, #5
 8002b3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 0201 	bic.w	r2, r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b68:	4b8e      	ldr	r3, [pc, #568]	@ (8002da4 <HAL_DMA_IRQHandler+0x248>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a8e      	ldr	r2, [pc, #568]	@ (8002da8 <HAL_DMA_IRQHandler+0x24c>)
 8002b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b72:	0a9b      	lsrs	r3, r3, #10
 8002b74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b86:	2208      	movs	r2, #8
 8002b88:	409a      	lsls	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d01a      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d013      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0204 	bic.w	r2, r2, #4
 8002bae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bb4:	2208      	movs	r2, #8
 8002bb6:	409a      	lsls	r2, r3
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bc0:	f043 0201 	orr.w	r2, r3, #1
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bcc:	2201      	movs	r2, #1
 8002bce:	409a      	lsls	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d012      	beq.n	8002bfe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00b      	beq.n	8002bfe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bea:	2201      	movs	r2, #1
 8002bec:	409a      	lsls	r2, r3
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf6:	f043 0202 	orr.w	r2, r3, #2
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c02:	2204      	movs	r2, #4
 8002c04:	409a      	lsls	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d012      	beq.n	8002c34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00b      	beq.n	8002c34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c20:	2204      	movs	r2, #4
 8002c22:	409a      	lsls	r2, r3
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c2c:	f043 0204 	orr.w	r2, r3, #4
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c38:	2210      	movs	r2, #16
 8002c3a:	409a      	lsls	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d043      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d03c      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c56:	2210      	movs	r2, #16
 8002c58:	409a      	lsls	r2, r3
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d018      	beq.n	8002c9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d108      	bne.n	8002c8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d024      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	4798      	blx	r3
 8002c8a:	e01f      	b.n	8002ccc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d01b      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	4798      	blx	r3
 8002c9c:	e016      	b.n	8002ccc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d107      	bne.n	8002cbc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 0208 	bic.w	r2, r2, #8
 8002cba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d003      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cd0:	2220      	movs	r2, #32
 8002cd2:	409a      	lsls	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 808f 	beq.w	8002dfc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0310 	and.w	r3, r3, #16
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f000 8087 	beq.w	8002dfc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	409a      	lsls	r2, r3
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b05      	cmp	r3, #5
 8002d04:	d136      	bne.n	8002d74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 0216 	bic.w	r2, r2, #22
 8002d14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	695a      	ldr	r2, [r3, #20]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d103      	bne.n	8002d36 <HAL_DMA_IRQHandler+0x1da>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d007      	beq.n	8002d46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 0208 	bic.w	r2, r2, #8
 8002d44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d4a:	223f      	movs	r2, #63	@ 0x3f
 8002d4c:	409a      	lsls	r2, r3
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d07e      	beq.n	8002e68 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	4798      	blx	r3
        }
        return;
 8002d72:	e079      	b.n	8002e68 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d01d      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10d      	bne.n	8002dac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d031      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	4798      	blx	r3
 8002da0:	e02c      	b.n	8002dfc <HAL_DMA_IRQHandler+0x2a0>
 8002da2:	bf00      	nop
 8002da4:	20000000 	.word	0x20000000
 8002da8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d023      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	4798      	blx	r3
 8002dbc:	e01e      	b.n	8002dfc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10f      	bne.n	8002dec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0210 	bic.w	r2, r2, #16
 8002dda:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d032      	beq.n	8002e6a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d022      	beq.n	8002e56 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2205      	movs	r2, #5
 8002e14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0201 	bic.w	r2, r2, #1
 8002e26:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	60bb      	str	r3, [r7, #8]
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d307      	bcc.n	8002e44 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1f2      	bne.n	8002e28 <HAL_DMA_IRQHandler+0x2cc>
 8002e42:	e000      	b.n	8002e46 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002e44:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d005      	beq.n	8002e6a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	4798      	blx	r3
 8002e66:	e000      	b.n	8002e6a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e68:	bf00      	nop
    }
  }
}
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
 8002e7c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002e8c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	2b40      	cmp	r3, #64	@ 0x40
 8002e9c:	d108      	bne.n	8002eb0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68ba      	ldr	r2, [r7, #8]
 8002eac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002eae:	e007      	b.n	8002ec0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68ba      	ldr	r2, [r7, #8]
 8002eb6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	60da      	str	r2, [r3, #12]
}
 8002ec0:	bf00      	nop
 8002ec2:	3714      	adds	r7, #20
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	3b10      	subs	r3, #16
 8002edc:	4a14      	ldr	r2, [pc, #80]	@ (8002f30 <DMA_CalcBaseAndBitshift+0x64>)
 8002ede:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee2:	091b      	lsrs	r3, r3, #4
 8002ee4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ee6:	4a13      	ldr	r2, [pc, #76]	@ (8002f34 <DMA_CalcBaseAndBitshift+0x68>)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4413      	add	r3, r2
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2b03      	cmp	r3, #3
 8002ef8:	d909      	bls.n	8002f0e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002f02:	f023 0303 	bic.w	r3, r3, #3
 8002f06:	1d1a      	adds	r2, r3, #4
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	659a      	str	r2, [r3, #88]	@ 0x58
 8002f0c:	e007      	b.n	8002f1e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002f16:	f023 0303 	bic.w	r3, r3, #3
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3714      	adds	r7, #20
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	aaaaaaab 	.word	0xaaaaaaab
 8002f34:	08006af0 	.word	0x08006af0

08002f38 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f40:	2300      	movs	r3, #0
 8002f42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d11f      	bne.n	8002f92 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	2b03      	cmp	r3, #3
 8002f56:	d856      	bhi.n	8003006 <DMA_CheckFifoParam+0xce>
 8002f58:	a201      	add	r2, pc, #4	@ (adr r2, 8002f60 <DMA_CheckFifoParam+0x28>)
 8002f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f5e:	bf00      	nop
 8002f60:	08002f71 	.word	0x08002f71
 8002f64:	08002f83 	.word	0x08002f83
 8002f68:	08002f71 	.word	0x08002f71
 8002f6c:	08003007 	.word	0x08003007
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d046      	beq.n	800300a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f80:	e043      	b.n	800300a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f86:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f8a:	d140      	bne.n	800300e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f90:	e03d      	b.n	800300e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f9a:	d121      	bne.n	8002fe0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2b03      	cmp	r3, #3
 8002fa0:	d837      	bhi.n	8003012 <DMA_CheckFifoParam+0xda>
 8002fa2:	a201      	add	r2, pc, #4	@ (adr r2, 8002fa8 <DMA_CheckFifoParam+0x70>)
 8002fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa8:	08002fb9 	.word	0x08002fb9
 8002fac:	08002fbf 	.word	0x08002fbf
 8002fb0:	08002fb9 	.word	0x08002fb9
 8002fb4:	08002fd1 	.word	0x08002fd1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	73fb      	strb	r3, [r7, #15]
      break;
 8002fbc:	e030      	b.n	8003020 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d025      	beq.n	8003016 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fce:	e022      	b.n	8003016 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002fd8:	d11f      	bne.n	800301a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002fde:	e01c      	b.n	800301a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d903      	bls.n	8002fee <DMA_CheckFifoParam+0xb6>
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	2b03      	cmp	r3, #3
 8002fea:	d003      	beq.n	8002ff4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002fec:	e018      	b.n	8003020 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	73fb      	strb	r3, [r7, #15]
      break;
 8002ff2:	e015      	b.n	8003020 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00e      	beq.n	800301e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	73fb      	strb	r3, [r7, #15]
      break;
 8003004:	e00b      	b.n	800301e <DMA_CheckFifoParam+0xe6>
      break;
 8003006:	bf00      	nop
 8003008:	e00a      	b.n	8003020 <DMA_CheckFifoParam+0xe8>
      break;
 800300a:	bf00      	nop
 800300c:	e008      	b.n	8003020 <DMA_CheckFifoParam+0xe8>
      break;
 800300e:	bf00      	nop
 8003010:	e006      	b.n	8003020 <DMA_CheckFifoParam+0xe8>
      break;
 8003012:	bf00      	nop
 8003014:	e004      	b.n	8003020 <DMA_CheckFifoParam+0xe8>
      break;
 8003016:	bf00      	nop
 8003018:	e002      	b.n	8003020 <DMA_CheckFifoParam+0xe8>
      break;   
 800301a:	bf00      	nop
 800301c:	e000      	b.n	8003020 <DMA_CheckFifoParam+0xe8>
      break;
 800301e:	bf00      	nop
    }
  } 
  
  return status; 
 8003020:	7bfb      	ldrb	r3, [r7, #15]
}
 8003022:	4618      	mov	r0, r3
 8003024:	3714      	adds	r7, #20
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop

08003030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003030:	b480      	push	{r7}
 8003032:	b089      	sub	sp, #36	@ 0x24
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800303a:	2300      	movs	r3, #0
 800303c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800303e:	2300      	movs	r3, #0
 8003040:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003042:	2300      	movs	r3, #0
 8003044:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003046:	2300      	movs	r3, #0
 8003048:	61fb      	str	r3, [r7, #28]
 800304a:	e159      	b.n	8003300 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800304c:	2201      	movs	r2, #1
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	4013      	ands	r3, r2
 800305e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	429a      	cmp	r2, r3
 8003066:	f040 8148 	bne.w	80032fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f003 0303 	and.w	r3, r3, #3
 8003072:	2b01      	cmp	r3, #1
 8003074:	d005      	beq.n	8003082 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800307e:	2b02      	cmp	r3, #2
 8003080:	d130      	bne.n	80030e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	2203      	movs	r2, #3
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	43db      	mvns	r3, r3
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	4013      	ands	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	68da      	ldr	r2, [r3, #12]
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030b8:	2201      	movs	r2, #1
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	43db      	mvns	r3, r3
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	4013      	ands	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	091b      	lsrs	r3, r3, #4
 80030ce:	f003 0201 	and.w	r2, r3, #1
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	4313      	orrs	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f003 0303 	and.w	r3, r3, #3
 80030ec:	2b03      	cmp	r3, #3
 80030ee:	d017      	beq.n	8003120 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	2203      	movs	r2, #3
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	43db      	mvns	r3, r3
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	4013      	ands	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4313      	orrs	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f003 0303 	and.w	r3, r3, #3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d123      	bne.n	8003174 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	08da      	lsrs	r2, r3, #3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3208      	adds	r2, #8
 8003134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003138:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	220f      	movs	r2, #15
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	43db      	mvns	r3, r3
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4013      	ands	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	691a      	ldr	r2, [r3, #16]
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	f003 0307 	and.w	r3, r3, #7
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	4313      	orrs	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	08da      	lsrs	r2, r3, #3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	3208      	adds	r2, #8
 800316e:	69b9      	ldr	r1, [r7, #24]
 8003170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	2203      	movs	r2, #3
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	43db      	mvns	r3, r3
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	4013      	ands	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f003 0203 	and.w	r2, r3, #3
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4313      	orrs	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 80a2 	beq.w	80032fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031b6:	2300      	movs	r3, #0
 80031b8:	60fb      	str	r3, [r7, #12]
 80031ba:	4b57      	ldr	r3, [pc, #348]	@ (8003318 <HAL_GPIO_Init+0x2e8>)
 80031bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031be:	4a56      	ldr	r2, [pc, #344]	@ (8003318 <HAL_GPIO_Init+0x2e8>)
 80031c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80031c6:	4b54      	ldr	r3, [pc, #336]	@ (8003318 <HAL_GPIO_Init+0x2e8>)
 80031c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031ce:	60fb      	str	r3, [r7, #12]
 80031d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031d2:	4a52      	ldr	r2, [pc, #328]	@ (800331c <HAL_GPIO_Init+0x2ec>)
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	089b      	lsrs	r3, r3, #2
 80031d8:	3302      	adds	r3, #2
 80031da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	f003 0303 	and.w	r3, r3, #3
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	220f      	movs	r2, #15
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	43db      	mvns	r3, r3
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	4013      	ands	r3, r2
 80031f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a49      	ldr	r2, [pc, #292]	@ (8003320 <HAL_GPIO_Init+0x2f0>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d019      	beq.n	8003232 <HAL_GPIO_Init+0x202>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a48      	ldr	r2, [pc, #288]	@ (8003324 <HAL_GPIO_Init+0x2f4>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d013      	beq.n	800322e <HAL_GPIO_Init+0x1fe>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a47      	ldr	r2, [pc, #284]	@ (8003328 <HAL_GPIO_Init+0x2f8>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d00d      	beq.n	800322a <HAL_GPIO_Init+0x1fa>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a46      	ldr	r2, [pc, #280]	@ (800332c <HAL_GPIO_Init+0x2fc>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d007      	beq.n	8003226 <HAL_GPIO_Init+0x1f6>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a45      	ldr	r2, [pc, #276]	@ (8003330 <HAL_GPIO_Init+0x300>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d101      	bne.n	8003222 <HAL_GPIO_Init+0x1f2>
 800321e:	2304      	movs	r3, #4
 8003220:	e008      	b.n	8003234 <HAL_GPIO_Init+0x204>
 8003222:	2307      	movs	r3, #7
 8003224:	e006      	b.n	8003234 <HAL_GPIO_Init+0x204>
 8003226:	2303      	movs	r3, #3
 8003228:	e004      	b.n	8003234 <HAL_GPIO_Init+0x204>
 800322a:	2302      	movs	r3, #2
 800322c:	e002      	b.n	8003234 <HAL_GPIO_Init+0x204>
 800322e:	2301      	movs	r3, #1
 8003230:	e000      	b.n	8003234 <HAL_GPIO_Init+0x204>
 8003232:	2300      	movs	r3, #0
 8003234:	69fa      	ldr	r2, [r7, #28]
 8003236:	f002 0203 	and.w	r2, r2, #3
 800323a:	0092      	lsls	r2, r2, #2
 800323c:	4093      	lsls	r3, r2
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	4313      	orrs	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003244:	4935      	ldr	r1, [pc, #212]	@ (800331c <HAL_GPIO_Init+0x2ec>)
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	089b      	lsrs	r3, r3, #2
 800324a:	3302      	adds	r3, #2
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003252:	4b38      	ldr	r3, [pc, #224]	@ (8003334 <HAL_GPIO_Init+0x304>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	43db      	mvns	r3, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4013      	ands	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	4313      	orrs	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003276:	4a2f      	ldr	r2, [pc, #188]	@ (8003334 <HAL_GPIO_Init+0x304>)
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800327c:	4b2d      	ldr	r3, [pc, #180]	@ (8003334 <HAL_GPIO_Init+0x304>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	43db      	mvns	r3, r3
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	4013      	ands	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	4313      	orrs	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032a0:	4a24      	ldr	r2, [pc, #144]	@ (8003334 <HAL_GPIO_Init+0x304>)
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032a6:	4b23      	ldr	r3, [pc, #140]	@ (8003334 <HAL_GPIO_Init+0x304>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	43db      	mvns	r3, r3
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	4013      	ands	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032ca:	4a1a      	ldr	r2, [pc, #104]	@ (8003334 <HAL_GPIO_Init+0x304>)
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032d0:	4b18      	ldr	r3, [pc, #96]	@ (8003334 <HAL_GPIO_Init+0x304>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	43db      	mvns	r3, r3
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	4013      	ands	r3, r2
 80032de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d003      	beq.n	80032f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032f4:	4a0f      	ldr	r2, [pc, #60]	@ (8003334 <HAL_GPIO_Init+0x304>)
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	3301      	adds	r3, #1
 80032fe:	61fb      	str	r3, [r7, #28]
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	2b0f      	cmp	r3, #15
 8003304:	f67f aea2 	bls.w	800304c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003308:	bf00      	nop
 800330a:	bf00      	nop
 800330c:	3724      	adds	r7, #36	@ 0x24
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	40023800 	.word	0x40023800
 800331c:	40013800 	.word	0x40013800
 8003320:	40020000 	.word	0x40020000
 8003324:	40020400 	.word	0x40020400
 8003328:	40020800 	.word	0x40020800
 800332c:	40020c00 	.word	0x40020c00
 8003330:	40021000 	.word	0x40021000
 8003334:	40013c00 	.word	0x40013c00

08003338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	460b      	mov	r3, r1
 8003342:	807b      	strh	r3, [r7, #2]
 8003344:	4613      	mov	r3, r2
 8003346:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003348:	787b      	ldrb	r3, [r7, #1]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800334e:	887a      	ldrh	r2, [r7, #2]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003354:	e003      	b.n	800335e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003356:	887b      	ldrh	r3, [r7, #2]
 8003358:	041a      	lsls	r2, r3, #16
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	619a      	str	r2, [r3, #24]
}
 800335e:	bf00      	nop
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr

0800336a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800336a:	b480      	push	{r7}
 800336c:	b085      	sub	sp, #20
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
 8003372:	460b      	mov	r3, r1
 8003374:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800337c:	887a      	ldrh	r2, [r7, #2]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	4013      	ands	r3, r2
 8003382:	041a      	lsls	r2, r3, #16
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	43d9      	mvns	r1, r3
 8003388:	887b      	ldrh	r3, [r7, #2]
 800338a:	400b      	ands	r3, r1
 800338c:	431a      	orrs	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	619a      	str	r2, [r3, #24]
}
 8003392:	bf00      	nop
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
	...

080033a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80033aa:	4b08      	ldr	r3, [pc, #32]	@ (80033cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033ac:	695a      	ldr	r2, [r3, #20]
 80033ae:	88fb      	ldrh	r3, [r7, #6]
 80033b0:	4013      	ands	r3, r2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d006      	beq.n	80033c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033b6:	4a05      	ldr	r2, [pc, #20]	@ (80033cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033b8:	88fb      	ldrh	r3, [r7, #6]
 80033ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033bc:	88fb      	ldrh	r3, [r7, #6]
 80033be:	4618      	mov	r0, r3
 80033c0:	f7fe fb1c 	bl	80019fc <HAL_GPIO_EXTI_Callback>
  }
}
 80033c4:	bf00      	nop
 80033c6:	3708      	adds	r7, #8
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40013c00 	.word	0x40013c00

080033d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e267      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d075      	beq.n	80034da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033ee:	4b88      	ldr	r3, [pc, #544]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 030c 	and.w	r3, r3, #12
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	d00c      	beq.n	8003414 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033fa:	4b85      	ldr	r3, [pc, #532]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003402:	2b08      	cmp	r3, #8
 8003404:	d112      	bne.n	800342c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003406:	4b82      	ldr	r3, [pc, #520]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800340e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003412:	d10b      	bne.n	800342c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003414:	4b7e      	ldr	r3, [pc, #504]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d05b      	beq.n	80034d8 <HAL_RCC_OscConfig+0x108>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d157      	bne.n	80034d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e242      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003434:	d106      	bne.n	8003444 <HAL_RCC_OscConfig+0x74>
 8003436:	4b76      	ldr	r3, [pc, #472]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a75      	ldr	r2, [pc, #468]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 800343c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	e01d      	b.n	8003480 <HAL_RCC_OscConfig+0xb0>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800344c:	d10c      	bne.n	8003468 <HAL_RCC_OscConfig+0x98>
 800344e:	4b70      	ldr	r3, [pc, #448]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a6f      	ldr	r2, [pc, #444]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 8003454:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003458:	6013      	str	r3, [r2, #0]
 800345a:	4b6d      	ldr	r3, [pc, #436]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a6c      	ldr	r2, [pc, #432]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 8003460:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003464:	6013      	str	r3, [r2, #0]
 8003466:	e00b      	b.n	8003480 <HAL_RCC_OscConfig+0xb0>
 8003468:	4b69      	ldr	r3, [pc, #420]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a68      	ldr	r2, [pc, #416]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 800346e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003472:	6013      	str	r3, [r2, #0]
 8003474:	4b66      	ldr	r3, [pc, #408]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a65      	ldr	r2, [pc, #404]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 800347a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800347e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d013      	beq.n	80034b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003488:	f7ff f8fe 	bl	8002688 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003490:	f7ff f8fa 	bl	8002688 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b64      	cmp	r3, #100	@ 0x64
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e207      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a2:	4b5b      	ldr	r3, [pc, #364]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0f0      	beq.n	8003490 <HAL_RCC_OscConfig+0xc0>
 80034ae:	e014      	b.n	80034da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b0:	f7ff f8ea 	bl	8002688 <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034b8:	f7ff f8e6 	bl	8002688 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b64      	cmp	r3, #100	@ 0x64
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e1f3      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ca:	4b51      	ldr	r3, [pc, #324]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1f0      	bne.n	80034b8 <HAL_RCC_OscConfig+0xe8>
 80034d6:	e000      	b.n	80034da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d063      	beq.n	80035ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034e6:	4b4a      	ldr	r3, [pc, #296]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 030c 	and.w	r3, r3, #12
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00b      	beq.n	800350a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034f2:	4b47      	ldr	r3, [pc, #284]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034fa:	2b08      	cmp	r3, #8
 80034fc:	d11c      	bne.n	8003538 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034fe:	4b44      	ldr	r3, [pc, #272]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d116      	bne.n	8003538 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800350a:	4b41      	ldr	r3, [pc, #260]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d005      	beq.n	8003522 <HAL_RCC_OscConfig+0x152>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d001      	beq.n	8003522 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e1c7      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003522:	4b3b      	ldr	r3, [pc, #236]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	4937      	ldr	r1, [pc, #220]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 8003532:	4313      	orrs	r3, r2
 8003534:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003536:	e03a      	b.n	80035ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d020      	beq.n	8003582 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003540:	4b34      	ldr	r3, [pc, #208]	@ (8003614 <HAL_RCC_OscConfig+0x244>)
 8003542:	2201      	movs	r2, #1
 8003544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003546:	f7ff f89f 	bl	8002688 <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800354e:	f7ff f89b 	bl	8002688 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e1a8      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003560:	4b2b      	ldr	r3, [pc, #172]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0f0      	beq.n	800354e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800356c:	4b28      	ldr	r3, [pc, #160]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	4925      	ldr	r1, [pc, #148]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 800357c:	4313      	orrs	r3, r2
 800357e:	600b      	str	r3, [r1, #0]
 8003580:	e015      	b.n	80035ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003582:	4b24      	ldr	r3, [pc, #144]	@ (8003614 <HAL_RCC_OscConfig+0x244>)
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003588:	f7ff f87e 	bl	8002688 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003590:	f7ff f87a 	bl	8002688 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e187      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f0      	bne.n	8003590 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0308 	and.w	r3, r3, #8
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d036      	beq.n	8003628 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d016      	beq.n	80035f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035c2:	4b15      	ldr	r3, [pc, #84]	@ (8003618 <HAL_RCC_OscConfig+0x248>)
 80035c4:	2201      	movs	r2, #1
 80035c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c8:	f7ff f85e 	bl	8002688 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035d0:	f7ff f85a 	bl	8002688 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e167      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003610 <HAL_RCC_OscConfig+0x240>)
 80035e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0f0      	beq.n	80035d0 <HAL_RCC_OscConfig+0x200>
 80035ee:	e01b      	b.n	8003628 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035f0:	4b09      	ldr	r3, [pc, #36]	@ (8003618 <HAL_RCC_OscConfig+0x248>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f6:	f7ff f847 	bl	8002688 <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035fc:	e00e      	b.n	800361c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035fe:	f7ff f843 	bl	8002688 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d907      	bls.n	800361c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e150      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
 8003610:	40023800 	.word	0x40023800
 8003614:	42470000 	.word	0x42470000
 8003618:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800361c:	4b88      	ldr	r3, [pc, #544]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 800361e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1ea      	bne.n	80035fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 8097 	beq.w	8003764 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003636:	2300      	movs	r3, #0
 8003638:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800363a:	4b81      	ldr	r3, [pc, #516]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 800363c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10f      	bne.n	8003666 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003646:	2300      	movs	r3, #0
 8003648:	60bb      	str	r3, [r7, #8]
 800364a:	4b7d      	ldr	r3, [pc, #500]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 800364c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364e:	4a7c      	ldr	r2, [pc, #496]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 8003650:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003654:	6413      	str	r3, [r2, #64]	@ 0x40
 8003656:	4b7a      	ldr	r3, [pc, #488]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 8003658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800365e:	60bb      	str	r3, [r7, #8]
 8003660:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003662:	2301      	movs	r3, #1
 8003664:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003666:	4b77      	ldr	r3, [pc, #476]	@ (8003844 <HAL_RCC_OscConfig+0x474>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800366e:	2b00      	cmp	r3, #0
 8003670:	d118      	bne.n	80036a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003672:	4b74      	ldr	r3, [pc, #464]	@ (8003844 <HAL_RCC_OscConfig+0x474>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a73      	ldr	r2, [pc, #460]	@ (8003844 <HAL_RCC_OscConfig+0x474>)
 8003678:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800367c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800367e:	f7ff f803 	bl	8002688 <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003684:	e008      	b.n	8003698 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003686:	f7fe ffff 	bl	8002688 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e10c      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003698:	4b6a      	ldr	r3, [pc, #424]	@ (8003844 <HAL_RCC_OscConfig+0x474>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d0f0      	beq.n	8003686 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d106      	bne.n	80036ba <HAL_RCC_OscConfig+0x2ea>
 80036ac:	4b64      	ldr	r3, [pc, #400]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 80036ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036b0:	4a63      	ldr	r2, [pc, #396]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 80036b2:	f043 0301 	orr.w	r3, r3, #1
 80036b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80036b8:	e01c      	b.n	80036f4 <HAL_RCC_OscConfig+0x324>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	2b05      	cmp	r3, #5
 80036c0:	d10c      	bne.n	80036dc <HAL_RCC_OscConfig+0x30c>
 80036c2:	4b5f      	ldr	r3, [pc, #380]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 80036c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036c6:	4a5e      	ldr	r2, [pc, #376]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 80036c8:	f043 0304 	orr.w	r3, r3, #4
 80036cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80036ce:	4b5c      	ldr	r3, [pc, #368]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 80036d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036d2:	4a5b      	ldr	r2, [pc, #364]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 80036d4:	f043 0301 	orr.w	r3, r3, #1
 80036d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80036da:	e00b      	b.n	80036f4 <HAL_RCC_OscConfig+0x324>
 80036dc:	4b58      	ldr	r3, [pc, #352]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 80036de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036e0:	4a57      	ldr	r2, [pc, #348]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 80036e2:	f023 0301 	bic.w	r3, r3, #1
 80036e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80036e8:	4b55      	ldr	r3, [pc, #340]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 80036ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ec:	4a54      	ldr	r2, [pc, #336]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 80036ee:	f023 0304 	bic.w	r3, r3, #4
 80036f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d015      	beq.n	8003728 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fc:	f7fe ffc4 	bl	8002688 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003702:	e00a      	b.n	800371a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003704:	f7fe ffc0 	bl	8002688 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003712:	4293      	cmp	r3, r2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e0cb      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800371a:	4b49      	ldr	r3, [pc, #292]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 800371c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0ee      	beq.n	8003704 <HAL_RCC_OscConfig+0x334>
 8003726:	e014      	b.n	8003752 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003728:	f7fe ffae 	bl	8002688 <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800372e:	e00a      	b.n	8003746 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003730:	f7fe ffaa 	bl	8002688 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800373e:	4293      	cmp	r3, r2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e0b5      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003746:	4b3e      	ldr	r3, [pc, #248]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 8003748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1ee      	bne.n	8003730 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003752:	7dfb      	ldrb	r3, [r7, #23]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d105      	bne.n	8003764 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003758:	4b39      	ldr	r3, [pc, #228]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 800375a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375c:	4a38      	ldr	r2, [pc, #224]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 800375e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003762:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 80a1 	beq.w	80038b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800376e:	4b34      	ldr	r3, [pc, #208]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f003 030c 	and.w	r3, r3, #12
 8003776:	2b08      	cmp	r3, #8
 8003778:	d05c      	beq.n	8003834 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	2b02      	cmp	r3, #2
 8003780:	d141      	bne.n	8003806 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003782:	4b31      	ldr	r3, [pc, #196]	@ (8003848 <HAL_RCC_OscConfig+0x478>)
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003788:	f7fe ff7e 	bl	8002688 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003790:	f7fe ff7a 	bl	8002688 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e087      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a2:	4b27      	ldr	r3, [pc, #156]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1f0      	bne.n	8003790 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69da      	ldr	r2, [r3, #28]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	431a      	orrs	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037bc:	019b      	lsls	r3, r3, #6
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037c4:	085b      	lsrs	r3, r3, #1
 80037c6:	3b01      	subs	r3, #1
 80037c8:	041b      	lsls	r3, r3, #16
 80037ca:	431a      	orrs	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d0:	061b      	lsls	r3, r3, #24
 80037d2:	491b      	ldr	r1, [pc, #108]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003848 <HAL_RCC_OscConfig+0x478>)
 80037da:	2201      	movs	r2, #1
 80037dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037de:	f7fe ff53 	bl	8002688 <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037e4:	e008      	b.n	80037f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037e6:	f7fe ff4f 	bl	8002688 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e05c      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037f8:	4b11      	ldr	r3, [pc, #68]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0f0      	beq.n	80037e6 <HAL_RCC_OscConfig+0x416>
 8003804:	e054      	b.n	80038b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003806:	4b10      	ldr	r3, [pc, #64]	@ (8003848 <HAL_RCC_OscConfig+0x478>)
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380c:	f7fe ff3c 	bl	8002688 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003814:	f7fe ff38 	bl	8002688 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e045      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003826:	4b06      	ldr	r3, [pc, #24]	@ (8003840 <HAL_RCC_OscConfig+0x470>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f0      	bne.n	8003814 <HAL_RCC_OscConfig+0x444>
 8003832:	e03d      	b.n	80038b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d107      	bne.n	800384c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e038      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
 8003840:	40023800 	.word	0x40023800
 8003844:	40007000 	.word	0x40007000
 8003848:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800384c:	4b1b      	ldr	r3, [pc, #108]	@ (80038bc <HAL_RCC_OscConfig+0x4ec>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d028      	beq.n	80038ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003864:	429a      	cmp	r2, r3
 8003866:	d121      	bne.n	80038ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003872:	429a      	cmp	r2, r3
 8003874:	d11a      	bne.n	80038ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800387c:	4013      	ands	r3, r2
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003882:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003884:	4293      	cmp	r3, r2
 8003886:	d111      	bne.n	80038ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003892:	085b      	lsrs	r3, r3, #1
 8003894:	3b01      	subs	r3, #1
 8003896:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003898:	429a      	cmp	r2, r3
 800389a:	d107      	bne.n	80038ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d001      	beq.n	80038b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e000      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3718      	adds	r7, #24
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	40023800 	.word	0x40023800

080038c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e0cc      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038d4:	4b68      	ldr	r3, [pc, #416]	@ (8003a78 <HAL_RCC_ClockConfig+0x1b8>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d90c      	bls.n	80038fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038e2:	4b65      	ldr	r3, [pc, #404]	@ (8003a78 <HAL_RCC_ClockConfig+0x1b8>)
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	b2d2      	uxtb	r2, r2
 80038e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ea:	4b63      	ldr	r3, [pc, #396]	@ (8003a78 <HAL_RCC_ClockConfig+0x1b8>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d001      	beq.n	80038fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e0b8      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d020      	beq.n	800394a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b00      	cmp	r3, #0
 8003912:	d005      	beq.n	8003920 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003914:	4b59      	ldr	r3, [pc, #356]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	4a58      	ldr	r2, [pc, #352]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 800391a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800391e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0308 	and.w	r3, r3, #8
 8003928:	2b00      	cmp	r3, #0
 800392a:	d005      	beq.n	8003938 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800392c:	4b53      	ldr	r3, [pc, #332]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	4a52      	ldr	r2, [pc, #328]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003932:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003936:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003938:	4b50      	ldr	r3, [pc, #320]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	494d      	ldr	r1, [pc, #308]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003946:	4313      	orrs	r3, r2
 8003948:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d044      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d107      	bne.n	800396e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800395e:	4b47      	ldr	r3, [pc, #284]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d119      	bne.n	800399e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e07f      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2b02      	cmp	r3, #2
 8003974:	d003      	beq.n	800397e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800397a:	2b03      	cmp	r3, #3
 800397c:	d107      	bne.n	800398e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800397e:	4b3f      	ldr	r3, [pc, #252]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d109      	bne.n	800399e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e06f      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800398e:	4b3b      	ldr	r3, [pc, #236]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e067      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800399e:	4b37      	ldr	r3, [pc, #220]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f023 0203 	bic.w	r2, r3, #3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	4934      	ldr	r1, [pc, #208]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039b0:	f7fe fe6a 	bl	8002688 <HAL_GetTick>
 80039b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039b6:	e00a      	b.n	80039ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039b8:	f7fe fe66 	bl	8002688 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e04f      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ce:	4b2b      	ldr	r3, [pc, #172]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 020c 	and.w	r2, r3, #12
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	429a      	cmp	r2, r3
 80039de:	d1eb      	bne.n	80039b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039e0:	4b25      	ldr	r3, [pc, #148]	@ (8003a78 <HAL_RCC_ClockConfig+0x1b8>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d20c      	bcs.n	8003a08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ee:	4b22      	ldr	r3, [pc, #136]	@ (8003a78 <HAL_RCC_ClockConfig+0x1b8>)
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	b2d2      	uxtb	r2, r2
 80039f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f6:	4b20      	ldr	r3, [pc, #128]	@ (8003a78 <HAL_RCC_ClockConfig+0x1b8>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0307 	and.w	r3, r3, #7
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d001      	beq.n	8003a08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e032      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d008      	beq.n	8003a26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a14:	4b19      	ldr	r3, [pc, #100]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	4916      	ldr	r1, [pc, #88]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0308 	and.w	r3, r3, #8
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d009      	beq.n	8003a46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a32:	4b12      	ldr	r3, [pc, #72]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	490e      	ldr	r1, [pc, #56]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a46:	f000 f821 	bl	8003a8c <HAL_RCC_GetSysClockFreq>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	091b      	lsrs	r3, r3, #4
 8003a52:	f003 030f 	and.w	r3, r3, #15
 8003a56:	490a      	ldr	r1, [pc, #40]	@ (8003a80 <HAL_RCC_ClockConfig+0x1c0>)
 8003a58:	5ccb      	ldrb	r3, [r1, r3]
 8003a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a5e:	4a09      	ldr	r2, [pc, #36]	@ (8003a84 <HAL_RCC_ClockConfig+0x1c4>)
 8003a60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a62:	4b09      	ldr	r3, [pc, #36]	@ (8003a88 <HAL_RCC_ClockConfig+0x1c8>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7fe fdca 	bl	8002600 <HAL_InitTick>

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	40023c00 	.word	0x40023c00
 8003a7c:	40023800 	.word	0x40023800
 8003a80:	08006ae0 	.word	0x08006ae0
 8003a84:	20000000 	.word	0x20000000
 8003a88:	20000004 	.word	0x20000004

08003a8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a90:	b090      	sub	sp, #64	@ 0x40
 8003a92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a98:	2300      	movs	r3, #0
 8003a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003aa4:	4b59      	ldr	r3, [pc, #356]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f003 030c 	and.w	r3, r3, #12
 8003aac:	2b08      	cmp	r3, #8
 8003aae:	d00d      	beq.n	8003acc <HAL_RCC_GetSysClockFreq+0x40>
 8003ab0:	2b08      	cmp	r3, #8
 8003ab2:	f200 80a1 	bhi.w	8003bf8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d002      	beq.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x34>
 8003aba:	2b04      	cmp	r3, #4
 8003abc:	d003      	beq.n	8003ac6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003abe:	e09b      	b.n	8003bf8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ac0:	4b53      	ldr	r3, [pc, #332]	@ (8003c10 <HAL_RCC_GetSysClockFreq+0x184>)
 8003ac2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003ac4:	e09b      	b.n	8003bfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ac6:	4b53      	ldr	r3, [pc, #332]	@ (8003c14 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003aca:	e098      	b.n	8003bfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003acc:	4b4f      	ldr	r3, [pc, #316]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ad4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ad6:	4b4d      	ldr	r3, [pc, #308]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d028      	beq.n	8003b34 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ae2:	4b4a      	ldr	r3, [pc, #296]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	099b      	lsrs	r3, r3, #6
 8003ae8:	2200      	movs	r2, #0
 8003aea:	623b      	str	r3, [r7, #32]
 8003aec:	627a      	str	r2, [r7, #36]	@ 0x24
 8003aee:	6a3b      	ldr	r3, [r7, #32]
 8003af0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003af4:	2100      	movs	r1, #0
 8003af6:	4b47      	ldr	r3, [pc, #284]	@ (8003c14 <HAL_RCC_GetSysClockFreq+0x188>)
 8003af8:	fb03 f201 	mul.w	r2, r3, r1
 8003afc:	2300      	movs	r3, #0
 8003afe:	fb00 f303 	mul.w	r3, r0, r3
 8003b02:	4413      	add	r3, r2
 8003b04:	4a43      	ldr	r2, [pc, #268]	@ (8003c14 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b06:	fba0 1202 	umull	r1, r2, r0, r2
 8003b0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b0c:	460a      	mov	r2, r1
 8003b0e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003b10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b12:	4413      	add	r3, r2
 8003b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b18:	2200      	movs	r2, #0
 8003b1a:	61bb      	str	r3, [r7, #24]
 8003b1c:	61fa      	str	r2, [r7, #28]
 8003b1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b22:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003b26:	f7fd f845 	bl	8000bb4 <__aeabi_uldivmod>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	4613      	mov	r3, r2
 8003b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b32:	e053      	b.n	8003bdc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b34:	4b35      	ldr	r3, [pc, #212]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	099b      	lsrs	r3, r3, #6
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	613b      	str	r3, [r7, #16]
 8003b3e:	617a      	str	r2, [r7, #20]
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b46:	f04f 0b00 	mov.w	fp, #0
 8003b4a:	4652      	mov	r2, sl
 8003b4c:	465b      	mov	r3, fp
 8003b4e:	f04f 0000 	mov.w	r0, #0
 8003b52:	f04f 0100 	mov.w	r1, #0
 8003b56:	0159      	lsls	r1, r3, #5
 8003b58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b5c:	0150      	lsls	r0, r2, #5
 8003b5e:	4602      	mov	r2, r0
 8003b60:	460b      	mov	r3, r1
 8003b62:	ebb2 080a 	subs.w	r8, r2, sl
 8003b66:	eb63 090b 	sbc.w	r9, r3, fp
 8003b6a:	f04f 0200 	mov.w	r2, #0
 8003b6e:	f04f 0300 	mov.w	r3, #0
 8003b72:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b76:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b7a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b7e:	ebb2 0408 	subs.w	r4, r2, r8
 8003b82:	eb63 0509 	sbc.w	r5, r3, r9
 8003b86:	f04f 0200 	mov.w	r2, #0
 8003b8a:	f04f 0300 	mov.w	r3, #0
 8003b8e:	00eb      	lsls	r3, r5, #3
 8003b90:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b94:	00e2      	lsls	r2, r4, #3
 8003b96:	4614      	mov	r4, r2
 8003b98:	461d      	mov	r5, r3
 8003b9a:	eb14 030a 	adds.w	r3, r4, sl
 8003b9e:	603b      	str	r3, [r7, #0]
 8003ba0:	eb45 030b 	adc.w	r3, r5, fp
 8003ba4:	607b      	str	r3, [r7, #4]
 8003ba6:	f04f 0200 	mov.w	r2, #0
 8003baa:	f04f 0300 	mov.w	r3, #0
 8003bae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bb2:	4629      	mov	r1, r5
 8003bb4:	028b      	lsls	r3, r1, #10
 8003bb6:	4621      	mov	r1, r4
 8003bb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bbc:	4621      	mov	r1, r4
 8003bbe:	028a      	lsls	r2, r1, #10
 8003bc0:	4610      	mov	r0, r2
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	60bb      	str	r3, [r7, #8]
 8003bca:	60fa      	str	r2, [r7, #12]
 8003bcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bd0:	f7fc fff0 	bl	8000bb4 <__aeabi_uldivmod>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	4613      	mov	r3, r2
 8003bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	0c1b      	lsrs	r3, r3, #16
 8003be2:	f003 0303 	and.w	r3, r3, #3
 8003be6:	3301      	adds	r3, #1
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003bec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003bf6:	e002      	b.n	8003bfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bf8:	4b05      	ldr	r3, [pc, #20]	@ (8003c10 <HAL_RCC_GetSysClockFreq+0x184>)
 8003bfa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003bfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3740      	adds	r7, #64	@ 0x40
 8003c04:	46bd      	mov	sp, r7
 8003c06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c0a:	bf00      	nop
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	00f42400 	.word	0x00f42400
 8003c14:	017d7840 	.word	0x017d7840

08003c18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e07b      	b.n	8003d22 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d108      	bne.n	8003c44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c3a:	d009      	beq.n	8003c50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	61da      	str	r2, [r3, #28]
 8003c42:	e005      	b.n	8003c50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d106      	bne.n	8003c70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7fe fb4c 	bl	8002308 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2202      	movs	r2, #2
 8003c74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c86:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	431a      	orrs	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	69db      	ldr	r3, [r3, #28]
 8003cc6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cd4:	ea42 0103 	orr.w	r1, r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cdc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	0c1b      	lsrs	r3, r3, #16
 8003cee:	f003 0104 	and.w	r1, r3, #4
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf6:	f003 0210 	and.w	r2, r3, #16
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	69da      	ldr	r2, [r3, #28]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d10:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3708      	adds	r7, #8
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b088      	sub	sp, #32
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	60f8      	str	r0, [r7, #12]
 8003d32:	60b9      	str	r1, [r7, #8]
 8003d34:	603b      	str	r3, [r7, #0]
 8003d36:	4613      	mov	r3, r2
 8003d38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d101      	bne.n	8003d4c <HAL_SPI_Transmit+0x22>
 8003d48:	2302      	movs	r3, #2
 8003d4a:	e12d      	b.n	8003fa8 <HAL_SPI_Transmit+0x27e>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d54:	f7fe fc98 	bl	8002688 <HAL_GetTick>
 8003d58:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d5a:	88fb      	ldrh	r3, [r7, #6]
 8003d5c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d002      	beq.n	8003d70 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d6e:	e116      	b.n	8003f9e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d002      	beq.n	8003d7c <HAL_SPI_Transmit+0x52>
 8003d76:	88fb      	ldrh	r3, [r7, #6]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d102      	bne.n	8003d82 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d80:	e10d      	b.n	8003f9e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2203      	movs	r2, #3
 8003d86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	68ba      	ldr	r2, [r7, #8]
 8003d94:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	88fa      	ldrh	r2, [r7, #6]
 8003d9a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	88fa      	ldrh	r2, [r7, #6]
 8003da0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dc8:	d10f      	bne.n	8003dea <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003dd8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003de8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003df4:	2b40      	cmp	r3, #64	@ 0x40
 8003df6:	d007      	beq.n	8003e08 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e10:	d14f      	bne.n	8003eb2 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d002      	beq.n	8003e20 <HAL_SPI_Transmit+0xf6>
 8003e1a:	8afb      	ldrh	r3, [r7, #22]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d142      	bne.n	8003ea6 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e24:	881a      	ldrh	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e30:	1c9a      	adds	r2, r3, #2
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e44:	e02f      	b.n	8003ea6 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d112      	bne.n	8003e7a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e58:	881a      	ldrh	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e64:	1c9a      	adds	r2, r3, #2
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	3b01      	subs	r3, #1
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003e78:	e015      	b.n	8003ea6 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e7a:	f7fe fc05 	bl	8002688 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d803      	bhi.n	8003e92 <HAL_SPI_Transmit+0x168>
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e90:	d102      	bne.n	8003e98 <HAL_SPI_Transmit+0x16e>
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d106      	bne.n	8003ea6 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003ea4:	e07b      	b.n	8003f9e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1ca      	bne.n	8003e46 <HAL_SPI_Transmit+0x11c>
 8003eb0:	e050      	b.n	8003f54 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d002      	beq.n	8003ec0 <HAL_SPI_Transmit+0x196>
 8003eba:	8afb      	ldrh	r3, [r7, #22]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d144      	bne.n	8003f4a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	330c      	adds	r3, #12
 8003eca:	7812      	ldrb	r2, [r2, #0]
 8003ecc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed2:	1c5a      	adds	r2, r3, #1
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003ee6:	e030      	b.n	8003f4a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d113      	bne.n	8003f1e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	330c      	adds	r3, #12
 8003f00:	7812      	ldrb	r2, [r2, #0]
 8003f02:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f08:	1c5a      	adds	r2, r3, #1
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	3b01      	subs	r3, #1
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003f1c:	e015      	b.n	8003f4a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f1e:	f7fe fbb3 	bl	8002688 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d803      	bhi.n	8003f36 <HAL_SPI_Transmit+0x20c>
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f34:	d102      	bne.n	8003f3c <HAL_SPI_Transmit+0x212>
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d106      	bne.n	8003f4a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003f48:	e029      	b.n	8003f9e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1c9      	bne.n	8003ee8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	6839      	ldr	r1, [r7, #0]
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f000 fbdf 	bl	800471c <SPI_EndRxTxTransaction>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d002      	beq.n	8003f6a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2220      	movs	r2, #32
 8003f68:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10a      	bne.n	8003f88 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f72:	2300      	movs	r3, #0
 8003f74:	613b      	str	r3, [r7, #16]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	613b      	str	r3, [r7, #16]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	613b      	str	r3, [r7, #16]
 8003f86:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d002      	beq.n	8003f96 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	77fb      	strb	r3, [r7, #31]
 8003f94:	e003      	b.n	8003f9e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003fa6:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3720      	adds	r7, #32
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b088      	sub	sp, #32
 8003fb4:	af02      	add	r7, sp, #8
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	603b      	str	r3, [r7, #0]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d002      	beq.n	8003fd6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003fd4:	e0fb      	b.n	80041ce <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fde:	d112      	bne.n	8004006 <HAL_SPI_Receive+0x56>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d10e      	bne.n	8004006 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2204      	movs	r2, #4
 8003fec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003ff0:	88fa      	ldrh	r2, [r7, #6]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	9300      	str	r3, [sp, #0]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	68ba      	ldr	r2, [r7, #8]
 8003ffa:	68b9      	ldr	r1, [r7, #8]
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f000 f8ef 	bl	80041e0 <HAL_SPI_TransmitReceive>
 8004002:	4603      	mov	r3, r0
 8004004:	e0e8      	b.n	80041d8 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800400c:	2b01      	cmp	r3, #1
 800400e:	d101      	bne.n	8004014 <HAL_SPI_Receive+0x64>
 8004010:	2302      	movs	r3, #2
 8004012:	e0e1      	b.n	80041d8 <HAL_SPI_Receive+0x228>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800401c:	f7fe fb34 	bl	8002688 <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d002      	beq.n	800402e <HAL_SPI_Receive+0x7e>
 8004028:	88fb      	ldrh	r3, [r7, #6]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d102      	bne.n	8004034 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004032:	e0cc      	b.n	80041ce <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2204      	movs	r2, #4
 8004038:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	88fa      	ldrh	r2, [r7, #6]
 800404c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	88fa      	ldrh	r2, [r7, #6]
 8004052:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800407a:	d10f      	bne.n	800409c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800408a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800409a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040a6:	2b40      	cmp	r3, #64	@ 0x40
 80040a8:	d007      	beq.n	80040ba <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040b8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d16a      	bne.n	8004198 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80040c2:	e032      	b.n	800412a <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d115      	bne.n	80040fe <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f103 020c 	add.w	r2, r3, #12
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040de:	7812      	ldrb	r2, [r2, #0]
 80040e0:	b2d2      	uxtb	r2, r2
 80040e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040e8:	1c5a      	adds	r2, r3, #1
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	3b01      	subs	r3, #1
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80040fc:	e015      	b.n	800412a <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040fe:	f7fe fac3 	bl	8002688 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	429a      	cmp	r2, r3
 800410c:	d803      	bhi.n	8004116 <HAL_SPI_Receive+0x166>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004114:	d102      	bne.n	800411c <HAL_SPI_Receive+0x16c>
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d106      	bne.n	800412a <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004128:	e051      	b.n	80041ce <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800412e:	b29b      	uxth	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1c7      	bne.n	80040c4 <HAL_SPI_Receive+0x114>
 8004134:	e035      	b.n	80041a2 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f003 0301 	and.w	r3, r3, #1
 8004140:	2b01      	cmp	r3, #1
 8004142:	d113      	bne.n	800416c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68da      	ldr	r2, [r3, #12]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800414e:	b292      	uxth	r2, r2
 8004150:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004156:	1c9a      	adds	r2, r3, #2
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004160:	b29b      	uxth	r3, r3
 8004162:	3b01      	subs	r3, #1
 8004164:	b29a      	uxth	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800416a:	e015      	b.n	8004198 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800416c:	f7fe fa8c 	bl	8002688 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	429a      	cmp	r2, r3
 800417a:	d803      	bhi.n	8004184 <HAL_SPI_Receive+0x1d4>
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004182:	d102      	bne.n	800418a <HAL_SPI_Receive+0x1da>
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d106      	bne.n	8004198 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004196:	e01a      	b.n	80041ce <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800419c:	b29b      	uxth	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1c9      	bne.n	8004136 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	6839      	ldr	r1, [r7, #0]
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f000 fa52 	bl	8004650 <SPI_EndRxTransaction>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d002      	beq.n	80041b8 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2220      	movs	r2, #32
 80041b6:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d002      	beq.n	80041c6 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	75fb      	strb	r3, [r7, #23]
 80041c4:	e003      	b.n	80041ce <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80041d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3718      	adds	r7, #24
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b08c      	sub	sp, #48	@ 0x30
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
 80041ec:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80041ee:	2301      	movs	r3, #1
 80041f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80041f2:	2300      	movs	r3, #0
 80041f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d101      	bne.n	8004206 <HAL_SPI_TransmitReceive+0x26>
 8004202:	2302      	movs	r3, #2
 8004204:	e198      	b.n	8004538 <HAL_SPI_TransmitReceive+0x358>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800420e:	f7fe fa3b 	bl	8002688 <HAL_GetTick>
 8004212:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800421a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004224:	887b      	ldrh	r3, [r7, #2]
 8004226:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004228:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800422c:	2b01      	cmp	r3, #1
 800422e:	d00f      	beq.n	8004250 <HAL_SPI_TransmitReceive+0x70>
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004236:	d107      	bne.n	8004248 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d103      	bne.n	8004248 <HAL_SPI_TransmitReceive+0x68>
 8004240:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004244:	2b04      	cmp	r3, #4
 8004246:	d003      	beq.n	8004250 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004248:	2302      	movs	r3, #2
 800424a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800424e:	e16d      	b.n	800452c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d005      	beq.n	8004262 <HAL_SPI_TransmitReceive+0x82>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d002      	beq.n	8004262 <HAL_SPI_TransmitReceive+0x82>
 800425c:	887b      	ldrh	r3, [r7, #2]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d103      	bne.n	800426a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004268:	e160      	b.n	800452c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b04      	cmp	r3, #4
 8004274:	d003      	beq.n	800427e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2205      	movs	r2, #5
 800427a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	887a      	ldrh	r2, [r7, #2]
 800428e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	887a      	ldrh	r2, [r7, #2]
 8004294:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	887a      	ldrh	r2, [r7, #2]
 80042a0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	887a      	ldrh	r2, [r7, #2]
 80042a6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042be:	2b40      	cmp	r3, #64	@ 0x40
 80042c0:	d007      	beq.n	80042d2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80042d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042da:	d17c      	bne.n	80043d6 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d002      	beq.n	80042ea <HAL_SPI_TransmitReceive+0x10a>
 80042e4:	8b7b      	ldrh	r3, [r7, #26]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d16a      	bne.n	80043c0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ee:	881a      	ldrh	r2, [r3, #0]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042fa:	1c9a      	adds	r2, r3, #2
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004304:	b29b      	uxth	r3, r3
 8004306:	3b01      	subs	r3, #1
 8004308:	b29a      	uxth	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800430e:	e057      	b.n	80043c0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b02      	cmp	r3, #2
 800431c:	d11b      	bne.n	8004356 <HAL_SPI_TransmitReceive+0x176>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004322:	b29b      	uxth	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	d016      	beq.n	8004356 <HAL_SPI_TransmitReceive+0x176>
 8004328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800432a:	2b01      	cmp	r3, #1
 800432c:	d113      	bne.n	8004356 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004332:	881a      	ldrh	r2, [r3, #0]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800433e:	1c9a      	adds	r2, r3, #2
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004348:	b29b      	uxth	r3, r3
 800434a:	3b01      	subs	r3, #1
 800434c:	b29a      	uxth	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004352:	2300      	movs	r3, #0
 8004354:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	2b01      	cmp	r3, #1
 8004362:	d119      	bne.n	8004398 <HAL_SPI_TransmitReceive+0x1b8>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004368:	b29b      	uxth	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d014      	beq.n	8004398 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68da      	ldr	r2, [r3, #12]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004378:	b292      	uxth	r2, r2
 800437a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004380:	1c9a      	adds	r2, r3, #2
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800438a:	b29b      	uxth	r3, r3
 800438c:	3b01      	subs	r3, #1
 800438e:	b29a      	uxth	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004394:	2301      	movs	r3, #1
 8004396:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004398:	f7fe f976 	bl	8002688 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d80b      	bhi.n	80043c0 <HAL_SPI_TransmitReceive+0x1e0>
 80043a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ae:	d007      	beq.n	80043c0 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80043be:	e0b5      	b.n	800452c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1a2      	bne.n	8004310 <HAL_SPI_TransmitReceive+0x130>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d19d      	bne.n	8004310 <HAL_SPI_TransmitReceive+0x130>
 80043d4:	e080      	b.n	80044d8 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d002      	beq.n	80043e4 <HAL_SPI_TransmitReceive+0x204>
 80043de:	8b7b      	ldrh	r3, [r7, #26]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d16f      	bne.n	80044c4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	330c      	adds	r3, #12
 80043ee:	7812      	ldrb	r2, [r2, #0]
 80043f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f6:	1c5a      	adds	r2, r3, #1
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004400:	b29b      	uxth	r3, r3
 8004402:	3b01      	subs	r3, #1
 8004404:	b29a      	uxth	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800440a:	e05b      	b.n	80044c4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b02      	cmp	r3, #2
 8004418:	d11c      	bne.n	8004454 <HAL_SPI_TransmitReceive+0x274>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800441e:	b29b      	uxth	r3, r3
 8004420:	2b00      	cmp	r3, #0
 8004422:	d017      	beq.n	8004454 <HAL_SPI_TransmitReceive+0x274>
 8004424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004426:	2b01      	cmp	r3, #1
 8004428:	d114      	bne.n	8004454 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	330c      	adds	r3, #12
 8004434:	7812      	ldrb	r2, [r2, #0]
 8004436:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800443c:	1c5a      	adds	r2, r3, #1
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004446:	b29b      	uxth	r3, r3
 8004448:	3b01      	subs	r3, #1
 800444a:	b29a      	uxth	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004450:	2300      	movs	r3, #0
 8004452:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b01      	cmp	r3, #1
 8004460:	d119      	bne.n	8004496 <HAL_SPI_TransmitReceive+0x2b6>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004466:	b29b      	uxth	r3, r3
 8004468:	2b00      	cmp	r3, #0
 800446a:	d014      	beq.n	8004496 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68da      	ldr	r2, [r3, #12]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004476:	b2d2      	uxtb	r2, r2
 8004478:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800447e:	1c5a      	adds	r2, r3, #1
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004488:	b29b      	uxth	r3, r3
 800448a:	3b01      	subs	r3, #1
 800448c:	b29a      	uxth	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004492:	2301      	movs	r3, #1
 8004494:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004496:	f7fe f8f7 	bl	8002688 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d803      	bhi.n	80044ae <HAL_SPI_TransmitReceive+0x2ce>
 80044a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ac:	d102      	bne.n	80044b4 <HAL_SPI_TransmitReceive+0x2d4>
 80044ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d107      	bne.n	80044c4 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2201      	movs	r2, #1
 80044be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80044c2:	e033      	b.n	800452c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d19e      	bne.n	800440c <HAL_SPI_TransmitReceive+0x22c>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d199      	bne.n	800440c <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044da:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f000 f91d 	bl	800471c <SPI_EndRxTxTransaction>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d006      	beq.n	80044f6 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2220      	movs	r2, #32
 80044f2:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80044f4:	e01a      	b.n	800452c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10a      	bne.n	8004514 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044fe:	2300      	movs	r3, #0
 8004500:	617b      	str	r3, [r7, #20]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	617b      	str	r3, [r7, #20]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	617b      	str	r3, [r7, #20]
 8004512:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004518:	2b00      	cmp	r3, #0
 800451a:	d003      	beq.n	8004524 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004522:	e003      	b.n	800452c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004534:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8004538:	4618      	mov	r0, r3
 800453a:	3730      	adds	r7, #48	@ 0x30
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b088      	sub	sp, #32
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	603b      	str	r3, [r7, #0]
 800454c:	4613      	mov	r3, r2
 800454e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004550:	f7fe f89a 	bl	8002688 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004558:	1a9b      	subs	r3, r3, r2
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	4413      	add	r3, r2
 800455e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004560:	f7fe f892 	bl	8002688 <HAL_GetTick>
 8004564:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004566:	4b39      	ldr	r3, [pc, #228]	@ (800464c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	015b      	lsls	r3, r3, #5
 800456c:	0d1b      	lsrs	r3, r3, #20
 800456e:	69fa      	ldr	r2, [r7, #28]
 8004570:	fb02 f303 	mul.w	r3, r2, r3
 8004574:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004576:	e054      	b.n	8004622 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800457e:	d050      	beq.n	8004622 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004580:	f7fe f882 	bl	8002688 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	69fa      	ldr	r2, [r7, #28]
 800458c:	429a      	cmp	r2, r3
 800458e:	d902      	bls.n	8004596 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d13d      	bne.n	8004612 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	685a      	ldr	r2, [r3, #4]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80045a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045ae:	d111      	bne.n	80045d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045b8:	d004      	beq.n	80045c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045c2:	d107      	bne.n	80045d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045dc:	d10f      	bne.n	80045fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80045ec:	601a      	str	r2, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80045fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e017      	b.n	8004642 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004618:	2300      	movs	r3, #0
 800461a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	3b01      	subs	r3, #1
 8004620:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	689a      	ldr	r2, [r3, #8]
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	4013      	ands	r3, r2
 800462c:	68ba      	ldr	r2, [r7, #8]
 800462e:	429a      	cmp	r2, r3
 8004630:	bf0c      	ite	eq
 8004632:	2301      	moveq	r3, #1
 8004634:	2300      	movne	r3, #0
 8004636:	b2db      	uxtb	r3, r3
 8004638:	461a      	mov	r2, r3
 800463a:	79fb      	ldrb	r3, [r7, #7]
 800463c:	429a      	cmp	r2, r3
 800463e:	d19b      	bne.n	8004578 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3720      	adds	r7, #32
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	20000000 	.word	0x20000000

08004650 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af02      	add	r7, sp, #8
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004664:	d111      	bne.n	800468a <SPI_EndRxTransaction+0x3a>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800466e:	d004      	beq.n	800467a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004678:	d107      	bne.n	800468a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004688:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004692:	d12a      	bne.n	80046ea <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800469c:	d012      	beq.n	80046c4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	9300      	str	r3, [sp, #0]
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	2200      	movs	r2, #0
 80046a6:	2180      	movs	r1, #128	@ 0x80
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f7ff ff49 	bl	8004540 <SPI_WaitFlagStateUntilTimeout>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d02d      	beq.n	8004710 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046b8:	f043 0220 	orr.w	r2, r3, #32
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e026      	b.n	8004712 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	9300      	str	r3, [sp, #0]
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	2200      	movs	r2, #0
 80046cc:	2101      	movs	r1, #1
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f7ff ff36 	bl	8004540 <SPI_WaitFlagStateUntilTimeout>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d01a      	beq.n	8004710 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046de:	f043 0220 	orr.w	r2, r3, #32
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e013      	b.n	8004712 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	2200      	movs	r2, #0
 80046f2:	2101      	movs	r1, #1
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f7ff ff23 	bl	8004540 <SPI_WaitFlagStateUntilTimeout>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d007      	beq.n	8004710 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004704:	f043 0220 	orr.w	r2, r3, #32
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e000      	b.n	8004712 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
	...

0800471c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b088      	sub	sp, #32
 8004720:	af02      	add	r7, sp, #8
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	9300      	str	r3, [sp, #0]
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	2201      	movs	r2, #1
 8004730:	2102      	movs	r1, #2
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f7ff ff04 	bl	8004540 <SPI_WaitFlagStateUntilTimeout>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d007      	beq.n	800474e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004742:	f043 0220 	orr.w	r2, r3, #32
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e032      	b.n	80047b4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800474e:	4b1b      	ldr	r3, [pc, #108]	@ (80047bc <SPI_EndRxTxTransaction+0xa0>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a1b      	ldr	r2, [pc, #108]	@ (80047c0 <SPI_EndRxTxTransaction+0xa4>)
 8004754:	fba2 2303 	umull	r2, r3, r2, r3
 8004758:	0d5b      	lsrs	r3, r3, #21
 800475a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800475e:	fb02 f303 	mul.w	r3, r2, r3
 8004762:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800476c:	d112      	bne.n	8004794 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	9300      	str	r3, [sp, #0]
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	2200      	movs	r2, #0
 8004776:	2180      	movs	r1, #128	@ 0x80
 8004778:	68f8      	ldr	r0, [r7, #12]
 800477a:	f7ff fee1 	bl	8004540 <SPI_WaitFlagStateUntilTimeout>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d016      	beq.n	80047b2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004788:	f043 0220 	orr.w	r2, r3, #32
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e00f      	b.n	80047b4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00a      	beq.n	80047b0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	3b01      	subs	r3, #1
 800479e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047aa:	2b80      	cmp	r3, #128	@ 0x80
 80047ac:	d0f2      	beq.n	8004794 <SPI_EndRxTxTransaction+0x78>
 80047ae:	e000      	b.n	80047b2 <SPI_EndRxTxTransaction+0x96>
        break;
 80047b0:	bf00      	nop
  }

  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3718      	adds	r7, #24
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	20000000 	.word	0x20000000
 80047c0:	165e9f81 	.word	0x165e9f81

080047c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e041      	b.n	800485a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d106      	bne.n	80047f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f7fd fdd4 	bl	8002398 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2202      	movs	r2, #2
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	3304      	adds	r3, #4
 8004800:	4619      	mov	r1, r3
 8004802:	4610      	mov	r0, r2
 8004804:	f000 fd6a 	bl	80052dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b082      	sub	sp, #8
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d101      	bne.n	8004874 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e041      	b.n	80048f8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800487a:	b2db      	uxtb	r3, r3
 800487c:	2b00      	cmp	r3, #0
 800487e:	d106      	bne.n	800488e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 f839 	bl	8004900 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2202      	movs	r2, #2
 8004892:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	3304      	adds	r3, #4
 800489e:	4619      	mov	r1, r3
 80048a0:	4610      	mov	r0, r2
 80048a2:	f000 fd1b 	bl	80052dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2201      	movs	r2, #1
 80048c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3708      	adds	r7, #8
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
 8004920:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004922:	2300      	movs	r3, #0
 8004924:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d109      	bne.n	8004940 <HAL_TIM_PWM_Start_DMA+0x2c>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004932:	b2db      	uxtb	r3, r3
 8004934:	2b02      	cmp	r3, #2
 8004936:	bf0c      	ite	eq
 8004938:	2301      	moveq	r3, #1
 800493a:	2300      	movne	r3, #0
 800493c:	b2db      	uxtb	r3, r3
 800493e:	e022      	b.n	8004986 <HAL_TIM_PWM_Start_DMA+0x72>
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	2b04      	cmp	r3, #4
 8004944:	d109      	bne.n	800495a <HAL_TIM_PWM_Start_DMA+0x46>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b02      	cmp	r3, #2
 8004950:	bf0c      	ite	eq
 8004952:	2301      	moveq	r3, #1
 8004954:	2300      	movne	r3, #0
 8004956:	b2db      	uxtb	r3, r3
 8004958:	e015      	b.n	8004986 <HAL_TIM_PWM_Start_DMA+0x72>
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	2b08      	cmp	r3, #8
 800495e:	d109      	bne.n	8004974 <HAL_TIM_PWM_Start_DMA+0x60>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b02      	cmp	r3, #2
 800496a:	bf0c      	ite	eq
 800496c:	2301      	moveq	r3, #1
 800496e:	2300      	movne	r3, #0
 8004970:	b2db      	uxtb	r3, r3
 8004972:	e008      	b.n	8004986 <HAL_TIM_PWM_Start_DMA+0x72>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b02      	cmp	r3, #2
 800497e:	bf0c      	ite	eq
 8004980:	2301      	moveq	r3, #1
 8004982:	2300      	movne	r3, #0
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800498a:	2302      	movs	r3, #2
 800498c:	e15d      	b.n	8004c4a <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d109      	bne.n	80049a8 <HAL_TIM_PWM_Start_DMA+0x94>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b01      	cmp	r3, #1
 800499e:	bf0c      	ite	eq
 80049a0:	2301      	moveq	r3, #1
 80049a2:	2300      	movne	r3, #0
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	e022      	b.n	80049ee <HAL_TIM_PWM_Start_DMA+0xda>
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	d109      	bne.n	80049c2 <HAL_TIM_PWM_Start_DMA+0xae>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	bf0c      	ite	eq
 80049ba:	2301      	moveq	r3, #1
 80049bc:	2300      	movne	r3, #0
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	e015      	b.n	80049ee <HAL_TIM_PWM_Start_DMA+0xda>
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	d109      	bne.n	80049dc <HAL_TIM_PWM_Start_DMA+0xc8>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	bf0c      	ite	eq
 80049d4:	2301      	moveq	r3, #1
 80049d6:	2300      	movne	r3, #0
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	e008      	b.n	80049ee <HAL_TIM_PWM_Start_DMA+0xda>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	bf0c      	ite	eq
 80049e8:	2301      	moveq	r3, #1
 80049ea:	2300      	movne	r3, #0
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d024      	beq.n	8004a3c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d002      	beq.n	80049fe <HAL_TIM_PWM_Start_DMA+0xea>
 80049f8:	887b      	ldrh	r3, [r7, #2]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e123      	b.n	8004c4a <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d104      	bne.n	8004a12 <HAL_TIM_PWM_Start_DMA+0xfe>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a10:	e016      	b.n	8004a40 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	2b04      	cmp	r3, #4
 8004a16:	d104      	bne.n	8004a22 <HAL_TIM_PWM_Start_DMA+0x10e>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a20:	e00e      	b.n	8004a40 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	2b08      	cmp	r3, #8
 8004a26:	d104      	bne.n	8004a32 <HAL_TIM_PWM_Start_DMA+0x11e>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a30:	e006      	b.n	8004a40 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2202      	movs	r2, #2
 8004a36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a3a:	e001      	b.n	8004a40 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e104      	b.n	8004c4a <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	2b0c      	cmp	r3, #12
 8004a44:	f200 80ae 	bhi.w	8004ba4 <HAL_TIM_PWM_Start_DMA+0x290>
 8004a48:	a201      	add	r2, pc, #4	@ (adr r2, 8004a50 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8004a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a4e:	bf00      	nop
 8004a50:	08004a85 	.word	0x08004a85
 8004a54:	08004ba5 	.word	0x08004ba5
 8004a58:	08004ba5 	.word	0x08004ba5
 8004a5c:	08004ba5 	.word	0x08004ba5
 8004a60:	08004acd 	.word	0x08004acd
 8004a64:	08004ba5 	.word	0x08004ba5
 8004a68:	08004ba5 	.word	0x08004ba5
 8004a6c:	08004ba5 	.word	0x08004ba5
 8004a70:	08004b15 	.word	0x08004b15
 8004a74:	08004ba5 	.word	0x08004ba5
 8004a78:	08004ba5 	.word	0x08004ba5
 8004a7c:	08004ba5 	.word	0x08004ba5
 8004a80:	08004b5d 	.word	0x08004b5d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a88:	4a72      	ldr	r2, [pc, #456]	@ (8004c54 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004a8a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a90:	4a71      	ldr	r2, [pc, #452]	@ (8004c58 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004a92:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a98:	4a70      	ldr	r2, [pc, #448]	@ (8004c5c <HAL_TIM_PWM_Start_DMA+0x348>)
 8004a9a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8004aa0:	6879      	ldr	r1, [r7, #4]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	3334      	adds	r3, #52	@ 0x34
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	887b      	ldrh	r3, [r7, #2]
 8004aac:	f7fd ffdc 	bl	8002a68 <HAL_DMA_Start_IT>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d001      	beq.n	8004aba <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e0c7      	b.n	8004c4a <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68da      	ldr	r2, [r3, #12]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ac8:	60da      	str	r2, [r3, #12]
      break;
 8004aca:	e06e      	b.n	8004baa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad0:	4a60      	ldr	r2, [pc, #384]	@ (8004c54 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004ad2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad8:	4a5f      	ldr	r2, [pc, #380]	@ (8004c58 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004ada:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae0:	4a5e      	ldr	r2, [pc, #376]	@ (8004c5c <HAL_TIM_PWM_Start_DMA+0x348>)
 8004ae2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004ae8:	6879      	ldr	r1, [r7, #4]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	3338      	adds	r3, #56	@ 0x38
 8004af0:	461a      	mov	r2, r3
 8004af2:	887b      	ldrh	r3, [r7, #2]
 8004af4:	f7fd ffb8 	bl	8002a68 <HAL_DMA_Start_IT>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d001      	beq.n	8004b02 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e0a3      	b.n	8004c4a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68da      	ldr	r2, [r3, #12]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b10:	60da      	str	r2, [r3, #12]
      break;
 8004b12:	e04a      	b.n	8004baa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b18:	4a4e      	ldr	r2, [pc, #312]	@ (8004c54 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004b1a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b20:	4a4d      	ldr	r2, [pc, #308]	@ (8004c58 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004b22:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b28:	4a4c      	ldr	r2, [pc, #304]	@ (8004c5c <HAL_TIM_PWM_Start_DMA+0x348>)
 8004b2a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8004b30:	6879      	ldr	r1, [r7, #4]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	333c      	adds	r3, #60	@ 0x3c
 8004b38:	461a      	mov	r2, r3
 8004b3a:	887b      	ldrh	r3, [r7, #2]
 8004b3c:	f7fd ff94 	bl	8002a68 <HAL_DMA_Start_IT>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e07f      	b.n	8004c4a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68da      	ldr	r2, [r3, #12]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b58:	60da      	str	r2, [r3, #12]
      break;
 8004b5a:	e026      	b.n	8004baa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b60:	4a3c      	ldr	r2, [pc, #240]	@ (8004c54 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004b62:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b68:	4a3b      	ldr	r2, [pc, #236]	@ (8004c58 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004b6a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b70:	4a3a      	ldr	r2, [pc, #232]	@ (8004c5c <HAL_TIM_PWM_Start_DMA+0x348>)
 8004b72:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004b78:	6879      	ldr	r1, [r7, #4]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	3340      	adds	r3, #64	@ 0x40
 8004b80:	461a      	mov	r2, r3
 8004b82:	887b      	ldrh	r3, [r7, #2]
 8004b84:	f7fd ff70 	bl	8002a68 <HAL_DMA_Start_IT>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e05b      	b.n	8004c4a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68da      	ldr	r2, [r3, #12]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004ba0:	60da      	str	r2, [r3, #12]
      break;
 8004ba2:	e002      	b.n	8004baa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ba8:	bf00      	nop
  }

  if (status == HAL_OK)
 8004baa:	7dfb      	ldrb	r3, [r7, #23]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d14b      	bne.n	8004c48 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	68b9      	ldr	r1, [r7, #8]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f000 fe41 	bl	8005840 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a27      	ldr	r2, [pc, #156]	@ (8004c60 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d107      	bne.n	8004bd8 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004bd6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a20      	ldr	r2, [pc, #128]	@ (8004c60 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d018      	beq.n	8004c14 <HAL_TIM_PWM_Start_DMA+0x300>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bea:	d013      	beq.n	8004c14 <HAL_TIM_PWM_Start_DMA+0x300>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a1c      	ldr	r2, [pc, #112]	@ (8004c64 <HAL_TIM_PWM_Start_DMA+0x350>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d00e      	beq.n	8004c14 <HAL_TIM_PWM_Start_DMA+0x300>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a1b      	ldr	r2, [pc, #108]	@ (8004c68 <HAL_TIM_PWM_Start_DMA+0x354>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d009      	beq.n	8004c14 <HAL_TIM_PWM_Start_DMA+0x300>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a19      	ldr	r2, [pc, #100]	@ (8004c6c <HAL_TIM_PWM_Start_DMA+0x358>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d004      	beq.n	8004c14 <HAL_TIM_PWM_Start_DMA+0x300>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a18      	ldr	r2, [pc, #96]	@ (8004c70 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d111      	bne.n	8004c38 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f003 0307 	and.w	r3, r3, #7
 8004c1e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	2b06      	cmp	r3, #6
 8004c24:	d010      	beq.n	8004c48 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f042 0201 	orr.w	r2, r2, #1
 8004c34:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c36:	e007      	b.n	8004c48 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f042 0201 	orr.w	r2, r2, #1
 8004c46:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3718      	adds	r7, #24
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	080051cd 	.word	0x080051cd
 8004c58:	08005275 	.word	0x08005275
 8004c5c:	0800513b 	.word	0x0800513b
 8004c60:	40010000 	.word	0x40010000
 8004c64:	40000400 	.word	0x40000400
 8004c68:	40000800 	.word	0x40000800
 8004c6c:	40000c00 	.word	0x40000c00
 8004c70:	40014000 	.word	0x40014000

08004c74 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	2b0c      	cmp	r3, #12
 8004c86:	d855      	bhi.n	8004d34 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004c88:	a201      	add	r2, pc, #4	@ (adr r2, 8004c90 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8004c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c8e:	bf00      	nop
 8004c90:	08004cc5 	.word	0x08004cc5
 8004c94:	08004d35 	.word	0x08004d35
 8004c98:	08004d35 	.word	0x08004d35
 8004c9c:	08004d35 	.word	0x08004d35
 8004ca0:	08004ce1 	.word	0x08004ce1
 8004ca4:	08004d35 	.word	0x08004d35
 8004ca8:	08004d35 	.word	0x08004d35
 8004cac:	08004d35 	.word	0x08004d35
 8004cb0:	08004cfd 	.word	0x08004cfd
 8004cb4:	08004d35 	.word	0x08004d35
 8004cb8:	08004d35 	.word	0x08004d35
 8004cbc:	08004d35 	.word	0x08004d35
 8004cc0:	08004d19 	.word	0x08004d19
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68da      	ldr	r2, [r3, #12]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004cd2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7fd ff1d 	bl	8002b18 <HAL_DMA_Abort_IT>
      break;
 8004cde:	e02c      	b.n	8004d3a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68da      	ldr	r2, [r3, #12]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cee:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7fd ff0f 	bl	8002b18 <HAL_DMA_Abort_IT>
      break;
 8004cfa:	e01e      	b.n	8004d3a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68da      	ldr	r2, [r3, #12]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d0a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7fd ff01 	bl	8002b18 <HAL_DMA_Abort_IT>
      break;
 8004d16:	e010      	b.n	8004d3a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68da      	ldr	r2, [r3, #12]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004d26:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7fd fef3 	bl	8002b18 <HAL_DMA_Abort_IT>
      break;
 8004d32:	e002      	b.n	8004d3a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	73fb      	strb	r3, [r7, #15]
      break;
 8004d38:	bf00      	nop
  }

  if (status == HAL_OK)
 8004d3a:	7bfb      	ldrb	r3, [r7, #15]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d157      	bne.n	8004df0 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2200      	movs	r2, #0
 8004d46:	6839      	ldr	r1, [r7, #0]
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f000 fd79 	bl	8005840 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a2a      	ldr	r2, [pc, #168]	@ (8004dfc <HAL_TIM_PWM_Stop_DMA+0x188>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d117      	bne.n	8004d88 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6a1a      	ldr	r2, [r3, #32]
 8004d5e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004d62:	4013      	ands	r3, r2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d10f      	bne.n	8004d88 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6a1a      	ldr	r2, [r3, #32]
 8004d6e:	f240 4344 	movw	r3, #1092	@ 0x444
 8004d72:	4013      	ands	r3, r2
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d107      	bne.n	8004d88 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004d86:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	6a1a      	ldr	r2, [r3, #32]
 8004d8e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004d92:	4013      	ands	r3, r2
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10f      	bne.n	8004db8 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	6a1a      	ldr	r2, [r3, #32]
 8004d9e:	f240 4344 	movw	r3, #1092	@ 0x444
 8004da2:	4013      	ands	r3, r2
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d107      	bne.n	8004db8 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 0201 	bic.w	r2, r2, #1
 8004db6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d104      	bne.n	8004dc8 <HAL_TIM_PWM_Stop_DMA+0x154>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004dc6:	e013      	b.n	8004df0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	2b04      	cmp	r3, #4
 8004dcc:	d104      	bne.n	8004dd8 <HAL_TIM_PWM_Stop_DMA+0x164>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004dd6:	e00b      	b.n	8004df0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	2b08      	cmp	r3, #8
 8004ddc:	d104      	bne.n	8004de8 <HAL_TIM_PWM_Stop_DMA+0x174>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004de6:	e003      	b.n	8004df0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8004df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	40010000 	.word	0x40010000

08004e00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d101      	bne.n	8004e1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	e0ae      	b.n	8004f7c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2b0c      	cmp	r3, #12
 8004e2a:	f200 809f 	bhi.w	8004f6c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8004e34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e34:	08004e69 	.word	0x08004e69
 8004e38:	08004f6d 	.word	0x08004f6d
 8004e3c:	08004f6d 	.word	0x08004f6d
 8004e40:	08004f6d 	.word	0x08004f6d
 8004e44:	08004ea9 	.word	0x08004ea9
 8004e48:	08004f6d 	.word	0x08004f6d
 8004e4c:	08004f6d 	.word	0x08004f6d
 8004e50:	08004f6d 	.word	0x08004f6d
 8004e54:	08004eeb 	.word	0x08004eeb
 8004e58:	08004f6d 	.word	0x08004f6d
 8004e5c:	08004f6d 	.word	0x08004f6d
 8004e60:	08004f6d 	.word	0x08004f6d
 8004e64:	08004f2b 	.word	0x08004f2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68b9      	ldr	r1, [r7, #8]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f000 fac0 	bl	80053f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	699a      	ldr	r2, [r3, #24]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f042 0208 	orr.w	r2, r2, #8
 8004e82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	699a      	ldr	r2, [r3, #24]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f022 0204 	bic.w	r2, r2, #4
 8004e92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6999      	ldr	r1, [r3, #24]
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	691a      	ldr	r2, [r3, #16]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	619a      	str	r2, [r3, #24]
      break;
 8004ea6:	e064      	b.n	8004f72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68b9      	ldr	r1, [r7, #8]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f000 fb06 	bl	80054c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	699a      	ldr	r2, [r3, #24]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ec2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	699a      	ldr	r2, [r3, #24]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ed2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6999      	ldr	r1, [r3, #24]
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	021a      	lsls	r2, r3, #8
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	619a      	str	r2, [r3, #24]
      break;
 8004ee8:	e043      	b.n	8004f72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68b9      	ldr	r1, [r7, #8]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f000 fb51 	bl	8005598 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	69da      	ldr	r2, [r3, #28]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f042 0208 	orr.w	r2, r2, #8
 8004f04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	69da      	ldr	r2, [r3, #28]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f022 0204 	bic.w	r2, r2, #4
 8004f14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	69d9      	ldr	r1, [r3, #28]
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	691a      	ldr	r2, [r3, #16]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	430a      	orrs	r2, r1
 8004f26:	61da      	str	r2, [r3, #28]
      break;
 8004f28:	e023      	b.n	8004f72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68b9      	ldr	r1, [r7, #8]
 8004f30:	4618      	mov	r0, r3
 8004f32:	f000 fb9b 	bl	800566c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	69da      	ldr	r2, [r3, #28]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	69da      	ldr	r2, [r3, #28]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	69d9      	ldr	r1, [r3, #28]
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	021a      	lsls	r2, r3, #8
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	61da      	str	r2, [r3, #28]
      break;
 8004f6a:	e002      	b.n	8004f72 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	75fb      	strb	r3, [r7, #23]
      break;
 8004f70:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3718      	adds	r7, #24
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d101      	bne.n	8004fa0 <HAL_TIM_ConfigClockSource+0x1c>
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	e0b4      	b.n	800510a <HAL_TIM_ConfigClockSource+0x186>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2202      	movs	r2, #2
 8004fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004fbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004fc6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68ba      	ldr	r2, [r7, #8]
 8004fce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fd8:	d03e      	beq.n	8005058 <HAL_TIM_ConfigClockSource+0xd4>
 8004fda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fde:	f200 8087 	bhi.w	80050f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004fe2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fe6:	f000 8086 	beq.w	80050f6 <HAL_TIM_ConfigClockSource+0x172>
 8004fea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fee:	d87f      	bhi.n	80050f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ff0:	2b70      	cmp	r3, #112	@ 0x70
 8004ff2:	d01a      	beq.n	800502a <HAL_TIM_ConfigClockSource+0xa6>
 8004ff4:	2b70      	cmp	r3, #112	@ 0x70
 8004ff6:	d87b      	bhi.n	80050f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ff8:	2b60      	cmp	r3, #96	@ 0x60
 8004ffa:	d050      	beq.n	800509e <HAL_TIM_ConfigClockSource+0x11a>
 8004ffc:	2b60      	cmp	r3, #96	@ 0x60
 8004ffe:	d877      	bhi.n	80050f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005000:	2b50      	cmp	r3, #80	@ 0x50
 8005002:	d03c      	beq.n	800507e <HAL_TIM_ConfigClockSource+0xfa>
 8005004:	2b50      	cmp	r3, #80	@ 0x50
 8005006:	d873      	bhi.n	80050f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005008:	2b40      	cmp	r3, #64	@ 0x40
 800500a:	d058      	beq.n	80050be <HAL_TIM_ConfigClockSource+0x13a>
 800500c:	2b40      	cmp	r3, #64	@ 0x40
 800500e:	d86f      	bhi.n	80050f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005010:	2b30      	cmp	r3, #48	@ 0x30
 8005012:	d064      	beq.n	80050de <HAL_TIM_ConfigClockSource+0x15a>
 8005014:	2b30      	cmp	r3, #48	@ 0x30
 8005016:	d86b      	bhi.n	80050f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005018:	2b20      	cmp	r3, #32
 800501a:	d060      	beq.n	80050de <HAL_TIM_ConfigClockSource+0x15a>
 800501c:	2b20      	cmp	r3, #32
 800501e:	d867      	bhi.n	80050f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005020:	2b00      	cmp	r3, #0
 8005022:	d05c      	beq.n	80050de <HAL_TIM_ConfigClockSource+0x15a>
 8005024:	2b10      	cmp	r3, #16
 8005026:	d05a      	beq.n	80050de <HAL_TIM_ConfigClockSource+0x15a>
 8005028:	e062      	b.n	80050f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800503a:	f000 fbe1 	bl	8005800 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800504c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	609a      	str	r2, [r3, #8]
      break;
 8005056:	e04f      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005068:	f000 fbca 	bl	8005800 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	689a      	ldr	r2, [r3, #8]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800507a:	609a      	str	r2, [r3, #8]
      break;
 800507c:	e03c      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800508a:	461a      	mov	r2, r3
 800508c:	f000 fb3e 	bl	800570c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2150      	movs	r1, #80	@ 0x50
 8005096:	4618      	mov	r0, r3
 8005098:	f000 fb97 	bl	80057ca <TIM_ITRx_SetConfig>
      break;
 800509c:	e02c      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050aa:	461a      	mov	r2, r3
 80050ac:	f000 fb5d 	bl	800576a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2160      	movs	r1, #96	@ 0x60
 80050b6:	4618      	mov	r0, r3
 80050b8:	f000 fb87 	bl	80057ca <TIM_ITRx_SetConfig>
      break;
 80050bc:	e01c      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ca:	461a      	mov	r2, r3
 80050cc:	f000 fb1e 	bl	800570c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2140      	movs	r1, #64	@ 0x40
 80050d6:	4618      	mov	r0, r3
 80050d8:	f000 fb77 	bl	80057ca <TIM_ITRx_SetConfig>
      break;
 80050dc:	e00c      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4619      	mov	r1, r3
 80050e8:	4610      	mov	r0, r2
 80050ea:	f000 fb6e 	bl	80057ca <TIM_ITRx_SetConfig>
      break;
 80050ee:	e003      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	73fb      	strb	r3, [r7, #15]
      break;
 80050f4:	e000      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80050f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005108:	7bfb      	ldrb	r3, [r7, #15]
}
 800510a:	4618      	mov	r0, r3
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005112:	b480      	push	{r7}
 8005114:	b083      	sub	sp, #12
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800511a:	bf00      	nop
 800511c:	370c      	adds	r7, #12
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr

08005126 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005126:	b480      	push	{r7}
 8005128:	b083      	sub	sp, #12
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800512e:	bf00      	nop
 8005130:	370c      	adds	r7, #12
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800513a:	b580      	push	{r7, lr}
 800513c:	b084      	sub	sp, #16
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005146:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	429a      	cmp	r2, r3
 8005150:	d107      	bne.n	8005162 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2201      	movs	r2, #1
 8005156:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005160:	e02a      	b.n	80051b8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	429a      	cmp	r2, r3
 800516a:	d107      	bne.n	800517c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2202      	movs	r2, #2
 8005170:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2201      	movs	r2, #1
 8005176:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800517a:	e01d      	b.n	80051b8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	429a      	cmp	r2, r3
 8005184:	d107      	bne.n	8005196 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2204      	movs	r2, #4
 800518a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005194:	e010      	b.n	80051b8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	429a      	cmp	r2, r3
 800519e:	d107      	bne.n	80051b0 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2208      	movs	r2, #8
 80051a4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051ae:	e003      	b.n	80051b8 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f7ff ffb4 	bl	8005126 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	771a      	strb	r2, [r3, #28]
}
 80051c4:	bf00      	nop
 80051c6:	3710      	adds	r7, #16
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051d8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d10b      	bne.n	80051fc <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2201      	movs	r2, #1
 80051e8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	69db      	ldr	r3, [r3, #28]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d136      	bne.n	8005260 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051fa:	e031      	b.n	8005260 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	429a      	cmp	r2, r3
 8005204:	d10b      	bne.n	800521e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2202      	movs	r2, #2
 800520a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	69db      	ldr	r3, [r3, #28]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d125      	bne.n	8005260 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800521c:	e020      	b.n	8005260 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	429a      	cmp	r2, r3
 8005226:	d10b      	bne.n	8005240 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2204      	movs	r2, #4
 800522c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	69db      	ldr	r3, [r3, #28]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d114      	bne.n	8005260 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800523e:	e00f      	b.n	8005260 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	429a      	cmp	r2, r3
 8005248:	d10a      	bne.n	8005260 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2208      	movs	r2, #8
 800524e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	69db      	ldr	r3, [r3, #28]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d103      	bne.n	8005260 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f7fc fbb7 	bl	80019d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	771a      	strb	r2, [r3, #28]
}
 800526c:	bf00      	nop
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005280:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	429a      	cmp	r2, r3
 800528a:	d103      	bne.n	8005294 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2201      	movs	r2, #1
 8005290:	771a      	strb	r2, [r3, #28]
 8005292:	e019      	b.n	80052c8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	429a      	cmp	r2, r3
 800529c:	d103      	bne.n	80052a6 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2202      	movs	r2, #2
 80052a2:	771a      	strb	r2, [r3, #28]
 80052a4:	e010      	b.n	80052c8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d103      	bne.n	80052b8 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2204      	movs	r2, #4
 80052b4:	771a      	strb	r2, [r3, #28]
 80052b6:	e007      	b.n	80052c8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d102      	bne.n	80052c8 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2208      	movs	r2, #8
 80052c6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f7ff ff22 	bl	8005112 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	771a      	strb	r2, [r3, #28]
}
 80052d4:	bf00      	nop
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a3a      	ldr	r2, [pc, #232]	@ (80053d8 <TIM_Base_SetConfig+0xfc>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d00f      	beq.n	8005314 <TIM_Base_SetConfig+0x38>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052fa:	d00b      	beq.n	8005314 <TIM_Base_SetConfig+0x38>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a37      	ldr	r2, [pc, #220]	@ (80053dc <TIM_Base_SetConfig+0x100>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d007      	beq.n	8005314 <TIM_Base_SetConfig+0x38>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a36      	ldr	r2, [pc, #216]	@ (80053e0 <TIM_Base_SetConfig+0x104>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d003      	beq.n	8005314 <TIM_Base_SetConfig+0x38>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a35      	ldr	r2, [pc, #212]	@ (80053e4 <TIM_Base_SetConfig+0x108>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d108      	bne.n	8005326 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800531a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	4313      	orrs	r3, r2
 8005324:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a2b      	ldr	r2, [pc, #172]	@ (80053d8 <TIM_Base_SetConfig+0xfc>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d01b      	beq.n	8005366 <TIM_Base_SetConfig+0x8a>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005334:	d017      	beq.n	8005366 <TIM_Base_SetConfig+0x8a>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a28      	ldr	r2, [pc, #160]	@ (80053dc <TIM_Base_SetConfig+0x100>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d013      	beq.n	8005366 <TIM_Base_SetConfig+0x8a>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a27      	ldr	r2, [pc, #156]	@ (80053e0 <TIM_Base_SetConfig+0x104>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d00f      	beq.n	8005366 <TIM_Base_SetConfig+0x8a>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a26      	ldr	r2, [pc, #152]	@ (80053e4 <TIM_Base_SetConfig+0x108>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d00b      	beq.n	8005366 <TIM_Base_SetConfig+0x8a>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a25      	ldr	r2, [pc, #148]	@ (80053e8 <TIM_Base_SetConfig+0x10c>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d007      	beq.n	8005366 <TIM_Base_SetConfig+0x8a>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a24      	ldr	r2, [pc, #144]	@ (80053ec <TIM_Base_SetConfig+0x110>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d003      	beq.n	8005366 <TIM_Base_SetConfig+0x8a>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a23      	ldr	r2, [pc, #140]	@ (80053f0 <TIM_Base_SetConfig+0x114>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d108      	bne.n	8005378 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800536c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	4313      	orrs	r3, r2
 8005376:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	4313      	orrs	r3, r2
 8005384:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	689a      	ldr	r2, [r3, #8]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a0e      	ldr	r2, [pc, #56]	@ (80053d8 <TIM_Base_SetConfig+0xfc>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d103      	bne.n	80053ac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	691a      	ldr	r2, [r3, #16]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d105      	bne.n	80053ca <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	f023 0201 	bic.w	r2, r3, #1
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	611a      	str	r2, [r3, #16]
  }
}
 80053ca:	bf00      	nop
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	40010000 	.word	0x40010000
 80053dc:	40000400 	.word	0x40000400
 80053e0:	40000800 	.word	0x40000800
 80053e4:	40000c00 	.word	0x40000c00
 80053e8:	40014000 	.word	0x40014000
 80053ec:	40014400 	.word	0x40014400
 80053f0:	40014800 	.word	0x40014800

080053f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b087      	sub	sp, #28
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	f023 0201 	bic.w	r2, r3, #1
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f023 0303 	bic.w	r3, r3, #3
 800542a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	4313      	orrs	r3, r2
 8005434:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f023 0302 	bic.w	r3, r3, #2
 800543c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	4313      	orrs	r3, r2
 8005446:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a1c      	ldr	r2, [pc, #112]	@ (80054bc <TIM_OC1_SetConfig+0xc8>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d10c      	bne.n	800546a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	f023 0308 	bic.w	r3, r3, #8
 8005456:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	4313      	orrs	r3, r2
 8005460:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f023 0304 	bic.w	r3, r3, #4
 8005468:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a13      	ldr	r2, [pc, #76]	@ (80054bc <TIM_OC1_SetConfig+0xc8>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d111      	bne.n	8005496 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005478:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005480:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	4313      	orrs	r3, r2
 800548a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	4313      	orrs	r3, r2
 8005494:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	685a      	ldr	r2, [r3, #4]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	621a      	str	r2, [r3, #32]
}
 80054b0:	bf00      	nop
 80054b2:	371c      	adds	r7, #28
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr
 80054bc:	40010000 	.word	0x40010000

080054c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b087      	sub	sp, #28
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a1b      	ldr	r3, [r3, #32]
 80054d4:	f023 0210 	bic.w	r2, r3, #16
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	021b      	lsls	r3, r3, #8
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	4313      	orrs	r3, r2
 8005502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	f023 0320 	bic.w	r3, r3, #32
 800550a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	011b      	lsls	r3, r3, #4
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	4313      	orrs	r3, r2
 8005516:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a1e      	ldr	r2, [pc, #120]	@ (8005594 <TIM_OC2_SetConfig+0xd4>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d10d      	bne.n	800553c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005526:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	011b      	lsls	r3, r3, #4
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	4313      	orrs	r3, r2
 8005532:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800553a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a15      	ldr	r2, [pc, #84]	@ (8005594 <TIM_OC2_SetConfig+0xd4>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d113      	bne.n	800556c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800554a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005552:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	695b      	ldr	r3, [r3, #20]
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	4313      	orrs	r3, r2
 800555e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	4313      	orrs	r3, r2
 800556a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	621a      	str	r2, [r3, #32]
}
 8005586:	bf00      	nop
 8005588:	371c      	adds	r7, #28
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	40010000 	.word	0x40010000

08005598 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005598:	b480      	push	{r7}
 800559a:	b087      	sub	sp, #28
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a1b      	ldr	r3, [r3, #32]
 80055ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	69db      	ldr	r3, [r3, #28]
 80055be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f023 0303 	bic.w	r3, r3, #3
 80055ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80055e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	021b      	lsls	r3, r3, #8
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a1d      	ldr	r2, [pc, #116]	@ (8005668 <TIM_OC3_SetConfig+0xd0>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d10d      	bne.n	8005612 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80055fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	021b      	lsls	r3, r3, #8
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	4313      	orrs	r3, r2
 8005608:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005610:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a14      	ldr	r2, [pc, #80]	@ (8005668 <TIM_OC3_SetConfig+0xd0>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d113      	bne.n	8005642 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005620:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005628:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	011b      	lsls	r3, r3, #4
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	4313      	orrs	r3, r2
 8005634:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	011b      	lsls	r3, r3, #4
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	4313      	orrs	r3, r2
 8005640:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	685a      	ldr	r2, [r3, #4]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	621a      	str	r2, [r3, #32]
}
 800565c:	bf00      	nop
 800565e:	371c      	adds	r7, #28
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr
 8005668:	40010000 	.word	0x40010000

0800566c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800566c:	b480      	push	{r7}
 800566e:	b087      	sub	sp, #28
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a1b      	ldr	r3, [r3, #32]
 8005680:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	69db      	ldr	r3, [r3, #28]
 8005692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800569a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	021b      	lsls	r3, r3, #8
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80056b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	031b      	lsls	r3, r3, #12
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a10      	ldr	r2, [pc, #64]	@ (8005708 <TIM_OC4_SetConfig+0x9c>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d109      	bne.n	80056e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80056d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	019b      	lsls	r3, r3, #6
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	4313      	orrs	r3, r2
 80056de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	621a      	str	r2, [r3, #32]
}
 80056fa:	bf00      	nop
 80056fc:	371c      	adds	r7, #28
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	40010000 	.word	0x40010000

0800570c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800570c:	b480      	push	{r7}
 800570e:	b087      	sub	sp, #28
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6a1b      	ldr	r3, [r3, #32]
 800571c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	f023 0201 	bic.w	r2, r3, #1
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005736:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	011b      	lsls	r3, r3, #4
 800573c:	693a      	ldr	r2, [r7, #16]
 800573e:	4313      	orrs	r3, r2
 8005740:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f023 030a 	bic.w	r3, r3, #10
 8005748:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	4313      	orrs	r3, r2
 8005750:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	621a      	str	r2, [r3, #32]
}
 800575e:	bf00      	nop
 8005760:	371c      	adds	r7, #28
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800576a:	b480      	push	{r7}
 800576c:	b087      	sub	sp, #28
 800576e:	af00      	add	r7, sp, #0
 8005770:	60f8      	str	r0, [r7, #12]
 8005772:	60b9      	str	r1, [r7, #8]
 8005774:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6a1b      	ldr	r3, [r3, #32]
 8005780:	f023 0210 	bic.w	r2, r3, #16
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005794:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	031b      	lsls	r3, r3, #12
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	4313      	orrs	r3, r2
 800579e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80057a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	011b      	lsls	r3, r3, #4
 80057ac:	697a      	ldr	r2, [r7, #20]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	621a      	str	r2, [r3, #32]
}
 80057be:	bf00      	nop
 80057c0:	371c      	adds	r7, #28
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b085      	sub	sp, #20
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
 80057d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	f043 0307 	orr.w	r3, r3, #7
 80057ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	609a      	str	r2, [r3, #8]
}
 80057f4:	bf00      	nop
 80057f6:	3714      	adds	r7, #20
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005800:	b480      	push	{r7}
 8005802:	b087      	sub	sp, #28
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
 800580c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800581a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	021a      	lsls	r2, r3, #8
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	431a      	orrs	r2, r3
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	4313      	orrs	r3, r2
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	4313      	orrs	r3, r2
 800582c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	609a      	str	r2, [r3, #8]
}
 8005834:	bf00      	nop
 8005836:	371c      	adds	r7, #28
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005840:	b480      	push	{r7}
 8005842:	b087      	sub	sp, #28
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	f003 031f 	and.w	r3, r3, #31
 8005852:	2201      	movs	r2, #1
 8005854:	fa02 f303 	lsl.w	r3, r2, r3
 8005858:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6a1a      	ldr	r2, [r3, #32]
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	43db      	mvns	r3, r3
 8005862:	401a      	ands	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6a1a      	ldr	r2, [r3, #32]
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	f003 031f 	and.w	r3, r3, #31
 8005872:	6879      	ldr	r1, [r7, #4]
 8005874:	fa01 f303 	lsl.w	r3, r1, r3
 8005878:	431a      	orrs	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	621a      	str	r2, [r3, #32]
}
 800587e:	bf00      	nop
 8005880:	371c      	adds	r7, #28
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
	...

0800588c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800589c:	2b01      	cmp	r3, #1
 800589e:	d101      	bne.n	80058a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058a0:	2302      	movs	r3, #2
 80058a2:	e050      	b.n	8005946 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2202      	movs	r2, #2
 80058b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a1c      	ldr	r2, [pc, #112]	@ (8005954 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d018      	beq.n	800591a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058f0:	d013      	beq.n	800591a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a18      	ldr	r2, [pc, #96]	@ (8005958 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d00e      	beq.n	800591a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a16      	ldr	r2, [pc, #88]	@ (800595c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d009      	beq.n	800591a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a15      	ldr	r2, [pc, #84]	@ (8005960 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d004      	beq.n	800591a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a13      	ldr	r2, [pc, #76]	@ (8005964 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d10c      	bne.n	8005934 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005920:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	68ba      	ldr	r2, [r7, #8]
 8005928:	4313      	orrs	r3, r2
 800592a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3714      	adds	r7, #20
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	40010000 	.word	0x40010000
 8005958:	40000400 	.word	0x40000400
 800595c:	40000800 	.word	0x40000800
 8005960:	40000c00 	.word	0x40000c00
 8005964:	40014000 	.word	0x40014000

08005968 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005972:	2300      	movs	r3, #0
 8005974:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800597c:	2b01      	cmp	r3, #1
 800597e:	d101      	bne.n	8005984 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005980:	2302      	movs	r3, #2
 8005982:	e03d      	b.n	8005a00 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	4313      	orrs	r3, r2
 8005998:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	4313      	orrs	r3, r2
 80059de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	69db      	ldr	r3, [r3, #28]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3714      	adds	r7, #20
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <memset>:
 8005a0c:	4402      	add	r2, r0
 8005a0e:	4603      	mov	r3, r0
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d100      	bne.n	8005a16 <memset+0xa>
 8005a14:	4770      	bx	lr
 8005a16:	f803 1b01 	strb.w	r1, [r3], #1
 8005a1a:	e7f9      	b.n	8005a10 <memset+0x4>

08005a1c <__libc_init_array>:
 8005a1c:	b570      	push	{r4, r5, r6, lr}
 8005a1e:	4d0d      	ldr	r5, [pc, #52]	@ (8005a54 <__libc_init_array+0x38>)
 8005a20:	4c0d      	ldr	r4, [pc, #52]	@ (8005a58 <__libc_init_array+0x3c>)
 8005a22:	1b64      	subs	r4, r4, r5
 8005a24:	10a4      	asrs	r4, r4, #2
 8005a26:	2600      	movs	r6, #0
 8005a28:	42a6      	cmp	r6, r4
 8005a2a:	d109      	bne.n	8005a40 <__libc_init_array+0x24>
 8005a2c:	4d0b      	ldr	r5, [pc, #44]	@ (8005a5c <__libc_init_array+0x40>)
 8005a2e:	4c0c      	ldr	r4, [pc, #48]	@ (8005a60 <__libc_init_array+0x44>)
 8005a30:	f001 f84a 	bl	8006ac8 <_init>
 8005a34:	1b64      	subs	r4, r4, r5
 8005a36:	10a4      	asrs	r4, r4, #2
 8005a38:	2600      	movs	r6, #0
 8005a3a:	42a6      	cmp	r6, r4
 8005a3c:	d105      	bne.n	8005a4a <__libc_init_array+0x2e>
 8005a3e:	bd70      	pop	{r4, r5, r6, pc}
 8005a40:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a44:	4798      	blx	r3
 8005a46:	3601      	adds	r6, #1
 8005a48:	e7ee      	b.n	8005a28 <__libc_init_array+0xc>
 8005a4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a4e:	4798      	blx	r3
 8005a50:	3601      	adds	r6, #1
 8005a52:	e7f2      	b.n	8005a3a <__libc_init_array+0x1e>
 8005a54:	08006cd8 	.word	0x08006cd8
 8005a58:	08006cd8 	.word	0x08006cd8
 8005a5c:	08006cd8 	.word	0x08006cd8
 8005a60:	08006cdc 	.word	0x08006cdc
 8005a64:	00000000 	.word	0x00000000

08005a68 <sin>:
 8005a68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005a6a:	ec53 2b10 	vmov	r2, r3, d0
 8005a6e:	4826      	ldr	r0, [pc, #152]	@ (8005b08 <sin+0xa0>)
 8005a70:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005a74:	4281      	cmp	r1, r0
 8005a76:	d807      	bhi.n	8005a88 <sin+0x20>
 8005a78:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8005b00 <sin+0x98>
 8005a7c:	2000      	movs	r0, #0
 8005a7e:	b005      	add	sp, #20
 8005a80:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a84:	f000 b90c 	b.w	8005ca0 <__kernel_sin>
 8005a88:	4820      	ldr	r0, [pc, #128]	@ (8005b0c <sin+0xa4>)
 8005a8a:	4281      	cmp	r1, r0
 8005a8c:	d908      	bls.n	8005aa0 <sin+0x38>
 8005a8e:	4610      	mov	r0, r2
 8005a90:	4619      	mov	r1, r3
 8005a92:	f7fa fba5 	bl	80001e0 <__aeabi_dsub>
 8005a96:	ec41 0b10 	vmov	d0, r0, r1
 8005a9a:	b005      	add	sp, #20
 8005a9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005aa0:	4668      	mov	r0, sp
 8005aa2:	f000 f9b9 	bl	8005e18 <__ieee754_rem_pio2>
 8005aa6:	f000 0003 	and.w	r0, r0, #3
 8005aaa:	2801      	cmp	r0, #1
 8005aac:	d00c      	beq.n	8005ac8 <sin+0x60>
 8005aae:	2802      	cmp	r0, #2
 8005ab0:	d011      	beq.n	8005ad6 <sin+0x6e>
 8005ab2:	b9e8      	cbnz	r0, 8005af0 <sin+0x88>
 8005ab4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005ab8:	ed9d 0b00 	vldr	d0, [sp]
 8005abc:	2001      	movs	r0, #1
 8005abe:	f000 f8ef 	bl	8005ca0 <__kernel_sin>
 8005ac2:	ec51 0b10 	vmov	r0, r1, d0
 8005ac6:	e7e6      	b.n	8005a96 <sin+0x2e>
 8005ac8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005acc:	ed9d 0b00 	vldr	d0, [sp]
 8005ad0:	f000 f81e 	bl	8005b10 <__kernel_cos>
 8005ad4:	e7f5      	b.n	8005ac2 <sin+0x5a>
 8005ad6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005ada:	ed9d 0b00 	vldr	d0, [sp]
 8005ade:	2001      	movs	r0, #1
 8005ae0:	f000 f8de 	bl	8005ca0 <__kernel_sin>
 8005ae4:	ec53 2b10 	vmov	r2, r3, d0
 8005ae8:	4610      	mov	r0, r2
 8005aea:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8005aee:	e7d2      	b.n	8005a96 <sin+0x2e>
 8005af0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005af4:	ed9d 0b00 	vldr	d0, [sp]
 8005af8:	f000 f80a 	bl	8005b10 <__kernel_cos>
 8005afc:	e7f2      	b.n	8005ae4 <sin+0x7c>
 8005afe:	bf00      	nop
	...
 8005b08:	3fe921fb 	.word	0x3fe921fb
 8005b0c:	7fefffff 	.word	0x7fefffff

08005b10 <__kernel_cos>:
 8005b10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b14:	ec57 6b10 	vmov	r6, r7, d0
 8005b18:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8005b1c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8005b20:	ed8d 1b00 	vstr	d1, [sp]
 8005b24:	d206      	bcs.n	8005b34 <__kernel_cos+0x24>
 8005b26:	4630      	mov	r0, r6
 8005b28:	4639      	mov	r1, r7
 8005b2a:	f7fa ffab 	bl	8000a84 <__aeabi_d2iz>
 8005b2e:	2800      	cmp	r0, #0
 8005b30:	f000 8088 	beq.w	8005c44 <__kernel_cos+0x134>
 8005b34:	4632      	mov	r2, r6
 8005b36:	463b      	mov	r3, r7
 8005b38:	4630      	mov	r0, r6
 8005b3a:	4639      	mov	r1, r7
 8005b3c:	f7fa fd08 	bl	8000550 <__aeabi_dmul>
 8005b40:	4b51      	ldr	r3, [pc, #324]	@ (8005c88 <__kernel_cos+0x178>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	4604      	mov	r4, r0
 8005b46:	460d      	mov	r5, r1
 8005b48:	f7fa fd02 	bl	8000550 <__aeabi_dmul>
 8005b4c:	a340      	add	r3, pc, #256	@ (adr r3, 8005c50 <__kernel_cos+0x140>)
 8005b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b52:	4682      	mov	sl, r0
 8005b54:	468b      	mov	fp, r1
 8005b56:	4620      	mov	r0, r4
 8005b58:	4629      	mov	r1, r5
 8005b5a:	f7fa fcf9 	bl	8000550 <__aeabi_dmul>
 8005b5e:	a33e      	add	r3, pc, #248	@ (adr r3, 8005c58 <__kernel_cos+0x148>)
 8005b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b64:	f7fa fb3e 	bl	80001e4 <__adddf3>
 8005b68:	4622      	mov	r2, r4
 8005b6a:	462b      	mov	r3, r5
 8005b6c:	f7fa fcf0 	bl	8000550 <__aeabi_dmul>
 8005b70:	a33b      	add	r3, pc, #236	@ (adr r3, 8005c60 <__kernel_cos+0x150>)
 8005b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b76:	f7fa fb33 	bl	80001e0 <__aeabi_dsub>
 8005b7a:	4622      	mov	r2, r4
 8005b7c:	462b      	mov	r3, r5
 8005b7e:	f7fa fce7 	bl	8000550 <__aeabi_dmul>
 8005b82:	a339      	add	r3, pc, #228	@ (adr r3, 8005c68 <__kernel_cos+0x158>)
 8005b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b88:	f7fa fb2c 	bl	80001e4 <__adddf3>
 8005b8c:	4622      	mov	r2, r4
 8005b8e:	462b      	mov	r3, r5
 8005b90:	f7fa fcde 	bl	8000550 <__aeabi_dmul>
 8005b94:	a336      	add	r3, pc, #216	@ (adr r3, 8005c70 <__kernel_cos+0x160>)
 8005b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9a:	f7fa fb21 	bl	80001e0 <__aeabi_dsub>
 8005b9e:	4622      	mov	r2, r4
 8005ba0:	462b      	mov	r3, r5
 8005ba2:	f7fa fcd5 	bl	8000550 <__aeabi_dmul>
 8005ba6:	a334      	add	r3, pc, #208	@ (adr r3, 8005c78 <__kernel_cos+0x168>)
 8005ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bac:	f7fa fb1a 	bl	80001e4 <__adddf3>
 8005bb0:	4622      	mov	r2, r4
 8005bb2:	462b      	mov	r3, r5
 8005bb4:	f7fa fccc 	bl	8000550 <__aeabi_dmul>
 8005bb8:	4622      	mov	r2, r4
 8005bba:	462b      	mov	r3, r5
 8005bbc:	f7fa fcc8 	bl	8000550 <__aeabi_dmul>
 8005bc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005bc4:	4604      	mov	r4, r0
 8005bc6:	460d      	mov	r5, r1
 8005bc8:	4630      	mov	r0, r6
 8005bca:	4639      	mov	r1, r7
 8005bcc:	f7fa fcc0 	bl	8000550 <__aeabi_dmul>
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	4629      	mov	r1, r5
 8005bd6:	4620      	mov	r0, r4
 8005bd8:	f7fa fb02 	bl	80001e0 <__aeabi_dsub>
 8005bdc:	4b2b      	ldr	r3, [pc, #172]	@ (8005c8c <__kernel_cos+0x17c>)
 8005bde:	4598      	cmp	r8, r3
 8005be0:	4606      	mov	r6, r0
 8005be2:	460f      	mov	r7, r1
 8005be4:	d810      	bhi.n	8005c08 <__kernel_cos+0xf8>
 8005be6:	4602      	mov	r2, r0
 8005be8:	460b      	mov	r3, r1
 8005bea:	4650      	mov	r0, sl
 8005bec:	4659      	mov	r1, fp
 8005bee:	f7fa faf7 	bl	80001e0 <__aeabi_dsub>
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	4926      	ldr	r1, [pc, #152]	@ (8005c90 <__kernel_cos+0x180>)
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	2000      	movs	r0, #0
 8005bfa:	f7fa faf1 	bl	80001e0 <__aeabi_dsub>
 8005bfe:	ec41 0b10 	vmov	d0, r0, r1
 8005c02:	b003      	add	sp, #12
 8005c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c08:	4b22      	ldr	r3, [pc, #136]	@ (8005c94 <__kernel_cos+0x184>)
 8005c0a:	4921      	ldr	r1, [pc, #132]	@ (8005c90 <__kernel_cos+0x180>)
 8005c0c:	4598      	cmp	r8, r3
 8005c0e:	bf8c      	ite	hi
 8005c10:	4d21      	ldrhi	r5, [pc, #132]	@ (8005c98 <__kernel_cos+0x188>)
 8005c12:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8005c16:	2400      	movs	r4, #0
 8005c18:	4622      	mov	r2, r4
 8005c1a:	462b      	mov	r3, r5
 8005c1c:	2000      	movs	r0, #0
 8005c1e:	f7fa fadf 	bl	80001e0 <__aeabi_dsub>
 8005c22:	4622      	mov	r2, r4
 8005c24:	4680      	mov	r8, r0
 8005c26:	4689      	mov	r9, r1
 8005c28:	462b      	mov	r3, r5
 8005c2a:	4650      	mov	r0, sl
 8005c2c:	4659      	mov	r1, fp
 8005c2e:	f7fa fad7 	bl	80001e0 <__aeabi_dsub>
 8005c32:	4632      	mov	r2, r6
 8005c34:	463b      	mov	r3, r7
 8005c36:	f7fa fad3 	bl	80001e0 <__aeabi_dsub>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	4640      	mov	r0, r8
 8005c40:	4649      	mov	r1, r9
 8005c42:	e7da      	b.n	8005bfa <__kernel_cos+0xea>
 8005c44:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8005c80 <__kernel_cos+0x170>
 8005c48:	e7db      	b.n	8005c02 <__kernel_cos+0xf2>
 8005c4a:	bf00      	nop
 8005c4c:	f3af 8000 	nop.w
 8005c50:	be8838d4 	.word	0xbe8838d4
 8005c54:	bda8fae9 	.word	0xbda8fae9
 8005c58:	bdb4b1c4 	.word	0xbdb4b1c4
 8005c5c:	3e21ee9e 	.word	0x3e21ee9e
 8005c60:	809c52ad 	.word	0x809c52ad
 8005c64:	3e927e4f 	.word	0x3e927e4f
 8005c68:	19cb1590 	.word	0x19cb1590
 8005c6c:	3efa01a0 	.word	0x3efa01a0
 8005c70:	16c15177 	.word	0x16c15177
 8005c74:	3f56c16c 	.word	0x3f56c16c
 8005c78:	5555554c 	.word	0x5555554c
 8005c7c:	3fa55555 	.word	0x3fa55555
 8005c80:	00000000 	.word	0x00000000
 8005c84:	3ff00000 	.word	0x3ff00000
 8005c88:	3fe00000 	.word	0x3fe00000
 8005c8c:	3fd33332 	.word	0x3fd33332
 8005c90:	3ff00000 	.word	0x3ff00000
 8005c94:	3fe90000 	.word	0x3fe90000
 8005c98:	3fd20000 	.word	0x3fd20000
 8005c9c:	00000000 	.word	0x00000000

08005ca0 <__kernel_sin>:
 8005ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca4:	ec55 4b10 	vmov	r4, r5, d0
 8005ca8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8005cac:	b085      	sub	sp, #20
 8005cae:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8005cb2:	ed8d 1b02 	vstr	d1, [sp, #8]
 8005cb6:	4680      	mov	r8, r0
 8005cb8:	d205      	bcs.n	8005cc6 <__kernel_sin+0x26>
 8005cba:	4620      	mov	r0, r4
 8005cbc:	4629      	mov	r1, r5
 8005cbe:	f7fa fee1 	bl	8000a84 <__aeabi_d2iz>
 8005cc2:	2800      	cmp	r0, #0
 8005cc4:	d052      	beq.n	8005d6c <__kernel_sin+0xcc>
 8005cc6:	4622      	mov	r2, r4
 8005cc8:	462b      	mov	r3, r5
 8005cca:	4620      	mov	r0, r4
 8005ccc:	4629      	mov	r1, r5
 8005cce:	f7fa fc3f 	bl	8000550 <__aeabi_dmul>
 8005cd2:	4682      	mov	sl, r0
 8005cd4:	468b      	mov	fp, r1
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	460b      	mov	r3, r1
 8005cda:	4620      	mov	r0, r4
 8005cdc:	4629      	mov	r1, r5
 8005cde:	f7fa fc37 	bl	8000550 <__aeabi_dmul>
 8005ce2:	a342      	add	r3, pc, #264	@ (adr r3, 8005dec <__kernel_sin+0x14c>)
 8005ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce8:	e9cd 0100 	strd	r0, r1, [sp]
 8005cec:	4650      	mov	r0, sl
 8005cee:	4659      	mov	r1, fp
 8005cf0:	f7fa fc2e 	bl	8000550 <__aeabi_dmul>
 8005cf4:	a33f      	add	r3, pc, #252	@ (adr r3, 8005df4 <__kernel_sin+0x154>)
 8005cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfa:	f7fa fa71 	bl	80001e0 <__aeabi_dsub>
 8005cfe:	4652      	mov	r2, sl
 8005d00:	465b      	mov	r3, fp
 8005d02:	f7fa fc25 	bl	8000550 <__aeabi_dmul>
 8005d06:	a33d      	add	r3, pc, #244	@ (adr r3, 8005dfc <__kernel_sin+0x15c>)
 8005d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0c:	f7fa fa6a 	bl	80001e4 <__adddf3>
 8005d10:	4652      	mov	r2, sl
 8005d12:	465b      	mov	r3, fp
 8005d14:	f7fa fc1c 	bl	8000550 <__aeabi_dmul>
 8005d18:	a33a      	add	r3, pc, #232	@ (adr r3, 8005e04 <__kernel_sin+0x164>)
 8005d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1e:	f7fa fa5f 	bl	80001e0 <__aeabi_dsub>
 8005d22:	4652      	mov	r2, sl
 8005d24:	465b      	mov	r3, fp
 8005d26:	f7fa fc13 	bl	8000550 <__aeabi_dmul>
 8005d2a:	a338      	add	r3, pc, #224	@ (adr r3, 8005e0c <__kernel_sin+0x16c>)
 8005d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d30:	f7fa fa58 	bl	80001e4 <__adddf3>
 8005d34:	4606      	mov	r6, r0
 8005d36:	460f      	mov	r7, r1
 8005d38:	f1b8 0f00 	cmp.w	r8, #0
 8005d3c:	d11b      	bne.n	8005d76 <__kernel_sin+0xd6>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	460b      	mov	r3, r1
 8005d42:	4650      	mov	r0, sl
 8005d44:	4659      	mov	r1, fp
 8005d46:	f7fa fc03 	bl	8000550 <__aeabi_dmul>
 8005d4a:	a325      	add	r3, pc, #148	@ (adr r3, 8005de0 <__kernel_sin+0x140>)
 8005d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d50:	f7fa fa46 	bl	80001e0 <__aeabi_dsub>
 8005d54:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d58:	f7fa fbfa 	bl	8000550 <__aeabi_dmul>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	460b      	mov	r3, r1
 8005d60:	4620      	mov	r0, r4
 8005d62:	4629      	mov	r1, r5
 8005d64:	f7fa fa3e 	bl	80001e4 <__adddf3>
 8005d68:	4604      	mov	r4, r0
 8005d6a:	460d      	mov	r5, r1
 8005d6c:	ec45 4b10 	vmov	d0, r4, r5
 8005d70:	b005      	add	sp, #20
 8005d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8005de8 <__kernel_sin+0x148>)
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f7fa fbe7 	bl	8000550 <__aeabi_dmul>
 8005d82:	4632      	mov	r2, r6
 8005d84:	4680      	mov	r8, r0
 8005d86:	4689      	mov	r9, r1
 8005d88:	463b      	mov	r3, r7
 8005d8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d8e:	f7fa fbdf 	bl	8000550 <__aeabi_dmul>
 8005d92:	4602      	mov	r2, r0
 8005d94:	460b      	mov	r3, r1
 8005d96:	4640      	mov	r0, r8
 8005d98:	4649      	mov	r1, r9
 8005d9a:	f7fa fa21 	bl	80001e0 <__aeabi_dsub>
 8005d9e:	4652      	mov	r2, sl
 8005da0:	465b      	mov	r3, fp
 8005da2:	f7fa fbd5 	bl	8000550 <__aeabi_dmul>
 8005da6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005daa:	f7fa fa19 	bl	80001e0 <__aeabi_dsub>
 8005dae:	a30c      	add	r3, pc, #48	@ (adr r3, 8005de0 <__kernel_sin+0x140>)
 8005db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db4:	4606      	mov	r6, r0
 8005db6:	460f      	mov	r7, r1
 8005db8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005dbc:	f7fa fbc8 	bl	8000550 <__aeabi_dmul>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	4630      	mov	r0, r6
 8005dc6:	4639      	mov	r1, r7
 8005dc8:	f7fa fa0c 	bl	80001e4 <__adddf3>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	460b      	mov	r3, r1
 8005dd0:	4620      	mov	r0, r4
 8005dd2:	4629      	mov	r1, r5
 8005dd4:	f7fa fa04 	bl	80001e0 <__aeabi_dsub>
 8005dd8:	e7c6      	b.n	8005d68 <__kernel_sin+0xc8>
 8005dda:	bf00      	nop
 8005ddc:	f3af 8000 	nop.w
 8005de0:	55555549 	.word	0x55555549
 8005de4:	3fc55555 	.word	0x3fc55555
 8005de8:	3fe00000 	.word	0x3fe00000
 8005dec:	5acfd57c 	.word	0x5acfd57c
 8005df0:	3de5d93a 	.word	0x3de5d93a
 8005df4:	8a2b9ceb 	.word	0x8a2b9ceb
 8005df8:	3e5ae5e6 	.word	0x3e5ae5e6
 8005dfc:	57b1fe7d 	.word	0x57b1fe7d
 8005e00:	3ec71de3 	.word	0x3ec71de3
 8005e04:	19c161d5 	.word	0x19c161d5
 8005e08:	3f2a01a0 	.word	0x3f2a01a0
 8005e0c:	1110f8a6 	.word	0x1110f8a6
 8005e10:	3f811111 	.word	0x3f811111
 8005e14:	00000000 	.word	0x00000000

08005e18 <__ieee754_rem_pio2>:
 8005e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e1c:	ec57 6b10 	vmov	r6, r7, d0
 8005e20:	4bc5      	ldr	r3, [pc, #788]	@ (8006138 <__ieee754_rem_pio2+0x320>)
 8005e22:	b08d      	sub	sp, #52	@ 0x34
 8005e24:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8005e28:	4598      	cmp	r8, r3
 8005e2a:	4604      	mov	r4, r0
 8005e2c:	9704      	str	r7, [sp, #16]
 8005e2e:	d807      	bhi.n	8005e40 <__ieee754_rem_pio2+0x28>
 8005e30:	2200      	movs	r2, #0
 8005e32:	2300      	movs	r3, #0
 8005e34:	ed80 0b00 	vstr	d0, [r0]
 8005e38:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005e3c:	2500      	movs	r5, #0
 8005e3e:	e028      	b.n	8005e92 <__ieee754_rem_pio2+0x7a>
 8005e40:	4bbe      	ldr	r3, [pc, #760]	@ (800613c <__ieee754_rem_pio2+0x324>)
 8005e42:	4598      	cmp	r8, r3
 8005e44:	d878      	bhi.n	8005f38 <__ieee754_rem_pio2+0x120>
 8005e46:	9b04      	ldr	r3, [sp, #16]
 8005e48:	4dbd      	ldr	r5, [pc, #756]	@ (8006140 <__ieee754_rem_pio2+0x328>)
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	4630      	mov	r0, r6
 8005e4e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8006100 <__ieee754_rem_pio2+0x2e8>)
 8005e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e54:	4639      	mov	r1, r7
 8005e56:	dd38      	ble.n	8005eca <__ieee754_rem_pio2+0xb2>
 8005e58:	f7fa f9c2 	bl	80001e0 <__aeabi_dsub>
 8005e5c:	45a8      	cmp	r8, r5
 8005e5e:	4606      	mov	r6, r0
 8005e60:	460f      	mov	r7, r1
 8005e62:	d01a      	beq.n	8005e9a <__ieee754_rem_pio2+0x82>
 8005e64:	a3a8      	add	r3, pc, #672	@ (adr r3, 8006108 <__ieee754_rem_pio2+0x2f0>)
 8005e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e6a:	f7fa f9b9 	bl	80001e0 <__aeabi_dsub>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	460b      	mov	r3, r1
 8005e72:	4680      	mov	r8, r0
 8005e74:	4689      	mov	r9, r1
 8005e76:	4630      	mov	r0, r6
 8005e78:	4639      	mov	r1, r7
 8005e7a:	f7fa f9b1 	bl	80001e0 <__aeabi_dsub>
 8005e7e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8006108 <__ieee754_rem_pio2+0x2f0>)
 8005e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e84:	f7fa f9ac 	bl	80001e0 <__aeabi_dsub>
 8005e88:	e9c4 8900 	strd	r8, r9, [r4]
 8005e8c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005e90:	2501      	movs	r5, #1
 8005e92:	4628      	mov	r0, r5
 8005e94:	b00d      	add	sp, #52	@ 0x34
 8005e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e9a:	a39d      	add	r3, pc, #628	@ (adr r3, 8006110 <__ieee754_rem_pio2+0x2f8>)
 8005e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea0:	f7fa f99e 	bl	80001e0 <__aeabi_dsub>
 8005ea4:	a39c      	add	r3, pc, #624	@ (adr r3, 8006118 <__ieee754_rem_pio2+0x300>)
 8005ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eaa:	4606      	mov	r6, r0
 8005eac:	460f      	mov	r7, r1
 8005eae:	f7fa f997 	bl	80001e0 <__aeabi_dsub>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	4680      	mov	r8, r0
 8005eb8:	4689      	mov	r9, r1
 8005eba:	4630      	mov	r0, r6
 8005ebc:	4639      	mov	r1, r7
 8005ebe:	f7fa f98f 	bl	80001e0 <__aeabi_dsub>
 8005ec2:	a395      	add	r3, pc, #596	@ (adr r3, 8006118 <__ieee754_rem_pio2+0x300>)
 8005ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec8:	e7dc      	b.n	8005e84 <__ieee754_rem_pio2+0x6c>
 8005eca:	f7fa f98b 	bl	80001e4 <__adddf3>
 8005ece:	45a8      	cmp	r8, r5
 8005ed0:	4606      	mov	r6, r0
 8005ed2:	460f      	mov	r7, r1
 8005ed4:	d018      	beq.n	8005f08 <__ieee754_rem_pio2+0xf0>
 8005ed6:	a38c      	add	r3, pc, #560	@ (adr r3, 8006108 <__ieee754_rem_pio2+0x2f0>)
 8005ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005edc:	f7fa f982 	bl	80001e4 <__adddf3>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	4680      	mov	r8, r0
 8005ee6:	4689      	mov	r9, r1
 8005ee8:	4630      	mov	r0, r6
 8005eea:	4639      	mov	r1, r7
 8005eec:	f7fa f978 	bl	80001e0 <__aeabi_dsub>
 8005ef0:	a385      	add	r3, pc, #532	@ (adr r3, 8006108 <__ieee754_rem_pio2+0x2f0>)
 8005ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef6:	f7fa f975 	bl	80001e4 <__adddf3>
 8005efa:	f04f 35ff 	mov.w	r5, #4294967295
 8005efe:	e9c4 8900 	strd	r8, r9, [r4]
 8005f02:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005f06:	e7c4      	b.n	8005e92 <__ieee754_rem_pio2+0x7a>
 8005f08:	a381      	add	r3, pc, #516	@ (adr r3, 8006110 <__ieee754_rem_pio2+0x2f8>)
 8005f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0e:	f7fa f969 	bl	80001e4 <__adddf3>
 8005f12:	a381      	add	r3, pc, #516	@ (adr r3, 8006118 <__ieee754_rem_pio2+0x300>)
 8005f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f18:	4606      	mov	r6, r0
 8005f1a:	460f      	mov	r7, r1
 8005f1c:	f7fa f962 	bl	80001e4 <__adddf3>
 8005f20:	4602      	mov	r2, r0
 8005f22:	460b      	mov	r3, r1
 8005f24:	4680      	mov	r8, r0
 8005f26:	4689      	mov	r9, r1
 8005f28:	4630      	mov	r0, r6
 8005f2a:	4639      	mov	r1, r7
 8005f2c:	f7fa f958 	bl	80001e0 <__aeabi_dsub>
 8005f30:	a379      	add	r3, pc, #484	@ (adr r3, 8006118 <__ieee754_rem_pio2+0x300>)
 8005f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f36:	e7de      	b.n	8005ef6 <__ieee754_rem_pio2+0xde>
 8005f38:	4b82      	ldr	r3, [pc, #520]	@ (8006144 <__ieee754_rem_pio2+0x32c>)
 8005f3a:	4598      	cmp	r8, r3
 8005f3c:	f200 80d1 	bhi.w	80060e2 <__ieee754_rem_pio2+0x2ca>
 8005f40:	f000 f966 	bl	8006210 <fabs>
 8005f44:	ec57 6b10 	vmov	r6, r7, d0
 8005f48:	a375      	add	r3, pc, #468	@ (adr r3, 8006120 <__ieee754_rem_pio2+0x308>)
 8005f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4e:	4630      	mov	r0, r6
 8005f50:	4639      	mov	r1, r7
 8005f52:	f7fa fafd 	bl	8000550 <__aeabi_dmul>
 8005f56:	4b7c      	ldr	r3, [pc, #496]	@ (8006148 <__ieee754_rem_pio2+0x330>)
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f7fa f943 	bl	80001e4 <__adddf3>
 8005f5e:	f7fa fd91 	bl	8000a84 <__aeabi_d2iz>
 8005f62:	4605      	mov	r5, r0
 8005f64:	f7fa fa8a 	bl	800047c <__aeabi_i2d>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	460b      	mov	r3, r1
 8005f6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005f70:	a363      	add	r3, pc, #396	@ (adr r3, 8006100 <__ieee754_rem_pio2+0x2e8>)
 8005f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f76:	f7fa faeb 	bl	8000550 <__aeabi_dmul>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	4630      	mov	r0, r6
 8005f80:	4639      	mov	r1, r7
 8005f82:	f7fa f92d 	bl	80001e0 <__aeabi_dsub>
 8005f86:	a360      	add	r3, pc, #384	@ (adr r3, 8006108 <__ieee754_rem_pio2+0x2f0>)
 8005f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8c:	4682      	mov	sl, r0
 8005f8e:	468b      	mov	fp, r1
 8005f90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f94:	f7fa fadc 	bl	8000550 <__aeabi_dmul>
 8005f98:	2d1f      	cmp	r5, #31
 8005f9a:	4606      	mov	r6, r0
 8005f9c:	460f      	mov	r7, r1
 8005f9e:	dc0c      	bgt.n	8005fba <__ieee754_rem_pio2+0x1a2>
 8005fa0:	4b6a      	ldr	r3, [pc, #424]	@ (800614c <__ieee754_rem_pio2+0x334>)
 8005fa2:	1e6a      	subs	r2, r5, #1
 8005fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fa8:	4543      	cmp	r3, r8
 8005faa:	d006      	beq.n	8005fba <__ieee754_rem_pio2+0x1a2>
 8005fac:	4632      	mov	r2, r6
 8005fae:	463b      	mov	r3, r7
 8005fb0:	4650      	mov	r0, sl
 8005fb2:	4659      	mov	r1, fp
 8005fb4:	f7fa f914 	bl	80001e0 <__aeabi_dsub>
 8005fb8:	e00e      	b.n	8005fd8 <__ieee754_rem_pio2+0x1c0>
 8005fba:	463b      	mov	r3, r7
 8005fbc:	4632      	mov	r2, r6
 8005fbe:	4650      	mov	r0, sl
 8005fc0:	4659      	mov	r1, fp
 8005fc2:	f7fa f90d 	bl	80001e0 <__aeabi_dsub>
 8005fc6:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005fca:	9305      	str	r3, [sp, #20]
 8005fcc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005fd0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8005fd4:	2b10      	cmp	r3, #16
 8005fd6:	dc02      	bgt.n	8005fde <__ieee754_rem_pio2+0x1c6>
 8005fd8:	e9c4 0100 	strd	r0, r1, [r4]
 8005fdc:	e039      	b.n	8006052 <__ieee754_rem_pio2+0x23a>
 8005fde:	a34c      	add	r3, pc, #304	@ (adr r3, 8006110 <__ieee754_rem_pio2+0x2f8>)
 8005fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fe8:	f7fa fab2 	bl	8000550 <__aeabi_dmul>
 8005fec:	4606      	mov	r6, r0
 8005fee:	460f      	mov	r7, r1
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	4650      	mov	r0, sl
 8005ff6:	4659      	mov	r1, fp
 8005ff8:	f7fa f8f2 	bl	80001e0 <__aeabi_dsub>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	460b      	mov	r3, r1
 8006000:	4680      	mov	r8, r0
 8006002:	4689      	mov	r9, r1
 8006004:	4650      	mov	r0, sl
 8006006:	4659      	mov	r1, fp
 8006008:	f7fa f8ea 	bl	80001e0 <__aeabi_dsub>
 800600c:	4632      	mov	r2, r6
 800600e:	463b      	mov	r3, r7
 8006010:	f7fa f8e6 	bl	80001e0 <__aeabi_dsub>
 8006014:	a340      	add	r3, pc, #256	@ (adr r3, 8006118 <__ieee754_rem_pio2+0x300>)
 8006016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601a:	4606      	mov	r6, r0
 800601c:	460f      	mov	r7, r1
 800601e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006022:	f7fa fa95 	bl	8000550 <__aeabi_dmul>
 8006026:	4632      	mov	r2, r6
 8006028:	463b      	mov	r3, r7
 800602a:	f7fa f8d9 	bl	80001e0 <__aeabi_dsub>
 800602e:	4602      	mov	r2, r0
 8006030:	460b      	mov	r3, r1
 8006032:	4606      	mov	r6, r0
 8006034:	460f      	mov	r7, r1
 8006036:	4640      	mov	r0, r8
 8006038:	4649      	mov	r1, r9
 800603a:	f7fa f8d1 	bl	80001e0 <__aeabi_dsub>
 800603e:	9a05      	ldr	r2, [sp, #20]
 8006040:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	2b31      	cmp	r3, #49	@ 0x31
 8006048:	dc20      	bgt.n	800608c <__ieee754_rem_pio2+0x274>
 800604a:	e9c4 0100 	strd	r0, r1, [r4]
 800604e:	46c2      	mov	sl, r8
 8006050:	46cb      	mov	fp, r9
 8006052:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006056:	4650      	mov	r0, sl
 8006058:	4642      	mov	r2, r8
 800605a:	464b      	mov	r3, r9
 800605c:	4659      	mov	r1, fp
 800605e:	f7fa f8bf 	bl	80001e0 <__aeabi_dsub>
 8006062:	463b      	mov	r3, r7
 8006064:	4632      	mov	r2, r6
 8006066:	f7fa f8bb 	bl	80001e0 <__aeabi_dsub>
 800606a:	9b04      	ldr	r3, [sp, #16]
 800606c:	2b00      	cmp	r3, #0
 800606e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006072:	f6bf af0e 	bge.w	8005e92 <__ieee754_rem_pio2+0x7a>
 8006076:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800607a:	6063      	str	r3, [r4, #4]
 800607c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006080:	f8c4 8000 	str.w	r8, [r4]
 8006084:	60a0      	str	r0, [r4, #8]
 8006086:	60e3      	str	r3, [r4, #12]
 8006088:	426d      	negs	r5, r5
 800608a:	e702      	b.n	8005e92 <__ieee754_rem_pio2+0x7a>
 800608c:	a326      	add	r3, pc, #152	@ (adr r3, 8006128 <__ieee754_rem_pio2+0x310>)
 800608e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006092:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006096:	f7fa fa5b 	bl	8000550 <__aeabi_dmul>
 800609a:	4606      	mov	r6, r0
 800609c:	460f      	mov	r7, r1
 800609e:	4602      	mov	r2, r0
 80060a0:	460b      	mov	r3, r1
 80060a2:	4640      	mov	r0, r8
 80060a4:	4649      	mov	r1, r9
 80060a6:	f7fa f89b 	bl	80001e0 <__aeabi_dsub>
 80060aa:	4602      	mov	r2, r0
 80060ac:	460b      	mov	r3, r1
 80060ae:	4682      	mov	sl, r0
 80060b0:	468b      	mov	fp, r1
 80060b2:	4640      	mov	r0, r8
 80060b4:	4649      	mov	r1, r9
 80060b6:	f7fa f893 	bl	80001e0 <__aeabi_dsub>
 80060ba:	4632      	mov	r2, r6
 80060bc:	463b      	mov	r3, r7
 80060be:	f7fa f88f 	bl	80001e0 <__aeabi_dsub>
 80060c2:	a31b      	add	r3, pc, #108	@ (adr r3, 8006130 <__ieee754_rem_pio2+0x318>)
 80060c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c8:	4606      	mov	r6, r0
 80060ca:	460f      	mov	r7, r1
 80060cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060d0:	f7fa fa3e 	bl	8000550 <__aeabi_dmul>
 80060d4:	4632      	mov	r2, r6
 80060d6:	463b      	mov	r3, r7
 80060d8:	f7fa f882 	bl	80001e0 <__aeabi_dsub>
 80060dc:	4606      	mov	r6, r0
 80060de:	460f      	mov	r7, r1
 80060e0:	e764      	b.n	8005fac <__ieee754_rem_pio2+0x194>
 80060e2:	4b1b      	ldr	r3, [pc, #108]	@ (8006150 <__ieee754_rem_pio2+0x338>)
 80060e4:	4598      	cmp	r8, r3
 80060e6:	d935      	bls.n	8006154 <__ieee754_rem_pio2+0x33c>
 80060e8:	4632      	mov	r2, r6
 80060ea:	463b      	mov	r3, r7
 80060ec:	4630      	mov	r0, r6
 80060ee:	4639      	mov	r1, r7
 80060f0:	f7fa f876 	bl	80001e0 <__aeabi_dsub>
 80060f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80060f8:	e9c4 0100 	strd	r0, r1, [r4]
 80060fc:	e69e      	b.n	8005e3c <__ieee754_rem_pio2+0x24>
 80060fe:	bf00      	nop
 8006100:	54400000 	.word	0x54400000
 8006104:	3ff921fb 	.word	0x3ff921fb
 8006108:	1a626331 	.word	0x1a626331
 800610c:	3dd0b461 	.word	0x3dd0b461
 8006110:	1a600000 	.word	0x1a600000
 8006114:	3dd0b461 	.word	0x3dd0b461
 8006118:	2e037073 	.word	0x2e037073
 800611c:	3ba3198a 	.word	0x3ba3198a
 8006120:	6dc9c883 	.word	0x6dc9c883
 8006124:	3fe45f30 	.word	0x3fe45f30
 8006128:	2e000000 	.word	0x2e000000
 800612c:	3ba3198a 	.word	0x3ba3198a
 8006130:	252049c1 	.word	0x252049c1
 8006134:	397b839a 	.word	0x397b839a
 8006138:	3fe921fb 	.word	0x3fe921fb
 800613c:	4002d97b 	.word	0x4002d97b
 8006140:	3ff921fb 	.word	0x3ff921fb
 8006144:	413921fb 	.word	0x413921fb
 8006148:	3fe00000 	.word	0x3fe00000
 800614c:	08006af8 	.word	0x08006af8
 8006150:	7fefffff 	.word	0x7fefffff
 8006154:	ea4f 5528 	mov.w	r5, r8, asr #20
 8006158:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800615c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8006160:	4630      	mov	r0, r6
 8006162:	460f      	mov	r7, r1
 8006164:	f7fa fc8e 	bl	8000a84 <__aeabi_d2iz>
 8006168:	f7fa f988 	bl	800047c <__aeabi_i2d>
 800616c:	4602      	mov	r2, r0
 800616e:	460b      	mov	r3, r1
 8006170:	4630      	mov	r0, r6
 8006172:	4639      	mov	r1, r7
 8006174:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006178:	f7fa f832 	bl	80001e0 <__aeabi_dsub>
 800617c:	4b22      	ldr	r3, [pc, #136]	@ (8006208 <__ieee754_rem_pio2+0x3f0>)
 800617e:	2200      	movs	r2, #0
 8006180:	f7fa f9e6 	bl	8000550 <__aeabi_dmul>
 8006184:	460f      	mov	r7, r1
 8006186:	4606      	mov	r6, r0
 8006188:	f7fa fc7c 	bl	8000a84 <__aeabi_d2iz>
 800618c:	f7fa f976 	bl	800047c <__aeabi_i2d>
 8006190:	4602      	mov	r2, r0
 8006192:	460b      	mov	r3, r1
 8006194:	4630      	mov	r0, r6
 8006196:	4639      	mov	r1, r7
 8006198:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800619c:	f7fa f820 	bl	80001e0 <__aeabi_dsub>
 80061a0:	4b19      	ldr	r3, [pc, #100]	@ (8006208 <__ieee754_rem_pio2+0x3f0>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	f7fa f9d4 	bl	8000550 <__aeabi_dmul>
 80061a8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80061ac:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80061b0:	f04f 0803 	mov.w	r8, #3
 80061b4:	2600      	movs	r6, #0
 80061b6:	2700      	movs	r7, #0
 80061b8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80061bc:	4632      	mov	r2, r6
 80061be:	463b      	mov	r3, r7
 80061c0:	46c2      	mov	sl, r8
 80061c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80061c6:	f7fa fc2b 	bl	8000a20 <__aeabi_dcmpeq>
 80061ca:	2800      	cmp	r0, #0
 80061cc:	d1f4      	bne.n	80061b8 <__ieee754_rem_pio2+0x3a0>
 80061ce:	4b0f      	ldr	r3, [pc, #60]	@ (800620c <__ieee754_rem_pio2+0x3f4>)
 80061d0:	9301      	str	r3, [sp, #4]
 80061d2:	2302      	movs	r3, #2
 80061d4:	9300      	str	r3, [sp, #0]
 80061d6:	462a      	mov	r2, r5
 80061d8:	4653      	mov	r3, sl
 80061da:	4621      	mov	r1, r4
 80061dc:	a806      	add	r0, sp, #24
 80061de:	f000 f81f 	bl	8006220 <__kernel_rem_pio2>
 80061e2:	9b04      	ldr	r3, [sp, #16]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	4605      	mov	r5, r0
 80061e8:	f6bf ae53 	bge.w	8005e92 <__ieee754_rem_pio2+0x7a>
 80061ec:	e9d4 2100 	ldrd	r2, r1, [r4]
 80061f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80061f4:	e9c4 2300 	strd	r2, r3, [r4]
 80061f8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80061fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006200:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8006204:	e740      	b.n	8006088 <__ieee754_rem_pio2+0x270>
 8006206:	bf00      	nop
 8006208:	41700000 	.word	0x41700000
 800620c:	08006b78 	.word	0x08006b78

08006210 <fabs>:
 8006210:	ec51 0b10 	vmov	r0, r1, d0
 8006214:	4602      	mov	r2, r0
 8006216:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800621a:	ec43 2b10 	vmov	d0, r2, r3
 800621e:	4770      	bx	lr

08006220 <__kernel_rem_pio2>:
 8006220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006224:	ed2d 8b02 	vpush	{d8}
 8006228:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800622c:	f112 0f14 	cmn.w	r2, #20
 8006230:	9306      	str	r3, [sp, #24]
 8006232:	9104      	str	r1, [sp, #16]
 8006234:	4bbe      	ldr	r3, [pc, #760]	@ (8006530 <__kernel_rem_pio2+0x310>)
 8006236:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8006238:	9008      	str	r0, [sp, #32]
 800623a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800623e:	9300      	str	r3, [sp, #0]
 8006240:	9b06      	ldr	r3, [sp, #24]
 8006242:	f103 33ff 	add.w	r3, r3, #4294967295
 8006246:	bfa8      	it	ge
 8006248:	1ed4      	subge	r4, r2, #3
 800624a:	9305      	str	r3, [sp, #20]
 800624c:	bfb2      	itee	lt
 800624e:	2400      	movlt	r4, #0
 8006250:	2318      	movge	r3, #24
 8006252:	fb94 f4f3 	sdivge	r4, r4, r3
 8006256:	f06f 0317 	mvn.w	r3, #23
 800625a:	fb04 3303 	mla	r3, r4, r3, r3
 800625e:	eb03 0b02 	add.w	fp, r3, r2
 8006262:	9b00      	ldr	r3, [sp, #0]
 8006264:	9a05      	ldr	r2, [sp, #20]
 8006266:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8006520 <__kernel_rem_pio2+0x300>
 800626a:	eb03 0802 	add.w	r8, r3, r2
 800626e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8006270:	1aa7      	subs	r7, r4, r2
 8006272:	ae20      	add	r6, sp, #128	@ 0x80
 8006274:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006278:	2500      	movs	r5, #0
 800627a:	4545      	cmp	r5, r8
 800627c:	dd13      	ble.n	80062a6 <__kernel_rem_pio2+0x86>
 800627e:	9b06      	ldr	r3, [sp, #24]
 8006280:	aa20      	add	r2, sp, #128	@ 0x80
 8006282:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006286:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800628a:	f04f 0800 	mov.w	r8, #0
 800628e:	9b00      	ldr	r3, [sp, #0]
 8006290:	4598      	cmp	r8, r3
 8006292:	dc31      	bgt.n	80062f8 <__kernel_rem_pio2+0xd8>
 8006294:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8006520 <__kernel_rem_pio2+0x300>
 8006298:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800629c:	ed8d 7b02 	vstr	d7, [sp, #8]
 80062a0:	462f      	mov	r7, r5
 80062a2:	2600      	movs	r6, #0
 80062a4:	e01b      	b.n	80062de <__kernel_rem_pio2+0xbe>
 80062a6:	42ef      	cmn	r7, r5
 80062a8:	d407      	bmi.n	80062ba <__kernel_rem_pio2+0x9a>
 80062aa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80062ae:	f7fa f8e5 	bl	800047c <__aeabi_i2d>
 80062b2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80062b6:	3501      	adds	r5, #1
 80062b8:	e7df      	b.n	800627a <__kernel_rem_pio2+0x5a>
 80062ba:	ec51 0b18 	vmov	r0, r1, d8
 80062be:	e7f8      	b.n	80062b2 <__kernel_rem_pio2+0x92>
 80062c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062c4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80062c8:	f7fa f942 	bl	8000550 <__aeabi_dmul>
 80062cc:	4602      	mov	r2, r0
 80062ce:	460b      	mov	r3, r1
 80062d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062d4:	f7f9 ff86 	bl	80001e4 <__adddf3>
 80062d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062dc:	3601      	adds	r6, #1
 80062de:	9b05      	ldr	r3, [sp, #20]
 80062e0:	429e      	cmp	r6, r3
 80062e2:	f1a7 0708 	sub.w	r7, r7, #8
 80062e6:	ddeb      	ble.n	80062c0 <__kernel_rem_pio2+0xa0>
 80062e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80062ec:	f108 0801 	add.w	r8, r8, #1
 80062f0:	ecaa 7b02 	vstmia	sl!, {d7}
 80062f4:	3508      	adds	r5, #8
 80062f6:	e7ca      	b.n	800628e <__kernel_rem_pio2+0x6e>
 80062f8:	9b00      	ldr	r3, [sp, #0]
 80062fa:	f8dd 8000 	ldr.w	r8, [sp]
 80062fe:	aa0c      	add	r2, sp, #48	@ 0x30
 8006300:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006304:	930a      	str	r3, [sp, #40]	@ 0x28
 8006306:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8006308:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800630c:	9309      	str	r3, [sp, #36]	@ 0x24
 800630e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8006312:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006314:	ab98      	add	r3, sp, #608	@ 0x260
 8006316:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800631a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800631e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006322:	ac0c      	add	r4, sp, #48	@ 0x30
 8006324:	ab70      	add	r3, sp, #448	@ 0x1c0
 8006326:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800632a:	46a1      	mov	r9, r4
 800632c:	46c2      	mov	sl, r8
 800632e:	f1ba 0f00 	cmp.w	sl, #0
 8006332:	f1a5 0508 	sub.w	r5, r5, #8
 8006336:	dc77      	bgt.n	8006428 <__kernel_rem_pio2+0x208>
 8006338:	4658      	mov	r0, fp
 800633a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800633e:	f000 fac7 	bl	80068d0 <scalbn>
 8006342:	ec57 6b10 	vmov	r6, r7, d0
 8006346:	2200      	movs	r2, #0
 8006348:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800634c:	4630      	mov	r0, r6
 800634e:	4639      	mov	r1, r7
 8006350:	f7fa f8fe 	bl	8000550 <__aeabi_dmul>
 8006354:	ec41 0b10 	vmov	d0, r0, r1
 8006358:	f000 fb3a 	bl	80069d0 <floor>
 800635c:	4b75      	ldr	r3, [pc, #468]	@ (8006534 <__kernel_rem_pio2+0x314>)
 800635e:	ec51 0b10 	vmov	r0, r1, d0
 8006362:	2200      	movs	r2, #0
 8006364:	f7fa f8f4 	bl	8000550 <__aeabi_dmul>
 8006368:	4602      	mov	r2, r0
 800636a:	460b      	mov	r3, r1
 800636c:	4630      	mov	r0, r6
 800636e:	4639      	mov	r1, r7
 8006370:	f7f9 ff36 	bl	80001e0 <__aeabi_dsub>
 8006374:	460f      	mov	r7, r1
 8006376:	4606      	mov	r6, r0
 8006378:	f7fa fb84 	bl	8000a84 <__aeabi_d2iz>
 800637c:	9002      	str	r0, [sp, #8]
 800637e:	f7fa f87d 	bl	800047c <__aeabi_i2d>
 8006382:	4602      	mov	r2, r0
 8006384:	460b      	mov	r3, r1
 8006386:	4630      	mov	r0, r6
 8006388:	4639      	mov	r1, r7
 800638a:	f7f9 ff29 	bl	80001e0 <__aeabi_dsub>
 800638e:	f1bb 0f00 	cmp.w	fp, #0
 8006392:	4606      	mov	r6, r0
 8006394:	460f      	mov	r7, r1
 8006396:	dd6c      	ble.n	8006472 <__kernel_rem_pio2+0x252>
 8006398:	f108 31ff 	add.w	r1, r8, #4294967295
 800639c:	ab0c      	add	r3, sp, #48	@ 0x30
 800639e:	9d02      	ldr	r5, [sp, #8]
 80063a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80063a4:	f1cb 0018 	rsb	r0, fp, #24
 80063a8:	fa43 f200 	asr.w	r2, r3, r0
 80063ac:	4415      	add	r5, r2
 80063ae:	4082      	lsls	r2, r0
 80063b0:	1a9b      	subs	r3, r3, r2
 80063b2:	aa0c      	add	r2, sp, #48	@ 0x30
 80063b4:	9502      	str	r5, [sp, #8]
 80063b6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80063ba:	f1cb 0217 	rsb	r2, fp, #23
 80063be:	fa43 f902 	asr.w	r9, r3, r2
 80063c2:	f1b9 0f00 	cmp.w	r9, #0
 80063c6:	dd64      	ble.n	8006492 <__kernel_rem_pio2+0x272>
 80063c8:	9b02      	ldr	r3, [sp, #8]
 80063ca:	2200      	movs	r2, #0
 80063cc:	3301      	adds	r3, #1
 80063ce:	9302      	str	r3, [sp, #8]
 80063d0:	4615      	mov	r5, r2
 80063d2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80063d6:	4590      	cmp	r8, r2
 80063d8:	f300 80b8 	bgt.w	800654c <__kernel_rem_pio2+0x32c>
 80063dc:	f1bb 0f00 	cmp.w	fp, #0
 80063e0:	dd07      	ble.n	80063f2 <__kernel_rem_pio2+0x1d2>
 80063e2:	f1bb 0f01 	cmp.w	fp, #1
 80063e6:	f000 80bf 	beq.w	8006568 <__kernel_rem_pio2+0x348>
 80063ea:	f1bb 0f02 	cmp.w	fp, #2
 80063ee:	f000 80c6 	beq.w	800657e <__kernel_rem_pio2+0x35e>
 80063f2:	f1b9 0f02 	cmp.w	r9, #2
 80063f6:	d14c      	bne.n	8006492 <__kernel_rem_pio2+0x272>
 80063f8:	4632      	mov	r2, r6
 80063fa:	463b      	mov	r3, r7
 80063fc:	494e      	ldr	r1, [pc, #312]	@ (8006538 <__kernel_rem_pio2+0x318>)
 80063fe:	2000      	movs	r0, #0
 8006400:	f7f9 feee 	bl	80001e0 <__aeabi_dsub>
 8006404:	4606      	mov	r6, r0
 8006406:	460f      	mov	r7, r1
 8006408:	2d00      	cmp	r5, #0
 800640a:	d042      	beq.n	8006492 <__kernel_rem_pio2+0x272>
 800640c:	4658      	mov	r0, fp
 800640e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8006528 <__kernel_rem_pio2+0x308>
 8006412:	f000 fa5d 	bl	80068d0 <scalbn>
 8006416:	4630      	mov	r0, r6
 8006418:	4639      	mov	r1, r7
 800641a:	ec53 2b10 	vmov	r2, r3, d0
 800641e:	f7f9 fedf 	bl	80001e0 <__aeabi_dsub>
 8006422:	4606      	mov	r6, r0
 8006424:	460f      	mov	r7, r1
 8006426:	e034      	b.n	8006492 <__kernel_rem_pio2+0x272>
 8006428:	4b44      	ldr	r3, [pc, #272]	@ (800653c <__kernel_rem_pio2+0x31c>)
 800642a:	2200      	movs	r2, #0
 800642c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006430:	f7fa f88e 	bl	8000550 <__aeabi_dmul>
 8006434:	f7fa fb26 	bl	8000a84 <__aeabi_d2iz>
 8006438:	f7fa f820 	bl	800047c <__aeabi_i2d>
 800643c:	4b40      	ldr	r3, [pc, #256]	@ (8006540 <__kernel_rem_pio2+0x320>)
 800643e:	2200      	movs	r2, #0
 8006440:	4606      	mov	r6, r0
 8006442:	460f      	mov	r7, r1
 8006444:	f7fa f884 	bl	8000550 <__aeabi_dmul>
 8006448:	4602      	mov	r2, r0
 800644a:	460b      	mov	r3, r1
 800644c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006450:	f7f9 fec6 	bl	80001e0 <__aeabi_dsub>
 8006454:	f7fa fb16 	bl	8000a84 <__aeabi_d2iz>
 8006458:	e9d5 2300 	ldrd	r2, r3, [r5]
 800645c:	f849 0b04 	str.w	r0, [r9], #4
 8006460:	4639      	mov	r1, r7
 8006462:	4630      	mov	r0, r6
 8006464:	f7f9 febe 	bl	80001e4 <__adddf3>
 8006468:	f10a 3aff 	add.w	sl, sl, #4294967295
 800646c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006470:	e75d      	b.n	800632e <__kernel_rem_pio2+0x10e>
 8006472:	d107      	bne.n	8006484 <__kernel_rem_pio2+0x264>
 8006474:	f108 33ff 	add.w	r3, r8, #4294967295
 8006478:	aa0c      	add	r2, sp, #48	@ 0x30
 800647a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800647e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8006482:	e79e      	b.n	80063c2 <__kernel_rem_pio2+0x1a2>
 8006484:	4b2f      	ldr	r3, [pc, #188]	@ (8006544 <__kernel_rem_pio2+0x324>)
 8006486:	2200      	movs	r2, #0
 8006488:	f7fa fae8 	bl	8000a5c <__aeabi_dcmpge>
 800648c:	2800      	cmp	r0, #0
 800648e:	d143      	bne.n	8006518 <__kernel_rem_pio2+0x2f8>
 8006490:	4681      	mov	r9, r0
 8006492:	2200      	movs	r2, #0
 8006494:	2300      	movs	r3, #0
 8006496:	4630      	mov	r0, r6
 8006498:	4639      	mov	r1, r7
 800649a:	f7fa fac1 	bl	8000a20 <__aeabi_dcmpeq>
 800649e:	2800      	cmp	r0, #0
 80064a0:	f000 80bf 	beq.w	8006622 <__kernel_rem_pio2+0x402>
 80064a4:	f108 33ff 	add.w	r3, r8, #4294967295
 80064a8:	2200      	movs	r2, #0
 80064aa:	9900      	ldr	r1, [sp, #0]
 80064ac:	428b      	cmp	r3, r1
 80064ae:	da6e      	bge.n	800658e <__kernel_rem_pio2+0x36e>
 80064b0:	2a00      	cmp	r2, #0
 80064b2:	f000 8089 	beq.w	80065c8 <__kernel_rem_pio2+0x3a8>
 80064b6:	f108 38ff 	add.w	r8, r8, #4294967295
 80064ba:	ab0c      	add	r3, sp, #48	@ 0x30
 80064bc:	f1ab 0b18 	sub.w	fp, fp, #24
 80064c0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d0f6      	beq.n	80064b6 <__kernel_rem_pio2+0x296>
 80064c8:	4658      	mov	r0, fp
 80064ca:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8006528 <__kernel_rem_pio2+0x308>
 80064ce:	f000 f9ff 	bl	80068d0 <scalbn>
 80064d2:	f108 0301 	add.w	r3, r8, #1
 80064d6:	00da      	lsls	r2, r3, #3
 80064d8:	9205      	str	r2, [sp, #20]
 80064da:	ec55 4b10 	vmov	r4, r5, d0
 80064de:	aa70      	add	r2, sp, #448	@ 0x1c0
 80064e0:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800653c <__kernel_rem_pio2+0x31c>
 80064e4:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80064e8:	4646      	mov	r6, r8
 80064ea:	f04f 0a00 	mov.w	sl, #0
 80064ee:	2e00      	cmp	r6, #0
 80064f0:	f280 80cf 	bge.w	8006692 <__kernel_rem_pio2+0x472>
 80064f4:	4644      	mov	r4, r8
 80064f6:	2c00      	cmp	r4, #0
 80064f8:	f2c0 80fd 	blt.w	80066f6 <__kernel_rem_pio2+0x4d6>
 80064fc:	4b12      	ldr	r3, [pc, #72]	@ (8006548 <__kernel_rem_pio2+0x328>)
 80064fe:	461f      	mov	r7, r3
 8006500:	ab70      	add	r3, sp, #448	@ 0x1c0
 8006502:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006506:	9306      	str	r3, [sp, #24]
 8006508:	f04f 0a00 	mov.w	sl, #0
 800650c:	f04f 0b00 	mov.w	fp, #0
 8006510:	2600      	movs	r6, #0
 8006512:	eba8 0504 	sub.w	r5, r8, r4
 8006516:	e0e2      	b.n	80066de <__kernel_rem_pio2+0x4be>
 8006518:	f04f 0902 	mov.w	r9, #2
 800651c:	e754      	b.n	80063c8 <__kernel_rem_pio2+0x1a8>
 800651e:	bf00      	nop
	...
 800652c:	3ff00000 	.word	0x3ff00000
 8006530:	08006cc0 	.word	0x08006cc0
 8006534:	40200000 	.word	0x40200000
 8006538:	3ff00000 	.word	0x3ff00000
 800653c:	3e700000 	.word	0x3e700000
 8006540:	41700000 	.word	0x41700000
 8006544:	3fe00000 	.word	0x3fe00000
 8006548:	08006c80 	.word	0x08006c80
 800654c:	f854 3b04 	ldr.w	r3, [r4], #4
 8006550:	b945      	cbnz	r5, 8006564 <__kernel_rem_pio2+0x344>
 8006552:	b123      	cbz	r3, 800655e <__kernel_rem_pio2+0x33e>
 8006554:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8006558:	f844 3c04 	str.w	r3, [r4, #-4]
 800655c:	2301      	movs	r3, #1
 800655e:	3201      	adds	r2, #1
 8006560:	461d      	mov	r5, r3
 8006562:	e738      	b.n	80063d6 <__kernel_rem_pio2+0x1b6>
 8006564:	1acb      	subs	r3, r1, r3
 8006566:	e7f7      	b.n	8006558 <__kernel_rem_pio2+0x338>
 8006568:	f108 32ff 	add.w	r2, r8, #4294967295
 800656c:	ab0c      	add	r3, sp, #48	@ 0x30
 800656e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006572:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006576:	a90c      	add	r1, sp, #48	@ 0x30
 8006578:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800657c:	e739      	b.n	80063f2 <__kernel_rem_pio2+0x1d2>
 800657e:	f108 32ff 	add.w	r2, r8, #4294967295
 8006582:	ab0c      	add	r3, sp, #48	@ 0x30
 8006584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006588:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800658c:	e7f3      	b.n	8006576 <__kernel_rem_pio2+0x356>
 800658e:	a90c      	add	r1, sp, #48	@ 0x30
 8006590:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006594:	3b01      	subs	r3, #1
 8006596:	430a      	orrs	r2, r1
 8006598:	e787      	b.n	80064aa <__kernel_rem_pio2+0x28a>
 800659a:	3401      	adds	r4, #1
 800659c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80065a0:	2a00      	cmp	r2, #0
 80065a2:	d0fa      	beq.n	800659a <__kernel_rem_pio2+0x37a>
 80065a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065a6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80065aa:	eb0d 0503 	add.w	r5, sp, r3
 80065ae:	9b06      	ldr	r3, [sp, #24]
 80065b0:	aa20      	add	r2, sp, #128	@ 0x80
 80065b2:	4443      	add	r3, r8
 80065b4:	f108 0701 	add.w	r7, r8, #1
 80065b8:	3d98      	subs	r5, #152	@ 0x98
 80065ba:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80065be:	4444      	add	r4, r8
 80065c0:	42bc      	cmp	r4, r7
 80065c2:	da04      	bge.n	80065ce <__kernel_rem_pio2+0x3ae>
 80065c4:	46a0      	mov	r8, r4
 80065c6:	e6a2      	b.n	800630e <__kernel_rem_pio2+0xee>
 80065c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065ca:	2401      	movs	r4, #1
 80065cc:	e7e6      	b.n	800659c <__kernel_rem_pio2+0x37c>
 80065ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065d0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80065d4:	f7f9 ff52 	bl	800047c <__aeabi_i2d>
 80065d8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 80068a0 <__kernel_rem_pio2+0x680>
 80065dc:	e8e6 0102 	strd	r0, r1, [r6], #8
 80065e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80065e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80065e8:	46b2      	mov	sl, r6
 80065ea:	f04f 0800 	mov.w	r8, #0
 80065ee:	9b05      	ldr	r3, [sp, #20]
 80065f0:	4598      	cmp	r8, r3
 80065f2:	dd05      	ble.n	8006600 <__kernel_rem_pio2+0x3e0>
 80065f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80065f8:	3701      	adds	r7, #1
 80065fa:	eca5 7b02 	vstmia	r5!, {d7}
 80065fe:	e7df      	b.n	80065c0 <__kernel_rem_pio2+0x3a0>
 8006600:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8006604:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006608:	f7f9 ffa2 	bl	8000550 <__aeabi_dmul>
 800660c:	4602      	mov	r2, r0
 800660e:	460b      	mov	r3, r1
 8006610:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006614:	f7f9 fde6 	bl	80001e4 <__adddf3>
 8006618:	f108 0801 	add.w	r8, r8, #1
 800661c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006620:	e7e5      	b.n	80065ee <__kernel_rem_pio2+0x3ce>
 8006622:	f1cb 0000 	rsb	r0, fp, #0
 8006626:	ec47 6b10 	vmov	d0, r6, r7
 800662a:	f000 f951 	bl	80068d0 <scalbn>
 800662e:	ec55 4b10 	vmov	r4, r5, d0
 8006632:	4b9d      	ldr	r3, [pc, #628]	@ (80068a8 <__kernel_rem_pio2+0x688>)
 8006634:	2200      	movs	r2, #0
 8006636:	4620      	mov	r0, r4
 8006638:	4629      	mov	r1, r5
 800663a:	f7fa fa0f 	bl	8000a5c <__aeabi_dcmpge>
 800663e:	b300      	cbz	r0, 8006682 <__kernel_rem_pio2+0x462>
 8006640:	4b9a      	ldr	r3, [pc, #616]	@ (80068ac <__kernel_rem_pio2+0x68c>)
 8006642:	2200      	movs	r2, #0
 8006644:	4620      	mov	r0, r4
 8006646:	4629      	mov	r1, r5
 8006648:	f7f9 ff82 	bl	8000550 <__aeabi_dmul>
 800664c:	f7fa fa1a 	bl	8000a84 <__aeabi_d2iz>
 8006650:	4606      	mov	r6, r0
 8006652:	f7f9 ff13 	bl	800047c <__aeabi_i2d>
 8006656:	4b94      	ldr	r3, [pc, #592]	@ (80068a8 <__kernel_rem_pio2+0x688>)
 8006658:	2200      	movs	r2, #0
 800665a:	f7f9 ff79 	bl	8000550 <__aeabi_dmul>
 800665e:	460b      	mov	r3, r1
 8006660:	4602      	mov	r2, r0
 8006662:	4629      	mov	r1, r5
 8006664:	4620      	mov	r0, r4
 8006666:	f7f9 fdbb 	bl	80001e0 <__aeabi_dsub>
 800666a:	f7fa fa0b 	bl	8000a84 <__aeabi_d2iz>
 800666e:	ab0c      	add	r3, sp, #48	@ 0x30
 8006670:	f10b 0b18 	add.w	fp, fp, #24
 8006674:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8006678:	f108 0801 	add.w	r8, r8, #1
 800667c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8006680:	e722      	b.n	80064c8 <__kernel_rem_pio2+0x2a8>
 8006682:	4620      	mov	r0, r4
 8006684:	4629      	mov	r1, r5
 8006686:	f7fa f9fd 	bl	8000a84 <__aeabi_d2iz>
 800668a:	ab0c      	add	r3, sp, #48	@ 0x30
 800668c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8006690:	e71a      	b.n	80064c8 <__kernel_rem_pio2+0x2a8>
 8006692:	ab0c      	add	r3, sp, #48	@ 0x30
 8006694:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006698:	f7f9 fef0 	bl	800047c <__aeabi_i2d>
 800669c:	4622      	mov	r2, r4
 800669e:	462b      	mov	r3, r5
 80066a0:	f7f9 ff56 	bl	8000550 <__aeabi_dmul>
 80066a4:	4652      	mov	r2, sl
 80066a6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80066aa:	465b      	mov	r3, fp
 80066ac:	4620      	mov	r0, r4
 80066ae:	4629      	mov	r1, r5
 80066b0:	f7f9 ff4e 	bl	8000550 <__aeabi_dmul>
 80066b4:	3e01      	subs	r6, #1
 80066b6:	4604      	mov	r4, r0
 80066b8:	460d      	mov	r5, r1
 80066ba:	e718      	b.n	80064ee <__kernel_rem_pio2+0x2ce>
 80066bc:	9906      	ldr	r1, [sp, #24]
 80066be:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80066c2:	9106      	str	r1, [sp, #24]
 80066c4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80066c8:	f7f9 ff42 	bl	8000550 <__aeabi_dmul>
 80066cc:	4602      	mov	r2, r0
 80066ce:	460b      	mov	r3, r1
 80066d0:	4650      	mov	r0, sl
 80066d2:	4659      	mov	r1, fp
 80066d4:	f7f9 fd86 	bl	80001e4 <__adddf3>
 80066d8:	3601      	adds	r6, #1
 80066da:	4682      	mov	sl, r0
 80066dc:	468b      	mov	fp, r1
 80066de:	9b00      	ldr	r3, [sp, #0]
 80066e0:	429e      	cmp	r6, r3
 80066e2:	dc01      	bgt.n	80066e8 <__kernel_rem_pio2+0x4c8>
 80066e4:	42b5      	cmp	r5, r6
 80066e6:	dae9      	bge.n	80066bc <__kernel_rem_pio2+0x49c>
 80066e8:	ab48      	add	r3, sp, #288	@ 0x120
 80066ea:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80066ee:	e9c5 ab00 	strd	sl, fp, [r5]
 80066f2:	3c01      	subs	r4, #1
 80066f4:	e6ff      	b.n	80064f6 <__kernel_rem_pio2+0x2d6>
 80066f6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	dc0b      	bgt.n	8006714 <__kernel_rem_pio2+0x4f4>
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	dc39      	bgt.n	8006774 <__kernel_rem_pio2+0x554>
 8006700:	d05d      	beq.n	80067be <__kernel_rem_pio2+0x59e>
 8006702:	9b02      	ldr	r3, [sp, #8]
 8006704:	f003 0007 	and.w	r0, r3, #7
 8006708:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800670c:	ecbd 8b02 	vpop	{d8}
 8006710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006714:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8006716:	2b03      	cmp	r3, #3
 8006718:	d1f3      	bne.n	8006702 <__kernel_rem_pio2+0x4e2>
 800671a:	9b05      	ldr	r3, [sp, #20]
 800671c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006720:	eb0d 0403 	add.w	r4, sp, r3
 8006724:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8006728:	4625      	mov	r5, r4
 800672a:	46c2      	mov	sl, r8
 800672c:	f1ba 0f00 	cmp.w	sl, #0
 8006730:	f1a5 0508 	sub.w	r5, r5, #8
 8006734:	dc6b      	bgt.n	800680e <__kernel_rem_pio2+0x5ee>
 8006736:	4645      	mov	r5, r8
 8006738:	2d01      	cmp	r5, #1
 800673a:	f1a4 0408 	sub.w	r4, r4, #8
 800673e:	f300 8087 	bgt.w	8006850 <__kernel_rem_pio2+0x630>
 8006742:	9c05      	ldr	r4, [sp, #20]
 8006744:	ab48      	add	r3, sp, #288	@ 0x120
 8006746:	441c      	add	r4, r3
 8006748:	2000      	movs	r0, #0
 800674a:	2100      	movs	r1, #0
 800674c:	f1b8 0f01 	cmp.w	r8, #1
 8006750:	f300 809c 	bgt.w	800688c <__kernel_rem_pio2+0x66c>
 8006754:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8006758:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800675c:	f1b9 0f00 	cmp.w	r9, #0
 8006760:	f040 80a6 	bne.w	80068b0 <__kernel_rem_pio2+0x690>
 8006764:	9b04      	ldr	r3, [sp, #16]
 8006766:	e9c3 7800 	strd	r7, r8, [r3]
 800676a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800676e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006772:	e7c6      	b.n	8006702 <__kernel_rem_pio2+0x4e2>
 8006774:	9d05      	ldr	r5, [sp, #20]
 8006776:	ab48      	add	r3, sp, #288	@ 0x120
 8006778:	441d      	add	r5, r3
 800677a:	4644      	mov	r4, r8
 800677c:	2000      	movs	r0, #0
 800677e:	2100      	movs	r1, #0
 8006780:	2c00      	cmp	r4, #0
 8006782:	da35      	bge.n	80067f0 <__kernel_rem_pio2+0x5d0>
 8006784:	f1b9 0f00 	cmp.w	r9, #0
 8006788:	d038      	beq.n	80067fc <__kernel_rem_pio2+0x5dc>
 800678a:	4602      	mov	r2, r0
 800678c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006790:	9c04      	ldr	r4, [sp, #16]
 8006792:	e9c4 2300 	strd	r2, r3, [r4]
 8006796:	4602      	mov	r2, r0
 8006798:	460b      	mov	r3, r1
 800679a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800679e:	f7f9 fd1f 	bl	80001e0 <__aeabi_dsub>
 80067a2:	ad4a      	add	r5, sp, #296	@ 0x128
 80067a4:	2401      	movs	r4, #1
 80067a6:	45a0      	cmp	r8, r4
 80067a8:	da2b      	bge.n	8006802 <__kernel_rem_pio2+0x5e2>
 80067aa:	f1b9 0f00 	cmp.w	r9, #0
 80067ae:	d002      	beq.n	80067b6 <__kernel_rem_pio2+0x596>
 80067b0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80067b4:	4619      	mov	r1, r3
 80067b6:	9b04      	ldr	r3, [sp, #16]
 80067b8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80067bc:	e7a1      	b.n	8006702 <__kernel_rem_pio2+0x4e2>
 80067be:	9c05      	ldr	r4, [sp, #20]
 80067c0:	ab48      	add	r3, sp, #288	@ 0x120
 80067c2:	441c      	add	r4, r3
 80067c4:	2000      	movs	r0, #0
 80067c6:	2100      	movs	r1, #0
 80067c8:	f1b8 0f00 	cmp.w	r8, #0
 80067cc:	da09      	bge.n	80067e2 <__kernel_rem_pio2+0x5c2>
 80067ce:	f1b9 0f00 	cmp.w	r9, #0
 80067d2:	d002      	beq.n	80067da <__kernel_rem_pio2+0x5ba>
 80067d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80067d8:	4619      	mov	r1, r3
 80067da:	9b04      	ldr	r3, [sp, #16]
 80067dc:	e9c3 0100 	strd	r0, r1, [r3]
 80067e0:	e78f      	b.n	8006702 <__kernel_rem_pio2+0x4e2>
 80067e2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80067e6:	f7f9 fcfd 	bl	80001e4 <__adddf3>
 80067ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80067ee:	e7eb      	b.n	80067c8 <__kernel_rem_pio2+0x5a8>
 80067f0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80067f4:	f7f9 fcf6 	bl	80001e4 <__adddf3>
 80067f8:	3c01      	subs	r4, #1
 80067fa:	e7c1      	b.n	8006780 <__kernel_rem_pio2+0x560>
 80067fc:	4602      	mov	r2, r0
 80067fe:	460b      	mov	r3, r1
 8006800:	e7c6      	b.n	8006790 <__kernel_rem_pio2+0x570>
 8006802:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8006806:	f7f9 fced 	bl	80001e4 <__adddf3>
 800680a:	3401      	adds	r4, #1
 800680c:	e7cb      	b.n	80067a6 <__kernel_rem_pio2+0x586>
 800680e:	ed95 7b00 	vldr	d7, [r5]
 8006812:	ed8d 7b00 	vstr	d7, [sp]
 8006816:	ed95 7b02 	vldr	d7, [r5, #8]
 800681a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800681e:	ec53 2b17 	vmov	r2, r3, d7
 8006822:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006826:	f7f9 fcdd 	bl	80001e4 <__adddf3>
 800682a:	4602      	mov	r2, r0
 800682c:	460b      	mov	r3, r1
 800682e:	4606      	mov	r6, r0
 8006830:	460f      	mov	r7, r1
 8006832:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006836:	f7f9 fcd3 	bl	80001e0 <__aeabi_dsub>
 800683a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800683e:	f7f9 fcd1 	bl	80001e4 <__adddf3>
 8006842:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006846:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800684a:	e9c5 6700 	strd	r6, r7, [r5]
 800684e:	e76d      	b.n	800672c <__kernel_rem_pio2+0x50c>
 8006850:	ed94 7b00 	vldr	d7, [r4]
 8006854:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8006858:	ec51 0b17 	vmov	r0, r1, d7
 800685c:	4652      	mov	r2, sl
 800685e:	465b      	mov	r3, fp
 8006860:	ed8d 7b00 	vstr	d7, [sp]
 8006864:	f7f9 fcbe 	bl	80001e4 <__adddf3>
 8006868:	4602      	mov	r2, r0
 800686a:	460b      	mov	r3, r1
 800686c:	4606      	mov	r6, r0
 800686e:	460f      	mov	r7, r1
 8006870:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006874:	f7f9 fcb4 	bl	80001e0 <__aeabi_dsub>
 8006878:	4652      	mov	r2, sl
 800687a:	465b      	mov	r3, fp
 800687c:	f7f9 fcb2 	bl	80001e4 <__adddf3>
 8006880:	3d01      	subs	r5, #1
 8006882:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006886:	e9c4 6700 	strd	r6, r7, [r4]
 800688a:	e755      	b.n	8006738 <__kernel_rem_pio2+0x518>
 800688c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006890:	f7f9 fca8 	bl	80001e4 <__adddf3>
 8006894:	f108 38ff 	add.w	r8, r8, #4294967295
 8006898:	e758      	b.n	800674c <__kernel_rem_pio2+0x52c>
 800689a:	bf00      	nop
 800689c:	f3af 8000 	nop.w
	...
 80068a8:	41700000 	.word	0x41700000
 80068ac:	3e700000 	.word	0x3e700000
 80068b0:	9b04      	ldr	r3, [sp, #16]
 80068b2:	9a04      	ldr	r2, [sp, #16]
 80068b4:	601f      	str	r7, [r3, #0]
 80068b6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 80068ba:	605c      	str	r4, [r3, #4]
 80068bc:	609d      	str	r5, [r3, #8]
 80068be:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80068c2:	60d3      	str	r3, [r2, #12]
 80068c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80068c8:	6110      	str	r0, [r2, #16]
 80068ca:	6153      	str	r3, [r2, #20]
 80068cc:	e719      	b.n	8006702 <__kernel_rem_pio2+0x4e2>
 80068ce:	bf00      	nop

080068d0 <scalbn>:
 80068d0:	b570      	push	{r4, r5, r6, lr}
 80068d2:	ec55 4b10 	vmov	r4, r5, d0
 80068d6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80068da:	4606      	mov	r6, r0
 80068dc:	462b      	mov	r3, r5
 80068de:	b991      	cbnz	r1, 8006906 <scalbn+0x36>
 80068e0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80068e4:	4323      	orrs	r3, r4
 80068e6:	d03d      	beq.n	8006964 <scalbn+0x94>
 80068e8:	4b35      	ldr	r3, [pc, #212]	@ (80069c0 <scalbn+0xf0>)
 80068ea:	4620      	mov	r0, r4
 80068ec:	4629      	mov	r1, r5
 80068ee:	2200      	movs	r2, #0
 80068f0:	f7f9 fe2e 	bl	8000550 <__aeabi_dmul>
 80068f4:	4b33      	ldr	r3, [pc, #204]	@ (80069c4 <scalbn+0xf4>)
 80068f6:	429e      	cmp	r6, r3
 80068f8:	4604      	mov	r4, r0
 80068fa:	460d      	mov	r5, r1
 80068fc:	da0f      	bge.n	800691e <scalbn+0x4e>
 80068fe:	a328      	add	r3, pc, #160	@ (adr r3, 80069a0 <scalbn+0xd0>)
 8006900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006904:	e01e      	b.n	8006944 <scalbn+0x74>
 8006906:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800690a:	4291      	cmp	r1, r2
 800690c:	d10b      	bne.n	8006926 <scalbn+0x56>
 800690e:	4622      	mov	r2, r4
 8006910:	4620      	mov	r0, r4
 8006912:	4629      	mov	r1, r5
 8006914:	f7f9 fc66 	bl	80001e4 <__adddf3>
 8006918:	4604      	mov	r4, r0
 800691a:	460d      	mov	r5, r1
 800691c:	e022      	b.n	8006964 <scalbn+0x94>
 800691e:	460b      	mov	r3, r1
 8006920:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006924:	3936      	subs	r1, #54	@ 0x36
 8006926:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800692a:	4296      	cmp	r6, r2
 800692c:	dd0d      	ble.n	800694a <scalbn+0x7a>
 800692e:	2d00      	cmp	r5, #0
 8006930:	a11d      	add	r1, pc, #116	@ (adr r1, 80069a8 <scalbn+0xd8>)
 8006932:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006936:	da02      	bge.n	800693e <scalbn+0x6e>
 8006938:	a11d      	add	r1, pc, #116	@ (adr r1, 80069b0 <scalbn+0xe0>)
 800693a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800693e:	a31a      	add	r3, pc, #104	@ (adr r3, 80069a8 <scalbn+0xd8>)
 8006940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006944:	f7f9 fe04 	bl	8000550 <__aeabi_dmul>
 8006948:	e7e6      	b.n	8006918 <scalbn+0x48>
 800694a:	1872      	adds	r2, r6, r1
 800694c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8006950:	428a      	cmp	r2, r1
 8006952:	dcec      	bgt.n	800692e <scalbn+0x5e>
 8006954:	2a00      	cmp	r2, #0
 8006956:	dd08      	ble.n	800696a <scalbn+0x9a>
 8006958:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800695c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006960:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006964:	ec45 4b10 	vmov	d0, r4, r5
 8006968:	bd70      	pop	{r4, r5, r6, pc}
 800696a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800696e:	da08      	bge.n	8006982 <scalbn+0xb2>
 8006970:	2d00      	cmp	r5, #0
 8006972:	a10b      	add	r1, pc, #44	@ (adr r1, 80069a0 <scalbn+0xd0>)
 8006974:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006978:	dac1      	bge.n	80068fe <scalbn+0x2e>
 800697a:	a10f      	add	r1, pc, #60	@ (adr r1, 80069b8 <scalbn+0xe8>)
 800697c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006980:	e7bd      	b.n	80068fe <scalbn+0x2e>
 8006982:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006986:	3236      	adds	r2, #54	@ 0x36
 8006988:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800698c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006990:	4620      	mov	r0, r4
 8006992:	4b0d      	ldr	r3, [pc, #52]	@ (80069c8 <scalbn+0xf8>)
 8006994:	4629      	mov	r1, r5
 8006996:	2200      	movs	r2, #0
 8006998:	e7d4      	b.n	8006944 <scalbn+0x74>
 800699a:	bf00      	nop
 800699c:	f3af 8000 	nop.w
 80069a0:	c2f8f359 	.word	0xc2f8f359
 80069a4:	01a56e1f 	.word	0x01a56e1f
 80069a8:	8800759c 	.word	0x8800759c
 80069ac:	7e37e43c 	.word	0x7e37e43c
 80069b0:	8800759c 	.word	0x8800759c
 80069b4:	fe37e43c 	.word	0xfe37e43c
 80069b8:	c2f8f359 	.word	0xc2f8f359
 80069bc:	81a56e1f 	.word	0x81a56e1f
 80069c0:	43500000 	.word	0x43500000
 80069c4:	ffff3cb0 	.word	0xffff3cb0
 80069c8:	3c900000 	.word	0x3c900000
 80069cc:	00000000 	.word	0x00000000

080069d0 <floor>:
 80069d0:	ec51 0b10 	vmov	r0, r1, d0
 80069d4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80069d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069dc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80069e0:	2e13      	cmp	r6, #19
 80069e2:	460c      	mov	r4, r1
 80069e4:	4605      	mov	r5, r0
 80069e6:	4680      	mov	r8, r0
 80069e8:	dc34      	bgt.n	8006a54 <floor+0x84>
 80069ea:	2e00      	cmp	r6, #0
 80069ec:	da17      	bge.n	8006a1e <floor+0x4e>
 80069ee:	a332      	add	r3, pc, #200	@ (adr r3, 8006ab8 <floor+0xe8>)
 80069f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f4:	f7f9 fbf6 	bl	80001e4 <__adddf3>
 80069f8:	2200      	movs	r2, #0
 80069fa:	2300      	movs	r3, #0
 80069fc:	f7fa f838 	bl	8000a70 <__aeabi_dcmpgt>
 8006a00:	b150      	cbz	r0, 8006a18 <floor+0x48>
 8006a02:	2c00      	cmp	r4, #0
 8006a04:	da55      	bge.n	8006ab2 <floor+0xe2>
 8006a06:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8006a0a:	432c      	orrs	r4, r5
 8006a0c:	2500      	movs	r5, #0
 8006a0e:	42ac      	cmp	r4, r5
 8006a10:	4c2b      	ldr	r4, [pc, #172]	@ (8006ac0 <floor+0xf0>)
 8006a12:	bf08      	it	eq
 8006a14:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8006a18:	4621      	mov	r1, r4
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	e023      	b.n	8006a66 <floor+0x96>
 8006a1e:	4f29      	ldr	r7, [pc, #164]	@ (8006ac4 <floor+0xf4>)
 8006a20:	4137      	asrs	r7, r6
 8006a22:	ea01 0307 	and.w	r3, r1, r7
 8006a26:	4303      	orrs	r3, r0
 8006a28:	d01d      	beq.n	8006a66 <floor+0x96>
 8006a2a:	a323      	add	r3, pc, #140	@ (adr r3, 8006ab8 <floor+0xe8>)
 8006a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a30:	f7f9 fbd8 	bl	80001e4 <__adddf3>
 8006a34:	2200      	movs	r2, #0
 8006a36:	2300      	movs	r3, #0
 8006a38:	f7fa f81a 	bl	8000a70 <__aeabi_dcmpgt>
 8006a3c:	2800      	cmp	r0, #0
 8006a3e:	d0eb      	beq.n	8006a18 <floor+0x48>
 8006a40:	2c00      	cmp	r4, #0
 8006a42:	bfbe      	ittt	lt
 8006a44:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8006a48:	4133      	asrlt	r3, r6
 8006a4a:	18e4      	addlt	r4, r4, r3
 8006a4c:	ea24 0407 	bic.w	r4, r4, r7
 8006a50:	2500      	movs	r5, #0
 8006a52:	e7e1      	b.n	8006a18 <floor+0x48>
 8006a54:	2e33      	cmp	r6, #51	@ 0x33
 8006a56:	dd0a      	ble.n	8006a6e <floor+0x9e>
 8006a58:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8006a5c:	d103      	bne.n	8006a66 <floor+0x96>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	460b      	mov	r3, r1
 8006a62:	f7f9 fbbf 	bl	80001e4 <__adddf3>
 8006a66:	ec41 0b10 	vmov	d0, r0, r1
 8006a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a6e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8006a72:	f04f 37ff 	mov.w	r7, #4294967295
 8006a76:	40df      	lsrs	r7, r3
 8006a78:	4207      	tst	r7, r0
 8006a7a:	d0f4      	beq.n	8006a66 <floor+0x96>
 8006a7c:	a30e      	add	r3, pc, #56	@ (adr r3, 8006ab8 <floor+0xe8>)
 8006a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a82:	f7f9 fbaf 	bl	80001e4 <__adddf3>
 8006a86:	2200      	movs	r2, #0
 8006a88:	2300      	movs	r3, #0
 8006a8a:	f7f9 fff1 	bl	8000a70 <__aeabi_dcmpgt>
 8006a8e:	2800      	cmp	r0, #0
 8006a90:	d0c2      	beq.n	8006a18 <floor+0x48>
 8006a92:	2c00      	cmp	r4, #0
 8006a94:	da0a      	bge.n	8006aac <floor+0xdc>
 8006a96:	2e14      	cmp	r6, #20
 8006a98:	d101      	bne.n	8006a9e <floor+0xce>
 8006a9a:	3401      	adds	r4, #1
 8006a9c:	e006      	b.n	8006aac <floor+0xdc>
 8006a9e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	40b3      	lsls	r3, r6
 8006aa6:	441d      	add	r5, r3
 8006aa8:	4545      	cmp	r5, r8
 8006aaa:	d3f6      	bcc.n	8006a9a <floor+0xca>
 8006aac:	ea25 0507 	bic.w	r5, r5, r7
 8006ab0:	e7b2      	b.n	8006a18 <floor+0x48>
 8006ab2:	2500      	movs	r5, #0
 8006ab4:	462c      	mov	r4, r5
 8006ab6:	e7af      	b.n	8006a18 <floor+0x48>
 8006ab8:	8800759c 	.word	0x8800759c
 8006abc:	7e37e43c 	.word	0x7e37e43c
 8006ac0:	bff00000 	.word	0xbff00000
 8006ac4:	000fffff 	.word	0x000fffff

08006ac8 <_init>:
 8006ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aca:	bf00      	nop
 8006acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ace:	bc08      	pop	{r3}
 8006ad0:	469e      	mov	lr, r3
 8006ad2:	4770      	bx	lr

08006ad4 <_fini>:
 8006ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ad6:	bf00      	nop
 8006ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ada:	bc08      	pop	{r3}
 8006adc:	469e      	mov	lr, r3
 8006ade:	4770      	bx	lr
