
ADC_SAR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fe0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08005180  08005180  00015180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051e8  080051e8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080051e8  080051e8  000151e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051f0  080051f0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051f0  080051f0  000151f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051f4  080051f4  000151f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080051f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  2000005c  08005254  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  08005254  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d53e  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d6c  00000000  00000000  0002d60d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ce8  00000000  00000000  0002f380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a1e  00000000  00000000  00030068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017b11  00000000  00000000  00030a86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f188  00000000  00000000  00048597  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a0d7  00000000  00000000  0005771f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c7c  00000000  00000000  000f17f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000f5474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005168 	.word	0x08005168

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08005168 	.word	0x08005168

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2f>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000854:	bf24      	itt	cs
 8000856:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800085a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800085e:	d90d      	bls.n	800087c <__aeabi_d2f+0x30>
 8000860:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000864:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000868:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800086c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000870:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000874:	bf08      	it	eq
 8000876:	f020 0001 	biceq.w	r0, r0, #1
 800087a:	4770      	bx	lr
 800087c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000880:	d121      	bne.n	80008c6 <__aeabi_d2f+0x7a>
 8000882:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000886:	bfbc      	itt	lt
 8000888:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800088c:	4770      	bxlt	lr
 800088e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000892:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000896:	f1c2 0218 	rsb	r2, r2, #24
 800089a:	f1c2 0c20 	rsb	ip, r2, #32
 800089e:	fa10 f30c 	lsls.w	r3, r0, ip
 80008a2:	fa20 f002 	lsr.w	r0, r0, r2
 80008a6:	bf18      	it	ne
 80008a8:	f040 0001 	orrne.w	r0, r0, #1
 80008ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008b8:	ea40 000c 	orr.w	r0, r0, ip
 80008bc:	fa23 f302 	lsr.w	r3, r3, r2
 80008c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008c4:	e7cc      	b.n	8000860 <__aeabi_d2f+0x14>
 80008c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ca:	d107      	bne.n	80008dc <__aeabi_d2f+0x90>
 80008cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008d0:	bf1e      	ittt	ne
 80008d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008da:	4770      	bxne	lr
 80008dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <__aeabi_uldivmod>:
 80008ec:	b953      	cbnz	r3, 8000904 <__aeabi_uldivmod+0x18>
 80008ee:	b94a      	cbnz	r2, 8000904 <__aeabi_uldivmod+0x18>
 80008f0:	2900      	cmp	r1, #0
 80008f2:	bf08      	it	eq
 80008f4:	2800      	cmpeq	r0, #0
 80008f6:	bf1c      	itt	ne
 80008f8:	f04f 31ff 	movne.w	r1, #4294967295
 80008fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000900:	f000 b970 	b.w	8000be4 <__aeabi_idiv0>
 8000904:	f1ad 0c08 	sub.w	ip, sp, #8
 8000908:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800090c:	f000 f806 	bl	800091c <__udivmoddi4>
 8000910:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000918:	b004      	add	sp, #16
 800091a:	4770      	bx	lr

0800091c <__udivmoddi4>:
 800091c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000920:	9e08      	ldr	r6, [sp, #32]
 8000922:	460d      	mov	r5, r1
 8000924:	4604      	mov	r4, r0
 8000926:	460f      	mov	r7, r1
 8000928:	2b00      	cmp	r3, #0
 800092a:	d14a      	bne.n	80009c2 <__udivmoddi4+0xa6>
 800092c:	428a      	cmp	r2, r1
 800092e:	4694      	mov	ip, r2
 8000930:	d965      	bls.n	80009fe <__udivmoddi4+0xe2>
 8000932:	fab2 f382 	clz	r3, r2
 8000936:	b143      	cbz	r3, 800094a <__udivmoddi4+0x2e>
 8000938:	fa02 fc03 	lsl.w	ip, r2, r3
 800093c:	f1c3 0220 	rsb	r2, r3, #32
 8000940:	409f      	lsls	r7, r3
 8000942:	fa20 f202 	lsr.w	r2, r0, r2
 8000946:	4317      	orrs	r7, r2
 8000948:	409c      	lsls	r4, r3
 800094a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800094e:	fa1f f58c 	uxth.w	r5, ip
 8000952:	fbb7 f1fe 	udiv	r1, r7, lr
 8000956:	0c22      	lsrs	r2, r4, #16
 8000958:	fb0e 7711 	mls	r7, lr, r1, r7
 800095c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000960:	fb01 f005 	mul.w	r0, r1, r5
 8000964:	4290      	cmp	r0, r2
 8000966:	d90a      	bls.n	800097e <__udivmoddi4+0x62>
 8000968:	eb1c 0202 	adds.w	r2, ip, r2
 800096c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000970:	f080 811c 	bcs.w	8000bac <__udivmoddi4+0x290>
 8000974:	4290      	cmp	r0, r2
 8000976:	f240 8119 	bls.w	8000bac <__udivmoddi4+0x290>
 800097a:	3902      	subs	r1, #2
 800097c:	4462      	add	r2, ip
 800097e:	1a12      	subs	r2, r2, r0
 8000980:	b2a4      	uxth	r4, r4
 8000982:	fbb2 f0fe 	udiv	r0, r2, lr
 8000986:	fb0e 2210 	mls	r2, lr, r0, r2
 800098a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800098e:	fb00 f505 	mul.w	r5, r0, r5
 8000992:	42a5      	cmp	r5, r4
 8000994:	d90a      	bls.n	80009ac <__udivmoddi4+0x90>
 8000996:	eb1c 0404 	adds.w	r4, ip, r4
 800099a:	f100 32ff 	add.w	r2, r0, #4294967295
 800099e:	f080 8107 	bcs.w	8000bb0 <__udivmoddi4+0x294>
 80009a2:	42a5      	cmp	r5, r4
 80009a4:	f240 8104 	bls.w	8000bb0 <__udivmoddi4+0x294>
 80009a8:	4464      	add	r4, ip
 80009aa:	3802      	subs	r0, #2
 80009ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009b0:	1b64      	subs	r4, r4, r5
 80009b2:	2100      	movs	r1, #0
 80009b4:	b11e      	cbz	r6, 80009be <__udivmoddi4+0xa2>
 80009b6:	40dc      	lsrs	r4, r3
 80009b8:	2300      	movs	r3, #0
 80009ba:	e9c6 4300 	strd	r4, r3, [r6]
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	428b      	cmp	r3, r1
 80009c4:	d908      	bls.n	80009d8 <__udivmoddi4+0xbc>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	f000 80ed 	beq.w	8000ba6 <__udivmoddi4+0x28a>
 80009cc:	2100      	movs	r1, #0
 80009ce:	e9c6 0500 	strd	r0, r5, [r6]
 80009d2:	4608      	mov	r0, r1
 80009d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d8:	fab3 f183 	clz	r1, r3
 80009dc:	2900      	cmp	r1, #0
 80009de:	d149      	bne.n	8000a74 <__udivmoddi4+0x158>
 80009e0:	42ab      	cmp	r3, r5
 80009e2:	d302      	bcc.n	80009ea <__udivmoddi4+0xce>
 80009e4:	4282      	cmp	r2, r0
 80009e6:	f200 80f8 	bhi.w	8000bda <__udivmoddi4+0x2be>
 80009ea:	1a84      	subs	r4, r0, r2
 80009ec:	eb65 0203 	sbc.w	r2, r5, r3
 80009f0:	2001      	movs	r0, #1
 80009f2:	4617      	mov	r7, r2
 80009f4:	2e00      	cmp	r6, #0
 80009f6:	d0e2      	beq.n	80009be <__udivmoddi4+0xa2>
 80009f8:	e9c6 4700 	strd	r4, r7, [r6]
 80009fc:	e7df      	b.n	80009be <__udivmoddi4+0xa2>
 80009fe:	b902      	cbnz	r2, 8000a02 <__udivmoddi4+0xe6>
 8000a00:	deff      	udf	#255	; 0xff
 8000a02:	fab2 f382 	clz	r3, r2
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	f040 8090 	bne.w	8000b2c <__udivmoddi4+0x210>
 8000a0c:	1a8a      	subs	r2, r1, r2
 8000a0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a12:	fa1f fe8c 	uxth.w	lr, ip
 8000a16:	2101      	movs	r1, #1
 8000a18:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a1c:	fb07 2015 	mls	r0, r7, r5, r2
 8000a20:	0c22      	lsrs	r2, r4, #16
 8000a22:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a26:	fb0e f005 	mul.w	r0, lr, r5
 8000a2a:	4290      	cmp	r0, r2
 8000a2c:	d908      	bls.n	8000a40 <__udivmoddi4+0x124>
 8000a2e:	eb1c 0202 	adds.w	r2, ip, r2
 8000a32:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a36:	d202      	bcs.n	8000a3e <__udivmoddi4+0x122>
 8000a38:	4290      	cmp	r0, r2
 8000a3a:	f200 80cb 	bhi.w	8000bd4 <__udivmoddi4+0x2b8>
 8000a3e:	4645      	mov	r5, r8
 8000a40:	1a12      	subs	r2, r2, r0
 8000a42:	b2a4      	uxth	r4, r4
 8000a44:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a48:	fb07 2210 	mls	r2, r7, r0, r2
 8000a4c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a50:	fb0e fe00 	mul.w	lr, lr, r0
 8000a54:	45a6      	cmp	lr, r4
 8000a56:	d908      	bls.n	8000a6a <__udivmoddi4+0x14e>
 8000a58:	eb1c 0404 	adds.w	r4, ip, r4
 8000a5c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a60:	d202      	bcs.n	8000a68 <__udivmoddi4+0x14c>
 8000a62:	45a6      	cmp	lr, r4
 8000a64:	f200 80bb 	bhi.w	8000bde <__udivmoddi4+0x2c2>
 8000a68:	4610      	mov	r0, r2
 8000a6a:	eba4 040e 	sub.w	r4, r4, lr
 8000a6e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a72:	e79f      	b.n	80009b4 <__udivmoddi4+0x98>
 8000a74:	f1c1 0720 	rsb	r7, r1, #32
 8000a78:	408b      	lsls	r3, r1
 8000a7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a82:	fa05 f401 	lsl.w	r4, r5, r1
 8000a86:	fa20 f307 	lsr.w	r3, r0, r7
 8000a8a:	40fd      	lsrs	r5, r7
 8000a8c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a90:	4323      	orrs	r3, r4
 8000a92:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a96:	fa1f fe8c 	uxth.w	lr, ip
 8000a9a:	fb09 5518 	mls	r5, r9, r8, r5
 8000a9e:	0c1c      	lsrs	r4, r3, #16
 8000aa0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000aa4:	fb08 f50e 	mul.w	r5, r8, lr
 8000aa8:	42a5      	cmp	r5, r4
 8000aaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000aae:	fa00 f001 	lsl.w	r0, r0, r1
 8000ab2:	d90b      	bls.n	8000acc <__udivmoddi4+0x1b0>
 8000ab4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ab8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000abc:	f080 8088 	bcs.w	8000bd0 <__udivmoddi4+0x2b4>
 8000ac0:	42a5      	cmp	r5, r4
 8000ac2:	f240 8085 	bls.w	8000bd0 <__udivmoddi4+0x2b4>
 8000ac6:	f1a8 0802 	sub.w	r8, r8, #2
 8000aca:	4464      	add	r4, ip
 8000acc:	1b64      	subs	r4, r4, r5
 8000ace:	b29d      	uxth	r5, r3
 8000ad0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ad4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ad8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000adc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ae0:	45a6      	cmp	lr, r4
 8000ae2:	d908      	bls.n	8000af6 <__udivmoddi4+0x1da>
 8000ae4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ae8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000aec:	d26c      	bcs.n	8000bc8 <__udivmoddi4+0x2ac>
 8000aee:	45a6      	cmp	lr, r4
 8000af0:	d96a      	bls.n	8000bc8 <__udivmoddi4+0x2ac>
 8000af2:	3b02      	subs	r3, #2
 8000af4:	4464      	add	r4, ip
 8000af6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000afa:	fba3 9502 	umull	r9, r5, r3, r2
 8000afe:	eba4 040e 	sub.w	r4, r4, lr
 8000b02:	42ac      	cmp	r4, r5
 8000b04:	46c8      	mov	r8, r9
 8000b06:	46ae      	mov	lr, r5
 8000b08:	d356      	bcc.n	8000bb8 <__udivmoddi4+0x29c>
 8000b0a:	d053      	beq.n	8000bb4 <__udivmoddi4+0x298>
 8000b0c:	b156      	cbz	r6, 8000b24 <__udivmoddi4+0x208>
 8000b0e:	ebb0 0208 	subs.w	r2, r0, r8
 8000b12:	eb64 040e 	sbc.w	r4, r4, lr
 8000b16:	fa04 f707 	lsl.w	r7, r4, r7
 8000b1a:	40ca      	lsrs	r2, r1
 8000b1c:	40cc      	lsrs	r4, r1
 8000b1e:	4317      	orrs	r7, r2
 8000b20:	e9c6 7400 	strd	r7, r4, [r6]
 8000b24:	4618      	mov	r0, r3
 8000b26:	2100      	movs	r1, #0
 8000b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2c:	f1c3 0120 	rsb	r1, r3, #32
 8000b30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b34:	fa20 f201 	lsr.w	r2, r0, r1
 8000b38:	fa25 f101 	lsr.w	r1, r5, r1
 8000b3c:	409d      	lsls	r5, r3
 8000b3e:	432a      	orrs	r2, r5
 8000b40:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b44:	fa1f fe8c 	uxth.w	lr, ip
 8000b48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b4c:	fb07 1510 	mls	r5, r7, r0, r1
 8000b50:	0c11      	lsrs	r1, r2, #16
 8000b52:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b56:	fb00 f50e 	mul.w	r5, r0, lr
 8000b5a:	428d      	cmp	r5, r1
 8000b5c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b60:	d908      	bls.n	8000b74 <__udivmoddi4+0x258>
 8000b62:	eb1c 0101 	adds.w	r1, ip, r1
 8000b66:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b6a:	d22f      	bcs.n	8000bcc <__udivmoddi4+0x2b0>
 8000b6c:	428d      	cmp	r5, r1
 8000b6e:	d92d      	bls.n	8000bcc <__udivmoddi4+0x2b0>
 8000b70:	3802      	subs	r0, #2
 8000b72:	4461      	add	r1, ip
 8000b74:	1b49      	subs	r1, r1, r5
 8000b76:	b292      	uxth	r2, r2
 8000b78:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b7c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b84:	fb05 f10e 	mul.w	r1, r5, lr
 8000b88:	4291      	cmp	r1, r2
 8000b8a:	d908      	bls.n	8000b9e <__udivmoddi4+0x282>
 8000b8c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b90:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b94:	d216      	bcs.n	8000bc4 <__udivmoddi4+0x2a8>
 8000b96:	4291      	cmp	r1, r2
 8000b98:	d914      	bls.n	8000bc4 <__udivmoddi4+0x2a8>
 8000b9a:	3d02      	subs	r5, #2
 8000b9c:	4462      	add	r2, ip
 8000b9e:	1a52      	subs	r2, r2, r1
 8000ba0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ba4:	e738      	b.n	8000a18 <__udivmoddi4+0xfc>
 8000ba6:	4631      	mov	r1, r6
 8000ba8:	4630      	mov	r0, r6
 8000baa:	e708      	b.n	80009be <__udivmoddi4+0xa2>
 8000bac:	4639      	mov	r1, r7
 8000bae:	e6e6      	b.n	800097e <__udivmoddi4+0x62>
 8000bb0:	4610      	mov	r0, r2
 8000bb2:	e6fb      	b.n	80009ac <__udivmoddi4+0x90>
 8000bb4:	4548      	cmp	r0, r9
 8000bb6:	d2a9      	bcs.n	8000b0c <__udivmoddi4+0x1f0>
 8000bb8:	ebb9 0802 	subs.w	r8, r9, r2
 8000bbc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000bc0:	3b01      	subs	r3, #1
 8000bc2:	e7a3      	b.n	8000b0c <__udivmoddi4+0x1f0>
 8000bc4:	4645      	mov	r5, r8
 8000bc6:	e7ea      	b.n	8000b9e <__udivmoddi4+0x282>
 8000bc8:	462b      	mov	r3, r5
 8000bca:	e794      	b.n	8000af6 <__udivmoddi4+0x1da>
 8000bcc:	4640      	mov	r0, r8
 8000bce:	e7d1      	b.n	8000b74 <__udivmoddi4+0x258>
 8000bd0:	46d0      	mov	r8, sl
 8000bd2:	e77b      	b.n	8000acc <__udivmoddi4+0x1b0>
 8000bd4:	3d02      	subs	r5, #2
 8000bd6:	4462      	add	r2, ip
 8000bd8:	e732      	b.n	8000a40 <__udivmoddi4+0x124>
 8000bda:	4608      	mov	r0, r1
 8000bdc:	e70a      	b.n	80009f4 <__udivmoddi4+0xd8>
 8000bde:	4464      	add	r4, ip
 8000be0:	3802      	subs	r0, #2
 8000be2:	e742      	b.n	8000a6a <__udivmoddi4+0x14e>

08000be4 <__aeabi_idiv0>:
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <show_num>:
	0x07, // 7
	0x7F, // 8
	0x6F  // 9
};

void show_num(uint16_t num){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	80fb      	strh	r3, [r7, #6]

	uint8_t digitos[N_dig] = {0};
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	813b      	strh	r3, [r7, #8]

	//Separamos los digitos
	//digitos[4] = num / 1000;
	//digitos[2] = (num % 1000) / 100;
	digitos[1] = (num % 100) / 10;
 8000bf6:	88fb      	ldrh	r3, [r7, #6]
 8000bf8:	4a6c      	ldr	r2, [pc, #432]	; (8000dac <show_num+0x1c4>)
 8000bfa:	fba2 1203 	umull	r1, r2, r2, r3
 8000bfe:	0952      	lsrs	r2, r2, #5
 8000c00:	2164      	movs	r1, #100	; 0x64
 8000c02:	fb01 f202 	mul.w	r2, r1, r2
 8000c06:	1a9b      	subs	r3, r3, r2
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	4a69      	ldr	r2, [pc, #420]	; (8000db0 <show_num+0x1c8>)
 8000c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c10:	08db      	lsrs	r3, r3, #3
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	727b      	strb	r3, [r7, #9]
	digitos[0] = num % 10;
 8000c18:	88fa      	ldrh	r2, [r7, #6]
 8000c1a:	4b65      	ldr	r3, [pc, #404]	; (8000db0 <show_num+0x1c8>)
 8000c1c:	fba3 1302 	umull	r1, r3, r3, r2
 8000c20:	08d9      	lsrs	r1, r3, #3
 8000c22:	460b      	mov	r3, r1
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	440b      	add	r3, r1
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	1ad3      	subs	r3, r2, r3
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	723b      	strb	r3, [r7, #8]

	//Ejecutamos la multiplexacoion
	int dig;
	uint8_t mux = 0b0001;
 8000c32:	2301      	movs	r3, #1
 8000c34:	72fb      	strb	r3, [r7, #11]
	for (dig = 0; dig < N_dig; ++dig){
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	e0a0      	b.n	8000d7e <show_num+0x196>

		//ESCOGEMOS EL DIGITO A MOSTRAR
		HAL_GPIO_WritePin(dig_0_port, dig_0_pin, mux&0x01);
 8000c3c:	7afb      	ldrb	r3, [r7, #11]
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	461a      	mov	r2, r3
 8000c46:	2108      	movs	r1, #8
 8000c48:	485a      	ldr	r0, [pc, #360]	; (8000db4 <show_num+0x1cc>)
 8000c4a:	f001 fda5 	bl	8002798 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(dig_1_port, dig_1_pin, mux&0x02);
 8000c4e:	7afb      	ldrb	r3, [r7, #11]
 8000c50:	f003 0302 	and.w	r3, r3, #2
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	461a      	mov	r2, r3
 8000c58:	2110      	movs	r1, #16
 8000c5a:	4856      	ldr	r0, [pc, #344]	; (8000db4 <show_num+0x1cc>)
 8000c5c:	f001 fd9c 	bl	8002798 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(dig_2_port, dig_2_pin, mux&0x04);
 8000c60:	7afb      	ldrb	r3, [r7, #11]
 8000c62:	f003 0304 	and.w	r3, r3, #4
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	461a      	mov	r2, r3
 8000c6a:	2104      	movs	r1, #4
 8000c6c:	4851      	ldr	r0, [pc, #324]	; (8000db4 <show_num+0x1cc>)
 8000c6e:	f001 fd93 	bl	8002798 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(dig_0_port, dig_0_pin, mux&0x08);
		mux <<= 1;
 8000c72:	7afb      	ldrb	r3, [r7, #11]
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	72fb      	strb	r3, [r7, #11]

		//MOSTRAMOS EL DIGITO A MOSTRAR
		HAL_GPIO_WritePin(SEG_A_port, SEG_A_pin, (nums_bin[digitos[dig]] & 0x40) >> 6); // A
 8000c78:	f107 0208 	add.w	r2, r7, #8
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	4413      	add	r3, r2
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	461a      	mov	r2, r3
 8000c84:	4b4c      	ldr	r3, [pc, #304]	; (8000db8 <show_num+0x1d0>)
 8000c86:	5c9b      	ldrb	r3, [r3, r2]
 8000c88:	119b      	asrs	r3, r3, #6
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	f003 0301 	and.w	r3, r3, #1
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	461a      	mov	r2, r3
 8000c94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c98:	4848      	ldr	r0, [pc, #288]	; (8000dbc <show_num+0x1d4>)
 8000c9a:	f001 fd7d 	bl	8002798 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_port, SEG_B_pin, (nums_bin[digitos[dig]] & 0x20) >> 5); // B
 8000c9e:	f107 0208 	add.w	r2, r7, #8
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4b43      	ldr	r3, [pc, #268]	; (8000db8 <show_num+0x1d0>)
 8000cac:	5c9b      	ldrb	r3, [r3, r2]
 8000cae:	115b      	asrs	r3, r3, #5
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	461a      	mov	r2, r3
 8000cba:	2104      	movs	r1, #4
 8000cbc:	483f      	ldr	r0, [pc, #252]	; (8000dbc <show_num+0x1d4>)
 8000cbe:	f001 fd6b 	bl	8002798 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_port, SEG_C_pin, (nums_bin[digitos[dig]] & 0x10) >> 4); // C
 8000cc2:	f107 0208 	add.w	r2, r7, #8
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	4413      	add	r3, r2
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4b3a      	ldr	r3, [pc, #232]	; (8000db8 <show_num+0x1d0>)
 8000cd0:	5c9b      	ldrb	r3, [r3, r2]
 8000cd2:	111b      	asrs	r3, r3, #4
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	461a      	mov	r2, r3
 8000cde:	2102      	movs	r1, #2
 8000ce0:	4836      	ldr	r0, [pc, #216]	; (8000dbc <show_num+0x1d4>)
 8000ce2:	f001 fd59 	bl	8002798 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_port, SEG_D_pin, (nums_bin[digitos[dig]] & 0x08) >> 3); // D
 8000ce6:	f107 0208 	add.w	r2, r7, #8
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	4413      	add	r3, r2
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b31      	ldr	r3, [pc, #196]	; (8000db8 <show_num+0x1d0>)
 8000cf4:	5c9b      	ldrb	r3, [r3, r2]
 8000cf6:	10db      	asrs	r3, r3, #3
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	461a      	mov	r2, r3
 8000d02:	2101      	movs	r1, #1
 8000d04:	482d      	ldr	r0, [pc, #180]	; (8000dbc <show_num+0x1d4>)
 8000d06:	f001 fd47 	bl	8002798 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_port, SEG_E_pin, (nums_bin[digitos[dig]] & 0x04) >> 2); // E
 8000d0a:	f107 0208 	add.w	r2, r7, #8
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	4413      	add	r3, r2
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	461a      	mov	r2, r3
 8000d16:	4b28      	ldr	r3, [pc, #160]	; (8000db8 <show_num+0x1d0>)
 8000d18:	5c9b      	ldrb	r3, [r3, r2]
 8000d1a:	109b      	asrs	r3, r3, #2
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	461a      	mov	r2, r3
 8000d26:	2180      	movs	r1, #128	; 0x80
 8000d28:	4822      	ldr	r0, [pc, #136]	; (8000db4 <show_num+0x1cc>)
 8000d2a:	f001 fd35 	bl	8002798 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_port, SEG_F_pin, (nums_bin[digitos[dig]] & 0x02) >> 1); // F
 8000d2e:	f107 0208 	add.w	r2, r7, #8
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	4413      	add	r3, r2
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b1f      	ldr	r3, [pc, #124]	; (8000db8 <show_num+0x1d0>)
 8000d3c:	5c9b      	ldrb	r3, [r3, r2]
 8000d3e:	105b      	asrs	r3, r3, #1
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	461a      	mov	r2, r3
 8000d4a:	2140      	movs	r1, #64	; 0x40
 8000d4c:	4819      	ldr	r0, [pc, #100]	; (8000db4 <show_num+0x1cc>)
 8000d4e:	f001 fd23 	bl	8002798 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_port, SEG_G_pin, (nums_bin[digitos[dig]] & 0x01) >> 0); // G
 8000d52:	f107 0208 	add.w	r2, r7, #8
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	4413      	add	r3, r2
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <show_num+0x1d0>)
 8000d60:	5c9b      	ldrb	r3, [r3, r2]
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	461a      	mov	r2, r3
 8000d6a:	2120      	movs	r1, #32
 8000d6c:	4811      	ldr	r0, [pc, #68]	; (8000db4 <show_num+0x1cc>)
 8000d6e:	f001 fd13 	bl	8002798 <HAL_GPIO_WritePin>

		HAL_Delay(1);
 8000d72:	2001      	movs	r0, #1
 8000d74:	f000 fe80 	bl	8001a78 <HAL_Delay>
	for (dig = 0; dig < N_dig; ++dig){
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	f77f af5b 	ble.w	8000c3c <show_num+0x54>
	}

	//APAGAMOS TODOS LOS DIGITOS
	HAL_GPIO_WritePin(dig_0_port, dig_0_pin, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2108      	movs	r1, #8
 8000d8a:	480a      	ldr	r0, [pc, #40]	; (8000db4 <show_num+0x1cc>)
 8000d8c:	f001 fd04 	bl	8002798 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(dig_1_port, dig_1_pin, 0);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2110      	movs	r1, #16
 8000d94:	4807      	ldr	r0, [pc, #28]	; (8000db4 <show_num+0x1cc>)
 8000d96:	f001 fcff 	bl	8002798 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(dig_2_port, dig_2_pin, 0);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2104      	movs	r1, #4
 8000d9e:	4805      	ldr	r0, [pc, #20]	; (8000db4 <show_num+0x1cc>)
 8000da0:	f001 fcfa 	bl	8002798 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(dig_0_port, dig_0_pin, mux&0x08);
}
 8000da4:	bf00      	nop
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	51eb851f 	.word	0x51eb851f
 8000db0:	cccccccd 	.word	0xcccccccd
 8000db4:	40020000 	.word	0x40020000
 8000db8:	08005190 	.word	0x08005190
 8000dbc:	40020400 	.word	0x40020400

08000dc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc6:	f000 fde5 	bl	8001994 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dca:	f000 f8b1 	bl	8000f30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dce:	f000 fa89 	bl	80012e4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000dd2:	f000 f969 	bl	80010a8 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000dd6:	f000 fa07 	bl	80011e8 <MX_TIM4_Init>
  MX_ADC1_Init();
 8000dda:	f000 f911 	bl	8001000 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 8000dde:	f000 fa57 	bl	8001290 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

    //Contador del encoder
    uint8_t count = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	73fb      	strb	r3, [r7, #15]
    //valor real del dac del mcu
    uint8_t adc_real = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	73bb      	strb	r3, [r7, #14]
    //valor medido en 8bits del adc implementado
    uint8_t adc_med = 0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	737b      	strb	r3, [r7, #13]
    //mag por uart
    char msg[10] = {0};
 8000dee:	2300      	movs	r3, #0
 8000df0:	603b      	str	r3, [r7, #0]
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	809a      	strh	r2, [r3, #4]

    //incializamos el pwm
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4843      	ldr	r0, [pc, #268]	; (8000f0c <main+0x14c>)
 8000dfe:	f002 f9fd 	bl	80031fc <HAL_TIM_PWM_Start>
    //incializamos el encoder
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000e02:	213c      	movs	r1, #60	; 0x3c
 8000e04:	4842      	ldr	r0, [pc, #264]	; (8000f10 <main+0x150>)
 8000e06:	f002 fb4f 	bl	80034a8 <HAL_TIM_Encoder_Start>
		 volt_out++;
		 HAL_DeInit(250);

	 */

	 show_num(adc_sar);
 8000e0a:	4b42      	ldr	r3, [pc, #264]	; (8000f14 <main+0x154>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff fee9 	bl	8000be8 <show_num>

	 count = TIM4->CNT/4;
 8000e16:	4b40      	ldr	r3, [pc, #256]	; (8000f18 <main+0x158>)
 8000e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e1a:	089b      	lsrs	r3, r3, #2
 8000e1c:	73fb      	strb	r3, [r7, #15]

	 //Estados del adc
	switch (count) {
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d069      	beq.n	8000ef8 <main+0x138>
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	dc6b      	bgt.n	8000f00 <main+0x140>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d002      	beq.n	8000e32 <main+0x72>
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d02e      	beq.n	8000e8e <main+0xce>

			adc_sar = 99;

			break;
		default:
			break;
 8000e30:	e066      	b.n	8000f00 <main+0x140>
			HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,SET);
 8000e32:	2201      	movs	r2, #1
 8000e34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e38:	4838      	ldr	r0, [pc, #224]	; (8000f1c <main+0x15c>)
 8000e3a:	f001 fcad 	bl	8002798 <HAL_GPIO_WritePin>
			adc_med = convert();
 8000e3e:	f000 fb05 	bl	800144c <convert>
 8000e42:	4603      	mov	r3, r0
 8000e44:	737b      	strb	r3, [r7, #13]
			adc_sar = represent(adc_med);
 8000e46:	7b7b      	ldrb	r3, [r7, #13]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f000 fb51 	bl	80014f0 <represent>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	461a      	mov	r2, r3
 8000e52:	4b30      	ldr	r3, [pc, #192]	; (8000f14 <main+0x154>)
 8000e54:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Start(&hadc1);
 8000e56:	4832      	ldr	r0, [pc, #200]	; (8000f20 <main+0x160>)
 8000e58:	f000 fe76 	bl	8001b48 <HAL_ADC_Start>
			if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK){
 8000e5c:	2164      	movs	r1, #100	; 0x64
 8000e5e:	4830      	ldr	r0, [pc, #192]	; (8000f20 <main+0x160>)
 8000e60:	f000 ff26 	bl	8001cb0 <HAL_ADC_PollForConversion>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d14c      	bne.n	8000f04 <main+0x144>
				adc_real = HAL_ADC_GetValue(&hadc1);//adc del micro
 8000e6a:	482d      	ldr	r0, [pc, #180]	; (8000f20 <main+0x160>)
 8000e6c:	f000 ffab 	bl	8001dc6 <HAL_ADC_GetValue>
 8000e70:	4603      	mov	r3, r0
 8000e72:	73bb      	strb	r3, [r7, #14]
				sprintf(msg,"%d %d\r\n",adc_real,adc_med);
 8000e74:	7bba      	ldrb	r2, [r7, #14]
 8000e76:	7b7b      	ldrb	r3, [r7, #13]
 8000e78:	4638      	mov	r0, r7
 8000e7a:	492a      	ldr	r1, [pc, #168]	; (8000f24 <main+0x164>)
 8000e7c:	f003 fcd0 	bl	8004820 <siprintf>
				HAL_UART_Transmit(&huart6,(uint8_t*)msg, 10, 100);
 8000e80:	4639      	mov	r1, r7
 8000e82:	2364      	movs	r3, #100	; 0x64
 8000e84:	220a      	movs	r2, #10
 8000e86:	4828      	ldr	r0, [pc, #160]	; (8000f28 <main+0x168>)
 8000e88:	f003 f90e 	bl	80040a8 <HAL_UART_Transmit>
			break;
 8000e8c:	e03a      	b.n	8000f04 <main+0x144>
			HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,RESET);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e94:	4821      	ldr	r0, [pc, #132]	; (8000f1c <main+0x15c>)
 8000e96:	f001 fc7f 	bl	8002798 <HAL_GPIO_WritePin>
			if (flag) {
 8000e9a:	4b24      	ldr	r3, [pc, #144]	; (8000f2c <main+0x16c>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d032      	beq.n	8000f08 <main+0x148>
				adc_med = convert();
 8000ea2:	f000 fad3 	bl	800144c <convert>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	737b      	strb	r3, [r7, #13]
				adc_sar = represent(adc_med);
 8000eaa:	7b7b      	ldrb	r3, [r7, #13]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f000 fb1f 	bl	80014f0 <represent>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <main+0x154>)
 8000eb8:	701a      	strb	r2, [r3, #0]
				HAL_ADC_Start(&hadc1);
 8000eba:	4819      	ldr	r0, [pc, #100]	; (8000f20 <main+0x160>)
 8000ebc:	f000 fe44 	bl	8001b48 <HAL_ADC_Start>
				if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK){
 8000ec0:	2164      	movs	r1, #100	; 0x64
 8000ec2:	4817      	ldr	r0, [pc, #92]	; (8000f20 <main+0x160>)
 8000ec4:	f000 fef4 	bl	8001cb0 <HAL_ADC_PollForConversion>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d110      	bne.n	8000ef0 <main+0x130>
					adc_real = HAL_ADC_GetValue(&hadc1);//adc del micro
 8000ece:	4814      	ldr	r0, [pc, #80]	; (8000f20 <main+0x160>)
 8000ed0:	f000 ff79 	bl	8001dc6 <HAL_ADC_GetValue>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	73bb      	strb	r3, [r7, #14]
					sprintf(msg,"%d %d\r\n",adc_real,adc_med);
 8000ed8:	7bba      	ldrb	r2, [r7, #14]
 8000eda:	7b7b      	ldrb	r3, [r7, #13]
 8000edc:	4638      	mov	r0, r7
 8000ede:	4911      	ldr	r1, [pc, #68]	; (8000f24 <main+0x164>)
 8000ee0:	f003 fc9e 	bl	8004820 <siprintf>
					HAL_UART_Transmit(&huart6,(uint8_t*)msg, 10, 100);
 8000ee4:	4639      	mov	r1, r7
 8000ee6:	2364      	movs	r3, #100	; 0x64
 8000ee8:	220a      	movs	r2, #10
 8000eea:	480f      	ldr	r0, [pc, #60]	; (8000f28 <main+0x168>)
 8000eec:	f003 f8dc 	bl	80040a8 <HAL_UART_Transmit>
				flag = false;
 8000ef0:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <main+0x16c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]
			break;
 8000ef6:	e007      	b.n	8000f08 <main+0x148>
			adc_sar = 99;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <main+0x154>)
 8000efa:	2263      	movs	r2, #99	; 0x63
 8000efc:	701a      	strb	r2, [r3, #0]
			break;
 8000efe:	e004      	b.n	8000f0a <main+0x14a>
			break;
 8000f00:	bf00      	nop
 8000f02:	e782      	b.n	8000e0a <main+0x4a>
			break;
 8000f04:	bf00      	nop
 8000f06:	e780      	b.n	8000e0a <main+0x4a>
			break;
 8000f08:	bf00      	nop
	 show_num(adc_sar);
 8000f0a:	e77e      	b.n	8000e0a <main+0x4a>
 8000f0c:	200000c0 	.word	0x200000c0
 8000f10:	20000108 	.word	0x20000108
 8000f14:	20000199 	.word	0x20000199
 8000f18:	40000800 	.word	0x40000800
 8000f1c:	40020800 	.word	0x40020800
 8000f20:	20000078 	.word	0x20000078
 8000f24:	08005180 	.word	0x08005180
 8000f28:	20000150 	.word	0x20000150
 8000f2c:	20000198 	.word	0x20000198

08000f30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b094      	sub	sp, #80	; 0x50
 8000f34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f36:	f107 0320 	add.w	r3, r7, #32
 8000f3a:	2230      	movs	r2, #48	; 0x30
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f003 fc8e 	bl	8004860 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f54:	2300      	movs	r3, #0
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	4b27      	ldr	r3, [pc, #156]	; (8000ff8 <SystemClock_Config+0xc8>)
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5c:	4a26      	ldr	r2, [pc, #152]	; (8000ff8 <SystemClock_Config+0xc8>)
 8000f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f62:	6413      	str	r3, [r2, #64]	; 0x40
 8000f64:	4b24      	ldr	r3, [pc, #144]	; (8000ff8 <SystemClock_Config+0xc8>)
 8000f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f70:	2300      	movs	r3, #0
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	4b21      	ldr	r3, [pc, #132]	; (8000ffc <SystemClock_Config+0xcc>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a20      	ldr	r2, [pc, #128]	; (8000ffc <SystemClock_Config+0xcc>)
 8000f7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f7e:	6013      	str	r3, [r2, #0]
 8000f80:	4b1e      	ldr	r3, [pc, #120]	; (8000ffc <SystemClock_Config+0xcc>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f96:	2302      	movs	r3, #2
 8000f98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000fa0:	230c      	movs	r3, #12
 8000fa2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000fa4:	2360      	movs	r3, #96	; 0x60
 8000fa6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fac:	2304      	movs	r3, #4
 8000fae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb0:	f107 0320 	add.w	r3, r7, #32
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f001 fc21 	bl	80027fc <HAL_RCC_OscConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fc0:	f000 fae6 	bl	8001590 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc4:	230f      	movs	r3, #15
 8000fc6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000fda:	f107 030c 	add.w	r3, r7, #12
 8000fde:	2103      	movs	r1, #3
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f001 fe83 	bl	8002cec <HAL_RCC_ClockConfig>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000fec:	f000 fad0 	bl	8001590 <Error_Handler>
  }
}
 8000ff0:	bf00      	nop
 8000ff2:	3750      	adds	r7, #80	; 0x50
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40007000 	.word	0x40007000

08001000 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001006:	463b      	mov	r3, r7
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001012:	4b22      	ldr	r3, [pc, #136]	; (800109c <MX_ADC1_Init+0x9c>)
 8001014:	4a22      	ldr	r2, [pc, #136]	; (80010a0 <MX_ADC1_Init+0xa0>)
 8001016:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001018:	4b20      	ldr	r3, [pc, #128]	; (800109c <MX_ADC1_Init+0x9c>)
 800101a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800101e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001020:	4b1e      	ldr	r3, [pc, #120]	; (800109c <MX_ADC1_Init+0x9c>)
 8001022:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001026:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001028:	4b1c      	ldr	r3, [pc, #112]	; (800109c <MX_ADC1_Init+0x9c>)
 800102a:	2200      	movs	r2, #0
 800102c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800102e:	4b1b      	ldr	r3, [pc, #108]	; (800109c <MX_ADC1_Init+0x9c>)
 8001030:	2200      	movs	r2, #0
 8001032:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001034:	4b19      	ldr	r3, [pc, #100]	; (800109c <MX_ADC1_Init+0x9c>)
 8001036:	2200      	movs	r2, #0
 8001038:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800103c:	4b17      	ldr	r3, [pc, #92]	; (800109c <MX_ADC1_Init+0x9c>)
 800103e:	2200      	movs	r2, #0
 8001040:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001042:	4b16      	ldr	r3, [pc, #88]	; (800109c <MX_ADC1_Init+0x9c>)
 8001044:	4a17      	ldr	r2, [pc, #92]	; (80010a4 <MX_ADC1_Init+0xa4>)
 8001046:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001048:	4b14      	ldr	r3, [pc, #80]	; (800109c <MX_ADC1_Init+0x9c>)
 800104a:	2200      	movs	r2, #0
 800104c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800104e:	4b13      	ldr	r3, [pc, #76]	; (800109c <MX_ADC1_Init+0x9c>)
 8001050:	2201      	movs	r2, #1
 8001052:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001054:	4b11      	ldr	r3, [pc, #68]	; (800109c <MX_ADC1_Init+0x9c>)
 8001056:	2200      	movs	r2, #0
 8001058:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <MX_ADC1_Init+0x9c>)
 800105e:	2201      	movs	r2, #1
 8001060:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001062:	480e      	ldr	r0, [pc, #56]	; (800109c <MX_ADC1_Init+0x9c>)
 8001064:	f000 fd2c 	bl	8001ac0 <HAL_ADC_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800106e:	f000 fa8f 	bl	8001590 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001072:	2300      	movs	r3, #0
 8001074:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001076:	2301      	movs	r3, #1
 8001078:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800107a:	2300      	movs	r3, #0
 800107c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800107e:	463b      	mov	r3, r7
 8001080:	4619      	mov	r1, r3
 8001082:	4806      	ldr	r0, [pc, #24]	; (800109c <MX_ADC1_Init+0x9c>)
 8001084:	f000 feac 	bl	8001de0 <HAL_ADC_ConfigChannel>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800108e:	f000 fa7f 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001092:	bf00      	nop
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000078 	.word	0x20000078
 80010a0:	40012000 	.word	0x40012000
 80010a4:	0f000001 	.word	0x0f000001

080010a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b096      	sub	sp, #88	; 0x58
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
 80010d2:	60da      	str	r2, [r3, #12]
 80010d4:	611a      	str	r2, [r3, #16]
 80010d6:	615a      	str	r2, [r3, #20]
 80010d8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	2220      	movs	r2, #32
 80010de:	2100      	movs	r1, #0
 80010e0:	4618      	mov	r0, r3
 80010e2:	f003 fbbd 	bl	8004860 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010e6:	4b3e      	ldr	r3, [pc, #248]	; (80011e0 <MX_TIM1_Init+0x138>)
 80010e8:	4a3e      	ldr	r2, [pc, #248]	; (80011e4 <MX_TIM1_Init+0x13c>)
 80010ea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 80010ec:	4b3c      	ldr	r3, [pc, #240]	; (80011e0 <MX_TIM1_Init+0x138>)
 80010ee:	2231      	movs	r2, #49	; 0x31
 80010f0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f2:	4b3b      	ldr	r3, [pc, #236]	; (80011e0 <MX_TIM1_Init+0x138>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 253-1;
 80010f8:	4b39      	ldr	r3, [pc, #228]	; (80011e0 <MX_TIM1_Init+0x138>)
 80010fa:	22fc      	movs	r2, #252	; 0xfc
 80010fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010fe:	4b38      	ldr	r3, [pc, #224]	; (80011e0 <MX_TIM1_Init+0x138>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001104:	4b36      	ldr	r3, [pc, #216]	; (80011e0 <MX_TIM1_Init+0x138>)
 8001106:	2200      	movs	r2, #0
 8001108:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800110a:	4b35      	ldr	r3, [pc, #212]	; (80011e0 <MX_TIM1_Init+0x138>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001110:	4833      	ldr	r0, [pc, #204]	; (80011e0 <MX_TIM1_Init+0x138>)
 8001112:	f001 ffcb 	bl	80030ac <HAL_TIM_Base_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800111c:	f000 fa38 	bl	8001590 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001120:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001124:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001126:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800112a:	4619      	mov	r1, r3
 800112c:	482c      	ldr	r0, [pc, #176]	; (80011e0 <MX_TIM1_Init+0x138>)
 800112e:	f002 fb0b 	bl	8003748 <HAL_TIM_ConfigClockSource>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001138:	f000 fa2a 	bl	8001590 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800113c:	4828      	ldr	r0, [pc, #160]	; (80011e0 <MX_TIM1_Init+0x138>)
 800113e:	f002 f804 	bl	800314a <HAL_TIM_PWM_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001148:	f000 fa22 	bl	8001590 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800114c:	2300      	movs	r3, #0
 800114e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001150:	2300      	movs	r3, #0
 8001152:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001154:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001158:	4619      	mov	r1, r3
 800115a:	4821      	ldr	r0, [pc, #132]	; (80011e0 <MX_TIM1_Init+0x138>)
 800115c:	f002 fe94 	bl	8003e88 <HAL_TIMEx_MasterConfigSynchronization>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001166:	f000 fa13 	bl	8001590 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800116a:	2360      	movs	r3, #96	; 0x60
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001172:	2300      	movs	r3, #0
 8001174:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001176:	2300      	movs	r3, #0
 8001178:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800117a:	2300      	movs	r3, #0
 800117c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800117e:	2300      	movs	r3, #0
 8001180:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001182:	2300      	movs	r3, #0
 8001184:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001186:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118a:	2200      	movs	r2, #0
 800118c:	4619      	mov	r1, r3
 800118e:	4814      	ldr	r0, [pc, #80]	; (80011e0 <MX_TIM1_Init+0x138>)
 8001190:	f002 fa18 	bl	80035c4 <HAL_TIM_PWM_ConfigChannel>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800119a:	f000 f9f9 	bl	8001590 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800119e:	2300      	movs	r3, #0
 80011a0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011a2:	2300      	movs	r3, #0
 80011a4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011ae:	2300      	movs	r3, #0
 80011b0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011b6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011b8:	2300      	movs	r3, #0
 80011ba:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	4619      	mov	r1, r3
 80011c0:	4807      	ldr	r0, [pc, #28]	; (80011e0 <MX_TIM1_Init+0x138>)
 80011c2:	f002 fecf 	bl	8003f64 <HAL_TIMEx_ConfigBreakDeadTime>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80011cc:	f000 f9e0 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011d0:	4803      	ldr	r0, [pc, #12]	; (80011e0 <MX_TIM1_Init+0x138>)
 80011d2:	f000 fab9 	bl	8001748 <HAL_TIM_MspPostInit>

}
 80011d6:	bf00      	nop
 80011d8:	3758      	adds	r7, #88	; 0x58
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200000c0 	.word	0x200000c0
 80011e4:	40010000 	.word	0x40010000

080011e8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08c      	sub	sp, #48	; 0x30
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011ee:	f107 030c 	add.w	r3, r7, #12
 80011f2:	2224      	movs	r2, #36	; 0x24
 80011f4:	2100      	movs	r1, #0
 80011f6:	4618      	mov	r0, r3
 80011f8:	f003 fb32 	bl	8004860 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001204:	4b20      	ldr	r3, [pc, #128]	; (8001288 <MX_TIM4_Init+0xa0>)
 8001206:	4a21      	ldr	r2, [pc, #132]	; (800128c <MX_TIM4_Init+0xa4>)
 8001208:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800120a:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <MX_TIM4_Init+0xa0>)
 800120c:	2200      	movs	r2, #0
 800120e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001210:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <MX_TIM4_Init+0xa0>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10;
 8001216:	4b1c      	ldr	r3, [pc, #112]	; (8001288 <MX_TIM4_Init+0xa0>)
 8001218:	220a      	movs	r2, #10
 800121a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121c:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <MX_TIM4_Init+0xa0>)
 800121e:	2200      	movs	r2, #0
 8001220:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001222:	4b19      	ldr	r3, [pc, #100]	; (8001288 <MX_TIM4_Init+0xa0>)
 8001224:	2280      	movs	r2, #128	; 0x80
 8001226:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001228:	2303      	movs	r3, #3
 800122a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800122c:	2300      	movs	r3, #0
 800122e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001230:	2301      	movs	r3, #1
 8001232:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001234:	2300      	movs	r3, #0
 8001236:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001238:	230a      	movs	r3, #10
 800123a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800123c:	2300      	movs	r3, #0
 800123e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001240:	2301      	movs	r3, #1
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001244:	2300      	movs	r3, #0
 8001246:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001248:	230a      	movs	r3, #10
 800124a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800124c:	f107 030c 	add.w	r3, r7, #12
 8001250:	4619      	mov	r1, r3
 8001252:	480d      	ldr	r0, [pc, #52]	; (8001288 <MX_TIM4_Init+0xa0>)
 8001254:	f002 f882 	bl	800335c <HAL_TIM_Encoder_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 800125e:	f000 f997 	bl	8001590 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001262:	2300      	movs	r3, #0
 8001264:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	4619      	mov	r1, r3
 800126e:	4806      	ldr	r0, [pc, #24]	; (8001288 <MX_TIM4_Init+0xa0>)
 8001270:	f002 fe0a 	bl	8003e88 <HAL_TIMEx_MasterConfigSynchronization>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800127a:	f000 f989 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	3730      	adds	r7, #48	; 0x30
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000108 	.word	0x20000108
 800128c:	40000800 	.word	0x40000800

08001290 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <MX_USART6_UART_Init+0x4c>)
 8001296:	4a12      	ldr	r2, [pc, #72]	; (80012e0 <MX_USART6_UART_Init+0x50>)
 8001298:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <MX_USART6_UART_Init+0x4c>)
 800129c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80012a0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <MX_USART6_UART_Init+0x4c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <MX_USART6_UART_Init+0x4c>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80012ae:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <MX_USART6_UART_Init+0x4c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX;
 80012b4:	4b09      	ldr	r3, [pc, #36]	; (80012dc <MX_USART6_UART_Init+0x4c>)
 80012b6:	2208      	movs	r2, #8
 80012b8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ba:	4b08      	ldr	r3, [pc, #32]	; (80012dc <MX_USART6_UART_Init+0x4c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <MX_USART6_UART_Init+0x4c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80012c6:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_USART6_UART_Init+0x4c>)
 80012c8:	f002 fe9e 	bl	8004008 <HAL_UART_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80012d2:	f000 f95d 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000150 	.word	0x20000150
 80012e0:	40011400 	.word	0x40011400

080012e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08a      	sub	sp, #40	; 0x28
 80012e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
 80012f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
 80012fe:	4b4f      	ldr	r3, [pc, #316]	; (800143c <MX_GPIO_Init+0x158>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a4e      	ldr	r2, [pc, #312]	; (800143c <MX_GPIO_Init+0x158>)
 8001304:	f043 0304 	orr.w	r3, r3, #4
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b4c      	ldr	r3, [pc, #304]	; (800143c <MX_GPIO_Init+0x158>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0304 	and.w	r3, r3, #4
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	4b48      	ldr	r3, [pc, #288]	; (800143c <MX_GPIO_Init+0x158>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a47      	ldr	r2, [pc, #284]	; (800143c <MX_GPIO_Init+0x158>)
 8001320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b45      	ldr	r3, [pc, #276]	; (800143c <MX_GPIO_Init+0x158>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	60bb      	str	r3, [r7, #8]
 8001336:	4b41      	ldr	r3, [pc, #260]	; (800143c <MX_GPIO_Init+0x158>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a40      	ldr	r2, [pc, #256]	; (800143c <MX_GPIO_Init+0x158>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b3e      	ldr	r3, [pc, #248]	; (800143c <MX_GPIO_Init+0x158>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	60bb      	str	r3, [r7, #8]
 800134c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	607b      	str	r3, [r7, #4]
 8001352:	4b3a      	ldr	r3, [pc, #232]	; (800143c <MX_GPIO_Init+0x158>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a39      	ldr	r2, [pc, #228]	; (800143c <MX_GPIO_Init+0x158>)
 8001358:	f043 0302 	orr.w	r3, r3, #2
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b37      	ldr	r3, [pc, #220]	; (800143c <MX_GPIO_Init+0x158>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001370:	4833      	ldr	r0, [pc, #204]	; (8001440 <MX_GPIO_Init+0x15c>)
 8001372:	f001 fa11 	bl	8002798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MUX2_Pin|SEG_G_Pin|SEG_E_Pin, GPIO_PIN_RESET);
 8001376:	2200      	movs	r2, #0
 8001378:	21a4      	movs	r1, #164	; 0xa4
 800137a:	4832      	ldr	r0, [pc, #200]	; (8001444 <MX_GPIO_Init+0x160>)
 800137c:	f001 fa0c 	bl	8002798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MUX0_Pin|MUX1_Pin|SEG_F_Pin, GPIO_PIN_SET);
 8001380:	2201      	movs	r2, #1
 8001382:	2158      	movs	r1, #88	; 0x58
 8001384:	482f      	ldr	r0, [pc, #188]	; (8001444 <MX_GPIO_Init+0x160>)
 8001386:	f001 fa07 	bl	8002798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_D_Pin|SEG_C_Pin|SEG_B_Pin|SEG_A_Pin, GPIO_PIN_RESET);
 800138a:	2200      	movs	r2, #0
 800138c:	f240 4107 	movw	r1, #1031	; 0x407
 8001390:	482d      	ldr	r0, [pc, #180]	; (8001448 <MX_GPIO_Init+0x164>)
 8001392:	f001 fa01 	bl	8002798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001396:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800139a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139c:	2301      	movs	r3, #1
 800139e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a4:	2300      	movs	r3, #0
 80013a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	4619      	mov	r1, r3
 80013ae:	4824      	ldr	r0, [pc, #144]	; (8001440 <MX_GPIO_Init+0x15c>)
 80013b0:	f001 f856 	bl	8002460 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUX2_Pin MUX0_Pin MUX1_Pin SEG_G_Pin
                           SEG_F_Pin SEG_E_Pin */
  GPIO_InitStruct.Pin = MUX2_Pin|MUX0_Pin|MUX1_Pin|SEG_G_Pin
 80013b4:	23fc      	movs	r3, #252	; 0xfc
 80013b6:	617b      	str	r3, [r7, #20]
                          |SEG_F_Pin|SEG_E_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b8:	2301      	movs	r3, #1
 80013ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c0:	2300      	movs	r3, #0
 80013c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	4619      	mov	r1, r3
 80013ca:	481e      	ldr	r0, [pc, #120]	; (8001444 <MX_GPIO_Init+0x160>)
 80013cc:	f001 f848 	bl	8002460 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_D_Pin SEG_C_Pin SEG_B_Pin SEG_A_Pin */
  GPIO_InitStruct.Pin = SEG_D_Pin|SEG_C_Pin|SEG_B_Pin|SEG_A_Pin;
 80013d0:	f240 4307 	movw	r3, #1031	; 0x407
 80013d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d6:	2301      	movs	r3, #1
 80013d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013de:	2300      	movs	r3, #0
 80013e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	4619      	mov	r1, r3
 80013e8:	4817      	ldr	r0, [pc, #92]	; (8001448 <MX_GPIO_Init+0x164>)
 80013ea:	f001 f839 	bl	8002460 <HAL_GPIO_Init>

  /*Configure GPIO pin : COMP_Pin */
  GPIO_InitStruct.Pin = COMP_Pin;
 80013ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f4:	2300      	movs	r3, #0
 80013f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013f8:	2302      	movs	r3, #2
 80013fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COMP_GPIO_Port, &GPIO_InitStruct);
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	4619      	mov	r1, r3
 8001402:	4810      	ldr	r0, [pc, #64]	; (8001444 <MX_GPIO_Init+0x160>)
 8001404:	f001 f82c 	bl	8002460 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
 8001408:	f44f 7380 	mov.w	r3, #256	; 0x100
 800140c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800140e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001412:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	4619      	mov	r1, r3
 800141e:	480a      	ldr	r0, [pc, #40]	; (8001448 <MX_GPIO_Init+0x164>)
 8001420:	f001 f81e 	bl	8002460 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001424:	2200      	movs	r2, #0
 8001426:	2100      	movs	r1, #0
 8001428:	2017      	movs	r0, #23
 800142a:	f000 ffe2 	bl	80023f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800142e:	2017      	movs	r0, #23
 8001430:	f000 fffb 	bl	800242a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001434:	bf00      	nop
 8001436:	3728      	adds	r7, #40	; 0x28
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40023800 	.word	0x40023800
 8001440:	40020800 	.word	0x40020800
 8001444:	40020000 	.word	0x40020000
 8001448:	40020400 	.word	0x40020400

0800144c <convert>:

/* USER CODE BEGIN 4 */
uint8_t convert(){
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0

	bool end_conv = false;
 8001452:	2300      	movs	r3, #0
 8001454:	73fb      	strb	r3, [r7, #15]
	uint8_t bit_mask[8] = {
 8001456:	4a23      	ldr	r2, [pc, #140]	; (80014e4 <convert+0x98>)
 8001458:	1d3b      	adds	r3, r7, #4
 800145a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800145e:	e883 0003 	stmia.w	r3, {r0, r1}
				};

	/*****************************
	 * Empezamos busqueda binaria
	 *****************************/
	uint8_t lec_adc = 0x00;    //limpiamos bits
 8001462:	2300      	movs	r3, #0
 8001464:	73bb      	strb	r3, [r7, #14]
	 __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,lec_adc);
 8001466:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <convert+0x9c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	7bba      	ldrb	r2, [r7, #14]
 800146c:	635a      	str	r2, [r3, #52]	; 0x34

	uint8_t bit_count = 7;    //iniciamos en el msb
 800146e:	2307      	movs	r3, #7
 8001470:	737b      	strb	r3, [r7, #13]

	do
	{
		lec_adc |= bit_mask[bit_count]; //Seteamos bit=1
 8001472:	7b7b      	ldrb	r3, [r7, #13]
 8001474:	3310      	adds	r3, #16
 8001476:	443b      	add	r3, r7
 8001478:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800147c:	7bbb      	ldrb	r3, [r7, #14]
 800147e:	4313      	orrs	r3, r2
 8001480:	73bb      	strb	r3, [r7, #14]
		 __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,lec_adc);
 8001482:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <convert+0x9c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	7bba      	ldrb	r2, [r7, #14]
 8001488:	635a      	str	r2, [r3, #52]	; 0x34

		HAL_Delay(2);
 800148a:	2002      	movs	r0, #2
 800148c:	f000 faf4 	bl	8001a78 <HAL_Delay>
		if (HAL_GPIO_ReadPin(COMP_GPIO_Port, COMP_Pin) == 1){//Es DAC>Vs?
 8001490:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001494:	4815      	ldr	r0, [pc, #84]	; (80014ec <convert+0xa0>)
 8001496:	f001 f967 	bl	8002768 <HAL_GPIO_ReadPin>
 800149a:	4603      	mov	r3, r0
 800149c:	2b01      	cmp	r3, #1
 800149e:	d10c      	bne.n	80014ba <convert+0x6e>

			lec_adc &= ~bit_mask[bit_count];//limpiamos bit = 0
 80014a0:	7b7b      	ldrb	r3, [r7, #13]
 80014a2:	3310      	adds	r3, #16
 80014a4:	443b      	add	r3, r7
 80014a6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80014aa:	b25b      	sxtb	r3, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	b25a      	sxtb	r2, r3
 80014b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80014b4:	4013      	ands	r3, r2
 80014b6:	b25b      	sxtb	r3, r3
 80014b8:	73bb      	strb	r3, [r7, #14]

		}

		//No
		if (bit_count == 0){ //Ya se recorrieron los 8bits?
 80014ba:	7b7b      	ldrb	r3, [r7, #13]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d102      	bne.n	80014c6 <convert+0x7a>

			end_conv = true;
 80014c0:	2301      	movs	r3, #1
 80014c2:	73fb      	strb	r3, [r7, #15]
 80014c4:	e002      	b.n	80014cc <convert+0x80>

		}else{

			//Segimos con el siguinete msb
			bit_count--;
 80014c6:	7b7b      	ldrb	r3, [r7, #13]
 80014c8:	3b01      	subs	r3, #1
 80014ca:	737b      	strb	r3, [r7, #13]
		}

	}while(!end_conv);
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
 80014ce:	f083 0301 	eor.w	r3, r3, #1
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1cc      	bne.n	8001472 <convert+0x26>

	return lec_adc;//regresamo el valor leido
 80014d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	08005188 	.word	0x08005188
 80014e8:	200000c0 	.word	0x200000c0
 80014ec:	40020000 	.word	0x40020000

080014f0 <represent>:

uint8_t represent(uint8_t num){
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]
	float volt = ((float)num) * (3.0/254.0); //voltaje leido
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	ee07 3a90 	vmov	s15, r3
 8001500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001504:	ee17 0a90 	vmov	r0, s15
 8001508:	f7ff f948 	bl	800079c <__aeabi_f2d>
 800150c:	a316      	add	r3, pc, #88	; (adr r3, 8001568 <represent+0x78>)
 800150e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001512:	f7fe feb5 	bl	8000280 <__aeabi_dmul>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4610      	mov	r0, r2
 800151c:	4619      	mov	r1, r3
 800151e:	f7ff f995 	bl	800084c <__aeabi_d2f>
 8001522:	4603      	mov	r3, r0
 8001524:	60fb      	str	r3, [r7, #12]
	volt = ((float)(int)(volt*10))/10; //ahora solo tiene un decimal
 8001526:	edd7 7a03 	vldr	s15, [r7, #12]
 800152a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800152e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001532:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001536:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800153a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800153e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001542:	edc7 7a03 	vstr	s15, [r7, #12]
	/*
	uint8_t base = (int)volt;
	uint8_t mantisa = (volt-base)*10;
	*/

	return (uint8_t)(volt*10);
 8001546:	edd7 7a03 	vldr	s15, [r7, #12]
 800154a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800154e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001552:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001556:	edc7 7a00 	vstr	s15, [r7]
 800155a:	783b      	ldrb	r3, [r7, #0]
 800155c:	b2db      	uxtb	r3, r3
}
 800155e:	4618      	mov	r0, r3
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	c183060c 	.word	0xc183060c
 800156c:	3f883060 	.word	0x3f883060

08001570 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	80fb      	strh	r3, [r7, #6]
	flag = true;
 800157a:	4b04      	ldr	r3, [pc, #16]	; (800158c <HAL_GPIO_EXTI_Callback+0x1c>)
 800157c:	2201      	movs	r2, #1
 800157e:	701a      	strb	r2, [r3, #0]
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	20000198 	.word	0x20000198

08001590 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001594:	b672      	cpsid	i
}
 8001596:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001598:	e7fe      	b.n	8001598 <Error_Handler+0x8>
	...

0800159c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <HAL_MspInit+0x4c>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015aa:	4a0f      	ldr	r2, [pc, #60]	; (80015e8 <HAL_MspInit+0x4c>)
 80015ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b0:	6453      	str	r3, [r2, #68]	; 0x44
 80015b2:	4b0d      	ldr	r3, [pc, #52]	; (80015e8 <HAL_MspInit+0x4c>)
 80015b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ba:	607b      	str	r3, [r7, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	603b      	str	r3, [r7, #0]
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <HAL_MspInit+0x4c>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	4a08      	ldr	r2, [pc, #32]	; (80015e8 <HAL_MspInit+0x4c>)
 80015c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015cc:	6413      	str	r3, [r2, #64]	; 0x40
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <HAL_MspInit+0x4c>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d6:	603b      	str	r3, [r7, #0]
 80015d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	40023800 	.word	0x40023800

080015ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08a      	sub	sp, #40	; 0x28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a17      	ldr	r2, [pc, #92]	; (8001668 <HAL_ADC_MspInit+0x7c>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d127      	bne.n	800165e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	613b      	str	r3, [r7, #16]
 8001612:	4b16      	ldr	r3, [pc, #88]	; (800166c <HAL_ADC_MspInit+0x80>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	4a15      	ldr	r2, [pc, #84]	; (800166c <HAL_ADC_MspInit+0x80>)
 8001618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800161c:	6453      	str	r3, [r2, #68]	; 0x44
 800161e:	4b13      	ldr	r3, [pc, #76]	; (800166c <HAL_ADC_MspInit+0x80>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	4b0f      	ldr	r3, [pc, #60]	; (800166c <HAL_ADC_MspInit+0x80>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	4a0e      	ldr	r2, [pc, #56]	; (800166c <HAL_ADC_MspInit+0x80>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6313      	str	r3, [r2, #48]	; 0x30
 800163a:	4b0c      	ldr	r3, [pc, #48]	; (800166c <HAL_ADC_MspInit+0x80>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001646:	2301      	movs	r3, #1
 8001648:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800164a:	2303      	movs	r3, #3
 800164c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	4619      	mov	r1, r3
 8001658:	4805      	ldr	r0, [pc, #20]	; (8001670 <HAL_ADC_MspInit+0x84>)
 800165a:	f000 ff01 	bl	8002460 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800165e:	bf00      	nop
 8001660:	3728      	adds	r7, #40	; 0x28
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40012000 	.word	0x40012000
 800166c:	40023800 	.word	0x40023800
 8001670:	40020000 	.word	0x40020000

08001674 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a0b      	ldr	r2, [pc, #44]	; (80016b0 <HAL_TIM_Base_MspInit+0x3c>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d10d      	bne.n	80016a2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <HAL_TIM_Base_MspInit+0x40>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168e:	4a09      	ldr	r2, [pc, #36]	; (80016b4 <HAL_TIM_Base_MspInit+0x40>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6453      	str	r3, [r2, #68]	; 0x44
 8001696:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <HAL_TIM_Base_MspInit+0x40>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80016a2:	bf00      	nop
 80016a4:	3714      	adds	r7, #20
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	40010000 	.word	0x40010000
 80016b4:	40023800 	.word	0x40023800

080016b8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08a      	sub	sp, #40	; 0x28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a19      	ldr	r2, [pc, #100]	; (800173c <HAL_TIM_Encoder_MspInit+0x84>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d12b      	bne.n	8001732 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
 80016de:	4b18      	ldr	r3, [pc, #96]	; (8001740 <HAL_TIM_Encoder_MspInit+0x88>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	4a17      	ldr	r2, [pc, #92]	; (8001740 <HAL_TIM_Encoder_MspInit+0x88>)
 80016e4:	f043 0304 	orr.w	r3, r3, #4
 80016e8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ea:	4b15      	ldr	r3, [pc, #84]	; (8001740 <HAL_TIM_Encoder_MspInit+0x88>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	f003 0304 	and.w	r3, r3, #4
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	4b11      	ldr	r3, [pc, #68]	; (8001740 <HAL_TIM_Encoder_MspInit+0x88>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a10      	ldr	r2, [pc, #64]	; (8001740 <HAL_TIM_Encoder_MspInit+0x88>)
 8001700:	f043 0302 	orr.w	r3, r3, #2
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <HAL_TIM_Encoder_MspInit+0x88>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001712:	23c0      	movs	r3, #192	; 0xc0
 8001714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001716:	2302      	movs	r3, #2
 8001718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171e:	2300      	movs	r3, #0
 8001720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001722:	2302      	movs	r3, #2
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	4619      	mov	r1, r3
 800172c:	4805      	ldr	r0, [pc, #20]	; (8001744 <HAL_TIM_Encoder_MspInit+0x8c>)
 800172e:	f000 fe97 	bl	8002460 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001732:	bf00      	nop
 8001734:	3728      	adds	r7, #40	; 0x28
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40000800 	.word	0x40000800
 8001740:	40023800 	.word	0x40023800
 8001744:	40020400 	.word	0x40020400

08001748 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b088      	sub	sp, #32
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001750:	f107 030c 	add.w	r3, r7, #12
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a12      	ldr	r2, [pc, #72]	; (80017b0 <HAL_TIM_MspPostInit+0x68>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d11e      	bne.n	80017a8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	60bb      	str	r3, [r7, #8]
 800176e:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <HAL_TIM_MspPostInit+0x6c>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	4a10      	ldr	r2, [pc, #64]	; (80017b4 <HAL_TIM_MspPostInit+0x6c>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	6313      	str	r3, [r2, #48]	; 0x30
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <HAL_TIM_MspPostInit+0x6c>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001786:	f44f 7380 	mov.w	r3, #256	; 0x100
 800178a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178c:	2302      	movs	r3, #2
 800178e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001794:	2300      	movs	r3, #0
 8001796:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001798:	2301      	movs	r3, #1
 800179a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179c:	f107 030c 	add.w	r3, r7, #12
 80017a0:	4619      	mov	r1, r3
 80017a2:	4805      	ldr	r0, [pc, #20]	; (80017b8 <HAL_TIM_MspPostInit+0x70>)
 80017a4:	f000 fe5c 	bl	8002460 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80017a8:	bf00      	nop
 80017aa:	3720      	adds	r7, #32
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40010000 	.word	0x40010000
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40020000 	.word	0x40020000

080017bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08a      	sub	sp, #40	; 0x28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a19      	ldr	r2, [pc, #100]	; (8001840 <HAL_UART_MspInit+0x84>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d12c      	bne.n	8001838 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	4b18      	ldr	r3, [pc, #96]	; (8001844 <HAL_UART_MspInit+0x88>)
 80017e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e6:	4a17      	ldr	r2, [pc, #92]	; (8001844 <HAL_UART_MspInit+0x88>)
 80017e8:	f043 0320 	orr.w	r3, r3, #32
 80017ec:	6453      	str	r3, [r2, #68]	; 0x44
 80017ee:	4b15      	ldr	r3, [pc, #84]	; (8001844 <HAL_UART_MspInit+0x88>)
 80017f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f2:	f003 0320 	and.w	r3, r3, #32
 80017f6:	613b      	str	r3, [r7, #16]
 80017f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	4b11      	ldr	r3, [pc, #68]	; (8001844 <HAL_UART_MspInit+0x88>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	4a10      	ldr	r2, [pc, #64]	; (8001844 <HAL_UART_MspInit+0x88>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <HAL_UART_MspInit+0x88>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001816:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800181a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181c:	2302      	movs	r3, #2
 800181e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001824:	2303      	movs	r3, #3
 8001826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001828:	2308      	movs	r3, #8
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	4619      	mov	r1, r3
 8001832:	4805      	ldr	r0, [pc, #20]	; (8001848 <HAL_UART_MspInit+0x8c>)
 8001834:	f000 fe14 	bl	8002460 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001838:	bf00      	nop
 800183a:	3728      	adds	r7, #40	; 0x28
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40011400 	.word	0x40011400
 8001844:	40023800 	.word	0x40023800
 8001848:	40020000 	.word	0x40020000

0800184c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001850:	e7fe      	b.n	8001850 <NMI_Handler+0x4>

08001852 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001856:	e7fe      	b.n	8001856 <HardFault_Handler+0x4>

08001858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800185c:	e7fe      	b.n	800185c <MemManage_Handler+0x4>

0800185e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001862:	e7fe      	b.n	8001862 <BusFault_Handler+0x4>

08001864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001868:	e7fe      	b.n	8001868 <UsageFault_Handler+0x4>

0800186a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001898:	f000 f8ce 	bl	8001a38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}

080018a0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_Pin);
 80018a4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80018a8:	f000 ff90 	bl	80027cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80018ac:	bf00      	nop
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b8:	4a14      	ldr	r2, [pc, #80]	; (800190c <_sbrk+0x5c>)
 80018ba:	4b15      	ldr	r3, [pc, #84]	; (8001910 <_sbrk+0x60>)
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c4:	4b13      	ldr	r3, [pc, #76]	; (8001914 <_sbrk+0x64>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d102      	bne.n	80018d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018cc:	4b11      	ldr	r3, [pc, #68]	; (8001914 <_sbrk+0x64>)
 80018ce:	4a12      	ldr	r2, [pc, #72]	; (8001918 <_sbrk+0x68>)
 80018d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018d2:	4b10      	ldr	r3, [pc, #64]	; (8001914 <_sbrk+0x64>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d207      	bcs.n	80018f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e0:	f002 ffc6 	bl	8004870 <__errno>
 80018e4:	4603      	mov	r3, r0
 80018e6:	220c      	movs	r2, #12
 80018e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ea:	f04f 33ff 	mov.w	r3, #4294967295
 80018ee:	e009      	b.n	8001904 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f0:	4b08      	ldr	r3, [pc, #32]	; (8001914 <_sbrk+0x64>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018f6:	4b07      	ldr	r3, [pc, #28]	; (8001914 <_sbrk+0x64>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	4a05      	ldr	r2, [pc, #20]	; (8001914 <_sbrk+0x64>)
 8001900:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001902:	68fb      	ldr	r3, [r7, #12]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3718      	adds	r7, #24
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20020000 	.word	0x20020000
 8001910:	00000400 	.word	0x00000400
 8001914:	2000019c 	.word	0x2000019c
 8001918:	200002f0 	.word	0x200002f0

0800191c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <SystemInit+0x20>)
 8001922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001926:	4a05      	ldr	r2, [pc, #20]	; (800193c <SystemInit+0x20>)
 8001928:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800192c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001940:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001978 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001944:	f7ff ffea 	bl	800191c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001948:	480c      	ldr	r0, [pc, #48]	; (800197c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800194a:	490d      	ldr	r1, [pc, #52]	; (8001980 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800194c:	4a0d      	ldr	r2, [pc, #52]	; (8001984 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800194e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001950:	e002      	b.n	8001958 <LoopCopyDataInit>

08001952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001956:	3304      	adds	r3, #4

08001958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800195a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800195c:	d3f9      	bcc.n	8001952 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800195e:	4a0a      	ldr	r2, [pc, #40]	; (8001988 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001960:	4c0a      	ldr	r4, [pc, #40]	; (800198c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001964:	e001      	b.n	800196a <LoopFillZerobss>

08001966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001968:	3204      	adds	r2, #4

0800196a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800196a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800196c:	d3fb      	bcc.n	8001966 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800196e:	f002 ff85 	bl	800487c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001972:	f7ff fa25 	bl	8000dc0 <main>
  bx  lr    
 8001976:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001978:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800197c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001980:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001984:	080051f8 	.word	0x080051f8
  ldr r2, =_sbss
 8001988:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800198c:	200002ec 	.word	0x200002ec

08001990 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001990:	e7fe      	b.n	8001990 <ADC_IRQHandler>
	...

08001994 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001998:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <HAL_Init+0x40>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a0d      	ldr	r2, [pc, #52]	; (80019d4 <HAL_Init+0x40>)
 800199e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019a4:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <HAL_Init+0x40>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a0a      	ldr	r2, [pc, #40]	; (80019d4 <HAL_Init+0x40>)
 80019aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019b0:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <HAL_Init+0x40>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a07      	ldr	r2, [pc, #28]	; (80019d4 <HAL_Init+0x40>)
 80019b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019bc:	2003      	movs	r0, #3
 80019be:	f000 fd0d 	bl	80023dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019c2:	200f      	movs	r0, #15
 80019c4:	f000 f808 	bl	80019d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019c8:	f7ff fde8 	bl	800159c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40023c00 	.word	0x40023c00

080019d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019e0:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <HAL_InitTick+0x54>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <HAL_InitTick+0x58>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	4619      	mov	r1, r3
 80019ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80019f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f6:	4618      	mov	r0, r3
 80019f8:	f000 fd25 	bl	8002446 <HAL_SYSTICK_Config>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e00e      	b.n	8001a24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b0f      	cmp	r3, #15
 8001a0a:	d80a      	bhi.n	8001a22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	f04f 30ff 	mov.w	r0, #4294967295
 8001a14:	f000 fced 	bl	80023f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a18:	4a06      	ldr	r2, [pc, #24]	; (8001a34 <HAL_InitTick+0x5c>)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	e000      	b.n	8001a24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000000 	.word	0x20000000
 8001a30:	20000008 	.word	0x20000008
 8001a34:	20000004 	.word	0x20000004

08001a38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <HAL_IncTick+0x20>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	461a      	mov	r2, r3
 8001a42:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <HAL_IncTick+0x24>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4413      	add	r3, r2
 8001a48:	4a04      	ldr	r2, [pc, #16]	; (8001a5c <HAL_IncTick+0x24>)
 8001a4a:	6013      	str	r3, [r2, #0]
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	20000008 	.word	0x20000008
 8001a5c:	200001a0 	.word	0x200001a0

08001a60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  return uwTick;
 8001a64:	4b03      	ldr	r3, [pc, #12]	; (8001a74 <HAL_GetTick+0x14>)
 8001a66:	681b      	ldr	r3, [r3, #0]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	200001a0 	.word	0x200001a0

08001a78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a80:	f7ff ffee 	bl	8001a60 <HAL_GetTick>
 8001a84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a90:	d005      	beq.n	8001a9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a92:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <HAL_Delay+0x44>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	461a      	mov	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a9e:	bf00      	nop
 8001aa0:	f7ff ffde 	bl	8001a60 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d8f7      	bhi.n	8001aa0 <HAL_Delay+0x28>
  {
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	bf00      	nop
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000008 	.word	0x20000008

08001ac0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e033      	b.n	8001b3e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d109      	bne.n	8001af2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7ff fd84 	bl	80015ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f003 0310 	and.w	r3, r3, #16
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d118      	bne.n	8001b30 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b06:	f023 0302 	bic.w	r3, r3, #2
 8001b0a:	f043 0202 	orr.w	r2, r3, #2
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 fa96 	bl	8002044 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	f023 0303 	bic.w	r3, r3, #3
 8001b26:	f043 0201 	orr.w	r2, r3, #1
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	641a      	str	r2, [r3, #64]	; 0x40
 8001b2e:	e001      	b.n	8001b34 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d101      	bne.n	8001b62 <HAL_ADC_Start+0x1a>
 8001b5e:	2302      	movs	r3, #2
 8001b60:	e097      	b.n	8001c92 <HAL_ADC_Start+0x14a>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d018      	beq.n	8001baa <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f042 0201 	orr.w	r2, r2, #1
 8001b86:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b88:	4b45      	ldr	r3, [pc, #276]	; (8001ca0 <HAL_ADC_Start+0x158>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a45      	ldr	r2, [pc, #276]	; (8001ca4 <HAL_ADC_Start+0x15c>)
 8001b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b92:	0c9a      	lsrs	r2, r3, #18
 8001b94:	4613      	mov	r3, r2
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	4413      	add	r3, r2
 8001b9a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001b9c:	e002      	b.n	8001ba4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f9      	bne.n	8001b9e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d15f      	bne.n	8001c78 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001bc0:	f023 0301 	bic.w	r3, r3, #1
 8001bc4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d007      	beq.n	8001bea <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001be2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bf6:	d106      	bne.n	8001c06 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfc:	f023 0206 	bic.w	r2, r3, #6
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	645a      	str	r2, [r3, #68]	; 0x44
 8001c04:	e002      	b.n	8001c0c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c14:	4b24      	ldr	r3, [pc, #144]	; (8001ca8 <HAL_ADC_Start+0x160>)
 8001c16:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c20:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 031f 	and.w	r3, r3, #31
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d10f      	bne.n	8001c4e <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d129      	bne.n	8001c90 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	689a      	ldr	r2, [r3, #8]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	e020      	b.n	8001c90 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a16      	ldr	r2, [pc, #88]	; (8001cac <HAL_ADC_Start+0x164>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d11b      	bne.n	8001c90 <HAL_ADC_Start+0x148>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d114      	bne.n	8001c90 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c74:	609a      	str	r2, [r3, #8]
 8001c76:	e00b      	b.n	8001c90 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7c:	f043 0210 	orr.w	r2, r3, #16
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c88:	f043 0201 	orr.w	r2, r3, #1
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	20000000 	.word	0x20000000
 8001ca4:	431bde83 	.word	0x431bde83
 8001ca8:	40012300 	.word	0x40012300
 8001cac:	40012000 	.word	0x40012000

08001cb0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ccc:	d113      	bne.n	8001cf6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001cd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cdc:	d10b      	bne.n	8001cf6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	f043 0220 	orr.w	r2, r3, #32
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e063      	b.n	8001dbe <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cf6:	f7ff feb3 	bl	8001a60 <HAL_GetTick>
 8001cfa:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001cfc:	e021      	b.n	8001d42 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d04:	d01d      	beq.n	8001d42 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d007      	beq.n	8001d1c <HAL_ADC_PollForConversion+0x6c>
 8001d0c:	f7ff fea8 	bl	8001a60 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	683a      	ldr	r2, [r7, #0]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d212      	bcs.n	8001d42 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d00b      	beq.n	8001d42 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	f043 0204 	orr.w	r2, r3, #4
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e03d      	b.n	8001dbe <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d1d6      	bne.n	8001cfe <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f06f 0212 	mvn.w	r2, #18
 8001d58:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d123      	bne.n	8001dbc <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d11f      	bne.n	8001dbc <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d82:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d006      	beq.n	8001d98 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d111      	bne.n	8001dbc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d105      	bne.n	8001dbc <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db4:	f043 0201 	orr.w	r2, r3, #1
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d101      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x1c>
 8001df8:	2302      	movs	r3, #2
 8001dfa:	e113      	b.n	8002024 <HAL_ADC_ConfigChannel+0x244>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2b09      	cmp	r3, #9
 8001e0a:	d925      	bls.n	8001e58 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68d9      	ldr	r1, [r3, #12]
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	4413      	add	r3, r2
 8001e20:	3b1e      	subs	r3, #30
 8001e22:	2207      	movs	r2, #7
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	43da      	mvns	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	400a      	ands	r2, r1
 8001e30:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68d9      	ldr	r1, [r3, #12]
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	4618      	mov	r0, r3
 8001e44:	4603      	mov	r3, r0
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	4403      	add	r3, r0
 8001e4a:	3b1e      	subs	r3, #30
 8001e4c:	409a      	lsls	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	430a      	orrs	r2, r1
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	e022      	b.n	8001e9e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6919      	ldr	r1, [r3, #16]
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	461a      	mov	r2, r3
 8001e66:	4613      	mov	r3, r2
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	4413      	add	r3, r2
 8001e6c:	2207      	movs	r2, #7
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43da      	mvns	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	400a      	ands	r2, r1
 8001e7a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6919      	ldr	r1, [r3, #16]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	689a      	ldr	r2, [r3, #8]
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	4603      	mov	r3, r0
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	4403      	add	r3, r0
 8001e94:	409a      	lsls	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	2b06      	cmp	r3, #6
 8001ea4:	d824      	bhi.n	8001ef0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	3b05      	subs	r3, #5
 8001eb8:	221f      	movs	r2, #31
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43da      	mvns	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	400a      	ands	r2, r1
 8001ec6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	4613      	mov	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	3b05      	subs	r3, #5
 8001ee2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	430a      	orrs	r2, r1
 8001eec:	635a      	str	r2, [r3, #52]	; 0x34
 8001eee:	e04c      	b.n	8001f8a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b0c      	cmp	r3, #12
 8001ef6:	d824      	bhi.n	8001f42 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	4613      	mov	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	3b23      	subs	r3, #35	; 0x23
 8001f0a:	221f      	movs	r2, #31
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43da      	mvns	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	400a      	ands	r2, r1
 8001f18:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	4618      	mov	r0, r3
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4413      	add	r3, r2
 8001f32:	3b23      	subs	r3, #35	; 0x23
 8001f34:	fa00 f203 	lsl.w	r2, r0, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	631a      	str	r2, [r3, #48]	; 0x30
 8001f40:	e023      	b.n	8001f8a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	3b41      	subs	r3, #65	; 0x41
 8001f54:	221f      	movs	r2, #31
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43da      	mvns	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	400a      	ands	r2, r1
 8001f62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	4618      	mov	r0, r3
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	4613      	mov	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	3b41      	subs	r3, #65	; 0x41
 8001f7e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f8a:	4b29      	ldr	r3, [pc, #164]	; (8002030 <HAL_ADC_ConfigChannel+0x250>)
 8001f8c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a28      	ldr	r2, [pc, #160]	; (8002034 <HAL_ADC_ConfigChannel+0x254>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d10f      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x1d8>
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b12      	cmp	r3, #18
 8001f9e:	d10b      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a1d      	ldr	r2, [pc, #116]	; (8002034 <HAL_ADC_ConfigChannel+0x254>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d12b      	bne.n	800201a <HAL_ADC_ConfigChannel+0x23a>
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a1c      	ldr	r2, [pc, #112]	; (8002038 <HAL_ADC_ConfigChannel+0x258>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d003      	beq.n	8001fd4 <HAL_ADC_ConfigChannel+0x1f4>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b11      	cmp	r3, #17
 8001fd2:	d122      	bne.n	800201a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a11      	ldr	r2, [pc, #68]	; (8002038 <HAL_ADC_ConfigChannel+0x258>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d111      	bne.n	800201a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ff6:	4b11      	ldr	r3, [pc, #68]	; (800203c <HAL_ADC_ConfigChannel+0x25c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a11      	ldr	r2, [pc, #68]	; (8002040 <HAL_ADC_ConfigChannel+0x260>)
 8001ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8002000:	0c9a      	lsrs	r2, r3, #18
 8002002:	4613      	mov	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4413      	add	r3, r2
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800200c:	e002      	b.n	8002014 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	3b01      	subs	r3, #1
 8002012:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f9      	bne.n	800200e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	40012300 	.word	0x40012300
 8002034:	40012000 	.word	0x40012000
 8002038:	10000012 	.word	0x10000012
 800203c:	20000000 	.word	0x20000000
 8002040:	431bde83 	.word	0x431bde83

08002044 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800204c:	4b79      	ldr	r3, [pc, #484]	; (8002234 <ADC_Init+0x1f0>)
 800204e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	685a      	ldr	r2, [r3, #4]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	431a      	orrs	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002078:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6859      	ldr	r1, [r3, #4]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	021a      	lsls	r2, r3, #8
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800209c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6859      	ldr	r1, [r3, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689a      	ldr	r2, [r3, #8]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6899      	ldr	r1, [r3, #8]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68da      	ldr	r2, [r3, #12]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d6:	4a58      	ldr	r2, [pc, #352]	; (8002238 <ADC_Init+0x1f4>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d022      	beq.n	8002122 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689a      	ldr	r2, [r3, #8]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6899      	ldr	r1, [r3, #8]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800210c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6899      	ldr	r1, [r3, #8]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	430a      	orrs	r2, r1
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	e00f      	b.n	8002142 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002130:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002140:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 0202 	bic.w	r2, r2, #2
 8002150:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	6899      	ldr	r1, [r3, #8]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	7e1b      	ldrb	r3, [r3, #24]
 800215c:	005a      	lsls	r2, r3, #1
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	430a      	orrs	r2, r1
 8002164:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 3020 	ldrb.w	r3, [r3, #32]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d01b      	beq.n	80021a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800217e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800218e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6859      	ldr	r1, [r3, #4]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219a:	3b01      	subs	r3, #1
 800219c:	035a      	lsls	r2, r3, #13
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	430a      	orrs	r2, r1
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	e007      	b.n	80021b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021b6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80021c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	051a      	lsls	r2, r3, #20
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	430a      	orrs	r2, r1
 80021dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6899      	ldr	r1, [r3, #8]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021fa:	025a      	lsls	r2, r3, #9
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	430a      	orrs	r2, r1
 8002202:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689a      	ldr	r2, [r3, #8]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002212:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6899      	ldr	r1, [r3, #8]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	029a      	lsls	r2, r3, #10
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	609a      	str	r2, [r3, #8]
}
 8002228:	bf00      	nop
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	40012300 	.word	0x40012300
 8002238:	0f000001 	.word	0x0f000001

0800223c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800224c:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <__NVIC_SetPriorityGrouping+0x44>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002258:	4013      	ands	r3, r2
 800225a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002264:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800226c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800226e:	4a04      	ldr	r2, [pc, #16]	; (8002280 <__NVIC_SetPriorityGrouping+0x44>)
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	60d3      	str	r3, [r2, #12]
}
 8002274:	bf00      	nop
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	e000ed00 	.word	0xe000ed00

08002284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002288:	4b04      	ldr	r3, [pc, #16]	; (800229c <__NVIC_GetPriorityGrouping+0x18>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	0a1b      	lsrs	r3, r3, #8
 800228e:	f003 0307 	and.w	r3, r3, #7
}
 8002292:	4618      	mov	r0, r3
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	e000ed00 	.word	0xe000ed00

080022a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	db0b      	blt.n	80022ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	f003 021f 	and.w	r2, r3, #31
 80022b8:	4907      	ldr	r1, [pc, #28]	; (80022d8 <__NVIC_EnableIRQ+0x38>)
 80022ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022be:	095b      	lsrs	r3, r3, #5
 80022c0:	2001      	movs	r0, #1
 80022c2:	fa00 f202 	lsl.w	r2, r0, r2
 80022c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	e000e100 	.word	0xe000e100

080022dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	6039      	str	r1, [r7, #0]
 80022e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	db0a      	blt.n	8002306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	490c      	ldr	r1, [pc, #48]	; (8002328 <__NVIC_SetPriority+0x4c>)
 80022f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fa:	0112      	lsls	r2, r2, #4
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	440b      	add	r3, r1
 8002300:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002304:	e00a      	b.n	800231c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	b2da      	uxtb	r2, r3
 800230a:	4908      	ldr	r1, [pc, #32]	; (800232c <__NVIC_SetPriority+0x50>)
 800230c:	79fb      	ldrb	r3, [r7, #7]
 800230e:	f003 030f 	and.w	r3, r3, #15
 8002312:	3b04      	subs	r3, #4
 8002314:	0112      	lsls	r2, r2, #4
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	440b      	add	r3, r1
 800231a:	761a      	strb	r2, [r3, #24]
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	e000e100 	.word	0xe000e100
 800232c:	e000ed00 	.word	0xe000ed00

08002330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002330:	b480      	push	{r7}
 8002332:	b089      	sub	sp, #36	; 0x24
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f1c3 0307 	rsb	r3, r3, #7
 800234a:	2b04      	cmp	r3, #4
 800234c:	bf28      	it	cs
 800234e:	2304      	movcs	r3, #4
 8002350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	3304      	adds	r3, #4
 8002356:	2b06      	cmp	r3, #6
 8002358:	d902      	bls.n	8002360 <NVIC_EncodePriority+0x30>
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	3b03      	subs	r3, #3
 800235e:	e000      	b.n	8002362 <NVIC_EncodePriority+0x32>
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002364:	f04f 32ff 	mov.w	r2, #4294967295
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43da      	mvns	r2, r3
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	401a      	ands	r2, r3
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002378:	f04f 31ff 	mov.w	r1, #4294967295
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	fa01 f303 	lsl.w	r3, r1, r3
 8002382:	43d9      	mvns	r1, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002388:	4313      	orrs	r3, r2
         );
}
 800238a:	4618      	mov	r0, r3
 800238c:	3724      	adds	r7, #36	; 0x24
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
	...

08002398 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023a8:	d301      	bcc.n	80023ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023aa:	2301      	movs	r3, #1
 80023ac:	e00f      	b.n	80023ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ae:	4a0a      	ldr	r2, [pc, #40]	; (80023d8 <SysTick_Config+0x40>)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023b6:	210f      	movs	r1, #15
 80023b8:	f04f 30ff 	mov.w	r0, #4294967295
 80023bc:	f7ff ff8e 	bl	80022dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023c0:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <SysTick_Config+0x40>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023c6:	4b04      	ldr	r3, [pc, #16]	; (80023d8 <SysTick_Config+0x40>)
 80023c8:	2207      	movs	r2, #7
 80023ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	e000e010 	.word	0xe000e010

080023dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f7ff ff29 	bl	800223c <__NVIC_SetPriorityGrouping>
}
 80023ea:	bf00      	nop
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b086      	sub	sp, #24
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	4603      	mov	r3, r0
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	607a      	str	r2, [r7, #4]
 80023fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002404:	f7ff ff3e 	bl	8002284 <__NVIC_GetPriorityGrouping>
 8002408:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	68b9      	ldr	r1, [r7, #8]
 800240e:	6978      	ldr	r0, [r7, #20]
 8002410:	f7ff ff8e 	bl	8002330 <NVIC_EncodePriority>
 8002414:	4602      	mov	r2, r0
 8002416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800241a:	4611      	mov	r1, r2
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff ff5d 	bl	80022dc <__NVIC_SetPriority>
}
 8002422:	bf00      	nop
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	4603      	mov	r3, r0
 8002432:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff ff31 	bl	80022a0 <__NVIC_EnableIRQ>
}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b082      	sub	sp, #8
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7ff ffa2 	bl	8002398 <SysTick_Config>
 8002454:	4603      	mov	r3, r0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
	...

08002460 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002460:	b480      	push	{r7}
 8002462:	b089      	sub	sp, #36	; 0x24
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800246e:	2300      	movs	r3, #0
 8002470:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002472:	2300      	movs	r3, #0
 8002474:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002476:	2300      	movs	r3, #0
 8002478:	61fb      	str	r3, [r7, #28]
 800247a:	e159      	b.n	8002730 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800247c:	2201      	movs	r2, #1
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	4013      	ands	r3, r2
 800248e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	429a      	cmp	r2, r3
 8002496:	f040 8148 	bne.w	800272a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f003 0303 	and.w	r3, r3, #3
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d005      	beq.n	80024b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d130      	bne.n	8002514 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	2203      	movs	r2, #3
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	43db      	mvns	r3, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4013      	ands	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	68da      	ldr	r2, [r3, #12]
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4313      	orrs	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024e8:	2201      	movs	r2, #1
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	091b      	lsrs	r3, r3, #4
 80024fe:	f003 0201 	and.w	r2, r3, #1
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4313      	orrs	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 0303 	and.w	r3, r3, #3
 800251c:	2b03      	cmp	r3, #3
 800251e:	d017      	beq.n	8002550 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	2203      	movs	r2, #3
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	43db      	mvns	r3, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4013      	ands	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f003 0303 	and.w	r3, r3, #3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d123      	bne.n	80025a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	08da      	lsrs	r2, r3, #3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3208      	adds	r2, #8
 8002564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002568:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	220f      	movs	r2, #15
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	43db      	mvns	r3, r3
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4013      	ands	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	691a      	ldr	r2, [r3, #16]
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4313      	orrs	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	08da      	lsrs	r2, r3, #3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	3208      	adds	r2, #8
 800259e:	69b9      	ldr	r1, [r7, #24]
 80025a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	2203      	movs	r2, #3
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43db      	mvns	r3, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4013      	ands	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 0203 	and.w	r2, r3, #3
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f000 80a2 	beq.w	800272a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	4b57      	ldr	r3, [pc, #348]	; (8002748 <HAL_GPIO_Init+0x2e8>)
 80025ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ee:	4a56      	ldr	r2, [pc, #344]	; (8002748 <HAL_GPIO_Init+0x2e8>)
 80025f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025f4:	6453      	str	r3, [r2, #68]	; 0x44
 80025f6:	4b54      	ldr	r3, [pc, #336]	; (8002748 <HAL_GPIO_Init+0x2e8>)
 80025f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002602:	4a52      	ldr	r2, [pc, #328]	; (800274c <HAL_GPIO_Init+0x2ec>)
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	089b      	lsrs	r3, r3, #2
 8002608:	3302      	adds	r3, #2
 800260a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800260e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	220f      	movs	r2, #15
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	43db      	mvns	r3, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4013      	ands	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a49      	ldr	r2, [pc, #292]	; (8002750 <HAL_GPIO_Init+0x2f0>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d019      	beq.n	8002662 <HAL_GPIO_Init+0x202>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a48      	ldr	r2, [pc, #288]	; (8002754 <HAL_GPIO_Init+0x2f4>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d013      	beq.n	800265e <HAL_GPIO_Init+0x1fe>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a47      	ldr	r2, [pc, #284]	; (8002758 <HAL_GPIO_Init+0x2f8>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d00d      	beq.n	800265a <HAL_GPIO_Init+0x1fa>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a46      	ldr	r2, [pc, #280]	; (800275c <HAL_GPIO_Init+0x2fc>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d007      	beq.n	8002656 <HAL_GPIO_Init+0x1f6>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a45      	ldr	r2, [pc, #276]	; (8002760 <HAL_GPIO_Init+0x300>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d101      	bne.n	8002652 <HAL_GPIO_Init+0x1f2>
 800264e:	2304      	movs	r3, #4
 8002650:	e008      	b.n	8002664 <HAL_GPIO_Init+0x204>
 8002652:	2307      	movs	r3, #7
 8002654:	e006      	b.n	8002664 <HAL_GPIO_Init+0x204>
 8002656:	2303      	movs	r3, #3
 8002658:	e004      	b.n	8002664 <HAL_GPIO_Init+0x204>
 800265a:	2302      	movs	r3, #2
 800265c:	e002      	b.n	8002664 <HAL_GPIO_Init+0x204>
 800265e:	2301      	movs	r3, #1
 8002660:	e000      	b.n	8002664 <HAL_GPIO_Init+0x204>
 8002662:	2300      	movs	r3, #0
 8002664:	69fa      	ldr	r2, [r7, #28]
 8002666:	f002 0203 	and.w	r2, r2, #3
 800266a:	0092      	lsls	r2, r2, #2
 800266c:	4093      	lsls	r3, r2
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4313      	orrs	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002674:	4935      	ldr	r1, [pc, #212]	; (800274c <HAL_GPIO_Init+0x2ec>)
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	089b      	lsrs	r3, r3, #2
 800267a:	3302      	adds	r3, #2
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002682:	4b38      	ldr	r3, [pc, #224]	; (8002764 <HAL_GPIO_Init+0x304>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	43db      	mvns	r3, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4013      	ands	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026a6:	4a2f      	ldr	r2, [pc, #188]	; (8002764 <HAL_GPIO_Init+0x304>)
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026ac:	4b2d      	ldr	r3, [pc, #180]	; (8002764 <HAL_GPIO_Init+0x304>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	43db      	mvns	r3, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4013      	ands	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026d0:	4a24      	ldr	r2, [pc, #144]	; (8002764 <HAL_GPIO_Init+0x304>)
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026d6:	4b23      	ldr	r3, [pc, #140]	; (8002764 <HAL_GPIO_Init+0x304>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	43db      	mvns	r3, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4013      	ands	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026fa:	4a1a      	ldr	r2, [pc, #104]	; (8002764 <HAL_GPIO_Init+0x304>)
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002700:	4b18      	ldr	r3, [pc, #96]	; (8002764 <HAL_GPIO_Init+0x304>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	43db      	mvns	r3, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4013      	ands	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	4313      	orrs	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002724:	4a0f      	ldr	r2, [pc, #60]	; (8002764 <HAL_GPIO_Init+0x304>)
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	3301      	adds	r3, #1
 800272e:	61fb      	str	r3, [r7, #28]
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	2b0f      	cmp	r3, #15
 8002734:	f67f aea2 	bls.w	800247c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002738:	bf00      	nop
 800273a:	bf00      	nop
 800273c:	3724      	adds	r7, #36	; 0x24
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	40023800 	.word	0x40023800
 800274c:	40013800 	.word	0x40013800
 8002750:	40020000 	.word	0x40020000
 8002754:	40020400 	.word	0x40020400
 8002758:	40020800 	.word	0x40020800
 800275c:	40020c00 	.word	0x40020c00
 8002760:	40021000 	.word	0x40021000
 8002764:	40013c00 	.word	0x40013c00

08002768 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	460b      	mov	r3, r1
 8002772:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	691a      	ldr	r2, [r3, #16]
 8002778:	887b      	ldrh	r3, [r7, #2]
 800277a:	4013      	ands	r3, r2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d002      	beq.n	8002786 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002780:	2301      	movs	r3, #1
 8002782:	73fb      	strb	r3, [r7, #15]
 8002784:	e001      	b.n	800278a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002786:	2300      	movs	r3, #0
 8002788:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800278a:	7bfb      	ldrb	r3, [r7, #15]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	460b      	mov	r3, r1
 80027a2:	807b      	strh	r3, [r7, #2]
 80027a4:	4613      	mov	r3, r2
 80027a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027a8:	787b      	ldrb	r3, [r7, #1]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027ae:	887a      	ldrh	r2, [r7, #2]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027b4:	e003      	b.n	80027be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027b6:	887b      	ldrh	r3, [r7, #2]
 80027b8:	041a      	lsls	r2, r3, #16
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	619a      	str	r2, [r3, #24]
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
	...

080027cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80027d6:	4b08      	ldr	r3, [pc, #32]	; (80027f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027d8:	695a      	ldr	r2, [r3, #20]
 80027da:	88fb      	ldrh	r3, [r7, #6]
 80027dc:	4013      	ands	r3, r2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d006      	beq.n	80027f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027e2:	4a05      	ldr	r2, [pc, #20]	; (80027f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027e4:	88fb      	ldrh	r3, [r7, #6]
 80027e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027e8:	88fb      	ldrh	r3, [r7, #6]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7fe fec0 	bl	8001570 <HAL_GPIO_EXTI_Callback>
  }
}
 80027f0:	bf00      	nop
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40013c00 	.word	0x40013c00

080027fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e267      	b.n	8002cde <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b00      	cmp	r3, #0
 8002818:	d075      	beq.n	8002906 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800281a:	4b88      	ldr	r3, [pc, #544]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 030c 	and.w	r3, r3, #12
 8002822:	2b04      	cmp	r3, #4
 8002824:	d00c      	beq.n	8002840 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002826:	4b85      	ldr	r3, [pc, #532]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800282e:	2b08      	cmp	r3, #8
 8002830:	d112      	bne.n	8002858 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002832:	4b82      	ldr	r3, [pc, #520]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800283a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800283e:	d10b      	bne.n	8002858 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002840:	4b7e      	ldr	r3, [pc, #504]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d05b      	beq.n	8002904 <HAL_RCC_OscConfig+0x108>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d157      	bne.n	8002904 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e242      	b.n	8002cde <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002860:	d106      	bne.n	8002870 <HAL_RCC_OscConfig+0x74>
 8002862:	4b76      	ldr	r3, [pc, #472]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a75      	ldr	r2, [pc, #468]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 8002868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	e01d      	b.n	80028ac <HAL_RCC_OscConfig+0xb0>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002878:	d10c      	bne.n	8002894 <HAL_RCC_OscConfig+0x98>
 800287a:	4b70      	ldr	r3, [pc, #448]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a6f      	ldr	r2, [pc, #444]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 8002880:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	4b6d      	ldr	r3, [pc, #436]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a6c      	ldr	r2, [pc, #432]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 800288c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	e00b      	b.n	80028ac <HAL_RCC_OscConfig+0xb0>
 8002894:	4b69      	ldr	r3, [pc, #420]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a68      	ldr	r2, [pc, #416]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 800289a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800289e:	6013      	str	r3, [r2, #0]
 80028a0:	4b66      	ldr	r3, [pc, #408]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a65      	ldr	r2, [pc, #404]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 80028a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d013      	beq.n	80028dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b4:	f7ff f8d4 	bl	8001a60 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028bc:	f7ff f8d0 	bl	8001a60 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b64      	cmp	r3, #100	; 0x64
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e207      	b.n	8002cde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ce:	4b5b      	ldr	r3, [pc, #364]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0f0      	beq.n	80028bc <HAL_RCC_OscConfig+0xc0>
 80028da:	e014      	b.n	8002906 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028dc:	f7ff f8c0 	bl	8001a60 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028e4:	f7ff f8bc 	bl	8001a60 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b64      	cmp	r3, #100	; 0x64
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e1f3      	b.n	8002cde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028f6:	4b51      	ldr	r3, [pc, #324]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1f0      	bne.n	80028e4 <HAL_RCC_OscConfig+0xe8>
 8002902:	e000      	b.n	8002906 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002904:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d063      	beq.n	80029da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002912:	4b4a      	ldr	r3, [pc, #296]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 030c 	and.w	r3, r3, #12
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00b      	beq.n	8002936 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800291e:	4b47      	ldr	r3, [pc, #284]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002926:	2b08      	cmp	r3, #8
 8002928:	d11c      	bne.n	8002964 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800292a:	4b44      	ldr	r3, [pc, #272]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d116      	bne.n	8002964 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002936:	4b41      	ldr	r3, [pc, #260]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d005      	beq.n	800294e <HAL_RCC_OscConfig+0x152>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d001      	beq.n	800294e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e1c7      	b.n	8002cde <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800294e:	4b3b      	ldr	r3, [pc, #236]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	4937      	ldr	r1, [pc, #220]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 800295e:	4313      	orrs	r3, r2
 8002960:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002962:	e03a      	b.n	80029da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d020      	beq.n	80029ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800296c:	4b34      	ldr	r3, [pc, #208]	; (8002a40 <HAL_RCC_OscConfig+0x244>)
 800296e:	2201      	movs	r2, #1
 8002970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002972:	f7ff f875 	bl	8001a60 <HAL_GetTick>
 8002976:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002978:	e008      	b.n	800298c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800297a:	f7ff f871 	bl	8001a60 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e1a8      	b.n	8002cde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800298c:	4b2b      	ldr	r3, [pc, #172]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d0f0      	beq.n	800297a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002998:	4b28      	ldr	r3, [pc, #160]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	4925      	ldr	r1, [pc, #148]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	600b      	str	r3, [r1, #0]
 80029ac:	e015      	b.n	80029da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ae:	4b24      	ldr	r3, [pc, #144]	; (8002a40 <HAL_RCC_OscConfig+0x244>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b4:	f7ff f854 	bl	8001a60 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029bc:	f7ff f850 	bl	8001a60 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e187      	b.n	8002cde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ce:	4b1b      	ldr	r3, [pc, #108]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1f0      	bne.n	80029bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d036      	beq.n	8002a54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d016      	beq.n	8002a1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ee:	4b15      	ldr	r3, [pc, #84]	; (8002a44 <HAL_RCC_OscConfig+0x248>)
 80029f0:	2201      	movs	r2, #1
 80029f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f4:	f7ff f834 	bl	8001a60 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029fc:	f7ff f830 	bl	8001a60 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e167      	b.n	8002cde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a0e:	4b0b      	ldr	r3, [pc, #44]	; (8002a3c <HAL_RCC_OscConfig+0x240>)
 8002a10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0f0      	beq.n	80029fc <HAL_RCC_OscConfig+0x200>
 8002a1a:	e01b      	b.n	8002a54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a1c:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <HAL_RCC_OscConfig+0x248>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a22:	f7ff f81d 	bl	8001a60 <HAL_GetTick>
 8002a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a28:	e00e      	b.n	8002a48 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a2a:	f7ff f819 	bl	8001a60 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d907      	bls.n	8002a48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e150      	b.n	8002cde <HAL_RCC_OscConfig+0x4e2>
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	42470000 	.word	0x42470000
 8002a44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a48:	4b88      	ldr	r3, [pc, #544]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002a4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1ea      	bne.n	8002a2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f000 8097 	beq.w	8002b90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a62:	2300      	movs	r3, #0
 8002a64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a66:	4b81      	ldr	r3, [pc, #516]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10f      	bne.n	8002a92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a72:	2300      	movs	r3, #0
 8002a74:	60bb      	str	r3, [r7, #8]
 8002a76:	4b7d      	ldr	r3, [pc, #500]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	4a7c      	ldr	r2, [pc, #496]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a80:	6413      	str	r3, [r2, #64]	; 0x40
 8002a82:	4b7a      	ldr	r3, [pc, #488]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8a:	60bb      	str	r3, [r7, #8]
 8002a8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a92:	4b77      	ldr	r3, [pc, #476]	; (8002c70 <HAL_RCC_OscConfig+0x474>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d118      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a9e:	4b74      	ldr	r3, [pc, #464]	; (8002c70 <HAL_RCC_OscConfig+0x474>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a73      	ldr	r2, [pc, #460]	; (8002c70 <HAL_RCC_OscConfig+0x474>)
 8002aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aaa:	f7fe ffd9 	bl	8001a60 <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab0:	e008      	b.n	8002ac4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab2:	f7fe ffd5 	bl	8001a60 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e10c      	b.n	8002cde <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac4:	4b6a      	ldr	r3, [pc, #424]	; (8002c70 <HAL_RCC_OscConfig+0x474>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0f0      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d106      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x2ea>
 8002ad8:	4b64      	ldr	r3, [pc, #400]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002adc:	4a63      	ldr	r2, [pc, #396]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002ade:	f043 0301 	orr.w	r3, r3, #1
 8002ae2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae4:	e01c      	b.n	8002b20 <HAL_RCC_OscConfig+0x324>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	2b05      	cmp	r3, #5
 8002aec:	d10c      	bne.n	8002b08 <HAL_RCC_OscConfig+0x30c>
 8002aee:	4b5f      	ldr	r3, [pc, #380]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af2:	4a5e      	ldr	r2, [pc, #376]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002af4:	f043 0304 	orr.w	r3, r3, #4
 8002af8:	6713      	str	r3, [r2, #112]	; 0x70
 8002afa:	4b5c      	ldr	r3, [pc, #368]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afe:	4a5b      	ldr	r2, [pc, #364]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002b00:	f043 0301 	orr.w	r3, r3, #1
 8002b04:	6713      	str	r3, [r2, #112]	; 0x70
 8002b06:	e00b      	b.n	8002b20 <HAL_RCC_OscConfig+0x324>
 8002b08:	4b58      	ldr	r3, [pc, #352]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0c:	4a57      	ldr	r2, [pc, #348]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002b0e:	f023 0301 	bic.w	r3, r3, #1
 8002b12:	6713      	str	r3, [r2, #112]	; 0x70
 8002b14:	4b55      	ldr	r3, [pc, #340]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b18:	4a54      	ldr	r2, [pc, #336]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002b1a:	f023 0304 	bic.w	r3, r3, #4
 8002b1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d015      	beq.n	8002b54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b28:	f7fe ff9a 	bl	8001a60 <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b2e:	e00a      	b.n	8002b46 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b30:	f7fe ff96 	bl	8001a60 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e0cb      	b.n	8002cde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b46:	4b49      	ldr	r3, [pc, #292]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0ee      	beq.n	8002b30 <HAL_RCC_OscConfig+0x334>
 8002b52:	e014      	b.n	8002b7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b54:	f7fe ff84 	bl	8001a60 <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b5a:	e00a      	b.n	8002b72 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b5c:	f7fe ff80 	bl	8001a60 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e0b5      	b.n	8002cde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b72:	4b3e      	ldr	r3, [pc, #248]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1ee      	bne.n	8002b5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b7e:	7dfb      	ldrb	r3, [r7, #23]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d105      	bne.n	8002b90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b84:	4b39      	ldr	r3, [pc, #228]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b88:	4a38      	ldr	r2, [pc, #224]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002b8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b8e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 80a1 	beq.w	8002cdc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b9a:	4b34      	ldr	r3, [pc, #208]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f003 030c 	and.w	r3, r3, #12
 8002ba2:	2b08      	cmp	r3, #8
 8002ba4:	d05c      	beq.n	8002c60 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d141      	bne.n	8002c32 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bae:	4b31      	ldr	r3, [pc, #196]	; (8002c74 <HAL_RCC_OscConfig+0x478>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb4:	f7fe ff54 	bl	8001a60 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bbc:	f7fe ff50 	bl	8001a60 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e087      	b.n	8002cde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bce:	4b27      	ldr	r3, [pc, #156]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f0      	bne.n	8002bbc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	69da      	ldr	r2, [r3, #28]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a1b      	ldr	r3, [r3, #32]
 8002be2:	431a      	orrs	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	019b      	lsls	r3, r3, #6
 8002bea:	431a      	orrs	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf0:	085b      	lsrs	r3, r3, #1
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	041b      	lsls	r3, r3, #16
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfc:	061b      	lsls	r3, r3, #24
 8002bfe:	491b      	ldr	r1, [pc, #108]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c04:	4b1b      	ldr	r3, [pc, #108]	; (8002c74 <HAL_RCC_OscConfig+0x478>)
 8002c06:	2201      	movs	r2, #1
 8002c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0a:	f7fe ff29 	bl	8001a60 <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c12:	f7fe ff25 	bl	8001a60 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e05c      	b.n	8002cde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c24:	4b11      	ldr	r3, [pc, #68]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0f0      	beq.n	8002c12 <HAL_RCC_OscConfig+0x416>
 8002c30:	e054      	b.n	8002cdc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c32:	4b10      	ldr	r3, [pc, #64]	; (8002c74 <HAL_RCC_OscConfig+0x478>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c38:	f7fe ff12 	bl	8001a60 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c40:	f7fe ff0e 	bl	8001a60 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e045      	b.n	8002cde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c52:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <HAL_RCC_OscConfig+0x470>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1f0      	bne.n	8002c40 <HAL_RCC_OscConfig+0x444>
 8002c5e:	e03d      	b.n	8002cdc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d107      	bne.n	8002c78 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e038      	b.n	8002cde <HAL_RCC_OscConfig+0x4e2>
 8002c6c:	40023800 	.word	0x40023800
 8002c70:	40007000 	.word	0x40007000
 8002c74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c78:	4b1b      	ldr	r3, [pc, #108]	; (8002ce8 <HAL_RCC_OscConfig+0x4ec>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d028      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d121      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d11a      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ca8:	4013      	ands	r3, r2
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d111      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbe:	085b      	lsrs	r3, r3, #1
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d107      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d001      	beq.n	8002cdc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e000      	b.n	8002cde <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3718      	adds	r7, #24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40023800 	.word	0x40023800

08002cec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d101      	bne.n	8002d00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e0cc      	b.n	8002e9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d00:	4b68      	ldr	r3, [pc, #416]	; (8002ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d90c      	bls.n	8002d28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d0e:	4b65      	ldr	r3, [pc, #404]	; (8002ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d16:	4b63      	ldr	r3, [pc, #396]	; (8002ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d001      	beq.n	8002d28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e0b8      	b.n	8002e9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d020      	beq.n	8002d76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d005      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d40:	4b59      	ldr	r3, [pc, #356]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	4a58      	ldr	r2, [pc, #352]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0308 	and.w	r3, r3, #8
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d005      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d58:	4b53      	ldr	r3, [pc, #332]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	4a52      	ldr	r2, [pc, #328]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d64:	4b50      	ldr	r3, [pc, #320]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	494d      	ldr	r1, [pc, #308]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d044      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d107      	bne.n	8002d9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d8a:	4b47      	ldr	r3, [pc, #284]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d119      	bne.n	8002dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e07f      	b.n	8002e9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d003      	beq.n	8002daa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002da6:	2b03      	cmp	r3, #3
 8002da8:	d107      	bne.n	8002dba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002daa:	4b3f      	ldr	r3, [pc, #252]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d109      	bne.n	8002dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e06f      	b.n	8002e9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dba:	4b3b      	ldr	r3, [pc, #236]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e067      	b.n	8002e9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dca:	4b37      	ldr	r3, [pc, #220]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f023 0203 	bic.w	r2, r3, #3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	4934      	ldr	r1, [pc, #208]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ddc:	f7fe fe40 	bl	8001a60 <HAL_GetTick>
 8002de0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de2:	e00a      	b.n	8002dfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002de4:	f7fe fe3c 	bl	8001a60 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e04f      	b.n	8002e9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfa:	4b2b      	ldr	r3, [pc, #172]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 020c 	and.w	r2, r3, #12
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d1eb      	bne.n	8002de4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e0c:	4b25      	ldr	r3, [pc, #148]	; (8002ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d20c      	bcs.n	8002e34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e1a:	4b22      	ldr	r3, [pc, #136]	; (8002ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e22:	4b20      	ldr	r3, [pc, #128]	; (8002ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d001      	beq.n	8002e34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e032      	b.n	8002e9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0304 	and.w	r3, r3, #4
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d008      	beq.n	8002e52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e40:	4b19      	ldr	r3, [pc, #100]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	4916      	ldr	r1, [pc, #88]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0308 	and.w	r3, r3, #8
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d009      	beq.n	8002e72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e5e:	4b12      	ldr	r3, [pc, #72]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	490e      	ldr	r1, [pc, #56]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e72:	f000 f821 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 8002e76:	4602      	mov	r2, r0
 8002e78:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	091b      	lsrs	r3, r3, #4
 8002e7e:	f003 030f 	and.w	r3, r3, #15
 8002e82:	490a      	ldr	r1, [pc, #40]	; (8002eac <HAL_RCC_ClockConfig+0x1c0>)
 8002e84:	5ccb      	ldrb	r3, [r1, r3]
 8002e86:	fa22 f303 	lsr.w	r3, r2, r3
 8002e8a:	4a09      	ldr	r2, [pc, #36]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e8e:	4b09      	ldr	r3, [pc, #36]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7fe fda0 	bl	80019d8 <HAL_InitTick>

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40023c00 	.word	0x40023c00
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	0800519c 	.word	0x0800519c
 8002eb0:	20000000 	.word	0x20000000
 8002eb4:	20000004 	.word	0x20000004

08002eb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ebc:	b090      	sub	sp, #64	; 0x40
 8002ebe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ec8:	2300      	movs	r3, #0
 8002eca:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ed0:	4b59      	ldr	r3, [pc, #356]	; (8003038 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 030c 	and.w	r3, r3, #12
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	d00d      	beq.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x40>
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	f200 80a1 	bhi.w	8003024 <HAL_RCC_GetSysClockFreq+0x16c>
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d002      	beq.n	8002eec <HAL_RCC_GetSysClockFreq+0x34>
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d003      	beq.n	8002ef2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002eea:	e09b      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002eec:	4b53      	ldr	r3, [pc, #332]	; (800303c <HAL_RCC_GetSysClockFreq+0x184>)
 8002eee:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002ef0:	e09b      	b.n	800302a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ef2:	4b53      	ldr	r3, [pc, #332]	; (8003040 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ef4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ef6:	e098      	b.n	800302a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ef8:	4b4f      	ldr	r3, [pc, #316]	; (8003038 <HAL_RCC_GetSysClockFreq+0x180>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f00:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f02:	4b4d      	ldr	r3, [pc, #308]	; (8003038 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d028      	beq.n	8002f60 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f0e:	4b4a      	ldr	r3, [pc, #296]	; (8003038 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	099b      	lsrs	r3, r3, #6
 8002f14:	2200      	movs	r2, #0
 8002f16:	623b      	str	r3, [r7, #32]
 8002f18:	627a      	str	r2, [r7, #36]	; 0x24
 8002f1a:	6a3b      	ldr	r3, [r7, #32]
 8002f1c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002f20:	2100      	movs	r1, #0
 8002f22:	4b47      	ldr	r3, [pc, #284]	; (8003040 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f24:	fb03 f201 	mul.w	r2, r3, r1
 8002f28:	2300      	movs	r3, #0
 8002f2a:	fb00 f303 	mul.w	r3, r0, r3
 8002f2e:	4413      	add	r3, r2
 8002f30:	4a43      	ldr	r2, [pc, #268]	; (8003040 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f32:	fba0 1202 	umull	r1, r2, r0, r2
 8002f36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f38:	460a      	mov	r2, r1
 8002f3a:	62ba      	str	r2, [r7, #40]	; 0x28
 8002f3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f3e:	4413      	add	r3, r2
 8002f40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f44:	2200      	movs	r2, #0
 8002f46:	61bb      	str	r3, [r7, #24]
 8002f48:	61fa      	str	r2, [r7, #28]
 8002f4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f4e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002f52:	f7fd fccb 	bl	80008ec <__aeabi_uldivmod>
 8002f56:	4602      	mov	r2, r0
 8002f58:	460b      	mov	r3, r1
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f5e:	e053      	b.n	8003008 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f60:	4b35      	ldr	r3, [pc, #212]	; (8003038 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	099b      	lsrs	r3, r3, #6
 8002f66:	2200      	movs	r2, #0
 8002f68:	613b      	str	r3, [r7, #16]
 8002f6a:	617a      	str	r2, [r7, #20]
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002f72:	f04f 0b00 	mov.w	fp, #0
 8002f76:	4652      	mov	r2, sl
 8002f78:	465b      	mov	r3, fp
 8002f7a:	f04f 0000 	mov.w	r0, #0
 8002f7e:	f04f 0100 	mov.w	r1, #0
 8002f82:	0159      	lsls	r1, r3, #5
 8002f84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f88:	0150      	lsls	r0, r2, #5
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	ebb2 080a 	subs.w	r8, r2, sl
 8002f92:	eb63 090b 	sbc.w	r9, r3, fp
 8002f96:	f04f 0200 	mov.w	r2, #0
 8002f9a:	f04f 0300 	mov.w	r3, #0
 8002f9e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002fa2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002fa6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002faa:	ebb2 0408 	subs.w	r4, r2, r8
 8002fae:	eb63 0509 	sbc.w	r5, r3, r9
 8002fb2:	f04f 0200 	mov.w	r2, #0
 8002fb6:	f04f 0300 	mov.w	r3, #0
 8002fba:	00eb      	lsls	r3, r5, #3
 8002fbc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fc0:	00e2      	lsls	r2, r4, #3
 8002fc2:	4614      	mov	r4, r2
 8002fc4:	461d      	mov	r5, r3
 8002fc6:	eb14 030a 	adds.w	r3, r4, sl
 8002fca:	603b      	str	r3, [r7, #0]
 8002fcc:	eb45 030b 	adc.w	r3, r5, fp
 8002fd0:	607b      	str	r3, [r7, #4]
 8002fd2:	f04f 0200 	mov.w	r2, #0
 8002fd6:	f04f 0300 	mov.w	r3, #0
 8002fda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fde:	4629      	mov	r1, r5
 8002fe0:	028b      	lsls	r3, r1, #10
 8002fe2:	4621      	mov	r1, r4
 8002fe4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fe8:	4621      	mov	r1, r4
 8002fea:	028a      	lsls	r2, r1, #10
 8002fec:	4610      	mov	r0, r2
 8002fee:	4619      	mov	r1, r3
 8002ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	60bb      	str	r3, [r7, #8]
 8002ff6:	60fa      	str	r2, [r7, #12]
 8002ff8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ffc:	f7fd fc76 	bl	80008ec <__aeabi_uldivmod>
 8003000:	4602      	mov	r2, r0
 8003002:	460b      	mov	r3, r1
 8003004:	4613      	mov	r3, r2
 8003006:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003008:	4b0b      	ldr	r3, [pc, #44]	; (8003038 <HAL_RCC_GetSysClockFreq+0x180>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	0c1b      	lsrs	r3, r3, #16
 800300e:	f003 0303 	and.w	r3, r3, #3
 8003012:	3301      	adds	r3, #1
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003018:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800301a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003020:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003022:	e002      	b.n	800302a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003024:	4b05      	ldr	r3, [pc, #20]	; (800303c <HAL_RCC_GetSysClockFreq+0x184>)
 8003026:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003028:	bf00      	nop
    }
  }
  return sysclockfreq;
 800302a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800302c:	4618      	mov	r0, r3
 800302e:	3740      	adds	r7, #64	; 0x40
 8003030:	46bd      	mov	sp, r7
 8003032:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003036:	bf00      	nop
 8003038:	40023800 	.word	0x40023800
 800303c:	00f42400 	.word	0x00f42400
 8003040:	017d7840 	.word	0x017d7840

08003044 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003048:	4b03      	ldr	r3, [pc, #12]	; (8003058 <HAL_RCC_GetHCLKFreq+0x14>)
 800304a:	681b      	ldr	r3, [r3, #0]
}
 800304c:	4618      	mov	r0, r3
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	20000000 	.word	0x20000000

0800305c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003060:	f7ff fff0 	bl	8003044 <HAL_RCC_GetHCLKFreq>
 8003064:	4602      	mov	r2, r0
 8003066:	4b05      	ldr	r3, [pc, #20]	; (800307c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	0a9b      	lsrs	r3, r3, #10
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	4903      	ldr	r1, [pc, #12]	; (8003080 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003072:	5ccb      	ldrb	r3, [r1, r3]
 8003074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003078:	4618      	mov	r0, r3
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40023800 	.word	0x40023800
 8003080:	080051ac 	.word	0x080051ac

08003084 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003088:	f7ff ffdc 	bl	8003044 <HAL_RCC_GetHCLKFreq>
 800308c:	4602      	mov	r2, r0
 800308e:	4b05      	ldr	r3, [pc, #20]	; (80030a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	0b5b      	lsrs	r3, r3, #13
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	4903      	ldr	r1, [pc, #12]	; (80030a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800309a:	5ccb      	ldrb	r3, [r1, r3]
 800309c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40023800 	.word	0x40023800
 80030a8:	080051ac 	.word	0x080051ac

080030ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e041      	b.n	8003142 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d106      	bne.n	80030d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7fe face 	bl	8001674 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2202      	movs	r2, #2
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3304      	adds	r3, #4
 80030e8:	4619      	mov	r1, r3
 80030ea:	4610      	mov	r0, r2
 80030ec:	f000 fbf4 	bl	80038d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b082      	sub	sp, #8
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e041      	b.n	80031e0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	d106      	bne.n	8003176 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 f839 	bl	80031e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2202      	movs	r2, #2
 800317a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	3304      	adds	r3, #4
 8003186:	4619      	mov	r1, r3
 8003188:	4610      	mov	r0, r2
 800318a:	f000 fba5 	bl	80038d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d109      	bne.n	8003220 <HAL_TIM_PWM_Start+0x24>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b01      	cmp	r3, #1
 8003216:	bf14      	ite	ne
 8003218:	2301      	movne	r3, #1
 800321a:	2300      	moveq	r3, #0
 800321c:	b2db      	uxtb	r3, r3
 800321e:	e022      	b.n	8003266 <HAL_TIM_PWM_Start+0x6a>
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	2b04      	cmp	r3, #4
 8003224:	d109      	bne.n	800323a <HAL_TIM_PWM_Start+0x3e>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b01      	cmp	r3, #1
 8003230:	bf14      	ite	ne
 8003232:	2301      	movne	r3, #1
 8003234:	2300      	moveq	r3, #0
 8003236:	b2db      	uxtb	r3, r3
 8003238:	e015      	b.n	8003266 <HAL_TIM_PWM_Start+0x6a>
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	2b08      	cmp	r3, #8
 800323e:	d109      	bne.n	8003254 <HAL_TIM_PWM_Start+0x58>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b01      	cmp	r3, #1
 800324a:	bf14      	ite	ne
 800324c:	2301      	movne	r3, #1
 800324e:	2300      	moveq	r3, #0
 8003250:	b2db      	uxtb	r3, r3
 8003252:	e008      	b.n	8003266 <HAL_TIM_PWM_Start+0x6a>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b01      	cmp	r3, #1
 800325e:	bf14      	ite	ne
 8003260:	2301      	movne	r3, #1
 8003262:	2300      	moveq	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e068      	b.n	8003340 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d104      	bne.n	800327e <HAL_TIM_PWM_Start+0x82>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2202      	movs	r2, #2
 8003278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800327c:	e013      	b.n	80032a6 <HAL_TIM_PWM_Start+0xaa>
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	2b04      	cmp	r3, #4
 8003282:	d104      	bne.n	800328e <HAL_TIM_PWM_Start+0x92>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2202      	movs	r2, #2
 8003288:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800328c:	e00b      	b.n	80032a6 <HAL_TIM_PWM_Start+0xaa>
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	2b08      	cmp	r3, #8
 8003292:	d104      	bne.n	800329e <HAL_TIM_PWM_Start+0xa2>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2202      	movs	r2, #2
 8003298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800329c:	e003      	b.n	80032a6 <HAL_TIM_PWM_Start+0xaa>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2202      	movs	r2, #2
 80032a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2201      	movs	r2, #1
 80032ac:	6839      	ldr	r1, [r7, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 fdc4 	bl	8003e3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a23      	ldr	r2, [pc, #140]	; (8003348 <HAL_TIM_PWM_Start+0x14c>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d107      	bne.n	80032ce <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a1d      	ldr	r2, [pc, #116]	; (8003348 <HAL_TIM_PWM_Start+0x14c>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d018      	beq.n	800330a <HAL_TIM_PWM_Start+0x10e>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e0:	d013      	beq.n	800330a <HAL_TIM_PWM_Start+0x10e>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a19      	ldr	r2, [pc, #100]	; (800334c <HAL_TIM_PWM_Start+0x150>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d00e      	beq.n	800330a <HAL_TIM_PWM_Start+0x10e>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a17      	ldr	r2, [pc, #92]	; (8003350 <HAL_TIM_PWM_Start+0x154>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d009      	beq.n	800330a <HAL_TIM_PWM_Start+0x10e>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a16      	ldr	r2, [pc, #88]	; (8003354 <HAL_TIM_PWM_Start+0x158>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d004      	beq.n	800330a <HAL_TIM_PWM_Start+0x10e>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a14      	ldr	r2, [pc, #80]	; (8003358 <HAL_TIM_PWM_Start+0x15c>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d111      	bne.n	800332e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f003 0307 	and.w	r3, r3, #7
 8003314:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2b06      	cmp	r3, #6
 800331a:	d010      	beq.n	800333e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 0201 	orr.w	r2, r2, #1
 800332a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800332c:	e007      	b.n	800333e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f042 0201 	orr.w	r2, r2, #1
 800333c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40010000 	.word	0x40010000
 800334c:	40000400 	.word	0x40000400
 8003350:	40000800 	.word	0x40000800
 8003354:	40000c00 	.word	0x40000c00
 8003358:	40014000 	.word	0x40014000

0800335c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e097      	b.n	80034a0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b00      	cmp	r3, #0
 800337a:	d106      	bne.n	800338a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f7fe f997 	bl	80016b8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2202      	movs	r2, #2
 800338e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6812      	ldr	r2, [r2, #0]
 800339c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033a0:	f023 0307 	bic.w	r3, r3, #7
 80033a4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	3304      	adds	r3, #4
 80033ae:	4619      	mov	r1, r3
 80033b0:	4610      	mov	r0, r2
 80033b2:	f000 fa91 	bl	80038d8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033de:	f023 0303 	bic.w	r3, r3, #3
 80033e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	689a      	ldr	r2, [r3, #8]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	021b      	lsls	r3, r3, #8
 80033ee:	4313      	orrs	r3, r2
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80033fc:	f023 030c 	bic.w	r3, r3, #12
 8003400:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003408:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800340c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	021b      	lsls	r3, r3, #8
 8003418:	4313      	orrs	r3, r2
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	4313      	orrs	r3, r2
 800341e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	011a      	lsls	r2, r3, #4
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	031b      	lsls	r3, r3, #12
 800342c:	4313      	orrs	r3, r2
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	4313      	orrs	r3, r2
 8003432:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800343a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003442:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685a      	ldr	r2, [r3, #4]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	695b      	ldr	r3, [r3, #20]
 800344c:	011b      	lsls	r3, r3, #4
 800344e:	4313      	orrs	r3, r2
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	4313      	orrs	r3, r2
 8003454:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3718      	adds	r7, #24
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034b8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80034c0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80034c8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80034d0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d110      	bne.n	80034fa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80034d8:	7bfb      	ldrb	r3, [r7, #15]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d102      	bne.n	80034e4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80034de:	7b7b      	ldrb	r3, [r7, #13]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d001      	beq.n	80034e8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e069      	b.n	80035bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2202      	movs	r2, #2
 80034ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2202      	movs	r2, #2
 80034f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034f8:	e031      	b.n	800355e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	2b04      	cmp	r3, #4
 80034fe:	d110      	bne.n	8003522 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003500:	7bbb      	ldrb	r3, [r7, #14]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d102      	bne.n	800350c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003506:	7b3b      	ldrb	r3, [r7, #12]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d001      	beq.n	8003510 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e055      	b.n	80035bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2202      	movs	r2, #2
 8003514:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003520:	e01d      	b.n	800355e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003522:	7bfb      	ldrb	r3, [r7, #15]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d108      	bne.n	800353a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003528:	7bbb      	ldrb	r3, [r7, #14]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d105      	bne.n	800353a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800352e:	7b7b      	ldrb	r3, [r7, #13]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d102      	bne.n	800353a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003534:	7b3b      	ldrb	r3, [r7, #12]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d001      	beq.n	800353e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e03e      	b.n	80035bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2202      	movs	r2, #2
 8003542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2202      	movs	r2, #2
 800354a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2202      	movs	r2, #2
 8003552:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2202      	movs	r2, #2
 800355a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d003      	beq.n	800356c <HAL_TIM_Encoder_Start+0xc4>
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	2b04      	cmp	r3, #4
 8003568:	d008      	beq.n	800357c <HAL_TIM_Encoder_Start+0xd4>
 800356a:	e00f      	b.n	800358c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2201      	movs	r2, #1
 8003572:	2100      	movs	r1, #0
 8003574:	4618      	mov	r0, r3
 8003576:	f000 fc61 	bl	8003e3c <TIM_CCxChannelCmd>
      break;
 800357a:	e016      	b.n	80035aa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2201      	movs	r2, #1
 8003582:	2104      	movs	r1, #4
 8003584:	4618      	mov	r0, r3
 8003586:	f000 fc59 	bl	8003e3c <TIM_CCxChannelCmd>
      break;
 800358a:	e00e      	b.n	80035aa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2201      	movs	r2, #1
 8003592:	2100      	movs	r1, #0
 8003594:	4618      	mov	r0, r3
 8003596:	f000 fc51 	bl	8003e3c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2201      	movs	r2, #1
 80035a0:	2104      	movs	r1, #4
 80035a2:	4618      	mov	r0, r3
 80035a4:	f000 fc4a 	bl	8003e3c <TIM_CCxChannelCmd>
      break;
 80035a8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f042 0201 	orr.w	r2, r2, #1
 80035b8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035d0:	2300      	movs	r3, #0
 80035d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d101      	bne.n	80035e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80035de:	2302      	movs	r3, #2
 80035e0:	e0ae      	b.n	8003740 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b0c      	cmp	r3, #12
 80035ee:	f200 809f 	bhi.w	8003730 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80035f2:	a201      	add	r2, pc, #4	; (adr r2, 80035f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80035f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f8:	0800362d 	.word	0x0800362d
 80035fc:	08003731 	.word	0x08003731
 8003600:	08003731 	.word	0x08003731
 8003604:	08003731 	.word	0x08003731
 8003608:	0800366d 	.word	0x0800366d
 800360c:	08003731 	.word	0x08003731
 8003610:	08003731 	.word	0x08003731
 8003614:	08003731 	.word	0x08003731
 8003618:	080036af 	.word	0x080036af
 800361c:	08003731 	.word	0x08003731
 8003620:	08003731 	.word	0x08003731
 8003624:	08003731 	.word	0x08003731
 8003628:	080036ef 	.word	0x080036ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68b9      	ldr	r1, [r7, #8]
 8003632:	4618      	mov	r0, r3
 8003634:	f000 f9dc 	bl	80039f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	699a      	ldr	r2, [r3, #24]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0208 	orr.w	r2, r2, #8
 8003646:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	699a      	ldr	r2, [r3, #24]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 0204 	bic.w	r2, r2, #4
 8003656:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6999      	ldr	r1, [r3, #24]
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	691a      	ldr	r2, [r3, #16]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	619a      	str	r2, [r3, #24]
      break;
 800366a:	e064      	b.n	8003736 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68b9      	ldr	r1, [r7, #8]
 8003672:	4618      	mov	r0, r3
 8003674:	f000 fa22 	bl	8003abc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	699a      	ldr	r2, [r3, #24]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003686:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	699a      	ldr	r2, [r3, #24]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003696:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6999      	ldr	r1, [r3, #24]
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	021a      	lsls	r2, r3, #8
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	619a      	str	r2, [r3, #24]
      break;
 80036ac:	e043      	b.n	8003736 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68b9      	ldr	r1, [r7, #8]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f000 fa6d 	bl	8003b94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	69da      	ldr	r2, [r3, #28]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f042 0208 	orr.w	r2, r2, #8
 80036c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	69da      	ldr	r2, [r3, #28]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 0204 	bic.w	r2, r2, #4
 80036d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	69d9      	ldr	r1, [r3, #28]
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	691a      	ldr	r2, [r3, #16]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	61da      	str	r2, [r3, #28]
      break;
 80036ec:	e023      	b.n	8003736 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68b9      	ldr	r1, [r7, #8]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 fab7 	bl	8003c68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	69da      	ldr	r2, [r3, #28]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003708:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	69da      	ldr	r2, [r3, #28]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003718:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	69d9      	ldr	r1, [r3, #28]
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	021a      	lsls	r2, r3, #8
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	61da      	str	r2, [r3, #28]
      break;
 800372e:	e002      	b.n	8003736 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	75fb      	strb	r3, [r7, #23]
      break;
 8003734:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800373e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003740:	4618      	mov	r0, r3
 8003742:	3718      	adds	r7, #24
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003752:	2300      	movs	r3, #0
 8003754:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800375c:	2b01      	cmp	r3, #1
 800375e:	d101      	bne.n	8003764 <HAL_TIM_ConfigClockSource+0x1c>
 8003760:	2302      	movs	r3, #2
 8003762:	e0b4      	b.n	80038ce <HAL_TIM_ConfigClockSource+0x186>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2202      	movs	r2, #2
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003782:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800378a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800379c:	d03e      	beq.n	800381c <HAL_TIM_ConfigClockSource+0xd4>
 800379e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037a2:	f200 8087 	bhi.w	80038b4 <HAL_TIM_ConfigClockSource+0x16c>
 80037a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037aa:	f000 8086 	beq.w	80038ba <HAL_TIM_ConfigClockSource+0x172>
 80037ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b2:	d87f      	bhi.n	80038b4 <HAL_TIM_ConfigClockSource+0x16c>
 80037b4:	2b70      	cmp	r3, #112	; 0x70
 80037b6:	d01a      	beq.n	80037ee <HAL_TIM_ConfigClockSource+0xa6>
 80037b8:	2b70      	cmp	r3, #112	; 0x70
 80037ba:	d87b      	bhi.n	80038b4 <HAL_TIM_ConfigClockSource+0x16c>
 80037bc:	2b60      	cmp	r3, #96	; 0x60
 80037be:	d050      	beq.n	8003862 <HAL_TIM_ConfigClockSource+0x11a>
 80037c0:	2b60      	cmp	r3, #96	; 0x60
 80037c2:	d877      	bhi.n	80038b4 <HAL_TIM_ConfigClockSource+0x16c>
 80037c4:	2b50      	cmp	r3, #80	; 0x50
 80037c6:	d03c      	beq.n	8003842 <HAL_TIM_ConfigClockSource+0xfa>
 80037c8:	2b50      	cmp	r3, #80	; 0x50
 80037ca:	d873      	bhi.n	80038b4 <HAL_TIM_ConfigClockSource+0x16c>
 80037cc:	2b40      	cmp	r3, #64	; 0x40
 80037ce:	d058      	beq.n	8003882 <HAL_TIM_ConfigClockSource+0x13a>
 80037d0:	2b40      	cmp	r3, #64	; 0x40
 80037d2:	d86f      	bhi.n	80038b4 <HAL_TIM_ConfigClockSource+0x16c>
 80037d4:	2b30      	cmp	r3, #48	; 0x30
 80037d6:	d064      	beq.n	80038a2 <HAL_TIM_ConfigClockSource+0x15a>
 80037d8:	2b30      	cmp	r3, #48	; 0x30
 80037da:	d86b      	bhi.n	80038b4 <HAL_TIM_ConfigClockSource+0x16c>
 80037dc:	2b20      	cmp	r3, #32
 80037de:	d060      	beq.n	80038a2 <HAL_TIM_ConfigClockSource+0x15a>
 80037e0:	2b20      	cmp	r3, #32
 80037e2:	d867      	bhi.n	80038b4 <HAL_TIM_ConfigClockSource+0x16c>
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d05c      	beq.n	80038a2 <HAL_TIM_ConfigClockSource+0x15a>
 80037e8:	2b10      	cmp	r3, #16
 80037ea:	d05a      	beq.n	80038a2 <HAL_TIM_ConfigClockSource+0x15a>
 80037ec:	e062      	b.n	80038b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037fe:	f000 fafd 	bl	8003dfc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003810:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68ba      	ldr	r2, [r7, #8]
 8003818:	609a      	str	r2, [r3, #8]
      break;
 800381a:	e04f      	b.n	80038bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800382c:	f000 fae6 	bl	8003dfc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689a      	ldr	r2, [r3, #8]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800383e:	609a      	str	r2, [r3, #8]
      break;
 8003840:	e03c      	b.n	80038bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800384e:	461a      	mov	r2, r3
 8003850:	f000 fa5a 	bl	8003d08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2150      	movs	r1, #80	; 0x50
 800385a:	4618      	mov	r0, r3
 800385c:	f000 fab3 	bl	8003dc6 <TIM_ITRx_SetConfig>
      break;
 8003860:	e02c      	b.n	80038bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800386e:	461a      	mov	r2, r3
 8003870:	f000 fa79 	bl	8003d66 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2160      	movs	r1, #96	; 0x60
 800387a:	4618      	mov	r0, r3
 800387c:	f000 faa3 	bl	8003dc6 <TIM_ITRx_SetConfig>
      break;
 8003880:	e01c      	b.n	80038bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800388e:	461a      	mov	r2, r3
 8003890:	f000 fa3a 	bl	8003d08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2140      	movs	r1, #64	; 0x40
 800389a:	4618      	mov	r0, r3
 800389c:	f000 fa93 	bl	8003dc6 <TIM_ITRx_SetConfig>
      break;
 80038a0:	e00c      	b.n	80038bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4619      	mov	r1, r3
 80038ac:	4610      	mov	r0, r2
 80038ae:	f000 fa8a 	bl	8003dc6 <TIM_ITRx_SetConfig>
      break;
 80038b2:	e003      	b.n	80038bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	73fb      	strb	r3, [r7, #15]
      break;
 80038b8:	e000      	b.n	80038bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80038ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
	...

080038d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a3a      	ldr	r2, [pc, #232]	; (80039d4 <TIM_Base_SetConfig+0xfc>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d00f      	beq.n	8003910 <TIM_Base_SetConfig+0x38>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038f6:	d00b      	beq.n	8003910 <TIM_Base_SetConfig+0x38>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a37      	ldr	r2, [pc, #220]	; (80039d8 <TIM_Base_SetConfig+0x100>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d007      	beq.n	8003910 <TIM_Base_SetConfig+0x38>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a36      	ldr	r2, [pc, #216]	; (80039dc <TIM_Base_SetConfig+0x104>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d003      	beq.n	8003910 <TIM_Base_SetConfig+0x38>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a35      	ldr	r2, [pc, #212]	; (80039e0 <TIM_Base_SetConfig+0x108>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d108      	bne.n	8003922 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003916:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	4313      	orrs	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a2b      	ldr	r2, [pc, #172]	; (80039d4 <TIM_Base_SetConfig+0xfc>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d01b      	beq.n	8003962 <TIM_Base_SetConfig+0x8a>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003930:	d017      	beq.n	8003962 <TIM_Base_SetConfig+0x8a>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a28      	ldr	r2, [pc, #160]	; (80039d8 <TIM_Base_SetConfig+0x100>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d013      	beq.n	8003962 <TIM_Base_SetConfig+0x8a>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a27      	ldr	r2, [pc, #156]	; (80039dc <TIM_Base_SetConfig+0x104>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d00f      	beq.n	8003962 <TIM_Base_SetConfig+0x8a>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a26      	ldr	r2, [pc, #152]	; (80039e0 <TIM_Base_SetConfig+0x108>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d00b      	beq.n	8003962 <TIM_Base_SetConfig+0x8a>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a25      	ldr	r2, [pc, #148]	; (80039e4 <TIM_Base_SetConfig+0x10c>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d007      	beq.n	8003962 <TIM_Base_SetConfig+0x8a>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a24      	ldr	r2, [pc, #144]	; (80039e8 <TIM_Base_SetConfig+0x110>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d003      	beq.n	8003962 <TIM_Base_SetConfig+0x8a>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a23      	ldr	r2, [pc, #140]	; (80039ec <TIM_Base_SetConfig+0x114>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d108      	bne.n	8003974 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003968:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	4313      	orrs	r3, r2
 8003972:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	4313      	orrs	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a0e      	ldr	r2, [pc, #56]	; (80039d4 <TIM_Base_SetConfig+0xfc>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d103      	bne.n	80039a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	691a      	ldr	r2, [r3, #16]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d105      	bne.n	80039c6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	f023 0201 	bic.w	r2, r3, #1
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	611a      	str	r2, [r3, #16]
  }
}
 80039c6:	bf00      	nop
 80039c8:	3714      	adds	r7, #20
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	40010000 	.word	0x40010000
 80039d8:	40000400 	.word	0x40000400
 80039dc:	40000800 	.word	0x40000800
 80039e0:	40000c00 	.word	0x40000c00
 80039e4:	40014000 	.word	0x40014000
 80039e8:	40014400 	.word	0x40014400
 80039ec:	40014800 	.word	0x40014800

080039f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	f023 0201 	bic.w	r2, r3, #1
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f023 0303 	bic.w	r3, r3, #3
 8003a26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f023 0302 	bic.w	r3, r3, #2
 8003a38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a1c      	ldr	r2, [pc, #112]	; (8003ab8 <TIM_OC1_SetConfig+0xc8>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d10c      	bne.n	8003a66 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	f023 0308 	bic.w	r3, r3, #8
 8003a52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f023 0304 	bic.w	r3, r3, #4
 8003a64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a13      	ldr	r2, [pc, #76]	; (8003ab8 <TIM_OC1_SetConfig+0xc8>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d111      	bne.n	8003a92 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685a      	ldr	r2, [r3, #4]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	621a      	str	r2, [r3, #32]
}
 8003aac:	bf00      	nop
 8003aae:	371c      	adds	r7, #28
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr
 8003ab8:	40010000 	.word	0x40010000

08003abc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b087      	sub	sp, #28
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	f023 0210 	bic.w	r2, r3, #16
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003af2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	021b      	lsls	r3, r3, #8
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f023 0320 	bic.w	r3, r3, #32
 8003b06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	011b      	lsls	r3, r3, #4
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a1e      	ldr	r2, [pc, #120]	; (8003b90 <TIM_OC2_SetConfig+0xd4>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d10d      	bne.n	8003b38 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	011b      	lsls	r3, r3, #4
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a15      	ldr	r2, [pc, #84]	; (8003b90 <TIM_OC2_SetConfig+0xd4>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d113      	bne.n	8003b68 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	621a      	str	r2, [r3, #32]
}
 8003b82:	bf00      	nop
 8003b84:	371c      	adds	r7, #28
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	40010000 	.word	0x40010000

08003b94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b087      	sub	sp, #28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f023 0303 	bic.w	r3, r3, #3
 8003bca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	021b      	lsls	r3, r3, #8
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a1d      	ldr	r2, [pc, #116]	; (8003c64 <TIM_OC3_SetConfig+0xd0>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d10d      	bne.n	8003c0e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bf8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	021b      	lsls	r3, r3, #8
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a14      	ldr	r2, [pc, #80]	; (8003c64 <TIM_OC3_SetConfig+0xd0>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d113      	bne.n	8003c3e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	011b      	lsls	r3, r3, #4
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	011b      	lsls	r3, r3, #4
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	621a      	str	r2, [r3, #32]
}
 8003c58:	bf00      	nop
 8003c5a:	371c      	adds	r7, #28
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	40010000 	.word	0x40010000

08003c68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b087      	sub	sp, #28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	021b      	lsls	r3, r3, #8
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	031b      	lsls	r3, r3, #12
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a10      	ldr	r2, [pc, #64]	; (8003d04 <TIM_OC4_SetConfig+0x9c>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d109      	bne.n	8003cdc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	019b      	lsls	r3, r3, #6
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	621a      	str	r2, [r3, #32]
}
 8003cf6:	bf00      	nop
 8003cf8:	371c      	adds	r7, #28
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	40010000 	.word	0x40010000

08003d08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b087      	sub	sp, #28
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	f023 0201 	bic.w	r2, r3, #1
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	011b      	lsls	r3, r3, #4
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f023 030a 	bic.w	r3, r3, #10
 8003d44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	621a      	str	r2, [r3, #32]
}
 8003d5a:	bf00      	nop
 8003d5c:	371c      	adds	r7, #28
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr

08003d66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d66:	b480      	push	{r7}
 8003d68:	b087      	sub	sp, #28
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	60f8      	str	r0, [r7, #12]
 8003d6e:	60b9      	str	r1, [r7, #8]
 8003d70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	f023 0210 	bic.w	r2, r3, #16
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	031b      	lsls	r3, r3, #12
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003da2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	011b      	lsls	r3, r3, #4
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	621a      	str	r2, [r3, #32]
}
 8003dba:	bf00      	nop
 8003dbc:	371c      	adds	r7, #28
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b085      	sub	sp, #20
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
 8003dce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ddc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	f043 0307 	orr.w	r3, r3, #7
 8003de8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	609a      	str	r2, [r3, #8]
}
 8003df0:	bf00      	nop
 8003df2:	3714      	adds	r7, #20
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b087      	sub	sp, #28
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
 8003e08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	021a      	lsls	r2, r3, #8
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	609a      	str	r2, [r3, #8]
}
 8003e30:	bf00      	nop
 8003e32:	371c      	adds	r7, #28
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b087      	sub	sp, #28
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	f003 031f 	and.w	r3, r3, #31
 8003e4e:	2201      	movs	r2, #1
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6a1a      	ldr	r2, [r3, #32]
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	43db      	mvns	r3, r3
 8003e5e:	401a      	ands	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6a1a      	ldr	r2, [r3, #32]
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	f003 031f 	and.w	r3, r3, #31
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	fa01 f303 	lsl.w	r3, r1, r3
 8003e74:	431a      	orrs	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	621a      	str	r2, [r3, #32]
}
 8003e7a:	bf00      	nop
 8003e7c:	371c      	adds	r7, #28
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
	...

08003e88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d101      	bne.n	8003ea0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	e050      	b.n	8003f42 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a1c      	ldr	r2, [pc, #112]	; (8003f50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d018      	beq.n	8003f16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eec:	d013      	beq.n	8003f16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a18      	ldr	r2, [pc, #96]	; (8003f54 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d00e      	beq.n	8003f16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a16      	ldr	r2, [pc, #88]	; (8003f58 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d009      	beq.n	8003f16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a15      	ldr	r2, [pc, #84]	; (8003f5c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d004      	beq.n	8003f16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a13      	ldr	r2, [pc, #76]	; (8003f60 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d10c      	bne.n	8003f30 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	68ba      	ldr	r2, [r7, #8]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3714      	adds	r7, #20
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	40010000 	.word	0x40010000
 8003f54:	40000400 	.word	0x40000400
 8003f58:	40000800 	.word	0x40000800
 8003f5c:	40000c00 	.word	0x40000c00
 8003f60:	40014000 	.word	0x40014000

08003f64 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d101      	bne.n	8003f80 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	e03d      	b.n	8003ffc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3714      	adds	r7, #20
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e042      	b.n	80040a0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d106      	bne.n	8004034 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7fd fbc4 	bl	80017bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2224      	movs	r2, #36	; 0x24
 8004038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68da      	ldr	r2, [r3, #12]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800404a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 f973 	bl	8004338 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	691a      	ldr	r2, [r3, #16]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004060:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	695a      	ldr	r2, [r3, #20]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004070:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68da      	ldr	r2, [r3, #12]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004080:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2220      	movs	r2, #32
 800408c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2220      	movs	r2, #32
 8004094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3708      	adds	r7, #8
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b08a      	sub	sp, #40	; 0x28
 80040ac:	af02      	add	r7, sp, #8
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	603b      	str	r3, [r7, #0]
 80040b4:	4613      	mov	r3, r2
 80040b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040b8:	2300      	movs	r3, #0
 80040ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b20      	cmp	r3, #32
 80040c6:	d175      	bne.n	80041b4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d002      	beq.n	80040d4 <HAL_UART_Transmit+0x2c>
 80040ce:	88fb      	ldrh	r3, [r7, #6]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d101      	bne.n	80040d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e06e      	b.n	80041b6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2221      	movs	r2, #33	; 0x21
 80040e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040e6:	f7fd fcbb 	bl	8001a60 <HAL_GetTick>
 80040ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	88fa      	ldrh	r2, [r7, #6]
 80040f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	88fa      	ldrh	r2, [r7, #6]
 80040f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004100:	d108      	bne.n	8004114 <HAL_UART_Transmit+0x6c>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d104      	bne.n	8004114 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800410a:	2300      	movs	r3, #0
 800410c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	61bb      	str	r3, [r7, #24]
 8004112:	e003      	b.n	800411c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004118:	2300      	movs	r3, #0
 800411a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800411c:	e02e      	b.n	800417c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	2200      	movs	r2, #0
 8004126:	2180      	movs	r1, #128	; 0x80
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f000 f848 	bl	80041be <UART_WaitOnFlagUntilTimeout>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d005      	beq.n	8004140 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2220      	movs	r2, #32
 8004138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e03a      	b.n	80041b6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10b      	bne.n	800415e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	881b      	ldrh	r3, [r3, #0]
 800414a:	461a      	mov	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004154:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	3302      	adds	r3, #2
 800415a:	61bb      	str	r3, [r7, #24]
 800415c:	e007      	b.n	800416e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	781a      	ldrb	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	3301      	adds	r3, #1
 800416c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004172:	b29b      	uxth	r3, r3
 8004174:	3b01      	subs	r3, #1
 8004176:	b29a      	uxth	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004180:	b29b      	uxth	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1cb      	bne.n	800411e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	2200      	movs	r2, #0
 800418e:	2140      	movs	r1, #64	; 0x40
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f000 f814 	bl	80041be <UART_WaitOnFlagUntilTimeout>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d005      	beq.n	80041a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2220      	movs	r2, #32
 80041a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e006      	b.n	80041b6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2220      	movs	r2, #32
 80041ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80041b0:	2300      	movs	r3, #0
 80041b2:	e000      	b.n	80041b6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80041b4:	2302      	movs	r3, #2
  }
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3720      	adds	r7, #32
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b086      	sub	sp, #24
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	60f8      	str	r0, [r7, #12]
 80041c6:	60b9      	str	r1, [r7, #8]
 80041c8:	603b      	str	r3, [r7, #0]
 80041ca:	4613      	mov	r3, r2
 80041cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041ce:	e03b      	b.n	8004248 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041d0:	6a3b      	ldr	r3, [r7, #32]
 80041d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d6:	d037      	beq.n	8004248 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041d8:	f7fd fc42 	bl	8001a60 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	6a3a      	ldr	r2, [r7, #32]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d302      	bcc.n	80041ee <UART_WaitOnFlagUntilTimeout+0x30>
 80041e8:	6a3b      	ldr	r3, [r7, #32]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e03a      	b.n	8004268 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	f003 0304 	and.w	r3, r3, #4
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d023      	beq.n	8004248 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	2b80      	cmp	r3, #128	; 0x80
 8004204:	d020      	beq.n	8004248 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	2b40      	cmp	r3, #64	; 0x40
 800420a:	d01d      	beq.n	8004248 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0308 	and.w	r3, r3, #8
 8004216:	2b08      	cmp	r3, #8
 8004218:	d116      	bne.n	8004248 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800421a:	2300      	movs	r3, #0
 800421c:	617b      	str	r3, [r7, #20]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	617b      	str	r3, [r7, #20]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	617b      	str	r3, [r7, #20]
 800422e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f000 f81d 	bl	8004270 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2208      	movs	r2, #8
 800423a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e00f      	b.n	8004268 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	4013      	ands	r3, r2
 8004252:	68ba      	ldr	r2, [r7, #8]
 8004254:	429a      	cmp	r2, r3
 8004256:	bf0c      	ite	eq
 8004258:	2301      	moveq	r3, #1
 800425a:	2300      	movne	r3, #0
 800425c:	b2db      	uxtb	r3, r3
 800425e:	461a      	mov	r2, r3
 8004260:	79fb      	ldrb	r3, [r7, #7]
 8004262:	429a      	cmp	r2, r3
 8004264:	d0b4      	beq.n	80041d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3718      	adds	r7, #24
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004270:	b480      	push	{r7}
 8004272:	b095      	sub	sp, #84	; 0x54
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	330c      	adds	r3, #12
 800427e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004282:	e853 3f00 	ldrex	r3, [r3]
 8004286:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800428e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	330c      	adds	r3, #12
 8004296:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004298:	643a      	str	r2, [r7, #64]	; 0x40
 800429a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800429e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042a0:	e841 2300 	strex	r3, r2, [r1]
 80042a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1e5      	bne.n	8004278 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	3314      	adds	r3, #20
 80042b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b4:	6a3b      	ldr	r3, [r7, #32]
 80042b6:	e853 3f00 	ldrex	r3, [r3]
 80042ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	f023 0301 	bic.w	r3, r3, #1
 80042c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3314      	adds	r3, #20
 80042ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042d4:	e841 2300 	strex	r3, r2, [r1]
 80042d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1e5      	bne.n	80042ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d119      	bne.n	800431c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	330c      	adds	r3, #12
 80042ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	e853 3f00 	ldrex	r3, [r3]
 80042f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	f023 0310 	bic.w	r3, r3, #16
 80042fe:	647b      	str	r3, [r7, #68]	; 0x44
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	330c      	adds	r3, #12
 8004306:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004308:	61ba      	str	r2, [r7, #24]
 800430a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430c:	6979      	ldr	r1, [r7, #20]
 800430e:	69ba      	ldr	r2, [r7, #24]
 8004310:	e841 2300 	strex	r3, r2, [r1]
 8004314:	613b      	str	r3, [r7, #16]
   return(result);
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1e5      	bne.n	80042e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2220      	movs	r2, #32
 8004320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	631a      	str	r2, [r3, #48]	; 0x30
}
 800432a:	bf00      	nop
 800432c:	3754      	adds	r7, #84	; 0x54
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
	...

08004338 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800433c:	b0c0      	sub	sp, #256	; 0x100
 800433e:	af00      	add	r7, sp, #0
 8004340:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004354:	68d9      	ldr	r1, [r3, #12]
 8004356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	ea40 0301 	orr.w	r3, r0, r1
 8004360:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004366:	689a      	ldr	r2, [r3, #8]
 8004368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	431a      	orrs	r2, r3
 8004370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	431a      	orrs	r2, r3
 8004378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	4313      	orrs	r3, r2
 8004380:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004390:	f021 010c 	bic.w	r1, r1, #12
 8004394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800439e:	430b      	orrs	r3, r1
 80043a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80043ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b2:	6999      	ldr	r1, [r3, #24]
 80043b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	ea40 0301 	orr.w	r3, r0, r1
 80043be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	4b8f      	ldr	r3, [pc, #572]	; (8004604 <UART_SetConfig+0x2cc>)
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d005      	beq.n	80043d8 <UART_SetConfig+0xa0>
 80043cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	4b8d      	ldr	r3, [pc, #564]	; (8004608 <UART_SetConfig+0x2d0>)
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d104      	bne.n	80043e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80043d8:	f7fe fe54 	bl	8003084 <HAL_RCC_GetPCLK2Freq>
 80043dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80043e0:	e003      	b.n	80043ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043e2:	f7fe fe3b 	bl	800305c <HAL_RCC_GetPCLK1Freq>
 80043e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ee:	69db      	ldr	r3, [r3, #28]
 80043f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043f4:	f040 810c 	bne.w	8004610 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043fc:	2200      	movs	r2, #0
 80043fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004402:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004406:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800440a:	4622      	mov	r2, r4
 800440c:	462b      	mov	r3, r5
 800440e:	1891      	adds	r1, r2, r2
 8004410:	65b9      	str	r1, [r7, #88]	; 0x58
 8004412:	415b      	adcs	r3, r3
 8004414:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004416:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800441a:	4621      	mov	r1, r4
 800441c:	eb12 0801 	adds.w	r8, r2, r1
 8004420:	4629      	mov	r1, r5
 8004422:	eb43 0901 	adc.w	r9, r3, r1
 8004426:	f04f 0200 	mov.w	r2, #0
 800442a:	f04f 0300 	mov.w	r3, #0
 800442e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004432:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004436:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800443a:	4690      	mov	r8, r2
 800443c:	4699      	mov	r9, r3
 800443e:	4623      	mov	r3, r4
 8004440:	eb18 0303 	adds.w	r3, r8, r3
 8004444:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004448:	462b      	mov	r3, r5
 800444a:	eb49 0303 	adc.w	r3, r9, r3
 800444e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800445e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004462:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004466:	460b      	mov	r3, r1
 8004468:	18db      	adds	r3, r3, r3
 800446a:	653b      	str	r3, [r7, #80]	; 0x50
 800446c:	4613      	mov	r3, r2
 800446e:	eb42 0303 	adc.w	r3, r2, r3
 8004472:	657b      	str	r3, [r7, #84]	; 0x54
 8004474:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004478:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800447c:	f7fc fa36 	bl	80008ec <__aeabi_uldivmod>
 8004480:	4602      	mov	r2, r0
 8004482:	460b      	mov	r3, r1
 8004484:	4b61      	ldr	r3, [pc, #388]	; (800460c <UART_SetConfig+0x2d4>)
 8004486:	fba3 2302 	umull	r2, r3, r3, r2
 800448a:	095b      	lsrs	r3, r3, #5
 800448c:	011c      	lsls	r4, r3, #4
 800448e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004492:	2200      	movs	r2, #0
 8004494:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004498:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800449c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80044a0:	4642      	mov	r2, r8
 80044a2:	464b      	mov	r3, r9
 80044a4:	1891      	adds	r1, r2, r2
 80044a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80044a8:	415b      	adcs	r3, r3
 80044aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80044b0:	4641      	mov	r1, r8
 80044b2:	eb12 0a01 	adds.w	sl, r2, r1
 80044b6:	4649      	mov	r1, r9
 80044b8:	eb43 0b01 	adc.w	fp, r3, r1
 80044bc:	f04f 0200 	mov.w	r2, #0
 80044c0:	f04f 0300 	mov.w	r3, #0
 80044c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80044c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80044cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044d0:	4692      	mov	sl, r2
 80044d2:	469b      	mov	fp, r3
 80044d4:	4643      	mov	r3, r8
 80044d6:	eb1a 0303 	adds.w	r3, sl, r3
 80044da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044de:	464b      	mov	r3, r9
 80044e0:	eb4b 0303 	adc.w	r3, fp, r3
 80044e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80044e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80044f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80044fc:	460b      	mov	r3, r1
 80044fe:	18db      	adds	r3, r3, r3
 8004500:	643b      	str	r3, [r7, #64]	; 0x40
 8004502:	4613      	mov	r3, r2
 8004504:	eb42 0303 	adc.w	r3, r2, r3
 8004508:	647b      	str	r3, [r7, #68]	; 0x44
 800450a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800450e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004512:	f7fc f9eb 	bl	80008ec <__aeabi_uldivmod>
 8004516:	4602      	mov	r2, r0
 8004518:	460b      	mov	r3, r1
 800451a:	4611      	mov	r1, r2
 800451c:	4b3b      	ldr	r3, [pc, #236]	; (800460c <UART_SetConfig+0x2d4>)
 800451e:	fba3 2301 	umull	r2, r3, r3, r1
 8004522:	095b      	lsrs	r3, r3, #5
 8004524:	2264      	movs	r2, #100	; 0x64
 8004526:	fb02 f303 	mul.w	r3, r2, r3
 800452a:	1acb      	subs	r3, r1, r3
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004532:	4b36      	ldr	r3, [pc, #216]	; (800460c <UART_SetConfig+0x2d4>)
 8004534:	fba3 2302 	umull	r2, r3, r3, r2
 8004538:	095b      	lsrs	r3, r3, #5
 800453a:	005b      	lsls	r3, r3, #1
 800453c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004540:	441c      	add	r4, r3
 8004542:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004546:	2200      	movs	r2, #0
 8004548:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800454c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004550:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004554:	4642      	mov	r2, r8
 8004556:	464b      	mov	r3, r9
 8004558:	1891      	adds	r1, r2, r2
 800455a:	63b9      	str	r1, [r7, #56]	; 0x38
 800455c:	415b      	adcs	r3, r3
 800455e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004560:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004564:	4641      	mov	r1, r8
 8004566:	1851      	adds	r1, r2, r1
 8004568:	6339      	str	r1, [r7, #48]	; 0x30
 800456a:	4649      	mov	r1, r9
 800456c:	414b      	adcs	r3, r1
 800456e:	637b      	str	r3, [r7, #52]	; 0x34
 8004570:	f04f 0200 	mov.w	r2, #0
 8004574:	f04f 0300 	mov.w	r3, #0
 8004578:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800457c:	4659      	mov	r1, fp
 800457e:	00cb      	lsls	r3, r1, #3
 8004580:	4651      	mov	r1, sl
 8004582:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004586:	4651      	mov	r1, sl
 8004588:	00ca      	lsls	r2, r1, #3
 800458a:	4610      	mov	r0, r2
 800458c:	4619      	mov	r1, r3
 800458e:	4603      	mov	r3, r0
 8004590:	4642      	mov	r2, r8
 8004592:	189b      	adds	r3, r3, r2
 8004594:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004598:	464b      	mov	r3, r9
 800459a:	460a      	mov	r2, r1
 800459c:	eb42 0303 	adc.w	r3, r2, r3
 80045a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80045b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80045b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80045b8:	460b      	mov	r3, r1
 80045ba:	18db      	adds	r3, r3, r3
 80045bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80045be:	4613      	mov	r3, r2
 80045c0:	eb42 0303 	adc.w	r3, r2, r3
 80045c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80045ce:	f7fc f98d 	bl	80008ec <__aeabi_uldivmod>
 80045d2:	4602      	mov	r2, r0
 80045d4:	460b      	mov	r3, r1
 80045d6:	4b0d      	ldr	r3, [pc, #52]	; (800460c <UART_SetConfig+0x2d4>)
 80045d8:	fba3 1302 	umull	r1, r3, r3, r2
 80045dc:	095b      	lsrs	r3, r3, #5
 80045de:	2164      	movs	r1, #100	; 0x64
 80045e0:	fb01 f303 	mul.w	r3, r1, r3
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	3332      	adds	r3, #50	; 0x32
 80045ea:	4a08      	ldr	r2, [pc, #32]	; (800460c <UART_SetConfig+0x2d4>)
 80045ec:	fba2 2303 	umull	r2, r3, r2, r3
 80045f0:	095b      	lsrs	r3, r3, #5
 80045f2:	f003 0207 	and.w	r2, r3, #7
 80045f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4422      	add	r2, r4
 80045fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004600:	e106      	b.n	8004810 <UART_SetConfig+0x4d8>
 8004602:	bf00      	nop
 8004604:	40011000 	.word	0x40011000
 8004608:	40011400 	.word	0x40011400
 800460c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004610:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004614:	2200      	movs	r2, #0
 8004616:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800461a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800461e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004622:	4642      	mov	r2, r8
 8004624:	464b      	mov	r3, r9
 8004626:	1891      	adds	r1, r2, r2
 8004628:	6239      	str	r1, [r7, #32]
 800462a:	415b      	adcs	r3, r3
 800462c:	627b      	str	r3, [r7, #36]	; 0x24
 800462e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004632:	4641      	mov	r1, r8
 8004634:	1854      	adds	r4, r2, r1
 8004636:	4649      	mov	r1, r9
 8004638:	eb43 0501 	adc.w	r5, r3, r1
 800463c:	f04f 0200 	mov.w	r2, #0
 8004640:	f04f 0300 	mov.w	r3, #0
 8004644:	00eb      	lsls	r3, r5, #3
 8004646:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800464a:	00e2      	lsls	r2, r4, #3
 800464c:	4614      	mov	r4, r2
 800464e:	461d      	mov	r5, r3
 8004650:	4643      	mov	r3, r8
 8004652:	18e3      	adds	r3, r4, r3
 8004654:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004658:	464b      	mov	r3, r9
 800465a:	eb45 0303 	adc.w	r3, r5, r3
 800465e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800466e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004672:	f04f 0200 	mov.w	r2, #0
 8004676:	f04f 0300 	mov.w	r3, #0
 800467a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800467e:	4629      	mov	r1, r5
 8004680:	008b      	lsls	r3, r1, #2
 8004682:	4621      	mov	r1, r4
 8004684:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004688:	4621      	mov	r1, r4
 800468a:	008a      	lsls	r2, r1, #2
 800468c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004690:	f7fc f92c 	bl	80008ec <__aeabi_uldivmod>
 8004694:	4602      	mov	r2, r0
 8004696:	460b      	mov	r3, r1
 8004698:	4b60      	ldr	r3, [pc, #384]	; (800481c <UART_SetConfig+0x4e4>)
 800469a:	fba3 2302 	umull	r2, r3, r3, r2
 800469e:	095b      	lsrs	r3, r3, #5
 80046a0:	011c      	lsls	r4, r3, #4
 80046a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046a6:	2200      	movs	r2, #0
 80046a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80046ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80046b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80046b4:	4642      	mov	r2, r8
 80046b6:	464b      	mov	r3, r9
 80046b8:	1891      	adds	r1, r2, r2
 80046ba:	61b9      	str	r1, [r7, #24]
 80046bc:	415b      	adcs	r3, r3
 80046be:	61fb      	str	r3, [r7, #28]
 80046c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046c4:	4641      	mov	r1, r8
 80046c6:	1851      	adds	r1, r2, r1
 80046c8:	6139      	str	r1, [r7, #16]
 80046ca:	4649      	mov	r1, r9
 80046cc:	414b      	adcs	r3, r1
 80046ce:	617b      	str	r3, [r7, #20]
 80046d0:	f04f 0200 	mov.w	r2, #0
 80046d4:	f04f 0300 	mov.w	r3, #0
 80046d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046dc:	4659      	mov	r1, fp
 80046de:	00cb      	lsls	r3, r1, #3
 80046e0:	4651      	mov	r1, sl
 80046e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046e6:	4651      	mov	r1, sl
 80046e8:	00ca      	lsls	r2, r1, #3
 80046ea:	4610      	mov	r0, r2
 80046ec:	4619      	mov	r1, r3
 80046ee:	4603      	mov	r3, r0
 80046f0:	4642      	mov	r2, r8
 80046f2:	189b      	adds	r3, r3, r2
 80046f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80046f8:	464b      	mov	r3, r9
 80046fa:	460a      	mov	r2, r1
 80046fc:	eb42 0303 	adc.w	r3, r2, r3
 8004700:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	67bb      	str	r3, [r7, #120]	; 0x78
 800470e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004710:	f04f 0200 	mov.w	r2, #0
 8004714:	f04f 0300 	mov.w	r3, #0
 8004718:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800471c:	4649      	mov	r1, r9
 800471e:	008b      	lsls	r3, r1, #2
 8004720:	4641      	mov	r1, r8
 8004722:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004726:	4641      	mov	r1, r8
 8004728:	008a      	lsls	r2, r1, #2
 800472a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800472e:	f7fc f8dd 	bl	80008ec <__aeabi_uldivmod>
 8004732:	4602      	mov	r2, r0
 8004734:	460b      	mov	r3, r1
 8004736:	4611      	mov	r1, r2
 8004738:	4b38      	ldr	r3, [pc, #224]	; (800481c <UART_SetConfig+0x4e4>)
 800473a:	fba3 2301 	umull	r2, r3, r3, r1
 800473e:	095b      	lsrs	r3, r3, #5
 8004740:	2264      	movs	r2, #100	; 0x64
 8004742:	fb02 f303 	mul.w	r3, r2, r3
 8004746:	1acb      	subs	r3, r1, r3
 8004748:	011b      	lsls	r3, r3, #4
 800474a:	3332      	adds	r3, #50	; 0x32
 800474c:	4a33      	ldr	r2, [pc, #204]	; (800481c <UART_SetConfig+0x4e4>)
 800474e:	fba2 2303 	umull	r2, r3, r2, r3
 8004752:	095b      	lsrs	r3, r3, #5
 8004754:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004758:	441c      	add	r4, r3
 800475a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800475e:	2200      	movs	r2, #0
 8004760:	673b      	str	r3, [r7, #112]	; 0x70
 8004762:	677a      	str	r2, [r7, #116]	; 0x74
 8004764:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004768:	4642      	mov	r2, r8
 800476a:	464b      	mov	r3, r9
 800476c:	1891      	adds	r1, r2, r2
 800476e:	60b9      	str	r1, [r7, #8]
 8004770:	415b      	adcs	r3, r3
 8004772:	60fb      	str	r3, [r7, #12]
 8004774:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004778:	4641      	mov	r1, r8
 800477a:	1851      	adds	r1, r2, r1
 800477c:	6039      	str	r1, [r7, #0]
 800477e:	4649      	mov	r1, r9
 8004780:	414b      	adcs	r3, r1
 8004782:	607b      	str	r3, [r7, #4]
 8004784:	f04f 0200 	mov.w	r2, #0
 8004788:	f04f 0300 	mov.w	r3, #0
 800478c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004790:	4659      	mov	r1, fp
 8004792:	00cb      	lsls	r3, r1, #3
 8004794:	4651      	mov	r1, sl
 8004796:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800479a:	4651      	mov	r1, sl
 800479c:	00ca      	lsls	r2, r1, #3
 800479e:	4610      	mov	r0, r2
 80047a0:	4619      	mov	r1, r3
 80047a2:	4603      	mov	r3, r0
 80047a4:	4642      	mov	r2, r8
 80047a6:	189b      	adds	r3, r3, r2
 80047a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80047aa:	464b      	mov	r3, r9
 80047ac:	460a      	mov	r2, r1
 80047ae:	eb42 0303 	adc.w	r3, r2, r3
 80047b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	663b      	str	r3, [r7, #96]	; 0x60
 80047be:	667a      	str	r2, [r7, #100]	; 0x64
 80047c0:	f04f 0200 	mov.w	r2, #0
 80047c4:	f04f 0300 	mov.w	r3, #0
 80047c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80047cc:	4649      	mov	r1, r9
 80047ce:	008b      	lsls	r3, r1, #2
 80047d0:	4641      	mov	r1, r8
 80047d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047d6:	4641      	mov	r1, r8
 80047d8:	008a      	lsls	r2, r1, #2
 80047da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80047de:	f7fc f885 	bl	80008ec <__aeabi_uldivmod>
 80047e2:	4602      	mov	r2, r0
 80047e4:	460b      	mov	r3, r1
 80047e6:	4b0d      	ldr	r3, [pc, #52]	; (800481c <UART_SetConfig+0x4e4>)
 80047e8:	fba3 1302 	umull	r1, r3, r3, r2
 80047ec:	095b      	lsrs	r3, r3, #5
 80047ee:	2164      	movs	r1, #100	; 0x64
 80047f0:	fb01 f303 	mul.w	r3, r1, r3
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	011b      	lsls	r3, r3, #4
 80047f8:	3332      	adds	r3, #50	; 0x32
 80047fa:	4a08      	ldr	r2, [pc, #32]	; (800481c <UART_SetConfig+0x4e4>)
 80047fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004800:	095b      	lsrs	r3, r3, #5
 8004802:	f003 020f 	and.w	r2, r3, #15
 8004806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4422      	add	r2, r4
 800480e:	609a      	str	r2, [r3, #8]
}
 8004810:	bf00      	nop
 8004812:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004816:	46bd      	mov	sp, r7
 8004818:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800481c:	51eb851f 	.word	0x51eb851f

08004820 <siprintf>:
 8004820:	b40e      	push	{r1, r2, r3}
 8004822:	b500      	push	{lr}
 8004824:	b09c      	sub	sp, #112	; 0x70
 8004826:	ab1d      	add	r3, sp, #116	; 0x74
 8004828:	9002      	str	r0, [sp, #8]
 800482a:	9006      	str	r0, [sp, #24]
 800482c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004830:	4809      	ldr	r0, [pc, #36]	; (8004858 <siprintf+0x38>)
 8004832:	9107      	str	r1, [sp, #28]
 8004834:	9104      	str	r1, [sp, #16]
 8004836:	4909      	ldr	r1, [pc, #36]	; (800485c <siprintf+0x3c>)
 8004838:	f853 2b04 	ldr.w	r2, [r3], #4
 800483c:	9105      	str	r1, [sp, #20]
 800483e:	6800      	ldr	r0, [r0, #0]
 8004840:	9301      	str	r3, [sp, #4]
 8004842:	a902      	add	r1, sp, #8
 8004844:	f000 f992 	bl	8004b6c <_svfiprintf_r>
 8004848:	9b02      	ldr	r3, [sp, #8]
 800484a:	2200      	movs	r2, #0
 800484c:	701a      	strb	r2, [r3, #0]
 800484e:	b01c      	add	sp, #112	; 0x70
 8004850:	f85d eb04 	ldr.w	lr, [sp], #4
 8004854:	b003      	add	sp, #12
 8004856:	4770      	bx	lr
 8004858:	20000058 	.word	0x20000058
 800485c:	ffff0208 	.word	0xffff0208

08004860 <memset>:
 8004860:	4402      	add	r2, r0
 8004862:	4603      	mov	r3, r0
 8004864:	4293      	cmp	r3, r2
 8004866:	d100      	bne.n	800486a <memset+0xa>
 8004868:	4770      	bx	lr
 800486a:	f803 1b01 	strb.w	r1, [r3], #1
 800486e:	e7f9      	b.n	8004864 <memset+0x4>

08004870 <__errno>:
 8004870:	4b01      	ldr	r3, [pc, #4]	; (8004878 <__errno+0x8>)
 8004872:	6818      	ldr	r0, [r3, #0]
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	20000058 	.word	0x20000058

0800487c <__libc_init_array>:
 800487c:	b570      	push	{r4, r5, r6, lr}
 800487e:	4d0d      	ldr	r5, [pc, #52]	; (80048b4 <__libc_init_array+0x38>)
 8004880:	4c0d      	ldr	r4, [pc, #52]	; (80048b8 <__libc_init_array+0x3c>)
 8004882:	1b64      	subs	r4, r4, r5
 8004884:	10a4      	asrs	r4, r4, #2
 8004886:	2600      	movs	r6, #0
 8004888:	42a6      	cmp	r6, r4
 800488a:	d109      	bne.n	80048a0 <__libc_init_array+0x24>
 800488c:	4d0b      	ldr	r5, [pc, #44]	; (80048bc <__libc_init_array+0x40>)
 800488e:	4c0c      	ldr	r4, [pc, #48]	; (80048c0 <__libc_init_array+0x44>)
 8004890:	f000 fc6a 	bl	8005168 <_init>
 8004894:	1b64      	subs	r4, r4, r5
 8004896:	10a4      	asrs	r4, r4, #2
 8004898:	2600      	movs	r6, #0
 800489a:	42a6      	cmp	r6, r4
 800489c:	d105      	bne.n	80048aa <__libc_init_array+0x2e>
 800489e:	bd70      	pop	{r4, r5, r6, pc}
 80048a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80048a4:	4798      	blx	r3
 80048a6:	3601      	adds	r6, #1
 80048a8:	e7ee      	b.n	8004888 <__libc_init_array+0xc>
 80048aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80048ae:	4798      	blx	r3
 80048b0:	3601      	adds	r6, #1
 80048b2:	e7f2      	b.n	800489a <__libc_init_array+0x1e>
 80048b4:	080051f0 	.word	0x080051f0
 80048b8:	080051f0 	.word	0x080051f0
 80048bc:	080051f0 	.word	0x080051f0
 80048c0:	080051f4 	.word	0x080051f4

080048c4 <__retarget_lock_acquire_recursive>:
 80048c4:	4770      	bx	lr

080048c6 <__retarget_lock_release_recursive>:
 80048c6:	4770      	bx	lr

080048c8 <_free_r>:
 80048c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80048ca:	2900      	cmp	r1, #0
 80048cc:	d044      	beq.n	8004958 <_free_r+0x90>
 80048ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048d2:	9001      	str	r0, [sp, #4]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f1a1 0404 	sub.w	r4, r1, #4
 80048da:	bfb8      	it	lt
 80048dc:	18e4      	addlt	r4, r4, r3
 80048de:	f000 f8df 	bl	8004aa0 <__malloc_lock>
 80048e2:	4a1e      	ldr	r2, [pc, #120]	; (800495c <_free_r+0x94>)
 80048e4:	9801      	ldr	r0, [sp, #4]
 80048e6:	6813      	ldr	r3, [r2, #0]
 80048e8:	b933      	cbnz	r3, 80048f8 <_free_r+0x30>
 80048ea:	6063      	str	r3, [r4, #4]
 80048ec:	6014      	str	r4, [r2, #0]
 80048ee:	b003      	add	sp, #12
 80048f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80048f4:	f000 b8da 	b.w	8004aac <__malloc_unlock>
 80048f8:	42a3      	cmp	r3, r4
 80048fa:	d908      	bls.n	800490e <_free_r+0x46>
 80048fc:	6825      	ldr	r5, [r4, #0]
 80048fe:	1961      	adds	r1, r4, r5
 8004900:	428b      	cmp	r3, r1
 8004902:	bf01      	itttt	eq
 8004904:	6819      	ldreq	r1, [r3, #0]
 8004906:	685b      	ldreq	r3, [r3, #4]
 8004908:	1949      	addeq	r1, r1, r5
 800490a:	6021      	streq	r1, [r4, #0]
 800490c:	e7ed      	b.n	80048ea <_free_r+0x22>
 800490e:	461a      	mov	r2, r3
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	b10b      	cbz	r3, 8004918 <_free_r+0x50>
 8004914:	42a3      	cmp	r3, r4
 8004916:	d9fa      	bls.n	800490e <_free_r+0x46>
 8004918:	6811      	ldr	r1, [r2, #0]
 800491a:	1855      	adds	r5, r2, r1
 800491c:	42a5      	cmp	r5, r4
 800491e:	d10b      	bne.n	8004938 <_free_r+0x70>
 8004920:	6824      	ldr	r4, [r4, #0]
 8004922:	4421      	add	r1, r4
 8004924:	1854      	adds	r4, r2, r1
 8004926:	42a3      	cmp	r3, r4
 8004928:	6011      	str	r1, [r2, #0]
 800492a:	d1e0      	bne.n	80048ee <_free_r+0x26>
 800492c:	681c      	ldr	r4, [r3, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	6053      	str	r3, [r2, #4]
 8004932:	440c      	add	r4, r1
 8004934:	6014      	str	r4, [r2, #0]
 8004936:	e7da      	b.n	80048ee <_free_r+0x26>
 8004938:	d902      	bls.n	8004940 <_free_r+0x78>
 800493a:	230c      	movs	r3, #12
 800493c:	6003      	str	r3, [r0, #0]
 800493e:	e7d6      	b.n	80048ee <_free_r+0x26>
 8004940:	6825      	ldr	r5, [r4, #0]
 8004942:	1961      	adds	r1, r4, r5
 8004944:	428b      	cmp	r3, r1
 8004946:	bf04      	itt	eq
 8004948:	6819      	ldreq	r1, [r3, #0]
 800494a:	685b      	ldreq	r3, [r3, #4]
 800494c:	6063      	str	r3, [r4, #4]
 800494e:	bf04      	itt	eq
 8004950:	1949      	addeq	r1, r1, r5
 8004952:	6021      	streq	r1, [r4, #0]
 8004954:	6054      	str	r4, [r2, #4]
 8004956:	e7ca      	b.n	80048ee <_free_r+0x26>
 8004958:	b003      	add	sp, #12
 800495a:	bd30      	pop	{r4, r5, pc}
 800495c:	200002e4 	.word	0x200002e4

08004960 <sbrk_aligned>:
 8004960:	b570      	push	{r4, r5, r6, lr}
 8004962:	4e0e      	ldr	r6, [pc, #56]	; (800499c <sbrk_aligned+0x3c>)
 8004964:	460c      	mov	r4, r1
 8004966:	6831      	ldr	r1, [r6, #0]
 8004968:	4605      	mov	r5, r0
 800496a:	b911      	cbnz	r1, 8004972 <sbrk_aligned+0x12>
 800496c:	f000 fba6 	bl	80050bc <_sbrk_r>
 8004970:	6030      	str	r0, [r6, #0]
 8004972:	4621      	mov	r1, r4
 8004974:	4628      	mov	r0, r5
 8004976:	f000 fba1 	bl	80050bc <_sbrk_r>
 800497a:	1c43      	adds	r3, r0, #1
 800497c:	d00a      	beq.n	8004994 <sbrk_aligned+0x34>
 800497e:	1cc4      	adds	r4, r0, #3
 8004980:	f024 0403 	bic.w	r4, r4, #3
 8004984:	42a0      	cmp	r0, r4
 8004986:	d007      	beq.n	8004998 <sbrk_aligned+0x38>
 8004988:	1a21      	subs	r1, r4, r0
 800498a:	4628      	mov	r0, r5
 800498c:	f000 fb96 	bl	80050bc <_sbrk_r>
 8004990:	3001      	adds	r0, #1
 8004992:	d101      	bne.n	8004998 <sbrk_aligned+0x38>
 8004994:	f04f 34ff 	mov.w	r4, #4294967295
 8004998:	4620      	mov	r0, r4
 800499a:	bd70      	pop	{r4, r5, r6, pc}
 800499c:	200002e8 	.word	0x200002e8

080049a0 <_malloc_r>:
 80049a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049a4:	1ccd      	adds	r5, r1, #3
 80049a6:	f025 0503 	bic.w	r5, r5, #3
 80049aa:	3508      	adds	r5, #8
 80049ac:	2d0c      	cmp	r5, #12
 80049ae:	bf38      	it	cc
 80049b0:	250c      	movcc	r5, #12
 80049b2:	2d00      	cmp	r5, #0
 80049b4:	4607      	mov	r7, r0
 80049b6:	db01      	blt.n	80049bc <_malloc_r+0x1c>
 80049b8:	42a9      	cmp	r1, r5
 80049ba:	d905      	bls.n	80049c8 <_malloc_r+0x28>
 80049bc:	230c      	movs	r3, #12
 80049be:	603b      	str	r3, [r7, #0]
 80049c0:	2600      	movs	r6, #0
 80049c2:	4630      	mov	r0, r6
 80049c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004a9c <_malloc_r+0xfc>
 80049cc:	f000 f868 	bl	8004aa0 <__malloc_lock>
 80049d0:	f8d8 3000 	ldr.w	r3, [r8]
 80049d4:	461c      	mov	r4, r3
 80049d6:	bb5c      	cbnz	r4, 8004a30 <_malloc_r+0x90>
 80049d8:	4629      	mov	r1, r5
 80049da:	4638      	mov	r0, r7
 80049dc:	f7ff ffc0 	bl	8004960 <sbrk_aligned>
 80049e0:	1c43      	adds	r3, r0, #1
 80049e2:	4604      	mov	r4, r0
 80049e4:	d155      	bne.n	8004a92 <_malloc_r+0xf2>
 80049e6:	f8d8 4000 	ldr.w	r4, [r8]
 80049ea:	4626      	mov	r6, r4
 80049ec:	2e00      	cmp	r6, #0
 80049ee:	d145      	bne.n	8004a7c <_malloc_r+0xdc>
 80049f0:	2c00      	cmp	r4, #0
 80049f2:	d048      	beq.n	8004a86 <_malloc_r+0xe6>
 80049f4:	6823      	ldr	r3, [r4, #0]
 80049f6:	4631      	mov	r1, r6
 80049f8:	4638      	mov	r0, r7
 80049fa:	eb04 0903 	add.w	r9, r4, r3
 80049fe:	f000 fb5d 	bl	80050bc <_sbrk_r>
 8004a02:	4581      	cmp	r9, r0
 8004a04:	d13f      	bne.n	8004a86 <_malloc_r+0xe6>
 8004a06:	6821      	ldr	r1, [r4, #0]
 8004a08:	1a6d      	subs	r5, r5, r1
 8004a0a:	4629      	mov	r1, r5
 8004a0c:	4638      	mov	r0, r7
 8004a0e:	f7ff ffa7 	bl	8004960 <sbrk_aligned>
 8004a12:	3001      	adds	r0, #1
 8004a14:	d037      	beq.n	8004a86 <_malloc_r+0xe6>
 8004a16:	6823      	ldr	r3, [r4, #0]
 8004a18:	442b      	add	r3, r5
 8004a1a:	6023      	str	r3, [r4, #0]
 8004a1c:	f8d8 3000 	ldr.w	r3, [r8]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d038      	beq.n	8004a96 <_malloc_r+0xf6>
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	42a2      	cmp	r2, r4
 8004a28:	d12b      	bne.n	8004a82 <_malloc_r+0xe2>
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	605a      	str	r2, [r3, #4]
 8004a2e:	e00f      	b.n	8004a50 <_malloc_r+0xb0>
 8004a30:	6822      	ldr	r2, [r4, #0]
 8004a32:	1b52      	subs	r2, r2, r5
 8004a34:	d41f      	bmi.n	8004a76 <_malloc_r+0xd6>
 8004a36:	2a0b      	cmp	r2, #11
 8004a38:	d917      	bls.n	8004a6a <_malloc_r+0xca>
 8004a3a:	1961      	adds	r1, r4, r5
 8004a3c:	42a3      	cmp	r3, r4
 8004a3e:	6025      	str	r5, [r4, #0]
 8004a40:	bf18      	it	ne
 8004a42:	6059      	strne	r1, [r3, #4]
 8004a44:	6863      	ldr	r3, [r4, #4]
 8004a46:	bf08      	it	eq
 8004a48:	f8c8 1000 	streq.w	r1, [r8]
 8004a4c:	5162      	str	r2, [r4, r5]
 8004a4e:	604b      	str	r3, [r1, #4]
 8004a50:	4638      	mov	r0, r7
 8004a52:	f104 060b 	add.w	r6, r4, #11
 8004a56:	f000 f829 	bl	8004aac <__malloc_unlock>
 8004a5a:	f026 0607 	bic.w	r6, r6, #7
 8004a5e:	1d23      	adds	r3, r4, #4
 8004a60:	1af2      	subs	r2, r6, r3
 8004a62:	d0ae      	beq.n	80049c2 <_malloc_r+0x22>
 8004a64:	1b9b      	subs	r3, r3, r6
 8004a66:	50a3      	str	r3, [r4, r2]
 8004a68:	e7ab      	b.n	80049c2 <_malloc_r+0x22>
 8004a6a:	42a3      	cmp	r3, r4
 8004a6c:	6862      	ldr	r2, [r4, #4]
 8004a6e:	d1dd      	bne.n	8004a2c <_malloc_r+0x8c>
 8004a70:	f8c8 2000 	str.w	r2, [r8]
 8004a74:	e7ec      	b.n	8004a50 <_malloc_r+0xb0>
 8004a76:	4623      	mov	r3, r4
 8004a78:	6864      	ldr	r4, [r4, #4]
 8004a7a:	e7ac      	b.n	80049d6 <_malloc_r+0x36>
 8004a7c:	4634      	mov	r4, r6
 8004a7e:	6876      	ldr	r6, [r6, #4]
 8004a80:	e7b4      	b.n	80049ec <_malloc_r+0x4c>
 8004a82:	4613      	mov	r3, r2
 8004a84:	e7cc      	b.n	8004a20 <_malloc_r+0x80>
 8004a86:	230c      	movs	r3, #12
 8004a88:	603b      	str	r3, [r7, #0]
 8004a8a:	4638      	mov	r0, r7
 8004a8c:	f000 f80e 	bl	8004aac <__malloc_unlock>
 8004a90:	e797      	b.n	80049c2 <_malloc_r+0x22>
 8004a92:	6025      	str	r5, [r4, #0]
 8004a94:	e7dc      	b.n	8004a50 <_malloc_r+0xb0>
 8004a96:	605b      	str	r3, [r3, #4]
 8004a98:	deff      	udf	#255	; 0xff
 8004a9a:	bf00      	nop
 8004a9c:	200002e4 	.word	0x200002e4

08004aa0 <__malloc_lock>:
 8004aa0:	4801      	ldr	r0, [pc, #4]	; (8004aa8 <__malloc_lock+0x8>)
 8004aa2:	f7ff bf0f 	b.w	80048c4 <__retarget_lock_acquire_recursive>
 8004aa6:	bf00      	nop
 8004aa8:	200002e0 	.word	0x200002e0

08004aac <__malloc_unlock>:
 8004aac:	4801      	ldr	r0, [pc, #4]	; (8004ab4 <__malloc_unlock+0x8>)
 8004aae:	f7ff bf0a 	b.w	80048c6 <__retarget_lock_release_recursive>
 8004ab2:	bf00      	nop
 8004ab4:	200002e0 	.word	0x200002e0

08004ab8 <__ssputs_r>:
 8004ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004abc:	688e      	ldr	r6, [r1, #8]
 8004abe:	461f      	mov	r7, r3
 8004ac0:	42be      	cmp	r6, r7
 8004ac2:	680b      	ldr	r3, [r1, #0]
 8004ac4:	4682      	mov	sl, r0
 8004ac6:	460c      	mov	r4, r1
 8004ac8:	4690      	mov	r8, r2
 8004aca:	d82c      	bhi.n	8004b26 <__ssputs_r+0x6e>
 8004acc:	898a      	ldrh	r2, [r1, #12]
 8004ace:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ad2:	d026      	beq.n	8004b22 <__ssputs_r+0x6a>
 8004ad4:	6965      	ldr	r5, [r4, #20]
 8004ad6:	6909      	ldr	r1, [r1, #16]
 8004ad8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004adc:	eba3 0901 	sub.w	r9, r3, r1
 8004ae0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ae4:	1c7b      	adds	r3, r7, #1
 8004ae6:	444b      	add	r3, r9
 8004ae8:	106d      	asrs	r5, r5, #1
 8004aea:	429d      	cmp	r5, r3
 8004aec:	bf38      	it	cc
 8004aee:	461d      	movcc	r5, r3
 8004af0:	0553      	lsls	r3, r2, #21
 8004af2:	d527      	bpl.n	8004b44 <__ssputs_r+0x8c>
 8004af4:	4629      	mov	r1, r5
 8004af6:	f7ff ff53 	bl	80049a0 <_malloc_r>
 8004afa:	4606      	mov	r6, r0
 8004afc:	b360      	cbz	r0, 8004b58 <__ssputs_r+0xa0>
 8004afe:	6921      	ldr	r1, [r4, #16]
 8004b00:	464a      	mov	r2, r9
 8004b02:	f000 faeb 	bl	80050dc <memcpy>
 8004b06:	89a3      	ldrh	r3, [r4, #12]
 8004b08:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b10:	81a3      	strh	r3, [r4, #12]
 8004b12:	6126      	str	r6, [r4, #16]
 8004b14:	6165      	str	r5, [r4, #20]
 8004b16:	444e      	add	r6, r9
 8004b18:	eba5 0509 	sub.w	r5, r5, r9
 8004b1c:	6026      	str	r6, [r4, #0]
 8004b1e:	60a5      	str	r5, [r4, #8]
 8004b20:	463e      	mov	r6, r7
 8004b22:	42be      	cmp	r6, r7
 8004b24:	d900      	bls.n	8004b28 <__ssputs_r+0x70>
 8004b26:	463e      	mov	r6, r7
 8004b28:	6820      	ldr	r0, [r4, #0]
 8004b2a:	4632      	mov	r2, r6
 8004b2c:	4641      	mov	r1, r8
 8004b2e:	f000 faab 	bl	8005088 <memmove>
 8004b32:	68a3      	ldr	r3, [r4, #8]
 8004b34:	1b9b      	subs	r3, r3, r6
 8004b36:	60a3      	str	r3, [r4, #8]
 8004b38:	6823      	ldr	r3, [r4, #0]
 8004b3a:	4433      	add	r3, r6
 8004b3c:	6023      	str	r3, [r4, #0]
 8004b3e:	2000      	movs	r0, #0
 8004b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b44:	462a      	mov	r2, r5
 8004b46:	f000 fad7 	bl	80050f8 <_realloc_r>
 8004b4a:	4606      	mov	r6, r0
 8004b4c:	2800      	cmp	r0, #0
 8004b4e:	d1e0      	bne.n	8004b12 <__ssputs_r+0x5a>
 8004b50:	6921      	ldr	r1, [r4, #16]
 8004b52:	4650      	mov	r0, sl
 8004b54:	f7ff feb8 	bl	80048c8 <_free_r>
 8004b58:	230c      	movs	r3, #12
 8004b5a:	f8ca 3000 	str.w	r3, [sl]
 8004b5e:	89a3      	ldrh	r3, [r4, #12]
 8004b60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b64:	81a3      	strh	r3, [r4, #12]
 8004b66:	f04f 30ff 	mov.w	r0, #4294967295
 8004b6a:	e7e9      	b.n	8004b40 <__ssputs_r+0x88>

08004b6c <_svfiprintf_r>:
 8004b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b70:	4698      	mov	r8, r3
 8004b72:	898b      	ldrh	r3, [r1, #12]
 8004b74:	061b      	lsls	r3, r3, #24
 8004b76:	b09d      	sub	sp, #116	; 0x74
 8004b78:	4607      	mov	r7, r0
 8004b7a:	460d      	mov	r5, r1
 8004b7c:	4614      	mov	r4, r2
 8004b7e:	d50e      	bpl.n	8004b9e <_svfiprintf_r+0x32>
 8004b80:	690b      	ldr	r3, [r1, #16]
 8004b82:	b963      	cbnz	r3, 8004b9e <_svfiprintf_r+0x32>
 8004b84:	2140      	movs	r1, #64	; 0x40
 8004b86:	f7ff ff0b 	bl	80049a0 <_malloc_r>
 8004b8a:	6028      	str	r0, [r5, #0]
 8004b8c:	6128      	str	r0, [r5, #16]
 8004b8e:	b920      	cbnz	r0, 8004b9a <_svfiprintf_r+0x2e>
 8004b90:	230c      	movs	r3, #12
 8004b92:	603b      	str	r3, [r7, #0]
 8004b94:	f04f 30ff 	mov.w	r0, #4294967295
 8004b98:	e0d0      	b.n	8004d3c <_svfiprintf_r+0x1d0>
 8004b9a:	2340      	movs	r3, #64	; 0x40
 8004b9c:	616b      	str	r3, [r5, #20]
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	9309      	str	r3, [sp, #36]	; 0x24
 8004ba2:	2320      	movs	r3, #32
 8004ba4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ba8:	f8cd 800c 	str.w	r8, [sp, #12]
 8004bac:	2330      	movs	r3, #48	; 0x30
 8004bae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004d54 <_svfiprintf_r+0x1e8>
 8004bb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004bb6:	f04f 0901 	mov.w	r9, #1
 8004bba:	4623      	mov	r3, r4
 8004bbc:	469a      	mov	sl, r3
 8004bbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bc2:	b10a      	cbz	r2, 8004bc8 <_svfiprintf_r+0x5c>
 8004bc4:	2a25      	cmp	r2, #37	; 0x25
 8004bc6:	d1f9      	bne.n	8004bbc <_svfiprintf_r+0x50>
 8004bc8:	ebba 0b04 	subs.w	fp, sl, r4
 8004bcc:	d00b      	beq.n	8004be6 <_svfiprintf_r+0x7a>
 8004bce:	465b      	mov	r3, fp
 8004bd0:	4622      	mov	r2, r4
 8004bd2:	4629      	mov	r1, r5
 8004bd4:	4638      	mov	r0, r7
 8004bd6:	f7ff ff6f 	bl	8004ab8 <__ssputs_r>
 8004bda:	3001      	adds	r0, #1
 8004bdc:	f000 80a9 	beq.w	8004d32 <_svfiprintf_r+0x1c6>
 8004be0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004be2:	445a      	add	r2, fp
 8004be4:	9209      	str	r2, [sp, #36]	; 0x24
 8004be6:	f89a 3000 	ldrb.w	r3, [sl]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f000 80a1 	beq.w	8004d32 <_svfiprintf_r+0x1c6>
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8004bf6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bfa:	f10a 0a01 	add.w	sl, sl, #1
 8004bfe:	9304      	str	r3, [sp, #16]
 8004c00:	9307      	str	r3, [sp, #28]
 8004c02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c06:	931a      	str	r3, [sp, #104]	; 0x68
 8004c08:	4654      	mov	r4, sl
 8004c0a:	2205      	movs	r2, #5
 8004c0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c10:	4850      	ldr	r0, [pc, #320]	; (8004d54 <_svfiprintf_r+0x1e8>)
 8004c12:	f7fb fae5 	bl	80001e0 <memchr>
 8004c16:	9a04      	ldr	r2, [sp, #16]
 8004c18:	b9d8      	cbnz	r0, 8004c52 <_svfiprintf_r+0xe6>
 8004c1a:	06d0      	lsls	r0, r2, #27
 8004c1c:	bf44      	itt	mi
 8004c1e:	2320      	movmi	r3, #32
 8004c20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c24:	0711      	lsls	r1, r2, #28
 8004c26:	bf44      	itt	mi
 8004c28:	232b      	movmi	r3, #43	; 0x2b
 8004c2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c2e:	f89a 3000 	ldrb.w	r3, [sl]
 8004c32:	2b2a      	cmp	r3, #42	; 0x2a
 8004c34:	d015      	beq.n	8004c62 <_svfiprintf_r+0xf6>
 8004c36:	9a07      	ldr	r2, [sp, #28]
 8004c38:	4654      	mov	r4, sl
 8004c3a:	2000      	movs	r0, #0
 8004c3c:	f04f 0c0a 	mov.w	ip, #10
 8004c40:	4621      	mov	r1, r4
 8004c42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c46:	3b30      	subs	r3, #48	; 0x30
 8004c48:	2b09      	cmp	r3, #9
 8004c4a:	d94d      	bls.n	8004ce8 <_svfiprintf_r+0x17c>
 8004c4c:	b1b0      	cbz	r0, 8004c7c <_svfiprintf_r+0x110>
 8004c4e:	9207      	str	r2, [sp, #28]
 8004c50:	e014      	b.n	8004c7c <_svfiprintf_r+0x110>
 8004c52:	eba0 0308 	sub.w	r3, r0, r8
 8004c56:	fa09 f303 	lsl.w	r3, r9, r3
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	9304      	str	r3, [sp, #16]
 8004c5e:	46a2      	mov	sl, r4
 8004c60:	e7d2      	b.n	8004c08 <_svfiprintf_r+0x9c>
 8004c62:	9b03      	ldr	r3, [sp, #12]
 8004c64:	1d19      	adds	r1, r3, #4
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	9103      	str	r1, [sp, #12]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	bfbb      	ittet	lt
 8004c6e:	425b      	neglt	r3, r3
 8004c70:	f042 0202 	orrlt.w	r2, r2, #2
 8004c74:	9307      	strge	r3, [sp, #28]
 8004c76:	9307      	strlt	r3, [sp, #28]
 8004c78:	bfb8      	it	lt
 8004c7a:	9204      	strlt	r2, [sp, #16]
 8004c7c:	7823      	ldrb	r3, [r4, #0]
 8004c7e:	2b2e      	cmp	r3, #46	; 0x2e
 8004c80:	d10c      	bne.n	8004c9c <_svfiprintf_r+0x130>
 8004c82:	7863      	ldrb	r3, [r4, #1]
 8004c84:	2b2a      	cmp	r3, #42	; 0x2a
 8004c86:	d134      	bne.n	8004cf2 <_svfiprintf_r+0x186>
 8004c88:	9b03      	ldr	r3, [sp, #12]
 8004c8a:	1d1a      	adds	r2, r3, #4
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	9203      	str	r2, [sp, #12]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	bfb8      	it	lt
 8004c94:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c98:	3402      	adds	r4, #2
 8004c9a:	9305      	str	r3, [sp, #20]
 8004c9c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004d64 <_svfiprintf_r+0x1f8>
 8004ca0:	7821      	ldrb	r1, [r4, #0]
 8004ca2:	2203      	movs	r2, #3
 8004ca4:	4650      	mov	r0, sl
 8004ca6:	f7fb fa9b 	bl	80001e0 <memchr>
 8004caa:	b138      	cbz	r0, 8004cbc <_svfiprintf_r+0x150>
 8004cac:	9b04      	ldr	r3, [sp, #16]
 8004cae:	eba0 000a 	sub.w	r0, r0, sl
 8004cb2:	2240      	movs	r2, #64	; 0x40
 8004cb4:	4082      	lsls	r2, r0
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	3401      	adds	r4, #1
 8004cba:	9304      	str	r3, [sp, #16]
 8004cbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cc0:	4825      	ldr	r0, [pc, #148]	; (8004d58 <_svfiprintf_r+0x1ec>)
 8004cc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004cc6:	2206      	movs	r2, #6
 8004cc8:	f7fb fa8a 	bl	80001e0 <memchr>
 8004ccc:	2800      	cmp	r0, #0
 8004cce:	d038      	beq.n	8004d42 <_svfiprintf_r+0x1d6>
 8004cd0:	4b22      	ldr	r3, [pc, #136]	; (8004d5c <_svfiprintf_r+0x1f0>)
 8004cd2:	bb1b      	cbnz	r3, 8004d1c <_svfiprintf_r+0x1b0>
 8004cd4:	9b03      	ldr	r3, [sp, #12]
 8004cd6:	3307      	adds	r3, #7
 8004cd8:	f023 0307 	bic.w	r3, r3, #7
 8004cdc:	3308      	adds	r3, #8
 8004cde:	9303      	str	r3, [sp, #12]
 8004ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ce2:	4433      	add	r3, r6
 8004ce4:	9309      	str	r3, [sp, #36]	; 0x24
 8004ce6:	e768      	b.n	8004bba <_svfiprintf_r+0x4e>
 8004ce8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cec:	460c      	mov	r4, r1
 8004cee:	2001      	movs	r0, #1
 8004cf0:	e7a6      	b.n	8004c40 <_svfiprintf_r+0xd4>
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	3401      	adds	r4, #1
 8004cf6:	9305      	str	r3, [sp, #20]
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	f04f 0c0a 	mov.w	ip, #10
 8004cfe:	4620      	mov	r0, r4
 8004d00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d04:	3a30      	subs	r2, #48	; 0x30
 8004d06:	2a09      	cmp	r2, #9
 8004d08:	d903      	bls.n	8004d12 <_svfiprintf_r+0x1a6>
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d0c6      	beq.n	8004c9c <_svfiprintf_r+0x130>
 8004d0e:	9105      	str	r1, [sp, #20]
 8004d10:	e7c4      	b.n	8004c9c <_svfiprintf_r+0x130>
 8004d12:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d16:	4604      	mov	r4, r0
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e7f0      	b.n	8004cfe <_svfiprintf_r+0x192>
 8004d1c:	ab03      	add	r3, sp, #12
 8004d1e:	9300      	str	r3, [sp, #0]
 8004d20:	462a      	mov	r2, r5
 8004d22:	4b0f      	ldr	r3, [pc, #60]	; (8004d60 <_svfiprintf_r+0x1f4>)
 8004d24:	a904      	add	r1, sp, #16
 8004d26:	4638      	mov	r0, r7
 8004d28:	f3af 8000 	nop.w
 8004d2c:	1c42      	adds	r2, r0, #1
 8004d2e:	4606      	mov	r6, r0
 8004d30:	d1d6      	bne.n	8004ce0 <_svfiprintf_r+0x174>
 8004d32:	89ab      	ldrh	r3, [r5, #12]
 8004d34:	065b      	lsls	r3, r3, #25
 8004d36:	f53f af2d 	bmi.w	8004b94 <_svfiprintf_r+0x28>
 8004d3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d3c:	b01d      	add	sp, #116	; 0x74
 8004d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d42:	ab03      	add	r3, sp, #12
 8004d44:	9300      	str	r3, [sp, #0]
 8004d46:	462a      	mov	r2, r5
 8004d48:	4b05      	ldr	r3, [pc, #20]	; (8004d60 <_svfiprintf_r+0x1f4>)
 8004d4a:	a904      	add	r1, sp, #16
 8004d4c:	4638      	mov	r0, r7
 8004d4e:	f000 f879 	bl	8004e44 <_printf_i>
 8004d52:	e7eb      	b.n	8004d2c <_svfiprintf_r+0x1c0>
 8004d54:	080051b4 	.word	0x080051b4
 8004d58:	080051be 	.word	0x080051be
 8004d5c:	00000000 	.word	0x00000000
 8004d60:	08004ab9 	.word	0x08004ab9
 8004d64:	080051ba 	.word	0x080051ba

08004d68 <_printf_common>:
 8004d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d6c:	4616      	mov	r6, r2
 8004d6e:	4699      	mov	r9, r3
 8004d70:	688a      	ldr	r2, [r1, #8]
 8004d72:	690b      	ldr	r3, [r1, #16]
 8004d74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	bfb8      	it	lt
 8004d7c:	4613      	movlt	r3, r2
 8004d7e:	6033      	str	r3, [r6, #0]
 8004d80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d84:	4607      	mov	r7, r0
 8004d86:	460c      	mov	r4, r1
 8004d88:	b10a      	cbz	r2, 8004d8e <_printf_common+0x26>
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	6033      	str	r3, [r6, #0]
 8004d8e:	6823      	ldr	r3, [r4, #0]
 8004d90:	0699      	lsls	r1, r3, #26
 8004d92:	bf42      	ittt	mi
 8004d94:	6833      	ldrmi	r3, [r6, #0]
 8004d96:	3302      	addmi	r3, #2
 8004d98:	6033      	strmi	r3, [r6, #0]
 8004d9a:	6825      	ldr	r5, [r4, #0]
 8004d9c:	f015 0506 	ands.w	r5, r5, #6
 8004da0:	d106      	bne.n	8004db0 <_printf_common+0x48>
 8004da2:	f104 0a19 	add.w	sl, r4, #25
 8004da6:	68e3      	ldr	r3, [r4, #12]
 8004da8:	6832      	ldr	r2, [r6, #0]
 8004daa:	1a9b      	subs	r3, r3, r2
 8004dac:	42ab      	cmp	r3, r5
 8004dae:	dc26      	bgt.n	8004dfe <_printf_common+0x96>
 8004db0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004db4:	1e13      	subs	r3, r2, #0
 8004db6:	6822      	ldr	r2, [r4, #0]
 8004db8:	bf18      	it	ne
 8004dba:	2301      	movne	r3, #1
 8004dbc:	0692      	lsls	r2, r2, #26
 8004dbe:	d42b      	bmi.n	8004e18 <_printf_common+0xb0>
 8004dc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004dc4:	4649      	mov	r1, r9
 8004dc6:	4638      	mov	r0, r7
 8004dc8:	47c0      	blx	r8
 8004dca:	3001      	adds	r0, #1
 8004dcc:	d01e      	beq.n	8004e0c <_printf_common+0xa4>
 8004dce:	6823      	ldr	r3, [r4, #0]
 8004dd0:	6922      	ldr	r2, [r4, #16]
 8004dd2:	f003 0306 	and.w	r3, r3, #6
 8004dd6:	2b04      	cmp	r3, #4
 8004dd8:	bf02      	ittt	eq
 8004dda:	68e5      	ldreq	r5, [r4, #12]
 8004ddc:	6833      	ldreq	r3, [r6, #0]
 8004dde:	1aed      	subeq	r5, r5, r3
 8004de0:	68a3      	ldr	r3, [r4, #8]
 8004de2:	bf0c      	ite	eq
 8004de4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004de8:	2500      	movne	r5, #0
 8004dea:	4293      	cmp	r3, r2
 8004dec:	bfc4      	itt	gt
 8004dee:	1a9b      	subgt	r3, r3, r2
 8004df0:	18ed      	addgt	r5, r5, r3
 8004df2:	2600      	movs	r6, #0
 8004df4:	341a      	adds	r4, #26
 8004df6:	42b5      	cmp	r5, r6
 8004df8:	d11a      	bne.n	8004e30 <_printf_common+0xc8>
 8004dfa:	2000      	movs	r0, #0
 8004dfc:	e008      	b.n	8004e10 <_printf_common+0xa8>
 8004dfe:	2301      	movs	r3, #1
 8004e00:	4652      	mov	r2, sl
 8004e02:	4649      	mov	r1, r9
 8004e04:	4638      	mov	r0, r7
 8004e06:	47c0      	blx	r8
 8004e08:	3001      	adds	r0, #1
 8004e0a:	d103      	bne.n	8004e14 <_printf_common+0xac>
 8004e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e14:	3501      	adds	r5, #1
 8004e16:	e7c6      	b.n	8004da6 <_printf_common+0x3e>
 8004e18:	18e1      	adds	r1, r4, r3
 8004e1a:	1c5a      	adds	r2, r3, #1
 8004e1c:	2030      	movs	r0, #48	; 0x30
 8004e1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e22:	4422      	add	r2, r4
 8004e24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e2c:	3302      	adds	r3, #2
 8004e2e:	e7c7      	b.n	8004dc0 <_printf_common+0x58>
 8004e30:	2301      	movs	r3, #1
 8004e32:	4622      	mov	r2, r4
 8004e34:	4649      	mov	r1, r9
 8004e36:	4638      	mov	r0, r7
 8004e38:	47c0      	blx	r8
 8004e3a:	3001      	adds	r0, #1
 8004e3c:	d0e6      	beq.n	8004e0c <_printf_common+0xa4>
 8004e3e:	3601      	adds	r6, #1
 8004e40:	e7d9      	b.n	8004df6 <_printf_common+0x8e>
	...

08004e44 <_printf_i>:
 8004e44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e48:	7e0f      	ldrb	r7, [r1, #24]
 8004e4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e4c:	2f78      	cmp	r7, #120	; 0x78
 8004e4e:	4691      	mov	r9, r2
 8004e50:	4680      	mov	r8, r0
 8004e52:	460c      	mov	r4, r1
 8004e54:	469a      	mov	sl, r3
 8004e56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e5a:	d807      	bhi.n	8004e6c <_printf_i+0x28>
 8004e5c:	2f62      	cmp	r7, #98	; 0x62
 8004e5e:	d80a      	bhi.n	8004e76 <_printf_i+0x32>
 8004e60:	2f00      	cmp	r7, #0
 8004e62:	f000 80d4 	beq.w	800500e <_printf_i+0x1ca>
 8004e66:	2f58      	cmp	r7, #88	; 0x58
 8004e68:	f000 80c0 	beq.w	8004fec <_printf_i+0x1a8>
 8004e6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e74:	e03a      	b.n	8004eec <_printf_i+0xa8>
 8004e76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e7a:	2b15      	cmp	r3, #21
 8004e7c:	d8f6      	bhi.n	8004e6c <_printf_i+0x28>
 8004e7e:	a101      	add	r1, pc, #4	; (adr r1, 8004e84 <_printf_i+0x40>)
 8004e80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e84:	08004edd 	.word	0x08004edd
 8004e88:	08004ef1 	.word	0x08004ef1
 8004e8c:	08004e6d 	.word	0x08004e6d
 8004e90:	08004e6d 	.word	0x08004e6d
 8004e94:	08004e6d 	.word	0x08004e6d
 8004e98:	08004e6d 	.word	0x08004e6d
 8004e9c:	08004ef1 	.word	0x08004ef1
 8004ea0:	08004e6d 	.word	0x08004e6d
 8004ea4:	08004e6d 	.word	0x08004e6d
 8004ea8:	08004e6d 	.word	0x08004e6d
 8004eac:	08004e6d 	.word	0x08004e6d
 8004eb0:	08004ff5 	.word	0x08004ff5
 8004eb4:	08004f1d 	.word	0x08004f1d
 8004eb8:	08004faf 	.word	0x08004faf
 8004ebc:	08004e6d 	.word	0x08004e6d
 8004ec0:	08004e6d 	.word	0x08004e6d
 8004ec4:	08005017 	.word	0x08005017
 8004ec8:	08004e6d 	.word	0x08004e6d
 8004ecc:	08004f1d 	.word	0x08004f1d
 8004ed0:	08004e6d 	.word	0x08004e6d
 8004ed4:	08004e6d 	.word	0x08004e6d
 8004ed8:	08004fb7 	.word	0x08004fb7
 8004edc:	682b      	ldr	r3, [r5, #0]
 8004ede:	1d1a      	adds	r2, r3, #4
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	602a      	str	r2, [r5, #0]
 8004ee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ee8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004eec:	2301      	movs	r3, #1
 8004eee:	e09f      	b.n	8005030 <_printf_i+0x1ec>
 8004ef0:	6820      	ldr	r0, [r4, #0]
 8004ef2:	682b      	ldr	r3, [r5, #0]
 8004ef4:	0607      	lsls	r7, r0, #24
 8004ef6:	f103 0104 	add.w	r1, r3, #4
 8004efa:	6029      	str	r1, [r5, #0]
 8004efc:	d501      	bpl.n	8004f02 <_printf_i+0xbe>
 8004efe:	681e      	ldr	r6, [r3, #0]
 8004f00:	e003      	b.n	8004f0a <_printf_i+0xc6>
 8004f02:	0646      	lsls	r6, r0, #25
 8004f04:	d5fb      	bpl.n	8004efe <_printf_i+0xba>
 8004f06:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004f0a:	2e00      	cmp	r6, #0
 8004f0c:	da03      	bge.n	8004f16 <_printf_i+0xd2>
 8004f0e:	232d      	movs	r3, #45	; 0x2d
 8004f10:	4276      	negs	r6, r6
 8004f12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f16:	485a      	ldr	r0, [pc, #360]	; (8005080 <_printf_i+0x23c>)
 8004f18:	230a      	movs	r3, #10
 8004f1a:	e012      	b.n	8004f42 <_printf_i+0xfe>
 8004f1c:	682b      	ldr	r3, [r5, #0]
 8004f1e:	6820      	ldr	r0, [r4, #0]
 8004f20:	1d19      	adds	r1, r3, #4
 8004f22:	6029      	str	r1, [r5, #0]
 8004f24:	0605      	lsls	r5, r0, #24
 8004f26:	d501      	bpl.n	8004f2c <_printf_i+0xe8>
 8004f28:	681e      	ldr	r6, [r3, #0]
 8004f2a:	e002      	b.n	8004f32 <_printf_i+0xee>
 8004f2c:	0641      	lsls	r1, r0, #25
 8004f2e:	d5fb      	bpl.n	8004f28 <_printf_i+0xe4>
 8004f30:	881e      	ldrh	r6, [r3, #0]
 8004f32:	4853      	ldr	r0, [pc, #332]	; (8005080 <_printf_i+0x23c>)
 8004f34:	2f6f      	cmp	r7, #111	; 0x6f
 8004f36:	bf0c      	ite	eq
 8004f38:	2308      	moveq	r3, #8
 8004f3a:	230a      	movne	r3, #10
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f42:	6865      	ldr	r5, [r4, #4]
 8004f44:	60a5      	str	r5, [r4, #8]
 8004f46:	2d00      	cmp	r5, #0
 8004f48:	bfa2      	ittt	ge
 8004f4a:	6821      	ldrge	r1, [r4, #0]
 8004f4c:	f021 0104 	bicge.w	r1, r1, #4
 8004f50:	6021      	strge	r1, [r4, #0]
 8004f52:	b90e      	cbnz	r6, 8004f58 <_printf_i+0x114>
 8004f54:	2d00      	cmp	r5, #0
 8004f56:	d04b      	beq.n	8004ff0 <_printf_i+0x1ac>
 8004f58:	4615      	mov	r5, r2
 8004f5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f5e:	fb03 6711 	mls	r7, r3, r1, r6
 8004f62:	5dc7      	ldrb	r7, [r0, r7]
 8004f64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f68:	4637      	mov	r7, r6
 8004f6a:	42bb      	cmp	r3, r7
 8004f6c:	460e      	mov	r6, r1
 8004f6e:	d9f4      	bls.n	8004f5a <_printf_i+0x116>
 8004f70:	2b08      	cmp	r3, #8
 8004f72:	d10b      	bne.n	8004f8c <_printf_i+0x148>
 8004f74:	6823      	ldr	r3, [r4, #0]
 8004f76:	07de      	lsls	r6, r3, #31
 8004f78:	d508      	bpl.n	8004f8c <_printf_i+0x148>
 8004f7a:	6923      	ldr	r3, [r4, #16]
 8004f7c:	6861      	ldr	r1, [r4, #4]
 8004f7e:	4299      	cmp	r1, r3
 8004f80:	bfde      	ittt	le
 8004f82:	2330      	movle	r3, #48	; 0x30
 8004f84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f8c:	1b52      	subs	r2, r2, r5
 8004f8e:	6122      	str	r2, [r4, #16]
 8004f90:	f8cd a000 	str.w	sl, [sp]
 8004f94:	464b      	mov	r3, r9
 8004f96:	aa03      	add	r2, sp, #12
 8004f98:	4621      	mov	r1, r4
 8004f9a:	4640      	mov	r0, r8
 8004f9c:	f7ff fee4 	bl	8004d68 <_printf_common>
 8004fa0:	3001      	adds	r0, #1
 8004fa2:	d14a      	bne.n	800503a <_printf_i+0x1f6>
 8004fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa8:	b004      	add	sp, #16
 8004faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fae:	6823      	ldr	r3, [r4, #0]
 8004fb0:	f043 0320 	orr.w	r3, r3, #32
 8004fb4:	6023      	str	r3, [r4, #0]
 8004fb6:	4833      	ldr	r0, [pc, #204]	; (8005084 <_printf_i+0x240>)
 8004fb8:	2778      	movs	r7, #120	; 0x78
 8004fba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004fbe:	6823      	ldr	r3, [r4, #0]
 8004fc0:	6829      	ldr	r1, [r5, #0]
 8004fc2:	061f      	lsls	r7, r3, #24
 8004fc4:	f851 6b04 	ldr.w	r6, [r1], #4
 8004fc8:	d402      	bmi.n	8004fd0 <_printf_i+0x18c>
 8004fca:	065f      	lsls	r7, r3, #25
 8004fcc:	bf48      	it	mi
 8004fce:	b2b6      	uxthmi	r6, r6
 8004fd0:	07df      	lsls	r7, r3, #31
 8004fd2:	bf48      	it	mi
 8004fd4:	f043 0320 	orrmi.w	r3, r3, #32
 8004fd8:	6029      	str	r1, [r5, #0]
 8004fda:	bf48      	it	mi
 8004fdc:	6023      	strmi	r3, [r4, #0]
 8004fde:	b91e      	cbnz	r6, 8004fe8 <_printf_i+0x1a4>
 8004fe0:	6823      	ldr	r3, [r4, #0]
 8004fe2:	f023 0320 	bic.w	r3, r3, #32
 8004fe6:	6023      	str	r3, [r4, #0]
 8004fe8:	2310      	movs	r3, #16
 8004fea:	e7a7      	b.n	8004f3c <_printf_i+0xf8>
 8004fec:	4824      	ldr	r0, [pc, #144]	; (8005080 <_printf_i+0x23c>)
 8004fee:	e7e4      	b.n	8004fba <_printf_i+0x176>
 8004ff0:	4615      	mov	r5, r2
 8004ff2:	e7bd      	b.n	8004f70 <_printf_i+0x12c>
 8004ff4:	682b      	ldr	r3, [r5, #0]
 8004ff6:	6826      	ldr	r6, [r4, #0]
 8004ff8:	6961      	ldr	r1, [r4, #20]
 8004ffa:	1d18      	adds	r0, r3, #4
 8004ffc:	6028      	str	r0, [r5, #0]
 8004ffe:	0635      	lsls	r5, r6, #24
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	d501      	bpl.n	8005008 <_printf_i+0x1c4>
 8005004:	6019      	str	r1, [r3, #0]
 8005006:	e002      	b.n	800500e <_printf_i+0x1ca>
 8005008:	0670      	lsls	r0, r6, #25
 800500a:	d5fb      	bpl.n	8005004 <_printf_i+0x1c0>
 800500c:	8019      	strh	r1, [r3, #0]
 800500e:	2300      	movs	r3, #0
 8005010:	6123      	str	r3, [r4, #16]
 8005012:	4615      	mov	r5, r2
 8005014:	e7bc      	b.n	8004f90 <_printf_i+0x14c>
 8005016:	682b      	ldr	r3, [r5, #0]
 8005018:	1d1a      	adds	r2, r3, #4
 800501a:	602a      	str	r2, [r5, #0]
 800501c:	681d      	ldr	r5, [r3, #0]
 800501e:	6862      	ldr	r2, [r4, #4]
 8005020:	2100      	movs	r1, #0
 8005022:	4628      	mov	r0, r5
 8005024:	f7fb f8dc 	bl	80001e0 <memchr>
 8005028:	b108      	cbz	r0, 800502e <_printf_i+0x1ea>
 800502a:	1b40      	subs	r0, r0, r5
 800502c:	6060      	str	r0, [r4, #4]
 800502e:	6863      	ldr	r3, [r4, #4]
 8005030:	6123      	str	r3, [r4, #16]
 8005032:	2300      	movs	r3, #0
 8005034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005038:	e7aa      	b.n	8004f90 <_printf_i+0x14c>
 800503a:	6923      	ldr	r3, [r4, #16]
 800503c:	462a      	mov	r2, r5
 800503e:	4649      	mov	r1, r9
 8005040:	4640      	mov	r0, r8
 8005042:	47d0      	blx	sl
 8005044:	3001      	adds	r0, #1
 8005046:	d0ad      	beq.n	8004fa4 <_printf_i+0x160>
 8005048:	6823      	ldr	r3, [r4, #0]
 800504a:	079b      	lsls	r3, r3, #30
 800504c:	d413      	bmi.n	8005076 <_printf_i+0x232>
 800504e:	68e0      	ldr	r0, [r4, #12]
 8005050:	9b03      	ldr	r3, [sp, #12]
 8005052:	4298      	cmp	r0, r3
 8005054:	bfb8      	it	lt
 8005056:	4618      	movlt	r0, r3
 8005058:	e7a6      	b.n	8004fa8 <_printf_i+0x164>
 800505a:	2301      	movs	r3, #1
 800505c:	4632      	mov	r2, r6
 800505e:	4649      	mov	r1, r9
 8005060:	4640      	mov	r0, r8
 8005062:	47d0      	blx	sl
 8005064:	3001      	adds	r0, #1
 8005066:	d09d      	beq.n	8004fa4 <_printf_i+0x160>
 8005068:	3501      	adds	r5, #1
 800506a:	68e3      	ldr	r3, [r4, #12]
 800506c:	9903      	ldr	r1, [sp, #12]
 800506e:	1a5b      	subs	r3, r3, r1
 8005070:	42ab      	cmp	r3, r5
 8005072:	dcf2      	bgt.n	800505a <_printf_i+0x216>
 8005074:	e7eb      	b.n	800504e <_printf_i+0x20a>
 8005076:	2500      	movs	r5, #0
 8005078:	f104 0619 	add.w	r6, r4, #25
 800507c:	e7f5      	b.n	800506a <_printf_i+0x226>
 800507e:	bf00      	nop
 8005080:	080051c5 	.word	0x080051c5
 8005084:	080051d6 	.word	0x080051d6

08005088 <memmove>:
 8005088:	4288      	cmp	r0, r1
 800508a:	b510      	push	{r4, lr}
 800508c:	eb01 0402 	add.w	r4, r1, r2
 8005090:	d902      	bls.n	8005098 <memmove+0x10>
 8005092:	4284      	cmp	r4, r0
 8005094:	4623      	mov	r3, r4
 8005096:	d807      	bhi.n	80050a8 <memmove+0x20>
 8005098:	1e43      	subs	r3, r0, #1
 800509a:	42a1      	cmp	r1, r4
 800509c:	d008      	beq.n	80050b0 <memmove+0x28>
 800509e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80050a6:	e7f8      	b.n	800509a <memmove+0x12>
 80050a8:	4402      	add	r2, r0
 80050aa:	4601      	mov	r1, r0
 80050ac:	428a      	cmp	r2, r1
 80050ae:	d100      	bne.n	80050b2 <memmove+0x2a>
 80050b0:	bd10      	pop	{r4, pc}
 80050b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80050b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80050ba:	e7f7      	b.n	80050ac <memmove+0x24>

080050bc <_sbrk_r>:
 80050bc:	b538      	push	{r3, r4, r5, lr}
 80050be:	4d06      	ldr	r5, [pc, #24]	; (80050d8 <_sbrk_r+0x1c>)
 80050c0:	2300      	movs	r3, #0
 80050c2:	4604      	mov	r4, r0
 80050c4:	4608      	mov	r0, r1
 80050c6:	602b      	str	r3, [r5, #0]
 80050c8:	f7fc fbf2 	bl	80018b0 <_sbrk>
 80050cc:	1c43      	adds	r3, r0, #1
 80050ce:	d102      	bne.n	80050d6 <_sbrk_r+0x1a>
 80050d0:	682b      	ldr	r3, [r5, #0]
 80050d2:	b103      	cbz	r3, 80050d6 <_sbrk_r+0x1a>
 80050d4:	6023      	str	r3, [r4, #0]
 80050d6:	bd38      	pop	{r3, r4, r5, pc}
 80050d8:	200002dc 	.word	0x200002dc

080050dc <memcpy>:
 80050dc:	440a      	add	r2, r1
 80050de:	4291      	cmp	r1, r2
 80050e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80050e4:	d100      	bne.n	80050e8 <memcpy+0xc>
 80050e6:	4770      	bx	lr
 80050e8:	b510      	push	{r4, lr}
 80050ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050f2:	4291      	cmp	r1, r2
 80050f4:	d1f9      	bne.n	80050ea <memcpy+0xe>
 80050f6:	bd10      	pop	{r4, pc}

080050f8 <_realloc_r>:
 80050f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050fc:	4680      	mov	r8, r0
 80050fe:	4614      	mov	r4, r2
 8005100:	460e      	mov	r6, r1
 8005102:	b921      	cbnz	r1, 800510e <_realloc_r+0x16>
 8005104:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005108:	4611      	mov	r1, r2
 800510a:	f7ff bc49 	b.w	80049a0 <_malloc_r>
 800510e:	b92a      	cbnz	r2, 800511c <_realloc_r+0x24>
 8005110:	f7ff fbda 	bl	80048c8 <_free_r>
 8005114:	4625      	mov	r5, r4
 8005116:	4628      	mov	r0, r5
 8005118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800511c:	f000 f81b 	bl	8005156 <_malloc_usable_size_r>
 8005120:	4284      	cmp	r4, r0
 8005122:	4607      	mov	r7, r0
 8005124:	d802      	bhi.n	800512c <_realloc_r+0x34>
 8005126:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800512a:	d812      	bhi.n	8005152 <_realloc_r+0x5a>
 800512c:	4621      	mov	r1, r4
 800512e:	4640      	mov	r0, r8
 8005130:	f7ff fc36 	bl	80049a0 <_malloc_r>
 8005134:	4605      	mov	r5, r0
 8005136:	2800      	cmp	r0, #0
 8005138:	d0ed      	beq.n	8005116 <_realloc_r+0x1e>
 800513a:	42bc      	cmp	r4, r7
 800513c:	4622      	mov	r2, r4
 800513e:	4631      	mov	r1, r6
 8005140:	bf28      	it	cs
 8005142:	463a      	movcs	r2, r7
 8005144:	f7ff ffca 	bl	80050dc <memcpy>
 8005148:	4631      	mov	r1, r6
 800514a:	4640      	mov	r0, r8
 800514c:	f7ff fbbc 	bl	80048c8 <_free_r>
 8005150:	e7e1      	b.n	8005116 <_realloc_r+0x1e>
 8005152:	4635      	mov	r5, r6
 8005154:	e7df      	b.n	8005116 <_realloc_r+0x1e>

08005156 <_malloc_usable_size_r>:
 8005156:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800515a:	1f18      	subs	r0, r3, #4
 800515c:	2b00      	cmp	r3, #0
 800515e:	bfbc      	itt	lt
 8005160:	580b      	ldrlt	r3, [r1, r0]
 8005162:	18c0      	addlt	r0, r0, r3
 8005164:	4770      	bx	lr
	...

08005168 <_init>:
 8005168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800516a:	bf00      	nop
 800516c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800516e:	bc08      	pop	{r3}
 8005170:	469e      	mov	lr, r3
 8005172:	4770      	bx	lr

08005174 <_fini>:
 8005174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005176:	bf00      	nop
 8005178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800517a:	bc08      	pop	{r3}
 800517c:	469e      	mov	lr, r3
 800517e:	4770      	bx	lr
