
ADC_SAR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fdc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800517c  0800517c  0000617c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051e4  080051e4  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  080051e4  080051e4  000061e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051ec  080051ec  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051ec  080051ec  000061ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051f0  080051f0  000061f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080051f4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  2000005c  08005250  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  08005250  000072ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d54b  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d7e  00000000  00000000  000145d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  00016358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a1e  00000000  00000000  00017040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b31  00000000  00000000  00017a5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f1fe  00000000  00000000  0002f58f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a120  00000000  00000000  0003e78d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d88ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c7c  00000000  00000000  000d88f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000dc56c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005164 	.word	0x08005164

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08005164 	.word	0x08005164

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	@ 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2f>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000854:	bf24      	itt	cs
 8000856:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800085a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800085e:	d90d      	bls.n	800087c <__aeabi_d2f+0x30>
 8000860:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000864:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000868:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800086c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000870:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000874:	bf08      	it	eq
 8000876:	f020 0001 	biceq.w	r0, r0, #1
 800087a:	4770      	bx	lr
 800087c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000880:	d121      	bne.n	80008c6 <__aeabi_d2f+0x7a>
 8000882:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000886:	bfbc      	itt	lt
 8000888:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800088c:	4770      	bxlt	lr
 800088e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000892:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000896:	f1c2 0218 	rsb	r2, r2, #24
 800089a:	f1c2 0c20 	rsb	ip, r2, #32
 800089e:	fa10 f30c 	lsls.w	r3, r0, ip
 80008a2:	fa20 f002 	lsr.w	r0, r0, r2
 80008a6:	bf18      	it	ne
 80008a8:	f040 0001 	orrne.w	r0, r0, #1
 80008ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008b8:	ea40 000c 	orr.w	r0, r0, ip
 80008bc:	fa23 f302 	lsr.w	r3, r3, r2
 80008c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008c4:	e7cc      	b.n	8000860 <__aeabi_d2f+0x14>
 80008c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ca:	d107      	bne.n	80008dc <__aeabi_d2f+0x90>
 80008cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008d0:	bf1e      	ittt	ne
 80008d2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80008d6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80008da:	4770      	bxne	lr
 80008dc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80008e0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80008e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <__aeabi_uldivmod>:
 80008ec:	b953      	cbnz	r3, 8000904 <__aeabi_uldivmod+0x18>
 80008ee:	b94a      	cbnz	r2, 8000904 <__aeabi_uldivmod+0x18>
 80008f0:	2900      	cmp	r1, #0
 80008f2:	bf08      	it	eq
 80008f4:	2800      	cmpeq	r0, #0
 80008f6:	bf1c      	itt	ne
 80008f8:	f04f 31ff 	movne.w	r1, #4294967295
 80008fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000900:	f000 b96a 	b.w	8000bd8 <__aeabi_idiv0>
 8000904:	f1ad 0c08 	sub.w	ip, sp, #8
 8000908:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800090c:	f000 f806 	bl	800091c <__udivmoddi4>
 8000910:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000918:	b004      	add	sp, #16
 800091a:	4770      	bx	lr

0800091c <__udivmoddi4>:
 800091c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000920:	9d08      	ldr	r5, [sp, #32]
 8000922:	460c      	mov	r4, r1
 8000924:	2b00      	cmp	r3, #0
 8000926:	d14e      	bne.n	80009c6 <__udivmoddi4+0xaa>
 8000928:	4694      	mov	ip, r2
 800092a:	458c      	cmp	ip, r1
 800092c:	4686      	mov	lr, r0
 800092e:	fab2 f282 	clz	r2, r2
 8000932:	d962      	bls.n	80009fa <__udivmoddi4+0xde>
 8000934:	b14a      	cbz	r2, 800094a <__udivmoddi4+0x2e>
 8000936:	f1c2 0320 	rsb	r3, r2, #32
 800093a:	4091      	lsls	r1, r2
 800093c:	fa20 f303 	lsr.w	r3, r0, r3
 8000940:	fa0c fc02 	lsl.w	ip, ip, r2
 8000944:	4319      	orrs	r1, r3
 8000946:	fa00 fe02 	lsl.w	lr, r0, r2
 800094a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800094e:	fa1f f68c 	uxth.w	r6, ip
 8000952:	fbb1 f4f7 	udiv	r4, r1, r7
 8000956:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800095a:	fb07 1114 	mls	r1, r7, r4, r1
 800095e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000962:	fb04 f106 	mul.w	r1, r4, r6
 8000966:	4299      	cmp	r1, r3
 8000968:	d90a      	bls.n	8000980 <__udivmoddi4+0x64>
 800096a:	eb1c 0303 	adds.w	r3, ip, r3
 800096e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000972:	f080 8112 	bcs.w	8000b9a <__udivmoddi4+0x27e>
 8000976:	4299      	cmp	r1, r3
 8000978:	f240 810f 	bls.w	8000b9a <__udivmoddi4+0x27e>
 800097c:	3c02      	subs	r4, #2
 800097e:	4463      	add	r3, ip
 8000980:	1a59      	subs	r1, r3, r1
 8000982:	fa1f f38e 	uxth.w	r3, lr
 8000986:	fbb1 f0f7 	udiv	r0, r1, r7
 800098a:	fb07 1110 	mls	r1, r7, r0, r1
 800098e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000992:	fb00 f606 	mul.w	r6, r0, r6
 8000996:	429e      	cmp	r6, r3
 8000998:	d90a      	bls.n	80009b0 <__udivmoddi4+0x94>
 800099a:	eb1c 0303 	adds.w	r3, ip, r3
 800099e:	f100 31ff 	add.w	r1, r0, #4294967295
 80009a2:	f080 80fc 	bcs.w	8000b9e <__udivmoddi4+0x282>
 80009a6:	429e      	cmp	r6, r3
 80009a8:	f240 80f9 	bls.w	8000b9e <__udivmoddi4+0x282>
 80009ac:	4463      	add	r3, ip
 80009ae:	3802      	subs	r0, #2
 80009b0:	1b9b      	subs	r3, r3, r6
 80009b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80009b6:	2100      	movs	r1, #0
 80009b8:	b11d      	cbz	r5, 80009c2 <__udivmoddi4+0xa6>
 80009ba:	40d3      	lsrs	r3, r2
 80009bc:	2200      	movs	r2, #0
 80009be:	e9c5 3200 	strd	r3, r2, [r5]
 80009c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c6:	428b      	cmp	r3, r1
 80009c8:	d905      	bls.n	80009d6 <__udivmoddi4+0xba>
 80009ca:	b10d      	cbz	r5, 80009d0 <__udivmoddi4+0xb4>
 80009cc:	e9c5 0100 	strd	r0, r1, [r5]
 80009d0:	2100      	movs	r1, #0
 80009d2:	4608      	mov	r0, r1
 80009d4:	e7f5      	b.n	80009c2 <__udivmoddi4+0xa6>
 80009d6:	fab3 f183 	clz	r1, r3
 80009da:	2900      	cmp	r1, #0
 80009dc:	d146      	bne.n	8000a6c <__udivmoddi4+0x150>
 80009de:	42a3      	cmp	r3, r4
 80009e0:	d302      	bcc.n	80009e8 <__udivmoddi4+0xcc>
 80009e2:	4290      	cmp	r0, r2
 80009e4:	f0c0 80f0 	bcc.w	8000bc8 <__udivmoddi4+0x2ac>
 80009e8:	1a86      	subs	r6, r0, r2
 80009ea:	eb64 0303 	sbc.w	r3, r4, r3
 80009ee:	2001      	movs	r0, #1
 80009f0:	2d00      	cmp	r5, #0
 80009f2:	d0e6      	beq.n	80009c2 <__udivmoddi4+0xa6>
 80009f4:	e9c5 6300 	strd	r6, r3, [r5]
 80009f8:	e7e3      	b.n	80009c2 <__udivmoddi4+0xa6>
 80009fa:	2a00      	cmp	r2, #0
 80009fc:	f040 8090 	bne.w	8000b20 <__udivmoddi4+0x204>
 8000a00:	eba1 040c 	sub.w	r4, r1, ip
 8000a04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a08:	fa1f f78c 	uxth.w	r7, ip
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a16:	fb08 4416 	mls	r4, r8, r6, r4
 8000a1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a1e:	fb07 f006 	mul.w	r0, r7, r6
 8000a22:	4298      	cmp	r0, r3
 8000a24:	d908      	bls.n	8000a38 <__udivmoddi4+0x11c>
 8000a26:	eb1c 0303 	adds.w	r3, ip, r3
 8000a2a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a2e:	d202      	bcs.n	8000a36 <__udivmoddi4+0x11a>
 8000a30:	4298      	cmp	r0, r3
 8000a32:	f200 80cd 	bhi.w	8000bd0 <__udivmoddi4+0x2b4>
 8000a36:	4626      	mov	r6, r4
 8000a38:	1a1c      	subs	r4, r3, r0
 8000a3a:	fa1f f38e 	uxth.w	r3, lr
 8000a3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a42:	fb08 4410 	mls	r4, r8, r0, r4
 8000a46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a4a:	fb00 f707 	mul.w	r7, r0, r7
 8000a4e:	429f      	cmp	r7, r3
 8000a50:	d908      	bls.n	8000a64 <__udivmoddi4+0x148>
 8000a52:	eb1c 0303 	adds.w	r3, ip, r3
 8000a56:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a5a:	d202      	bcs.n	8000a62 <__udivmoddi4+0x146>
 8000a5c:	429f      	cmp	r7, r3
 8000a5e:	f200 80b0 	bhi.w	8000bc2 <__udivmoddi4+0x2a6>
 8000a62:	4620      	mov	r0, r4
 8000a64:	1bdb      	subs	r3, r3, r7
 8000a66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a6a:	e7a5      	b.n	80009b8 <__udivmoddi4+0x9c>
 8000a6c:	f1c1 0620 	rsb	r6, r1, #32
 8000a70:	408b      	lsls	r3, r1
 8000a72:	fa22 f706 	lsr.w	r7, r2, r6
 8000a76:	431f      	orrs	r7, r3
 8000a78:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a7c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a80:	ea43 030c 	orr.w	r3, r3, ip
 8000a84:	40f4      	lsrs	r4, r6
 8000a86:	fa00 f801 	lsl.w	r8, r0, r1
 8000a8a:	0c38      	lsrs	r0, r7, #16
 8000a8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a90:	fbb4 fef0 	udiv	lr, r4, r0
 8000a94:	fa1f fc87 	uxth.w	ip, r7
 8000a98:	fb00 441e 	mls	r4, r0, lr, r4
 8000a9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000aa0:	fb0e f90c 	mul.w	r9, lr, ip
 8000aa4:	45a1      	cmp	r9, r4
 8000aa6:	fa02 f201 	lsl.w	r2, r2, r1
 8000aaa:	d90a      	bls.n	8000ac2 <__udivmoddi4+0x1a6>
 8000aac:	193c      	adds	r4, r7, r4
 8000aae:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ab2:	f080 8084 	bcs.w	8000bbe <__udivmoddi4+0x2a2>
 8000ab6:	45a1      	cmp	r9, r4
 8000ab8:	f240 8081 	bls.w	8000bbe <__udivmoddi4+0x2a2>
 8000abc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ac0:	443c      	add	r4, r7
 8000ac2:	eba4 0409 	sub.w	r4, r4, r9
 8000ac6:	fa1f f983 	uxth.w	r9, r3
 8000aca:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ace:	fb00 4413 	mls	r4, r0, r3, r4
 8000ad2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ad6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ada:	45a4      	cmp	ip, r4
 8000adc:	d907      	bls.n	8000aee <__udivmoddi4+0x1d2>
 8000ade:	193c      	adds	r4, r7, r4
 8000ae0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ae4:	d267      	bcs.n	8000bb6 <__udivmoddi4+0x29a>
 8000ae6:	45a4      	cmp	ip, r4
 8000ae8:	d965      	bls.n	8000bb6 <__udivmoddi4+0x29a>
 8000aea:	3b02      	subs	r3, #2
 8000aec:	443c      	add	r4, r7
 8000aee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000af2:	fba0 9302 	umull	r9, r3, r0, r2
 8000af6:	eba4 040c 	sub.w	r4, r4, ip
 8000afa:	429c      	cmp	r4, r3
 8000afc:	46ce      	mov	lr, r9
 8000afe:	469c      	mov	ip, r3
 8000b00:	d351      	bcc.n	8000ba6 <__udivmoddi4+0x28a>
 8000b02:	d04e      	beq.n	8000ba2 <__udivmoddi4+0x286>
 8000b04:	b155      	cbz	r5, 8000b1c <__udivmoddi4+0x200>
 8000b06:	ebb8 030e 	subs.w	r3, r8, lr
 8000b0a:	eb64 040c 	sbc.w	r4, r4, ip
 8000b0e:	fa04 f606 	lsl.w	r6, r4, r6
 8000b12:	40cb      	lsrs	r3, r1
 8000b14:	431e      	orrs	r6, r3
 8000b16:	40cc      	lsrs	r4, r1
 8000b18:	e9c5 6400 	strd	r6, r4, [r5]
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	e750      	b.n	80009c2 <__udivmoddi4+0xa6>
 8000b20:	f1c2 0320 	rsb	r3, r2, #32
 8000b24:	fa20 f103 	lsr.w	r1, r0, r3
 8000b28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b2c:	fa24 f303 	lsr.w	r3, r4, r3
 8000b30:	4094      	lsls	r4, r2
 8000b32:	430c      	orrs	r4, r1
 8000b34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b38:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b3c:	fa1f f78c 	uxth.w	r7, ip
 8000b40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b44:	fb08 3110 	mls	r1, r8, r0, r3
 8000b48:	0c23      	lsrs	r3, r4, #16
 8000b4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b4e:	fb00 f107 	mul.w	r1, r0, r7
 8000b52:	4299      	cmp	r1, r3
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0x24c>
 8000b56:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b5e:	d22c      	bcs.n	8000bba <__udivmoddi4+0x29e>
 8000b60:	4299      	cmp	r1, r3
 8000b62:	d92a      	bls.n	8000bba <__udivmoddi4+0x29e>
 8000b64:	3802      	subs	r0, #2
 8000b66:	4463      	add	r3, ip
 8000b68:	1a5b      	subs	r3, r3, r1
 8000b6a:	b2a4      	uxth	r4, r4
 8000b6c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b70:	fb08 3311 	mls	r3, r8, r1, r3
 8000b74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b78:	fb01 f307 	mul.w	r3, r1, r7
 8000b7c:	42a3      	cmp	r3, r4
 8000b7e:	d908      	bls.n	8000b92 <__udivmoddi4+0x276>
 8000b80:	eb1c 0404 	adds.w	r4, ip, r4
 8000b84:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b88:	d213      	bcs.n	8000bb2 <__udivmoddi4+0x296>
 8000b8a:	42a3      	cmp	r3, r4
 8000b8c:	d911      	bls.n	8000bb2 <__udivmoddi4+0x296>
 8000b8e:	3902      	subs	r1, #2
 8000b90:	4464      	add	r4, ip
 8000b92:	1ae4      	subs	r4, r4, r3
 8000b94:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b98:	e739      	b.n	8000a0e <__udivmoddi4+0xf2>
 8000b9a:	4604      	mov	r4, r0
 8000b9c:	e6f0      	b.n	8000980 <__udivmoddi4+0x64>
 8000b9e:	4608      	mov	r0, r1
 8000ba0:	e706      	b.n	80009b0 <__udivmoddi4+0x94>
 8000ba2:	45c8      	cmp	r8, r9
 8000ba4:	d2ae      	bcs.n	8000b04 <__udivmoddi4+0x1e8>
 8000ba6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000baa:	eb63 0c07 	sbc.w	ip, r3, r7
 8000bae:	3801      	subs	r0, #1
 8000bb0:	e7a8      	b.n	8000b04 <__udivmoddi4+0x1e8>
 8000bb2:	4631      	mov	r1, r6
 8000bb4:	e7ed      	b.n	8000b92 <__udivmoddi4+0x276>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	e799      	b.n	8000aee <__udivmoddi4+0x1d2>
 8000bba:	4630      	mov	r0, r6
 8000bbc:	e7d4      	b.n	8000b68 <__udivmoddi4+0x24c>
 8000bbe:	46d6      	mov	lr, sl
 8000bc0:	e77f      	b.n	8000ac2 <__udivmoddi4+0x1a6>
 8000bc2:	4463      	add	r3, ip
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	e74d      	b.n	8000a64 <__udivmoddi4+0x148>
 8000bc8:	4606      	mov	r6, r0
 8000bca:	4623      	mov	r3, r4
 8000bcc:	4608      	mov	r0, r1
 8000bce:	e70f      	b.n	80009f0 <__udivmoddi4+0xd4>
 8000bd0:	3e02      	subs	r6, #2
 8000bd2:	4463      	add	r3, ip
 8000bd4:	e730      	b.n	8000a38 <__udivmoddi4+0x11c>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_idiv0>:
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <show_num>:
	0x07, // 7
	0x7F, // 8
	0x6F  // 9
};

void show_num(uint16_t num){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	80fb      	strh	r3, [r7, #6]

	uint8_t digitos[N_dig] = {0};
 8000be6:	2300      	movs	r3, #0
 8000be8:	813b      	strh	r3, [r7, #8]

	//Separamos los digitos
	//digitos[4] = num / 1000;
	//digitos[2] = (num % 1000) / 100;
	digitos[1] = (num % 100) / 10;
 8000bea:	88fb      	ldrh	r3, [r7, #6]
 8000bec:	4a6c      	ldr	r2, [pc, #432]	@ (8000da0 <show_num+0x1c4>)
 8000bee:	fba2 1203 	umull	r1, r2, r2, r3
 8000bf2:	0952      	lsrs	r2, r2, #5
 8000bf4:	2164      	movs	r1, #100	@ 0x64
 8000bf6:	fb01 f202 	mul.w	r2, r1, r2
 8000bfa:	1a9b      	subs	r3, r3, r2
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	4a69      	ldr	r2, [pc, #420]	@ (8000da4 <show_num+0x1c8>)
 8000c00:	fba2 2303 	umull	r2, r3, r2, r3
 8000c04:	08db      	lsrs	r3, r3, #3
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	727b      	strb	r3, [r7, #9]
	digitos[0] = num % 10;
 8000c0c:	88fa      	ldrh	r2, [r7, #6]
 8000c0e:	4b65      	ldr	r3, [pc, #404]	@ (8000da4 <show_num+0x1c8>)
 8000c10:	fba3 1302 	umull	r1, r3, r3, r2
 8000c14:	08d9      	lsrs	r1, r3, #3
 8000c16:	460b      	mov	r3, r1
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	440b      	add	r3, r1
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	1ad3      	subs	r3, r2, r3
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	723b      	strb	r3, [r7, #8]

	//Ejecutamos la multiplexacoion
	int dig;
	uint8_t mux = 0b0001;
 8000c26:	2301      	movs	r3, #1
 8000c28:	72fb      	strb	r3, [r7, #11]
	for (dig = 0; dig < N_dig; ++dig){
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	e0a0      	b.n	8000d72 <show_num+0x196>

		//ESCOGEMOS EL DIGITO A MOSTRAR
		HAL_GPIO_WritePin(dig_0_port, dig_0_pin, mux&0x01);
 8000c30:	7afb      	ldrb	r3, [r7, #11]
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	461a      	mov	r2, r3
 8000c3a:	2108      	movs	r1, #8
 8000c3c:	485a      	ldr	r0, [pc, #360]	@ (8000da8 <show_num+0x1cc>)
 8000c3e:	f001 fdad 	bl	800279c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(dig_1_port, dig_1_pin, mux&0x02);
 8000c42:	7afb      	ldrb	r3, [r7, #11]
 8000c44:	f003 0302 	and.w	r3, r3, #2
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	2110      	movs	r1, #16
 8000c4e:	4856      	ldr	r0, [pc, #344]	@ (8000da8 <show_num+0x1cc>)
 8000c50:	f001 fda4 	bl	800279c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(dig_2_port, dig_2_pin, mux&0x04);
 8000c54:	7afb      	ldrb	r3, [r7, #11]
 8000c56:	f003 0304 	and.w	r3, r3, #4
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	2104      	movs	r1, #4
 8000c60:	4851      	ldr	r0, [pc, #324]	@ (8000da8 <show_num+0x1cc>)
 8000c62:	f001 fd9b 	bl	800279c <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(dig_0_port, dig_0_pin, mux&0x08);
		mux <<= 1;
 8000c66:	7afb      	ldrb	r3, [r7, #11]
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	72fb      	strb	r3, [r7, #11]

		//MOSTRAMOS EL DIGITO A MOSTRAR
		HAL_GPIO_WritePin(SEG_A_port, SEG_A_pin, (nums_bin[digitos[dig]] & 0x40) >> 6); // A
 8000c6c:	f107 0208 	add.w	r2, r7, #8
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	4413      	add	r3, r2
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	461a      	mov	r2, r3
 8000c78:	4b4c      	ldr	r3, [pc, #304]	@ (8000dac <show_num+0x1d0>)
 8000c7a:	5c9b      	ldrb	r3, [r3, r2]
 8000c7c:	119b      	asrs	r3, r3, #6
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	f003 0301 	and.w	r3, r3, #1
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	461a      	mov	r2, r3
 8000c88:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c8c:	4848      	ldr	r0, [pc, #288]	@ (8000db0 <show_num+0x1d4>)
 8000c8e:	f001 fd85 	bl	800279c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_port, SEG_B_pin, (nums_bin[digitos[dig]] & 0x20) >> 5); // B
 8000c92:	f107 0208 	add.w	r2, r7, #8
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	4413      	add	r3, r2
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4b43      	ldr	r3, [pc, #268]	@ (8000dac <show_num+0x1d0>)
 8000ca0:	5c9b      	ldrb	r3, [r3, r2]
 8000ca2:	115b      	asrs	r3, r3, #5
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	461a      	mov	r2, r3
 8000cae:	2104      	movs	r1, #4
 8000cb0:	483f      	ldr	r0, [pc, #252]	@ (8000db0 <show_num+0x1d4>)
 8000cb2:	f001 fd73 	bl	800279c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_port, SEG_C_pin, (nums_bin[digitos[dig]] & 0x10) >> 4); // C
 8000cb6:	f107 0208 	add.w	r2, r7, #8
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4b3a      	ldr	r3, [pc, #232]	@ (8000dac <show_num+0x1d0>)
 8000cc4:	5c9b      	ldrb	r3, [r3, r2]
 8000cc6:	111b      	asrs	r3, r3, #4
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	2102      	movs	r1, #2
 8000cd4:	4836      	ldr	r0, [pc, #216]	@ (8000db0 <show_num+0x1d4>)
 8000cd6:	f001 fd61 	bl	800279c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_port, SEG_D_pin, (nums_bin[digitos[dig]] & 0x08) >> 3); // D
 8000cda:	f107 0208 	add.w	r2, r7, #8
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b31      	ldr	r3, [pc, #196]	@ (8000dac <show_num+0x1d0>)
 8000ce8:	5c9b      	ldrb	r3, [r3, r2]
 8000cea:	10db      	asrs	r3, r3, #3
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	482d      	ldr	r0, [pc, #180]	@ (8000db0 <show_num+0x1d4>)
 8000cfa:	f001 fd4f 	bl	800279c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_port, SEG_E_pin, (nums_bin[digitos[dig]] & 0x04) >> 2); // E
 8000cfe:	f107 0208 	add.w	r2, r7, #8
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	4413      	add	r3, r2
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b28      	ldr	r3, [pc, #160]	@ (8000dac <show_num+0x1d0>)
 8000d0c:	5c9b      	ldrb	r3, [r3, r2]
 8000d0e:	109b      	asrs	r3, r3, #2
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	461a      	mov	r2, r3
 8000d1a:	2180      	movs	r1, #128	@ 0x80
 8000d1c:	4822      	ldr	r0, [pc, #136]	@ (8000da8 <show_num+0x1cc>)
 8000d1e:	f001 fd3d 	bl	800279c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_port, SEG_F_pin, (nums_bin[digitos[dig]] & 0x02) >> 1); // F
 8000d22:	f107 0208 	add.w	r2, r7, #8
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	4413      	add	r3, r2
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000dac <show_num+0x1d0>)
 8000d30:	5c9b      	ldrb	r3, [r3, r2]
 8000d32:	105b      	asrs	r3, r3, #1
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	2140      	movs	r1, #64	@ 0x40
 8000d40:	4819      	ldr	r0, [pc, #100]	@ (8000da8 <show_num+0x1cc>)
 8000d42:	f001 fd2b 	bl	800279c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_port, SEG_G_pin, (nums_bin[digitos[dig]] & 0x01) >> 0); // G
 8000d46:	f107 0208 	add.w	r2, r7, #8
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	461a      	mov	r2, r3
 8000d52:	4b16      	ldr	r3, [pc, #88]	@ (8000dac <show_num+0x1d0>)
 8000d54:	5c9b      	ldrb	r3, [r3, r2]
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	2120      	movs	r1, #32
 8000d60:	4811      	ldr	r0, [pc, #68]	@ (8000da8 <show_num+0x1cc>)
 8000d62:	f001 fd1b 	bl	800279c <HAL_GPIO_WritePin>

		HAL_Delay(1);
 8000d66:	2001      	movs	r0, #1
 8000d68:	f000 fe88 	bl	8001a7c <HAL_Delay>
	for (dig = 0; dig < N_dig; ++dig){
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	f77f af5b 	ble.w	8000c30 <show_num+0x54>
	}

	//APAGAMOS TODOS LOS DIGITOS
	HAL_GPIO_WritePin(dig_0_port, dig_0_pin, 0);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2108      	movs	r1, #8
 8000d7e:	480a      	ldr	r0, [pc, #40]	@ (8000da8 <show_num+0x1cc>)
 8000d80:	f001 fd0c 	bl	800279c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(dig_1_port, dig_1_pin, 0);
 8000d84:	2200      	movs	r2, #0
 8000d86:	2110      	movs	r1, #16
 8000d88:	4807      	ldr	r0, [pc, #28]	@ (8000da8 <show_num+0x1cc>)
 8000d8a:	f001 fd07 	bl	800279c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(dig_2_port, dig_2_pin, 0);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2104      	movs	r1, #4
 8000d92:	4805      	ldr	r0, [pc, #20]	@ (8000da8 <show_num+0x1cc>)
 8000d94:	f001 fd02 	bl	800279c <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(dig_0_port, dig_0_pin, mux&0x08);
}
 8000d98:	bf00      	nop
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	51eb851f 	.word	0x51eb851f
 8000da4:	cccccccd 	.word	0xcccccccd
 8000da8:	40020000 	.word	0x40020000
 8000dac:	0800518c 	.word	0x0800518c
 8000db0:	40020400 	.word	0x40020400

08000db4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dba:	f000 fded 	bl	8001998 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dbe:	f000 f8b1 	bl	8000f24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc2:	f000 fa89 	bl	80012d8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000dc6:	f000 f969 	bl	800109c <MX_TIM1_Init>
  MX_TIM4_Init();
 8000dca:	f000 fa07 	bl	80011dc <MX_TIM4_Init>
  MX_ADC1_Init();
 8000dce:	f000 f911 	bl	8000ff4 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 8000dd2:	f000 fa57 	bl	8001284 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

    //Contador del encoder
    uint8_t count = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	73fb      	strb	r3, [r7, #15]
    //valor real del dac del mcu
    uint8_t adc_real = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	73bb      	strb	r3, [r7, #14]
    //valor medido en 8bits del adc implementado
    uint8_t adc_med = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	737b      	strb	r3, [r7, #13]
    //mag por uart
    char msg[10] = {0};
 8000de2:	2300      	movs	r3, #0
 8000de4:	603b      	str	r3, [r7, #0]
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	809a      	strh	r2, [r3, #4]

    //incializamos el pwm
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000dee:	2100      	movs	r1, #0
 8000df0:	4843      	ldr	r0, [pc, #268]	@ (8000f00 <main+0x14c>)
 8000df2:	f002 fa05 	bl	8003200 <HAL_TIM_PWM_Start>
    //incializamos el encoder
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000df6:	213c      	movs	r1, #60	@ 0x3c
 8000df8:	4842      	ldr	r0, [pc, #264]	@ (8000f04 <main+0x150>)
 8000dfa:	f002 fb57 	bl	80034ac <HAL_TIM_Encoder_Start>
		 volt_out++;
		 HAL_DeInit(250);

	 */

	 show_num(adc_sar);
 8000dfe:	4b42      	ldr	r3, [pc, #264]	@ (8000f08 <main+0x154>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff feea 	bl	8000bdc <show_num>

	 count = TIM4->CNT/4;
 8000e08:	4b40      	ldr	r3, [pc, #256]	@ (8000f0c <main+0x158>)
 8000e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e0c:	089b      	lsrs	r3, r3, #2
 8000e0e:	73fb      	strb	r3, [r7, #15]

	 //Estados del adc
	switch (count) {
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d069      	beq.n	8000eea <main+0x136>
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	dc6b      	bgt.n	8000ef2 <main+0x13e>
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d002      	beq.n	8000e24 <main+0x70>
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d02e      	beq.n	8000e80 <main+0xcc>

			adc_sar = 99;

			break;
		default:
			break;
 8000e22:	e066      	b.n	8000ef2 <main+0x13e>
			HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,SET);
 8000e24:	2201      	movs	r2, #1
 8000e26:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e2a:	4839      	ldr	r0, [pc, #228]	@ (8000f10 <main+0x15c>)
 8000e2c:	f001 fcb6 	bl	800279c <HAL_GPIO_WritePin>
			adc_med = convert();
 8000e30:	f000 fb06 	bl	8001440 <convert>
 8000e34:	4603      	mov	r3, r0
 8000e36:	737b      	strb	r3, [r7, #13]
			adc_sar = represent(adc_med);
 8000e38:	7b7b      	ldrb	r3, [r7, #13]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 fb54 	bl	80014e8 <represent>
 8000e40:	4603      	mov	r3, r0
 8000e42:	461a      	mov	r2, r3
 8000e44:	4b30      	ldr	r3, [pc, #192]	@ (8000f08 <main+0x154>)
 8000e46:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Start(&hadc1);
 8000e48:	4832      	ldr	r0, [pc, #200]	@ (8000f14 <main+0x160>)
 8000e4a:	f000 fe7f 	bl	8001b4c <HAL_ADC_Start>
			if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK){
 8000e4e:	2164      	movs	r1, #100	@ 0x64
 8000e50:	4830      	ldr	r0, [pc, #192]	@ (8000f14 <main+0x160>)
 8000e52:	f000 ff2f 	bl	8001cb4 <HAL_ADC_PollForConversion>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d14c      	bne.n	8000ef6 <main+0x142>
				adc_real = HAL_ADC_GetValue(&hadc1);//adc del micro
 8000e5c:	482d      	ldr	r0, [pc, #180]	@ (8000f14 <main+0x160>)
 8000e5e:	f000 ffb4 	bl	8001dca <HAL_ADC_GetValue>
 8000e62:	4603      	mov	r3, r0
 8000e64:	73bb      	strb	r3, [r7, #14]
				sprintf(msg,"%d %d\r\n",adc_real,adc_med);
 8000e66:	7bba      	ldrb	r2, [r7, #14]
 8000e68:	7b7b      	ldrb	r3, [r7, #13]
 8000e6a:	4638      	mov	r0, r7
 8000e6c:	492a      	ldr	r1, [pc, #168]	@ (8000f18 <main+0x164>)
 8000e6e:	f003 fcd9 	bl	8004824 <siprintf>
				HAL_UART_Transmit(&huart6,(uint8_t*)msg, 10, 100);
 8000e72:	4639      	mov	r1, r7
 8000e74:	2364      	movs	r3, #100	@ 0x64
 8000e76:	220a      	movs	r2, #10
 8000e78:	4828      	ldr	r0, [pc, #160]	@ (8000f1c <main+0x168>)
 8000e7a:	f003 f917 	bl	80040ac <HAL_UART_Transmit>
			break;
 8000e7e:	e03a      	b.n	8000ef6 <main+0x142>
			HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,RESET);
 8000e80:	2200      	movs	r2, #0
 8000e82:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e86:	4822      	ldr	r0, [pc, #136]	@ (8000f10 <main+0x15c>)
 8000e88:	f001 fc88 	bl	800279c <HAL_GPIO_WritePin>
			if (flag) {
 8000e8c:	4b24      	ldr	r3, [pc, #144]	@ (8000f20 <main+0x16c>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d032      	beq.n	8000efa <main+0x146>
				adc_med = convert();
 8000e94:	f000 fad4 	bl	8001440 <convert>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	737b      	strb	r3, [r7, #13]
				adc_sar = represent(adc_med);
 8000e9c:	7b7b      	ldrb	r3, [r7, #13]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 fb22 	bl	80014e8 <represent>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	4b17      	ldr	r3, [pc, #92]	@ (8000f08 <main+0x154>)
 8000eaa:	701a      	strb	r2, [r3, #0]
				HAL_ADC_Start(&hadc1);
 8000eac:	4819      	ldr	r0, [pc, #100]	@ (8000f14 <main+0x160>)
 8000eae:	f000 fe4d 	bl	8001b4c <HAL_ADC_Start>
				if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK){
 8000eb2:	2164      	movs	r1, #100	@ 0x64
 8000eb4:	4817      	ldr	r0, [pc, #92]	@ (8000f14 <main+0x160>)
 8000eb6:	f000 fefd 	bl	8001cb4 <HAL_ADC_PollForConversion>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d110      	bne.n	8000ee2 <main+0x12e>
					adc_real = HAL_ADC_GetValue(&hadc1);//adc del micro
 8000ec0:	4814      	ldr	r0, [pc, #80]	@ (8000f14 <main+0x160>)
 8000ec2:	f000 ff82 	bl	8001dca <HAL_ADC_GetValue>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	73bb      	strb	r3, [r7, #14]
					sprintf(msg,"%d %d\r\n",adc_real,adc_med);
 8000eca:	7bba      	ldrb	r2, [r7, #14]
 8000ecc:	7b7b      	ldrb	r3, [r7, #13]
 8000ece:	4638      	mov	r0, r7
 8000ed0:	4911      	ldr	r1, [pc, #68]	@ (8000f18 <main+0x164>)
 8000ed2:	f003 fca7 	bl	8004824 <siprintf>
					HAL_UART_Transmit(&huart6,(uint8_t*)msg, 10, 100);
 8000ed6:	4639      	mov	r1, r7
 8000ed8:	2364      	movs	r3, #100	@ 0x64
 8000eda:	220a      	movs	r2, #10
 8000edc:	480f      	ldr	r0, [pc, #60]	@ (8000f1c <main+0x168>)
 8000ede:	f003 f8e5 	bl	80040ac <HAL_UART_Transmit>
				flag = false;
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f20 <main+0x16c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	701a      	strb	r2, [r3, #0]
			break;
 8000ee8:	e007      	b.n	8000efa <main+0x146>
			adc_sar = 99;
 8000eea:	4b07      	ldr	r3, [pc, #28]	@ (8000f08 <main+0x154>)
 8000eec:	2263      	movs	r2, #99	@ 0x63
 8000eee:	701a      	strb	r2, [r3, #0]
			break;
 8000ef0:	e004      	b.n	8000efc <main+0x148>
			break;
 8000ef2:	bf00      	nop
 8000ef4:	e783      	b.n	8000dfe <main+0x4a>
			break;
 8000ef6:	bf00      	nop
 8000ef8:	e781      	b.n	8000dfe <main+0x4a>
			break;
 8000efa:	bf00      	nop
	 show_num(adc_sar);
 8000efc:	e77f      	b.n	8000dfe <main+0x4a>
 8000efe:	bf00      	nop
 8000f00:	200000c0 	.word	0x200000c0
 8000f04:	20000108 	.word	0x20000108
 8000f08:	20000199 	.word	0x20000199
 8000f0c:	40000800 	.word	0x40000800
 8000f10:	40020800 	.word	0x40020800
 8000f14:	20000078 	.word	0x20000078
 8000f18:	0800517c 	.word	0x0800517c
 8000f1c:	20000150 	.word	0x20000150
 8000f20:	20000198 	.word	0x20000198

08000f24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b094      	sub	sp, #80	@ 0x50
 8000f28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f2a:	f107 0320 	add.w	r3, r7, #32
 8000f2e:	2230      	movs	r2, #48	@ 0x30
 8000f30:	2100      	movs	r1, #0
 8000f32:	4618      	mov	r0, r3
 8000f34:	f003 fc96 	bl	8004864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f38:	f107 030c 	add.w	r3, r7, #12
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	4b27      	ldr	r3, [pc, #156]	@ (8000fec <SystemClock_Config+0xc8>)
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f50:	4a26      	ldr	r2, [pc, #152]	@ (8000fec <SystemClock_Config+0xc8>)
 8000f52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f56:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f58:	4b24      	ldr	r3, [pc, #144]	@ (8000fec <SystemClock_Config+0xc8>)
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f64:	2300      	movs	r3, #0
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	4b21      	ldr	r3, [pc, #132]	@ (8000ff0 <SystemClock_Config+0xcc>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a20      	ldr	r2, [pc, #128]	@ (8000ff0 <SystemClock_Config+0xcc>)
 8000f6e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f72:	6013      	str	r3, [r2, #0]
 8000f74:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff0 <SystemClock_Config+0xcc>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f80:	2301      	movs	r3, #1
 8000f82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f84:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f88:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f8e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000f94:	230c      	movs	r3, #12
 8000f96:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000f98:	2360      	movs	r3, #96	@ 0x60
 8000f9a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fa0:	2304      	movs	r3, #4
 8000fa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa4:	f107 0320 	add.w	r3, r7, #32
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f001 fc29 	bl	8002800 <HAL_RCC_OscConfig>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fb4:	f000 fae8 	bl	8001588 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb8:	230f      	movs	r3, #15
 8000fba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fc8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000fce:	f107 030c 	add.w	r3, r7, #12
 8000fd2:	2103      	movs	r1, #3
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f001 fe8b 	bl	8002cf0 <HAL_RCC_ClockConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000fe0:	f000 fad2 	bl	8001588 <Error_Handler>
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	3750      	adds	r7, #80	@ 0x50
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40007000 	.word	0x40007000

08000ff4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001006:	4b22      	ldr	r3, [pc, #136]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001008:	4a22      	ldr	r2, [pc, #136]	@ (8001094 <MX_ADC1_Init+0xa0>)
 800100a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800100c:	4b20      	ldr	r3, [pc, #128]	@ (8001090 <MX_ADC1_Init+0x9c>)
 800100e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001012:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001014:	4b1e      	ldr	r3, [pc, #120]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001016:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800101a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800101c:	4b1c      	ldr	r3, [pc, #112]	@ (8001090 <MX_ADC1_Init+0x9c>)
 800101e:	2200      	movs	r2, #0
 8001020:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001022:	4b1b      	ldr	r3, [pc, #108]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001024:	2200      	movs	r2, #0
 8001026:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001028:	4b19      	ldr	r3, [pc, #100]	@ (8001090 <MX_ADC1_Init+0x9c>)
 800102a:	2200      	movs	r2, #0
 800102c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001030:	4b17      	ldr	r3, [pc, #92]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001032:	2200      	movs	r2, #0
 8001034:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001036:	4b16      	ldr	r3, [pc, #88]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001038:	4a17      	ldr	r2, [pc, #92]	@ (8001098 <MX_ADC1_Init+0xa4>)
 800103a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800103c:	4b14      	ldr	r3, [pc, #80]	@ (8001090 <MX_ADC1_Init+0x9c>)
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001042:	4b13      	ldr	r3, [pc, #76]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001044:	2201      	movs	r2, #1
 8001046:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001048:	4b11      	ldr	r3, [pc, #68]	@ (8001090 <MX_ADC1_Init+0x9c>)
 800104a:	2200      	movs	r2, #0
 800104c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001050:	4b0f      	ldr	r3, [pc, #60]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001052:	2201      	movs	r2, #1
 8001054:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001056:	480e      	ldr	r0, [pc, #56]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001058:	f000 fd34 	bl	8001ac4 <HAL_ADC_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001062:	f000 fa91 	bl	8001588 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001066:	2300      	movs	r3, #0
 8001068:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800106a:	2301      	movs	r3, #1
 800106c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800106e:	2300      	movs	r3, #0
 8001070:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001072:	463b      	mov	r3, r7
 8001074:	4619      	mov	r1, r3
 8001076:	4806      	ldr	r0, [pc, #24]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001078:	f000 feb4 	bl	8001de4 <HAL_ADC_ConfigChannel>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001082:	f000 fa81 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000078 	.word	0x20000078
 8001094:	40012000 	.word	0x40012000
 8001098:	0f000001 	.word	0x0f000001

0800109c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b096      	sub	sp, #88	@ 0x58
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010a2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010b0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
 80010c8:	611a      	str	r2, [r3, #16]
 80010ca:	615a      	str	r2, [r3, #20]
 80010cc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	2220      	movs	r2, #32
 80010d2:	2100      	movs	r1, #0
 80010d4:	4618      	mov	r0, r3
 80010d6:	f003 fbc5 	bl	8004864 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010da:	4b3e      	ldr	r3, [pc, #248]	@ (80011d4 <MX_TIM1_Init+0x138>)
 80010dc:	4a3e      	ldr	r2, [pc, #248]	@ (80011d8 <MX_TIM1_Init+0x13c>)
 80010de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 80010e0:	4b3c      	ldr	r3, [pc, #240]	@ (80011d4 <MX_TIM1_Init+0x138>)
 80010e2:	2231      	movs	r2, #49	@ 0x31
 80010e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e6:	4b3b      	ldr	r3, [pc, #236]	@ (80011d4 <MX_TIM1_Init+0x138>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 253-1;
 80010ec:	4b39      	ldr	r3, [pc, #228]	@ (80011d4 <MX_TIM1_Init+0x138>)
 80010ee:	22fc      	movs	r2, #252	@ 0xfc
 80010f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f2:	4b38      	ldr	r3, [pc, #224]	@ (80011d4 <MX_TIM1_Init+0x138>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010f8:	4b36      	ldr	r3, [pc, #216]	@ (80011d4 <MX_TIM1_Init+0x138>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010fe:	4b35      	ldr	r3, [pc, #212]	@ (80011d4 <MX_TIM1_Init+0x138>)
 8001100:	2200      	movs	r2, #0
 8001102:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001104:	4833      	ldr	r0, [pc, #204]	@ (80011d4 <MX_TIM1_Init+0x138>)
 8001106:	f001 ffd3 	bl	80030b0 <HAL_TIM_Base_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001110:	f000 fa3a 	bl	8001588 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001114:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001118:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800111a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800111e:	4619      	mov	r1, r3
 8001120:	482c      	ldr	r0, [pc, #176]	@ (80011d4 <MX_TIM1_Init+0x138>)
 8001122:	f002 fb13 	bl	800374c <HAL_TIM_ConfigClockSource>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800112c:	f000 fa2c 	bl	8001588 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001130:	4828      	ldr	r0, [pc, #160]	@ (80011d4 <MX_TIM1_Init+0x138>)
 8001132:	f002 f80c 	bl	800314e <HAL_TIM_PWM_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800113c:	f000 fa24 	bl	8001588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001140:	2300      	movs	r3, #0
 8001142:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001148:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800114c:	4619      	mov	r1, r3
 800114e:	4821      	ldr	r0, [pc, #132]	@ (80011d4 <MX_TIM1_Init+0x138>)
 8001150:	f002 fe9c 	bl	8003e8c <HAL_TIMEx_MasterConfigSynchronization>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800115a:	f000 fa15 	bl	8001588 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800115e:	2360      	movs	r3, #96	@ 0x60
 8001160:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001166:	2300      	movs	r3, #0
 8001168:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800116a:	2300      	movs	r3, #0
 800116c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800116e:	2300      	movs	r3, #0
 8001170:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001172:	2300      	movs	r3, #0
 8001174:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001176:	2300      	movs	r3, #0
 8001178:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800117a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800117e:	2200      	movs	r2, #0
 8001180:	4619      	mov	r1, r3
 8001182:	4814      	ldr	r0, [pc, #80]	@ (80011d4 <MX_TIM1_Init+0x138>)
 8001184:	f002 fa20 	bl	80035c8 <HAL_TIM_PWM_ConfigChannel>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800118e:	f000 f9fb 	bl	8001588 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001192:	2300      	movs	r3, #0
 8001194:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001196:	2300      	movs	r3, #0
 8001198:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011aa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011ac:	2300      	movs	r3, #0
 80011ae:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	4619      	mov	r1, r3
 80011b4:	4807      	ldr	r0, [pc, #28]	@ (80011d4 <MX_TIM1_Init+0x138>)
 80011b6:	f002 fed7 	bl	8003f68 <HAL_TIMEx_ConfigBreakDeadTime>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80011c0:	f000 f9e2 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011c4:	4803      	ldr	r0, [pc, #12]	@ (80011d4 <MX_TIM1_Init+0x138>)
 80011c6:	f000 fabb 	bl	8001740 <HAL_TIM_MspPostInit>

}
 80011ca:	bf00      	nop
 80011cc:	3758      	adds	r7, #88	@ 0x58
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200000c0 	.word	0x200000c0
 80011d8:	40010000 	.word	0x40010000

080011dc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08c      	sub	sp, #48	@ 0x30
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011e2:	f107 030c 	add.w	r3, r7, #12
 80011e6:	2224      	movs	r2, #36	@ 0x24
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f003 fb3a 	bl	8004864 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011f8:	4b20      	ldr	r3, [pc, #128]	@ (800127c <MX_TIM4_Init+0xa0>)
 80011fa:	4a21      	ldr	r2, [pc, #132]	@ (8001280 <MX_TIM4_Init+0xa4>)
 80011fc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80011fe:	4b1f      	ldr	r3, [pc, #124]	@ (800127c <MX_TIM4_Init+0xa0>)
 8001200:	2200      	movs	r2, #0
 8001202:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001204:	4b1d      	ldr	r3, [pc, #116]	@ (800127c <MX_TIM4_Init+0xa0>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10;
 800120a:	4b1c      	ldr	r3, [pc, #112]	@ (800127c <MX_TIM4_Init+0xa0>)
 800120c:	220a      	movs	r2, #10
 800120e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001210:	4b1a      	ldr	r3, [pc, #104]	@ (800127c <MX_TIM4_Init+0xa0>)
 8001212:	2200      	movs	r2, #0
 8001214:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001216:	4b19      	ldr	r3, [pc, #100]	@ (800127c <MX_TIM4_Init+0xa0>)
 8001218:	2280      	movs	r2, #128	@ 0x80
 800121a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800121c:	2303      	movs	r3, #3
 800121e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001220:	2300      	movs	r3, #0
 8001222:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001224:	2301      	movs	r3, #1
 8001226:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001228:	2300      	movs	r3, #0
 800122a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800122c:	230a      	movs	r3, #10
 800122e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001230:	2300      	movs	r3, #0
 8001232:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001234:	2301      	movs	r3, #1
 8001236:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001238:	2300      	movs	r3, #0
 800123a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 800123c:	230a      	movs	r3, #10
 800123e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	4619      	mov	r1, r3
 8001246:	480d      	ldr	r0, [pc, #52]	@ (800127c <MX_TIM4_Init+0xa0>)
 8001248:	f002 f88a 	bl	8003360 <HAL_TIM_Encoder_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8001252:	f000 f999 	bl	8001588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	4619      	mov	r1, r3
 8001262:	4806      	ldr	r0, [pc, #24]	@ (800127c <MX_TIM4_Init+0xa0>)
 8001264:	f002 fe12 	bl	8003e8c <HAL_TIMEx_MasterConfigSynchronization>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800126e:	f000 f98b 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	3730      	adds	r7, #48	@ 0x30
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000108 	.word	0x20000108
 8001280:	40000800 	.word	0x40000800

08001284 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001288:	4b11      	ldr	r3, [pc, #68]	@ (80012d0 <MX_USART6_UART_Init+0x4c>)
 800128a:	4a12      	ldr	r2, [pc, #72]	@ (80012d4 <MX_USART6_UART_Init+0x50>)
 800128c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800128e:	4b10      	ldr	r3, [pc, #64]	@ (80012d0 <MX_USART6_UART_Init+0x4c>)
 8001290:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001294:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001296:	4b0e      	ldr	r3, [pc, #56]	@ (80012d0 <MX_USART6_UART_Init+0x4c>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800129c:	4b0c      	ldr	r3, [pc, #48]	@ (80012d0 <MX_USART6_UART_Init+0x4c>)
 800129e:	2200      	movs	r2, #0
 80012a0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80012a2:	4b0b      	ldr	r3, [pc, #44]	@ (80012d0 <MX_USART6_UART_Init+0x4c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX;
 80012a8:	4b09      	ldr	r3, [pc, #36]	@ (80012d0 <MX_USART6_UART_Init+0x4c>)
 80012aa:	2208      	movs	r2, #8
 80012ac:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ae:	4b08      	ldr	r3, [pc, #32]	@ (80012d0 <MX_USART6_UART_Init+0x4c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b4:	4b06      	ldr	r3, [pc, #24]	@ (80012d0 <MX_USART6_UART_Init+0x4c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80012ba:	4805      	ldr	r0, [pc, #20]	@ (80012d0 <MX_USART6_UART_Init+0x4c>)
 80012bc:	f002 fea6 	bl	800400c <HAL_UART_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80012c6:	f000 f95f 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000150 	.word	0x20000150
 80012d4:	40011400 	.word	0x40011400

080012d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	@ 0x28
 80012dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012de:	f107 0314 	add.w	r3, r7, #20
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
 80012ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	613b      	str	r3, [r7, #16]
 80012f2:	4b4f      	ldr	r3, [pc, #316]	@ (8001430 <MX_GPIO_Init+0x158>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f6:	4a4e      	ldr	r2, [pc, #312]	@ (8001430 <MX_GPIO_Init+0x158>)
 80012f8:	f043 0304 	orr.w	r3, r3, #4
 80012fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012fe:	4b4c      	ldr	r3, [pc, #304]	@ (8001430 <MX_GPIO_Init+0x158>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	f003 0304 	and.w	r3, r3, #4
 8001306:	613b      	str	r3, [r7, #16]
 8001308:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	4b48      	ldr	r3, [pc, #288]	@ (8001430 <MX_GPIO_Init+0x158>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001312:	4a47      	ldr	r2, [pc, #284]	@ (8001430 <MX_GPIO_Init+0x158>)
 8001314:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001318:	6313      	str	r3, [r2, #48]	@ 0x30
 800131a:	4b45      	ldr	r3, [pc, #276]	@ (8001430 <MX_GPIO_Init+0x158>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	4b41      	ldr	r3, [pc, #260]	@ (8001430 <MX_GPIO_Init+0x158>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132e:	4a40      	ldr	r2, [pc, #256]	@ (8001430 <MX_GPIO_Init+0x158>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6313      	str	r3, [r2, #48]	@ 0x30
 8001336:	4b3e      	ldr	r3, [pc, #248]	@ (8001430 <MX_GPIO_Init+0x158>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	4b3a      	ldr	r3, [pc, #232]	@ (8001430 <MX_GPIO_Init+0x158>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134a:	4a39      	ldr	r2, [pc, #228]	@ (8001430 <MX_GPIO_Init+0x158>)
 800134c:	f043 0302 	orr.w	r3, r3, #2
 8001350:	6313      	str	r3, [r2, #48]	@ 0x30
 8001352:	4b37      	ldr	r3, [pc, #220]	@ (8001430 <MX_GPIO_Init+0x158>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800135e:	2200      	movs	r2, #0
 8001360:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001364:	4833      	ldr	r0, [pc, #204]	@ (8001434 <MX_GPIO_Init+0x15c>)
 8001366:	f001 fa19 	bl	800279c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MUX2_Pin|SEG_G_Pin|SEG_E_Pin, GPIO_PIN_RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	21a4      	movs	r1, #164	@ 0xa4
 800136e:	4832      	ldr	r0, [pc, #200]	@ (8001438 <MX_GPIO_Init+0x160>)
 8001370:	f001 fa14 	bl	800279c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MUX0_Pin|MUX1_Pin|SEG_F_Pin, GPIO_PIN_SET);
 8001374:	2201      	movs	r2, #1
 8001376:	2158      	movs	r1, #88	@ 0x58
 8001378:	482f      	ldr	r0, [pc, #188]	@ (8001438 <MX_GPIO_Init+0x160>)
 800137a:	f001 fa0f 	bl	800279c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_D_Pin|SEG_C_Pin|SEG_B_Pin|SEG_A_Pin, GPIO_PIN_RESET);
 800137e:	2200      	movs	r2, #0
 8001380:	f240 4107 	movw	r1, #1031	@ 0x407
 8001384:	482d      	ldr	r0, [pc, #180]	@ (800143c <MX_GPIO_Init+0x164>)
 8001386:	f001 fa09 	bl	800279c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800138a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800138e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001390:	2301      	movs	r3, #1
 8001392:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2300      	movs	r3, #0
 800139a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	4619      	mov	r1, r3
 80013a2:	4824      	ldr	r0, [pc, #144]	@ (8001434 <MX_GPIO_Init+0x15c>)
 80013a4:	f001 f85e 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUX2_Pin MUX0_Pin MUX1_Pin SEG_G_Pin
                           SEG_F_Pin SEG_E_Pin */
  GPIO_InitStruct.Pin = MUX2_Pin|MUX0_Pin|MUX1_Pin|SEG_G_Pin
 80013a8:	23fc      	movs	r3, #252	@ 0xfc
 80013aa:	617b      	str	r3, [r7, #20]
                          |SEG_F_Pin|SEG_E_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	4619      	mov	r1, r3
 80013be:	481e      	ldr	r0, [pc, #120]	@ (8001438 <MX_GPIO_Init+0x160>)
 80013c0:	f001 f850 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_D_Pin SEG_C_Pin SEG_B_Pin SEG_A_Pin */
  GPIO_InitStruct.Pin = SEG_D_Pin|SEG_C_Pin|SEG_B_Pin|SEG_A_Pin;
 80013c4:	f240 4307 	movw	r3, #1031	@ 0x407
 80013c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ca:	2301      	movs	r3, #1
 80013cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d2:	2300      	movs	r3, #0
 80013d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	4619      	mov	r1, r3
 80013dc:	4817      	ldr	r0, [pc, #92]	@ (800143c <MX_GPIO_Init+0x164>)
 80013de:	f001 f841 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pin : COMP_Pin */
  GPIO_InitStruct.Pin = COMP_Pin;
 80013e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013ec:	2302      	movs	r3, #2
 80013ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COMP_GPIO_Port, &GPIO_InitStruct);
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	4619      	mov	r1, r3
 80013f6:	4810      	ldr	r0, [pc, #64]	@ (8001438 <MX_GPIO_Init+0x160>)
 80013f8:	f001 f834 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
 80013fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001400:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001402:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001406:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	4619      	mov	r1, r3
 8001412:	480a      	ldr	r0, [pc, #40]	@ (800143c <MX_GPIO_Init+0x164>)
 8001414:	f001 f826 	bl	8002464 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001418:	2200      	movs	r2, #0
 800141a:	2100      	movs	r1, #0
 800141c:	2017      	movs	r0, #23
 800141e:	f000 ffea 	bl	80023f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001422:	2017      	movs	r0, #23
 8001424:	f001 f803 	bl	800242e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001428:	bf00      	nop
 800142a:	3728      	adds	r7, #40	@ 0x28
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40023800 	.word	0x40023800
 8001434:	40020800 	.word	0x40020800
 8001438:	40020000 	.word	0x40020000
 800143c:	40020400 	.word	0x40020400

08001440 <convert>:

/* USER CODE BEGIN 4 */
uint8_t convert(){
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0

	bool end_conv = false;
 8001446:	2300      	movs	r3, #0
 8001448:	73fb      	strb	r3, [r7, #15]
	uint8_t bit_mask[8] = {
 800144a:	4a23      	ldr	r2, [pc, #140]	@ (80014d8 <convert+0x98>)
 800144c:	1d3b      	adds	r3, r7, #4
 800144e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001452:	e883 0003 	stmia.w	r3, {r0, r1}
				};

	/*****************************
	 * Empezamos busqueda binaria
	 *****************************/
	uint8_t lec_adc = 0x00;    //limpiamos bits
 8001456:	2300      	movs	r3, #0
 8001458:	73bb      	strb	r3, [r7, #14]
	 __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,lec_adc);
 800145a:	4b20      	ldr	r3, [pc, #128]	@ (80014dc <convert+0x9c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	7bba      	ldrb	r2, [r7, #14]
 8001460:	635a      	str	r2, [r3, #52]	@ 0x34

	uint8_t bit_count = 7;    //iniciamos en el msb
 8001462:	2307      	movs	r3, #7
 8001464:	737b      	strb	r3, [r7, #13]

	do
	{
		lec_adc |= bit_mask[bit_count]; //Seteamos bit=1
 8001466:	7b7b      	ldrb	r3, [r7, #13]
 8001468:	3310      	adds	r3, #16
 800146a:	443b      	add	r3, r7
 800146c:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8001470:	7bbb      	ldrb	r3, [r7, #14]
 8001472:	4313      	orrs	r3, r2
 8001474:	73bb      	strb	r3, [r7, #14]
		 __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,lec_adc);
 8001476:	4b19      	ldr	r3, [pc, #100]	@ (80014dc <convert+0x9c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	7bba      	ldrb	r2, [r7, #14]
 800147c:	635a      	str	r2, [r3, #52]	@ 0x34

		HAL_Delay(2);
 800147e:	2002      	movs	r0, #2
 8001480:	f000 fafc 	bl	8001a7c <HAL_Delay>
		if (HAL_GPIO_ReadPin(COMP_GPIO_Port, COMP_Pin) == 1){//Es DAC>Vs?
 8001484:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001488:	4815      	ldr	r0, [pc, #84]	@ (80014e0 <convert+0xa0>)
 800148a:	f001 f96f 	bl	800276c <HAL_GPIO_ReadPin>
 800148e:	4603      	mov	r3, r0
 8001490:	2b01      	cmp	r3, #1
 8001492:	d10c      	bne.n	80014ae <convert+0x6e>

			lec_adc &= ~bit_mask[bit_count];//limpiamos bit = 0
 8001494:	7b7b      	ldrb	r3, [r7, #13]
 8001496:	3310      	adds	r3, #16
 8001498:	443b      	add	r3, r7
 800149a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800149e:	b25b      	sxtb	r3, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	b25a      	sxtb	r2, r3
 80014a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80014a8:	4013      	ands	r3, r2
 80014aa:	b25b      	sxtb	r3, r3
 80014ac:	73bb      	strb	r3, [r7, #14]

		}

		//No
		if (bit_count == 0){ //Ya se recorrieron los 8bits?
 80014ae:	7b7b      	ldrb	r3, [r7, #13]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d102      	bne.n	80014ba <convert+0x7a>

			end_conv = true;
 80014b4:	2301      	movs	r3, #1
 80014b6:	73fb      	strb	r3, [r7, #15]
 80014b8:	e002      	b.n	80014c0 <convert+0x80>

		}else{

			//Segimos con el siguinete msb
			bit_count--;
 80014ba:	7b7b      	ldrb	r3, [r7, #13]
 80014bc:	3b01      	subs	r3, #1
 80014be:	737b      	strb	r3, [r7, #13]
		}

	}while(!end_conv);
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	f083 0301 	eor.w	r3, r3, #1
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1cc      	bne.n	8001466 <convert+0x26>

	return lec_adc;//regresamo el valor leido
 80014cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	08005184 	.word	0x08005184
 80014dc:	200000c0 	.word	0x200000c0
 80014e0:	40020000 	.word	0x40020000
 80014e4:	00000000 	.word	0x00000000

080014e8 <represent>:

uint8_t represent(uint8_t num){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	71fb      	strb	r3, [r7, #7]
	float volt = ((float)num) * (3.0/254.0); //voltaje leido
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	ee07 3a90 	vmov	s15, r3
 80014f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014fc:	ee17 0a90 	vmov	r0, s15
 8001500:	f7ff f94c 	bl	800079c <__aeabi_f2d>
 8001504:	a316      	add	r3, pc, #88	@ (adr r3, 8001560 <represent+0x78>)
 8001506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150a:	f7fe feb9 	bl	8000280 <__aeabi_dmul>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4610      	mov	r0, r2
 8001514:	4619      	mov	r1, r3
 8001516:	f7ff f999 	bl	800084c <__aeabi_d2f>
 800151a:	4603      	mov	r3, r0
 800151c:	60fb      	str	r3, [r7, #12]
	volt = ((float)(int)(volt*10))/10; //ahora solo tiene un decimal
 800151e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001522:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001526:	ee67 7a87 	vmul.f32	s15, s15, s14
 800152a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800152e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001532:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001536:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800153a:	edc7 7a03 	vstr	s15, [r7, #12]
	/*
	uint8_t base = (int)volt;
	uint8_t mantisa = (volt-base)*10;
	*/

	return (uint8_t)(volt*10);
 800153e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001542:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001546:	ee67 7a87 	vmul.f32	s15, s15, s14
 800154a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800154e:	edc7 7a00 	vstr	s15, [r7]
 8001552:	783b      	ldrb	r3, [r7, #0]
 8001554:	b2db      	uxtb	r3, r3
}
 8001556:	4618      	mov	r0, r3
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	c183060c 	.word	0xc183060c
 8001564:	3f883060 	.word	0x3f883060

08001568 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	80fb      	strh	r3, [r7, #6]
	flag = true;
 8001572:	4b04      	ldr	r3, [pc, #16]	@ (8001584 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001574:	2201      	movs	r2, #1
 8001576:	701a      	strb	r2, [r3, #0]
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	20000198 	.word	0x20000198

08001588 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800158c:	b672      	cpsid	i
}
 800158e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001590:	bf00      	nop
 8001592:	e7fd      	b.n	8001590 <Error_Handler+0x8>

08001594 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	4b10      	ldr	r3, [pc, #64]	@ (80015e0 <HAL_MspInit+0x4c>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a2:	4a0f      	ldr	r2, [pc, #60]	@ (80015e0 <HAL_MspInit+0x4c>)
 80015a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015aa:	4b0d      	ldr	r3, [pc, #52]	@ (80015e0 <HAL_MspInit+0x4c>)
 80015ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	603b      	str	r3, [r7, #0]
 80015ba:	4b09      	ldr	r3, [pc, #36]	@ (80015e0 <HAL_MspInit+0x4c>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015be:	4a08      	ldr	r2, [pc, #32]	@ (80015e0 <HAL_MspInit+0x4c>)
 80015c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015c6:	4b06      	ldr	r3, [pc, #24]	@ (80015e0 <HAL_MspInit+0x4c>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ce:	603b      	str	r3, [r7, #0]
 80015d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	40023800 	.word	0x40023800

080015e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08a      	sub	sp, #40	@ 0x28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a17      	ldr	r2, [pc, #92]	@ (8001660 <HAL_ADC_MspInit+0x7c>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d127      	bne.n	8001656 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
 800160a:	4b16      	ldr	r3, [pc, #88]	@ (8001664 <HAL_ADC_MspInit+0x80>)
 800160c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160e:	4a15      	ldr	r2, [pc, #84]	@ (8001664 <HAL_ADC_MspInit+0x80>)
 8001610:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001614:	6453      	str	r3, [r2, #68]	@ 0x44
 8001616:	4b13      	ldr	r3, [pc, #76]	@ (8001664 <HAL_ADC_MspInit+0x80>)
 8001618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800161a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800161e:	613b      	str	r3, [r7, #16]
 8001620:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	4b0f      	ldr	r3, [pc, #60]	@ (8001664 <HAL_ADC_MspInit+0x80>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	4a0e      	ldr	r2, [pc, #56]	@ (8001664 <HAL_ADC_MspInit+0x80>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6313      	str	r3, [r2, #48]	@ 0x30
 8001632:	4b0c      	ldr	r3, [pc, #48]	@ (8001664 <HAL_ADC_MspInit+0x80>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800163e:	2301      	movs	r3, #1
 8001640:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001642:	2303      	movs	r3, #3
 8001644:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164a:	f107 0314 	add.w	r3, r7, #20
 800164e:	4619      	mov	r1, r3
 8001650:	4805      	ldr	r0, [pc, #20]	@ (8001668 <HAL_ADC_MspInit+0x84>)
 8001652:	f000 ff07 	bl	8002464 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001656:	bf00      	nop
 8001658:	3728      	adds	r7, #40	@ 0x28
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40012000 	.word	0x40012000
 8001664:	40023800 	.word	0x40023800
 8001668:	40020000 	.word	0x40020000

0800166c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a0b      	ldr	r2, [pc, #44]	@ (80016a8 <HAL_TIM_Base_MspInit+0x3c>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d10d      	bne.n	800169a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	4b0a      	ldr	r3, [pc, #40]	@ (80016ac <HAL_TIM_Base_MspInit+0x40>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001686:	4a09      	ldr	r2, [pc, #36]	@ (80016ac <HAL_TIM_Base_MspInit+0x40>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6453      	str	r3, [r2, #68]	@ 0x44
 800168e:	4b07      	ldr	r3, [pc, #28]	@ (80016ac <HAL_TIM_Base_MspInit+0x40>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800169a:	bf00      	nop
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	40010000 	.word	0x40010000
 80016ac:	40023800 	.word	0x40023800

080016b0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08a      	sub	sp, #40	@ 0x28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a19      	ldr	r2, [pc, #100]	@ (8001734 <HAL_TIM_Encoder_MspInit+0x84>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d12b      	bne.n	800172a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	613b      	str	r3, [r7, #16]
 80016d6:	4b18      	ldr	r3, [pc, #96]	@ (8001738 <HAL_TIM_Encoder_MspInit+0x88>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016da:	4a17      	ldr	r2, [pc, #92]	@ (8001738 <HAL_TIM_Encoder_MspInit+0x88>)
 80016dc:	f043 0304 	orr.w	r3, r3, #4
 80016e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80016e2:	4b15      	ldr	r3, [pc, #84]	@ (8001738 <HAL_TIM_Encoder_MspInit+0x88>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e6:	f003 0304 	and.w	r3, r3, #4
 80016ea:	613b      	str	r3, [r7, #16]
 80016ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	4b11      	ldr	r3, [pc, #68]	@ (8001738 <HAL_TIM_Encoder_MspInit+0x88>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f6:	4a10      	ldr	r2, [pc, #64]	@ (8001738 <HAL_TIM_Encoder_MspInit+0x88>)
 80016f8:	f043 0302 	orr.w	r3, r3, #2
 80016fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001738 <HAL_TIM_Encoder_MspInit+0x88>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800170a:	23c0      	movs	r3, #192	@ 0xc0
 800170c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170e:	2302      	movs	r3, #2
 8001710:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001716:	2300      	movs	r3, #0
 8001718:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800171a:	2302      	movs	r3, #2
 800171c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	4619      	mov	r1, r3
 8001724:	4805      	ldr	r0, [pc, #20]	@ (800173c <HAL_TIM_Encoder_MspInit+0x8c>)
 8001726:	f000 fe9d 	bl	8002464 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800172a:	bf00      	nop
 800172c:	3728      	adds	r7, #40	@ 0x28
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40000800 	.word	0x40000800
 8001738:	40023800 	.word	0x40023800
 800173c:	40020400 	.word	0x40020400

08001740 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b088      	sub	sp, #32
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001748:	f107 030c 	add.w	r3, r7, #12
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a12      	ldr	r2, [pc, #72]	@ (80017a8 <HAL_TIM_MspPostInit+0x68>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d11e      	bne.n	80017a0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	4b11      	ldr	r3, [pc, #68]	@ (80017ac <HAL_TIM_MspPostInit+0x6c>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	4a10      	ldr	r2, [pc, #64]	@ (80017ac <HAL_TIM_MspPostInit+0x6c>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	6313      	str	r3, [r2, #48]	@ 0x30
 8001772:	4b0e      	ldr	r3, [pc, #56]	@ (80017ac <HAL_TIM_MspPostInit+0x6c>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800177e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001782:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001784:	2302      	movs	r3, #2
 8001786:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178c:	2300      	movs	r3, #0
 800178e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001790:	2301      	movs	r3, #1
 8001792:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001794:	f107 030c 	add.w	r3, r7, #12
 8001798:	4619      	mov	r1, r3
 800179a:	4805      	ldr	r0, [pc, #20]	@ (80017b0 <HAL_TIM_MspPostInit+0x70>)
 800179c:	f000 fe62 	bl	8002464 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80017a0:	bf00      	nop
 80017a2:	3720      	adds	r7, #32
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40010000 	.word	0x40010000
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40020000 	.word	0x40020000

080017b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08a      	sub	sp, #40	@ 0x28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a19      	ldr	r2, [pc, #100]	@ (8001838 <HAL_UART_MspInit+0x84>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d12c      	bne.n	8001830 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	4b18      	ldr	r3, [pc, #96]	@ (800183c <HAL_UART_MspInit+0x88>)
 80017dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017de:	4a17      	ldr	r2, [pc, #92]	@ (800183c <HAL_UART_MspInit+0x88>)
 80017e0:	f043 0320 	orr.w	r3, r3, #32
 80017e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017e6:	4b15      	ldr	r3, [pc, #84]	@ (800183c <HAL_UART_MspInit+0x88>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ea:	f003 0320 	and.w	r3, r3, #32
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	4b11      	ldr	r3, [pc, #68]	@ (800183c <HAL_UART_MspInit+0x88>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fa:	4a10      	ldr	r2, [pc, #64]	@ (800183c <HAL_UART_MspInit+0x88>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	6313      	str	r3, [r2, #48]	@ 0x30
 8001802:	4b0e      	ldr	r3, [pc, #56]	@ (800183c <HAL_UART_MspInit+0x88>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800180e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001812:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001814:	2302      	movs	r3, #2
 8001816:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181c:	2303      	movs	r3, #3
 800181e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001820:	2308      	movs	r3, #8
 8001822:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001824:	f107 0314 	add.w	r3, r7, #20
 8001828:	4619      	mov	r1, r3
 800182a:	4805      	ldr	r0, [pc, #20]	@ (8001840 <HAL_UART_MspInit+0x8c>)
 800182c:	f000 fe1a 	bl	8002464 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001830:	bf00      	nop
 8001832:	3728      	adds	r7, #40	@ 0x28
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40011400 	.word	0x40011400
 800183c:	40023800 	.word	0x40023800
 8001840:	40020000 	.word	0x40020000

08001844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001848:	bf00      	nop
 800184a:	e7fd      	b.n	8001848 <NMI_Handler+0x4>

0800184c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001850:	bf00      	nop
 8001852:	e7fd      	b.n	8001850 <HardFault_Handler+0x4>

08001854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001858:	bf00      	nop
 800185a:	e7fd      	b.n	8001858 <MemManage_Handler+0x4>

0800185c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001860:	bf00      	nop
 8001862:	e7fd      	b.n	8001860 <BusFault_Handler+0x4>

08001864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001868:	bf00      	nop
 800186a:	e7fd      	b.n	8001868 <UsageFault_Handler+0x4>

0800186c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800189a:	f000 f8cf 	bl	8001a3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_Pin);
 80018a6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80018aa:	f000 ff91 	bl	80027d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
	...

080018b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018bc:	4a14      	ldr	r2, [pc, #80]	@ (8001910 <_sbrk+0x5c>)
 80018be:	4b15      	ldr	r3, [pc, #84]	@ (8001914 <_sbrk+0x60>)
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c8:	4b13      	ldr	r3, [pc, #76]	@ (8001918 <_sbrk+0x64>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d102      	bne.n	80018d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d0:	4b11      	ldr	r3, [pc, #68]	@ (8001918 <_sbrk+0x64>)
 80018d2:	4a12      	ldr	r2, [pc, #72]	@ (800191c <_sbrk+0x68>)
 80018d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018d6:	4b10      	ldr	r3, [pc, #64]	@ (8001918 <_sbrk+0x64>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d207      	bcs.n	80018f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e4:	f002 ffc6 	bl	8004874 <__errno>
 80018e8:	4603      	mov	r3, r0
 80018ea:	220c      	movs	r2, #12
 80018ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ee:	f04f 33ff 	mov.w	r3, #4294967295
 80018f2:	e009      	b.n	8001908 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f4:	4b08      	ldr	r3, [pc, #32]	@ (8001918 <_sbrk+0x64>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018fa:	4b07      	ldr	r3, [pc, #28]	@ (8001918 <_sbrk+0x64>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4413      	add	r3, r2
 8001902:	4a05      	ldr	r2, [pc, #20]	@ (8001918 <_sbrk+0x64>)
 8001904:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001906:	68fb      	ldr	r3, [r7, #12]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20020000 	.word	0x20020000
 8001914:	00000400 	.word	0x00000400
 8001918:	2000019c 	.word	0x2000019c
 800191c:	200002f0 	.word	0x200002f0

08001920 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001924:	4b06      	ldr	r3, [pc, #24]	@ (8001940 <SystemInit+0x20>)
 8001926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800192a:	4a05      	ldr	r2, [pc, #20]	@ (8001940 <SystemInit+0x20>)
 800192c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001930:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001944:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800197c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001948:	f7ff ffea 	bl	8001920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800194c:	480c      	ldr	r0, [pc, #48]	@ (8001980 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800194e:	490d      	ldr	r1, [pc, #52]	@ (8001984 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001950:	4a0d      	ldr	r2, [pc, #52]	@ (8001988 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001954:	e002      	b.n	800195c <LoopCopyDataInit>

08001956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800195a:	3304      	adds	r3, #4

0800195c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800195c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800195e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001960:	d3f9      	bcc.n	8001956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001962:	4a0a      	ldr	r2, [pc, #40]	@ (800198c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001964:	4c0a      	ldr	r4, [pc, #40]	@ (8001990 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001968:	e001      	b.n	800196e <LoopFillZerobss>

0800196a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800196a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800196c:	3204      	adds	r2, #4

0800196e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800196e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001970:	d3fb      	bcc.n	800196a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001972:	f002 ff85 	bl	8004880 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001976:	f7ff fa1d 	bl	8000db4 <main>
  bx  lr    
 800197a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800197c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001984:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001988:	080051f4 	.word	0x080051f4
  ldr r2, =_sbss
 800198c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001990:	200002ec 	.word	0x200002ec

08001994 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001994:	e7fe      	b.n	8001994 <ADC_IRQHandler>
	...

08001998 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800199c:	4b0e      	ldr	r3, [pc, #56]	@ (80019d8 <HAL_Init+0x40>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a0d      	ldr	r2, [pc, #52]	@ (80019d8 <HAL_Init+0x40>)
 80019a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019a8:	4b0b      	ldr	r3, [pc, #44]	@ (80019d8 <HAL_Init+0x40>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a0a      	ldr	r2, [pc, #40]	@ (80019d8 <HAL_Init+0x40>)
 80019ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019b4:	4b08      	ldr	r3, [pc, #32]	@ (80019d8 <HAL_Init+0x40>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a07      	ldr	r2, [pc, #28]	@ (80019d8 <HAL_Init+0x40>)
 80019ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c0:	2003      	movs	r0, #3
 80019c2:	f000 fd0d 	bl	80023e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019c6:	200f      	movs	r0, #15
 80019c8:	f000 f808 	bl	80019dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019cc:	f7ff fde2 	bl	8001594 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40023c00 	.word	0x40023c00

080019dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019e4:	4b12      	ldr	r3, [pc, #72]	@ (8001a30 <HAL_InitTick+0x54>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	4b12      	ldr	r3, [pc, #72]	@ (8001a34 <HAL_InitTick+0x58>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	4619      	mov	r1, r3
 80019ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fa:	4618      	mov	r0, r3
 80019fc:	f000 fd25 	bl	800244a <HAL_SYSTICK_Config>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e00e      	b.n	8001a28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2b0f      	cmp	r3, #15
 8001a0e:	d80a      	bhi.n	8001a26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a10:	2200      	movs	r2, #0
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	f04f 30ff 	mov.w	r0, #4294967295
 8001a18:	f000 fced 	bl	80023f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a1c:	4a06      	ldr	r2, [pc, #24]	@ (8001a38 <HAL_InitTick+0x5c>)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
 8001a24:	e000      	b.n	8001a28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20000000 	.word	0x20000000
 8001a34:	20000008 	.word	0x20000008
 8001a38:	20000004 	.word	0x20000004

08001a3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a40:	4b06      	ldr	r3, [pc, #24]	@ (8001a5c <HAL_IncTick+0x20>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	461a      	mov	r2, r3
 8001a46:	4b06      	ldr	r3, [pc, #24]	@ (8001a60 <HAL_IncTick+0x24>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	4a04      	ldr	r2, [pc, #16]	@ (8001a60 <HAL_IncTick+0x24>)
 8001a4e:	6013      	str	r3, [r2, #0]
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	20000008 	.word	0x20000008
 8001a60:	200001a0 	.word	0x200001a0

08001a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return uwTick;
 8001a68:	4b03      	ldr	r3, [pc, #12]	@ (8001a78 <HAL_GetTick+0x14>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	200001a0 	.word	0x200001a0

08001a7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a84:	f7ff ffee 	bl	8001a64 <HAL_GetTick>
 8001a88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a94:	d005      	beq.n	8001aa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a96:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac0 <HAL_Delay+0x44>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001aa2:	bf00      	nop
 8001aa4:	f7ff ffde 	bl	8001a64 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d8f7      	bhi.n	8001aa4 <HAL_Delay+0x28>
  {
  }
}
 8001ab4:	bf00      	nop
 8001ab6:	bf00      	nop
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000008 	.word	0x20000008

08001ac4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001acc:	2300      	movs	r3, #0
 8001ace:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e033      	b.n	8001b42 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d109      	bne.n	8001af6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7ff fd7e 	bl	80015e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afa:	f003 0310 	and.w	r3, r3, #16
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d118      	bne.n	8001b34 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b06:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001b0a:	f023 0302 	bic.w	r3, r3, #2
 8001b0e:	f043 0202 	orr.w	r2, r3, #2
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 fa96 	bl	8002048 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b26:	f023 0303 	bic.w	r3, r3, #3
 8001b2a:	f043 0201 	orr.w	r2, r3, #1
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b32:	e001      	b.n	8001b38 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b54:	2300      	movs	r3, #0
 8001b56:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d101      	bne.n	8001b66 <HAL_ADC_Start+0x1a>
 8001b62:	2302      	movs	r3, #2
 8001b64:	e097      	b.n	8001c96 <HAL_ADC_Start+0x14a>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d018      	beq.n	8001bae <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	689a      	ldr	r2, [r3, #8]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f042 0201 	orr.w	r2, r2, #1
 8001b8a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b8c:	4b45      	ldr	r3, [pc, #276]	@ (8001ca4 <HAL_ADC_Start+0x158>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a45      	ldr	r2, [pc, #276]	@ (8001ca8 <HAL_ADC_Start+0x15c>)
 8001b92:	fba2 2303 	umull	r2, r3, r2, r3
 8001b96:	0c9a      	lsrs	r2, r3, #18
 8001b98:	4613      	mov	r3, r2
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	4413      	add	r3, r2
 8001b9e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001ba0:	e002      	b.n	8001ba8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1f9      	bne.n	8001ba2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d15f      	bne.n	8001c7c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001bc4:	f023 0301 	bic.w	r3, r3, #1
 8001bc8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d007      	beq.n	8001bee <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001be6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001bfa:	d106      	bne.n	8001c0a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c00:	f023 0206 	bic.w	r2, r3, #6
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	645a      	str	r2, [r3, #68]	@ 0x44
 8001c08:	e002      	b.n	8001c10 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c18:	4b24      	ldr	r3, [pc, #144]	@ (8001cac <HAL_ADC_Start+0x160>)
 8001c1a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001c24:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f003 031f 	and.w	r3, r3, #31
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10f      	bne.n	8001c52 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d129      	bne.n	8001c94 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689a      	ldr	r2, [r3, #8]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	e020      	b.n	8001c94 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a16      	ldr	r2, [pc, #88]	@ (8001cb0 <HAL_ADC_Start+0x164>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d11b      	bne.n	8001c94 <HAL_ADC_Start+0x148>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d114      	bne.n	8001c94 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	e00b      	b.n	8001c94 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c80:	f043 0210 	orr.w	r2, r3, #16
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8c:	f043 0201 	orr.w	r2, r3, #1
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3714      	adds	r7, #20
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	20000000 	.word	0x20000000
 8001ca8:	431bde83 	.word	0x431bde83
 8001cac:	40012300 	.word	0x40012300
 8001cb0:	40012000 	.word	0x40012000

08001cb4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ccc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cd0:	d113      	bne.n	8001cfa <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001cdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ce0:	d10b      	bne.n	8001cfa <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce6:	f043 0220 	orr.w	r2, r3, #32
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e063      	b.n	8001dc2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cfa:	f7ff feb3 	bl	8001a64 <HAL_GetTick>
 8001cfe:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d00:	e021      	b.n	8001d46 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d08:	d01d      	beq.n	8001d46 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d007      	beq.n	8001d20 <HAL_ADC_PollForConversion+0x6c>
 8001d10:	f7ff fea8 	bl	8001a64 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d212      	bcs.n	8001d46 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d00b      	beq.n	8001d46 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d32:	f043 0204 	orr.w	r2, r3, #4
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e03d      	b.n	8001dc2 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d1d6      	bne.n	8001d02 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f06f 0212 	mvn.w	r2, #18
 8001d5c:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d62:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d123      	bne.n	8001dc0 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d11f      	bne.n	8001dc0 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d86:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d006      	beq.n	8001d9c <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d111      	bne.n	8001dc0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d105      	bne.n	8001dc0 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db8:	f043 0201 	orr.w	r2, r3, #1
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001dee:	2300      	movs	r3, #0
 8001df0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d101      	bne.n	8001e00 <HAL_ADC_ConfigChannel+0x1c>
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	e113      	b.n	8002028 <HAL_ADC_ConfigChannel+0x244>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2b09      	cmp	r3, #9
 8001e0e:	d925      	bls.n	8001e5c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68d9      	ldr	r1, [r3, #12]
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4613      	mov	r3, r2
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	4413      	add	r3, r2
 8001e24:	3b1e      	subs	r3, #30
 8001e26:	2207      	movs	r2, #7
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43da      	mvns	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	400a      	ands	r2, r1
 8001e34:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68d9      	ldr	r1, [r3, #12]
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	4618      	mov	r0, r3
 8001e48:	4603      	mov	r3, r0
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	4403      	add	r3, r0
 8001e4e:	3b1e      	subs	r3, #30
 8001e50:	409a      	lsls	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	60da      	str	r2, [r3, #12]
 8001e5a:	e022      	b.n	8001ea2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6919      	ldr	r1, [r3, #16]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	4413      	add	r3, r2
 8001e70:	2207      	movs	r2, #7
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43da      	mvns	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	400a      	ands	r2, r1
 8001e7e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6919      	ldr	r1, [r3, #16]
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	689a      	ldr	r2, [r3, #8]
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	4618      	mov	r0, r3
 8001e92:	4603      	mov	r3, r0
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	4403      	add	r3, r0
 8001e98:	409a      	lsls	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b06      	cmp	r3, #6
 8001ea8:	d824      	bhi.n	8001ef4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	3b05      	subs	r3, #5
 8001ebc:	221f      	movs	r2, #31
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43da      	mvns	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	400a      	ands	r2, r1
 8001eca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	4618      	mov	r0, r3
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	3b05      	subs	r3, #5
 8001ee6:	fa00 f203 	lsl.w	r2, r0, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ef2:	e04c      	b.n	8001f8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b0c      	cmp	r3, #12
 8001efa:	d824      	bhi.n	8001f46 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	4613      	mov	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	3b23      	subs	r3, #35	@ 0x23
 8001f0e:	221f      	movs	r2, #31
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43da      	mvns	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	400a      	ands	r2, r1
 8001f1c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	3b23      	subs	r3, #35	@ 0x23
 8001f38:	fa00 f203 	lsl.w	r2, r0, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f44:	e023      	b.n	8001f8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	4613      	mov	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	3b41      	subs	r3, #65	@ 0x41
 8001f58:	221f      	movs	r2, #31
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43da      	mvns	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	400a      	ands	r2, r1
 8001f66:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	4618      	mov	r0, r3
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	4413      	add	r3, r2
 8001f80:	3b41      	subs	r3, #65	@ 0x41
 8001f82:	fa00 f203 	lsl.w	r2, r0, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f8e:	4b29      	ldr	r3, [pc, #164]	@ (8002034 <HAL_ADC_ConfigChannel+0x250>)
 8001f90:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a28      	ldr	r2, [pc, #160]	@ (8002038 <HAL_ADC_ConfigChannel+0x254>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d10f      	bne.n	8001fbc <HAL_ADC_ConfigChannel+0x1d8>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2b12      	cmp	r3, #18
 8001fa2:	d10b      	bne.n	8001fbc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a1d      	ldr	r2, [pc, #116]	@ (8002038 <HAL_ADC_ConfigChannel+0x254>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d12b      	bne.n	800201e <HAL_ADC_ConfigChannel+0x23a>
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a1c      	ldr	r2, [pc, #112]	@ (800203c <HAL_ADC_ConfigChannel+0x258>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d003      	beq.n	8001fd8 <HAL_ADC_ConfigChannel+0x1f4>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2b11      	cmp	r3, #17
 8001fd6:	d122      	bne.n	800201e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a11      	ldr	r2, [pc, #68]	@ (800203c <HAL_ADC_ConfigChannel+0x258>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d111      	bne.n	800201e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ffa:	4b11      	ldr	r3, [pc, #68]	@ (8002040 <HAL_ADC_ConfigChannel+0x25c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a11      	ldr	r2, [pc, #68]	@ (8002044 <HAL_ADC_ConfigChannel+0x260>)
 8002000:	fba2 2303 	umull	r2, r3, r2, r3
 8002004:	0c9a      	lsrs	r2, r3, #18
 8002006:	4613      	mov	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002010:	e002      	b.n	8002018 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	3b01      	subs	r3, #1
 8002016:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f9      	bne.n	8002012 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	40012300 	.word	0x40012300
 8002038:	40012000 	.word	0x40012000
 800203c:	10000012 	.word	0x10000012
 8002040:	20000000 	.word	0x20000000
 8002044:	431bde83 	.word	0x431bde83

08002048 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002050:	4b79      	ldr	r3, [pc, #484]	@ (8002238 <ADC_Init+0x1f0>)
 8002052:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	685a      	ldr	r2, [r3, #4]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	431a      	orrs	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	685a      	ldr	r2, [r3, #4]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800207c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6859      	ldr	r1, [r3, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	021a      	lsls	r2, r3, #8
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80020a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6859      	ldr	r1, [r3, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	430a      	orrs	r2, r1
 80020b2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6899      	ldr	r1, [r3, #8]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68da      	ldr	r2, [r3, #12]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	430a      	orrs	r2, r1
 80020d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020da:	4a58      	ldr	r2, [pc, #352]	@ (800223c <ADC_Init+0x1f4>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d022      	beq.n	8002126 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80020ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6899      	ldr	r1, [r3, #8]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	430a      	orrs	r2, r1
 8002100:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002110:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6899      	ldr	r1, [r3, #8]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	430a      	orrs	r2, r1
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	e00f      	b.n	8002146 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002134:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002144:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 0202 	bic.w	r2, r2, #2
 8002154:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6899      	ldr	r1, [r3, #8]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	7e1b      	ldrb	r3, [r3, #24]
 8002160:	005a      	lsls	r2, r3, #1
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d01b      	beq.n	80021ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002182:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	685a      	ldr	r2, [r3, #4]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002192:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6859      	ldr	r1, [r3, #4]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800219e:	3b01      	subs	r3, #1
 80021a0:	035a      	lsls	r2, r3, #13
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	430a      	orrs	r2, r1
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	e007      	b.n	80021bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	685a      	ldr	r2, [r3, #4]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021ba:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80021ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	3b01      	subs	r3, #1
 80021d8:	051a      	lsls	r2, r3, #20
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	430a      	orrs	r2, r1
 80021e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80021f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6899      	ldr	r1, [r3, #8]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80021fe:	025a      	lsls	r2, r3, #9
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	430a      	orrs	r2, r1
 8002206:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002216:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6899      	ldr	r1, [r3, #8]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	029a      	lsls	r2, r3, #10
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	430a      	orrs	r2, r1
 800222a:	609a      	str	r2, [r3, #8]
}
 800222c:	bf00      	nop
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	40012300 	.word	0x40012300
 800223c:	0f000001 	.word	0x0f000001

08002240 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002250:	4b0c      	ldr	r3, [pc, #48]	@ (8002284 <__NVIC_SetPriorityGrouping+0x44>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800225c:	4013      	ands	r3, r2
 800225e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002268:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800226c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002270:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002272:	4a04      	ldr	r2, [pc, #16]	@ (8002284 <__NVIC_SetPriorityGrouping+0x44>)
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	60d3      	str	r3, [r2, #12]
}
 8002278:	bf00      	nop
 800227a:	3714      	adds	r7, #20
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800228c:	4b04      	ldr	r3, [pc, #16]	@ (80022a0 <__NVIC_GetPriorityGrouping+0x18>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	0a1b      	lsrs	r3, r3, #8
 8002292:	f003 0307 	and.w	r3, r3, #7
}
 8002296:	4618      	mov	r0, r3
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	e000ed00 	.word	0xe000ed00

080022a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	db0b      	blt.n	80022ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022b6:	79fb      	ldrb	r3, [r7, #7]
 80022b8:	f003 021f 	and.w	r2, r3, #31
 80022bc:	4907      	ldr	r1, [pc, #28]	@ (80022dc <__NVIC_EnableIRQ+0x38>)
 80022be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c2:	095b      	lsrs	r3, r3, #5
 80022c4:	2001      	movs	r0, #1
 80022c6:	fa00 f202 	lsl.w	r2, r0, r2
 80022ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	e000e100 	.word	0xe000e100

080022e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	6039      	str	r1, [r7, #0]
 80022ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	db0a      	blt.n	800230a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	490c      	ldr	r1, [pc, #48]	@ (800232c <__NVIC_SetPriority+0x4c>)
 80022fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fe:	0112      	lsls	r2, r2, #4
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	440b      	add	r3, r1
 8002304:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002308:	e00a      	b.n	8002320 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	b2da      	uxtb	r2, r3
 800230e:	4908      	ldr	r1, [pc, #32]	@ (8002330 <__NVIC_SetPriority+0x50>)
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	3b04      	subs	r3, #4
 8002318:	0112      	lsls	r2, r2, #4
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	440b      	add	r3, r1
 800231e:	761a      	strb	r2, [r3, #24]
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	e000e100 	.word	0xe000e100
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002334:	b480      	push	{r7}
 8002336:	b089      	sub	sp, #36	@ 0x24
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f1c3 0307 	rsb	r3, r3, #7
 800234e:	2b04      	cmp	r3, #4
 8002350:	bf28      	it	cs
 8002352:	2304      	movcs	r3, #4
 8002354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	3304      	adds	r3, #4
 800235a:	2b06      	cmp	r3, #6
 800235c:	d902      	bls.n	8002364 <NVIC_EncodePriority+0x30>
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	3b03      	subs	r3, #3
 8002362:	e000      	b.n	8002366 <NVIC_EncodePriority+0x32>
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002368:	f04f 32ff 	mov.w	r2, #4294967295
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43da      	mvns	r2, r3
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	401a      	ands	r2, r3
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800237c:	f04f 31ff 	mov.w	r1, #4294967295
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	fa01 f303 	lsl.w	r3, r1, r3
 8002386:	43d9      	mvns	r1, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800238c:	4313      	orrs	r3, r2
         );
}
 800238e:	4618      	mov	r0, r3
 8002390:	3724      	adds	r7, #36	@ 0x24
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
	...

0800239c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023ac:	d301      	bcc.n	80023b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ae:	2301      	movs	r3, #1
 80023b0:	e00f      	b.n	80023d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023b2:	4a0a      	ldr	r2, [pc, #40]	@ (80023dc <SysTick_Config+0x40>)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ba:	210f      	movs	r1, #15
 80023bc:	f04f 30ff 	mov.w	r0, #4294967295
 80023c0:	f7ff ff8e 	bl	80022e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023c4:	4b05      	ldr	r3, [pc, #20]	@ (80023dc <SysTick_Config+0x40>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ca:	4b04      	ldr	r3, [pc, #16]	@ (80023dc <SysTick_Config+0x40>)
 80023cc:	2207      	movs	r2, #7
 80023ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	e000e010 	.word	0xe000e010

080023e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f7ff ff29 	bl	8002240 <__NVIC_SetPriorityGrouping>
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b086      	sub	sp, #24
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	4603      	mov	r3, r0
 80023fe:	60b9      	str	r1, [r7, #8]
 8002400:	607a      	str	r2, [r7, #4]
 8002402:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002408:	f7ff ff3e 	bl	8002288 <__NVIC_GetPriorityGrouping>
 800240c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	68b9      	ldr	r1, [r7, #8]
 8002412:	6978      	ldr	r0, [r7, #20]
 8002414:	f7ff ff8e 	bl	8002334 <NVIC_EncodePriority>
 8002418:	4602      	mov	r2, r0
 800241a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800241e:	4611      	mov	r1, r2
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff ff5d 	bl	80022e0 <__NVIC_SetPriority>
}
 8002426:	bf00      	nop
 8002428:	3718      	adds	r7, #24
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b082      	sub	sp, #8
 8002432:	af00      	add	r7, sp, #0
 8002434:	4603      	mov	r3, r0
 8002436:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff ff31 	bl	80022a4 <__NVIC_EnableIRQ>
}
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b082      	sub	sp, #8
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7ff ffa2 	bl	800239c <SysTick_Config>
 8002458:	4603      	mov	r3, r0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
	...

08002464 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002464:	b480      	push	{r7}
 8002466:	b089      	sub	sp, #36	@ 0x24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800246e:	2300      	movs	r3, #0
 8002470:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002472:	2300      	movs	r3, #0
 8002474:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002476:	2300      	movs	r3, #0
 8002478:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800247a:	2300      	movs	r3, #0
 800247c:	61fb      	str	r3, [r7, #28]
 800247e:	e159      	b.n	8002734 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002480:	2201      	movs	r2, #1
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	4013      	ands	r3, r2
 8002492:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	429a      	cmp	r2, r3
 800249a:	f040 8148 	bne.w	800272e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d005      	beq.n	80024b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d130      	bne.n	8002518 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	2203      	movs	r2, #3
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	43db      	mvns	r3, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4013      	ands	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	68da      	ldr	r2, [r3, #12]
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4313      	orrs	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024ec:	2201      	movs	r2, #1
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	43db      	mvns	r3, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4013      	ands	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	091b      	lsrs	r3, r3, #4
 8002502:	f003 0201 	and.w	r2, r3, #1
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4313      	orrs	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 0303 	and.w	r3, r3, #3
 8002520:	2b03      	cmp	r3, #3
 8002522:	d017      	beq.n	8002554 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	2203      	movs	r2, #3
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4313      	orrs	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 0303 	and.w	r3, r3, #3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d123      	bne.n	80025a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	08da      	lsrs	r2, r3, #3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3208      	adds	r2, #8
 8002568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800256c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	220f      	movs	r2, #15
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4013      	ands	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	691a      	ldr	r2, [r3, #16]
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4313      	orrs	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	08da      	lsrs	r2, r3, #3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	3208      	adds	r2, #8
 80025a2:	69b9      	ldr	r1, [r7, #24]
 80025a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	2203      	movs	r2, #3
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 0203 	and.w	r2, r3, #3
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 80a2 	beq.w	800272e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	4b57      	ldr	r3, [pc, #348]	@ (800274c <HAL_GPIO_Init+0x2e8>)
 80025f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f2:	4a56      	ldr	r2, [pc, #344]	@ (800274c <HAL_GPIO_Init+0x2e8>)
 80025f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80025fa:	4b54      	ldr	r3, [pc, #336]	@ (800274c <HAL_GPIO_Init+0x2e8>)
 80025fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002606:	4a52      	ldr	r2, [pc, #328]	@ (8002750 <HAL_GPIO_Init+0x2ec>)
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	089b      	lsrs	r3, r3, #2
 800260c:	3302      	adds	r3, #2
 800260e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002612:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	220f      	movs	r2, #15
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43db      	mvns	r3, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4013      	ands	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a49      	ldr	r2, [pc, #292]	@ (8002754 <HAL_GPIO_Init+0x2f0>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d019      	beq.n	8002666 <HAL_GPIO_Init+0x202>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a48      	ldr	r2, [pc, #288]	@ (8002758 <HAL_GPIO_Init+0x2f4>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d013      	beq.n	8002662 <HAL_GPIO_Init+0x1fe>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a47      	ldr	r2, [pc, #284]	@ (800275c <HAL_GPIO_Init+0x2f8>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d00d      	beq.n	800265e <HAL_GPIO_Init+0x1fa>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a46      	ldr	r2, [pc, #280]	@ (8002760 <HAL_GPIO_Init+0x2fc>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d007      	beq.n	800265a <HAL_GPIO_Init+0x1f6>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a45      	ldr	r2, [pc, #276]	@ (8002764 <HAL_GPIO_Init+0x300>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d101      	bne.n	8002656 <HAL_GPIO_Init+0x1f2>
 8002652:	2304      	movs	r3, #4
 8002654:	e008      	b.n	8002668 <HAL_GPIO_Init+0x204>
 8002656:	2307      	movs	r3, #7
 8002658:	e006      	b.n	8002668 <HAL_GPIO_Init+0x204>
 800265a:	2303      	movs	r3, #3
 800265c:	e004      	b.n	8002668 <HAL_GPIO_Init+0x204>
 800265e:	2302      	movs	r3, #2
 8002660:	e002      	b.n	8002668 <HAL_GPIO_Init+0x204>
 8002662:	2301      	movs	r3, #1
 8002664:	e000      	b.n	8002668 <HAL_GPIO_Init+0x204>
 8002666:	2300      	movs	r3, #0
 8002668:	69fa      	ldr	r2, [r7, #28]
 800266a:	f002 0203 	and.w	r2, r2, #3
 800266e:	0092      	lsls	r2, r2, #2
 8002670:	4093      	lsls	r3, r2
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4313      	orrs	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002678:	4935      	ldr	r1, [pc, #212]	@ (8002750 <HAL_GPIO_Init+0x2ec>)
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	089b      	lsrs	r3, r3, #2
 800267e:	3302      	adds	r3, #2
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002686:	4b38      	ldr	r3, [pc, #224]	@ (8002768 <HAL_GPIO_Init+0x304>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	43db      	mvns	r3, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4013      	ands	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026aa:	4a2f      	ldr	r2, [pc, #188]	@ (8002768 <HAL_GPIO_Init+0x304>)
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002768 <HAL_GPIO_Init+0x304>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	43db      	mvns	r3, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4013      	ands	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026d4:	4a24      	ldr	r2, [pc, #144]	@ (8002768 <HAL_GPIO_Init+0x304>)
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026da:	4b23      	ldr	r3, [pc, #140]	@ (8002768 <HAL_GPIO_Init+0x304>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	43db      	mvns	r3, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4013      	ands	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026fe:	4a1a      	ldr	r2, [pc, #104]	@ (8002768 <HAL_GPIO_Init+0x304>)
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002704:	4b18      	ldr	r3, [pc, #96]	@ (8002768 <HAL_GPIO_Init+0x304>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	43db      	mvns	r3, r3
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4013      	ands	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	4313      	orrs	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002728:	4a0f      	ldr	r2, [pc, #60]	@ (8002768 <HAL_GPIO_Init+0x304>)
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	3301      	adds	r3, #1
 8002732:	61fb      	str	r3, [r7, #28]
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	2b0f      	cmp	r3, #15
 8002738:	f67f aea2 	bls.w	8002480 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800273c:	bf00      	nop
 800273e:	bf00      	nop
 8002740:	3724      	adds	r7, #36	@ 0x24
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	40023800 	.word	0x40023800
 8002750:	40013800 	.word	0x40013800
 8002754:	40020000 	.word	0x40020000
 8002758:	40020400 	.word	0x40020400
 800275c:	40020800 	.word	0x40020800
 8002760:	40020c00 	.word	0x40020c00
 8002764:	40021000 	.word	0x40021000
 8002768:	40013c00 	.word	0x40013c00

0800276c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	460b      	mov	r3, r1
 8002776:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691a      	ldr	r2, [r3, #16]
 800277c:	887b      	ldrh	r3, [r7, #2]
 800277e:	4013      	ands	r3, r2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d002      	beq.n	800278a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002784:	2301      	movs	r3, #1
 8002786:	73fb      	strb	r3, [r7, #15]
 8002788:	e001      	b.n	800278e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800278a:	2300      	movs	r3, #0
 800278c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800278e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002790:	4618      	mov	r0, r3
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	460b      	mov	r3, r1
 80027a6:	807b      	strh	r3, [r7, #2]
 80027a8:	4613      	mov	r3, r2
 80027aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027ac:	787b      	ldrb	r3, [r7, #1]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027b2:	887a      	ldrh	r2, [r7, #2]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027b8:	e003      	b.n	80027c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027ba:	887b      	ldrh	r3, [r7, #2]
 80027bc:	041a      	lsls	r2, r3, #16
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	619a      	str	r2, [r3, #24]
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
	...

080027d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	4603      	mov	r3, r0
 80027d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80027da:	4b08      	ldr	r3, [pc, #32]	@ (80027fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027dc:	695a      	ldr	r2, [r3, #20]
 80027de:	88fb      	ldrh	r3, [r7, #6]
 80027e0:	4013      	ands	r3, r2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d006      	beq.n	80027f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027e6:	4a05      	ldr	r2, [pc, #20]	@ (80027fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027e8:	88fb      	ldrh	r3, [r7, #6]
 80027ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027ec:	88fb      	ldrh	r3, [r7, #6]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7fe feba 	bl	8001568 <HAL_GPIO_EXTI_Callback>
  }
}
 80027f4:	bf00      	nop
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40013c00 	.word	0x40013c00

08002800 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e267      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d075      	beq.n	800290a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800281e:	4b88      	ldr	r3, [pc, #544]	@ (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 030c 	and.w	r3, r3, #12
 8002826:	2b04      	cmp	r3, #4
 8002828:	d00c      	beq.n	8002844 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800282a:	4b85      	ldr	r3, [pc, #532]	@ (8002a40 <HAL_RCC_OscConfig+0x240>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002832:	2b08      	cmp	r3, #8
 8002834:	d112      	bne.n	800285c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002836:	4b82      	ldr	r3, [pc, #520]	@ (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800283e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002842:	d10b      	bne.n	800285c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002844:	4b7e      	ldr	r3, [pc, #504]	@ (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d05b      	beq.n	8002908 <HAL_RCC_OscConfig+0x108>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d157      	bne.n	8002908 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e242      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002864:	d106      	bne.n	8002874 <HAL_RCC_OscConfig+0x74>
 8002866:	4b76      	ldr	r3, [pc, #472]	@ (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a75      	ldr	r2, [pc, #468]	@ (8002a40 <HAL_RCC_OscConfig+0x240>)
 800286c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002870:	6013      	str	r3, [r2, #0]
 8002872:	e01d      	b.n	80028b0 <HAL_RCC_OscConfig+0xb0>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800287c:	d10c      	bne.n	8002898 <HAL_RCC_OscConfig+0x98>
 800287e:	4b70      	ldr	r3, [pc, #448]	@ (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a6f      	ldr	r2, [pc, #444]	@ (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002884:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002888:	6013      	str	r3, [r2, #0]
 800288a:	4b6d      	ldr	r3, [pc, #436]	@ (8002a40 <HAL_RCC_OscConfig+0x240>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a6c      	ldr	r2, [pc, #432]	@ (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002890:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002894:	6013      	str	r3, [r2, #0]
 8002896:	e00b      	b.n	80028b0 <HAL_RCC_OscConfig+0xb0>
 8002898:	4b69      	ldr	r3, [pc, #420]	@ (8002a40 <HAL_RCC_OscConfig+0x240>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a68      	ldr	r2, [pc, #416]	@ (8002a40 <HAL_RCC_OscConfig+0x240>)
 800289e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028a2:	6013      	str	r3, [r2, #0]
 80028a4:	4b66      	ldr	r3, [pc, #408]	@ (8002a40 <HAL_RCC_OscConfig+0x240>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a65      	ldr	r2, [pc, #404]	@ (8002a40 <HAL_RCC_OscConfig+0x240>)
 80028aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d013      	beq.n	80028e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b8:	f7ff f8d4 	bl	8001a64 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028c0:	f7ff f8d0 	bl	8001a64 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b64      	cmp	r3, #100	@ 0x64
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e207      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028d2:	4b5b      	ldr	r3, [pc, #364]	@ (8002a40 <HAL_RCC_OscConfig+0x240>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0f0      	beq.n	80028c0 <HAL_RCC_OscConfig+0xc0>
 80028de:	e014      	b.n	800290a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e0:	f7ff f8c0 	bl	8001a64 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028e8:	f7ff f8bc 	bl	8001a64 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b64      	cmp	r3, #100	@ 0x64
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e1f3      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028fa:	4b51      	ldr	r3, [pc, #324]	@ (8002a40 <HAL_RCC_OscConfig+0x240>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f0      	bne.n	80028e8 <HAL_RCC_OscConfig+0xe8>
 8002906:	e000      	b.n	800290a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002908:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d063      	beq.n	80029de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002916:	4b4a      	ldr	r3, [pc, #296]	@ (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 030c 	and.w	r3, r3, #12
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00b      	beq.n	800293a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002922:	4b47      	ldr	r3, [pc, #284]	@ (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800292a:	2b08      	cmp	r3, #8
 800292c:	d11c      	bne.n	8002968 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800292e:	4b44      	ldr	r3, [pc, #272]	@ (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d116      	bne.n	8002968 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800293a:	4b41      	ldr	r3, [pc, #260]	@ (8002a40 <HAL_RCC_OscConfig+0x240>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d005      	beq.n	8002952 <HAL_RCC_OscConfig+0x152>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d001      	beq.n	8002952 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e1c7      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002952:	4b3b      	ldr	r3, [pc, #236]	@ (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	4937      	ldr	r1, [pc, #220]	@ (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002962:	4313      	orrs	r3, r2
 8002964:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002966:	e03a      	b.n	80029de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d020      	beq.n	80029b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002970:	4b34      	ldr	r3, [pc, #208]	@ (8002a44 <HAL_RCC_OscConfig+0x244>)
 8002972:	2201      	movs	r2, #1
 8002974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002976:	f7ff f875 	bl	8001a64 <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800297e:	f7ff f871 	bl	8001a64 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e1a8      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002990:	4b2b      	ldr	r3, [pc, #172]	@ (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d0f0      	beq.n	800297e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299c:	4b28      	ldr	r3, [pc, #160]	@ (8002a40 <HAL_RCC_OscConfig+0x240>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	4925      	ldr	r1, [pc, #148]	@ (8002a40 <HAL_RCC_OscConfig+0x240>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	600b      	str	r3, [r1, #0]
 80029b0:	e015      	b.n	80029de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029b2:	4b24      	ldr	r3, [pc, #144]	@ (8002a44 <HAL_RCC_OscConfig+0x244>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b8:	f7ff f854 	bl	8001a64 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029c0:	f7ff f850 	bl	8001a64 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e187      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002a40 <HAL_RCC_OscConfig+0x240>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1f0      	bne.n	80029c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d036      	beq.n	8002a58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d016      	beq.n	8002a20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029f2:	4b15      	ldr	r3, [pc, #84]	@ (8002a48 <HAL_RCC_OscConfig+0x248>)
 80029f4:	2201      	movs	r2, #1
 80029f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f8:	f7ff f834 	bl	8001a64 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a00:	f7ff f830 	bl	8001a64 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e167      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a12:	4b0b      	ldr	r3, [pc, #44]	@ (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002a14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0f0      	beq.n	8002a00 <HAL_RCC_OscConfig+0x200>
 8002a1e:	e01b      	b.n	8002a58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a20:	4b09      	ldr	r3, [pc, #36]	@ (8002a48 <HAL_RCC_OscConfig+0x248>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a26:	f7ff f81d 	bl	8001a64 <HAL_GetTick>
 8002a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a2c:	e00e      	b.n	8002a4c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a2e:	f7ff f819 	bl	8001a64 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d907      	bls.n	8002a4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e150      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
 8002a40:	40023800 	.word	0x40023800
 8002a44:	42470000 	.word	0x42470000
 8002a48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a4c:	4b88      	ldr	r3, [pc, #544]	@ (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002a4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1ea      	bne.n	8002a2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 8097 	beq.w	8002b94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a66:	2300      	movs	r3, #0
 8002a68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a6a:	4b81      	ldr	r3, [pc, #516]	@ (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10f      	bne.n	8002a96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a76:	2300      	movs	r3, #0
 8002a78:	60bb      	str	r3, [r7, #8]
 8002a7a:	4b7d      	ldr	r3, [pc, #500]	@ (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7e:	4a7c      	ldr	r2, [pc, #496]	@ (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002a80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a84:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a86:	4b7a      	ldr	r3, [pc, #488]	@ (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a8e:	60bb      	str	r3, [r7, #8]
 8002a90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a92:	2301      	movs	r3, #1
 8002a94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a96:	4b77      	ldr	r3, [pc, #476]	@ (8002c74 <HAL_RCC_OscConfig+0x474>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d118      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aa2:	4b74      	ldr	r3, [pc, #464]	@ (8002c74 <HAL_RCC_OscConfig+0x474>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a73      	ldr	r2, [pc, #460]	@ (8002c74 <HAL_RCC_OscConfig+0x474>)
 8002aa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aae:	f7fe ffd9 	bl	8001a64 <HAL_GetTick>
 8002ab2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab6:	f7fe ffd5 	bl	8001a64 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e10c      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac8:	4b6a      	ldr	r3, [pc, #424]	@ (8002c74 <HAL_RCC_OscConfig+0x474>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0f0      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d106      	bne.n	8002aea <HAL_RCC_OscConfig+0x2ea>
 8002adc:	4b64      	ldr	r3, [pc, #400]	@ (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002ade:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ae0:	4a63      	ldr	r2, [pc, #396]	@ (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ae8:	e01c      	b.n	8002b24 <HAL_RCC_OscConfig+0x324>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	2b05      	cmp	r3, #5
 8002af0:	d10c      	bne.n	8002b0c <HAL_RCC_OscConfig+0x30c>
 8002af2:	4b5f      	ldr	r3, [pc, #380]	@ (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002af6:	4a5e      	ldr	r2, [pc, #376]	@ (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002af8:	f043 0304 	orr.w	r3, r3, #4
 8002afc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002afe:	4b5c      	ldr	r3, [pc, #368]	@ (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b02:	4a5b      	ldr	r2, [pc, #364]	@ (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b0a:	e00b      	b.n	8002b24 <HAL_RCC_OscConfig+0x324>
 8002b0c:	4b58      	ldr	r3, [pc, #352]	@ (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b10:	4a57      	ldr	r2, [pc, #348]	@ (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b12:	f023 0301 	bic.w	r3, r3, #1
 8002b16:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b18:	4b55      	ldr	r3, [pc, #340]	@ (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b1c:	4a54      	ldr	r2, [pc, #336]	@ (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b1e:	f023 0304 	bic.w	r3, r3, #4
 8002b22:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d015      	beq.n	8002b58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2c:	f7fe ff9a 	bl	8001a64 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b32:	e00a      	b.n	8002b4a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b34:	f7fe ff96 	bl	8001a64 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e0cb      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b4a:	4b49      	ldr	r3, [pc, #292]	@ (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0ee      	beq.n	8002b34 <HAL_RCC_OscConfig+0x334>
 8002b56:	e014      	b.n	8002b82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b58:	f7fe ff84 	bl	8001a64 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b5e:	e00a      	b.n	8002b76 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b60:	f7fe ff80 	bl	8001a64 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e0b5      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b76:	4b3e      	ldr	r3, [pc, #248]	@ (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1ee      	bne.n	8002b60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b82:	7dfb      	ldrb	r3, [r7, #23]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d105      	bne.n	8002b94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b88:	4b39      	ldr	r3, [pc, #228]	@ (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8c:	4a38      	ldr	r2, [pc, #224]	@ (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b92:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 80a1 	beq.w	8002ce0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b9e:	4b34      	ldr	r3, [pc, #208]	@ (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 030c 	and.w	r3, r3, #12
 8002ba6:	2b08      	cmp	r3, #8
 8002ba8:	d05c      	beq.n	8002c64 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d141      	bne.n	8002c36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bb2:	4b31      	ldr	r3, [pc, #196]	@ (8002c78 <HAL_RCC_OscConfig+0x478>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb8:	f7fe ff54 	bl	8001a64 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bc0:	f7fe ff50 	bl	8001a64 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e087      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bd2:	4b27      	ldr	r3, [pc, #156]	@ (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f0      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69da      	ldr	r2, [r3, #28]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bec:	019b      	lsls	r3, r3, #6
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bf4:	085b      	lsrs	r3, r3, #1
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	041b      	lsls	r3, r3, #16
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c00:	061b      	lsls	r3, r3, #24
 8002c02:	491b      	ldr	r1, [pc, #108]	@ (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c08:	4b1b      	ldr	r3, [pc, #108]	@ (8002c78 <HAL_RCC_OscConfig+0x478>)
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0e:	f7fe ff29 	bl	8001a64 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c16:	f7fe ff25 	bl	8001a64 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e05c      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c28:	4b11      	ldr	r3, [pc, #68]	@ (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0f0      	beq.n	8002c16 <HAL_RCC_OscConfig+0x416>
 8002c34:	e054      	b.n	8002ce0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c36:	4b10      	ldr	r3, [pc, #64]	@ (8002c78 <HAL_RCC_OscConfig+0x478>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3c:	f7fe ff12 	bl	8001a64 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c44:	f7fe ff0e 	bl	8001a64 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e045      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c56:	4b06      	ldr	r3, [pc, #24]	@ (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f0      	bne.n	8002c44 <HAL_RCC_OscConfig+0x444>
 8002c62:	e03d      	b.n	8002ce0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d107      	bne.n	8002c7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e038      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
 8002c70:	40023800 	.word	0x40023800
 8002c74:	40007000 	.word	0x40007000
 8002c78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8002cec <HAL_RCC_OscConfig+0x4ec>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d028      	beq.n	8002cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d121      	bne.n	8002cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d11a      	bne.n	8002cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002cac:	4013      	ands	r3, r2
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002cb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d111      	bne.n	8002cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc2:	085b      	lsrs	r3, r3, #1
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d107      	bne.n	8002cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d001      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e000      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3718      	adds	r7, #24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40023800 	.word	0x40023800

08002cf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e0cc      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d04:	4b68      	ldr	r3, [pc, #416]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d90c      	bls.n	8002d2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d12:	4b65      	ldr	r3, [pc, #404]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d1a:	4b63      	ldr	r3, [pc, #396]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0307 	and.w	r3, r3, #7
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d001      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e0b8      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d020      	beq.n	8002d7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0304 	and.w	r3, r3, #4
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d005      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d44:	4b59      	ldr	r3, [pc, #356]	@ (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	4a58      	ldr	r2, [pc, #352]	@ (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d4a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0308 	and.w	r3, r3, #8
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d005      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d5c:	4b53      	ldr	r3, [pc, #332]	@ (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	4a52      	ldr	r2, [pc, #328]	@ (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d62:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d68:	4b50      	ldr	r3, [pc, #320]	@ (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	494d      	ldr	r1, [pc, #308]	@ (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d044      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d107      	bne.n	8002d9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d8e:	4b47      	ldr	r3, [pc, #284]	@ (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d119      	bne.n	8002dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e07f      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d003      	beq.n	8002dae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002daa:	2b03      	cmp	r3, #3
 8002dac:	d107      	bne.n	8002dbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dae:	4b3f      	ldr	r3, [pc, #252]	@ (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d109      	bne.n	8002dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e06f      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dbe:	4b3b      	ldr	r3, [pc, #236]	@ (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e067      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dce:	4b37      	ldr	r3, [pc, #220]	@ (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f023 0203 	bic.w	r2, r3, #3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	4934      	ldr	r1, [pc, #208]	@ (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002de0:	f7fe fe40 	bl	8001a64 <HAL_GetTick>
 8002de4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de6:	e00a      	b.n	8002dfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002de8:	f7fe fe3c 	bl	8001a64 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e04f      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfe:	4b2b      	ldr	r3, [pc, #172]	@ (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 020c 	and.w	r2, r3, #12
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d1eb      	bne.n	8002de8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e10:	4b25      	ldr	r3, [pc, #148]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d20c      	bcs.n	8002e38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e1e:	4b22      	ldr	r3, [pc, #136]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e26:	4b20      	ldr	r3, [pc, #128]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0307 	and.w	r3, r3, #7
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d001      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e032      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d008      	beq.n	8002e56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e44:	4b19      	ldr	r3, [pc, #100]	@ (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	4916      	ldr	r1, [pc, #88]	@ (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0308 	and.w	r3, r3, #8
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d009      	beq.n	8002e76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e62:	4b12      	ldr	r3, [pc, #72]	@ (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	490e      	ldr	r1, [pc, #56]	@ (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e76:	f000 f821 	bl	8002ebc <HAL_RCC_GetSysClockFreq>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	091b      	lsrs	r3, r3, #4
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	490a      	ldr	r1, [pc, #40]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e88:	5ccb      	ldrb	r3, [r1, r3]
 8002e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e8e:	4a09      	ldr	r2, [pc, #36]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e92:	4b09      	ldr	r3, [pc, #36]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fe fda0 	bl	80019dc <HAL_InitTick>

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40023c00 	.word	0x40023c00
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	08005198 	.word	0x08005198
 8002eb4:	20000000 	.word	0x20000000
 8002eb8:	20000004 	.word	0x20000004

08002ebc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ebc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ec0:	b090      	sub	sp, #64	@ 0x40
 8002ec2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ec8:	2300      	movs	r3, #0
 8002eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ecc:	2300      	movs	r3, #0
 8002ece:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ed4:	4b59      	ldr	r3, [pc, #356]	@ (800303c <HAL_RCC_GetSysClockFreq+0x180>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f003 030c 	and.w	r3, r3, #12
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d00d      	beq.n	8002efc <HAL_RCC_GetSysClockFreq+0x40>
 8002ee0:	2b08      	cmp	r3, #8
 8002ee2:	f200 80a1 	bhi.w	8003028 <HAL_RCC_GetSysClockFreq+0x16c>
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d002      	beq.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x34>
 8002eea:	2b04      	cmp	r3, #4
 8002eec:	d003      	beq.n	8002ef6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002eee:	e09b      	b.n	8003028 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ef0:	4b53      	ldr	r3, [pc, #332]	@ (8003040 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002ef4:	e09b      	b.n	800302e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ef6:	4b53      	ldr	r3, [pc, #332]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ef8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002efa:	e098      	b.n	800302e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002efc:	4b4f      	ldr	r3, [pc, #316]	@ (800303c <HAL_RCC_GetSysClockFreq+0x180>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f04:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f06:	4b4d      	ldr	r3, [pc, #308]	@ (800303c <HAL_RCC_GetSysClockFreq+0x180>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d028      	beq.n	8002f64 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f12:	4b4a      	ldr	r3, [pc, #296]	@ (800303c <HAL_RCC_GetSysClockFreq+0x180>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	099b      	lsrs	r3, r3, #6
 8002f18:	2200      	movs	r2, #0
 8002f1a:	623b      	str	r3, [r7, #32]
 8002f1c:	627a      	str	r2, [r7, #36]	@ 0x24
 8002f1e:	6a3b      	ldr	r3, [r7, #32]
 8002f20:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002f24:	2100      	movs	r1, #0
 8002f26:	4b47      	ldr	r3, [pc, #284]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f28:	fb03 f201 	mul.w	r2, r3, r1
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	fb00 f303 	mul.w	r3, r0, r3
 8002f32:	4413      	add	r3, r2
 8002f34:	4a43      	ldr	r2, [pc, #268]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f36:	fba0 1202 	umull	r1, r2, r0, r2
 8002f3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f3c:	460a      	mov	r2, r1
 8002f3e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002f40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f42:	4413      	add	r3, r2
 8002f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f48:	2200      	movs	r2, #0
 8002f4a:	61bb      	str	r3, [r7, #24]
 8002f4c:	61fa      	str	r2, [r7, #28]
 8002f4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002f56:	f7fd fcc9 	bl	80008ec <__aeabi_uldivmod>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	4613      	mov	r3, r2
 8002f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f62:	e053      	b.n	800300c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f64:	4b35      	ldr	r3, [pc, #212]	@ (800303c <HAL_RCC_GetSysClockFreq+0x180>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	099b      	lsrs	r3, r3, #6
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	613b      	str	r3, [r7, #16]
 8002f6e:	617a      	str	r2, [r7, #20]
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002f76:	f04f 0b00 	mov.w	fp, #0
 8002f7a:	4652      	mov	r2, sl
 8002f7c:	465b      	mov	r3, fp
 8002f7e:	f04f 0000 	mov.w	r0, #0
 8002f82:	f04f 0100 	mov.w	r1, #0
 8002f86:	0159      	lsls	r1, r3, #5
 8002f88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f8c:	0150      	lsls	r0, r2, #5
 8002f8e:	4602      	mov	r2, r0
 8002f90:	460b      	mov	r3, r1
 8002f92:	ebb2 080a 	subs.w	r8, r2, sl
 8002f96:	eb63 090b 	sbc.w	r9, r3, fp
 8002f9a:	f04f 0200 	mov.w	r2, #0
 8002f9e:	f04f 0300 	mov.w	r3, #0
 8002fa2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002fa6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002faa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002fae:	ebb2 0408 	subs.w	r4, r2, r8
 8002fb2:	eb63 0509 	sbc.w	r5, r3, r9
 8002fb6:	f04f 0200 	mov.w	r2, #0
 8002fba:	f04f 0300 	mov.w	r3, #0
 8002fbe:	00eb      	lsls	r3, r5, #3
 8002fc0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fc4:	00e2      	lsls	r2, r4, #3
 8002fc6:	4614      	mov	r4, r2
 8002fc8:	461d      	mov	r5, r3
 8002fca:	eb14 030a 	adds.w	r3, r4, sl
 8002fce:	603b      	str	r3, [r7, #0]
 8002fd0:	eb45 030b 	adc.w	r3, r5, fp
 8002fd4:	607b      	str	r3, [r7, #4]
 8002fd6:	f04f 0200 	mov.w	r2, #0
 8002fda:	f04f 0300 	mov.w	r3, #0
 8002fde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fe2:	4629      	mov	r1, r5
 8002fe4:	028b      	lsls	r3, r1, #10
 8002fe6:	4621      	mov	r1, r4
 8002fe8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fec:	4621      	mov	r1, r4
 8002fee:	028a      	lsls	r2, r1, #10
 8002ff0:	4610      	mov	r0, r2
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	60bb      	str	r3, [r7, #8]
 8002ffa:	60fa      	str	r2, [r7, #12]
 8002ffc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003000:	f7fd fc74 	bl	80008ec <__aeabi_uldivmod>
 8003004:	4602      	mov	r2, r0
 8003006:	460b      	mov	r3, r1
 8003008:	4613      	mov	r3, r2
 800300a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800300c:	4b0b      	ldr	r3, [pc, #44]	@ (800303c <HAL_RCC_GetSysClockFreq+0x180>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	0c1b      	lsrs	r3, r3, #16
 8003012:	f003 0303 	and.w	r3, r3, #3
 8003016:	3301      	adds	r3, #1
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800301c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800301e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003020:	fbb2 f3f3 	udiv	r3, r2, r3
 8003024:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003026:	e002      	b.n	800302e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003028:	4b05      	ldr	r3, [pc, #20]	@ (8003040 <HAL_RCC_GetSysClockFreq+0x184>)
 800302a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800302c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800302e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003030:	4618      	mov	r0, r3
 8003032:	3740      	adds	r7, #64	@ 0x40
 8003034:	46bd      	mov	sp, r7
 8003036:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800303a:	bf00      	nop
 800303c:	40023800 	.word	0x40023800
 8003040:	00f42400 	.word	0x00f42400
 8003044:	017d7840 	.word	0x017d7840

08003048 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800304c:	4b03      	ldr	r3, [pc, #12]	@ (800305c <HAL_RCC_GetHCLKFreq+0x14>)
 800304e:	681b      	ldr	r3, [r3, #0]
}
 8003050:	4618      	mov	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	20000000 	.word	0x20000000

08003060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003064:	f7ff fff0 	bl	8003048 <HAL_RCC_GetHCLKFreq>
 8003068:	4602      	mov	r2, r0
 800306a:	4b05      	ldr	r3, [pc, #20]	@ (8003080 <HAL_RCC_GetPCLK1Freq+0x20>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	0a9b      	lsrs	r3, r3, #10
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	4903      	ldr	r1, [pc, #12]	@ (8003084 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003076:	5ccb      	ldrb	r3, [r1, r3]
 8003078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800307c:	4618      	mov	r0, r3
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40023800 	.word	0x40023800
 8003084:	080051a8 	.word	0x080051a8

08003088 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800308c:	f7ff ffdc 	bl	8003048 <HAL_RCC_GetHCLKFreq>
 8003090:	4602      	mov	r2, r0
 8003092:	4b05      	ldr	r3, [pc, #20]	@ (80030a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	0b5b      	lsrs	r3, r3, #13
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	4903      	ldr	r1, [pc, #12]	@ (80030ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800309e:	5ccb      	ldrb	r3, [r1, r3]
 80030a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	40023800 	.word	0x40023800
 80030ac:	080051a8 	.word	0x080051a8

080030b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e041      	b.n	8003146 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d106      	bne.n	80030dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7fe fac8 	bl	800166c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2202      	movs	r2, #2
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3304      	adds	r3, #4
 80030ec:	4619      	mov	r1, r3
 80030ee:	4610      	mov	r0, r2
 80030f0:	f000 fbf4 	bl	80038dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b082      	sub	sp, #8
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d101      	bne.n	8003160 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e041      	b.n	80031e4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b00      	cmp	r3, #0
 800316a:	d106      	bne.n	800317a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 f839 	bl	80031ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2202      	movs	r2, #2
 800317e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3304      	adds	r3, #4
 800318a:	4619      	mov	r1, r3
 800318c:	4610      	mov	r0, r2
 800318e:	f000 fba5 	bl	80038dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d109      	bne.n	8003224 <HAL_TIM_PWM_Start+0x24>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2b01      	cmp	r3, #1
 800321a:	bf14      	ite	ne
 800321c:	2301      	movne	r3, #1
 800321e:	2300      	moveq	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	e022      	b.n	800326a <HAL_TIM_PWM_Start+0x6a>
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	2b04      	cmp	r3, #4
 8003228:	d109      	bne.n	800323e <HAL_TIM_PWM_Start+0x3e>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b01      	cmp	r3, #1
 8003234:	bf14      	ite	ne
 8003236:	2301      	movne	r3, #1
 8003238:	2300      	moveq	r3, #0
 800323a:	b2db      	uxtb	r3, r3
 800323c:	e015      	b.n	800326a <HAL_TIM_PWM_Start+0x6a>
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	2b08      	cmp	r3, #8
 8003242:	d109      	bne.n	8003258 <HAL_TIM_PWM_Start+0x58>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b01      	cmp	r3, #1
 800324e:	bf14      	ite	ne
 8003250:	2301      	movne	r3, #1
 8003252:	2300      	moveq	r3, #0
 8003254:	b2db      	uxtb	r3, r3
 8003256:	e008      	b.n	800326a <HAL_TIM_PWM_Start+0x6a>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b01      	cmp	r3, #1
 8003262:	bf14      	ite	ne
 8003264:	2301      	movne	r3, #1
 8003266:	2300      	moveq	r3, #0
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e068      	b.n	8003344 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d104      	bne.n	8003282 <HAL_TIM_PWM_Start+0x82>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2202      	movs	r2, #2
 800327c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003280:	e013      	b.n	80032aa <HAL_TIM_PWM_Start+0xaa>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b04      	cmp	r3, #4
 8003286:	d104      	bne.n	8003292 <HAL_TIM_PWM_Start+0x92>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2202      	movs	r2, #2
 800328c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003290:	e00b      	b.n	80032aa <HAL_TIM_PWM_Start+0xaa>
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	2b08      	cmp	r3, #8
 8003296:	d104      	bne.n	80032a2 <HAL_TIM_PWM_Start+0xa2>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2202      	movs	r2, #2
 800329c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032a0:	e003      	b.n	80032aa <HAL_TIM_PWM_Start+0xaa>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2202      	movs	r2, #2
 80032a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2201      	movs	r2, #1
 80032b0:	6839      	ldr	r1, [r7, #0]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 fdc4 	bl	8003e40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a23      	ldr	r2, [pc, #140]	@ (800334c <HAL_TIM_PWM_Start+0x14c>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d107      	bne.n	80032d2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032d0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a1d      	ldr	r2, [pc, #116]	@ (800334c <HAL_TIM_PWM_Start+0x14c>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d018      	beq.n	800330e <HAL_TIM_PWM_Start+0x10e>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032e4:	d013      	beq.n	800330e <HAL_TIM_PWM_Start+0x10e>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a19      	ldr	r2, [pc, #100]	@ (8003350 <HAL_TIM_PWM_Start+0x150>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d00e      	beq.n	800330e <HAL_TIM_PWM_Start+0x10e>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a17      	ldr	r2, [pc, #92]	@ (8003354 <HAL_TIM_PWM_Start+0x154>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d009      	beq.n	800330e <HAL_TIM_PWM_Start+0x10e>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a16      	ldr	r2, [pc, #88]	@ (8003358 <HAL_TIM_PWM_Start+0x158>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d004      	beq.n	800330e <HAL_TIM_PWM_Start+0x10e>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a14      	ldr	r2, [pc, #80]	@ (800335c <HAL_TIM_PWM_Start+0x15c>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d111      	bne.n	8003332 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f003 0307 	and.w	r3, r3, #7
 8003318:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2b06      	cmp	r3, #6
 800331e:	d010      	beq.n	8003342 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f042 0201 	orr.w	r2, r2, #1
 800332e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003330:	e007      	b.n	8003342 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f042 0201 	orr.w	r2, r2, #1
 8003340:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40010000 	.word	0x40010000
 8003350:	40000400 	.word	0x40000400
 8003354:	40000800 	.word	0x40000800
 8003358:	40000c00 	.word	0x40000c00
 800335c:	40014000 	.word	0x40014000

08003360 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e097      	b.n	80034a4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	d106      	bne.n	800338e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f7fe f991 	bl	80016b0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2202      	movs	r2, #2
 8003392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6812      	ldr	r2, [r2, #0]
 80033a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80033a4:	f023 0307 	bic.w	r3, r3, #7
 80033a8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	3304      	adds	r3, #4
 80033b2:	4619      	mov	r1, r3
 80033b4:	4610      	mov	r0, r2
 80033b6:	f000 fa91 	bl	80038dc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	4313      	orrs	r3, r2
 80033da:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033e2:	f023 0303 	bic.w	r3, r3, #3
 80033e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	021b      	lsls	r3, r3, #8
 80033f2:	4313      	orrs	r3, r2
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003400:	f023 030c 	bic.w	r3, r3, #12
 8003404:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800340c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003410:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	021b      	lsls	r3, r3, #8
 800341c:	4313      	orrs	r3, r2
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	4313      	orrs	r3, r2
 8003422:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	011a      	lsls	r2, r3, #4
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	031b      	lsls	r3, r3, #12
 8003430:	4313      	orrs	r3, r2
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	4313      	orrs	r3, r2
 8003436:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800343e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003446:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	011b      	lsls	r3, r3, #4
 8003452:	4313      	orrs	r3, r2
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	4313      	orrs	r3, r2
 8003458:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3718      	adds	r7, #24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034bc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80034c4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80034cc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80034d4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d110      	bne.n	80034fe <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80034dc:	7bfb      	ldrb	r3, [r7, #15]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d102      	bne.n	80034e8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80034e2:	7b7b      	ldrb	r3, [r7, #13]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d001      	beq.n	80034ec <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e069      	b.n	80035c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2202      	movs	r2, #2
 80034f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2202      	movs	r2, #2
 80034f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034fc:	e031      	b.n	8003562 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	2b04      	cmp	r3, #4
 8003502:	d110      	bne.n	8003526 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003504:	7bbb      	ldrb	r3, [r7, #14]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d102      	bne.n	8003510 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800350a:	7b3b      	ldrb	r3, [r7, #12]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d001      	beq.n	8003514 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e055      	b.n	80035c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2202      	movs	r2, #2
 8003518:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2202      	movs	r2, #2
 8003520:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003524:	e01d      	b.n	8003562 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003526:	7bfb      	ldrb	r3, [r7, #15]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d108      	bne.n	800353e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800352c:	7bbb      	ldrb	r3, [r7, #14]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d105      	bne.n	800353e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003532:	7b7b      	ldrb	r3, [r7, #13]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d102      	bne.n	800353e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003538:	7b3b      	ldrb	r3, [r7, #12]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d001      	beq.n	8003542 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e03e      	b.n	80035c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2202      	movs	r2, #2
 8003546:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2202      	movs	r2, #2
 800354e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2202      	movs	r2, #2
 8003556:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2202      	movs	r2, #2
 800355e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d003      	beq.n	8003570 <HAL_TIM_Encoder_Start+0xc4>
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	2b04      	cmp	r3, #4
 800356c:	d008      	beq.n	8003580 <HAL_TIM_Encoder_Start+0xd4>
 800356e:	e00f      	b.n	8003590 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2201      	movs	r2, #1
 8003576:	2100      	movs	r1, #0
 8003578:	4618      	mov	r0, r3
 800357a:	f000 fc61 	bl	8003e40 <TIM_CCxChannelCmd>
      break;
 800357e:	e016      	b.n	80035ae <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2201      	movs	r2, #1
 8003586:	2104      	movs	r1, #4
 8003588:	4618      	mov	r0, r3
 800358a:	f000 fc59 	bl	8003e40 <TIM_CCxChannelCmd>
      break;
 800358e:	e00e      	b.n	80035ae <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2201      	movs	r2, #1
 8003596:	2100      	movs	r1, #0
 8003598:	4618      	mov	r0, r3
 800359a:	f000 fc51 	bl	8003e40 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2201      	movs	r2, #1
 80035a4:	2104      	movs	r1, #4
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 fc4a 	bl	8003e40 <TIM_CCxChannelCmd>
      break;
 80035ac:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f042 0201 	orr.w	r2, r2, #1
 80035bc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035d4:	2300      	movs	r3, #0
 80035d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d101      	bne.n	80035e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80035e2:	2302      	movs	r3, #2
 80035e4:	e0ae      	b.n	8003744 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2b0c      	cmp	r3, #12
 80035f2:	f200 809f 	bhi.w	8003734 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80035f6:	a201      	add	r2, pc, #4	@ (adr r2, 80035fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80035f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fc:	08003631 	.word	0x08003631
 8003600:	08003735 	.word	0x08003735
 8003604:	08003735 	.word	0x08003735
 8003608:	08003735 	.word	0x08003735
 800360c:	08003671 	.word	0x08003671
 8003610:	08003735 	.word	0x08003735
 8003614:	08003735 	.word	0x08003735
 8003618:	08003735 	.word	0x08003735
 800361c:	080036b3 	.word	0x080036b3
 8003620:	08003735 	.word	0x08003735
 8003624:	08003735 	.word	0x08003735
 8003628:	08003735 	.word	0x08003735
 800362c:	080036f3 	.word	0x080036f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68b9      	ldr	r1, [r7, #8]
 8003636:	4618      	mov	r0, r3
 8003638:	f000 f9dc 	bl	80039f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699a      	ldr	r2, [r3, #24]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f042 0208 	orr.w	r2, r2, #8
 800364a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	699a      	ldr	r2, [r3, #24]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 0204 	bic.w	r2, r2, #4
 800365a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6999      	ldr	r1, [r3, #24]
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	691a      	ldr	r2, [r3, #16]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	430a      	orrs	r2, r1
 800366c:	619a      	str	r2, [r3, #24]
      break;
 800366e:	e064      	b.n	800373a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68b9      	ldr	r1, [r7, #8]
 8003676:	4618      	mov	r0, r3
 8003678:	f000 fa22 	bl	8003ac0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	699a      	ldr	r2, [r3, #24]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800368a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	699a      	ldr	r2, [r3, #24]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800369a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6999      	ldr	r1, [r3, #24]
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	021a      	lsls	r2, r3, #8
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	619a      	str	r2, [r3, #24]
      break;
 80036b0:	e043      	b.n	800373a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68b9      	ldr	r1, [r7, #8]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f000 fa6d 	bl	8003b98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	69da      	ldr	r2, [r3, #28]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f042 0208 	orr.w	r2, r2, #8
 80036cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	69da      	ldr	r2, [r3, #28]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 0204 	bic.w	r2, r2, #4
 80036dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	69d9      	ldr	r1, [r3, #28]
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	691a      	ldr	r2, [r3, #16]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	61da      	str	r2, [r3, #28]
      break;
 80036f0:	e023      	b.n	800373a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68b9      	ldr	r1, [r7, #8]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f000 fab7 	bl	8003c6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	69da      	ldr	r2, [r3, #28]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800370c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	69da      	ldr	r2, [r3, #28]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800371c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	69d9      	ldr	r1, [r3, #28]
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	021a      	lsls	r2, r3, #8
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	61da      	str	r2, [r3, #28]
      break;
 8003732:	e002      	b.n	800373a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	75fb      	strb	r3, [r7, #23]
      break;
 8003738:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003742:	7dfb      	ldrb	r3, [r7, #23]
}
 8003744:	4618      	mov	r0, r3
 8003746:	3718      	adds	r7, #24
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003756:	2300      	movs	r3, #0
 8003758:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003760:	2b01      	cmp	r3, #1
 8003762:	d101      	bne.n	8003768 <HAL_TIM_ConfigClockSource+0x1c>
 8003764:	2302      	movs	r3, #2
 8003766:	e0b4      	b.n	80038d2 <HAL_TIM_ConfigClockSource+0x186>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2202      	movs	r2, #2
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003786:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800378e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68ba      	ldr	r2, [r7, #8]
 8003796:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037a0:	d03e      	beq.n	8003820 <HAL_TIM_ConfigClockSource+0xd4>
 80037a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037a6:	f200 8087 	bhi.w	80038b8 <HAL_TIM_ConfigClockSource+0x16c>
 80037aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037ae:	f000 8086 	beq.w	80038be <HAL_TIM_ConfigClockSource+0x172>
 80037b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037b6:	d87f      	bhi.n	80038b8 <HAL_TIM_ConfigClockSource+0x16c>
 80037b8:	2b70      	cmp	r3, #112	@ 0x70
 80037ba:	d01a      	beq.n	80037f2 <HAL_TIM_ConfigClockSource+0xa6>
 80037bc:	2b70      	cmp	r3, #112	@ 0x70
 80037be:	d87b      	bhi.n	80038b8 <HAL_TIM_ConfigClockSource+0x16c>
 80037c0:	2b60      	cmp	r3, #96	@ 0x60
 80037c2:	d050      	beq.n	8003866 <HAL_TIM_ConfigClockSource+0x11a>
 80037c4:	2b60      	cmp	r3, #96	@ 0x60
 80037c6:	d877      	bhi.n	80038b8 <HAL_TIM_ConfigClockSource+0x16c>
 80037c8:	2b50      	cmp	r3, #80	@ 0x50
 80037ca:	d03c      	beq.n	8003846 <HAL_TIM_ConfigClockSource+0xfa>
 80037cc:	2b50      	cmp	r3, #80	@ 0x50
 80037ce:	d873      	bhi.n	80038b8 <HAL_TIM_ConfigClockSource+0x16c>
 80037d0:	2b40      	cmp	r3, #64	@ 0x40
 80037d2:	d058      	beq.n	8003886 <HAL_TIM_ConfigClockSource+0x13a>
 80037d4:	2b40      	cmp	r3, #64	@ 0x40
 80037d6:	d86f      	bhi.n	80038b8 <HAL_TIM_ConfigClockSource+0x16c>
 80037d8:	2b30      	cmp	r3, #48	@ 0x30
 80037da:	d064      	beq.n	80038a6 <HAL_TIM_ConfigClockSource+0x15a>
 80037dc:	2b30      	cmp	r3, #48	@ 0x30
 80037de:	d86b      	bhi.n	80038b8 <HAL_TIM_ConfigClockSource+0x16c>
 80037e0:	2b20      	cmp	r3, #32
 80037e2:	d060      	beq.n	80038a6 <HAL_TIM_ConfigClockSource+0x15a>
 80037e4:	2b20      	cmp	r3, #32
 80037e6:	d867      	bhi.n	80038b8 <HAL_TIM_ConfigClockSource+0x16c>
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d05c      	beq.n	80038a6 <HAL_TIM_ConfigClockSource+0x15a>
 80037ec:	2b10      	cmp	r3, #16
 80037ee:	d05a      	beq.n	80038a6 <HAL_TIM_ConfigClockSource+0x15a>
 80037f0:	e062      	b.n	80038b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003802:	f000 fafd 	bl	8003e00 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003814:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	609a      	str	r2, [r3, #8]
      break;
 800381e:	e04f      	b.n	80038c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003830:	f000 fae6 	bl	8003e00 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689a      	ldr	r2, [r3, #8]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003842:	609a      	str	r2, [r3, #8]
      break;
 8003844:	e03c      	b.n	80038c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003852:	461a      	mov	r2, r3
 8003854:	f000 fa5a 	bl	8003d0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2150      	movs	r1, #80	@ 0x50
 800385e:	4618      	mov	r0, r3
 8003860:	f000 fab3 	bl	8003dca <TIM_ITRx_SetConfig>
      break;
 8003864:	e02c      	b.n	80038c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003872:	461a      	mov	r2, r3
 8003874:	f000 fa79 	bl	8003d6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2160      	movs	r1, #96	@ 0x60
 800387e:	4618      	mov	r0, r3
 8003880:	f000 faa3 	bl	8003dca <TIM_ITRx_SetConfig>
      break;
 8003884:	e01c      	b.n	80038c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003892:	461a      	mov	r2, r3
 8003894:	f000 fa3a 	bl	8003d0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2140      	movs	r1, #64	@ 0x40
 800389e:	4618      	mov	r0, r3
 80038a0:	f000 fa93 	bl	8003dca <TIM_ITRx_SetConfig>
      break;
 80038a4:	e00c      	b.n	80038c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4619      	mov	r1, r3
 80038b0:	4610      	mov	r0, r2
 80038b2:	f000 fa8a 	bl	8003dca <TIM_ITRx_SetConfig>
      break;
 80038b6:	e003      	b.n	80038c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	73fb      	strb	r3, [r7, #15]
      break;
 80038bc:	e000      	b.n	80038c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80038be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80038d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
	...

080038dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a3a      	ldr	r2, [pc, #232]	@ (80039d8 <TIM_Base_SetConfig+0xfc>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d00f      	beq.n	8003914 <TIM_Base_SetConfig+0x38>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038fa:	d00b      	beq.n	8003914 <TIM_Base_SetConfig+0x38>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a37      	ldr	r2, [pc, #220]	@ (80039dc <TIM_Base_SetConfig+0x100>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d007      	beq.n	8003914 <TIM_Base_SetConfig+0x38>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a36      	ldr	r2, [pc, #216]	@ (80039e0 <TIM_Base_SetConfig+0x104>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d003      	beq.n	8003914 <TIM_Base_SetConfig+0x38>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a35      	ldr	r2, [pc, #212]	@ (80039e4 <TIM_Base_SetConfig+0x108>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d108      	bne.n	8003926 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800391a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	4313      	orrs	r3, r2
 8003924:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a2b      	ldr	r2, [pc, #172]	@ (80039d8 <TIM_Base_SetConfig+0xfc>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d01b      	beq.n	8003966 <TIM_Base_SetConfig+0x8a>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003934:	d017      	beq.n	8003966 <TIM_Base_SetConfig+0x8a>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a28      	ldr	r2, [pc, #160]	@ (80039dc <TIM_Base_SetConfig+0x100>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d013      	beq.n	8003966 <TIM_Base_SetConfig+0x8a>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a27      	ldr	r2, [pc, #156]	@ (80039e0 <TIM_Base_SetConfig+0x104>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d00f      	beq.n	8003966 <TIM_Base_SetConfig+0x8a>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a26      	ldr	r2, [pc, #152]	@ (80039e4 <TIM_Base_SetConfig+0x108>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d00b      	beq.n	8003966 <TIM_Base_SetConfig+0x8a>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a25      	ldr	r2, [pc, #148]	@ (80039e8 <TIM_Base_SetConfig+0x10c>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d007      	beq.n	8003966 <TIM_Base_SetConfig+0x8a>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a24      	ldr	r2, [pc, #144]	@ (80039ec <TIM_Base_SetConfig+0x110>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d003      	beq.n	8003966 <TIM_Base_SetConfig+0x8a>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a23      	ldr	r2, [pc, #140]	@ (80039f0 <TIM_Base_SetConfig+0x114>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d108      	bne.n	8003978 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800396c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	4313      	orrs	r3, r2
 8003976:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	4313      	orrs	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a0e      	ldr	r2, [pc, #56]	@ (80039d8 <TIM_Base_SetConfig+0xfc>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d103      	bne.n	80039ac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	691a      	ldr	r2, [r3, #16]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d105      	bne.n	80039ca <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	f023 0201 	bic.w	r2, r3, #1
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	611a      	str	r2, [r3, #16]
  }
}
 80039ca:	bf00      	nop
 80039cc:	3714      	adds	r7, #20
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	40010000 	.word	0x40010000
 80039dc:	40000400 	.word	0x40000400
 80039e0:	40000800 	.word	0x40000800
 80039e4:	40000c00 	.word	0x40000c00
 80039e8:	40014000 	.word	0x40014000
 80039ec:	40014400 	.word	0x40014400
 80039f0:	40014800 	.word	0x40014800

080039f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b087      	sub	sp, #28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	f023 0201 	bic.w	r2, r3, #1
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f023 0303 	bic.w	r3, r3, #3
 8003a2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f023 0302 	bic.w	r3, r3, #2
 8003a3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a1c      	ldr	r2, [pc, #112]	@ (8003abc <TIM_OC1_SetConfig+0xc8>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d10c      	bne.n	8003a6a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f023 0308 	bic.w	r3, r3, #8
 8003a56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f023 0304 	bic.w	r3, r3, #4
 8003a68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a13      	ldr	r2, [pc, #76]	@ (8003abc <TIM_OC1_SetConfig+0xc8>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d111      	bne.n	8003a96 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	621a      	str	r2, [r3, #32]
}
 8003ab0:	bf00      	nop
 8003ab2:	371c      	adds	r7, #28
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr
 8003abc:	40010000 	.word	0x40010000

08003ac0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b087      	sub	sp, #28
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	f023 0210 	bic.w	r2, r3, #16
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003af6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	021b      	lsls	r3, r3, #8
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	f023 0320 	bic.w	r3, r3, #32
 8003b0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a1e      	ldr	r2, [pc, #120]	@ (8003b94 <TIM_OC2_SetConfig+0xd4>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d10d      	bne.n	8003b3c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a15      	ldr	r2, [pc, #84]	@ (8003b94 <TIM_OC2_SetConfig+0xd4>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d113      	bne.n	8003b6c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	621a      	str	r2, [r3, #32]
}
 8003b86:	bf00      	nop
 8003b88:	371c      	adds	r7, #28
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	40010000 	.word	0x40010000

08003b98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b087      	sub	sp, #28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f023 0303 	bic.w	r3, r3, #3
 8003bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003be0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	021b      	lsls	r3, r3, #8
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a1d      	ldr	r2, [pc, #116]	@ (8003c68 <TIM_OC3_SetConfig+0xd0>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d10d      	bne.n	8003c12 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003bfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	021b      	lsls	r3, r3, #8
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a14      	ldr	r2, [pc, #80]	@ (8003c68 <TIM_OC3_SetConfig+0xd0>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d113      	bne.n	8003c42 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	011b      	lsls	r3, r3, #4
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	011b      	lsls	r3, r3, #4
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	621a      	str	r2, [r3, #32]
}
 8003c5c:	bf00      	nop
 8003c5e:	371c      	adds	r7, #28
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr
 8003c68:	40010000 	.word	0x40010000

08003c6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b087      	sub	sp, #28
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	021b      	lsls	r3, r3, #8
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003cb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	031b      	lsls	r3, r3, #12
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a10      	ldr	r2, [pc, #64]	@ (8003d08 <TIM_OC4_SetConfig+0x9c>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d109      	bne.n	8003ce0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003cd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	019b      	lsls	r3, r3, #6
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	621a      	str	r2, [r3, #32]
}
 8003cfa:	bf00      	nop
 8003cfc:	371c      	adds	r7, #28
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	40010000 	.word	0x40010000

08003d0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b087      	sub	sp, #28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	f023 0201 	bic.w	r2, r3, #1
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	011b      	lsls	r3, r3, #4
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f023 030a 	bic.w	r3, r3, #10
 8003d48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	621a      	str	r2, [r3, #32]
}
 8003d5e:	bf00      	nop
 8003d60:	371c      	adds	r7, #28
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b087      	sub	sp, #28
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	60f8      	str	r0, [r7, #12]
 8003d72:	60b9      	str	r1, [r7, #8]
 8003d74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	f023 0210 	bic.w	r2, r3, #16
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	031b      	lsls	r3, r3, #12
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003da6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	011b      	lsls	r3, r3, #4
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	621a      	str	r2, [r3, #32]
}
 8003dbe:	bf00      	nop
 8003dc0:	371c      	adds	r7, #28
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b085      	sub	sp, #20
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
 8003dd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003de0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	f043 0307 	orr.w	r3, r3, #7
 8003dec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	609a      	str	r2, [r3, #8]
}
 8003df4:	bf00      	nop
 8003df6:	3714      	adds	r7, #20
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b087      	sub	sp, #28
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
 8003e0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	021a      	lsls	r2, r3, #8
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	431a      	orrs	r2, r3
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	609a      	str	r2, [r3, #8]
}
 8003e34:	bf00      	nop
 8003e36:	371c      	adds	r7, #28
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b087      	sub	sp, #28
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	f003 031f 	and.w	r3, r3, #31
 8003e52:	2201      	movs	r2, #1
 8003e54:	fa02 f303 	lsl.w	r3, r2, r3
 8003e58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6a1a      	ldr	r2, [r3, #32]
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	43db      	mvns	r3, r3
 8003e62:	401a      	ands	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6a1a      	ldr	r2, [r3, #32]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	f003 031f 	and.w	r3, r3, #31
 8003e72:	6879      	ldr	r1, [r7, #4]
 8003e74:	fa01 f303 	lsl.w	r3, r1, r3
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	621a      	str	r2, [r3, #32]
}
 8003e7e:	bf00      	nop
 8003e80:	371c      	adds	r7, #28
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
	...

08003e8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d101      	bne.n	8003ea4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	e050      	b.n	8003f46 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2202      	movs	r2, #2
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a1c      	ldr	r2, [pc, #112]	@ (8003f54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d018      	beq.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ef0:	d013      	beq.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a18      	ldr	r2, [pc, #96]	@ (8003f58 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d00e      	beq.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a16      	ldr	r2, [pc, #88]	@ (8003f5c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d009      	beq.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a15      	ldr	r2, [pc, #84]	@ (8003f60 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d004      	beq.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a13      	ldr	r2, [pc, #76]	@ (8003f64 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d10c      	bne.n	8003f34 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	68ba      	ldr	r2, [r7, #8]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	40010000 	.word	0x40010000
 8003f58:	40000400 	.word	0x40000400
 8003f5c:	40000800 	.word	0x40000800
 8003f60:	40000c00 	.word	0x40000c00
 8003f64:	40014000 	.word	0x40014000

08003f68 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d101      	bne.n	8003f84 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003f80:	2302      	movs	r3, #2
 8003f82:	e03d      	b.n	8004000 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e042      	b.n	80040a4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d106      	bne.n	8004038 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f7fd fbbe 	bl	80017b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2224      	movs	r2, #36	@ 0x24
 800403c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68da      	ldr	r2, [r3, #12]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800404e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f973 	bl	800433c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	691a      	ldr	r2, [r3, #16]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004064:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	695a      	ldr	r2, [r3, #20]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004074:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68da      	ldr	r2, [r3, #12]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004084:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2220      	movs	r2, #32
 8004090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2220      	movs	r2, #32
 8004098:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b08a      	sub	sp, #40	@ 0x28
 80040b0:	af02      	add	r7, sp, #8
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	603b      	str	r3, [r7, #0]
 80040b8:	4613      	mov	r3, r2
 80040ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	2b20      	cmp	r3, #32
 80040ca:	d175      	bne.n	80041b8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d002      	beq.n	80040d8 <HAL_UART_Transmit+0x2c>
 80040d2:	88fb      	ldrh	r3, [r7, #6]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d101      	bne.n	80040dc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e06e      	b.n	80041ba <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2221      	movs	r2, #33	@ 0x21
 80040e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040ea:	f7fd fcbb 	bl	8001a64 <HAL_GetTick>
 80040ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	88fa      	ldrh	r2, [r7, #6]
 80040f4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	88fa      	ldrh	r2, [r7, #6]
 80040fa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004104:	d108      	bne.n	8004118 <HAL_UART_Transmit+0x6c>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d104      	bne.n	8004118 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800410e:	2300      	movs	r3, #0
 8004110:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	61bb      	str	r3, [r7, #24]
 8004116:	e003      	b.n	8004120 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800411c:	2300      	movs	r3, #0
 800411e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004120:	e02e      	b.n	8004180 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	2200      	movs	r2, #0
 800412a:	2180      	movs	r1, #128	@ 0x80
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f000 f848 	bl	80041c2 <UART_WaitOnFlagUntilTimeout>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d005      	beq.n	8004144 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2220      	movs	r2, #32
 800413c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e03a      	b.n	80041ba <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10b      	bne.n	8004162 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	881b      	ldrh	r3, [r3, #0]
 800414e:	461a      	mov	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004158:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	3302      	adds	r3, #2
 800415e:	61bb      	str	r3, [r7, #24]
 8004160:	e007      	b.n	8004172 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	781a      	ldrb	r2, [r3, #0]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	3301      	adds	r3, #1
 8004170:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004176:	b29b      	uxth	r3, r3
 8004178:	3b01      	subs	r3, #1
 800417a:	b29a      	uxth	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004184:	b29b      	uxth	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1cb      	bne.n	8004122 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	2200      	movs	r2, #0
 8004192:	2140      	movs	r1, #64	@ 0x40
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f000 f814 	bl	80041c2 <UART_WaitOnFlagUntilTimeout>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d005      	beq.n	80041ac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e006      	b.n	80041ba <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2220      	movs	r2, #32
 80041b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	e000      	b.n	80041ba <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80041b8:	2302      	movs	r3, #2
  }
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3720      	adds	r7, #32
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b086      	sub	sp, #24
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	60f8      	str	r0, [r7, #12]
 80041ca:	60b9      	str	r1, [r7, #8]
 80041cc:	603b      	str	r3, [r7, #0]
 80041ce:	4613      	mov	r3, r2
 80041d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041d2:	e03b      	b.n	800424c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041d4:	6a3b      	ldr	r3, [r7, #32]
 80041d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041da:	d037      	beq.n	800424c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041dc:	f7fd fc42 	bl	8001a64 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	6a3a      	ldr	r2, [r7, #32]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d302      	bcc.n	80041f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80041ec:	6a3b      	ldr	r3, [r7, #32]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e03a      	b.n	800426c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f003 0304 	and.w	r3, r3, #4
 8004200:	2b00      	cmp	r3, #0
 8004202:	d023      	beq.n	800424c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	2b80      	cmp	r3, #128	@ 0x80
 8004208:	d020      	beq.n	800424c <UART_WaitOnFlagUntilTimeout+0x8a>
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	2b40      	cmp	r3, #64	@ 0x40
 800420e:	d01d      	beq.n	800424c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0308 	and.w	r3, r3, #8
 800421a:	2b08      	cmp	r3, #8
 800421c:	d116      	bne.n	800424c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800421e:	2300      	movs	r3, #0
 8004220:	617b      	str	r3, [r7, #20]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	617b      	str	r3, [r7, #20]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	617b      	str	r3, [r7, #20]
 8004232:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 f81d 	bl	8004274 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2208      	movs	r2, #8
 800423e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e00f      	b.n	800426c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	4013      	ands	r3, r2
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	429a      	cmp	r2, r3
 800425a:	bf0c      	ite	eq
 800425c:	2301      	moveq	r3, #1
 800425e:	2300      	movne	r3, #0
 8004260:	b2db      	uxtb	r3, r3
 8004262:	461a      	mov	r2, r3
 8004264:	79fb      	ldrb	r3, [r7, #7]
 8004266:	429a      	cmp	r2, r3
 8004268:	d0b4      	beq.n	80041d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3718      	adds	r7, #24
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004274:	b480      	push	{r7}
 8004276:	b095      	sub	sp, #84	@ 0x54
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	330c      	adds	r3, #12
 8004282:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004286:	e853 3f00 	ldrex	r3, [r3]
 800428a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800428c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800428e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004292:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	330c      	adds	r3, #12
 800429a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800429c:	643a      	str	r2, [r7, #64]	@ 0x40
 800429e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042a4:	e841 2300 	strex	r3, r2, [r1]
 80042a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1e5      	bne.n	800427c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	3314      	adds	r3, #20
 80042b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	e853 3f00 	ldrex	r3, [r3]
 80042be:	61fb      	str	r3, [r7, #28]
   return(result);
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	f023 0301 	bic.w	r3, r3, #1
 80042c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	3314      	adds	r3, #20
 80042ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042d8:	e841 2300 	strex	r3, r2, [r1]
 80042dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1e5      	bne.n	80042b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d119      	bne.n	8004320 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	330c      	adds	r3, #12
 80042f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	e853 3f00 	ldrex	r3, [r3]
 80042fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	f023 0310 	bic.w	r3, r3, #16
 8004302:	647b      	str	r3, [r7, #68]	@ 0x44
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	330c      	adds	r3, #12
 800430a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800430c:	61ba      	str	r2, [r7, #24]
 800430e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004310:	6979      	ldr	r1, [r7, #20]
 8004312:	69ba      	ldr	r2, [r7, #24]
 8004314:	e841 2300 	strex	r3, r2, [r1]
 8004318:	613b      	str	r3, [r7, #16]
   return(result);
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1e5      	bne.n	80042ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2220      	movs	r2, #32
 8004324:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800432e:	bf00      	nop
 8004330:	3754      	adds	r7, #84	@ 0x54
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
	...

0800433c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800433c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004340:	b0c0      	sub	sp, #256	@ 0x100
 8004342:	af00      	add	r7, sp, #0
 8004344:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004358:	68d9      	ldr	r1, [r3, #12]
 800435a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	ea40 0301 	orr.w	r3, r0, r1
 8004364:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800436a:	689a      	ldr	r2, [r3, #8]
 800436c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	431a      	orrs	r2, r3
 8004374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	431a      	orrs	r2, r3
 800437c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	4313      	orrs	r3, r2
 8004384:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004394:	f021 010c 	bic.w	r1, r1, #12
 8004398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80043a2:	430b      	orrs	r3, r1
 80043a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80043b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043b6:	6999      	ldr	r1, [r3, #24]
 80043b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	ea40 0301 	orr.w	r3, r0, r1
 80043c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	4b8f      	ldr	r3, [pc, #572]	@ (8004608 <UART_SetConfig+0x2cc>)
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d005      	beq.n	80043dc <UART_SetConfig+0xa0>
 80043d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	4b8d      	ldr	r3, [pc, #564]	@ (800460c <UART_SetConfig+0x2d0>)
 80043d8:	429a      	cmp	r2, r3
 80043da:	d104      	bne.n	80043e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80043dc:	f7fe fe54 	bl	8003088 <HAL_RCC_GetPCLK2Freq>
 80043e0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80043e4:	e003      	b.n	80043ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043e6:	f7fe fe3b 	bl	8003060 <HAL_RCC_GetPCLK1Freq>
 80043ea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043f8:	f040 810c 	bne.w	8004614 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004400:	2200      	movs	r2, #0
 8004402:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004406:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800440a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800440e:	4622      	mov	r2, r4
 8004410:	462b      	mov	r3, r5
 8004412:	1891      	adds	r1, r2, r2
 8004414:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004416:	415b      	adcs	r3, r3
 8004418:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800441a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800441e:	4621      	mov	r1, r4
 8004420:	eb12 0801 	adds.w	r8, r2, r1
 8004424:	4629      	mov	r1, r5
 8004426:	eb43 0901 	adc.w	r9, r3, r1
 800442a:	f04f 0200 	mov.w	r2, #0
 800442e:	f04f 0300 	mov.w	r3, #0
 8004432:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004436:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800443a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800443e:	4690      	mov	r8, r2
 8004440:	4699      	mov	r9, r3
 8004442:	4623      	mov	r3, r4
 8004444:	eb18 0303 	adds.w	r3, r8, r3
 8004448:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800444c:	462b      	mov	r3, r5
 800444e:	eb49 0303 	adc.w	r3, r9, r3
 8004452:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004462:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004466:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800446a:	460b      	mov	r3, r1
 800446c:	18db      	adds	r3, r3, r3
 800446e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004470:	4613      	mov	r3, r2
 8004472:	eb42 0303 	adc.w	r3, r2, r3
 8004476:	657b      	str	r3, [r7, #84]	@ 0x54
 8004478:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800447c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004480:	f7fc fa34 	bl	80008ec <__aeabi_uldivmod>
 8004484:	4602      	mov	r2, r0
 8004486:	460b      	mov	r3, r1
 8004488:	4b61      	ldr	r3, [pc, #388]	@ (8004610 <UART_SetConfig+0x2d4>)
 800448a:	fba3 2302 	umull	r2, r3, r3, r2
 800448e:	095b      	lsrs	r3, r3, #5
 8004490:	011c      	lsls	r4, r3, #4
 8004492:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004496:	2200      	movs	r2, #0
 8004498:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800449c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80044a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80044a4:	4642      	mov	r2, r8
 80044a6:	464b      	mov	r3, r9
 80044a8:	1891      	adds	r1, r2, r2
 80044aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80044ac:	415b      	adcs	r3, r3
 80044ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80044b4:	4641      	mov	r1, r8
 80044b6:	eb12 0a01 	adds.w	sl, r2, r1
 80044ba:	4649      	mov	r1, r9
 80044bc:	eb43 0b01 	adc.w	fp, r3, r1
 80044c0:	f04f 0200 	mov.w	r2, #0
 80044c4:	f04f 0300 	mov.w	r3, #0
 80044c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80044cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80044d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044d4:	4692      	mov	sl, r2
 80044d6:	469b      	mov	fp, r3
 80044d8:	4643      	mov	r3, r8
 80044da:	eb1a 0303 	adds.w	r3, sl, r3
 80044de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80044e2:	464b      	mov	r3, r9
 80044e4:	eb4b 0303 	adc.w	r3, fp, r3
 80044e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80044ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80044f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80044fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004500:	460b      	mov	r3, r1
 8004502:	18db      	adds	r3, r3, r3
 8004504:	643b      	str	r3, [r7, #64]	@ 0x40
 8004506:	4613      	mov	r3, r2
 8004508:	eb42 0303 	adc.w	r3, r2, r3
 800450c:	647b      	str	r3, [r7, #68]	@ 0x44
 800450e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004512:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004516:	f7fc f9e9 	bl	80008ec <__aeabi_uldivmod>
 800451a:	4602      	mov	r2, r0
 800451c:	460b      	mov	r3, r1
 800451e:	4611      	mov	r1, r2
 8004520:	4b3b      	ldr	r3, [pc, #236]	@ (8004610 <UART_SetConfig+0x2d4>)
 8004522:	fba3 2301 	umull	r2, r3, r3, r1
 8004526:	095b      	lsrs	r3, r3, #5
 8004528:	2264      	movs	r2, #100	@ 0x64
 800452a:	fb02 f303 	mul.w	r3, r2, r3
 800452e:	1acb      	subs	r3, r1, r3
 8004530:	00db      	lsls	r3, r3, #3
 8004532:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004536:	4b36      	ldr	r3, [pc, #216]	@ (8004610 <UART_SetConfig+0x2d4>)
 8004538:	fba3 2302 	umull	r2, r3, r3, r2
 800453c:	095b      	lsrs	r3, r3, #5
 800453e:	005b      	lsls	r3, r3, #1
 8004540:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004544:	441c      	add	r4, r3
 8004546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800454a:	2200      	movs	r2, #0
 800454c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004550:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004554:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004558:	4642      	mov	r2, r8
 800455a:	464b      	mov	r3, r9
 800455c:	1891      	adds	r1, r2, r2
 800455e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004560:	415b      	adcs	r3, r3
 8004562:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004564:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004568:	4641      	mov	r1, r8
 800456a:	1851      	adds	r1, r2, r1
 800456c:	6339      	str	r1, [r7, #48]	@ 0x30
 800456e:	4649      	mov	r1, r9
 8004570:	414b      	adcs	r3, r1
 8004572:	637b      	str	r3, [r7, #52]	@ 0x34
 8004574:	f04f 0200 	mov.w	r2, #0
 8004578:	f04f 0300 	mov.w	r3, #0
 800457c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004580:	4659      	mov	r1, fp
 8004582:	00cb      	lsls	r3, r1, #3
 8004584:	4651      	mov	r1, sl
 8004586:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800458a:	4651      	mov	r1, sl
 800458c:	00ca      	lsls	r2, r1, #3
 800458e:	4610      	mov	r0, r2
 8004590:	4619      	mov	r1, r3
 8004592:	4603      	mov	r3, r0
 8004594:	4642      	mov	r2, r8
 8004596:	189b      	adds	r3, r3, r2
 8004598:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800459c:	464b      	mov	r3, r9
 800459e:	460a      	mov	r2, r1
 80045a0:	eb42 0303 	adc.w	r3, r2, r3
 80045a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80045b4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80045b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80045bc:	460b      	mov	r3, r1
 80045be:	18db      	adds	r3, r3, r3
 80045c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045c2:	4613      	mov	r3, r2
 80045c4:	eb42 0303 	adc.w	r3, r2, r3
 80045c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80045ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80045d2:	f7fc f98b 	bl	80008ec <__aeabi_uldivmod>
 80045d6:	4602      	mov	r2, r0
 80045d8:	460b      	mov	r3, r1
 80045da:	4b0d      	ldr	r3, [pc, #52]	@ (8004610 <UART_SetConfig+0x2d4>)
 80045dc:	fba3 1302 	umull	r1, r3, r3, r2
 80045e0:	095b      	lsrs	r3, r3, #5
 80045e2:	2164      	movs	r1, #100	@ 0x64
 80045e4:	fb01 f303 	mul.w	r3, r1, r3
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	00db      	lsls	r3, r3, #3
 80045ec:	3332      	adds	r3, #50	@ 0x32
 80045ee:	4a08      	ldr	r2, [pc, #32]	@ (8004610 <UART_SetConfig+0x2d4>)
 80045f0:	fba2 2303 	umull	r2, r3, r2, r3
 80045f4:	095b      	lsrs	r3, r3, #5
 80045f6:	f003 0207 	and.w	r2, r3, #7
 80045fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4422      	add	r2, r4
 8004602:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004604:	e106      	b.n	8004814 <UART_SetConfig+0x4d8>
 8004606:	bf00      	nop
 8004608:	40011000 	.word	0x40011000
 800460c:	40011400 	.word	0x40011400
 8004610:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004614:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004618:	2200      	movs	r2, #0
 800461a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800461e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004622:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004626:	4642      	mov	r2, r8
 8004628:	464b      	mov	r3, r9
 800462a:	1891      	adds	r1, r2, r2
 800462c:	6239      	str	r1, [r7, #32]
 800462e:	415b      	adcs	r3, r3
 8004630:	627b      	str	r3, [r7, #36]	@ 0x24
 8004632:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004636:	4641      	mov	r1, r8
 8004638:	1854      	adds	r4, r2, r1
 800463a:	4649      	mov	r1, r9
 800463c:	eb43 0501 	adc.w	r5, r3, r1
 8004640:	f04f 0200 	mov.w	r2, #0
 8004644:	f04f 0300 	mov.w	r3, #0
 8004648:	00eb      	lsls	r3, r5, #3
 800464a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800464e:	00e2      	lsls	r2, r4, #3
 8004650:	4614      	mov	r4, r2
 8004652:	461d      	mov	r5, r3
 8004654:	4643      	mov	r3, r8
 8004656:	18e3      	adds	r3, r4, r3
 8004658:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800465c:	464b      	mov	r3, r9
 800465e:	eb45 0303 	adc.w	r3, r5, r3
 8004662:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004672:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004676:	f04f 0200 	mov.w	r2, #0
 800467a:	f04f 0300 	mov.w	r3, #0
 800467e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004682:	4629      	mov	r1, r5
 8004684:	008b      	lsls	r3, r1, #2
 8004686:	4621      	mov	r1, r4
 8004688:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800468c:	4621      	mov	r1, r4
 800468e:	008a      	lsls	r2, r1, #2
 8004690:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004694:	f7fc f92a 	bl	80008ec <__aeabi_uldivmod>
 8004698:	4602      	mov	r2, r0
 800469a:	460b      	mov	r3, r1
 800469c:	4b60      	ldr	r3, [pc, #384]	@ (8004820 <UART_SetConfig+0x4e4>)
 800469e:	fba3 2302 	umull	r2, r3, r3, r2
 80046a2:	095b      	lsrs	r3, r3, #5
 80046a4:	011c      	lsls	r4, r3, #4
 80046a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046aa:	2200      	movs	r2, #0
 80046ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80046b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80046b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80046b8:	4642      	mov	r2, r8
 80046ba:	464b      	mov	r3, r9
 80046bc:	1891      	adds	r1, r2, r2
 80046be:	61b9      	str	r1, [r7, #24]
 80046c0:	415b      	adcs	r3, r3
 80046c2:	61fb      	str	r3, [r7, #28]
 80046c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046c8:	4641      	mov	r1, r8
 80046ca:	1851      	adds	r1, r2, r1
 80046cc:	6139      	str	r1, [r7, #16]
 80046ce:	4649      	mov	r1, r9
 80046d0:	414b      	adcs	r3, r1
 80046d2:	617b      	str	r3, [r7, #20]
 80046d4:	f04f 0200 	mov.w	r2, #0
 80046d8:	f04f 0300 	mov.w	r3, #0
 80046dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046e0:	4659      	mov	r1, fp
 80046e2:	00cb      	lsls	r3, r1, #3
 80046e4:	4651      	mov	r1, sl
 80046e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046ea:	4651      	mov	r1, sl
 80046ec:	00ca      	lsls	r2, r1, #3
 80046ee:	4610      	mov	r0, r2
 80046f0:	4619      	mov	r1, r3
 80046f2:	4603      	mov	r3, r0
 80046f4:	4642      	mov	r2, r8
 80046f6:	189b      	adds	r3, r3, r2
 80046f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80046fc:	464b      	mov	r3, r9
 80046fe:	460a      	mov	r2, r1
 8004700:	eb42 0303 	adc.w	r3, r2, r3
 8004704:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004712:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004714:	f04f 0200 	mov.w	r2, #0
 8004718:	f04f 0300 	mov.w	r3, #0
 800471c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004720:	4649      	mov	r1, r9
 8004722:	008b      	lsls	r3, r1, #2
 8004724:	4641      	mov	r1, r8
 8004726:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800472a:	4641      	mov	r1, r8
 800472c:	008a      	lsls	r2, r1, #2
 800472e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004732:	f7fc f8db 	bl	80008ec <__aeabi_uldivmod>
 8004736:	4602      	mov	r2, r0
 8004738:	460b      	mov	r3, r1
 800473a:	4611      	mov	r1, r2
 800473c:	4b38      	ldr	r3, [pc, #224]	@ (8004820 <UART_SetConfig+0x4e4>)
 800473e:	fba3 2301 	umull	r2, r3, r3, r1
 8004742:	095b      	lsrs	r3, r3, #5
 8004744:	2264      	movs	r2, #100	@ 0x64
 8004746:	fb02 f303 	mul.w	r3, r2, r3
 800474a:	1acb      	subs	r3, r1, r3
 800474c:	011b      	lsls	r3, r3, #4
 800474e:	3332      	adds	r3, #50	@ 0x32
 8004750:	4a33      	ldr	r2, [pc, #204]	@ (8004820 <UART_SetConfig+0x4e4>)
 8004752:	fba2 2303 	umull	r2, r3, r2, r3
 8004756:	095b      	lsrs	r3, r3, #5
 8004758:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800475c:	441c      	add	r4, r3
 800475e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004762:	2200      	movs	r2, #0
 8004764:	673b      	str	r3, [r7, #112]	@ 0x70
 8004766:	677a      	str	r2, [r7, #116]	@ 0x74
 8004768:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800476c:	4642      	mov	r2, r8
 800476e:	464b      	mov	r3, r9
 8004770:	1891      	adds	r1, r2, r2
 8004772:	60b9      	str	r1, [r7, #8]
 8004774:	415b      	adcs	r3, r3
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800477c:	4641      	mov	r1, r8
 800477e:	1851      	adds	r1, r2, r1
 8004780:	6039      	str	r1, [r7, #0]
 8004782:	4649      	mov	r1, r9
 8004784:	414b      	adcs	r3, r1
 8004786:	607b      	str	r3, [r7, #4]
 8004788:	f04f 0200 	mov.w	r2, #0
 800478c:	f04f 0300 	mov.w	r3, #0
 8004790:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004794:	4659      	mov	r1, fp
 8004796:	00cb      	lsls	r3, r1, #3
 8004798:	4651      	mov	r1, sl
 800479a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800479e:	4651      	mov	r1, sl
 80047a0:	00ca      	lsls	r2, r1, #3
 80047a2:	4610      	mov	r0, r2
 80047a4:	4619      	mov	r1, r3
 80047a6:	4603      	mov	r3, r0
 80047a8:	4642      	mov	r2, r8
 80047aa:	189b      	adds	r3, r3, r2
 80047ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047ae:	464b      	mov	r3, r9
 80047b0:	460a      	mov	r2, r1
 80047b2:	eb42 0303 	adc.w	r3, r2, r3
 80047b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80047b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80047c2:	667a      	str	r2, [r7, #100]	@ 0x64
 80047c4:	f04f 0200 	mov.w	r2, #0
 80047c8:	f04f 0300 	mov.w	r3, #0
 80047cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80047d0:	4649      	mov	r1, r9
 80047d2:	008b      	lsls	r3, r1, #2
 80047d4:	4641      	mov	r1, r8
 80047d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047da:	4641      	mov	r1, r8
 80047dc:	008a      	lsls	r2, r1, #2
 80047de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80047e2:	f7fc f883 	bl	80008ec <__aeabi_uldivmod>
 80047e6:	4602      	mov	r2, r0
 80047e8:	460b      	mov	r3, r1
 80047ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004820 <UART_SetConfig+0x4e4>)
 80047ec:	fba3 1302 	umull	r1, r3, r3, r2
 80047f0:	095b      	lsrs	r3, r3, #5
 80047f2:	2164      	movs	r1, #100	@ 0x64
 80047f4:	fb01 f303 	mul.w	r3, r1, r3
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	011b      	lsls	r3, r3, #4
 80047fc:	3332      	adds	r3, #50	@ 0x32
 80047fe:	4a08      	ldr	r2, [pc, #32]	@ (8004820 <UART_SetConfig+0x4e4>)
 8004800:	fba2 2303 	umull	r2, r3, r2, r3
 8004804:	095b      	lsrs	r3, r3, #5
 8004806:	f003 020f 	and.w	r2, r3, #15
 800480a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4422      	add	r2, r4
 8004812:	609a      	str	r2, [r3, #8]
}
 8004814:	bf00      	nop
 8004816:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800481a:	46bd      	mov	sp, r7
 800481c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004820:	51eb851f 	.word	0x51eb851f

08004824 <siprintf>:
 8004824:	b40e      	push	{r1, r2, r3}
 8004826:	b500      	push	{lr}
 8004828:	b09c      	sub	sp, #112	@ 0x70
 800482a:	ab1d      	add	r3, sp, #116	@ 0x74
 800482c:	9002      	str	r0, [sp, #8]
 800482e:	9006      	str	r0, [sp, #24]
 8004830:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004834:	4809      	ldr	r0, [pc, #36]	@ (800485c <siprintf+0x38>)
 8004836:	9107      	str	r1, [sp, #28]
 8004838:	9104      	str	r1, [sp, #16]
 800483a:	4909      	ldr	r1, [pc, #36]	@ (8004860 <siprintf+0x3c>)
 800483c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004840:	9105      	str	r1, [sp, #20]
 8004842:	6800      	ldr	r0, [r0, #0]
 8004844:	9301      	str	r3, [sp, #4]
 8004846:	a902      	add	r1, sp, #8
 8004848:	f000 f994 	bl	8004b74 <_svfiprintf_r>
 800484c:	9b02      	ldr	r3, [sp, #8]
 800484e:	2200      	movs	r2, #0
 8004850:	701a      	strb	r2, [r3, #0]
 8004852:	b01c      	add	sp, #112	@ 0x70
 8004854:	f85d eb04 	ldr.w	lr, [sp], #4
 8004858:	b003      	add	sp, #12
 800485a:	4770      	bx	lr
 800485c:	2000000c 	.word	0x2000000c
 8004860:	ffff0208 	.word	0xffff0208

08004864 <memset>:
 8004864:	4402      	add	r2, r0
 8004866:	4603      	mov	r3, r0
 8004868:	4293      	cmp	r3, r2
 800486a:	d100      	bne.n	800486e <memset+0xa>
 800486c:	4770      	bx	lr
 800486e:	f803 1b01 	strb.w	r1, [r3], #1
 8004872:	e7f9      	b.n	8004868 <memset+0x4>

08004874 <__errno>:
 8004874:	4b01      	ldr	r3, [pc, #4]	@ (800487c <__errno+0x8>)
 8004876:	6818      	ldr	r0, [r3, #0]
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	2000000c 	.word	0x2000000c

08004880 <__libc_init_array>:
 8004880:	b570      	push	{r4, r5, r6, lr}
 8004882:	4d0d      	ldr	r5, [pc, #52]	@ (80048b8 <__libc_init_array+0x38>)
 8004884:	4c0d      	ldr	r4, [pc, #52]	@ (80048bc <__libc_init_array+0x3c>)
 8004886:	1b64      	subs	r4, r4, r5
 8004888:	10a4      	asrs	r4, r4, #2
 800488a:	2600      	movs	r6, #0
 800488c:	42a6      	cmp	r6, r4
 800488e:	d109      	bne.n	80048a4 <__libc_init_array+0x24>
 8004890:	4d0b      	ldr	r5, [pc, #44]	@ (80048c0 <__libc_init_array+0x40>)
 8004892:	4c0c      	ldr	r4, [pc, #48]	@ (80048c4 <__libc_init_array+0x44>)
 8004894:	f000 fc66 	bl	8005164 <_init>
 8004898:	1b64      	subs	r4, r4, r5
 800489a:	10a4      	asrs	r4, r4, #2
 800489c:	2600      	movs	r6, #0
 800489e:	42a6      	cmp	r6, r4
 80048a0:	d105      	bne.n	80048ae <__libc_init_array+0x2e>
 80048a2:	bd70      	pop	{r4, r5, r6, pc}
 80048a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80048a8:	4798      	blx	r3
 80048aa:	3601      	adds	r6, #1
 80048ac:	e7ee      	b.n	800488c <__libc_init_array+0xc>
 80048ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80048b2:	4798      	blx	r3
 80048b4:	3601      	adds	r6, #1
 80048b6:	e7f2      	b.n	800489e <__libc_init_array+0x1e>
 80048b8:	080051ec 	.word	0x080051ec
 80048bc:	080051ec 	.word	0x080051ec
 80048c0:	080051ec 	.word	0x080051ec
 80048c4:	080051f0 	.word	0x080051f0

080048c8 <__retarget_lock_acquire_recursive>:
 80048c8:	4770      	bx	lr

080048ca <__retarget_lock_release_recursive>:
 80048ca:	4770      	bx	lr

080048cc <_free_r>:
 80048cc:	b538      	push	{r3, r4, r5, lr}
 80048ce:	4605      	mov	r5, r0
 80048d0:	2900      	cmp	r1, #0
 80048d2:	d041      	beq.n	8004958 <_free_r+0x8c>
 80048d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048d8:	1f0c      	subs	r4, r1, #4
 80048da:	2b00      	cmp	r3, #0
 80048dc:	bfb8      	it	lt
 80048de:	18e4      	addlt	r4, r4, r3
 80048e0:	f000 f8e0 	bl	8004aa4 <__malloc_lock>
 80048e4:	4a1d      	ldr	r2, [pc, #116]	@ (800495c <_free_r+0x90>)
 80048e6:	6813      	ldr	r3, [r2, #0]
 80048e8:	b933      	cbnz	r3, 80048f8 <_free_r+0x2c>
 80048ea:	6063      	str	r3, [r4, #4]
 80048ec:	6014      	str	r4, [r2, #0]
 80048ee:	4628      	mov	r0, r5
 80048f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048f4:	f000 b8dc 	b.w	8004ab0 <__malloc_unlock>
 80048f8:	42a3      	cmp	r3, r4
 80048fa:	d908      	bls.n	800490e <_free_r+0x42>
 80048fc:	6820      	ldr	r0, [r4, #0]
 80048fe:	1821      	adds	r1, r4, r0
 8004900:	428b      	cmp	r3, r1
 8004902:	bf01      	itttt	eq
 8004904:	6819      	ldreq	r1, [r3, #0]
 8004906:	685b      	ldreq	r3, [r3, #4]
 8004908:	1809      	addeq	r1, r1, r0
 800490a:	6021      	streq	r1, [r4, #0]
 800490c:	e7ed      	b.n	80048ea <_free_r+0x1e>
 800490e:	461a      	mov	r2, r3
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	b10b      	cbz	r3, 8004918 <_free_r+0x4c>
 8004914:	42a3      	cmp	r3, r4
 8004916:	d9fa      	bls.n	800490e <_free_r+0x42>
 8004918:	6811      	ldr	r1, [r2, #0]
 800491a:	1850      	adds	r0, r2, r1
 800491c:	42a0      	cmp	r0, r4
 800491e:	d10b      	bne.n	8004938 <_free_r+0x6c>
 8004920:	6820      	ldr	r0, [r4, #0]
 8004922:	4401      	add	r1, r0
 8004924:	1850      	adds	r0, r2, r1
 8004926:	4283      	cmp	r3, r0
 8004928:	6011      	str	r1, [r2, #0]
 800492a:	d1e0      	bne.n	80048ee <_free_r+0x22>
 800492c:	6818      	ldr	r0, [r3, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	6053      	str	r3, [r2, #4]
 8004932:	4408      	add	r0, r1
 8004934:	6010      	str	r0, [r2, #0]
 8004936:	e7da      	b.n	80048ee <_free_r+0x22>
 8004938:	d902      	bls.n	8004940 <_free_r+0x74>
 800493a:	230c      	movs	r3, #12
 800493c:	602b      	str	r3, [r5, #0]
 800493e:	e7d6      	b.n	80048ee <_free_r+0x22>
 8004940:	6820      	ldr	r0, [r4, #0]
 8004942:	1821      	adds	r1, r4, r0
 8004944:	428b      	cmp	r3, r1
 8004946:	bf04      	itt	eq
 8004948:	6819      	ldreq	r1, [r3, #0]
 800494a:	685b      	ldreq	r3, [r3, #4]
 800494c:	6063      	str	r3, [r4, #4]
 800494e:	bf04      	itt	eq
 8004950:	1809      	addeq	r1, r1, r0
 8004952:	6021      	streq	r1, [r4, #0]
 8004954:	6054      	str	r4, [r2, #4]
 8004956:	e7ca      	b.n	80048ee <_free_r+0x22>
 8004958:	bd38      	pop	{r3, r4, r5, pc}
 800495a:	bf00      	nop
 800495c:	200002e8 	.word	0x200002e8

08004960 <sbrk_aligned>:
 8004960:	b570      	push	{r4, r5, r6, lr}
 8004962:	4e0f      	ldr	r6, [pc, #60]	@ (80049a0 <sbrk_aligned+0x40>)
 8004964:	460c      	mov	r4, r1
 8004966:	6831      	ldr	r1, [r6, #0]
 8004968:	4605      	mov	r5, r0
 800496a:	b911      	cbnz	r1, 8004972 <sbrk_aligned+0x12>
 800496c:	f000 fba6 	bl	80050bc <_sbrk_r>
 8004970:	6030      	str	r0, [r6, #0]
 8004972:	4621      	mov	r1, r4
 8004974:	4628      	mov	r0, r5
 8004976:	f000 fba1 	bl	80050bc <_sbrk_r>
 800497a:	1c43      	adds	r3, r0, #1
 800497c:	d103      	bne.n	8004986 <sbrk_aligned+0x26>
 800497e:	f04f 34ff 	mov.w	r4, #4294967295
 8004982:	4620      	mov	r0, r4
 8004984:	bd70      	pop	{r4, r5, r6, pc}
 8004986:	1cc4      	adds	r4, r0, #3
 8004988:	f024 0403 	bic.w	r4, r4, #3
 800498c:	42a0      	cmp	r0, r4
 800498e:	d0f8      	beq.n	8004982 <sbrk_aligned+0x22>
 8004990:	1a21      	subs	r1, r4, r0
 8004992:	4628      	mov	r0, r5
 8004994:	f000 fb92 	bl	80050bc <_sbrk_r>
 8004998:	3001      	adds	r0, #1
 800499a:	d1f2      	bne.n	8004982 <sbrk_aligned+0x22>
 800499c:	e7ef      	b.n	800497e <sbrk_aligned+0x1e>
 800499e:	bf00      	nop
 80049a0:	200002e4 	.word	0x200002e4

080049a4 <_malloc_r>:
 80049a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049a8:	1ccd      	adds	r5, r1, #3
 80049aa:	f025 0503 	bic.w	r5, r5, #3
 80049ae:	3508      	adds	r5, #8
 80049b0:	2d0c      	cmp	r5, #12
 80049b2:	bf38      	it	cc
 80049b4:	250c      	movcc	r5, #12
 80049b6:	2d00      	cmp	r5, #0
 80049b8:	4606      	mov	r6, r0
 80049ba:	db01      	blt.n	80049c0 <_malloc_r+0x1c>
 80049bc:	42a9      	cmp	r1, r5
 80049be:	d904      	bls.n	80049ca <_malloc_r+0x26>
 80049c0:	230c      	movs	r3, #12
 80049c2:	6033      	str	r3, [r6, #0]
 80049c4:	2000      	movs	r0, #0
 80049c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004aa0 <_malloc_r+0xfc>
 80049ce:	f000 f869 	bl	8004aa4 <__malloc_lock>
 80049d2:	f8d8 3000 	ldr.w	r3, [r8]
 80049d6:	461c      	mov	r4, r3
 80049d8:	bb44      	cbnz	r4, 8004a2c <_malloc_r+0x88>
 80049da:	4629      	mov	r1, r5
 80049dc:	4630      	mov	r0, r6
 80049de:	f7ff ffbf 	bl	8004960 <sbrk_aligned>
 80049e2:	1c43      	adds	r3, r0, #1
 80049e4:	4604      	mov	r4, r0
 80049e6:	d158      	bne.n	8004a9a <_malloc_r+0xf6>
 80049e8:	f8d8 4000 	ldr.w	r4, [r8]
 80049ec:	4627      	mov	r7, r4
 80049ee:	2f00      	cmp	r7, #0
 80049f0:	d143      	bne.n	8004a7a <_malloc_r+0xd6>
 80049f2:	2c00      	cmp	r4, #0
 80049f4:	d04b      	beq.n	8004a8e <_malloc_r+0xea>
 80049f6:	6823      	ldr	r3, [r4, #0]
 80049f8:	4639      	mov	r1, r7
 80049fa:	4630      	mov	r0, r6
 80049fc:	eb04 0903 	add.w	r9, r4, r3
 8004a00:	f000 fb5c 	bl	80050bc <_sbrk_r>
 8004a04:	4581      	cmp	r9, r0
 8004a06:	d142      	bne.n	8004a8e <_malloc_r+0xea>
 8004a08:	6821      	ldr	r1, [r4, #0]
 8004a0a:	1a6d      	subs	r5, r5, r1
 8004a0c:	4629      	mov	r1, r5
 8004a0e:	4630      	mov	r0, r6
 8004a10:	f7ff ffa6 	bl	8004960 <sbrk_aligned>
 8004a14:	3001      	adds	r0, #1
 8004a16:	d03a      	beq.n	8004a8e <_malloc_r+0xea>
 8004a18:	6823      	ldr	r3, [r4, #0]
 8004a1a:	442b      	add	r3, r5
 8004a1c:	6023      	str	r3, [r4, #0]
 8004a1e:	f8d8 3000 	ldr.w	r3, [r8]
 8004a22:	685a      	ldr	r2, [r3, #4]
 8004a24:	bb62      	cbnz	r2, 8004a80 <_malloc_r+0xdc>
 8004a26:	f8c8 7000 	str.w	r7, [r8]
 8004a2a:	e00f      	b.n	8004a4c <_malloc_r+0xa8>
 8004a2c:	6822      	ldr	r2, [r4, #0]
 8004a2e:	1b52      	subs	r2, r2, r5
 8004a30:	d420      	bmi.n	8004a74 <_malloc_r+0xd0>
 8004a32:	2a0b      	cmp	r2, #11
 8004a34:	d917      	bls.n	8004a66 <_malloc_r+0xc2>
 8004a36:	1961      	adds	r1, r4, r5
 8004a38:	42a3      	cmp	r3, r4
 8004a3a:	6025      	str	r5, [r4, #0]
 8004a3c:	bf18      	it	ne
 8004a3e:	6059      	strne	r1, [r3, #4]
 8004a40:	6863      	ldr	r3, [r4, #4]
 8004a42:	bf08      	it	eq
 8004a44:	f8c8 1000 	streq.w	r1, [r8]
 8004a48:	5162      	str	r2, [r4, r5]
 8004a4a:	604b      	str	r3, [r1, #4]
 8004a4c:	4630      	mov	r0, r6
 8004a4e:	f000 f82f 	bl	8004ab0 <__malloc_unlock>
 8004a52:	f104 000b 	add.w	r0, r4, #11
 8004a56:	1d23      	adds	r3, r4, #4
 8004a58:	f020 0007 	bic.w	r0, r0, #7
 8004a5c:	1ac2      	subs	r2, r0, r3
 8004a5e:	bf1c      	itt	ne
 8004a60:	1a1b      	subne	r3, r3, r0
 8004a62:	50a3      	strne	r3, [r4, r2]
 8004a64:	e7af      	b.n	80049c6 <_malloc_r+0x22>
 8004a66:	6862      	ldr	r2, [r4, #4]
 8004a68:	42a3      	cmp	r3, r4
 8004a6a:	bf0c      	ite	eq
 8004a6c:	f8c8 2000 	streq.w	r2, [r8]
 8004a70:	605a      	strne	r2, [r3, #4]
 8004a72:	e7eb      	b.n	8004a4c <_malloc_r+0xa8>
 8004a74:	4623      	mov	r3, r4
 8004a76:	6864      	ldr	r4, [r4, #4]
 8004a78:	e7ae      	b.n	80049d8 <_malloc_r+0x34>
 8004a7a:	463c      	mov	r4, r7
 8004a7c:	687f      	ldr	r7, [r7, #4]
 8004a7e:	e7b6      	b.n	80049ee <_malloc_r+0x4a>
 8004a80:	461a      	mov	r2, r3
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	42a3      	cmp	r3, r4
 8004a86:	d1fb      	bne.n	8004a80 <_malloc_r+0xdc>
 8004a88:	2300      	movs	r3, #0
 8004a8a:	6053      	str	r3, [r2, #4]
 8004a8c:	e7de      	b.n	8004a4c <_malloc_r+0xa8>
 8004a8e:	230c      	movs	r3, #12
 8004a90:	6033      	str	r3, [r6, #0]
 8004a92:	4630      	mov	r0, r6
 8004a94:	f000 f80c 	bl	8004ab0 <__malloc_unlock>
 8004a98:	e794      	b.n	80049c4 <_malloc_r+0x20>
 8004a9a:	6005      	str	r5, [r0, #0]
 8004a9c:	e7d6      	b.n	8004a4c <_malloc_r+0xa8>
 8004a9e:	bf00      	nop
 8004aa0:	200002e8 	.word	0x200002e8

08004aa4 <__malloc_lock>:
 8004aa4:	4801      	ldr	r0, [pc, #4]	@ (8004aac <__malloc_lock+0x8>)
 8004aa6:	f7ff bf0f 	b.w	80048c8 <__retarget_lock_acquire_recursive>
 8004aaa:	bf00      	nop
 8004aac:	200002e0 	.word	0x200002e0

08004ab0 <__malloc_unlock>:
 8004ab0:	4801      	ldr	r0, [pc, #4]	@ (8004ab8 <__malloc_unlock+0x8>)
 8004ab2:	f7ff bf0a 	b.w	80048ca <__retarget_lock_release_recursive>
 8004ab6:	bf00      	nop
 8004ab8:	200002e0 	.word	0x200002e0

08004abc <__ssputs_r>:
 8004abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ac0:	688e      	ldr	r6, [r1, #8]
 8004ac2:	461f      	mov	r7, r3
 8004ac4:	42be      	cmp	r6, r7
 8004ac6:	680b      	ldr	r3, [r1, #0]
 8004ac8:	4682      	mov	sl, r0
 8004aca:	460c      	mov	r4, r1
 8004acc:	4690      	mov	r8, r2
 8004ace:	d82d      	bhi.n	8004b2c <__ssputs_r+0x70>
 8004ad0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004ad4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004ad8:	d026      	beq.n	8004b28 <__ssputs_r+0x6c>
 8004ada:	6965      	ldr	r5, [r4, #20]
 8004adc:	6909      	ldr	r1, [r1, #16]
 8004ade:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ae2:	eba3 0901 	sub.w	r9, r3, r1
 8004ae6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004aea:	1c7b      	adds	r3, r7, #1
 8004aec:	444b      	add	r3, r9
 8004aee:	106d      	asrs	r5, r5, #1
 8004af0:	429d      	cmp	r5, r3
 8004af2:	bf38      	it	cc
 8004af4:	461d      	movcc	r5, r3
 8004af6:	0553      	lsls	r3, r2, #21
 8004af8:	d527      	bpl.n	8004b4a <__ssputs_r+0x8e>
 8004afa:	4629      	mov	r1, r5
 8004afc:	f7ff ff52 	bl	80049a4 <_malloc_r>
 8004b00:	4606      	mov	r6, r0
 8004b02:	b360      	cbz	r0, 8004b5e <__ssputs_r+0xa2>
 8004b04:	6921      	ldr	r1, [r4, #16]
 8004b06:	464a      	mov	r2, r9
 8004b08:	f000 fae8 	bl	80050dc <memcpy>
 8004b0c:	89a3      	ldrh	r3, [r4, #12]
 8004b0e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004b12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b16:	81a3      	strh	r3, [r4, #12]
 8004b18:	6126      	str	r6, [r4, #16]
 8004b1a:	6165      	str	r5, [r4, #20]
 8004b1c:	444e      	add	r6, r9
 8004b1e:	eba5 0509 	sub.w	r5, r5, r9
 8004b22:	6026      	str	r6, [r4, #0]
 8004b24:	60a5      	str	r5, [r4, #8]
 8004b26:	463e      	mov	r6, r7
 8004b28:	42be      	cmp	r6, r7
 8004b2a:	d900      	bls.n	8004b2e <__ssputs_r+0x72>
 8004b2c:	463e      	mov	r6, r7
 8004b2e:	6820      	ldr	r0, [r4, #0]
 8004b30:	4632      	mov	r2, r6
 8004b32:	4641      	mov	r1, r8
 8004b34:	f000 faa8 	bl	8005088 <memmove>
 8004b38:	68a3      	ldr	r3, [r4, #8]
 8004b3a:	1b9b      	subs	r3, r3, r6
 8004b3c:	60a3      	str	r3, [r4, #8]
 8004b3e:	6823      	ldr	r3, [r4, #0]
 8004b40:	4433      	add	r3, r6
 8004b42:	6023      	str	r3, [r4, #0]
 8004b44:	2000      	movs	r0, #0
 8004b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b4a:	462a      	mov	r2, r5
 8004b4c:	f000 fad4 	bl	80050f8 <_realloc_r>
 8004b50:	4606      	mov	r6, r0
 8004b52:	2800      	cmp	r0, #0
 8004b54:	d1e0      	bne.n	8004b18 <__ssputs_r+0x5c>
 8004b56:	6921      	ldr	r1, [r4, #16]
 8004b58:	4650      	mov	r0, sl
 8004b5a:	f7ff feb7 	bl	80048cc <_free_r>
 8004b5e:	230c      	movs	r3, #12
 8004b60:	f8ca 3000 	str.w	r3, [sl]
 8004b64:	89a3      	ldrh	r3, [r4, #12]
 8004b66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b6a:	81a3      	strh	r3, [r4, #12]
 8004b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b70:	e7e9      	b.n	8004b46 <__ssputs_r+0x8a>
	...

08004b74 <_svfiprintf_r>:
 8004b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b78:	4698      	mov	r8, r3
 8004b7a:	898b      	ldrh	r3, [r1, #12]
 8004b7c:	061b      	lsls	r3, r3, #24
 8004b7e:	b09d      	sub	sp, #116	@ 0x74
 8004b80:	4607      	mov	r7, r0
 8004b82:	460d      	mov	r5, r1
 8004b84:	4614      	mov	r4, r2
 8004b86:	d510      	bpl.n	8004baa <_svfiprintf_r+0x36>
 8004b88:	690b      	ldr	r3, [r1, #16]
 8004b8a:	b973      	cbnz	r3, 8004baa <_svfiprintf_r+0x36>
 8004b8c:	2140      	movs	r1, #64	@ 0x40
 8004b8e:	f7ff ff09 	bl	80049a4 <_malloc_r>
 8004b92:	6028      	str	r0, [r5, #0]
 8004b94:	6128      	str	r0, [r5, #16]
 8004b96:	b930      	cbnz	r0, 8004ba6 <_svfiprintf_r+0x32>
 8004b98:	230c      	movs	r3, #12
 8004b9a:	603b      	str	r3, [r7, #0]
 8004b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba0:	b01d      	add	sp, #116	@ 0x74
 8004ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ba6:	2340      	movs	r3, #64	@ 0x40
 8004ba8:	616b      	str	r3, [r5, #20]
 8004baa:	2300      	movs	r3, #0
 8004bac:	9309      	str	r3, [sp, #36]	@ 0x24
 8004bae:	2320      	movs	r3, #32
 8004bb0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004bb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8004bb8:	2330      	movs	r3, #48	@ 0x30
 8004bba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004d58 <_svfiprintf_r+0x1e4>
 8004bbe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004bc2:	f04f 0901 	mov.w	r9, #1
 8004bc6:	4623      	mov	r3, r4
 8004bc8:	469a      	mov	sl, r3
 8004bca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bce:	b10a      	cbz	r2, 8004bd4 <_svfiprintf_r+0x60>
 8004bd0:	2a25      	cmp	r2, #37	@ 0x25
 8004bd2:	d1f9      	bne.n	8004bc8 <_svfiprintf_r+0x54>
 8004bd4:	ebba 0b04 	subs.w	fp, sl, r4
 8004bd8:	d00b      	beq.n	8004bf2 <_svfiprintf_r+0x7e>
 8004bda:	465b      	mov	r3, fp
 8004bdc:	4622      	mov	r2, r4
 8004bde:	4629      	mov	r1, r5
 8004be0:	4638      	mov	r0, r7
 8004be2:	f7ff ff6b 	bl	8004abc <__ssputs_r>
 8004be6:	3001      	adds	r0, #1
 8004be8:	f000 80a7 	beq.w	8004d3a <_svfiprintf_r+0x1c6>
 8004bec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004bee:	445a      	add	r2, fp
 8004bf0:	9209      	str	r2, [sp, #36]	@ 0x24
 8004bf2:	f89a 3000 	ldrb.w	r3, [sl]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f000 809f 	beq.w	8004d3a <_svfiprintf_r+0x1c6>
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8004c02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c06:	f10a 0a01 	add.w	sl, sl, #1
 8004c0a:	9304      	str	r3, [sp, #16]
 8004c0c:	9307      	str	r3, [sp, #28]
 8004c0e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004c12:	931a      	str	r3, [sp, #104]	@ 0x68
 8004c14:	4654      	mov	r4, sl
 8004c16:	2205      	movs	r2, #5
 8004c18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c1c:	484e      	ldr	r0, [pc, #312]	@ (8004d58 <_svfiprintf_r+0x1e4>)
 8004c1e:	f7fb fadf 	bl	80001e0 <memchr>
 8004c22:	9a04      	ldr	r2, [sp, #16]
 8004c24:	b9d8      	cbnz	r0, 8004c5e <_svfiprintf_r+0xea>
 8004c26:	06d0      	lsls	r0, r2, #27
 8004c28:	bf44      	itt	mi
 8004c2a:	2320      	movmi	r3, #32
 8004c2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c30:	0711      	lsls	r1, r2, #28
 8004c32:	bf44      	itt	mi
 8004c34:	232b      	movmi	r3, #43	@ 0x2b
 8004c36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c3a:	f89a 3000 	ldrb.w	r3, [sl]
 8004c3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c40:	d015      	beq.n	8004c6e <_svfiprintf_r+0xfa>
 8004c42:	9a07      	ldr	r2, [sp, #28]
 8004c44:	4654      	mov	r4, sl
 8004c46:	2000      	movs	r0, #0
 8004c48:	f04f 0c0a 	mov.w	ip, #10
 8004c4c:	4621      	mov	r1, r4
 8004c4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c52:	3b30      	subs	r3, #48	@ 0x30
 8004c54:	2b09      	cmp	r3, #9
 8004c56:	d94b      	bls.n	8004cf0 <_svfiprintf_r+0x17c>
 8004c58:	b1b0      	cbz	r0, 8004c88 <_svfiprintf_r+0x114>
 8004c5a:	9207      	str	r2, [sp, #28]
 8004c5c:	e014      	b.n	8004c88 <_svfiprintf_r+0x114>
 8004c5e:	eba0 0308 	sub.w	r3, r0, r8
 8004c62:	fa09 f303 	lsl.w	r3, r9, r3
 8004c66:	4313      	orrs	r3, r2
 8004c68:	9304      	str	r3, [sp, #16]
 8004c6a:	46a2      	mov	sl, r4
 8004c6c:	e7d2      	b.n	8004c14 <_svfiprintf_r+0xa0>
 8004c6e:	9b03      	ldr	r3, [sp, #12]
 8004c70:	1d19      	adds	r1, r3, #4
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	9103      	str	r1, [sp, #12]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	bfbb      	ittet	lt
 8004c7a:	425b      	neglt	r3, r3
 8004c7c:	f042 0202 	orrlt.w	r2, r2, #2
 8004c80:	9307      	strge	r3, [sp, #28]
 8004c82:	9307      	strlt	r3, [sp, #28]
 8004c84:	bfb8      	it	lt
 8004c86:	9204      	strlt	r2, [sp, #16]
 8004c88:	7823      	ldrb	r3, [r4, #0]
 8004c8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c8c:	d10a      	bne.n	8004ca4 <_svfiprintf_r+0x130>
 8004c8e:	7863      	ldrb	r3, [r4, #1]
 8004c90:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c92:	d132      	bne.n	8004cfa <_svfiprintf_r+0x186>
 8004c94:	9b03      	ldr	r3, [sp, #12]
 8004c96:	1d1a      	adds	r2, r3, #4
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	9203      	str	r2, [sp, #12]
 8004c9c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004ca0:	3402      	adds	r4, #2
 8004ca2:	9305      	str	r3, [sp, #20]
 8004ca4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004d68 <_svfiprintf_r+0x1f4>
 8004ca8:	7821      	ldrb	r1, [r4, #0]
 8004caa:	2203      	movs	r2, #3
 8004cac:	4650      	mov	r0, sl
 8004cae:	f7fb fa97 	bl	80001e0 <memchr>
 8004cb2:	b138      	cbz	r0, 8004cc4 <_svfiprintf_r+0x150>
 8004cb4:	9b04      	ldr	r3, [sp, #16]
 8004cb6:	eba0 000a 	sub.w	r0, r0, sl
 8004cba:	2240      	movs	r2, #64	@ 0x40
 8004cbc:	4082      	lsls	r2, r0
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	3401      	adds	r4, #1
 8004cc2:	9304      	str	r3, [sp, #16]
 8004cc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cc8:	4824      	ldr	r0, [pc, #144]	@ (8004d5c <_svfiprintf_r+0x1e8>)
 8004cca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004cce:	2206      	movs	r2, #6
 8004cd0:	f7fb fa86 	bl	80001e0 <memchr>
 8004cd4:	2800      	cmp	r0, #0
 8004cd6:	d036      	beq.n	8004d46 <_svfiprintf_r+0x1d2>
 8004cd8:	4b21      	ldr	r3, [pc, #132]	@ (8004d60 <_svfiprintf_r+0x1ec>)
 8004cda:	bb1b      	cbnz	r3, 8004d24 <_svfiprintf_r+0x1b0>
 8004cdc:	9b03      	ldr	r3, [sp, #12]
 8004cde:	3307      	adds	r3, #7
 8004ce0:	f023 0307 	bic.w	r3, r3, #7
 8004ce4:	3308      	adds	r3, #8
 8004ce6:	9303      	str	r3, [sp, #12]
 8004ce8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cea:	4433      	add	r3, r6
 8004cec:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cee:	e76a      	b.n	8004bc6 <_svfiprintf_r+0x52>
 8004cf0:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cf4:	460c      	mov	r4, r1
 8004cf6:	2001      	movs	r0, #1
 8004cf8:	e7a8      	b.n	8004c4c <_svfiprintf_r+0xd8>
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	3401      	adds	r4, #1
 8004cfe:	9305      	str	r3, [sp, #20]
 8004d00:	4619      	mov	r1, r3
 8004d02:	f04f 0c0a 	mov.w	ip, #10
 8004d06:	4620      	mov	r0, r4
 8004d08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d0c:	3a30      	subs	r2, #48	@ 0x30
 8004d0e:	2a09      	cmp	r2, #9
 8004d10:	d903      	bls.n	8004d1a <_svfiprintf_r+0x1a6>
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d0c6      	beq.n	8004ca4 <_svfiprintf_r+0x130>
 8004d16:	9105      	str	r1, [sp, #20]
 8004d18:	e7c4      	b.n	8004ca4 <_svfiprintf_r+0x130>
 8004d1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d1e:	4604      	mov	r4, r0
 8004d20:	2301      	movs	r3, #1
 8004d22:	e7f0      	b.n	8004d06 <_svfiprintf_r+0x192>
 8004d24:	ab03      	add	r3, sp, #12
 8004d26:	9300      	str	r3, [sp, #0]
 8004d28:	462a      	mov	r2, r5
 8004d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8004d64 <_svfiprintf_r+0x1f0>)
 8004d2c:	a904      	add	r1, sp, #16
 8004d2e:	4638      	mov	r0, r7
 8004d30:	f3af 8000 	nop.w
 8004d34:	1c42      	adds	r2, r0, #1
 8004d36:	4606      	mov	r6, r0
 8004d38:	d1d6      	bne.n	8004ce8 <_svfiprintf_r+0x174>
 8004d3a:	89ab      	ldrh	r3, [r5, #12]
 8004d3c:	065b      	lsls	r3, r3, #25
 8004d3e:	f53f af2d 	bmi.w	8004b9c <_svfiprintf_r+0x28>
 8004d42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d44:	e72c      	b.n	8004ba0 <_svfiprintf_r+0x2c>
 8004d46:	ab03      	add	r3, sp, #12
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	462a      	mov	r2, r5
 8004d4c:	4b05      	ldr	r3, [pc, #20]	@ (8004d64 <_svfiprintf_r+0x1f0>)
 8004d4e:	a904      	add	r1, sp, #16
 8004d50:	4638      	mov	r0, r7
 8004d52:	f000 f879 	bl	8004e48 <_printf_i>
 8004d56:	e7ed      	b.n	8004d34 <_svfiprintf_r+0x1c0>
 8004d58:	080051b0 	.word	0x080051b0
 8004d5c:	080051ba 	.word	0x080051ba
 8004d60:	00000000 	.word	0x00000000
 8004d64:	08004abd 	.word	0x08004abd
 8004d68:	080051b6 	.word	0x080051b6

08004d6c <_printf_common>:
 8004d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d70:	4616      	mov	r6, r2
 8004d72:	4698      	mov	r8, r3
 8004d74:	688a      	ldr	r2, [r1, #8]
 8004d76:	690b      	ldr	r3, [r1, #16]
 8004d78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	bfb8      	it	lt
 8004d80:	4613      	movlt	r3, r2
 8004d82:	6033      	str	r3, [r6, #0]
 8004d84:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d88:	4607      	mov	r7, r0
 8004d8a:	460c      	mov	r4, r1
 8004d8c:	b10a      	cbz	r2, 8004d92 <_printf_common+0x26>
 8004d8e:	3301      	adds	r3, #1
 8004d90:	6033      	str	r3, [r6, #0]
 8004d92:	6823      	ldr	r3, [r4, #0]
 8004d94:	0699      	lsls	r1, r3, #26
 8004d96:	bf42      	ittt	mi
 8004d98:	6833      	ldrmi	r3, [r6, #0]
 8004d9a:	3302      	addmi	r3, #2
 8004d9c:	6033      	strmi	r3, [r6, #0]
 8004d9e:	6825      	ldr	r5, [r4, #0]
 8004da0:	f015 0506 	ands.w	r5, r5, #6
 8004da4:	d106      	bne.n	8004db4 <_printf_common+0x48>
 8004da6:	f104 0a19 	add.w	sl, r4, #25
 8004daa:	68e3      	ldr	r3, [r4, #12]
 8004dac:	6832      	ldr	r2, [r6, #0]
 8004dae:	1a9b      	subs	r3, r3, r2
 8004db0:	42ab      	cmp	r3, r5
 8004db2:	dc26      	bgt.n	8004e02 <_printf_common+0x96>
 8004db4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004db8:	6822      	ldr	r2, [r4, #0]
 8004dba:	3b00      	subs	r3, #0
 8004dbc:	bf18      	it	ne
 8004dbe:	2301      	movne	r3, #1
 8004dc0:	0692      	lsls	r2, r2, #26
 8004dc2:	d42b      	bmi.n	8004e1c <_printf_common+0xb0>
 8004dc4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004dc8:	4641      	mov	r1, r8
 8004dca:	4638      	mov	r0, r7
 8004dcc:	47c8      	blx	r9
 8004dce:	3001      	adds	r0, #1
 8004dd0:	d01e      	beq.n	8004e10 <_printf_common+0xa4>
 8004dd2:	6823      	ldr	r3, [r4, #0]
 8004dd4:	6922      	ldr	r2, [r4, #16]
 8004dd6:	f003 0306 	and.w	r3, r3, #6
 8004dda:	2b04      	cmp	r3, #4
 8004ddc:	bf02      	ittt	eq
 8004dde:	68e5      	ldreq	r5, [r4, #12]
 8004de0:	6833      	ldreq	r3, [r6, #0]
 8004de2:	1aed      	subeq	r5, r5, r3
 8004de4:	68a3      	ldr	r3, [r4, #8]
 8004de6:	bf0c      	ite	eq
 8004de8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004dec:	2500      	movne	r5, #0
 8004dee:	4293      	cmp	r3, r2
 8004df0:	bfc4      	itt	gt
 8004df2:	1a9b      	subgt	r3, r3, r2
 8004df4:	18ed      	addgt	r5, r5, r3
 8004df6:	2600      	movs	r6, #0
 8004df8:	341a      	adds	r4, #26
 8004dfa:	42b5      	cmp	r5, r6
 8004dfc:	d11a      	bne.n	8004e34 <_printf_common+0xc8>
 8004dfe:	2000      	movs	r0, #0
 8004e00:	e008      	b.n	8004e14 <_printf_common+0xa8>
 8004e02:	2301      	movs	r3, #1
 8004e04:	4652      	mov	r2, sl
 8004e06:	4641      	mov	r1, r8
 8004e08:	4638      	mov	r0, r7
 8004e0a:	47c8      	blx	r9
 8004e0c:	3001      	adds	r0, #1
 8004e0e:	d103      	bne.n	8004e18 <_printf_common+0xac>
 8004e10:	f04f 30ff 	mov.w	r0, #4294967295
 8004e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e18:	3501      	adds	r5, #1
 8004e1a:	e7c6      	b.n	8004daa <_printf_common+0x3e>
 8004e1c:	18e1      	adds	r1, r4, r3
 8004e1e:	1c5a      	adds	r2, r3, #1
 8004e20:	2030      	movs	r0, #48	@ 0x30
 8004e22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e26:	4422      	add	r2, r4
 8004e28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e30:	3302      	adds	r3, #2
 8004e32:	e7c7      	b.n	8004dc4 <_printf_common+0x58>
 8004e34:	2301      	movs	r3, #1
 8004e36:	4622      	mov	r2, r4
 8004e38:	4641      	mov	r1, r8
 8004e3a:	4638      	mov	r0, r7
 8004e3c:	47c8      	blx	r9
 8004e3e:	3001      	adds	r0, #1
 8004e40:	d0e6      	beq.n	8004e10 <_printf_common+0xa4>
 8004e42:	3601      	adds	r6, #1
 8004e44:	e7d9      	b.n	8004dfa <_printf_common+0x8e>
	...

08004e48 <_printf_i>:
 8004e48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e4c:	7e0f      	ldrb	r7, [r1, #24]
 8004e4e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e50:	2f78      	cmp	r7, #120	@ 0x78
 8004e52:	4691      	mov	r9, r2
 8004e54:	4680      	mov	r8, r0
 8004e56:	460c      	mov	r4, r1
 8004e58:	469a      	mov	sl, r3
 8004e5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e5e:	d807      	bhi.n	8004e70 <_printf_i+0x28>
 8004e60:	2f62      	cmp	r7, #98	@ 0x62
 8004e62:	d80a      	bhi.n	8004e7a <_printf_i+0x32>
 8004e64:	2f00      	cmp	r7, #0
 8004e66:	f000 80d2 	beq.w	800500e <_printf_i+0x1c6>
 8004e6a:	2f58      	cmp	r7, #88	@ 0x58
 8004e6c:	f000 80b9 	beq.w	8004fe2 <_printf_i+0x19a>
 8004e70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e78:	e03a      	b.n	8004ef0 <_printf_i+0xa8>
 8004e7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e7e:	2b15      	cmp	r3, #21
 8004e80:	d8f6      	bhi.n	8004e70 <_printf_i+0x28>
 8004e82:	a101      	add	r1, pc, #4	@ (adr r1, 8004e88 <_printf_i+0x40>)
 8004e84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e88:	08004ee1 	.word	0x08004ee1
 8004e8c:	08004ef5 	.word	0x08004ef5
 8004e90:	08004e71 	.word	0x08004e71
 8004e94:	08004e71 	.word	0x08004e71
 8004e98:	08004e71 	.word	0x08004e71
 8004e9c:	08004e71 	.word	0x08004e71
 8004ea0:	08004ef5 	.word	0x08004ef5
 8004ea4:	08004e71 	.word	0x08004e71
 8004ea8:	08004e71 	.word	0x08004e71
 8004eac:	08004e71 	.word	0x08004e71
 8004eb0:	08004e71 	.word	0x08004e71
 8004eb4:	08004ff5 	.word	0x08004ff5
 8004eb8:	08004f1f 	.word	0x08004f1f
 8004ebc:	08004faf 	.word	0x08004faf
 8004ec0:	08004e71 	.word	0x08004e71
 8004ec4:	08004e71 	.word	0x08004e71
 8004ec8:	08005017 	.word	0x08005017
 8004ecc:	08004e71 	.word	0x08004e71
 8004ed0:	08004f1f 	.word	0x08004f1f
 8004ed4:	08004e71 	.word	0x08004e71
 8004ed8:	08004e71 	.word	0x08004e71
 8004edc:	08004fb7 	.word	0x08004fb7
 8004ee0:	6833      	ldr	r3, [r6, #0]
 8004ee2:	1d1a      	adds	r2, r3, #4
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	6032      	str	r2, [r6, #0]
 8004ee8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004eec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e09d      	b.n	8005030 <_printf_i+0x1e8>
 8004ef4:	6833      	ldr	r3, [r6, #0]
 8004ef6:	6820      	ldr	r0, [r4, #0]
 8004ef8:	1d19      	adds	r1, r3, #4
 8004efa:	6031      	str	r1, [r6, #0]
 8004efc:	0606      	lsls	r6, r0, #24
 8004efe:	d501      	bpl.n	8004f04 <_printf_i+0xbc>
 8004f00:	681d      	ldr	r5, [r3, #0]
 8004f02:	e003      	b.n	8004f0c <_printf_i+0xc4>
 8004f04:	0645      	lsls	r5, r0, #25
 8004f06:	d5fb      	bpl.n	8004f00 <_printf_i+0xb8>
 8004f08:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004f0c:	2d00      	cmp	r5, #0
 8004f0e:	da03      	bge.n	8004f18 <_printf_i+0xd0>
 8004f10:	232d      	movs	r3, #45	@ 0x2d
 8004f12:	426d      	negs	r5, r5
 8004f14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f18:	4859      	ldr	r0, [pc, #356]	@ (8005080 <_printf_i+0x238>)
 8004f1a:	230a      	movs	r3, #10
 8004f1c:	e011      	b.n	8004f42 <_printf_i+0xfa>
 8004f1e:	6821      	ldr	r1, [r4, #0]
 8004f20:	6833      	ldr	r3, [r6, #0]
 8004f22:	0608      	lsls	r0, r1, #24
 8004f24:	f853 5b04 	ldr.w	r5, [r3], #4
 8004f28:	d402      	bmi.n	8004f30 <_printf_i+0xe8>
 8004f2a:	0649      	lsls	r1, r1, #25
 8004f2c:	bf48      	it	mi
 8004f2e:	b2ad      	uxthmi	r5, r5
 8004f30:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f32:	4853      	ldr	r0, [pc, #332]	@ (8005080 <_printf_i+0x238>)
 8004f34:	6033      	str	r3, [r6, #0]
 8004f36:	bf14      	ite	ne
 8004f38:	230a      	movne	r3, #10
 8004f3a:	2308      	moveq	r3, #8
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f42:	6866      	ldr	r6, [r4, #4]
 8004f44:	60a6      	str	r6, [r4, #8]
 8004f46:	2e00      	cmp	r6, #0
 8004f48:	bfa2      	ittt	ge
 8004f4a:	6821      	ldrge	r1, [r4, #0]
 8004f4c:	f021 0104 	bicge.w	r1, r1, #4
 8004f50:	6021      	strge	r1, [r4, #0]
 8004f52:	b90d      	cbnz	r5, 8004f58 <_printf_i+0x110>
 8004f54:	2e00      	cmp	r6, #0
 8004f56:	d04b      	beq.n	8004ff0 <_printf_i+0x1a8>
 8004f58:	4616      	mov	r6, r2
 8004f5a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f5e:	fb03 5711 	mls	r7, r3, r1, r5
 8004f62:	5dc7      	ldrb	r7, [r0, r7]
 8004f64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f68:	462f      	mov	r7, r5
 8004f6a:	42bb      	cmp	r3, r7
 8004f6c:	460d      	mov	r5, r1
 8004f6e:	d9f4      	bls.n	8004f5a <_printf_i+0x112>
 8004f70:	2b08      	cmp	r3, #8
 8004f72:	d10b      	bne.n	8004f8c <_printf_i+0x144>
 8004f74:	6823      	ldr	r3, [r4, #0]
 8004f76:	07df      	lsls	r7, r3, #31
 8004f78:	d508      	bpl.n	8004f8c <_printf_i+0x144>
 8004f7a:	6923      	ldr	r3, [r4, #16]
 8004f7c:	6861      	ldr	r1, [r4, #4]
 8004f7e:	4299      	cmp	r1, r3
 8004f80:	bfde      	ittt	le
 8004f82:	2330      	movle	r3, #48	@ 0x30
 8004f84:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f88:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f8c:	1b92      	subs	r2, r2, r6
 8004f8e:	6122      	str	r2, [r4, #16]
 8004f90:	f8cd a000 	str.w	sl, [sp]
 8004f94:	464b      	mov	r3, r9
 8004f96:	aa03      	add	r2, sp, #12
 8004f98:	4621      	mov	r1, r4
 8004f9a:	4640      	mov	r0, r8
 8004f9c:	f7ff fee6 	bl	8004d6c <_printf_common>
 8004fa0:	3001      	adds	r0, #1
 8004fa2:	d14a      	bne.n	800503a <_printf_i+0x1f2>
 8004fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa8:	b004      	add	sp, #16
 8004faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fae:	6823      	ldr	r3, [r4, #0]
 8004fb0:	f043 0320 	orr.w	r3, r3, #32
 8004fb4:	6023      	str	r3, [r4, #0]
 8004fb6:	4833      	ldr	r0, [pc, #204]	@ (8005084 <_printf_i+0x23c>)
 8004fb8:	2778      	movs	r7, #120	@ 0x78
 8004fba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004fbe:	6823      	ldr	r3, [r4, #0]
 8004fc0:	6831      	ldr	r1, [r6, #0]
 8004fc2:	061f      	lsls	r7, r3, #24
 8004fc4:	f851 5b04 	ldr.w	r5, [r1], #4
 8004fc8:	d402      	bmi.n	8004fd0 <_printf_i+0x188>
 8004fca:	065f      	lsls	r7, r3, #25
 8004fcc:	bf48      	it	mi
 8004fce:	b2ad      	uxthmi	r5, r5
 8004fd0:	6031      	str	r1, [r6, #0]
 8004fd2:	07d9      	lsls	r1, r3, #31
 8004fd4:	bf44      	itt	mi
 8004fd6:	f043 0320 	orrmi.w	r3, r3, #32
 8004fda:	6023      	strmi	r3, [r4, #0]
 8004fdc:	b11d      	cbz	r5, 8004fe6 <_printf_i+0x19e>
 8004fde:	2310      	movs	r3, #16
 8004fe0:	e7ac      	b.n	8004f3c <_printf_i+0xf4>
 8004fe2:	4827      	ldr	r0, [pc, #156]	@ (8005080 <_printf_i+0x238>)
 8004fe4:	e7e9      	b.n	8004fba <_printf_i+0x172>
 8004fe6:	6823      	ldr	r3, [r4, #0]
 8004fe8:	f023 0320 	bic.w	r3, r3, #32
 8004fec:	6023      	str	r3, [r4, #0]
 8004fee:	e7f6      	b.n	8004fde <_printf_i+0x196>
 8004ff0:	4616      	mov	r6, r2
 8004ff2:	e7bd      	b.n	8004f70 <_printf_i+0x128>
 8004ff4:	6833      	ldr	r3, [r6, #0]
 8004ff6:	6825      	ldr	r5, [r4, #0]
 8004ff8:	6961      	ldr	r1, [r4, #20]
 8004ffa:	1d18      	adds	r0, r3, #4
 8004ffc:	6030      	str	r0, [r6, #0]
 8004ffe:	062e      	lsls	r6, r5, #24
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	d501      	bpl.n	8005008 <_printf_i+0x1c0>
 8005004:	6019      	str	r1, [r3, #0]
 8005006:	e002      	b.n	800500e <_printf_i+0x1c6>
 8005008:	0668      	lsls	r0, r5, #25
 800500a:	d5fb      	bpl.n	8005004 <_printf_i+0x1bc>
 800500c:	8019      	strh	r1, [r3, #0]
 800500e:	2300      	movs	r3, #0
 8005010:	6123      	str	r3, [r4, #16]
 8005012:	4616      	mov	r6, r2
 8005014:	e7bc      	b.n	8004f90 <_printf_i+0x148>
 8005016:	6833      	ldr	r3, [r6, #0]
 8005018:	1d1a      	adds	r2, r3, #4
 800501a:	6032      	str	r2, [r6, #0]
 800501c:	681e      	ldr	r6, [r3, #0]
 800501e:	6862      	ldr	r2, [r4, #4]
 8005020:	2100      	movs	r1, #0
 8005022:	4630      	mov	r0, r6
 8005024:	f7fb f8dc 	bl	80001e0 <memchr>
 8005028:	b108      	cbz	r0, 800502e <_printf_i+0x1e6>
 800502a:	1b80      	subs	r0, r0, r6
 800502c:	6060      	str	r0, [r4, #4]
 800502e:	6863      	ldr	r3, [r4, #4]
 8005030:	6123      	str	r3, [r4, #16]
 8005032:	2300      	movs	r3, #0
 8005034:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005038:	e7aa      	b.n	8004f90 <_printf_i+0x148>
 800503a:	6923      	ldr	r3, [r4, #16]
 800503c:	4632      	mov	r2, r6
 800503e:	4649      	mov	r1, r9
 8005040:	4640      	mov	r0, r8
 8005042:	47d0      	blx	sl
 8005044:	3001      	adds	r0, #1
 8005046:	d0ad      	beq.n	8004fa4 <_printf_i+0x15c>
 8005048:	6823      	ldr	r3, [r4, #0]
 800504a:	079b      	lsls	r3, r3, #30
 800504c:	d413      	bmi.n	8005076 <_printf_i+0x22e>
 800504e:	68e0      	ldr	r0, [r4, #12]
 8005050:	9b03      	ldr	r3, [sp, #12]
 8005052:	4298      	cmp	r0, r3
 8005054:	bfb8      	it	lt
 8005056:	4618      	movlt	r0, r3
 8005058:	e7a6      	b.n	8004fa8 <_printf_i+0x160>
 800505a:	2301      	movs	r3, #1
 800505c:	4632      	mov	r2, r6
 800505e:	4649      	mov	r1, r9
 8005060:	4640      	mov	r0, r8
 8005062:	47d0      	blx	sl
 8005064:	3001      	adds	r0, #1
 8005066:	d09d      	beq.n	8004fa4 <_printf_i+0x15c>
 8005068:	3501      	adds	r5, #1
 800506a:	68e3      	ldr	r3, [r4, #12]
 800506c:	9903      	ldr	r1, [sp, #12]
 800506e:	1a5b      	subs	r3, r3, r1
 8005070:	42ab      	cmp	r3, r5
 8005072:	dcf2      	bgt.n	800505a <_printf_i+0x212>
 8005074:	e7eb      	b.n	800504e <_printf_i+0x206>
 8005076:	2500      	movs	r5, #0
 8005078:	f104 0619 	add.w	r6, r4, #25
 800507c:	e7f5      	b.n	800506a <_printf_i+0x222>
 800507e:	bf00      	nop
 8005080:	080051c1 	.word	0x080051c1
 8005084:	080051d2 	.word	0x080051d2

08005088 <memmove>:
 8005088:	4288      	cmp	r0, r1
 800508a:	b510      	push	{r4, lr}
 800508c:	eb01 0402 	add.w	r4, r1, r2
 8005090:	d902      	bls.n	8005098 <memmove+0x10>
 8005092:	4284      	cmp	r4, r0
 8005094:	4623      	mov	r3, r4
 8005096:	d807      	bhi.n	80050a8 <memmove+0x20>
 8005098:	1e43      	subs	r3, r0, #1
 800509a:	42a1      	cmp	r1, r4
 800509c:	d008      	beq.n	80050b0 <memmove+0x28>
 800509e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80050a6:	e7f8      	b.n	800509a <memmove+0x12>
 80050a8:	4402      	add	r2, r0
 80050aa:	4601      	mov	r1, r0
 80050ac:	428a      	cmp	r2, r1
 80050ae:	d100      	bne.n	80050b2 <memmove+0x2a>
 80050b0:	bd10      	pop	{r4, pc}
 80050b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80050b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80050ba:	e7f7      	b.n	80050ac <memmove+0x24>

080050bc <_sbrk_r>:
 80050bc:	b538      	push	{r3, r4, r5, lr}
 80050be:	4d06      	ldr	r5, [pc, #24]	@ (80050d8 <_sbrk_r+0x1c>)
 80050c0:	2300      	movs	r3, #0
 80050c2:	4604      	mov	r4, r0
 80050c4:	4608      	mov	r0, r1
 80050c6:	602b      	str	r3, [r5, #0]
 80050c8:	f7fc fbf4 	bl	80018b4 <_sbrk>
 80050cc:	1c43      	adds	r3, r0, #1
 80050ce:	d102      	bne.n	80050d6 <_sbrk_r+0x1a>
 80050d0:	682b      	ldr	r3, [r5, #0]
 80050d2:	b103      	cbz	r3, 80050d6 <_sbrk_r+0x1a>
 80050d4:	6023      	str	r3, [r4, #0]
 80050d6:	bd38      	pop	{r3, r4, r5, pc}
 80050d8:	200002dc 	.word	0x200002dc

080050dc <memcpy>:
 80050dc:	440a      	add	r2, r1
 80050de:	4291      	cmp	r1, r2
 80050e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80050e4:	d100      	bne.n	80050e8 <memcpy+0xc>
 80050e6:	4770      	bx	lr
 80050e8:	b510      	push	{r4, lr}
 80050ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050f2:	4291      	cmp	r1, r2
 80050f4:	d1f9      	bne.n	80050ea <memcpy+0xe>
 80050f6:	bd10      	pop	{r4, pc}

080050f8 <_realloc_r>:
 80050f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050fc:	4680      	mov	r8, r0
 80050fe:	4615      	mov	r5, r2
 8005100:	460c      	mov	r4, r1
 8005102:	b921      	cbnz	r1, 800510e <_realloc_r+0x16>
 8005104:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005108:	4611      	mov	r1, r2
 800510a:	f7ff bc4b 	b.w	80049a4 <_malloc_r>
 800510e:	b92a      	cbnz	r2, 800511c <_realloc_r+0x24>
 8005110:	f7ff fbdc 	bl	80048cc <_free_r>
 8005114:	2400      	movs	r4, #0
 8005116:	4620      	mov	r0, r4
 8005118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800511c:	f000 f81a 	bl	8005154 <_malloc_usable_size_r>
 8005120:	4285      	cmp	r5, r0
 8005122:	4606      	mov	r6, r0
 8005124:	d802      	bhi.n	800512c <_realloc_r+0x34>
 8005126:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800512a:	d8f4      	bhi.n	8005116 <_realloc_r+0x1e>
 800512c:	4629      	mov	r1, r5
 800512e:	4640      	mov	r0, r8
 8005130:	f7ff fc38 	bl	80049a4 <_malloc_r>
 8005134:	4607      	mov	r7, r0
 8005136:	2800      	cmp	r0, #0
 8005138:	d0ec      	beq.n	8005114 <_realloc_r+0x1c>
 800513a:	42b5      	cmp	r5, r6
 800513c:	462a      	mov	r2, r5
 800513e:	4621      	mov	r1, r4
 8005140:	bf28      	it	cs
 8005142:	4632      	movcs	r2, r6
 8005144:	f7ff ffca 	bl	80050dc <memcpy>
 8005148:	4621      	mov	r1, r4
 800514a:	4640      	mov	r0, r8
 800514c:	f7ff fbbe 	bl	80048cc <_free_r>
 8005150:	463c      	mov	r4, r7
 8005152:	e7e0      	b.n	8005116 <_realloc_r+0x1e>

08005154 <_malloc_usable_size_r>:
 8005154:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005158:	1f18      	subs	r0, r3, #4
 800515a:	2b00      	cmp	r3, #0
 800515c:	bfbc      	itt	lt
 800515e:	580b      	ldrlt	r3, [r1, r0]
 8005160:	18c0      	addlt	r0, r0, r3
 8005162:	4770      	bx	lr

08005164 <_init>:
 8005164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005166:	bf00      	nop
 8005168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800516a:	bc08      	pop	{r3}
 800516c:	469e      	mov	lr, r3
 800516e:	4770      	bx	lr

08005170 <_fini>:
 8005170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005172:	bf00      	nop
 8005174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005176:	bc08      	pop	{r3}
 8005178:	469e      	mov	lr, r3
 800517a:	4770      	bx	lr
