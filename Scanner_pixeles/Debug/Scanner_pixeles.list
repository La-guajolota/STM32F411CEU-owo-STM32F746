
Scanner_pixeles.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e0c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003fac  08003fac  00013fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004024  08004024  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004024  08004024  00014024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800402c  0800402c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800402c  0800402c  0001402c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004030  08004030  00014030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004034  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  2000005c  08004090  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08004090  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000963f  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001958  00000000  00000000  0002970e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007d8  00000000  00000000  0002b068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000600  00000000  00000000  0002b840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016baf  00000000  00000000  0002be40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a4a0  00000000  00000000  000429ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091975  00000000  00000000  0004ce8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002458  00000000  00000000  000de804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000e0c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003f94 	.word	0x08003f94

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08003f94 	.word	0x08003f94

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000592:	f000 fbe5 	bl	8000d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000596:	f000 f919 	bl	80007cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059a:	f000 f9ef 	bl	800097c <MX_GPIO_Init>
  MX_ADC1_Init();
 800059e:	f000 f971 	bl	8000884 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80005a2:	f000 f9c1 	bl	8000928 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start(&hadc1);
 80005a6:	487a      	ldr	r0, [pc, #488]	; (8000790 <main+0x204>)
 80005a8:	f000 fcb4 	bl	8000f14 <HAL_ADC_Start>
  HAL_UART_Receive_IT(&huart1, &mcu_byte, 1);
 80005ac:	2201      	movs	r2, #1
 80005ae:	4979      	ldr	r1, [pc, #484]	; (8000794 <main+0x208>)
 80005b0:	4879      	ldr	r0, [pc, #484]	; (8000798 <main+0x20c>)
 80005b2:	f002 f8d0 	bl	8002756 <HAL_UART_Receive_IT>

  //CALIBRAR
  for (int i = 0; i < 10; ++i) {
 80005b6:	2300      	movs	r3, #0
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	e020      	b.n	80005fe <main+0x72>
		  HAL_GPIO_TogglePin(led_user_GPIO_Port, led_user_Pin);
 80005bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c0:	4876      	ldr	r0, [pc, #472]	; (800079c <main+0x210>)
 80005c2:	f001 fb7a 	bl	8001cba <HAL_GPIO_TogglePin>
		  HAL_Delay(250);
 80005c6:	20fa      	movs	r0, #250	; 0xfa
 80005c8:	f000 fc3c 	bl	8000e44 <HAL_Delay>

		  HAL_ADC_Start(&hadc1);
 80005cc:	4870      	ldr	r0, [pc, #448]	; (8000790 <main+0x204>)
 80005ce:	f000 fca1 	bl	8000f14 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 25);//msec
 80005d2:	2119      	movs	r1, #25
 80005d4:	486e      	ldr	r0, [pc, #440]	; (8000790 <main+0x204>)
 80005d6:	f000 fd51 	bl	800107c <HAL_ADC_PollForConversion>
		  borde_blanco += (HAL_ADC_GetValue(&hadc1)/10);
 80005da:	486d      	ldr	r0, [pc, #436]	; (8000790 <main+0x204>)
 80005dc:	f000 fdd9 	bl	8001192 <HAL_ADC_GetValue>
 80005e0:	4603      	mov	r3, r0
 80005e2:	4a6f      	ldr	r2, [pc, #444]	; (80007a0 <main+0x214>)
 80005e4:	fba2 2303 	umull	r2, r3, r2, r3
 80005e8:	08db      	lsrs	r3, r3, #3
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	4b6d      	ldr	r3, [pc, #436]	; (80007a4 <main+0x218>)
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	4413      	add	r3, r2
 80005f2:	b29a      	uxth	r2, r3
 80005f4:	4b6b      	ldr	r3, [pc, #428]	; (80007a4 <main+0x218>)
 80005f6:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < 10; ++i) {
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	3301      	adds	r3, #1
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	2b09      	cmp	r3, #9
 8000602:	dddb      	ble.n	80005bc <main+0x30>
	  }

  borde_blanco += 1000;
 8000604:	4b67      	ldr	r3, [pc, #412]	; (80007a4 <main+0x218>)
 8000606:	881b      	ldrh	r3, [r3, #0]
 8000608:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800060c:	b29a      	uxth	r2, r3
 800060e:	4b65      	ldr	r3, [pc, #404]	; (80007a4 <main+0x218>)
 8000610:	801a      	strh	r2, [r3, #0]

  borde_negro = borde_blanco + 500;
 8000612:	4b64      	ldr	r3, [pc, #400]	; (80007a4 <main+0x218>)
 8000614:	881b      	ldrh	r3, [r3, #0]
 8000616:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800061a:	b29a      	uxth	r2, r3
 800061c:	4b62      	ldr	r3, [pc, #392]	; (80007a8 <main+0x21c>)
 800061e:	801a      	strh	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  latch = 1;
 8000620:	4b62      	ldr	r3, [pc, #392]	; (80007ac <main+0x220>)
 8000622:	2201      	movs	r2, #1
 8000624:	701a      	strb	r2, [r3, #0]
	  while(latch){//Eseramos que python acbe de crear sus cosas raras
 8000626:	e018      	b.n	800065a <main+0xce>
		  HAL_GPIO_TogglePin(led_user_GPIO_Port, led_user_Pin);
 8000628:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800062c:	485b      	ldr	r0, [pc, #364]	; (800079c <main+0x210>)
 800062e:	f001 fb44 	bl	8001cba <HAL_GPIO_TogglePin>

		  //MANDA_FIN_CALABRIRACION
		  strcpy(msg,"all_ok\r\n");
 8000632:	4b5f      	ldr	r3, [pc, #380]	; (80007b0 <main+0x224>)
 8000634:	4a5f      	ldr	r2, [pc, #380]	; (80007b4 <main+0x228>)
 8000636:	ca07      	ldmia	r2, {r0, r1, r2}
 8000638:	c303      	stmia	r3!, {r0, r1}
 800063a:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 800063c:	485c      	ldr	r0, [pc, #368]	; (80007b0 <main+0x224>)
 800063e:	f7ff fdcf 	bl	80001e0 <strlen>
 8000642:	4603      	mov	r3, r0
 8000644:	b29a      	uxth	r2, r3
 8000646:	f04f 33ff 	mov.w	r3, #4294967295
 800064a:	4959      	ldr	r1, [pc, #356]	; (80007b0 <main+0x224>)
 800064c:	4852      	ldr	r0, [pc, #328]	; (8000798 <main+0x20c>)
 800064e:	f001 fff7 	bl	8002640 <HAL_UART_Transmit>
		  HAL_Delay(5000);
 8000652:	f241 3088 	movw	r0, #5000	; 0x1388
 8000656:	f000 fbf5 	bl	8000e44 <HAL_Delay>
	  while(latch){//Eseramos que python acbe de crear sus cosas raras
 800065a:	4b54      	ldr	r3, [pc, #336]	; (80007ac <main+0x220>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d1e2      	bne.n	8000628 <main+0x9c>
	  }

	  //ESCANEO
	  	  //scaneo horizontal
	  	  //scaneo sig
	  latch = 1;
 8000662:	4b52      	ldr	r3, [pc, #328]	; (80007ac <main+0x220>)
 8000664:	2201      	movs	r2, #1
 8000666:	701a      	strb	r2, [r3, #0]
	  while(latch){
 8000668:	e08b      	b.n	8000782 <main+0x1f6>

		  if (!HAL_GPIO_ReadPin(scan_GPIO_Port, scan_Pin)) { //horizontal
 800066a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800066e:	4852      	ldr	r0, [pc, #328]	; (80007b8 <main+0x22c>)
 8000670:	f001 faf2 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d137      	bne.n	80006ea <main+0x15e>
			  HAL_GPIO_WritePin(led_user_GPIO_Port, led_user_Pin, 0);
 800067a:	2200      	movs	r2, #0
 800067c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000680:	4846      	ldr	r0, [pc, #280]	; (800079c <main+0x210>)
 8000682:	f001 fb01 	bl	8001c88 <HAL_GPIO_WritePin>
			  HAL_Delay(250);
 8000686:	20fa      	movs	r0, #250	; 0xfa
 8000688:	f000 fbdc 	bl	8000e44 <HAL_Delay>

			  //Sensamos
			  HAL_ADC_Start(&hadc1);
 800068c:	4840      	ldr	r0, [pc, #256]	; (8000790 <main+0x204>)
 800068e:	f000 fc41 	bl	8000f14 <HAL_ADC_Start>
			  HAL_ADC_PollForConversion(&hadc1, 25);//msec
 8000692:	2119      	movs	r1, #25
 8000694:	483e      	ldr	r0, [pc, #248]	; (8000790 <main+0x204>)
 8000696:	f000 fcf1 	bl	800107c <HAL_ADC_PollForConversion>
			  adc_lec = HAL_ADC_GetValue(&hadc1);
 800069a:	483d      	ldr	r0, [pc, #244]	; (8000790 <main+0x204>)
 800069c:	f000 fd79 	bl	8001192 <HAL_ADC_GetValue>
 80006a0:	4603      	mov	r3, r0
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	4b45      	ldr	r3, [pc, #276]	; (80007bc <main+0x230>)
 80006a6:	801a      	strh	r2, [r3, #0]

			  if (adc_lec > borde_negro){
 80006a8:	4b44      	ldr	r3, [pc, #272]	; (80007bc <main+0x230>)
 80006aa:	881a      	ldrh	r2, [r3, #0]
 80006ac:	4b3e      	ldr	r3, [pc, #248]	; (80007a8 <main+0x21c>)
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d904      	bls.n	80006be <main+0x132>
				  sprintf(msg,"%dh    \r\n",1);
 80006b4:	2201      	movs	r2, #1
 80006b6:	4942      	ldr	r1, [pc, #264]	; (80007c0 <main+0x234>)
 80006b8:	483d      	ldr	r0, [pc, #244]	; (80007b0 <main+0x224>)
 80006ba:	f002 ffc7 	bl	800364c <siprintf>
			  }
			  if(adc_lec < borde_blanco){
 80006be:	4b3f      	ldr	r3, [pc, #252]	; (80007bc <main+0x230>)
 80006c0:	881a      	ldrh	r2, [r3, #0]
 80006c2:	4b38      	ldr	r3, [pc, #224]	; (80007a4 <main+0x218>)
 80006c4:	881b      	ldrh	r3, [r3, #0]
 80006c6:	429a      	cmp	r2, r3
 80006c8:	d204      	bcs.n	80006d4 <main+0x148>
				  sprintf(msg,"%dh    \r\n",0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	493c      	ldr	r1, [pc, #240]	; (80007c0 <main+0x234>)
 80006ce:	4838      	ldr	r0, [pc, #224]	; (80007b0 <main+0x224>)
 80006d0:	f002 ffbc 	bl	800364c <siprintf>
			  }

			  //Mandamos sensado
			  HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80006d4:	4836      	ldr	r0, [pc, #216]	; (80007b0 <main+0x224>)
 80006d6:	f7ff fd83 	bl	80001e0 <strlen>
 80006da:	4603      	mov	r3, r0
 80006dc:	b29a      	uxth	r2, r3
 80006de:	f04f 33ff 	mov.w	r3, #4294967295
 80006e2:	4933      	ldr	r1, [pc, #204]	; (80007b0 <main+0x224>)
 80006e4:	482c      	ldr	r0, [pc, #176]	; (8000798 <main+0x20c>)
 80006e6:	f001 ffab 	bl	8002640 <HAL_UART_Transmit>
		  }

		  if (!HAL_GPIO_ReadPin(next_line_GPIO_Port, next_line_Pin)) { //salto vertical
 80006ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ee:	4832      	ldr	r0, [pc, #200]	; (80007b8 <main+0x22c>)
 80006f0:	f001 fab2 	bl	8001c58 <HAL_GPIO_ReadPin>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d11d      	bne.n	8000736 <main+0x1aa>
			  HAL_GPIO_WritePin(led_user_GPIO_Port, led_user_Pin, 0);
 80006fa:	2200      	movs	r2, #0
 80006fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000700:	4826      	ldr	r0, [pc, #152]	; (800079c <main+0x210>)
 8000702:	f001 fac1 	bl	8001c88 <HAL_GPIO_WritePin>
			  HAL_Delay(250);
 8000706:	20fa      	movs	r0, #250	; 0xfa
 8000708:	f000 fb9c 	bl	8000e44 <HAL_Delay>

			  strcpy(msg,"v   \r\n");
 800070c:	4b28      	ldr	r3, [pc, #160]	; (80007b0 <main+0x224>)
 800070e:	4a2d      	ldr	r2, [pc, #180]	; (80007c4 <main+0x238>)
 8000710:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000714:	6018      	str	r0, [r3, #0]
 8000716:	3304      	adds	r3, #4
 8000718:	8019      	strh	r1, [r3, #0]
 800071a:	3302      	adds	r3, #2
 800071c:	0c0a      	lsrs	r2, r1, #16
 800071e:	701a      	strb	r2, [r3, #0]

			  //Mandamos sensado
			  HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000720:	4823      	ldr	r0, [pc, #140]	; (80007b0 <main+0x224>)
 8000722:	f7ff fd5d 	bl	80001e0 <strlen>
 8000726:	4603      	mov	r3, r0
 8000728:	b29a      	uxth	r2, r3
 800072a:	f04f 33ff 	mov.w	r3, #4294967295
 800072e:	4920      	ldr	r1, [pc, #128]	; (80007b0 <main+0x224>)
 8000730:	4819      	ldr	r0, [pc, #100]	; (8000798 <main+0x20c>)
 8000732:	f001 ff85 	bl	8002640 <HAL_UART_Transmit>
		  }

		  if (!HAL_GPIO_ReadPin(fin_scan_GPIO_Port, fin_scan_Pin)) { //fin de la sesion
 8000736:	2102      	movs	r1, #2
 8000738:	481f      	ldr	r0, [pc, #124]	; (80007b8 <main+0x22c>)
 800073a:	f001 fa8d 	bl	8001c58 <HAL_GPIO_ReadPin>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d118      	bne.n	8000776 <main+0x1ea>
			  HAL_GPIO_WritePin(led_user_GPIO_Port, led_user_Pin, 0);
 8000744:	2200      	movs	r2, #0
 8000746:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800074a:	4814      	ldr	r0, [pc, #80]	; (800079c <main+0x210>)
 800074c:	f001 fa9c 	bl	8001c88 <HAL_GPIO_WritePin>
			  HAL_Delay(250);
 8000750:	20fa      	movs	r0, #250	; 0xfa
 8000752:	f000 fb77 	bl	8000e44 <HAL_Delay>

			  //Mandamos sensado
			  strcpy(msg,"fin   \r\n");
 8000756:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <main+0x224>)
 8000758:	4a1b      	ldr	r2, [pc, #108]	; (80007c8 <main+0x23c>)
 800075a:	ca07      	ldmia	r2, {r0, r1, r2}
 800075c:	c303      	stmia	r3!, {r0, r1}
 800075e:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000760:	4813      	ldr	r0, [pc, #76]	; (80007b0 <main+0x224>)
 8000762:	f7ff fd3d 	bl	80001e0 <strlen>
 8000766:	4603      	mov	r3, r0
 8000768:	b29a      	uxth	r2, r3
 800076a:	f04f 33ff 	mov.w	r3, #4294967295
 800076e:	4910      	ldr	r1, [pc, #64]	; (80007b0 <main+0x224>)
 8000770:	4809      	ldr	r0, [pc, #36]	; (8000798 <main+0x20c>)
 8000772:	f001 ff65 	bl	8002640 <HAL_UART_Transmit>
		  }

		  HAL_GPIO_WritePin(led_user_GPIO_Port, led_user_Pin, 1);
 8000776:	2201      	movs	r2, #1
 8000778:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800077c:	4807      	ldr	r0, [pc, #28]	; (800079c <main+0x210>)
 800077e:	f001 fa83 	bl	8001c88 <HAL_GPIO_WritePin>
	  while(latch){
 8000782:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <main+0x220>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	f47f af6f 	bne.w	800066a <main+0xde>
	  latch = 1;
 800078c:	e748      	b.n	8000620 <main+0x94>
 800078e:	bf00      	nop
 8000790:	20000078 	.word	0x20000078
 8000794:	20000119 	.word	0x20000119
 8000798:	200000c0 	.word	0x200000c0
 800079c:	40020800 	.word	0x40020800
 80007a0:	cccccccd 	.word	0xcccccccd
 80007a4:	2000010e 	.word	0x2000010e
 80007a8:	2000010c 	.word	0x2000010c
 80007ac:	20000108 	.word	0x20000108
 80007b0:	20000110 	.word	0x20000110
 80007b4:	08003fac 	.word	0x08003fac
 80007b8:	40020400 	.word	0x40020400
 80007bc:	2000010a 	.word	0x2000010a
 80007c0:	08003fb8 	.word	0x08003fb8
 80007c4:	08003fc4 	.word	0x08003fc4
 80007c8:	08003fcc 	.word	0x08003fcc

080007cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b094      	sub	sp, #80	; 0x50
 80007d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d2:	f107 0320 	add.w	r3, r7, #32
 80007d6:	2230      	movs	r2, #48	; 0x30
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f002 ff56 	bl	800368c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e0:	f107 030c 	add.w	r3, r7, #12
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f0:	2300      	movs	r3, #0
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	4b21      	ldr	r3, [pc, #132]	; (800087c <SystemClock_Config+0xb0>)
 80007f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f8:	4a20      	ldr	r2, [pc, #128]	; (800087c <SystemClock_Config+0xb0>)
 80007fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000800:	4b1e      	ldr	r3, [pc, #120]	; (800087c <SystemClock_Config+0xb0>)
 8000802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800080c:	2300      	movs	r3, #0
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	4b1b      	ldr	r3, [pc, #108]	; (8000880 <SystemClock_Config+0xb4>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a1a      	ldr	r2, [pc, #104]	; (8000880 <SystemClock_Config+0xb4>)
 8000816:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800081a:	6013      	str	r3, [r2, #0]
 800081c:	4b18      	ldr	r3, [pc, #96]	; (8000880 <SystemClock_Config+0xb4>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000828:	2301      	movs	r3, #1
 800082a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800082c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000832:	2300      	movs	r3, #0
 8000834:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000836:	f107 0320 	add.w	r3, r7, #32
 800083a:	4618      	mov	r0, r3
 800083c:	f001 fa58 	bl	8001cf0 <HAL_RCC_OscConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000846:	f000 f923 	bl	8000a90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084a:	230f      	movs	r3, #15
 800084c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800084e:	2301      	movs	r3, #1
 8000850:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800085e:	f107 030c 	add.w	r3, r7, #12
 8000862:	2100      	movs	r1, #0
 8000864:	4618      	mov	r0, r3
 8000866:	f001 fcbb 	bl	80021e0 <HAL_RCC_ClockConfig>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000870:	f000 f90e 	bl	8000a90 <Error_Handler>
  }
}
 8000874:	bf00      	nop
 8000876:	3750      	adds	r7, #80	; 0x50
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40023800 	.word	0x40023800
 8000880:	40007000 	.word	0x40007000

08000884 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800088a:	463b      	mov	r3, r7
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000896:	4b21      	ldr	r3, [pc, #132]	; (800091c <MX_ADC1_Init+0x98>)
 8000898:	4a21      	ldr	r2, [pc, #132]	; (8000920 <MX_ADC1_Init+0x9c>)
 800089a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800089c:	4b1f      	ldr	r3, [pc, #124]	; (800091c <MX_ADC1_Init+0x98>)
 800089e:	2200      	movs	r2, #0
 80008a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008a2:	4b1e      	ldr	r3, [pc, #120]	; (800091c <MX_ADC1_Init+0x98>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80008a8:	4b1c      	ldr	r3, [pc, #112]	; (800091c <MX_ADC1_Init+0x98>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008ae:	4b1b      	ldr	r3, [pc, #108]	; (800091c <MX_ADC1_Init+0x98>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008b4:	4b19      	ldr	r3, [pc, #100]	; (800091c <MX_ADC1_Init+0x98>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008bc:	4b17      	ldr	r3, [pc, #92]	; (800091c <MX_ADC1_Init+0x98>)
 80008be:	2200      	movs	r2, #0
 80008c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008c2:	4b16      	ldr	r3, [pc, #88]	; (800091c <MX_ADC1_Init+0x98>)
 80008c4:	4a17      	ldr	r2, [pc, #92]	; (8000924 <MX_ADC1_Init+0xa0>)
 80008c6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008c8:	4b14      	ldr	r3, [pc, #80]	; (800091c <MX_ADC1_Init+0x98>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008ce:	4b13      	ldr	r3, [pc, #76]	; (800091c <MX_ADC1_Init+0x98>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008d4:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_ADC1_Init+0x98>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_ADC1_Init+0x98>)
 80008de:	2201      	movs	r2, #1
 80008e0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008e2:	480e      	ldr	r0, [pc, #56]	; (800091c <MX_ADC1_Init+0x98>)
 80008e4:	f000 fad2 	bl	8000e8c <HAL_ADC_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80008ee:	f000 f8cf 	bl	8000a90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008f2:	2301      	movs	r3, #1
 80008f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80008fa:	2307      	movs	r3, #7
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008fe:	463b      	mov	r3, r7
 8000900:	4619      	mov	r1, r3
 8000902:	4806      	ldr	r0, [pc, #24]	; (800091c <MX_ADC1_Init+0x98>)
 8000904:	f000 fc52 	bl	80011ac <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800090e:	f000 f8bf 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000078 	.word	0x20000078
 8000920:	40012000 	.word	0x40012000
 8000924:	0f000001 	.word	0x0f000001

08000928 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800092c:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_USART1_UART_Init+0x4c>)
 800092e:	4a12      	ldr	r2, [pc, #72]	; (8000978 <MX_USART1_UART_Init+0x50>)
 8000930:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <MX_USART1_UART_Init+0x4c>)
 8000934:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000938:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <MX_USART1_UART_Init+0x4c>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <MX_USART1_UART_Init+0x4c>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <MX_USART1_UART_Init+0x4c>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800094c:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_USART1_UART_Init+0x4c>)
 800094e:	220c      	movs	r2, #12
 8000950:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <MX_USART1_UART_Init+0x4c>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <MX_USART1_UART_Init+0x4c>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_USART1_UART_Init+0x4c>)
 8000960:	f001 fe1e 	bl	80025a0 <HAL_UART_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800096a:	f000 f891 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	200000c0 	.word	0x200000c0
 8000978:	40011000 	.word	0x40011000

0800097c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	; 0x28
 8000980:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
 8000990:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
 8000996:	4b2e      	ldr	r3, [pc, #184]	; (8000a50 <MX_GPIO_Init+0xd4>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a2d      	ldr	r2, [pc, #180]	; (8000a50 <MX_GPIO_Init+0xd4>)
 800099c:	f043 0304 	orr.w	r3, r3, #4
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b2b      	ldr	r3, [pc, #172]	; (8000a50 <MX_GPIO_Init+0xd4>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0304 	and.w	r3, r3, #4
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	4b27      	ldr	r3, [pc, #156]	; (8000a50 <MX_GPIO_Init+0xd4>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a26      	ldr	r2, [pc, #152]	; (8000a50 <MX_GPIO_Init+0xd4>)
 80009b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b24      	ldr	r3, [pc, #144]	; (8000a50 <MX_GPIO_Init+0xd4>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	4b20      	ldr	r3, [pc, #128]	; (8000a50 <MX_GPIO_Init+0xd4>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a1f      	ldr	r2, [pc, #124]	; (8000a50 <MX_GPIO_Init+0xd4>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b1d      	ldr	r3, [pc, #116]	; (8000a50 <MX_GPIO_Init+0xd4>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	4b19      	ldr	r3, [pc, #100]	; (8000a50 <MX_GPIO_Init+0xd4>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a18      	ldr	r2, [pc, #96]	; (8000a50 <MX_GPIO_Init+0xd4>)
 80009f0:	f043 0302 	orr.w	r3, r3, #2
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b16      	ldr	r3, [pc, #88]	; (8000a50 <MX_GPIO_Init+0xd4>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_user_GPIO_Port, led_user_Pin, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a08:	4812      	ldr	r0, [pc, #72]	; (8000a54 <MX_GPIO_Init+0xd8>)
 8000a0a:	f001 f93d 	bl	8001c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_user_Pin */
  GPIO_InitStruct.Pin = led_user_Pin;
 8000a0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a14:	2311      	movs	r3, #17
 8000a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_user_GPIO_Port, &GPIO_InitStruct);
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4619      	mov	r1, r3
 8000a26:	480b      	ldr	r0, [pc, #44]	; (8000a54 <MX_GPIO_Init+0xd8>)
 8000a28:	f000 ff92 	bl	8001950 <HAL_GPIO_Init>

  /*Configure GPIO pins : fin_scan_Pin scan_Pin next_line_Pin */
  GPIO_InitStruct.Pin = fin_scan_Pin|scan_Pin|next_line_Pin;
 8000a2c:	f241 4302 	movw	r3, #5122	; 0x1402
 8000a30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a36:	2301      	movs	r3, #1
 8000a38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_GPIO_Init+0xdc>)
 8000a42:	f000 ff85 	bl	8001950 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a46:	bf00      	nop
 8000a48:	3728      	adds	r7, #40	; 0x28
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40020800 	.word	0x40020800
 8000a58:	40020400 	.word	0x40020400

08000a5c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

//INTERRUPCION AL RECIBIR INFO
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart1, &mcu_byte, 1, 250); //ECO

	if (mcu_byte == 'n') {
 8000a64:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <HAL_UART_RxCpltCallback+0x28>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b6e      	cmp	r3, #110	; 0x6e
 8000a6a:	d102      	bne.n	8000a72 <HAL_UART_RxCpltCallback+0x16>
		latch = 0;//salimos del estado precente
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <HAL_UART_RxCpltCallback+0x2c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Receive_IT(&huart1, &mcu_byte, 1); //Levantamos la bandera
 8000a72:	2201      	movs	r2, #1
 8000a74:	4903      	ldr	r1, [pc, #12]	; (8000a84 <HAL_UART_RxCpltCallback+0x28>)
 8000a76:	4805      	ldr	r0, [pc, #20]	; (8000a8c <HAL_UART_RxCpltCallback+0x30>)
 8000a78:	f001 fe6d 	bl	8002756 <HAL_UART_Receive_IT>
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000119 	.word	0x20000119
 8000a88:	20000108 	.word	0x20000108
 8000a8c:	200000c0 	.word	0x200000c0

08000a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a94:	b672      	cpsid	i
}
 8000a96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <Error_Handler+0x8>
	...

08000a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <HAL_MspInit+0x4c>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aaa:	4a0f      	ldr	r2, [pc, #60]	; (8000ae8 <HAL_MspInit+0x4c>)
 8000aac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ab2:	4b0d      	ldr	r3, [pc, #52]	; (8000ae8 <HAL_MspInit+0x4c>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	603b      	str	r3, [r7, #0]
 8000ac2:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <HAL_MspInit+0x4c>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	4a08      	ldr	r2, [pc, #32]	; (8000ae8 <HAL_MspInit+0x4c>)
 8000ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000acc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_MspInit+0x4c>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	40023800 	.word	0x40023800

08000aec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	; 0x28
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a17      	ldr	r2, [pc, #92]	; (8000b68 <HAL_ADC_MspInit+0x7c>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d127      	bne.n	8000b5e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	4b16      	ldr	r3, [pc, #88]	; (8000b6c <HAL_ADC_MspInit+0x80>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b16:	4a15      	ldr	r2, [pc, #84]	; (8000b6c <HAL_ADC_MspInit+0x80>)
 8000b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1e:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <HAL_ADC_MspInit+0x80>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <HAL_ADC_MspInit+0x80>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a0e      	ldr	r2, [pc, #56]	; (8000b6c <HAL_ADC_MspInit+0x80>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <HAL_ADC_MspInit+0x80>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b46:	2302      	movs	r3, #2
 8000b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	4805      	ldr	r0, [pc, #20]	; (8000b70 <HAL_ADC_MspInit+0x84>)
 8000b5a:	f000 fef9 	bl	8001950 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b5e:	bf00      	nop
 8000b60:	3728      	adds	r7, #40	; 0x28
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40012000 	.word	0x40012000
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40020000 	.word	0x40020000

08000b74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	; 0x28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a1d      	ldr	r2, [pc, #116]	; (8000c08 <HAL_UART_MspInit+0x94>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d134      	bne.n	8000c00 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	4b1c      	ldr	r3, [pc, #112]	; (8000c0c <HAL_UART_MspInit+0x98>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	4a1b      	ldr	r2, [pc, #108]	; (8000c0c <HAL_UART_MspInit+0x98>)
 8000ba0:	f043 0310 	orr.w	r3, r3, #16
 8000ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ba6:	4b19      	ldr	r3, [pc, #100]	; (8000c0c <HAL_UART_MspInit+0x98>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000baa:	f003 0310 	and.w	r3, r3, #16
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <HAL_UART_MspInit+0x98>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a14      	ldr	r2, [pc, #80]	; (8000c0c <HAL_UART_MspInit+0x98>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <HAL_UART_MspInit+0x98>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bce:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000be0:	2307      	movs	r3, #7
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	4619      	mov	r1, r3
 8000bea:	4809      	ldr	r0, [pc, #36]	; (8000c10 <HAL_UART_MspInit+0x9c>)
 8000bec:	f000 feb0 	bl	8001950 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	2025      	movs	r0, #37	; 0x25
 8000bf6:	f000 fde2 	bl	80017be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bfa:	2025      	movs	r0, #37	; 0x25
 8000bfc:	f000 fdfb 	bl	80017f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c00:	bf00      	nop
 8000c02:	3728      	adds	r7, #40	; 0x28
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40011000 	.word	0x40011000
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40020000 	.word	0x40020000

08000c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c18:	e7fe      	b.n	8000c18 <NMI_Handler+0x4>

08000c1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1e:	e7fe      	b.n	8000c1e <HardFault_Handler+0x4>

08000c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <MemManage_Handler+0x4>

08000c26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <BusFault_Handler+0x4>

08000c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <UsageFault_Handler+0x4>

08000c32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr

08000c4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c60:	f000 f8d0 	bl	8000e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c6c:	4802      	ldr	r0, [pc, #8]	; (8000c78 <USART1_IRQHandler+0x10>)
 8000c6e:	f001 fd97 	bl	80027a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200000c0 	.word	0x200000c0

08000c7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c84:	4a14      	ldr	r2, [pc, #80]	; (8000cd8 <_sbrk+0x5c>)
 8000c86:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <_sbrk+0x60>)
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c90:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <_sbrk+0x64>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d102      	bne.n	8000c9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <_sbrk+0x64>)
 8000c9a:	4a12      	ldr	r2, [pc, #72]	; (8000ce4 <_sbrk+0x68>)
 8000c9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c9e:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <_sbrk+0x64>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d207      	bcs.n	8000cbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cac:	f002 fcf6 	bl	800369c <__errno>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	220c      	movs	r2, #12
 8000cb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cba:	e009      	b.n	8000cd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cbc:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <_sbrk+0x64>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cc2:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <_sbrk+0x64>)
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4413      	add	r3, r2
 8000cca:	4a05      	ldr	r2, [pc, #20]	; (8000ce0 <_sbrk+0x64>)
 8000ccc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cce:	68fb      	ldr	r3, [r7, #12]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3718      	adds	r7, #24
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20020000 	.word	0x20020000
 8000cdc:	00000400 	.word	0x00000400
 8000ce0:	2000011c 	.word	0x2000011c
 8000ce4:	20000270 	.word	0x20000270

08000ce8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <SystemInit+0x20>)
 8000cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cf2:	4a05      	ldr	r2, [pc, #20]	; (8000d08 <SystemInit+0x20>)
 8000cf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d44 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d10:	f7ff ffea 	bl	8000ce8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d14:	480c      	ldr	r0, [pc, #48]	; (8000d48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d16:	490d      	ldr	r1, [pc, #52]	; (8000d4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d18:	4a0d      	ldr	r2, [pc, #52]	; (8000d50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d1c:	e002      	b.n	8000d24 <LoopCopyDataInit>

08000d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d22:	3304      	adds	r3, #4

08000d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d28:	d3f9      	bcc.n	8000d1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d2c:	4c0a      	ldr	r4, [pc, #40]	; (8000d58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d30:	e001      	b.n	8000d36 <LoopFillZerobss>

08000d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d34:	3204      	adds	r2, #4

08000d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d38:	d3fb      	bcc.n	8000d32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d3a:	f002 fcb5 	bl	80036a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d3e:	f7ff fc25 	bl	800058c <main>
  bx  lr    
 8000d42:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d4c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d50:	08004034 	.word	0x08004034
  ldr r2, =_sbss
 8000d54:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d58:	2000026c 	.word	0x2000026c

08000d5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d5c:	e7fe      	b.n	8000d5c <ADC_IRQHandler>
	...

08000d60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d64:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <HAL_Init+0x40>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a0d      	ldr	r2, [pc, #52]	; (8000da0 <HAL_Init+0x40>)
 8000d6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d70:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <HAL_Init+0x40>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a0a      	ldr	r2, [pc, #40]	; (8000da0 <HAL_Init+0x40>)
 8000d76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d7c:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <HAL_Init+0x40>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a07      	ldr	r2, [pc, #28]	; (8000da0 <HAL_Init+0x40>)
 8000d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d88:	2003      	movs	r0, #3
 8000d8a:	f000 fd0d 	bl	80017a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d8e:	200f      	movs	r0, #15
 8000d90:	f000 f808 	bl	8000da4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d94:	f7ff fe82 	bl	8000a9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40023c00 	.word	0x40023c00

08000da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dac:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <HAL_InitTick+0x54>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <HAL_InitTick+0x58>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	4619      	mov	r1, r3
 8000db6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f000 fd25 	bl	8001812 <HAL_SYSTICK_Config>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e00e      	b.n	8000df0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2b0f      	cmp	r3, #15
 8000dd6:	d80a      	bhi.n	8000dee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8000de0:	f000 fced 	bl	80017be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de4:	4a06      	ldr	r2, [pc, #24]	; (8000e00 <HAL_InitTick+0x5c>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dea:	2300      	movs	r3, #0
 8000dec:	e000      	b.n	8000df0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000000 	.word	0x20000000
 8000dfc:	20000008 	.word	0x20000008
 8000e00:	20000004 	.word	0x20000004

08000e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_IncTick+0x20>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_IncTick+0x24>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4413      	add	r3, r2
 8000e14:	4a04      	ldr	r2, [pc, #16]	; (8000e28 <HAL_IncTick+0x24>)
 8000e16:	6013      	str	r3, [r2, #0]
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	20000008 	.word	0x20000008
 8000e28:	20000120 	.word	0x20000120

08000e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e30:	4b03      	ldr	r3, [pc, #12]	; (8000e40 <HAL_GetTick+0x14>)
 8000e32:	681b      	ldr	r3, [r3, #0]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	20000120 	.word	0x20000120

08000e44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e4c:	f7ff ffee 	bl	8000e2c <HAL_GetTick>
 8000e50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e5c:	d005      	beq.n	8000e6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <HAL_Delay+0x44>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	461a      	mov	r2, r3
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	4413      	add	r3, r2
 8000e68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e6a:	bf00      	nop
 8000e6c:	f7ff ffde 	bl	8000e2c <HAL_GetTick>
 8000e70:	4602      	mov	r2, r0
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d8f7      	bhi.n	8000e6c <HAL_Delay+0x28>
  {
  }
}
 8000e7c:	bf00      	nop
 8000e7e:	bf00      	nop
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000008 	.word	0x20000008

08000e8c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e94:	2300      	movs	r3, #0
 8000e96:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d101      	bne.n	8000ea2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e033      	b.n	8000f0a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d109      	bne.n	8000ebe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f7ff fe1e 	bl	8000aec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	f003 0310 	and.w	r3, r3, #16
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d118      	bne.n	8000efc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ed2:	f023 0302 	bic.w	r3, r3, #2
 8000ed6:	f043 0202 	orr.w	r2, r3, #2
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f000 fa96 	bl	8001410 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	f023 0303 	bic.w	r3, r3, #3
 8000ef2:	f043 0201 	orr.w	r2, r3, #1
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	641a      	str	r2, [r3, #64]	; 0x40
 8000efa:	e001      	b.n	8000f00 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2200      	movs	r2, #0
 8000f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d101      	bne.n	8000f2e <HAL_ADC_Start+0x1a>
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	e097      	b.n	800105e <HAL_ADC_Start+0x14a>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2201      	movs	r2, #1
 8000f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	f003 0301 	and.w	r3, r3, #1
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d018      	beq.n	8000f76 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	689a      	ldr	r2, [r3, #8]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f042 0201 	orr.w	r2, r2, #1
 8000f52:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f54:	4b45      	ldr	r3, [pc, #276]	; (800106c <HAL_ADC_Start+0x158>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a45      	ldr	r2, [pc, #276]	; (8001070 <HAL_ADC_Start+0x15c>)
 8000f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f5e:	0c9a      	lsrs	r2, r3, #18
 8000f60:	4613      	mov	r3, r2
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	4413      	add	r3, r2
 8000f66:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000f68:	e002      	b.n	8000f70 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d1f9      	bne.n	8000f6a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d15f      	bne.n	8001044 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f88:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f8c:	f023 0301 	bic.w	r3, r3, #1
 8000f90:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d007      	beq.n	8000fb6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000fc2:	d106      	bne.n	8000fd2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc8:	f023 0206 	bic.w	r2, r3, #6
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	645a      	str	r2, [r3, #68]	; 0x44
 8000fd0:	e002      	b.n	8000fd8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000fe0:	4b24      	ldr	r3, [pc, #144]	; (8001074 <HAL_ADC_Start+0x160>)
 8000fe2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000fec:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f003 031f 	and.w	r3, r3, #31
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d10f      	bne.n	800101a <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d129      	bne.n	800105c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	689a      	ldr	r2, [r3, #8]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	e020      	b.n	800105c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a16      	ldr	r2, [pc, #88]	; (8001078 <HAL_ADC_Start+0x164>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d11b      	bne.n	800105c <HAL_ADC_Start+0x148>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d114      	bne.n	800105c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	689a      	ldr	r2, [r3, #8]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	e00b      	b.n	800105c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001048:	f043 0210 	orr.w	r2, r3, #16
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001054:	f043 0201 	orr.w	r2, r3, #1
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	20000000 	.word	0x20000000
 8001070:	431bde83 	.word	0x431bde83
 8001074:	40012300 	.word	0x40012300
 8001078:	40012000 	.word	0x40012000

0800107c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001098:	d113      	bne.n	80010c2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80010a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010a8:	d10b      	bne.n	80010c2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	f043 0220 	orr.w	r2, r3, #32
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e063      	b.n	800118a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80010c2:	f7ff feb3 	bl	8000e2c <HAL_GetTick>
 80010c6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80010c8:	e021      	b.n	800110e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d0:	d01d      	beq.n	800110e <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d007      	beq.n	80010e8 <HAL_ADC_PollForConversion+0x6c>
 80010d8:	f7ff fea8 	bl	8000e2c <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	683a      	ldr	r2, [r7, #0]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d212      	bcs.n	800110e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d00b      	beq.n	800110e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	f043 0204 	orr.w	r2, r3, #4
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e03d      	b.n	800118a <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	2b02      	cmp	r3, #2
 800111a:	d1d6      	bne.n	80010ca <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f06f 0212 	mvn.w	r2, #18
 8001124:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d123      	bne.n	8001188 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001144:	2b00      	cmp	r3, #0
 8001146:	d11f      	bne.n	8001188 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800114e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001152:	2b00      	cmp	r3, #0
 8001154:	d006      	beq.n	8001164 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001160:	2b00      	cmp	r3, #0
 8001162:	d111      	bne.n	8001188 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001174:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d105      	bne.n	8001188 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001180:	f043 0201 	orr.w	r2, r3, #1
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001192:	b480      	push	{r7}
 8001194:	b083      	sub	sp, #12
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80011b6:	2300      	movs	r3, #0
 80011b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d101      	bne.n	80011c8 <HAL_ADC_ConfigChannel+0x1c>
 80011c4:	2302      	movs	r3, #2
 80011c6:	e113      	b.n	80013f0 <HAL_ADC_ConfigChannel+0x244>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2201      	movs	r2, #1
 80011cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b09      	cmp	r3, #9
 80011d6:	d925      	bls.n	8001224 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	68d9      	ldr	r1, [r3, #12]
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	461a      	mov	r2, r3
 80011e6:	4613      	mov	r3, r2
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	4413      	add	r3, r2
 80011ec:	3b1e      	subs	r3, #30
 80011ee:	2207      	movs	r2, #7
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43da      	mvns	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	400a      	ands	r2, r1
 80011fc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	68d9      	ldr	r1, [r3, #12]
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	b29b      	uxth	r3, r3
 800120e:	4618      	mov	r0, r3
 8001210:	4603      	mov	r3, r0
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	4403      	add	r3, r0
 8001216:	3b1e      	subs	r3, #30
 8001218:	409a      	lsls	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	430a      	orrs	r2, r1
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	e022      	b.n	800126a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	6919      	ldr	r1, [r3, #16]
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	b29b      	uxth	r3, r3
 8001230:	461a      	mov	r2, r3
 8001232:	4613      	mov	r3, r2
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	4413      	add	r3, r2
 8001238:	2207      	movs	r2, #7
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43da      	mvns	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	400a      	ands	r2, r1
 8001246:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6919      	ldr	r1, [r3, #16]
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	689a      	ldr	r2, [r3, #8]
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	b29b      	uxth	r3, r3
 8001258:	4618      	mov	r0, r3
 800125a:	4603      	mov	r3, r0
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	4403      	add	r3, r0
 8001260:	409a      	lsls	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	430a      	orrs	r2, r1
 8001268:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	2b06      	cmp	r3, #6
 8001270:	d824      	bhi.n	80012bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	4613      	mov	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	3b05      	subs	r3, #5
 8001284:	221f      	movs	r2, #31
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43da      	mvns	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	400a      	ands	r2, r1
 8001292:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	b29b      	uxth	r3, r3
 80012a0:	4618      	mov	r0, r3
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	4613      	mov	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	3b05      	subs	r3, #5
 80012ae:	fa00 f203 	lsl.w	r2, r0, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	430a      	orrs	r2, r1
 80012b8:	635a      	str	r2, [r3, #52]	; 0x34
 80012ba:	e04c      	b.n	8001356 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	2b0c      	cmp	r3, #12
 80012c2:	d824      	bhi.n	800130e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685a      	ldr	r2, [r3, #4]
 80012ce:	4613      	mov	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	3b23      	subs	r3, #35	; 0x23
 80012d6:	221f      	movs	r2, #31
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43da      	mvns	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	400a      	ands	r2, r1
 80012e4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	4618      	mov	r0, r3
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	4613      	mov	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4413      	add	r3, r2
 80012fe:	3b23      	subs	r3, #35	; 0x23
 8001300:	fa00 f203 	lsl.w	r2, r0, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	430a      	orrs	r2, r1
 800130a:	631a      	str	r2, [r3, #48]	; 0x30
 800130c:	e023      	b.n	8001356 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	4613      	mov	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	3b41      	subs	r3, #65	; 0x41
 8001320:	221f      	movs	r2, #31
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43da      	mvns	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	400a      	ands	r2, r1
 800132e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	b29b      	uxth	r3, r3
 800133c:	4618      	mov	r0, r3
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	4613      	mov	r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	4413      	add	r3, r2
 8001348:	3b41      	subs	r3, #65	; 0x41
 800134a:	fa00 f203 	lsl.w	r2, r0, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	430a      	orrs	r2, r1
 8001354:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001356:	4b29      	ldr	r3, [pc, #164]	; (80013fc <HAL_ADC_ConfigChannel+0x250>)
 8001358:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a28      	ldr	r2, [pc, #160]	; (8001400 <HAL_ADC_ConfigChannel+0x254>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d10f      	bne.n	8001384 <HAL_ADC_ConfigChannel+0x1d8>
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b12      	cmp	r3, #18
 800136a:	d10b      	bne.n	8001384 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a1d      	ldr	r2, [pc, #116]	; (8001400 <HAL_ADC_ConfigChannel+0x254>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d12b      	bne.n	80013e6 <HAL_ADC_ConfigChannel+0x23a>
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a1c      	ldr	r2, [pc, #112]	; (8001404 <HAL_ADC_ConfigChannel+0x258>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d003      	beq.n	80013a0 <HAL_ADC_ConfigChannel+0x1f4>
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b11      	cmp	r3, #17
 800139e:	d122      	bne.n	80013e6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a11      	ldr	r2, [pc, #68]	; (8001404 <HAL_ADC_ConfigChannel+0x258>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d111      	bne.n	80013e6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013c2:	4b11      	ldr	r3, [pc, #68]	; (8001408 <HAL_ADC_ConfigChannel+0x25c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a11      	ldr	r2, [pc, #68]	; (800140c <HAL_ADC_ConfigChannel+0x260>)
 80013c8:	fba2 2303 	umull	r2, r3, r2, r3
 80013cc:	0c9a      	lsrs	r2, r3, #18
 80013ce:	4613      	mov	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80013d8:	e002      	b.n	80013e0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	3b01      	subs	r3, #1
 80013de:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f9      	bne.n	80013da <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80013ee:	2300      	movs	r3, #0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	40012300 	.word	0x40012300
 8001400:	40012000 	.word	0x40012000
 8001404:	10000012 	.word	0x10000012
 8001408:	20000000 	.word	0x20000000
 800140c:	431bde83 	.word	0x431bde83

08001410 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001418:	4b79      	ldr	r3, [pc, #484]	; (8001600 <ADC_Init+0x1f0>)
 800141a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	685a      	ldr	r2, [r3, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	431a      	orrs	r2, r3
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001444:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	6859      	ldr	r1, [r3, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	021a      	lsls	r2, r3, #8
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	430a      	orrs	r2, r1
 8001458:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001468:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6859      	ldr	r1, [r3, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	430a      	orrs	r2, r1
 800147a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	689a      	ldr	r2, [r3, #8]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800148a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6899      	ldr	r1, [r3, #8]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	68da      	ldr	r2, [r3, #12]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	430a      	orrs	r2, r1
 800149c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a2:	4a58      	ldr	r2, [pc, #352]	; (8001604 <ADC_Init+0x1f4>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d022      	beq.n	80014ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	689a      	ldr	r2, [r3, #8]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6899      	ldr	r1, [r3, #8]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	430a      	orrs	r2, r1
 80014c8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	6899      	ldr	r1, [r3, #8]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	430a      	orrs	r2, r1
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	e00f      	b.n	800150e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800150c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	689a      	ldr	r2, [r3, #8]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f022 0202 	bic.w	r2, r2, #2
 800151c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6899      	ldr	r1, [r3, #8]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	7e1b      	ldrb	r3, [r3, #24]
 8001528:	005a      	lsls	r2, r3, #1
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	430a      	orrs	r2, r1
 8001530:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d01b      	beq.n	8001574 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	685a      	ldr	r2, [r3, #4]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800154a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	685a      	ldr	r2, [r3, #4]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800155a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6859      	ldr	r1, [r3, #4]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001566:	3b01      	subs	r3, #1
 8001568:	035a      	lsls	r2, r3, #13
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	430a      	orrs	r2, r1
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	e007      	b.n	8001584 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	685a      	ldr	r2, [r3, #4]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001582:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001592:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	3b01      	subs	r3, #1
 80015a0:	051a      	lsls	r2, r3, #20
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	6899      	ldr	r1, [r3, #8]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015c6:	025a      	lsls	r2, r3, #9
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	430a      	orrs	r2, r1
 80015ce:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	689a      	ldr	r2, [r3, #8]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6899      	ldr	r1, [r3, #8]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	029a      	lsls	r2, r3, #10
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	430a      	orrs	r2, r1
 80015f2:	609a      	str	r2, [r3, #8]
}
 80015f4:	bf00      	nop
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	40012300 	.word	0x40012300
 8001604:	0f000001 	.word	0x0f000001

08001608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <__NVIC_SetPriorityGrouping+0x44>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001624:	4013      	ands	r3, r2
 8001626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001630:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800163a:	4a04      	ldr	r2, [pc, #16]	; (800164c <__NVIC_SetPriorityGrouping+0x44>)
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	60d3      	str	r3, [r2, #12]
}
 8001640:	bf00      	nop
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001654:	4b04      	ldr	r3, [pc, #16]	; (8001668 <__NVIC_GetPriorityGrouping+0x18>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	0a1b      	lsrs	r3, r3, #8
 800165a:	f003 0307 	and.w	r3, r3, #7
}
 800165e:	4618      	mov	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167a:	2b00      	cmp	r3, #0
 800167c:	db0b      	blt.n	8001696 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	f003 021f 	and.w	r2, r3, #31
 8001684:	4907      	ldr	r1, [pc, #28]	; (80016a4 <__NVIC_EnableIRQ+0x38>)
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	095b      	lsrs	r3, r3, #5
 800168c:	2001      	movs	r0, #1
 800168e:	fa00 f202 	lsl.w	r2, r0, r2
 8001692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e000e100 	.word	0xe000e100

080016a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	6039      	str	r1, [r7, #0]
 80016b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	db0a      	blt.n	80016d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	490c      	ldr	r1, [pc, #48]	; (80016f4 <__NVIC_SetPriority+0x4c>)
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	0112      	lsls	r2, r2, #4
 80016c8:	b2d2      	uxtb	r2, r2
 80016ca:	440b      	add	r3, r1
 80016cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016d0:	e00a      	b.n	80016e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	4908      	ldr	r1, [pc, #32]	; (80016f8 <__NVIC_SetPriority+0x50>)
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	f003 030f 	and.w	r3, r3, #15
 80016de:	3b04      	subs	r3, #4
 80016e0:	0112      	lsls	r2, r2, #4
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	440b      	add	r3, r1
 80016e6:	761a      	strb	r2, [r3, #24]
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	e000e100 	.word	0xe000e100
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b089      	sub	sp, #36	; 0x24
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f1c3 0307 	rsb	r3, r3, #7
 8001716:	2b04      	cmp	r3, #4
 8001718:	bf28      	it	cs
 800171a:	2304      	movcs	r3, #4
 800171c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	3304      	adds	r3, #4
 8001722:	2b06      	cmp	r3, #6
 8001724:	d902      	bls.n	800172c <NVIC_EncodePriority+0x30>
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	3b03      	subs	r3, #3
 800172a:	e000      	b.n	800172e <NVIC_EncodePriority+0x32>
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001730:	f04f 32ff 	mov.w	r2, #4294967295
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43da      	mvns	r2, r3
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	401a      	ands	r2, r3
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001744:	f04f 31ff 	mov.w	r1, #4294967295
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	fa01 f303 	lsl.w	r3, r1, r3
 800174e:	43d9      	mvns	r1, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001754:	4313      	orrs	r3, r2
         );
}
 8001756:	4618      	mov	r0, r3
 8001758:	3724      	adds	r7, #36	; 0x24
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
	...

08001764 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3b01      	subs	r3, #1
 8001770:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001774:	d301      	bcc.n	800177a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001776:	2301      	movs	r3, #1
 8001778:	e00f      	b.n	800179a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800177a:	4a0a      	ldr	r2, [pc, #40]	; (80017a4 <SysTick_Config+0x40>)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3b01      	subs	r3, #1
 8001780:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001782:	210f      	movs	r1, #15
 8001784:	f04f 30ff 	mov.w	r0, #4294967295
 8001788:	f7ff ff8e 	bl	80016a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800178c:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <SysTick_Config+0x40>)
 800178e:	2200      	movs	r2, #0
 8001790:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001792:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <SysTick_Config+0x40>)
 8001794:	2207      	movs	r2, #7
 8001796:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	e000e010 	.word	0xe000e010

080017a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7ff ff29 	bl	8001608 <__NVIC_SetPriorityGrouping>
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017be:	b580      	push	{r7, lr}
 80017c0:	b086      	sub	sp, #24
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	4603      	mov	r3, r0
 80017c6:	60b9      	str	r1, [r7, #8]
 80017c8:	607a      	str	r2, [r7, #4]
 80017ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017d0:	f7ff ff3e 	bl	8001650 <__NVIC_GetPriorityGrouping>
 80017d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	68b9      	ldr	r1, [r7, #8]
 80017da:	6978      	ldr	r0, [r7, #20]
 80017dc:	f7ff ff8e 	bl	80016fc <NVIC_EncodePriority>
 80017e0:	4602      	mov	r2, r0
 80017e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e6:	4611      	mov	r1, r2
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff ff5d 	bl	80016a8 <__NVIC_SetPriority>
}
 80017ee:	bf00      	nop
 80017f0:	3718      	adds	r7, #24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b082      	sub	sp, #8
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	4603      	mov	r3, r0
 80017fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff ff31 	bl	800166c <__NVIC_EnableIRQ>
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff ffa2 	bl	8001764 <SysTick_Config>
 8001820:	4603      	mov	r3, r0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b084      	sub	sp, #16
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001836:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001838:	f7ff faf8 	bl	8000e2c <HAL_GetTick>
 800183c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d008      	beq.n	800185c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2280      	movs	r2, #128	; 0x80
 800184e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e052      	b.n	8001902 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f022 0216 	bic.w	r2, r2, #22
 800186a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	695a      	ldr	r2, [r3, #20]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800187a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001880:	2b00      	cmp	r3, #0
 8001882:	d103      	bne.n	800188c <HAL_DMA_Abort+0x62>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001888:	2b00      	cmp	r3, #0
 800188a:	d007      	beq.n	800189c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f022 0208 	bic.w	r2, r2, #8
 800189a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f022 0201 	bic.w	r2, r2, #1
 80018aa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018ac:	e013      	b.n	80018d6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018ae:	f7ff fabd 	bl	8000e2c <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b05      	cmp	r3, #5
 80018ba:	d90c      	bls.n	80018d6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2220      	movs	r2, #32
 80018c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2203      	movs	r2, #3
 80018c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e015      	b.n	8001902 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1e4      	bne.n	80018ae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e8:	223f      	movs	r2, #63	; 0x3f
 80018ea:	409a      	lsls	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800190a:	b480      	push	{r7}
 800190c:	b083      	sub	sp, #12
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d004      	beq.n	8001928 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2280      	movs	r2, #128	; 0x80
 8001922:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e00c      	b.n	8001942 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2205      	movs	r2, #5
 800192c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f022 0201 	bic.w	r2, r2, #1
 800193e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
	...

08001950 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001950:	b480      	push	{r7}
 8001952:	b089      	sub	sp, #36	; 0x24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001962:	2300      	movs	r3, #0
 8001964:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
 800196a:	e159      	b.n	8001c20 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800196c:	2201      	movs	r2, #1
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	4013      	ands	r3, r2
 800197e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	429a      	cmp	r2, r3
 8001986:	f040 8148 	bne.w	8001c1a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	2b01      	cmp	r3, #1
 8001994:	d005      	beq.n	80019a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d130      	bne.n	8001a04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	2203      	movs	r2, #3
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4013      	ands	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	68da      	ldr	r2, [r3, #12]
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019d8:	2201      	movs	r2, #1
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	091b      	lsrs	r3, r3, #4
 80019ee:	f003 0201 	and.w	r2, r3, #1
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 0303 	and.w	r3, r3, #3
 8001a0c:	2b03      	cmp	r3, #3
 8001a0e:	d017      	beq.n	8001a40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	2203      	movs	r2, #3
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4013      	ands	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 0303 	and.w	r3, r3, #3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d123      	bne.n	8001a94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	08da      	lsrs	r2, r3, #3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3208      	adds	r2, #8
 8001a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	220f      	movs	r2, #15
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	691a      	ldr	r2, [r3, #16]
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	08da      	lsrs	r2, r3, #3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	3208      	adds	r2, #8
 8001a8e:	69b9      	ldr	r1, [r7, #24]
 8001a90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 0203 	and.w	r2, r3, #3
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f000 80a2 	beq.w	8001c1a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	4b57      	ldr	r3, [pc, #348]	; (8001c38 <HAL_GPIO_Init+0x2e8>)
 8001adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ade:	4a56      	ldr	r2, [pc, #344]	; (8001c38 <HAL_GPIO_Init+0x2e8>)
 8001ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ae6:	4b54      	ldr	r3, [pc, #336]	; (8001c38 <HAL_GPIO_Init+0x2e8>)
 8001ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001af2:	4a52      	ldr	r2, [pc, #328]	; (8001c3c <HAL_GPIO_Init+0x2ec>)
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	089b      	lsrs	r3, r3, #2
 8001af8:	3302      	adds	r3, #2
 8001afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f003 0303 	and.w	r3, r3, #3
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	220f      	movs	r2, #15
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4013      	ands	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a49      	ldr	r2, [pc, #292]	; (8001c40 <HAL_GPIO_Init+0x2f0>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d019      	beq.n	8001b52 <HAL_GPIO_Init+0x202>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a48      	ldr	r2, [pc, #288]	; (8001c44 <HAL_GPIO_Init+0x2f4>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d013      	beq.n	8001b4e <HAL_GPIO_Init+0x1fe>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a47      	ldr	r2, [pc, #284]	; (8001c48 <HAL_GPIO_Init+0x2f8>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d00d      	beq.n	8001b4a <HAL_GPIO_Init+0x1fa>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a46      	ldr	r2, [pc, #280]	; (8001c4c <HAL_GPIO_Init+0x2fc>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d007      	beq.n	8001b46 <HAL_GPIO_Init+0x1f6>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a45      	ldr	r2, [pc, #276]	; (8001c50 <HAL_GPIO_Init+0x300>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d101      	bne.n	8001b42 <HAL_GPIO_Init+0x1f2>
 8001b3e:	2304      	movs	r3, #4
 8001b40:	e008      	b.n	8001b54 <HAL_GPIO_Init+0x204>
 8001b42:	2307      	movs	r3, #7
 8001b44:	e006      	b.n	8001b54 <HAL_GPIO_Init+0x204>
 8001b46:	2303      	movs	r3, #3
 8001b48:	e004      	b.n	8001b54 <HAL_GPIO_Init+0x204>
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e002      	b.n	8001b54 <HAL_GPIO_Init+0x204>
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e000      	b.n	8001b54 <HAL_GPIO_Init+0x204>
 8001b52:	2300      	movs	r3, #0
 8001b54:	69fa      	ldr	r2, [r7, #28]
 8001b56:	f002 0203 	and.w	r2, r2, #3
 8001b5a:	0092      	lsls	r2, r2, #2
 8001b5c:	4093      	lsls	r3, r2
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b64:	4935      	ldr	r1, [pc, #212]	; (8001c3c <HAL_GPIO_Init+0x2ec>)
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	089b      	lsrs	r3, r3, #2
 8001b6a:	3302      	adds	r3, #2
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b72:	4b38      	ldr	r3, [pc, #224]	; (8001c54 <HAL_GPIO_Init+0x304>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b96:	4a2f      	ldr	r2, [pc, #188]	; (8001c54 <HAL_GPIO_Init+0x304>)
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b9c:	4b2d      	ldr	r3, [pc, #180]	; (8001c54 <HAL_GPIO_Init+0x304>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bc0:	4a24      	ldr	r2, [pc, #144]	; (8001c54 <HAL_GPIO_Init+0x304>)
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bc6:	4b23      	ldr	r3, [pc, #140]	; (8001c54 <HAL_GPIO_Init+0x304>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bea:	4a1a      	ldr	r2, [pc, #104]	; (8001c54 <HAL_GPIO_Init+0x304>)
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bf0:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <HAL_GPIO_Init+0x304>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d003      	beq.n	8001c14 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c14:	4a0f      	ldr	r2, [pc, #60]	; (8001c54 <HAL_GPIO_Init+0x304>)
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	61fb      	str	r3, [r7, #28]
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	2b0f      	cmp	r3, #15
 8001c24:	f67f aea2 	bls.w	800196c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c28:	bf00      	nop
 8001c2a:	bf00      	nop
 8001c2c:	3724      	adds	r7, #36	; 0x24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	40013800 	.word	0x40013800
 8001c40:	40020000 	.word	0x40020000
 8001c44:	40020400 	.word	0x40020400
 8001c48:	40020800 	.word	0x40020800
 8001c4c:	40020c00 	.word	0x40020c00
 8001c50:	40021000 	.word	0x40021000
 8001c54:	40013c00 	.word	0x40013c00

08001c58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	460b      	mov	r3, r1
 8001c62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691a      	ldr	r2, [r3, #16]
 8001c68:	887b      	ldrh	r3, [r7, #2]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d002      	beq.n	8001c76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c70:	2301      	movs	r3, #1
 8001c72:	73fb      	strb	r3, [r7, #15]
 8001c74:	e001      	b.n	8001c7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c76:	2300      	movs	r3, #0
 8001c78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	807b      	strh	r3, [r7, #2]
 8001c94:	4613      	mov	r3, r2
 8001c96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c98:	787b      	ldrb	r3, [r7, #1]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c9e:	887a      	ldrh	r2, [r7, #2]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ca4:	e003      	b.n	8001cae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ca6:	887b      	ldrh	r3, [r7, #2]
 8001ca8:	041a      	lsls	r2, r3, #16
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	619a      	str	r2, [r3, #24]
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b085      	sub	sp, #20
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ccc:	887a      	ldrh	r2, [r7, #2]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	041a      	lsls	r2, r3, #16
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	43d9      	mvns	r1, r3
 8001cd8:	887b      	ldrh	r3, [r7, #2]
 8001cda:	400b      	ands	r3, r1
 8001cdc:	431a      	orrs	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	619a      	str	r2, [r3, #24]
}
 8001ce2:	bf00      	nop
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e267      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d075      	beq.n	8001dfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d0e:	4b88      	ldr	r3, [pc, #544]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 030c 	and.w	r3, r3, #12
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	d00c      	beq.n	8001d34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d1a:	4b85      	ldr	r3, [pc, #532]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d22:	2b08      	cmp	r3, #8
 8001d24:	d112      	bne.n	8001d4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d26:	4b82      	ldr	r3, [pc, #520]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d32:	d10b      	bne.n	8001d4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d34:	4b7e      	ldr	r3, [pc, #504]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d05b      	beq.n	8001df8 <HAL_RCC_OscConfig+0x108>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d157      	bne.n	8001df8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e242      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d54:	d106      	bne.n	8001d64 <HAL_RCC_OscConfig+0x74>
 8001d56:	4b76      	ldr	r3, [pc, #472]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a75      	ldr	r2, [pc, #468]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d60:	6013      	str	r3, [r2, #0]
 8001d62:	e01d      	b.n	8001da0 <HAL_RCC_OscConfig+0xb0>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d6c:	d10c      	bne.n	8001d88 <HAL_RCC_OscConfig+0x98>
 8001d6e:	4b70      	ldr	r3, [pc, #448]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a6f      	ldr	r2, [pc, #444]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	4b6d      	ldr	r3, [pc, #436]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a6c      	ldr	r2, [pc, #432]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d84:	6013      	str	r3, [r2, #0]
 8001d86:	e00b      	b.n	8001da0 <HAL_RCC_OscConfig+0xb0>
 8001d88:	4b69      	ldr	r3, [pc, #420]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a68      	ldr	r2, [pc, #416]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d92:	6013      	str	r3, [r2, #0]
 8001d94:	4b66      	ldr	r3, [pc, #408]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a65      	ldr	r2, [pc, #404]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d013      	beq.n	8001dd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da8:	f7ff f840 	bl	8000e2c <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001db0:	f7ff f83c 	bl	8000e2c <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b64      	cmp	r3, #100	; 0x64
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e207      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc2:	4b5b      	ldr	r3, [pc, #364]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0f0      	beq.n	8001db0 <HAL_RCC_OscConfig+0xc0>
 8001dce:	e014      	b.n	8001dfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd0:	f7ff f82c 	bl	8000e2c <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dd8:	f7ff f828 	bl	8000e2c <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b64      	cmp	r3, #100	; 0x64
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e1f3      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dea:	4b51      	ldr	r3, [pc, #324]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1f0      	bne.n	8001dd8 <HAL_RCC_OscConfig+0xe8>
 8001df6:	e000      	b.n	8001dfa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d063      	beq.n	8001ece <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e06:	4b4a      	ldr	r3, [pc, #296]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 030c 	and.w	r3, r3, #12
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00b      	beq.n	8001e2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e12:	4b47      	ldr	r3, [pc, #284]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e1a:	2b08      	cmp	r3, #8
 8001e1c:	d11c      	bne.n	8001e58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e1e:	4b44      	ldr	r3, [pc, #272]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d116      	bne.n	8001e58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e2a:	4b41      	ldr	r3, [pc, #260]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d005      	beq.n	8001e42 <HAL_RCC_OscConfig+0x152>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d001      	beq.n	8001e42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e1c7      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e42:	4b3b      	ldr	r3, [pc, #236]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	4937      	ldr	r1, [pc, #220]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e56:	e03a      	b.n	8001ece <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d020      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e60:	4b34      	ldr	r3, [pc, #208]	; (8001f34 <HAL_RCC_OscConfig+0x244>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e66:	f7fe ffe1 	bl	8000e2c <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e6e:	f7fe ffdd 	bl	8000e2c <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e1a8      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e80:	4b2b      	ldr	r3, [pc, #172]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0f0      	beq.n	8001e6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e8c:	4b28      	ldr	r3, [pc, #160]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	4925      	ldr	r1, [pc, #148]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	600b      	str	r3, [r1, #0]
 8001ea0:	e015      	b.n	8001ece <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ea2:	4b24      	ldr	r3, [pc, #144]	; (8001f34 <HAL_RCC_OscConfig+0x244>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea8:	f7fe ffc0 	bl	8000e2c <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eb0:	f7fe ffbc 	bl	8000e2c <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e187      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ec2:	4b1b      	ldr	r3, [pc, #108]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f0      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d036      	beq.n	8001f48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d016      	beq.n	8001f10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ee2:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <HAL_RCC_OscConfig+0x248>)
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee8:	f7fe ffa0 	bl	8000e2c <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ef0:	f7fe ff9c 	bl	8000e2c <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e167      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f02:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0f0      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x200>
 8001f0e:	e01b      	b.n	8001f48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f10:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <HAL_RCC_OscConfig+0x248>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f16:	f7fe ff89 	bl	8000e2c <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f1c:	e00e      	b.n	8001f3c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f1e:	f7fe ff85 	bl	8000e2c <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d907      	bls.n	8001f3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e150      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
 8001f30:	40023800 	.word	0x40023800
 8001f34:	42470000 	.word	0x42470000
 8001f38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f3c:	4b88      	ldr	r3, [pc, #544]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1ea      	bne.n	8001f1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 8097 	beq.w	8002084 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f56:	2300      	movs	r3, #0
 8001f58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f5a:	4b81      	ldr	r3, [pc, #516]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d10f      	bne.n	8001f86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	4b7d      	ldr	r3, [pc, #500]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	4a7c      	ldr	r2, [pc, #496]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f74:	6413      	str	r3, [r2, #64]	; 0x40
 8001f76:	4b7a      	ldr	r3, [pc, #488]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7e:	60bb      	str	r3, [r7, #8]
 8001f80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f82:	2301      	movs	r3, #1
 8001f84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f86:	4b77      	ldr	r3, [pc, #476]	; (8002164 <HAL_RCC_OscConfig+0x474>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d118      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f92:	4b74      	ldr	r3, [pc, #464]	; (8002164 <HAL_RCC_OscConfig+0x474>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a73      	ldr	r2, [pc, #460]	; (8002164 <HAL_RCC_OscConfig+0x474>)
 8001f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f9e:	f7fe ff45 	bl	8000e2c <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa6:	f7fe ff41 	bl	8000e2c <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e10c      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb8:	4b6a      	ldr	r3, [pc, #424]	; (8002164 <HAL_RCC_OscConfig+0x474>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0f0      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d106      	bne.n	8001fda <HAL_RCC_OscConfig+0x2ea>
 8001fcc:	4b64      	ldr	r3, [pc, #400]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd0:	4a63      	ldr	r2, [pc, #396]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001fd2:	f043 0301 	orr.w	r3, r3, #1
 8001fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8001fd8:	e01c      	b.n	8002014 <HAL_RCC_OscConfig+0x324>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	2b05      	cmp	r3, #5
 8001fe0:	d10c      	bne.n	8001ffc <HAL_RCC_OscConfig+0x30c>
 8001fe2:	4b5f      	ldr	r3, [pc, #380]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe6:	4a5e      	ldr	r2, [pc, #376]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001fe8:	f043 0304 	orr.w	r3, r3, #4
 8001fec:	6713      	str	r3, [r2, #112]	; 0x70
 8001fee:	4b5c      	ldr	r3, [pc, #368]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff2:	4a5b      	ldr	r2, [pc, #364]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	6713      	str	r3, [r2, #112]	; 0x70
 8001ffa:	e00b      	b.n	8002014 <HAL_RCC_OscConfig+0x324>
 8001ffc:	4b58      	ldr	r3, [pc, #352]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002000:	4a57      	ldr	r2, [pc, #348]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8002002:	f023 0301 	bic.w	r3, r3, #1
 8002006:	6713      	str	r3, [r2, #112]	; 0x70
 8002008:	4b55      	ldr	r3, [pc, #340]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 800200a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200c:	4a54      	ldr	r2, [pc, #336]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 800200e:	f023 0304 	bic.w	r3, r3, #4
 8002012:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d015      	beq.n	8002048 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800201c:	f7fe ff06 	bl	8000e2c <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002022:	e00a      	b.n	800203a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002024:	f7fe ff02 	bl	8000e2c <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002032:	4293      	cmp	r3, r2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e0cb      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800203a:	4b49      	ldr	r3, [pc, #292]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 800203c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d0ee      	beq.n	8002024 <HAL_RCC_OscConfig+0x334>
 8002046:	e014      	b.n	8002072 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002048:	f7fe fef0 	bl	8000e2c <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800204e:	e00a      	b.n	8002066 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002050:	f7fe feec 	bl	8000e2c <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	f241 3288 	movw	r2, #5000	; 0x1388
 800205e:	4293      	cmp	r3, r2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e0b5      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002066:	4b3e      	ldr	r3, [pc, #248]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8002068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1ee      	bne.n	8002050 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002072:	7dfb      	ldrb	r3, [r7, #23]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d105      	bne.n	8002084 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002078:	4b39      	ldr	r3, [pc, #228]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 800207a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207c:	4a38      	ldr	r2, [pc, #224]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 800207e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002082:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 80a1 	beq.w	80021d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800208e:	4b34      	ldr	r3, [pc, #208]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 030c 	and.w	r3, r3, #12
 8002096:	2b08      	cmp	r3, #8
 8002098:	d05c      	beq.n	8002154 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d141      	bne.n	8002126 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a2:	4b31      	ldr	r3, [pc, #196]	; (8002168 <HAL_RCC_OscConfig+0x478>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a8:	f7fe fec0 	bl	8000e2c <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b0:	f7fe febc 	bl	8000e2c <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e087      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020c2:	4b27      	ldr	r3, [pc, #156]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1f0      	bne.n	80020b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69da      	ldr	r2, [r3, #28]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	431a      	orrs	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	019b      	lsls	r3, r3, #6
 80020de:	431a      	orrs	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e4:	085b      	lsrs	r3, r3, #1
 80020e6:	3b01      	subs	r3, #1
 80020e8:	041b      	lsls	r3, r3, #16
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f0:	061b      	lsls	r3, r3, #24
 80020f2:	491b      	ldr	r1, [pc, #108]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020f8:	4b1b      	ldr	r3, [pc, #108]	; (8002168 <HAL_RCC_OscConfig+0x478>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fe:	f7fe fe95 	bl	8000e2c <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002106:	f7fe fe91 	bl	8000e2c <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e05c      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002118:	4b11      	ldr	r3, [pc, #68]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0f0      	beq.n	8002106 <HAL_RCC_OscConfig+0x416>
 8002124:	e054      	b.n	80021d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002126:	4b10      	ldr	r3, [pc, #64]	; (8002168 <HAL_RCC_OscConfig+0x478>)
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212c:	f7fe fe7e 	bl	8000e2c <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002134:	f7fe fe7a 	bl	8000e2c <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e045      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002146:	4b06      	ldr	r3, [pc, #24]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f0      	bne.n	8002134 <HAL_RCC_OscConfig+0x444>
 8002152:	e03d      	b.n	80021d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d107      	bne.n	800216c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e038      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
 8002160:	40023800 	.word	0x40023800
 8002164:	40007000 	.word	0x40007000
 8002168:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800216c:	4b1b      	ldr	r3, [pc, #108]	; (80021dc <HAL_RCC_OscConfig+0x4ec>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d028      	beq.n	80021cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002184:	429a      	cmp	r2, r3
 8002186:	d121      	bne.n	80021cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002192:	429a      	cmp	r2, r3
 8002194:	d11a      	bne.n	80021cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800219c:	4013      	ands	r3, r2
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d111      	bne.n	80021cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b2:	085b      	lsrs	r3, r3, #1
 80021b4:	3b01      	subs	r3, #1
 80021b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d107      	bne.n	80021cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d001      	beq.n	80021d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e000      	b.n	80021d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40023800 	.word	0x40023800

080021e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d101      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e0cc      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021f4:	4b68      	ldr	r3, [pc, #416]	; (8002398 <HAL_RCC_ClockConfig+0x1b8>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d90c      	bls.n	800221c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002202:	4b65      	ldr	r3, [pc, #404]	; (8002398 <HAL_RCC_ClockConfig+0x1b8>)
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800220a:	4b63      	ldr	r3, [pc, #396]	; (8002398 <HAL_RCC_ClockConfig+0x1b8>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	429a      	cmp	r2, r3
 8002216:	d001      	beq.n	800221c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e0b8      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d020      	beq.n	800226a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b00      	cmp	r3, #0
 8002232:	d005      	beq.n	8002240 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002234:	4b59      	ldr	r3, [pc, #356]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	4a58      	ldr	r2, [pc, #352]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 800223a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800223e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0308 	and.w	r3, r3, #8
 8002248:	2b00      	cmp	r3, #0
 800224a:	d005      	beq.n	8002258 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800224c:	4b53      	ldr	r3, [pc, #332]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	4a52      	ldr	r2, [pc, #328]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002252:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002256:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002258:	4b50      	ldr	r3, [pc, #320]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	494d      	ldr	r1, [pc, #308]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002266:	4313      	orrs	r3, r2
 8002268:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d044      	beq.n	8002300 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d107      	bne.n	800228e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227e:	4b47      	ldr	r3, [pc, #284]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d119      	bne.n	80022be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e07f      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2b02      	cmp	r3, #2
 8002294:	d003      	beq.n	800229e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800229a:	2b03      	cmp	r3, #3
 800229c:	d107      	bne.n	80022ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800229e:	4b3f      	ldr	r3, [pc, #252]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d109      	bne.n	80022be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e06f      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ae:	4b3b      	ldr	r3, [pc, #236]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e067      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022be:	4b37      	ldr	r3, [pc, #220]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f023 0203 	bic.w	r2, r3, #3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	4934      	ldr	r1, [pc, #208]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022d0:	f7fe fdac 	bl	8000e2c <HAL_GetTick>
 80022d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022d6:	e00a      	b.n	80022ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022d8:	f7fe fda8 	bl	8000e2c <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e04f      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ee:	4b2b      	ldr	r3, [pc, #172]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 020c 	and.w	r2, r3, #12
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d1eb      	bne.n	80022d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002300:	4b25      	ldr	r3, [pc, #148]	; (8002398 <HAL_RCC_ClockConfig+0x1b8>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0307 	and.w	r3, r3, #7
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d20c      	bcs.n	8002328 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230e:	4b22      	ldr	r3, [pc, #136]	; (8002398 <HAL_RCC_ClockConfig+0x1b8>)
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002316:	4b20      	ldr	r3, [pc, #128]	; (8002398 <HAL_RCC_ClockConfig+0x1b8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	429a      	cmp	r2, r3
 8002322:	d001      	beq.n	8002328 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e032      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	2b00      	cmp	r3, #0
 8002332:	d008      	beq.n	8002346 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002334:	4b19      	ldr	r3, [pc, #100]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	4916      	ldr	r1, [pc, #88]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	4313      	orrs	r3, r2
 8002344:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0308 	and.w	r3, r3, #8
 800234e:	2b00      	cmp	r3, #0
 8002350:	d009      	beq.n	8002366 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002352:	4b12      	ldr	r3, [pc, #72]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	490e      	ldr	r1, [pc, #56]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002362:	4313      	orrs	r3, r2
 8002364:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002366:	f000 f821 	bl	80023ac <HAL_RCC_GetSysClockFreq>
 800236a:	4602      	mov	r2, r0
 800236c:	4b0b      	ldr	r3, [pc, #44]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	091b      	lsrs	r3, r3, #4
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	490a      	ldr	r1, [pc, #40]	; (80023a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002378:	5ccb      	ldrb	r3, [r1, r3]
 800237a:	fa22 f303 	lsr.w	r3, r2, r3
 800237e:	4a09      	ldr	r2, [pc, #36]	; (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002382:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f7fe fd0c 	bl	8000da4 <HAL_InitTick>

  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40023c00 	.word	0x40023c00
 800239c:	40023800 	.word	0x40023800
 80023a0:	08003fd8 	.word	0x08003fd8
 80023a4:	20000000 	.word	0x20000000
 80023a8:	20000004 	.word	0x20000004

080023ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023b0:	b090      	sub	sp, #64	; 0x40
 80023b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	637b      	str	r3, [r7, #52]	; 0x34
 80023b8:	2300      	movs	r3, #0
 80023ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023bc:	2300      	movs	r3, #0
 80023be:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023c4:	4b59      	ldr	r3, [pc, #356]	; (800252c <HAL_RCC_GetSysClockFreq+0x180>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 030c 	and.w	r3, r3, #12
 80023cc:	2b08      	cmp	r3, #8
 80023ce:	d00d      	beq.n	80023ec <HAL_RCC_GetSysClockFreq+0x40>
 80023d0:	2b08      	cmp	r3, #8
 80023d2:	f200 80a1 	bhi.w	8002518 <HAL_RCC_GetSysClockFreq+0x16c>
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d002      	beq.n	80023e0 <HAL_RCC_GetSysClockFreq+0x34>
 80023da:	2b04      	cmp	r3, #4
 80023dc:	d003      	beq.n	80023e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80023de:	e09b      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023e0:	4b53      	ldr	r3, [pc, #332]	; (8002530 <HAL_RCC_GetSysClockFreq+0x184>)
 80023e2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80023e4:	e09b      	b.n	800251e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023e6:	4b53      	ldr	r3, [pc, #332]	; (8002534 <HAL_RCC_GetSysClockFreq+0x188>)
 80023e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80023ea:	e098      	b.n	800251e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023ec:	4b4f      	ldr	r3, [pc, #316]	; (800252c <HAL_RCC_GetSysClockFreq+0x180>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023f4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023f6:	4b4d      	ldr	r3, [pc, #308]	; (800252c <HAL_RCC_GetSysClockFreq+0x180>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d028      	beq.n	8002454 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002402:	4b4a      	ldr	r3, [pc, #296]	; (800252c <HAL_RCC_GetSysClockFreq+0x180>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	099b      	lsrs	r3, r3, #6
 8002408:	2200      	movs	r2, #0
 800240a:	623b      	str	r3, [r7, #32]
 800240c:	627a      	str	r2, [r7, #36]	; 0x24
 800240e:	6a3b      	ldr	r3, [r7, #32]
 8002410:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002414:	2100      	movs	r1, #0
 8002416:	4b47      	ldr	r3, [pc, #284]	; (8002534 <HAL_RCC_GetSysClockFreq+0x188>)
 8002418:	fb03 f201 	mul.w	r2, r3, r1
 800241c:	2300      	movs	r3, #0
 800241e:	fb00 f303 	mul.w	r3, r0, r3
 8002422:	4413      	add	r3, r2
 8002424:	4a43      	ldr	r2, [pc, #268]	; (8002534 <HAL_RCC_GetSysClockFreq+0x188>)
 8002426:	fba0 1202 	umull	r1, r2, r0, r2
 800242a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800242c:	460a      	mov	r2, r1
 800242e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002430:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002432:	4413      	add	r3, r2
 8002434:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002438:	2200      	movs	r2, #0
 800243a:	61bb      	str	r3, [r7, #24]
 800243c:	61fa      	str	r2, [r7, #28]
 800243e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002442:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002446:	f7fd ff23 	bl	8000290 <__aeabi_uldivmod>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	4613      	mov	r3, r2
 8002450:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002452:	e053      	b.n	80024fc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002454:	4b35      	ldr	r3, [pc, #212]	; (800252c <HAL_RCC_GetSysClockFreq+0x180>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	099b      	lsrs	r3, r3, #6
 800245a:	2200      	movs	r2, #0
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	617a      	str	r2, [r7, #20]
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002466:	f04f 0b00 	mov.w	fp, #0
 800246a:	4652      	mov	r2, sl
 800246c:	465b      	mov	r3, fp
 800246e:	f04f 0000 	mov.w	r0, #0
 8002472:	f04f 0100 	mov.w	r1, #0
 8002476:	0159      	lsls	r1, r3, #5
 8002478:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800247c:	0150      	lsls	r0, r2, #5
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	ebb2 080a 	subs.w	r8, r2, sl
 8002486:	eb63 090b 	sbc.w	r9, r3, fp
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	f04f 0300 	mov.w	r3, #0
 8002492:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002496:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800249a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800249e:	ebb2 0408 	subs.w	r4, r2, r8
 80024a2:	eb63 0509 	sbc.w	r5, r3, r9
 80024a6:	f04f 0200 	mov.w	r2, #0
 80024aa:	f04f 0300 	mov.w	r3, #0
 80024ae:	00eb      	lsls	r3, r5, #3
 80024b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024b4:	00e2      	lsls	r2, r4, #3
 80024b6:	4614      	mov	r4, r2
 80024b8:	461d      	mov	r5, r3
 80024ba:	eb14 030a 	adds.w	r3, r4, sl
 80024be:	603b      	str	r3, [r7, #0]
 80024c0:	eb45 030b 	adc.w	r3, r5, fp
 80024c4:	607b      	str	r3, [r7, #4]
 80024c6:	f04f 0200 	mov.w	r2, #0
 80024ca:	f04f 0300 	mov.w	r3, #0
 80024ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024d2:	4629      	mov	r1, r5
 80024d4:	028b      	lsls	r3, r1, #10
 80024d6:	4621      	mov	r1, r4
 80024d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024dc:	4621      	mov	r1, r4
 80024de:	028a      	lsls	r2, r1, #10
 80024e0:	4610      	mov	r0, r2
 80024e2:	4619      	mov	r1, r3
 80024e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e6:	2200      	movs	r2, #0
 80024e8:	60bb      	str	r3, [r7, #8]
 80024ea:	60fa      	str	r2, [r7, #12]
 80024ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024f0:	f7fd fece 	bl	8000290 <__aeabi_uldivmod>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	4613      	mov	r3, r2
 80024fa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024fc:	4b0b      	ldr	r3, [pc, #44]	; (800252c <HAL_RCC_GetSysClockFreq+0x180>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	0c1b      	lsrs	r3, r3, #16
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	3301      	adds	r3, #1
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800250c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800250e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002510:	fbb2 f3f3 	udiv	r3, r2, r3
 8002514:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002516:	e002      	b.n	800251e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002518:	4b05      	ldr	r3, [pc, #20]	; (8002530 <HAL_RCC_GetSysClockFreq+0x184>)
 800251a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800251c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800251e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002520:	4618      	mov	r0, r3
 8002522:	3740      	adds	r7, #64	; 0x40
 8002524:	46bd      	mov	sp, r7
 8002526:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800252a:	bf00      	nop
 800252c:	40023800 	.word	0x40023800
 8002530:	00f42400 	.word	0x00f42400
 8002534:	017d7840 	.word	0x017d7840

08002538 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800253c:	4b03      	ldr	r3, [pc, #12]	; (800254c <HAL_RCC_GetHCLKFreq+0x14>)
 800253e:	681b      	ldr	r3, [r3, #0]
}
 8002540:	4618      	mov	r0, r3
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	20000000 	.word	0x20000000

08002550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002554:	f7ff fff0 	bl	8002538 <HAL_RCC_GetHCLKFreq>
 8002558:	4602      	mov	r2, r0
 800255a:	4b05      	ldr	r3, [pc, #20]	; (8002570 <HAL_RCC_GetPCLK1Freq+0x20>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	0a9b      	lsrs	r3, r3, #10
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	4903      	ldr	r1, [pc, #12]	; (8002574 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002566:	5ccb      	ldrb	r3, [r1, r3]
 8002568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800256c:	4618      	mov	r0, r3
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40023800 	.word	0x40023800
 8002574:	08003fe8 	.word	0x08003fe8

08002578 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800257c:	f7ff ffdc 	bl	8002538 <HAL_RCC_GetHCLKFreq>
 8002580:	4602      	mov	r2, r0
 8002582:	4b05      	ldr	r3, [pc, #20]	; (8002598 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	0b5b      	lsrs	r3, r3, #13
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	4903      	ldr	r1, [pc, #12]	; (800259c <HAL_RCC_GetPCLK2Freq+0x24>)
 800258e:	5ccb      	ldrb	r3, [r1, r3]
 8002590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002594:	4618      	mov	r0, r3
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40023800 	.word	0x40023800
 800259c:	08003fe8 	.word	0x08003fe8

080025a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e042      	b.n	8002638 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d106      	bne.n	80025cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7fe fad4 	bl	8000b74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2224      	movs	r2, #36	; 0x24
 80025d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68da      	ldr	r2, [r3, #12]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 fdbd 	bl	8003164 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	691a      	ldr	r2, [r3, #16]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	695a      	ldr	r2, [r3, #20]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002608:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68da      	ldr	r2, [r3, #12]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002618:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2220      	movs	r2, #32
 8002624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2220      	movs	r2, #32
 800262c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b08a      	sub	sp, #40	; 0x28
 8002644:	af02      	add	r7, sp, #8
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	603b      	str	r3, [r7, #0]
 800264c:	4613      	mov	r3, r2
 800264e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002650:	2300      	movs	r3, #0
 8002652:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b20      	cmp	r3, #32
 800265e:	d175      	bne.n	800274c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d002      	beq.n	800266c <HAL_UART_Transmit+0x2c>
 8002666:	88fb      	ldrh	r3, [r7, #6]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e06e      	b.n	800274e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2221      	movs	r2, #33	; 0x21
 800267a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800267e:	f7fe fbd5 	bl	8000e2c <HAL_GetTick>
 8002682:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	88fa      	ldrh	r2, [r7, #6]
 8002688:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	88fa      	ldrh	r2, [r7, #6]
 800268e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002698:	d108      	bne.n	80026ac <HAL_UART_Transmit+0x6c>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d104      	bne.n	80026ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80026a2:	2300      	movs	r3, #0
 80026a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	61bb      	str	r3, [r7, #24]
 80026aa:	e003      	b.n	80026b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026b0:	2300      	movs	r3, #0
 80026b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80026b4:	e02e      	b.n	8002714 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	2200      	movs	r2, #0
 80026be:	2180      	movs	r1, #128	; 0x80
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f000 fb1f 	bl	8002d04 <UART_WaitOnFlagUntilTimeout>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d005      	beq.n	80026d8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2220      	movs	r2, #32
 80026d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e03a      	b.n	800274e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10b      	bne.n	80026f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	881b      	ldrh	r3, [r3, #0]
 80026e2:	461a      	mov	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	3302      	adds	r3, #2
 80026f2:	61bb      	str	r3, [r7, #24]
 80026f4:	e007      	b.n	8002706 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	781a      	ldrb	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	3301      	adds	r3, #1
 8002704:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800270a:	b29b      	uxth	r3, r3
 800270c:	3b01      	subs	r3, #1
 800270e:	b29a      	uxth	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002718:	b29b      	uxth	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1cb      	bne.n	80026b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	2200      	movs	r2, #0
 8002726:	2140      	movs	r1, #64	; 0x40
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f000 faeb 	bl	8002d04 <UART_WaitOnFlagUntilTimeout>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2220      	movs	r2, #32
 8002738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e006      	b.n	800274e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2220      	movs	r2, #32
 8002744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002748:	2300      	movs	r3, #0
 800274a:	e000      	b.n	800274e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800274c:	2302      	movs	r3, #2
  }
}
 800274e:	4618      	mov	r0, r3
 8002750:	3720      	adds	r7, #32
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b084      	sub	sp, #16
 800275a:	af00      	add	r7, sp, #0
 800275c:	60f8      	str	r0, [r7, #12]
 800275e:	60b9      	str	r1, [r7, #8]
 8002760:	4613      	mov	r3, r2
 8002762:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b20      	cmp	r3, #32
 800276e:	d112      	bne.n	8002796 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d002      	beq.n	800277c <HAL_UART_Receive_IT+0x26>
 8002776:	88fb      	ldrh	r3, [r7, #6]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d101      	bne.n	8002780 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e00b      	b.n	8002798 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002786:	88fb      	ldrh	r3, [r7, #6]
 8002788:	461a      	mov	r2, r3
 800278a:	68b9      	ldr	r1, [r7, #8]
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f000 fb12 	bl	8002db6 <UART_Start_Receive_IT>
 8002792:	4603      	mov	r3, r0
 8002794:	e000      	b.n	8002798 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002796:	2302      	movs	r3, #2
  }
}
 8002798:	4618      	mov	r0, r3
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b0ba      	sub	sp, #232	; 0xe8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80027c6:	2300      	movs	r3, #0
 80027c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80027d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027d6:	f003 030f 	and.w	r3, r3, #15
 80027da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80027de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10f      	bne.n	8002806 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027ea:	f003 0320 	and.w	r3, r3, #32
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d009      	beq.n	8002806 <HAL_UART_IRQHandler+0x66>
 80027f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027f6:	f003 0320 	and.w	r3, r3, #32
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 fbf2 	bl	8002fe8 <UART_Receive_IT>
      return;
 8002804:	e25b      	b.n	8002cbe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002806:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 80de 	beq.w	80029cc <HAL_UART_IRQHandler+0x22c>
 8002810:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	2b00      	cmp	r3, #0
 800281a:	d106      	bne.n	800282a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800281c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002820:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 80d1 	beq.w	80029cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800282a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00b      	beq.n	800284e <HAL_UART_IRQHandler+0xae>
 8002836:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800283a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283e:	2b00      	cmp	r3, #0
 8002840:	d005      	beq.n	800284e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002846:	f043 0201 	orr.w	r2, r3, #1
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800284e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002852:	f003 0304 	and.w	r3, r3, #4
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00b      	beq.n	8002872 <HAL_UART_IRQHandler+0xd2>
 800285a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d005      	beq.n	8002872 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286a:	f043 0202 	orr.w	r2, r3, #2
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00b      	beq.n	8002896 <HAL_UART_IRQHandler+0xf6>
 800287e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d005      	beq.n	8002896 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288e:	f043 0204 	orr.w	r2, r3, #4
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d011      	beq.n	80028c6 <HAL_UART_IRQHandler+0x126>
 80028a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028a6:	f003 0320 	and.w	r3, r3, #32
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d105      	bne.n	80028ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80028ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d005      	beq.n	80028c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028be:	f043 0208 	orr.w	r2, r3, #8
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 81f2 	beq.w	8002cb4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028d4:	f003 0320 	and.w	r3, r3, #32
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d008      	beq.n	80028ee <HAL_UART_IRQHandler+0x14e>
 80028dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028e0:	f003 0320 	and.w	r3, r3, #32
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d002      	beq.n	80028ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 fb7d 	bl	8002fe8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f8:	2b40      	cmp	r3, #64	; 0x40
 80028fa:	bf0c      	ite	eq
 80028fc:	2301      	moveq	r3, #1
 80028fe:	2300      	movne	r3, #0
 8002900:	b2db      	uxtb	r3, r3
 8002902:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	2b00      	cmp	r3, #0
 8002910:	d103      	bne.n	800291a <HAL_UART_IRQHandler+0x17a>
 8002912:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002916:	2b00      	cmp	r3, #0
 8002918:	d04f      	beq.n	80029ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 fa85 	bl	8002e2a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292a:	2b40      	cmp	r3, #64	; 0x40
 800292c:	d141      	bne.n	80029b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	3314      	adds	r3, #20
 8002934:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002938:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800293c:	e853 3f00 	ldrex	r3, [r3]
 8002940:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002944:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002948:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800294c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	3314      	adds	r3, #20
 8002956:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800295a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800295e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002962:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002966:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800296a:	e841 2300 	strex	r3, r2, [r1]
 800296e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002972:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1d9      	bne.n	800292e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297e:	2b00      	cmp	r3, #0
 8002980:	d013      	beq.n	80029aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002986:	4a7e      	ldr	r2, [pc, #504]	; (8002b80 <HAL_UART_IRQHandler+0x3e0>)
 8002988:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800298e:	4618      	mov	r0, r3
 8002990:	f7fe ffbb 	bl	800190a <HAL_DMA_Abort_IT>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d016      	beq.n	80029c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80029a4:	4610      	mov	r0, r2
 80029a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029a8:	e00e      	b.n	80029c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f994 	bl	8002cd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029b0:	e00a      	b.n	80029c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f990 	bl	8002cd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029b8:	e006      	b.n	80029c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 f98c 	bl	8002cd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80029c6:	e175      	b.n	8002cb4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029c8:	bf00      	nop
    return;
 80029ca:	e173      	b.n	8002cb4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	f040 814f 	bne.w	8002c74 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80029d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029da:	f003 0310 	and.w	r3, r3, #16
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f000 8148 	beq.w	8002c74 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80029e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029e8:	f003 0310 	and.w	r3, r3, #16
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 8141 	beq.w	8002c74 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029f2:	2300      	movs	r3, #0
 80029f4:	60bb      	str	r3, [r7, #8]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	60bb      	str	r3, [r7, #8]
 8002a06:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a12:	2b40      	cmp	r3, #64	; 0x40
 8002a14:	f040 80b6 	bne.w	8002b84 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f000 8145 	beq.w	8002cb8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a36:	429a      	cmp	r2, r3
 8002a38:	f080 813e 	bcs.w	8002cb8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a42:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a4e:	f000 8088 	beq.w	8002b62 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	330c      	adds	r3, #12
 8002a58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a60:	e853 3f00 	ldrex	r3, [r3]
 8002a64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002a68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	330c      	adds	r3, #12
 8002a7a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002a7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002a82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a86:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002a8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a8e:	e841 2300 	strex	r3, r2, [r1]
 8002a92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002a96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1d9      	bne.n	8002a52 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	3314      	adds	r3, #20
 8002aa4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aa8:	e853 3f00 	ldrex	r3, [r3]
 8002aac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002aae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ab0:	f023 0301 	bic.w	r3, r3, #1
 8002ab4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	3314      	adds	r3, #20
 8002abe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ac2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002ac6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002aca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ace:	e841 2300 	strex	r3, r2, [r1]
 8002ad2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002ad4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1e1      	bne.n	8002a9e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	3314      	adds	r3, #20
 8002ae0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ae4:	e853 3f00 	ldrex	r3, [r3]
 8002ae8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002aea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002af0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	3314      	adds	r3, #20
 8002afa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002afe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002b00:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b02:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002b04:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b06:	e841 2300 	strex	r3, r2, [r1]
 8002b0a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002b0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1e3      	bne.n	8002ada <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2220      	movs	r2, #32
 8002b16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	330c      	adds	r3, #12
 8002b26:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b2a:	e853 3f00 	ldrex	r3, [r3]
 8002b2e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002b30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b32:	f023 0310 	bic.w	r3, r3, #16
 8002b36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	330c      	adds	r3, #12
 8002b40:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002b44:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b46:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b4c:	e841 2300 	strex	r3, r2, [r1]
 8002b50:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002b52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1e3      	bne.n	8002b20 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7fe fe64 	bl	800182a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2202      	movs	r2, #2
 8002b66:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	4619      	mov	r1, r3
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 f8b7 	bl	8002cec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b7e:	e09b      	b.n	8002cb8 <HAL_UART_IRQHandler+0x518>
 8002b80:	08002ef1 	.word	0x08002ef1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f000 808e 	beq.w	8002cbc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002ba0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 8089 	beq.w	8002cbc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	330c      	adds	r3, #12
 8002bb0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb4:	e853 3f00 	ldrex	r3, [r3]
 8002bb8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002bc0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	330c      	adds	r3, #12
 8002bca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002bce:	647a      	str	r2, [r7, #68]	; 0x44
 8002bd0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002bd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bd6:	e841 2300 	strex	r3, r2, [r1]
 8002bda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1e3      	bne.n	8002baa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	3314      	adds	r3, #20
 8002be8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bec:	e853 3f00 	ldrex	r3, [r3]
 8002bf0:	623b      	str	r3, [r7, #32]
   return(result);
 8002bf2:	6a3b      	ldr	r3, [r7, #32]
 8002bf4:	f023 0301 	bic.w	r3, r3, #1
 8002bf8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	3314      	adds	r3, #20
 8002c02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002c06:	633a      	str	r2, [r7, #48]	; 0x30
 8002c08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c0e:	e841 2300 	strex	r3, r2, [r1]
 8002c12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1e3      	bne.n	8002be2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	330c      	adds	r3, #12
 8002c2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	e853 3f00 	ldrex	r3, [r3]
 8002c36:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f023 0310 	bic.w	r3, r3, #16
 8002c3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	330c      	adds	r3, #12
 8002c48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002c4c:	61fa      	str	r2, [r7, #28]
 8002c4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c50:	69b9      	ldr	r1, [r7, #24]
 8002c52:	69fa      	ldr	r2, [r7, #28]
 8002c54:	e841 2300 	strex	r3, r2, [r1]
 8002c58:	617b      	str	r3, [r7, #20]
   return(result);
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1e3      	bne.n	8002c28 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2202      	movs	r2, #2
 8002c64:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 f83d 	bl	8002cec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c72:	e023      	b.n	8002cbc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d009      	beq.n	8002c94 <HAL_UART_IRQHandler+0x4f4>
 8002c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d003      	beq.n	8002c94 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f943 	bl	8002f18 <UART_Transmit_IT>
    return;
 8002c92:	e014      	b.n	8002cbe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00e      	beq.n	8002cbe <HAL_UART_IRQHandler+0x51e>
 8002ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d008      	beq.n	8002cbe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f983 	bl	8002fb8 <UART_EndTransmit_IT>
    return;
 8002cb2:	e004      	b.n	8002cbe <HAL_UART_IRQHandler+0x51e>
    return;
 8002cb4:	bf00      	nop
 8002cb6:	e002      	b.n	8002cbe <HAL_UART_IRQHandler+0x51e>
      return;
 8002cb8:	bf00      	nop
 8002cba:	e000      	b.n	8002cbe <HAL_UART_IRQHandler+0x51e>
      return;
 8002cbc:	bf00      	nop
  }
}
 8002cbe:	37e8      	adds	r7, #232	; 0xe8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	603b      	str	r3, [r7, #0]
 8002d10:	4613      	mov	r3, r2
 8002d12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d14:	e03b      	b.n	8002d8e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d16:	6a3b      	ldr	r3, [r7, #32]
 8002d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1c:	d037      	beq.n	8002d8e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d1e:	f7fe f885 	bl	8000e2c <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	6a3a      	ldr	r2, [r7, #32]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d302      	bcc.n	8002d34 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d2e:	6a3b      	ldr	r3, [r7, #32]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e03a      	b.n	8002dae <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	f003 0304 	and.w	r3, r3, #4
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d023      	beq.n	8002d8e <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	2b80      	cmp	r3, #128	; 0x80
 8002d4a:	d020      	beq.n	8002d8e <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	2b40      	cmp	r3, #64	; 0x40
 8002d50:	d01d      	beq.n	8002d8e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0308 	and.w	r3, r3, #8
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d116      	bne.n	8002d8e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002d60:	2300      	movs	r3, #0
 8002d62:	617b      	str	r3, [r7, #20]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	617b      	str	r3, [r7, #20]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	617b      	str	r3, [r7, #20]
 8002d74:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 f857 	bl	8002e2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2208      	movs	r2, #8
 8002d80:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e00f      	b.n	8002dae <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	4013      	ands	r3, r2
 8002d98:	68ba      	ldr	r2, [r7, #8]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	bf0c      	ite	eq
 8002d9e:	2301      	moveq	r3, #1
 8002da0:	2300      	movne	r3, #0
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	461a      	mov	r2, r3
 8002da6:	79fb      	ldrb	r3, [r7, #7]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d0b4      	beq.n	8002d16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b085      	sub	sp, #20
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	60f8      	str	r0, [r7, #12]
 8002dbe:	60b9      	str	r1, [r7, #8]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	88fa      	ldrh	r2, [r7, #6]
 8002dce:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	88fa      	ldrh	r2, [r7, #6]
 8002dd4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2222      	movs	r2, #34	; 0x22
 8002de0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d007      	beq.n	8002dfc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68da      	ldr	r2, [r3, #12]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dfa:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	695a      	ldr	r2, [r3, #20]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0201 	orr.w	r2, r2, #1
 8002e0a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 0220 	orr.w	r2, r2, #32
 8002e1a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3714      	adds	r7, #20
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b095      	sub	sp, #84	; 0x54
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	330c      	adds	r3, #12
 8002e38:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e3c:	e853 3f00 	ldrex	r3, [r3]
 8002e40:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	330c      	adds	r3, #12
 8002e50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e52:	643a      	str	r2, [r7, #64]	; 0x40
 8002e54:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002e58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002e5a:	e841 2300 	strex	r3, r2, [r1]
 8002e5e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1e5      	bne.n	8002e32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	3314      	adds	r3, #20
 8002e6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e6e:	6a3b      	ldr	r3, [r7, #32]
 8002e70:	e853 3f00 	ldrex	r3, [r3]
 8002e74:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	f023 0301 	bic.w	r3, r3, #1
 8002e7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	3314      	adds	r3, #20
 8002e84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e8e:	e841 2300 	strex	r3, r2, [r1]
 8002e92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1e5      	bne.n	8002e66 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d119      	bne.n	8002ed6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	330c      	adds	r3, #12
 8002ea8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	e853 3f00 	ldrex	r3, [r3]
 8002eb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	f023 0310 	bic.w	r3, r3, #16
 8002eb8:	647b      	str	r3, [r7, #68]	; 0x44
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	330c      	adds	r3, #12
 8002ec0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ec2:	61ba      	str	r2, [r7, #24]
 8002ec4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec6:	6979      	ldr	r1, [r7, #20]
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	e841 2300 	strex	r3, r2, [r1]
 8002ece:	613b      	str	r3, [r7, #16]
   return(result);
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1e5      	bne.n	8002ea2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2220      	movs	r2, #32
 8002eda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002ee4:	bf00      	nop
 8002ee6:	3754      	adds	r7, #84	; 0x54
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f7ff fee4 	bl	8002cd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f10:	bf00      	nop
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b21      	cmp	r3, #33	; 0x21
 8002f2a:	d13e      	bne.n	8002faa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f34:	d114      	bne.n	8002f60 <UART_Transmit_IT+0x48>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d110      	bne.n	8002f60 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	881b      	ldrh	r3, [r3, #0]
 8002f48:	461a      	mov	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f52:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	1c9a      	adds	r2, r3, #2
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	621a      	str	r2, [r3, #32]
 8002f5e:	e008      	b.n	8002f72 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	1c59      	adds	r1, r3, #1
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	6211      	str	r1, [r2, #32]
 8002f6a:	781a      	ldrb	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	4619      	mov	r1, r3
 8002f80:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10f      	bne.n	8002fa6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68da      	ldr	r2, [r3, #12]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f94:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68da      	ldr	r2, [r3, #12]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fa4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	e000      	b.n	8002fac <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002faa:	2302      	movs	r3, #2
  }
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68da      	ldr	r2, [r3, #12]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f7ff fe73 	bl	8002cc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3708      	adds	r7, #8
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08c      	sub	sp, #48	; 0x30
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b22      	cmp	r3, #34	; 0x22
 8002ffa:	f040 80ae 	bne.w	800315a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003006:	d117      	bne.n	8003038 <UART_Receive_IT+0x50>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d113      	bne.n	8003038 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003010:	2300      	movs	r3, #0
 8003012:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003018:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	b29b      	uxth	r3, r3
 8003022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003026:	b29a      	uxth	r2, r3
 8003028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003030:	1c9a      	adds	r2, r3, #2
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	629a      	str	r2, [r3, #40]	; 0x28
 8003036:	e026      	b.n	8003086 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800303e:	2300      	movs	r3, #0
 8003040:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800304a:	d007      	beq.n	800305c <UART_Receive_IT+0x74>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10a      	bne.n	800306a <UART_Receive_IT+0x82>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d106      	bne.n	800306a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	b2da      	uxtb	r2, r3
 8003064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003066:	701a      	strb	r2, [r3, #0]
 8003068:	e008      	b.n	800307c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	b2db      	uxtb	r3, r3
 8003072:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003076:	b2da      	uxtb	r2, r3
 8003078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800307a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003080:	1c5a      	adds	r2, r3, #1
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800308a:	b29b      	uxth	r3, r3
 800308c:	3b01      	subs	r3, #1
 800308e:	b29b      	uxth	r3, r3
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	4619      	mov	r1, r3
 8003094:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003096:	2b00      	cmp	r3, #0
 8003098:	d15d      	bne.n	8003156 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68da      	ldr	r2, [r3, #12]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 0220 	bic.w	r2, r2, #32
 80030a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68da      	ldr	r2, [r3, #12]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695a      	ldr	r2, [r3, #20]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 0201 	bic.w	r2, r2, #1
 80030c8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2220      	movs	r2, #32
 80030ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d135      	bne.n	800314c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	330c      	adds	r3, #12
 80030ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	e853 3f00 	ldrex	r3, [r3]
 80030f4:	613b      	str	r3, [r7, #16]
   return(result);
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	f023 0310 	bic.w	r3, r3, #16
 80030fc:	627b      	str	r3, [r7, #36]	; 0x24
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	330c      	adds	r3, #12
 8003104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003106:	623a      	str	r2, [r7, #32]
 8003108:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800310a:	69f9      	ldr	r1, [r7, #28]
 800310c:	6a3a      	ldr	r2, [r7, #32]
 800310e:	e841 2300 	strex	r3, r2, [r1]
 8003112:	61bb      	str	r3, [r7, #24]
   return(result);
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1e5      	bne.n	80030e6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0310 	and.w	r3, r3, #16
 8003124:	2b10      	cmp	r3, #16
 8003126:	d10a      	bne.n	800313e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003128:	2300      	movs	r3, #0
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	60fb      	str	r3, [r7, #12]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003142:	4619      	mov	r1, r3
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f7ff fdd1 	bl	8002cec <HAL_UARTEx_RxEventCallback>
 800314a:	e002      	b.n	8003152 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f7fd fc85 	bl	8000a5c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003152:	2300      	movs	r3, #0
 8003154:	e002      	b.n	800315c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003156:	2300      	movs	r3, #0
 8003158:	e000      	b.n	800315c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800315a:	2302      	movs	r3, #2
  }
}
 800315c:	4618      	mov	r0, r3
 800315e:	3730      	adds	r7, #48	; 0x30
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003164:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003168:	b0c0      	sub	sp, #256	; 0x100
 800316a:	af00      	add	r7, sp, #0
 800316c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800317c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003180:	68d9      	ldr	r1, [r3, #12]
 8003182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	ea40 0301 	orr.w	r3, r0, r1
 800318c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800318e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	431a      	orrs	r2, r3
 800319c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	431a      	orrs	r2, r3
 80031a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80031b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80031bc:	f021 010c 	bic.w	r1, r1, #12
 80031c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80031ca:	430b      	orrs	r3, r1
 80031cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80031da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031de:	6999      	ldr	r1, [r3, #24]
 80031e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	ea40 0301 	orr.w	r3, r0, r1
 80031ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	4b8f      	ldr	r3, [pc, #572]	; (8003430 <UART_SetConfig+0x2cc>)
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d005      	beq.n	8003204 <UART_SetConfig+0xa0>
 80031f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	4b8d      	ldr	r3, [pc, #564]	; (8003434 <UART_SetConfig+0x2d0>)
 8003200:	429a      	cmp	r2, r3
 8003202:	d104      	bne.n	800320e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003204:	f7ff f9b8 	bl	8002578 <HAL_RCC_GetPCLK2Freq>
 8003208:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800320c:	e003      	b.n	8003216 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800320e:	f7ff f99f 	bl	8002550 <HAL_RCC_GetPCLK1Freq>
 8003212:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003220:	f040 810c 	bne.w	800343c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003224:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003228:	2200      	movs	r2, #0
 800322a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800322e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003232:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003236:	4622      	mov	r2, r4
 8003238:	462b      	mov	r3, r5
 800323a:	1891      	adds	r1, r2, r2
 800323c:	65b9      	str	r1, [r7, #88]	; 0x58
 800323e:	415b      	adcs	r3, r3
 8003240:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003242:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003246:	4621      	mov	r1, r4
 8003248:	eb12 0801 	adds.w	r8, r2, r1
 800324c:	4629      	mov	r1, r5
 800324e:	eb43 0901 	adc.w	r9, r3, r1
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800325e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003262:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003266:	4690      	mov	r8, r2
 8003268:	4699      	mov	r9, r3
 800326a:	4623      	mov	r3, r4
 800326c:	eb18 0303 	adds.w	r3, r8, r3
 8003270:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003274:	462b      	mov	r3, r5
 8003276:	eb49 0303 	adc.w	r3, r9, r3
 800327a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800327e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800328a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800328e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003292:	460b      	mov	r3, r1
 8003294:	18db      	adds	r3, r3, r3
 8003296:	653b      	str	r3, [r7, #80]	; 0x50
 8003298:	4613      	mov	r3, r2
 800329a:	eb42 0303 	adc.w	r3, r2, r3
 800329e:	657b      	str	r3, [r7, #84]	; 0x54
 80032a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80032a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80032a8:	f7fc fff2 	bl	8000290 <__aeabi_uldivmod>
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	4b61      	ldr	r3, [pc, #388]	; (8003438 <UART_SetConfig+0x2d4>)
 80032b2:	fba3 2302 	umull	r2, r3, r3, r2
 80032b6:	095b      	lsrs	r3, r3, #5
 80032b8:	011c      	lsls	r4, r3, #4
 80032ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032be:	2200      	movs	r2, #0
 80032c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80032c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80032c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80032cc:	4642      	mov	r2, r8
 80032ce:	464b      	mov	r3, r9
 80032d0:	1891      	adds	r1, r2, r2
 80032d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80032d4:	415b      	adcs	r3, r3
 80032d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80032dc:	4641      	mov	r1, r8
 80032de:	eb12 0a01 	adds.w	sl, r2, r1
 80032e2:	4649      	mov	r1, r9
 80032e4:	eb43 0b01 	adc.w	fp, r3, r1
 80032e8:	f04f 0200 	mov.w	r2, #0
 80032ec:	f04f 0300 	mov.w	r3, #0
 80032f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032fc:	4692      	mov	sl, r2
 80032fe:	469b      	mov	fp, r3
 8003300:	4643      	mov	r3, r8
 8003302:	eb1a 0303 	adds.w	r3, sl, r3
 8003306:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800330a:	464b      	mov	r3, r9
 800330c:	eb4b 0303 	adc.w	r3, fp, r3
 8003310:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003320:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003324:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003328:	460b      	mov	r3, r1
 800332a:	18db      	adds	r3, r3, r3
 800332c:	643b      	str	r3, [r7, #64]	; 0x40
 800332e:	4613      	mov	r3, r2
 8003330:	eb42 0303 	adc.w	r3, r2, r3
 8003334:	647b      	str	r3, [r7, #68]	; 0x44
 8003336:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800333a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800333e:	f7fc ffa7 	bl	8000290 <__aeabi_uldivmod>
 8003342:	4602      	mov	r2, r0
 8003344:	460b      	mov	r3, r1
 8003346:	4611      	mov	r1, r2
 8003348:	4b3b      	ldr	r3, [pc, #236]	; (8003438 <UART_SetConfig+0x2d4>)
 800334a:	fba3 2301 	umull	r2, r3, r3, r1
 800334e:	095b      	lsrs	r3, r3, #5
 8003350:	2264      	movs	r2, #100	; 0x64
 8003352:	fb02 f303 	mul.w	r3, r2, r3
 8003356:	1acb      	subs	r3, r1, r3
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800335e:	4b36      	ldr	r3, [pc, #216]	; (8003438 <UART_SetConfig+0x2d4>)
 8003360:	fba3 2302 	umull	r2, r3, r3, r2
 8003364:	095b      	lsrs	r3, r3, #5
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800336c:	441c      	add	r4, r3
 800336e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003372:	2200      	movs	r2, #0
 8003374:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003378:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800337c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003380:	4642      	mov	r2, r8
 8003382:	464b      	mov	r3, r9
 8003384:	1891      	adds	r1, r2, r2
 8003386:	63b9      	str	r1, [r7, #56]	; 0x38
 8003388:	415b      	adcs	r3, r3
 800338a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800338c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003390:	4641      	mov	r1, r8
 8003392:	1851      	adds	r1, r2, r1
 8003394:	6339      	str	r1, [r7, #48]	; 0x30
 8003396:	4649      	mov	r1, r9
 8003398:	414b      	adcs	r3, r1
 800339a:	637b      	str	r3, [r7, #52]	; 0x34
 800339c:	f04f 0200 	mov.w	r2, #0
 80033a0:	f04f 0300 	mov.w	r3, #0
 80033a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80033a8:	4659      	mov	r1, fp
 80033aa:	00cb      	lsls	r3, r1, #3
 80033ac:	4651      	mov	r1, sl
 80033ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033b2:	4651      	mov	r1, sl
 80033b4:	00ca      	lsls	r2, r1, #3
 80033b6:	4610      	mov	r0, r2
 80033b8:	4619      	mov	r1, r3
 80033ba:	4603      	mov	r3, r0
 80033bc:	4642      	mov	r2, r8
 80033be:	189b      	adds	r3, r3, r2
 80033c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033c4:	464b      	mov	r3, r9
 80033c6:	460a      	mov	r2, r1
 80033c8:	eb42 0303 	adc.w	r3, r2, r3
 80033cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80033dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80033e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80033e4:	460b      	mov	r3, r1
 80033e6:	18db      	adds	r3, r3, r3
 80033e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80033ea:	4613      	mov	r3, r2
 80033ec:	eb42 0303 	adc.w	r3, r2, r3
 80033f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80033fa:	f7fc ff49 	bl	8000290 <__aeabi_uldivmod>
 80033fe:	4602      	mov	r2, r0
 8003400:	460b      	mov	r3, r1
 8003402:	4b0d      	ldr	r3, [pc, #52]	; (8003438 <UART_SetConfig+0x2d4>)
 8003404:	fba3 1302 	umull	r1, r3, r3, r2
 8003408:	095b      	lsrs	r3, r3, #5
 800340a:	2164      	movs	r1, #100	; 0x64
 800340c:	fb01 f303 	mul.w	r3, r1, r3
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	3332      	adds	r3, #50	; 0x32
 8003416:	4a08      	ldr	r2, [pc, #32]	; (8003438 <UART_SetConfig+0x2d4>)
 8003418:	fba2 2303 	umull	r2, r3, r2, r3
 800341c:	095b      	lsrs	r3, r3, #5
 800341e:	f003 0207 	and.w	r2, r3, #7
 8003422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4422      	add	r2, r4
 800342a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800342c:	e106      	b.n	800363c <UART_SetConfig+0x4d8>
 800342e:	bf00      	nop
 8003430:	40011000 	.word	0x40011000
 8003434:	40011400 	.word	0x40011400
 8003438:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800343c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003440:	2200      	movs	r2, #0
 8003442:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003446:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800344a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800344e:	4642      	mov	r2, r8
 8003450:	464b      	mov	r3, r9
 8003452:	1891      	adds	r1, r2, r2
 8003454:	6239      	str	r1, [r7, #32]
 8003456:	415b      	adcs	r3, r3
 8003458:	627b      	str	r3, [r7, #36]	; 0x24
 800345a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800345e:	4641      	mov	r1, r8
 8003460:	1854      	adds	r4, r2, r1
 8003462:	4649      	mov	r1, r9
 8003464:	eb43 0501 	adc.w	r5, r3, r1
 8003468:	f04f 0200 	mov.w	r2, #0
 800346c:	f04f 0300 	mov.w	r3, #0
 8003470:	00eb      	lsls	r3, r5, #3
 8003472:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003476:	00e2      	lsls	r2, r4, #3
 8003478:	4614      	mov	r4, r2
 800347a:	461d      	mov	r5, r3
 800347c:	4643      	mov	r3, r8
 800347e:	18e3      	adds	r3, r4, r3
 8003480:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003484:	464b      	mov	r3, r9
 8003486:	eb45 0303 	adc.w	r3, r5, r3
 800348a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800348e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800349a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800349e:	f04f 0200 	mov.w	r2, #0
 80034a2:	f04f 0300 	mov.w	r3, #0
 80034a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80034aa:	4629      	mov	r1, r5
 80034ac:	008b      	lsls	r3, r1, #2
 80034ae:	4621      	mov	r1, r4
 80034b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034b4:	4621      	mov	r1, r4
 80034b6:	008a      	lsls	r2, r1, #2
 80034b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80034bc:	f7fc fee8 	bl	8000290 <__aeabi_uldivmod>
 80034c0:	4602      	mov	r2, r0
 80034c2:	460b      	mov	r3, r1
 80034c4:	4b60      	ldr	r3, [pc, #384]	; (8003648 <UART_SetConfig+0x4e4>)
 80034c6:	fba3 2302 	umull	r2, r3, r3, r2
 80034ca:	095b      	lsrs	r3, r3, #5
 80034cc:	011c      	lsls	r4, r3, #4
 80034ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034d2:	2200      	movs	r2, #0
 80034d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80034d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80034dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80034e0:	4642      	mov	r2, r8
 80034e2:	464b      	mov	r3, r9
 80034e4:	1891      	adds	r1, r2, r2
 80034e6:	61b9      	str	r1, [r7, #24]
 80034e8:	415b      	adcs	r3, r3
 80034ea:	61fb      	str	r3, [r7, #28]
 80034ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034f0:	4641      	mov	r1, r8
 80034f2:	1851      	adds	r1, r2, r1
 80034f4:	6139      	str	r1, [r7, #16]
 80034f6:	4649      	mov	r1, r9
 80034f8:	414b      	adcs	r3, r1
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	f04f 0200 	mov.w	r2, #0
 8003500:	f04f 0300 	mov.w	r3, #0
 8003504:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003508:	4659      	mov	r1, fp
 800350a:	00cb      	lsls	r3, r1, #3
 800350c:	4651      	mov	r1, sl
 800350e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003512:	4651      	mov	r1, sl
 8003514:	00ca      	lsls	r2, r1, #3
 8003516:	4610      	mov	r0, r2
 8003518:	4619      	mov	r1, r3
 800351a:	4603      	mov	r3, r0
 800351c:	4642      	mov	r2, r8
 800351e:	189b      	adds	r3, r3, r2
 8003520:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003524:	464b      	mov	r3, r9
 8003526:	460a      	mov	r2, r1
 8003528:	eb42 0303 	adc.w	r3, r2, r3
 800352c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	67bb      	str	r3, [r7, #120]	; 0x78
 800353a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800353c:	f04f 0200 	mov.w	r2, #0
 8003540:	f04f 0300 	mov.w	r3, #0
 8003544:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003548:	4649      	mov	r1, r9
 800354a:	008b      	lsls	r3, r1, #2
 800354c:	4641      	mov	r1, r8
 800354e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003552:	4641      	mov	r1, r8
 8003554:	008a      	lsls	r2, r1, #2
 8003556:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800355a:	f7fc fe99 	bl	8000290 <__aeabi_uldivmod>
 800355e:	4602      	mov	r2, r0
 8003560:	460b      	mov	r3, r1
 8003562:	4611      	mov	r1, r2
 8003564:	4b38      	ldr	r3, [pc, #224]	; (8003648 <UART_SetConfig+0x4e4>)
 8003566:	fba3 2301 	umull	r2, r3, r3, r1
 800356a:	095b      	lsrs	r3, r3, #5
 800356c:	2264      	movs	r2, #100	; 0x64
 800356e:	fb02 f303 	mul.w	r3, r2, r3
 8003572:	1acb      	subs	r3, r1, r3
 8003574:	011b      	lsls	r3, r3, #4
 8003576:	3332      	adds	r3, #50	; 0x32
 8003578:	4a33      	ldr	r2, [pc, #204]	; (8003648 <UART_SetConfig+0x4e4>)
 800357a:	fba2 2303 	umull	r2, r3, r2, r3
 800357e:	095b      	lsrs	r3, r3, #5
 8003580:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003584:	441c      	add	r4, r3
 8003586:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800358a:	2200      	movs	r2, #0
 800358c:	673b      	str	r3, [r7, #112]	; 0x70
 800358e:	677a      	str	r2, [r7, #116]	; 0x74
 8003590:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003594:	4642      	mov	r2, r8
 8003596:	464b      	mov	r3, r9
 8003598:	1891      	adds	r1, r2, r2
 800359a:	60b9      	str	r1, [r7, #8]
 800359c:	415b      	adcs	r3, r3
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035a4:	4641      	mov	r1, r8
 80035a6:	1851      	adds	r1, r2, r1
 80035a8:	6039      	str	r1, [r7, #0]
 80035aa:	4649      	mov	r1, r9
 80035ac:	414b      	adcs	r3, r1
 80035ae:	607b      	str	r3, [r7, #4]
 80035b0:	f04f 0200 	mov.w	r2, #0
 80035b4:	f04f 0300 	mov.w	r3, #0
 80035b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80035bc:	4659      	mov	r1, fp
 80035be:	00cb      	lsls	r3, r1, #3
 80035c0:	4651      	mov	r1, sl
 80035c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035c6:	4651      	mov	r1, sl
 80035c8:	00ca      	lsls	r2, r1, #3
 80035ca:	4610      	mov	r0, r2
 80035cc:	4619      	mov	r1, r3
 80035ce:	4603      	mov	r3, r0
 80035d0:	4642      	mov	r2, r8
 80035d2:	189b      	adds	r3, r3, r2
 80035d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80035d6:	464b      	mov	r3, r9
 80035d8:	460a      	mov	r2, r1
 80035da:	eb42 0303 	adc.w	r3, r2, r3
 80035de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	663b      	str	r3, [r7, #96]	; 0x60
 80035ea:	667a      	str	r2, [r7, #100]	; 0x64
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	f04f 0300 	mov.w	r3, #0
 80035f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80035f8:	4649      	mov	r1, r9
 80035fa:	008b      	lsls	r3, r1, #2
 80035fc:	4641      	mov	r1, r8
 80035fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003602:	4641      	mov	r1, r8
 8003604:	008a      	lsls	r2, r1, #2
 8003606:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800360a:	f7fc fe41 	bl	8000290 <__aeabi_uldivmod>
 800360e:	4602      	mov	r2, r0
 8003610:	460b      	mov	r3, r1
 8003612:	4b0d      	ldr	r3, [pc, #52]	; (8003648 <UART_SetConfig+0x4e4>)
 8003614:	fba3 1302 	umull	r1, r3, r3, r2
 8003618:	095b      	lsrs	r3, r3, #5
 800361a:	2164      	movs	r1, #100	; 0x64
 800361c:	fb01 f303 	mul.w	r3, r1, r3
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	011b      	lsls	r3, r3, #4
 8003624:	3332      	adds	r3, #50	; 0x32
 8003626:	4a08      	ldr	r2, [pc, #32]	; (8003648 <UART_SetConfig+0x4e4>)
 8003628:	fba2 2303 	umull	r2, r3, r2, r3
 800362c:	095b      	lsrs	r3, r3, #5
 800362e:	f003 020f 	and.w	r2, r3, #15
 8003632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4422      	add	r2, r4
 800363a:	609a      	str	r2, [r3, #8]
}
 800363c:	bf00      	nop
 800363e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003642:	46bd      	mov	sp, r7
 8003644:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003648:	51eb851f 	.word	0x51eb851f

0800364c <siprintf>:
 800364c:	b40e      	push	{r1, r2, r3}
 800364e:	b500      	push	{lr}
 8003650:	b09c      	sub	sp, #112	; 0x70
 8003652:	ab1d      	add	r3, sp, #116	; 0x74
 8003654:	9002      	str	r0, [sp, #8]
 8003656:	9006      	str	r0, [sp, #24]
 8003658:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800365c:	4809      	ldr	r0, [pc, #36]	; (8003684 <siprintf+0x38>)
 800365e:	9107      	str	r1, [sp, #28]
 8003660:	9104      	str	r1, [sp, #16]
 8003662:	4909      	ldr	r1, [pc, #36]	; (8003688 <siprintf+0x3c>)
 8003664:	f853 2b04 	ldr.w	r2, [r3], #4
 8003668:	9105      	str	r1, [sp, #20]
 800366a:	6800      	ldr	r0, [r0, #0]
 800366c:	9301      	str	r3, [sp, #4]
 800366e:	a902      	add	r1, sp, #8
 8003670:	f000 f992 	bl	8003998 <_svfiprintf_r>
 8003674:	9b02      	ldr	r3, [sp, #8]
 8003676:	2200      	movs	r2, #0
 8003678:	701a      	strb	r2, [r3, #0]
 800367a:	b01c      	add	sp, #112	; 0x70
 800367c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003680:	b003      	add	sp, #12
 8003682:	4770      	bx	lr
 8003684:	20000058 	.word	0x20000058
 8003688:	ffff0208 	.word	0xffff0208

0800368c <memset>:
 800368c:	4402      	add	r2, r0
 800368e:	4603      	mov	r3, r0
 8003690:	4293      	cmp	r3, r2
 8003692:	d100      	bne.n	8003696 <memset+0xa>
 8003694:	4770      	bx	lr
 8003696:	f803 1b01 	strb.w	r1, [r3], #1
 800369a:	e7f9      	b.n	8003690 <memset+0x4>

0800369c <__errno>:
 800369c:	4b01      	ldr	r3, [pc, #4]	; (80036a4 <__errno+0x8>)
 800369e:	6818      	ldr	r0, [r3, #0]
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	20000058 	.word	0x20000058

080036a8 <__libc_init_array>:
 80036a8:	b570      	push	{r4, r5, r6, lr}
 80036aa:	4d0d      	ldr	r5, [pc, #52]	; (80036e0 <__libc_init_array+0x38>)
 80036ac:	4c0d      	ldr	r4, [pc, #52]	; (80036e4 <__libc_init_array+0x3c>)
 80036ae:	1b64      	subs	r4, r4, r5
 80036b0:	10a4      	asrs	r4, r4, #2
 80036b2:	2600      	movs	r6, #0
 80036b4:	42a6      	cmp	r6, r4
 80036b6:	d109      	bne.n	80036cc <__libc_init_array+0x24>
 80036b8:	4d0b      	ldr	r5, [pc, #44]	; (80036e8 <__libc_init_array+0x40>)
 80036ba:	4c0c      	ldr	r4, [pc, #48]	; (80036ec <__libc_init_array+0x44>)
 80036bc:	f000 fc6a 	bl	8003f94 <_init>
 80036c0:	1b64      	subs	r4, r4, r5
 80036c2:	10a4      	asrs	r4, r4, #2
 80036c4:	2600      	movs	r6, #0
 80036c6:	42a6      	cmp	r6, r4
 80036c8:	d105      	bne.n	80036d6 <__libc_init_array+0x2e>
 80036ca:	bd70      	pop	{r4, r5, r6, pc}
 80036cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80036d0:	4798      	blx	r3
 80036d2:	3601      	adds	r6, #1
 80036d4:	e7ee      	b.n	80036b4 <__libc_init_array+0xc>
 80036d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80036da:	4798      	blx	r3
 80036dc:	3601      	adds	r6, #1
 80036de:	e7f2      	b.n	80036c6 <__libc_init_array+0x1e>
 80036e0:	0800402c 	.word	0x0800402c
 80036e4:	0800402c 	.word	0x0800402c
 80036e8:	0800402c 	.word	0x0800402c
 80036ec:	08004030 	.word	0x08004030

080036f0 <__retarget_lock_acquire_recursive>:
 80036f0:	4770      	bx	lr

080036f2 <__retarget_lock_release_recursive>:
 80036f2:	4770      	bx	lr

080036f4 <_free_r>:
 80036f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80036f6:	2900      	cmp	r1, #0
 80036f8:	d044      	beq.n	8003784 <_free_r+0x90>
 80036fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036fe:	9001      	str	r0, [sp, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	f1a1 0404 	sub.w	r4, r1, #4
 8003706:	bfb8      	it	lt
 8003708:	18e4      	addlt	r4, r4, r3
 800370a:	f000 f8df 	bl	80038cc <__malloc_lock>
 800370e:	4a1e      	ldr	r2, [pc, #120]	; (8003788 <_free_r+0x94>)
 8003710:	9801      	ldr	r0, [sp, #4]
 8003712:	6813      	ldr	r3, [r2, #0]
 8003714:	b933      	cbnz	r3, 8003724 <_free_r+0x30>
 8003716:	6063      	str	r3, [r4, #4]
 8003718:	6014      	str	r4, [r2, #0]
 800371a:	b003      	add	sp, #12
 800371c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003720:	f000 b8da 	b.w	80038d8 <__malloc_unlock>
 8003724:	42a3      	cmp	r3, r4
 8003726:	d908      	bls.n	800373a <_free_r+0x46>
 8003728:	6825      	ldr	r5, [r4, #0]
 800372a:	1961      	adds	r1, r4, r5
 800372c:	428b      	cmp	r3, r1
 800372e:	bf01      	itttt	eq
 8003730:	6819      	ldreq	r1, [r3, #0]
 8003732:	685b      	ldreq	r3, [r3, #4]
 8003734:	1949      	addeq	r1, r1, r5
 8003736:	6021      	streq	r1, [r4, #0]
 8003738:	e7ed      	b.n	8003716 <_free_r+0x22>
 800373a:	461a      	mov	r2, r3
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	b10b      	cbz	r3, 8003744 <_free_r+0x50>
 8003740:	42a3      	cmp	r3, r4
 8003742:	d9fa      	bls.n	800373a <_free_r+0x46>
 8003744:	6811      	ldr	r1, [r2, #0]
 8003746:	1855      	adds	r5, r2, r1
 8003748:	42a5      	cmp	r5, r4
 800374a:	d10b      	bne.n	8003764 <_free_r+0x70>
 800374c:	6824      	ldr	r4, [r4, #0]
 800374e:	4421      	add	r1, r4
 8003750:	1854      	adds	r4, r2, r1
 8003752:	42a3      	cmp	r3, r4
 8003754:	6011      	str	r1, [r2, #0]
 8003756:	d1e0      	bne.n	800371a <_free_r+0x26>
 8003758:	681c      	ldr	r4, [r3, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	6053      	str	r3, [r2, #4]
 800375e:	440c      	add	r4, r1
 8003760:	6014      	str	r4, [r2, #0]
 8003762:	e7da      	b.n	800371a <_free_r+0x26>
 8003764:	d902      	bls.n	800376c <_free_r+0x78>
 8003766:	230c      	movs	r3, #12
 8003768:	6003      	str	r3, [r0, #0]
 800376a:	e7d6      	b.n	800371a <_free_r+0x26>
 800376c:	6825      	ldr	r5, [r4, #0]
 800376e:	1961      	adds	r1, r4, r5
 8003770:	428b      	cmp	r3, r1
 8003772:	bf04      	itt	eq
 8003774:	6819      	ldreq	r1, [r3, #0]
 8003776:	685b      	ldreq	r3, [r3, #4]
 8003778:	6063      	str	r3, [r4, #4]
 800377a:	bf04      	itt	eq
 800377c:	1949      	addeq	r1, r1, r5
 800377e:	6021      	streq	r1, [r4, #0]
 8003780:	6054      	str	r4, [r2, #4]
 8003782:	e7ca      	b.n	800371a <_free_r+0x26>
 8003784:	b003      	add	sp, #12
 8003786:	bd30      	pop	{r4, r5, pc}
 8003788:	20000264 	.word	0x20000264

0800378c <sbrk_aligned>:
 800378c:	b570      	push	{r4, r5, r6, lr}
 800378e:	4e0e      	ldr	r6, [pc, #56]	; (80037c8 <sbrk_aligned+0x3c>)
 8003790:	460c      	mov	r4, r1
 8003792:	6831      	ldr	r1, [r6, #0]
 8003794:	4605      	mov	r5, r0
 8003796:	b911      	cbnz	r1, 800379e <sbrk_aligned+0x12>
 8003798:	f000 fba6 	bl	8003ee8 <_sbrk_r>
 800379c:	6030      	str	r0, [r6, #0]
 800379e:	4621      	mov	r1, r4
 80037a0:	4628      	mov	r0, r5
 80037a2:	f000 fba1 	bl	8003ee8 <_sbrk_r>
 80037a6:	1c43      	adds	r3, r0, #1
 80037a8:	d00a      	beq.n	80037c0 <sbrk_aligned+0x34>
 80037aa:	1cc4      	adds	r4, r0, #3
 80037ac:	f024 0403 	bic.w	r4, r4, #3
 80037b0:	42a0      	cmp	r0, r4
 80037b2:	d007      	beq.n	80037c4 <sbrk_aligned+0x38>
 80037b4:	1a21      	subs	r1, r4, r0
 80037b6:	4628      	mov	r0, r5
 80037b8:	f000 fb96 	bl	8003ee8 <_sbrk_r>
 80037bc:	3001      	adds	r0, #1
 80037be:	d101      	bne.n	80037c4 <sbrk_aligned+0x38>
 80037c0:	f04f 34ff 	mov.w	r4, #4294967295
 80037c4:	4620      	mov	r0, r4
 80037c6:	bd70      	pop	{r4, r5, r6, pc}
 80037c8:	20000268 	.word	0x20000268

080037cc <_malloc_r>:
 80037cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037d0:	1ccd      	adds	r5, r1, #3
 80037d2:	f025 0503 	bic.w	r5, r5, #3
 80037d6:	3508      	adds	r5, #8
 80037d8:	2d0c      	cmp	r5, #12
 80037da:	bf38      	it	cc
 80037dc:	250c      	movcc	r5, #12
 80037de:	2d00      	cmp	r5, #0
 80037e0:	4607      	mov	r7, r0
 80037e2:	db01      	blt.n	80037e8 <_malloc_r+0x1c>
 80037e4:	42a9      	cmp	r1, r5
 80037e6:	d905      	bls.n	80037f4 <_malloc_r+0x28>
 80037e8:	230c      	movs	r3, #12
 80037ea:	603b      	str	r3, [r7, #0]
 80037ec:	2600      	movs	r6, #0
 80037ee:	4630      	mov	r0, r6
 80037f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80038c8 <_malloc_r+0xfc>
 80037f8:	f000 f868 	bl	80038cc <__malloc_lock>
 80037fc:	f8d8 3000 	ldr.w	r3, [r8]
 8003800:	461c      	mov	r4, r3
 8003802:	bb5c      	cbnz	r4, 800385c <_malloc_r+0x90>
 8003804:	4629      	mov	r1, r5
 8003806:	4638      	mov	r0, r7
 8003808:	f7ff ffc0 	bl	800378c <sbrk_aligned>
 800380c:	1c43      	adds	r3, r0, #1
 800380e:	4604      	mov	r4, r0
 8003810:	d155      	bne.n	80038be <_malloc_r+0xf2>
 8003812:	f8d8 4000 	ldr.w	r4, [r8]
 8003816:	4626      	mov	r6, r4
 8003818:	2e00      	cmp	r6, #0
 800381a:	d145      	bne.n	80038a8 <_malloc_r+0xdc>
 800381c:	2c00      	cmp	r4, #0
 800381e:	d048      	beq.n	80038b2 <_malloc_r+0xe6>
 8003820:	6823      	ldr	r3, [r4, #0]
 8003822:	4631      	mov	r1, r6
 8003824:	4638      	mov	r0, r7
 8003826:	eb04 0903 	add.w	r9, r4, r3
 800382a:	f000 fb5d 	bl	8003ee8 <_sbrk_r>
 800382e:	4581      	cmp	r9, r0
 8003830:	d13f      	bne.n	80038b2 <_malloc_r+0xe6>
 8003832:	6821      	ldr	r1, [r4, #0]
 8003834:	1a6d      	subs	r5, r5, r1
 8003836:	4629      	mov	r1, r5
 8003838:	4638      	mov	r0, r7
 800383a:	f7ff ffa7 	bl	800378c <sbrk_aligned>
 800383e:	3001      	adds	r0, #1
 8003840:	d037      	beq.n	80038b2 <_malloc_r+0xe6>
 8003842:	6823      	ldr	r3, [r4, #0]
 8003844:	442b      	add	r3, r5
 8003846:	6023      	str	r3, [r4, #0]
 8003848:	f8d8 3000 	ldr.w	r3, [r8]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d038      	beq.n	80038c2 <_malloc_r+0xf6>
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	42a2      	cmp	r2, r4
 8003854:	d12b      	bne.n	80038ae <_malloc_r+0xe2>
 8003856:	2200      	movs	r2, #0
 8003858:	605a      	str	r2, [r3, #4]
 800385a:	e00f      	b.n	800387c <_malloc_r+0xb0>
 800385c:	6822      	ldr	r2, [r4, #0]
 800385e:	1b52      	subs	r2, r2, r5
 8003860:	d41f      	bmi.n	80038a2 <_malloc_r+0xd6>
 8003862:	2a0b      	cmp	r2, #11
 8003864:	d917      	bls.n	8003896 <_malloc_r+0xca>
 8003866:	1961      	adds	r1, r4, r5
 8003868:	42a3      	cmp	r3, r4
 800386a:	6025      	str	r5, [r4, #0]
 800386c:	bf18      	it	ne
 800386e:	6059      	strne	r1, [r3, #4]
 8003870:	6863      	ldr	r3, [r4, #4]
 8003872:	bf08      	it	eq
 8003874:	f8c8 1000 	streq.w	r1, [r8]
 8003878:	5162      	str	r2, [r4, r5]
 800387a:	604b      	str	r3, [r1, #4]
 800387c:	4638      	mov	r0, r7
 800387e:	f104 060b 	add.w	r6, r4, #11
 8003882:	f000 f829 	bl	80038d8 <__malloc_unlock>
 8003886:	f026 0607 	bic.w	r6, r6, #7
 800388a:	1d23      	adds	r3, r4, #4
 800388c:	1af2      	subs	r2, r6, r3
 800388e:	d0ae      	beq.n	80037ee <_malloc_r+0x22>
 8003890:	1b9b      	subs	r3, r3, r6
 8003892:	50a3      	str	r3, [r4, r2]
 8003894:	e7ab      	b.n	80037ee <_malloc_r+0x22>
 8003896:	42a3      	cmp	r3, r4
 8003898:	6862      	ldr	r2, [r4, #4]
 800389a:	d1dd      	bne.n	8003858 <_malloc_r+0x8c>
 800389c:	f8c8 2000 	str.w	r2, [r8]
 80038a0:	e7ec      	b.n	800387c <_malloc_r+0xb0>
 80038a2:	4623      	mov	r3, r4
 80038a4:	6864      	ldr	r4, [r4, #4]
 80038a6:	e7ac      	b.n	8003802 <_malloc_r+0x36>
 80038a8:	4634      	mov	r4, r6
 80038aa:	6876      	ldr	r6, [r6, #4]
 80038ac:	e7b4      	b.n	8003818 <_malloc_r+0x4c>
 80038ae:	4613      	mov	r3, r2
 80038b0:	e7cc      	b.n	800384c <_malloc_r+0x80>
 80038b2:	230c      	movs	r3, #12
 80038b4:	603b      	str	r3, [r7, #0]
 80038b6:	4638      	mov	r0, r7
 80038b8:	f000 f80e 	bl	80038d8 <__malloc_unlock>
 80038bc:	e797      	b.n	80037ee <_malloc_r+0x22>
 80038be:	6025      	str	r5, [r4, #0]
 80038c0:	e7dc      	b.n	800387c <_malloc_r+0xb0>
 80038c2:	605b      	str	r3, [r3, #4]
 80038c4:	deff      	udf	#255	; 0xff
 80038c6:	bf00      	nop
 80038c8:	20000264 	.word	0x20000264

080038cc <__malloc_lock>:
 80038cc:	4801      	ldr	r0, [pc, #4]	; (80038d4 <__malloc_lock+0x8>)
 80038ce:	f7ff bf0f 	b.w	80036f0 <__retarget_lock_acquire_recursive>
 80038d2:	bf00      	nop
 80038d4:	20000260 	.word	0x20000260

080038d8 <__malloc_unlock>:
 80038d8:	4801      	ldr	r0, [pc, #4]	; (80038e0 <__malloc_unlock+0x8>)
 80038da:	f7ff bf0a 	b.w	80036f2 <__retarget_lock_release_recursive>
 80038de:	bf00      	nop
 80038e0:	20000260 	.word	0x20000260

080038e4 <__ssputs_r>:
 80038e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038e8:	688e      	ldr	r6, [r1, #8]
 80038ea:	461f      	mov	r7, r3
 80038ec:	42be      	cmp	r6, r7
 80038ee:	680b      	ldr	r3, [r1, #0]
 80038f0:	4682      	mov	sl, r0
 80038f2:	460c      	mov	r4, r1
 80038f4:	4690      	mov	r8, r2
 80038f6:	d82c      	bhi.n	8003952 <__ssputs_r+0x6e>
 80038f8:	898a      	ldrh	r2, [r1, #12]
 80038fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80038fe:	d026      	beq.n	800394e <__ssputs_r+0x6a>
 8003900:	6965      	ldr	r5, [r4, #20]
 8003902:	6909      	ldr	r1, [r1, #16]
 8003904:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003908:	eba3 0901 	sub.w	r9, r3, r1
 800390c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003910:	1c7b      	adds	r3, r7, #1
 8003912:	444b      	add	r3, r9
 8003914:	106d      	asrs	r5, r5, #1
 8003916:	429d      	cmp	r5, r3
 8003918:	bf38      	it	cc
 800391a:	461d      	movcc	r5, r3
 800391c:	0553      	lsls	r3, r2, #21
 800391e:	d527      	bpl.n	8003970 <__ssputs_r+0x8c>
 8003920:	4629      	mov	r1, r5
 8003922:	f7ff ff53 	bl	80037cc <_malloc_r>
 8003926:	4606      	mov	r6, r0
 8003928:	b360      	cbz	r0, 8003984 <__ssputs_r+0xa0>
 800392a:	6921      	ldr	r1, [r4, #16]
 800392c:	464a      	mov	r2, r9
 800392e:	f000 faeb 	bl	8003f08 <memcpy>
 8003932:	89a3      	ldrh	r3, [r4, #12]
 8003934:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800393c:	81a3      	strh	r3, [r4, #12]
 800393e:	6126      	str	r6, [r4, #16]
 8003940:	6165      	str	r5, [r4, #20]
 8003942:	444e      	add	r6, r9
 8003944:	eba5 0509 	sub.w	r5, r5, r9
 8003948:	6026      	str	r6, [r4, #0]
 800394a:	60a5      	str	r5, [r4, #8]
 800394c:	463e      	mov	r6, r7
 800394e:	42be      	cmp	r6, r7
 8003950:	d900      	bls.n	8003954 <__ssputs_r+0x70>
 8003952:	463e      	mov	r6, r7
 8003954:	6820      	ldr	r0, [r4, #0]
 8003956:	4632      	mov	r2, r6
 8003958:	4641      	mov	r1, r8
 800395a:	f000 faab 	bl	8003eb4 <memmove>
 800395e:	68a3      	ldr	r3, [r4, #8]
 8003960:	1b9b      	subs	r3, r3, r6
 8003962:	60a3      	str	r3, [r4, #8]
 8003964:	6823      	ldr	r3, [r4, #0]
 8003966:	4433      	add	r3, r6
 8003968:	6023      	str	r3, [r4, #0]
 800396a:	2000      	movs	r0, #0
 800396c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003970:	462a      	mov	r2, r5
 8003972:	f000 fad7 	bl	8003f24 <_realloc_r>
 8003976:	4606      	mov	r6, r0
 8003978:	2800      	cmp	r0, #0
 800397a:	d1e0      	bne.n	800393e <__ssputs_r+0x5a>
 800397c:	6921      	ldr	r1, [r4, #16]
 800397e:	4650      	mov	r0, sl
 8003980:	f7ff feb8 	bl	80036f4 <_free_r>
 8003984:	230c      	movs	r3, #12
 8003986:	f8ca 3000 	str.w	r3, [sl]
 800398a:	89a3      	ldrh	r3, [r4, #12]
 800398c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003990:	81a3      	strh	r3, [r4, #12]
 8003992:	f04f 30ff 	mov.w	r0, #4294967295
 8003996:	e7e9      	b.n	800396c <__ssputs_r+0x88>

08003998 <_svfiprintf_r>:
 8003998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800399c:	4698      	mov	r8, r3
 800399e:	898b      	ldrh	r3, [r1, #12]
 80039a0:	061b      	lsls	r3, r3, #24
 80039a2:	b09d      	sub	sp, #116	; 0x74
 80039a4:	4607      	mov	r7, r0
 80039a6:	460d      	mov	r5, r1
 80039a8:	4614      	mov	r4, r2
 80039aa:	d50e      	bpl.n	80039ca <_svfiprintf_r+0x32>
 80039ac:	690b      	ldr	r3, [r1, #16]
 80039ae:	b963      	cbnz	r3, 80039ca <_svfiprintf_r+0x32>
 80039b0:	2140      	movs	r1, #64	; 0x40
 80039b2:	f7ff ff0b 	bl	80037cc <_malloc_r>
 80039b6:	6028      	str	r0, [r5, #0]
 80039b8:	6128      	str	r0, [r5, #16]
 80039ba:	b920      	cbnz	r0, 80039c6 <_svfiprintf_r+0x2e>
 80039bc:	230c      	movs	r3, #12
 80039be:	603b      	str	r3, [r7, #0]
 80039c0:	f04f 30ff 	mov.w	r0, #4294967295
 80039c4:	e0d0      	b.n	8003b68 <_svfiprintf_r+0x1d0>
 80039c6:	2340      	movs	r3, #64	; 0x40
 80039c8:	616b      	str	r3, [r5, #20]
 80039ca:	2300      	movs	r3, #0
 80039cc:	9309      	str	r3, [sp, #36]	; 0x24
 80039ce:	2320      	movs	r3, #32
 80039d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80039d8:	2330      	movs	r3, #48	; 0x30
 80039da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003b80 <_svfiprintf_r+0x1e8>
 80039de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039e2:	f04f 0901 	mov.w	r9, #1
 80039e6:	4623      	mov	r3, r4
 80039e8:	469a      	mov	sl, r3
 80039ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039ee:	b10a      	cbz	r2, 80039f4 <_svfiprintf_r+0x5c>
 80039f0:	2a25      	cmp	r2, #37	; 0x25
 80039f2:	d1f9      	bne.n	80039e8 <_svfiprintf_r+0x50>
 80039f4:	ebba 0b04 	subs.w	fp, sl, r4
 80039f8:	d00b      	beq.n	8003a12 <_svfiprintf_r+0x7a>
 80039fa:	465b      	mov	r3, fp
 80039fc:	4622      	mov	r2, r4
 80039fe:	4629      	mov	r1, r5
 8003a00:	4638      	mov	r0, r7
 8003a02:	f7ff ff6f 	bl	80038e4 <__ssputs_r>
 8003a06:	3001      	adds	r0, #1
 8003a08:	f000 80a9 	beq.w	8003b5e <_svfiprintf_r+0x1c6>
 8003a0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a0e:	445a      	add	r2, fp
 8003a10:	9209      	str	r2, [sp, #36]	; 0x24
 8003a12:	f89a 3000 	ldrb.w	r3, [sl]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f000 80a1 	beq.w	8003b5e <_svfiprintf_r+0x1c6>
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a26:	f10a 0a01 	add.w	sl, sl, #1
 8003a2a:	9304      	str	r3, [sp, #16]
 8003a2c:	9307      	str	r3, [sp, #28]
 8003a2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a32:	931a      	str	r3, [sp, #104]	; 0x68
 8003a34:	4654      	mov	r4, sl
 8003a36:	2205      	movs	r2, #5
 8003a38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a3c:	4850      	ldr	r0, [pc, #320]	; (8003b80 <_svfiprintf_r+0x1e8>)
 8003a3e:	f7fc fbd7 	bl	80001f0 <memchr>
 8003a42:	9a04      	ldr	r2, [sp, #16]
 8003a44:	b9d8      	cbnz	r0, 8003a7e <_svfiprintf_r+0xe6>
 8003a46:	06d0      	lsls	r0, r2, #27
 8003a48:	bf44      	itt	mi
 8003a4a:	2320      	movmi	r3, #32
 8003a4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a50:	0711      	lsls	r1, r2, #28
 8003a52:	bf44      	itt	mi
 8003a54:	232b      	movmi	r3, #43	; 0x2b
 8003a56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a5a:	f89a 3000 	ldrb.w	r3, [sl]
 8003a5e:	2b2a      	cmp	r3, #42	; 0x2a
 8003a60:	d015      	beq.n	8003a8e <_svfiprintf_r+0xf6>
 8003a62:	9a07      	ldr	r2, [sp, #28]
 8003a64:	4654      	mov	r4, sl
 8003a66:	2000      	movs	r0, #0
 8003a68:	f04f 0c0a 	mov.w	ip, #10
 8003a6c:	4621      	mov	r1, r4
 8003a6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a72:	3b30      	subs	r3, #48	; 0x30
 8003a74:	2b09      	cmp	r3, #9
 8003a76:	d94d      	bls.n	8003b14 <_svfiprintf_r+0x17c>
 8003a78:	b1b0      	cbz	r0, 8003aa8 <_svfiprintf_r+0x110>
 8003a7a:	9207      	str	r2, [sp, #28]
 8003a7c:	e014      	b.n	8003aa8 <_svfiprintf_r+0x110>
 8003a7e:	eba0 0308 	sub.w	r3, r0, r8
 8003a82:	fa09 f303 	lsl.w	r3, r9, r3
 8003a86:	4313      	orrs	r3, r2
 8003a88:	9304      	str	r3, [sp, #16]
 8003a8a:	46a2      	mov	sl, r4
 8003a8c:	e7d2      	b.n	8003a34 <_svfiprintf_r+0x9c>
 8003a8e:	9b03      	ldr	r3, [sp, #12]
 8003a90:	1d19      	adds	r1, r3, #4
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	9103      	str	r1, [sp, #12]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	bfbb      	ittet	lt
 8003a9a:	425b      	neglt	r3, r3
 8003a9c:	f042 0202 	orrlt.w	r2, r2, #2
 8003aa0:	9307      	strge	r3, [sp, #28]
 8003aa2:	9307      	strlt	r3, [sp, #28]
 8003aa4:	bfb8      	it	lt
 8003aa6:	9204      	strlt	r2, [sp, #16]
 8003aa8:	7823      	ldrb	r3, [r4, #0]
 8003aaa:	2b2e      	cmp	r3, #46	; 0x2e
 8003aac:	d10c      	bne.n	8003ac8 <_svfiprintf_r+0x130>
 8003aae:	7863      	ldrb	r3, [r4, #1]
 8003ab0:	2b2a      	cmp	r3, #42	; 0x2a
 8003ab2:	d134      	bne.n	8003b1e <_svfiprintf_r+0x186>
 8003ab4:	9b03      	ldr	r3, [sp, #12]
 8003ab6:	1d1a      	adds	r2, r3, #4
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	9203      	str	r2, [sp, #12]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	bfb8      	it	lt
 8003ac0:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ac4:	3402      	adds	r4, #2
 8003ac6:	9305      	str	r3, [sp, #20]
 8003ac8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003b90 <_svfiprintf_r+0x1f8>
 8003acc:	7821      	ldrb	r1, [r4, #0]
 8003ace:	2203      	movs	r2, #3
 8003ad0:	4650      	mov	r0, sl
 8003ad2:	f7fc fb8d 	bl	80001f0 <memchr>
 8003ad6:	b138      	cbz	r0, 8003ae8 <_svfiprintf_r+0x150>
 8003ad8:	9b04      	ldr	r3, [sp, #16]
 8003ada:	eba0 000a 	sub.w	r0, r0, sl
 8003ade:	2240      	movs	r2, #64	; 0x40
 8003ae0:	4082      	lsls	r2, r0
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	3401      	adds	r4, #1
 8003ae6:	9304      	str	r3, [sp, #16]
 8003ae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003aec:	4825      	ldr	r0, [pc, #148]	; (8003b84 <_svfiprintf_r+0x1ec>)
 8003aee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003af2:	2206      	movs	r2, #6
 8003af4:	f7fc fb7c 	bl	80001f0 <memchr>
 8003af8:	2800      	cmp	r0, #0
 8003afa:	d038      	beq.n	8003b6e <_svfiprintf_r+0x1d6>
 8003afc:	4b22      	ldr	r3, [pc, #136]	; (8003b88 <_svfiprintf_r+0x1f0>)
 8003afe:	bb1b      	cbnz	r3, 8003b48 <_svfiprintf_r+0x1b0>
 8003b00:	9b03      	ldr	r3, [sp, #12]
 8003b02:	3307      	adds	r3, #7
 8003b04:	f023 0307 	bic.w	r3, r3, #7
 8003b08:	3308      	adds	r3, #8
 8003b0a:	9303      	str	r3, [sp, #12]
 8003b0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b0e:	4433      	add	r3, r6
 8003b10:	9309      	str	r3, [sp, #36]	; 0x24
 8003b12:	e768      	b.n	80039e6 <_svfiprintf_r+0x4e>
 8003b14:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b18:	460c      	mov	r4, r1
 8003b1a:	2001      	movs	r0, #1
 8003b1c:	e7a6      	b.n	8003a6c <_svfiprintf_r+0xd4>
 8003b1e:	2300      	movs	r3, #0
 8003b20:	3401      	adds	r4, #1
 8003b22:	9305      	str	r3, [sp, #20]
 8003b24:	4619      	mov	r1, r3
 8003b26:	f04f 0c0a 	mov.w	ip, #10
 8003b2a:	4620      	mov	r0, r4
 8003b2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b30:	3a30      	subs	r2, #48	; 0x30
 8003b32:	2a09      	cmp	r2, #9
 8003b34:	d903      	bls.n	8003b3e <_svfiprintf_r+0x1a6>
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d0c6      	beq.n	8003ac8 <_svfiprintf_r+0x130>
 8003b3a:	9105      	str	r1, [sp, #20]
 8003b3c:	e7c4      	b.n	8003ac8 <_svfiprintf_r+0x130>
 8003b3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b42:	4604      	mov	r4, r0
 8003b44:	2301      	movs	r3, #1
 8003b46:	e7f0      	b.n	8003b2a <_svfiprintf_r+0x192>
 8003b48:	ab03      	add	r3, sp, #12
 8003b4a:	9300      	str	r3, [sp, #0]
 8003b4c:	462a      	mov	r2, r5
 8003b4e:	4b0f      	ldr	r3, [pc, #60]	; (8003b8c <_svfiprintf_r+0x1f4>)
 8003b50:	a904      	add	r1, sp, #16
 8003b52:	4638      	mov	r0, r7
 8003b54:	f3af 8000 	nop.w
 8003b58:	1c42      	adds	r2, r0, #1
 8003b5a:	4606      	mov	r6, r0
 8003b5c:	d1d6      	bne.n	8003b0c <_svfiprintf_r+0x174>
 8003b5e:	89ab      	ldrh	r3, [r5, #12]
 8003b60:	065b      	lsls	r3, r3, #25
 8003b62:	f53f af2d 	bmi.w	80039c0 <_svfiprintf_r+0x28>
 8003b66:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b68:	b01d      	add	sp, #116	; 0x74
 8003b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b6e:	ab03      	add	r3, sp, #12
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	462a      	mov	r2, r5
 8003b74:	4b05      	ldr	r3, [pc, #20]	; (8003b8c <_svfiprintf_r+0x1f4>)
 8003b76:	a904      	add	r1, sp, #16
 8003b78:	4638      	mov	r0, r7
 8003b7a:	f000 f879 	bl	8003c70 <_printf_i>
 8003b7e:	e7eb      	b.n	8003b58 <_svfiprintf_r+0x1c0>
 8003b80:	08003ff0 	.word	0x08003ff0
 8003b84:	08003ffa 	.word	0x08003ffa
 8003b88:	00000000 	.word	0x00000000
 8003b8c:	080038e5 	.word	0x080038e5
 8003b90:	08003ff6 	.word	0x08003ff6

08003b94 <_printf_common>:
 8003b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b98:	4616      	mov	r6, r2
 8003b9a:	4699      	mov	r9, r3
 8003b9c:	688a      	ldr	r2, [r1, #8]
 8003b9e:	690b      	ldr	r3, [r1, #16]
 8003ba0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	bfb8      	it	lt
 8003ba8:	4613      	movlt	r3, r2
 8003baa:	6033      	str	r3, [r6, #0]
 8003bac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003bb0:	4607      	mov	r7, r0
 8003bb2:	460c      	mov	r4, r1
 8003bb4:	b10a      	cbz	r2, 8003bba <_printf_common+0x26>
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	6033      	str	r3, [r6, #0]
 8003bba:	6823      	ldr	r3, [r4, #0]
 8003bbc:	0699      	lsls	r1, r3, #26
 8003bbe:	bf42      	ittt	mi
 8003bc0:	6833      	ldrmi	r3, [r6, #0]
 8003bc2:	3302      	addmi	r3, #2
 8003bc4:	6033      	strmi	r3, [r6, #0]
 8003bc6:	6825      	ldr	r5, [r4, #0]
 8003bc8:	f015 0506 	ands.w	r5, r5, #6
 8003bcc:	d106      	bne.n	8003bdc <_printf_common+0x48>
 8003bce:	f104 0a19 	add.w	sl, r4, #25
 8003bd2:	68e3      	ldr	r3, [r4, #12]
 8003bd4:	6832      	ldr	r2, [r6, #0]
 8003bd6:	1a9b      	subs	r3, r3, r2
 8003bd8:	42ab      	cmp	r3, r5
 8003bda:	dc26      	bgt.n	8003c2a <_printf_common+0x96>
 8003bdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003be0:	1e13      	subs	r3, r2, #0
 8003be2:	6822      	ldr	r2, [r4, #0]
 8003be4:	bf18      	it	ne
 8003be6:	2301      	movne	r3, #1
 8003be8:	0692      	lsls	r2, r2, #26
 8003bea:	d42b      	bmi.n	8003c44 <_printf_common+0xb0>
 8003bec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003bf0:	4649      	mov	r1, r9
 8003bf2:	4638      	mov	r0, r7
 8003bf4:	47c0      	blx	r8
 8003bf6:	3001      	adds	r0, #1
 8003bf8:	d01e      	beq.n	8003c38 <_printf_common+0xa4>
 8003bfa:	6823      	ldr	r3, [r4, #0]
 8003bfc:	6922      	ldr	r2, [r4, #16]
 8003bfe:	f003 0306 	and.w	r3, r3, #6
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	bf02      	ittt	eq
 8003c06:	68e5      	ldreq	r5, [r4, #12]
 8003c08:	6833      	ldreq	r3, [r6, #0]
 8003c0a:	1aed      	subeq	r5, r5, r3
 8003c0c:	68a3      	ldr	r3, [r4, #8]
 8003c0e:	bf0c      	ite	eq
 8003c10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c14:	2500      	movne	r5, #0
 8003c16:	4293      	cmp	r3, r2
 8003c18:	bfc4      	itt	gt
 8003c1a:	1a9b      	subgt	r3, r3, r2
 8003c1c:	18ed      	addgt	r5, r5, r3
 8003c1e:	2600      	movs	r6, #0
 8003c20:	341a      	adds	r4, #26
 8003c22:	42b5      	cmp	r5, r6
 8003c24:	d11a      	bne.n	8003c5c <_printf_common+0xc8>
 8003c26:	2000      	movs	r0, #0
 8003c28:	e008      	b.n	8003c3c <_printf_common+0xa8>
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	4652      	mov	r2, sl
 8003c2e:	4649      	mov	r1, r9
 8003c30:	4638      	mov	r0, r7
 8003c32:	47c0      	blx	r8
 8003c34:	3001      	adds	r0, #1
 8003c36:	d103      	bne.n	8003c40 <_printf_common+0xac>
 8003c38:	f04f 30ff 	mov.w	r0, #4294967295
 8003c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c40:	3501      	adds	r5, #1
 8003c42:	e7c6      	b.n	8003bd2 <_printf_common+0x3e>
 8003c44:	18e1      	adds	r1, r4, r3
 8003c46:	1c5a      	adds	r2, r3, #1
 8003c48:	2030      	movs	r0, #48	; 0x30
 8003c4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c4e:	4422      	add	r2, r4
 8003c50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c58:	3302      	adds	r3, #2
 8003c5a:	e7c7      	b.n	8003bec <_printf_common+0x58>
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	4622      	mov	r2, r4
 8003c60:	4649      	mov	r1, r9
 8003c62:	4638      	mov	r0, r7
 8003c64:	47c0      	blx	r8
 8003c66:	3001      	adds	r0, #1
 8003c68:	d0e6      	beq.n	8003c38 <_printf_common+0xa4>
 8003c6a:	3601      	adds	r6, #1
 8003c6c:	e7d9      	b.n	8003c22 <_printf_common+0x8e>
	...

08003c70 <_printf_i>:
 8003c70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c74:	7e0f      	ldrb	r7, [r1, #24]
 8003c76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003c78:	2f78      	cmp	r7, #120	; 0x78
 8003c7a:	4691      	mov	r9, r2
 8003c7c:	4680      	mov	r8, r0
 8003c7e:	460c      	mov	r4, r1
 8003c80:	469a      	mov	sl, r3
 8003c82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003c86:	d807      	bhi.n	8003c98 <_printf_i+0x28>
 8003c88:	2f62      	cmp	r7, #98	; 0x62
 8003c8a:	d80a      	bhi.n	8003ca2 <_printf_i+0x32>
 8003c8c:	2f00      	cmp	r7, #0
 8003c8e:	f000 80d4 	beq.w	8003e3a <_printf_i+0x1ca>
 8003c92:	2f58      	cmp	r7, #88	; 0x58
 8003c94:	f000 80c0 	beq.w	8003e18 <_printf_i+0x1a8>
 8003c98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ca0:	e03a      	b.n	8003d18 <_printf_i+0xa8>
 8003ca2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ca6:	2b15      	cmp	r3, #21
 8003ca8:	d8f6      	bhi.n	8003c98 <_printf_i+0x28>
 8003caa:	a101      	add	r1, pc, #4	; (adr r1, 8003cb0 <_printf_i+0x40>)
 8003cac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003cb0:	08003d09 	.word	0x08003d09
 8003cb4:	08003d1d 	.word	0x08003d1d
 8003cb8:	08003c99 	.word	0x08003c99
 8003cbc:	08003c99 	.word	0x08003c99
 8003cc0:	08003c99 	.word	0x08003c99
 8003cc4:	08003c99 	.word	0x08003c99
 8003cc8:	08003d1d 	.word	0x08003d1d
 8003ccc:	08003c99 	.word	0x08003c99
 8003cd0:	08003c99 	.word	0x08003c99
 8003cd4:	08003c99 	.word	0x08003c99
 8003cd8:	08003c99 	.word	0x08003c99
 8003cdc:	08003e21 	.word	0x08003e21
 8003ce0:	08003d49 	.word	0x08003d49
 8003ce4:	08003ddb 	.word	0x08003ddb
 8003ce8:	08003c99 	.word	0x08003c99
 8003cec:	08003c99 	.word	0x08003c99
 8003cf0:	08003e43 	.word	0x08003e43
 8003cf4:	08003c99 	.word	0x08003c99
 8003cf8:	08003d49 	.word	0x08003d49
 8003cfc:	08003c99 	.word	0x08003c99
 8003d00:	08003c99 	.word	0x08003c99
 8003d04:	08003de3 	.word	0x08003de3
 8003d08:	682b      	ldr	r3, [r5, #0]
 8003d0a:	1d1a      	adds	r2, r3, #4
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	602a      	str	r2, [r5, #0]
 8003d10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e09f      	b.n	8003e5c <_printf_i+0x1ec>
 8003d1c:	6820      	ldr	r0, [r4, #0]
 8003d1e:	682b      	ldr	r3, [r5, #0]
 8003d20:	0607      	lsls	r7, r0, #24
 8003d22:	f103 0104 	add.w	r1, r3, #4
 8003d26:	6029      	str	r1, [r5, #0]
 8003d28:	d501      	bpl.n	8003d2e <_printf_i+0xbe>
 8003d2a:	681e      	ldr	r6, [r3, #0]
 8003d2c:	e003      	b.n	8003d36 <_printf_i+0xc6>
 8003d2e:	0646      	lsls	r6, r0, #25
 8003d30:	d5fb      	bpl.n	8003d2a <_printf_i+0xba>
 8003d32:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003d36:	2e00      	cmp	r6, #0
 8003d38:	da03      	bge.n	8003d42 <_printf_i+0xd2>
 8003d3a:	232d      	movs	r3, #45	; 0x2d
 8003d3c:	4276      	negs	r6, r6
 8003d3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d42:	485a      	ldr	r0, [pc, #360]	; (8003eac <_printf_i+0x23c>)
 8003d44:	230a      	movs	r3, #10
 8003d46:	e012      	b.n	8003d6e <_printf_i+0xfe>
 8003d48:	682b      	ldr	r3, [r5, #0]
 8003d4a:	6820      	ldr	r0, [r4, #0]
 8003d4c:	1d19      	adds	r1, r3, #4
 8003d4e:	6029      	str	r1, [r5, #0]
 8003d50:	0605      	lsls	r5, r0, #24
 8003d52:	d501      	bpl.n	8003d58 <_printf_i+0xe8>
 8003d54:	681e      	ldr	r6, [r3, #0]
 8003d56:	e002      	b.n	8003d5e <_printf_i+0xee>
 8003d58:	0641      	lsls	r1, r0, #25
 8003d5a:	d5fb      	bpl.n	8003d54 <_printf_i+0xe4>
 8003d5c:	881e      	ldrh	r6, [r3, #0]
 8003d5e:	4853      	ldr	r0, [pc, #332]	; (8003eac <_printf_i+0x23c>)
 8003d60:	2f6f      	cmp	r7, #111	; 0x6f
 8003d62:	bf0c      	ite	eq
 8003d64:	2308      	moveq	r3, #8
 8003d66:	230a      	movne	r3, #10
 8003d68:	2100      	movs	r1, #0
 8003d6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d6e:	6865      	ldr	r5, [r4, #4]
 8003d70:	60a5      	str	r5, [r4, #8]
 8003d72:	2d00      	cmp	r5, #0
 8003d74:	bfa2      	ittt	ge
 8003d76:	6821      	ldrge	r1, [r4, #0]
 8003d78:	f021 0104 	bicge.w	r1, r1, #4
 8003d7c:	6021      	strge	r1, [r4, #0]
 8003d7e:	b90e      	cbnz	r6, 8003d84 <_printf_i+0x114>
 8003d80:	2d00      	cmp	r5, #0
 8003d82:	d04b      	beq.n	8003e1c <_printf_i+0x1ac>
 8003d84:	4615      	mov	r5, r2
 8003d86:	fbb6 f1f3 	udiv	r1, r6, r3
 8003d8a:	fb03 6711 	mls	r7, r3, r1, r6
 8003d8e:	5dc7      	ldrb	r7, [r0, r7]
 8003d90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003d94:	4637      	mov	r7, r6
 8003d96:	42bb      	cmp	r3, r7
 8003d98:	460e      	mov	r6, r1
 8003d9a:	d9f4      	bls.n	8003d86 <_printf_i+0x116>
 8003d9c:	2b08      	cmp	r3, #8
 8003d9e:	d10b      	bne.n	8003db8 <_printf_i+0x148>
 8003da0:	6823      	ldr	r3, [r4, #0]
 8003da2:	07de      	lsls	r6, r3, #31
 8003da4:	d508      	bpl.n	8003db8 <_printf_i+0x148>
 8003da6:	6923      	ldr	r3, [r4, #16]
 8003da8:	6861      	ldr	r1, [r4, #4]
 8003daa:	4299      	cmp	r1, r3
 8003dac:	bfde      	ittt	le
 8003dae:	2330      	movle	r3, #48	; 0x30
 8003db0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003db4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003db8:	1b52      	subs	r2, r2, r5
 8003dba:	6122      	str	r2, [r4, #16]
 8003dbc:	f8cd a000 	str.w	sl, [sp]
 8003dc0:	464b      	mov	r3, r9
 8003dc2:	aa03      	add	r2, sp, #12
 8003dc4:	4621      	mov	r1, r4
 8003dc6:	4640      	mov	r0, r8
 8003dc8:	f7ff fee4 	bl	8003b94 <_printf_common>
 8003dcc:	3001      	adds	r0, #1
 8003dce:	d14a      	bne.n	8003e66 <_printf_i+0x1f6>
 8003dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd4:	b004      	add	sp, #16
 8003dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dda:	6823      	ldr	r3, [r4, #0]
 8003ddc:	f043 0320 	orr.w	r3, r3, #32
 8003de0:	6023      	str	r3, [r4, #0]
 8003de2:	4833      	ldr	r0, [pc, #204]	; (8003eb0 <_printf_i+0x240>)
 8003de4:	2778      	movs	r7, #120	; 0x78
 8003de6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003dea:	6823      	ldr	r3, [r4, #0]
 8003dec:	6829      	ldr	r1, [r5, #0]
 8003dee:	061f      	lsls	r7, r3, #24
 8003df0:	f851 6b04 	ldr.w	r6, [r1], #4
 8003df4:	d402      	bmi.n	8003dfc <_printf_i+0x18c>
 8003df6:	065f      	lsls	r7, r3, #25
 8003df8:	bf48      	it	mi
 8003dfa:	b2b6      	uxthmi	r6, r6
 8003dfc:	07df      	lsls	r7, r3, #31
 8003dfe:	bf48      	it	mi
 8003e00:	f043 0320 	orrmi.w	r3, r3, #32
 8003e04:	6029      	str	r1, [r5, #0]
 8003e06:	bf48      	it	mi
 8003e08:	6023      	strmi	r3, [r4, #0]
 8003e0a:	b91e      	cbnz	r6, 8003e14 <_printf_i+0x1a4>
 8003e0c:	6823      	ldr	r3, [r4, #0]
 8003e0e:	f023 0320 	bic.w	r3, r3, #32
 8003e12:	6023      	str	r3, [r4, #0]
 8003e14:	2310      	movs	r3, #16
 8003e16:	e7a7      	b.n	8003d68 <_printf_i+0xf8>
 8003e18:	4824      	ldr	r0, [pc, #144]	; (8003eac <_printf_i+0x23c>)
 8003e1a:	e7e4      	b.n	8003de6 <_printf_i+0x176>
 8003e1c:	4615      	mov	r5, r2
 8003e1e:	e7bd      	b.n	8003d9c <_printf_i+0x12c>
 8003e20:	682b      	ldr	r3, [r5, #0]
 8003e22:	6826      	ldr	r6, [r4, #0]
 8003e24:	6961      	ldr	r1, [r4, #20]
 8003e26:	1d18      	adds	r0, r3, #4
 8003e28:	6028      	str	r0, [r5, #0]
 8003e2a:	0635      	lsls	r5, r6, #24
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	d501      	bpl.n	8003e34 <_printf_i+0x1c4>
 8003e30:	6019      	str	r1, [r3, #0]
 8003e32:	e002      	b.n	8003e3a <_printf_i+0x1ca>
 8003e34:	0670      	lsls	r0, r6, #25
 8003e36:	d5fb      	bpl.n	8003e30 <_printf_i+0x1c0>
 8003e38:	8019      	strh	r1, [r3, #0]
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	6123      	str	r3, [r4, #16]
 8003e3e:	4615      	mov	r5, r2
 8003e40:	e7bc      	b.n	8003dbc <_printf_i+0x14c>
 8003e42:	682b      	ldr	r3, [r5, #0]
 8003e44:	1d1a      	adds	r2, r3, #4
 8003e46:	602a      	str	r2, [r5, #0]
 8003e48:	681d      	ldr	r5, [r3, #0]
 8003e4a:	6862      	ldr	r2, [r4, #4]
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	4628      	mov	r0, r5
 8003e50:	f7fc f9ce 	bl	80001f0 <memchr>
 8003e54:	b108      	cbz	r0, 8003e5a <_printf_i+0x1ea>
 8003e56:	1b40      	subs	r0, r0, r5
 8003e58:	6060      	str	r0, [r4, #4]
 8003e5a:	6863      	ldr	r3, [r4, #4]
 8003e5c:	6123      	str	r3, [r4, #16]
 8003e5e:	2300      	movs	r3, #0
 8003e60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e64:	e7aa      	b.n	8003dbc <_printf_i+0x14c>
 8003e66:	6923      	ldr	r3, [r4, #16]
 8003e68:	462a      	mov	r2, r5
 8003e6a:	4649      	mov	r1, r9
 8003e6c:	4640      	mov	r0, r8
 8003e6e:	47d0      	blx	sl
 8003e70:	3001      	adds	r0, #1
 8003e72:	d0ad      	beq.n	8003dd0 <_printf_i+0x160>
 8003e74:	6823      	ldr	r3, [r4, #0]
 8003e76:	079b      	lsls	r3, r3, #30
 8003e78:	d413      	bmi.n	8003ea2 <_printf_i+0x232>
 8003e7a:	68e0      	ldr	r0, [r4, #12]
 8003e7c:	9b03      	ldr	r3, [sp, #12]
 8003e7e:	4298      	cmp	r0, r3
 8003e80:	bfb8      	it	lt
 8003e82:	4618      	movlt	r0, r3
 8003e84:	e7a6      	b.n	8003dd4 <_printf_i+0x164>
 8003e86:	2301      	movs	r3, #1
 8003e88:	4632      	mov	r2, r6
 8003e8a:	4649      	mov	r1, r9
 8003e8c:	4640      	mov	r0, r8
 8003e8e:	47d0      	blx	sl
 8003e90:	3001      	adds	r0, #1
 8003e92:	d09d      	beq.n	8003dd0 <_printf_i+0x160>
 8003e94:	3501      	adds	r5, #1
 8003e96:	68e3      	ldr	r3, [r4, #12]
 8003e98:	9903      	ldr	r1, [sp, #12]
 8003e9a:	1a5b      	subs	r3, r3, r1
 8003e9c:	42ab      	cmp	r3, r5
 8003e9e:	dcf2      	bgt.n	8003e86 <_printf_i+0x216>
 8003ea0:	e7eb      	b.n	8003e7a <_printf_i+0x20a>
 8003ea2:	2500      	movs	r5, #0
 8003ea4:	f104 0619 	add.w	r6, r4, #25
 8003ea8:	e7f5      	b.n	8003e96 <_printf_i+0x226>
 8003eaa:	bf00      	nop
 8003eac:	08004001 	.word	0x08004001
 8003eb0:	08004012 	.word	0x08004012

08003eb4 <memmove>:
 8003eb4:	4288      	cmp	r0, r1
 8003eb6:	b510      	push	{r4, lr}
 8003eb8:	eb01 0402 	add.w	r4, r1, r2
 8003ebc:	d902      	bls.n	8003ec4 <memmove+0x10>
 8003ebe:	4284      	cmp	r4, r0
 8003ec0:	4623      	mov	r3, r4
 8003ec2:	d807      	bhi.n	8003ed4 <memmove+0x20>
 8003ec4:	1e43      	subs	r3, r0, #1
 8003ec6:	42a1      	cmp	r1, r4
 8003ec8:	d008      	beq.n	8003edc <memmove+0x28>
 8003eca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ece:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003ed2:	e7f8      	b.n	8003ec6 <memmove+0x12>
 8003ed4:	4402      	add	r2, r0
 8003ed6:	4601      	mov	r1, r0
 8003ed8:	428a      	cmp	r2, r1
 8003eda:	d100      	bne.n	8003ede <memmove+0x2a>
 8003edc:	bd10      	pop	{r4, pc}
 8003ede:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ee2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003ee6:	e7f7      	b.n	8003ed8 <memmove+0x24>

08003ee8 <_sbrk_r>:
 8003ee8:	b538      	push	{r3, r4, r5, lr}
 8003eea:	4d06      	ldr	r5, [pc, #24]	; (8003f04 <_sbrk_r+0x1c>)
 8003eec:	2300      	movs	r3, #0
 8003eee:	4604      	mov	r4, r0
 8003ef0:	4608      	mov	r0, r1
 8003ef2:	602b      	str	r3, [r5, #0]
 8003ef4:	f7fc fec2 	bl	8000c7c <_sbrk>
 8003ef8:	1c43      	adds	r3, r0, #1
 8003efa:	d102      	bne.n	8003f02 <_sbrk_r+0x1a>
 8003efc:	682b      	ldr	r3, [r5, #0]
 8003efe:	b103      	cbz	r3, 8003f02 <_sbrk_r+0x1a>
 8003f00:	6023      	str	r3, [r4, #0]
 8003f02:	bd38      	pop	{r3, r4, r5, pc}
 8003f04:	2000025c 	.word	0x2000025c

08003f08 <memcpy>:
 8003f08:	440a      	add	r2, r1
 8003f0a:	4291      	cmp	r1, r2
 8003f0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f10:	d100      	bne.n	8003f14 <memcpy+0xc>
 8003f12:	4770      	bx	lr
 8003f14:	b510      	push	{r4, lr}
 8003f16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f1e:	4291      	cmp	r1, r2
 8003f20:	d1f9      	bne.n	8003f16 <memcpy+0xe>
 8003f22:	bd10      	pop	{r4, pc}

08003f24 <_realloc_r>:
 8003f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f28:	4680      	mov	r8, r0
 8003f2a:	4614      	mov	r4, r2
 8003f2c:	460e      	mov	r6, r1
 8003f2e:	b921      	cbnz	r1, 8003f3a <_realloc_r+0x16>
 8003f30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f34:	4611      	mov	r1, r2
 8003f36:	f7ff bc49 	b.w	80037cc <_malloc_r>
 8003f3a:	b92a      	cbnz	r2, 8003f48 <_realloc_r+0x24>
 8003f3c:	f7ff fbda 	bl	80036f4 <_free_r>
 8003f40:	4625      	mov	r5, r4
 8003f42:	4628      	mov	r0, r5
 8003f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f48:	f000 f81b 	bl	8003f82 <_malloc_usable_size_r>
 8003f4c:	4284      	cmp	r4, r0
 8003f4e:	4607      	mov	r7, r0
 8003f50:	d802      	bhi.n	8003f58 <_realloc_r+0x34>
 8003f52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003f56:	d812      	bhi.n	8003f7e <_realloc_r+0x5a>
 8003f58:	4621      	mov	r1, r4
 8003f5a:	4640      	mov	r0, r8
 8003f5c:	f7ff fc36 	bl	80037cc <_malloc_r>
 8003f60:	4605      	mov	r5, r0
 8003f62:	2800      	cmp	r0, #0
 8003f64:	d0ed      	beq.n	8003f42 <_realloc_r+0x1e>
 8003f66:	42bc      	cmp	r4, r7
 8003f68:	4622      	mov	r2, r4
 8003f6a:	4631      	mov	r1, r6
 8003f6c:	bf28      	it	cs
 8003f6e:	463a      	movcs	r2, r7
 8003f70:	f7ff ffca 	bl	8003f08 <memcpy>
 8003f74:	4631      	mov	r1, r6
 8003f76:	4640      	mov	r0, r8
 8003f78:	f7ff fbbc 	bl	80036f4 <_free_r>
 8003f7c:	e7e1      	b.n	8003f42 <_realloc_r+0x1e>
 8003f7e:	4635      	mov	r5, r6
 8003f80:	e7df      	b.n	8003f42 <_realloc_r+0x1e>

08003f82 <_malloc_usable_size_r>:
 8003f82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f86:	1f18      	subs	r0, r3, #4
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	bfbc      	itt	lt
 8003f8c:	580b      	ldrlt	r3, [r1, r0]
 8003f8e:	18c0      	addlt	r0, r0, r3
 8003f90:	4770      	bx	lr
	...

08003f94 <_init>:
 8003f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f96:	bf00      	nop
 8003f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f9a:	bc08      	pop	{r3}
 8003f9c:	469e      	mov	lr, r3
 8003f9e:	4770      	bx	lr

08003fa0 <_fini>:
 8003fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fa2:	bf00      	nop
 8003fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fa6:	bc08      	pop	{r3}
 8003fa8:	469e      	mov	lr, r3
 8003faa:	4770      	bx	lr
