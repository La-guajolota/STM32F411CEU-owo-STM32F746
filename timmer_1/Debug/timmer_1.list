
timmer_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057a8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08005978  08005978  00006978  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bb0  08005bb0  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005bb0  08005bb0  00006bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bb8  08005bb8  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bb8  08005bb8  00006bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bbc  08005bbc  00006bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005bc0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  2000005c  08005c1c  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  08005c1c  000072c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c157  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000181b  00000000  00000000  000131e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  00014a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000855  00000000  00000000  000154a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000265ad  00000000  00000000  00015cfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dba0  00000000  00000000  0003c2aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1cca  00000000  00000000  00049e4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013bb14  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003568  00000000  00000000  0013bb58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0013f0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005960 	.word	0x08005960

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08005960 	.word	0x08005960

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	@ 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__gedf2>:
 800087c:	f04f 3cff 	mov.w	ip, #4294967295
 8000880:	e006      	b.n	8000890 <__cmpdf2+0x4>
 8000882:	bf00      	nop

08000884 <__ledf2>:
 8000884:	f04f 0c01 	mov.w	ip, #1
 8000888:	e002      	b.n	8000890 <__cmpdf2+0x4>
 800088a:	bf00      	nop

0800088c <__cmpdf2>:
 800088c:	f04f 0c01 	mov.w	ip, #1
 8000890:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000894:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000898:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800089c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008a0:	bf18      	it	ne
 80008a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80008a6:	d01b      	beq.n	80008e0 <__cmpdf2+0x54>
 80008a8:	b001      	add	sp, #4
 80008aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80008ae:	bf0c      	ite	eq
 80008b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80008b4:	ea91 0f03 	teqne	r1, r3
 80008b8:	bf02      	ittt	eq
 80008ba:	ea90 0f02 	teqeq	r0, r2
 80008be:	2000      	moveq	r0, #0
 80008c0:	4770      	bxeq	lr
 80008c2:	f110 0f00 	cmn.w	r0, #0
 80008c6:	ea91 0f03 	teq	r1, r3
 80008ca:	bf58      	it	pl
 80008cc:	4299      	cmppl	r1, r3
 80008ce:	bf08      	it	eq
 80008d0:	4290      	cmpeq	r0, r2
 80008d2:	bf2c      	ite	cs
 80008d4:	17d8      	asrcs	r0, r3, #31
 80008d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008da:	f040 0001 	orr.w	r0, r0, #1
 80008de:	4770      	bx	lr
 80008e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008e8:	d102      	bne.n	80008f0 <__cmpdf2+0x64>
 80008ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008ee:	d107      	bne.n	8000900 <__cmpdf2+0x74>
 80008f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008f8:	d1d6      	bne.n	80008a8 <__cmpdf2+0x1c>
 80008fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008fe:	d0d3      	beq.n	80008a8 <__cmpdf2+0x1c>
 8000900:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop

08000908 <__aeabi_cdrcmple>:
 8000908:	4684      	mov	ip, r0
 800090a:	4610      	mov	r0, r2
 800090c:	4662      	mov	r2, ip
 800090e:	468c      	mov	ip, r1
 8000910:	4619      	mov	r1, r3
 8000912:	4663      	mov	r3, ip
 8000914:	e000      	b.n	8000918 <__aeabi_cdcmpeq>
 8000916:	bf00      	nop

08000918 <__aeabi_cdcmpeq>:
 8000918:	b501      	push	{r0, lr}
 800091a:	f7ff ffb7 	bl	800088c <__cmpdf2>
 800091e:	2800      	cmp	r0, #0
 8000920:	bf48      	it	mi
 8000922:	f110 0f00 	cmnmi.w	r0, #0
 8000926:	bd01      	pop	{r0, pc}

08000928 <__aeabi_dcmpeq>:
 8000928:	f84d ed08 	str.w	lr, [sp, #-8]!
 800092c:	f7ff fff4 	bl	8000918 <__aeabi_cdcmpeq>
 8000930:	bf0c      	ite	eq
 8000932:	2001      	moveq	r0, #1
 8000934:	2000      	movne	r0, #0
 8000936:	f85d fb08 	ldr.w	pc, [sp], #8
 800093a:	bf00      	nop

0800093c <__aeabi_dcmplt>:
 800093c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000940:	f7ff ffea 	bl	8000918 <__aeabi_cdcmpeq>
 8000944:	bf34      	ite	cc
 8000946:	2001      	movcc	r0, #1
 8000948:	2000      	movcs	r0, #0
 800094a:	f85d fb08 	ldr.w	pc, [sp], #8
 800094e:	bf00      	nop

08000950 <__aeabi_dcmple>:
 8000950:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000954:	f7ff ffe0 	bl	8000918 <__aeabi_cdcmpeq>
 8000958:	bf94      	ite	ls
 800095a:	2001      	movls	r0, #1
 800095c:	2000      	movhi	r0, #0
 800095e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000962:	bf00      	nop

08000964 <__aeabi_dcmpge>:
 8000964:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000968:	f7ff ffce 	bl	8000908 <__aeabi_cdrcmple>
 800096c:	bf94      	ite	ls
 800096e:	2001      	movls	r0, #1
 8000970:	2000      	movhi	r0, #0
 8000972:	f85d fb08 	ldr.w	pc, [sp], #8
 8000976:	bf00      	nop

08000978 <__aeabi_dcmpgt>:
 8000978:	f84d ed08 	str.w	lr, [sp, #-8]!
 800097c:	f7ff ffc4 	bl	8000908 <__aeabi_cdrcmple>
 8000980:	bf34      	ite	cc
 8000982:	2001      	movcc	r0, #1
 8000984:	2000      	movcs	r0, #0
 8000986:	f85d fb08 	ldr.w	pc, [sp], #8
 800098a:	bf00      	nop

0800098c <__aeabi_d2iz>:
 800098c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000990:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000994:	d215      	bcs.n	80009c2 <__aeabi_d2iz+0x36>
 8000996:	d511      	bpl.n	80009bc <__aeabi_d2iz+0x30>
 8000998:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800099c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009a0:	d912      	bls.n	80009c8 <__aeabi_d2iz+0x3c>
 80009a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009b2:	fa23 f002 	lsr.w	r0, r3, r2
 80009b6:	bf18      	it	ne
 80009b8:	4240      	negne	r0, r0
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009c6:	d105      	bne.n	80009d4 <__aeabi_d2iz+0x48>
 80009c8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009cc:	bf08      	it	eq
 80009ce:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_d2f>:
 80009dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009e0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009e4:	bf24      	itt	cs
 80009e6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009ea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009ee:	d90d      	bls.n	8000a0c <__aeabi_d2f+0x30>
 80009f0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009f4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009f8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009fc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a04:	bf08      	it	eq
 8000a06:	f020 0001 	biceq.w	r0, r0, #1
 8000a0a:	4770      	bx	lr
 8000a0c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a10:	d121      	bne.n	8000a56 <__aeabi_d2f+0x7a>
 8000a12:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a16:	bfbc      	itt	lt
 8000a18:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a1c:	4770      	bxlt	lr
 8000a1e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a26:	f1c2 0218 	rsb	r2, r2, #24
 8000a2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a32:	fa20 f002 	lsr.w	r0, r0, r2
 8000a36:	bf18      	it	ne
 8000a38:	f040 0001 	orrne.w	r0, r0, #1
 8000a3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a48:	ea40 000c 	orr.w	r0, r0, ip
 8000a4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a54:	e7cc      	b.n	80009f0 <__aeabi_d2f+0x14>
 8000a56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a5a:	d107      	bne.n	8000a6c <__aeabi_d2f+0x90>
 8000a5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a60:	bf1e      	ittt	ne
 8000a62:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a66:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a6a:	4770      	bxne	lr
 8000a6c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b96a 	b.w	8000d68 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	460c      	mov	r4, r1
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d14e      	bne.n	8000b56 <__udivmoddi4+0xaa>
 8000ab8:	4694      	mov	ip, r2
 8000aba:	458c      	cmp	ip, r1
 8000abc:	4686      	mov	lr, r0
 8000abe:	fab2 f282 	clz	r2, r2
 8000ac2:	d962      	bls.n	8000b8a <__udivmoddi4+0xde>
 8000ac4:	b14a      	cbz	r2, 8000ada <__udivmoddi4+0x2e>
 8000ac6:	f1c2 0320 	rsb	r3, r2, #32
 8000aca:	4091      	lsls	r1, r2
 8000acc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ad0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad4:	4319      	orrs	r1, r3
 8000ad6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ada:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ade:	fa1f f68c 	uxth.w	r6, ip
 8000ae2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ae6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aea:	fb07 1114 	mls	r1, r7, r4, r1
 8000aee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000af2:	fb04 f106 	mul.w	r1, r4, r6
 8000af6:	4299      	cmp	r1, r3
 8000af8:	d90a      	bls.n	8000b10 <__udivmoddi4+0x64>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b02:	f080 8112 	bcs.w	8000d2a <__udivmoddi4+0x27e>
 8000b06:	4299      	cmp	r1, r3
 8000b08:	f240 810f 	bls.w	8000d2a <__udivmoddi4+0x27e>
 8000b0c:	3c02      	subs	r4, #2
 8000b0e:	4463      	add	r3, ip
 8000b10:	1a59      	subs	r1, r3, r1
 8000b12:	fa1f f38e 	uxth.w	r3, lr
 8000b16:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b1a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b22:	fb00 f606 	mul.w	r6, r0, r6
 8000b26:	429e      	cmp	r6, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x94>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b32:	f080 80fc 	bcs.w	8000d2e <__udivmoddi4+0x282>
 8000b36:	429e      	cmp	r6, r3
 8000b38:	f240 80f9 	bls.w	8000d2e <__udivmoddi4+0x282>
 8000b3c:	4463      	add	r3, ip
 8000b3e:	3802      	subs	r0, #2
 8000b40:	1b9b      	subs	r3, r3, r6
 8000b42:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b46:	2100      	movs	r1, #0
 8000b48:	b11d      	cbz	r5, 8000b52 <__udivmoddi4+0xa6>
 8000b4a:	40d3      	lsrs	r3, r2
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d905      	bls.n	8000b66 <__udivmoddi4+0xba>
 8000b5a:	b10d      	cbz	r5, 8000b60 <__udivmoddi4+0xb4>
 8000b5c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b60:	2100      	movs	r1, #0
 8000b62:	4608      	mov	r0, r1
 8000b64:	e7f5      	b.n	8000b52 <__udivmoddi4+0xa6>
 8000b66:	fab3 f183 	clz	r1, r3
 8000b6a:	2900      	cmp	r1, #0
 8000b6c:	d146      	bne.n	8000bfc <__udivmoddi4+0x150>
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	d302      	bcc.n	8000b78 <__udivmoddi4+0xcc>
 8000b72:	4290      	cmp	r0, r2
 8000b74:	f0c0 80f0 	bcc.w	8000d58 <__udivmoddi4+0x2ac>
 8000b78:	1a86      	subs	r6, r0, r2
 8000b7a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b7e:	2001      	movs	r0, #1
 8000b80:	2d00      	cmp	r5, #0
 8000b82:	d0e6      	beq.n	8000b52 <__udivmoddi4+0xa6>
 8000b84:	e9c5 6300 	strd	r6, r3, [r5]
 8000b88:	e7e3      	b.n	8000b52 <__udivmoddi4+0xa6>
 8000b8a:	2a00      	cmp	r2, #0
 8000b8c:	f040 8090 	bne.w	8000cb0 <__udivmoddi4+0x204>
 8000b90:	eba1 040c 	sub.w	r4, r1, ip
 8000b94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b98:	fa1f f78c 	uxth.w	r7, ip
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ba2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ba6:	fb08 4416 	mls	r4, r8, r6, r4
 8000baa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bae:	fb07 f006 	mul.w	r0, r7, r6
 8000bb2:	4298      	cmp	r0, r3
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x11c>
 8000bb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bba:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x11a>
 8000bc0:	4298      	cmp	r0, r3
 8000bc2:	f200 80cd 	bhi.w	8000d60 <__udivmoddi4+0x2b4>
 8000bc6:	4626      	mov	r6, r4
 8000bc8:	1a1c      	subs	r4, r3, r0
 8000bca:	fa1f f38e 	uxth.w	r3, lr
 8000bce:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bd2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bda:	fb00 f707 	mul.w	r7, r0, r7
 8000bde:	429f      	cmp	r7, r3
 8000be0:	d908      	bls.n	8000bf4 <__udivmoddi4+0x148>
 8000be2:	eb1c 0303 	adds.w	r3, ip, r3
 8000be6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bea:	d202      	bcs.n	8000bf2 <__udivmoddi4+0x146>
 8000bec:	429f      	cmp	r7, r3
 8000bee:	f200 80b0 	bhi.w	8000d52 <__udivmoddi4+0x2a6>
 8000bf2:	4620      	mov	r0, r4
 8000bf4:	1bdb      	subs	r3, r3, r7
 8000bf6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bfa:	e7a5      	b.n	8000b48 <__udivmoddi4+0x9c>
 8000bfc:	f1c1 0620 	rsb	r6, r1, #32
 8000c00:	408b      	lsls	r3, r1
 8000c02:	fa22 f706 	lsr.w	r7, r2, r6
 8000c06:	431f      	orrs	r7, r3
 8000c08:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c0c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c10:	ea43 030c 	orr.w	r3, r3, ip
 8000c14:	40f4      	lsrs	r4, r6
 8000c16:	fa00 f801 	lsl.w	r8, r0, r1
 8000c1a:	0c38      	lsrs	r0, r7, #16
 8000c1c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c20:	fbb4 fef0 	udiv	lr, r4, r0
 8000c24:	fa1f fc87 	uxth.w	ip, r7
 8000c28:	fb00 441e 	mls	r4, r0, lr, r4
 8000c2c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c30:	fb0e f90c 	mul.w	r9, lr, ip
 8000c34:	45a1      	cmp	r9, r4
 8000c36:	fa02 f201 	lsl.w	r2, r2, r1
 8000c3a:	d90a      	bls.n	8000c52 <__udivmoddi4+0x1a6>
 8000c3c:	193c      	adds	r4, r7, r4
 8000c3e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c42:	f080 8084 	bcs.w	8000d4e <__udivmoddi4+0x2a2>
 8000c46:	45a1      	cmp	r9, r4
 8000c48:	f240 8081 	bls.w	8000d4e <__udivmoddi4+0x2a2>
 8000c4c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c50:	443c      	add	r4, r7
 8000c52:	eba4 0409 	sub.w	r4, r4, r9
 8000c56:	fa1f f983 	uxth.w	r9, r3
 8000c5a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c5e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c62:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c66:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	d907      	bls.n	8000c7e <__udivmoddi4+0x1d2>
 8000c6e:	193c      	adds	r4, r7, r4
 8000c70:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c74:	d267      	bcs.n	8000d46 <__udivmoddi4+0x29a>
 8000c76:	45a4      	cmp	ip, r4
 8000c78:	d965      	bls.n	8000d46 <__udivmoddi4+0x29a>
 8000c7a:	3b02      	subs	r3, #2
 8000c7c:	443c      	add	r4, r7
 8000c7e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c82:	fba0 9302 	umull	r9, r3, r0, r2
 8000c86:	eba4 040c 	sub.w	r4, r4, ip
 8000c8a:	429c      	cmp	r4, r3
 8000c8c:	46ce      	mov	lr, r9
 8000c8e:	469c      	mov	ip, r3
 8000c90:	d351      	bcc.n	8000d36 <__udivmoddi4+0x28a>
 8000c92:	d04e      	beq.n	8000d32 <__udivmoddi4+0x286>
 8000c94:	b155      	cbz	r5, 8000cac <__udivmoddi4+0x200>
 8000c96:	ebb8 030e 	subs.w	r3, r8, lr
 8000c9a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c9e:	fa04 f606 	lsl.w	r6, r4, r6
 8000ca2:	40cb      	lsrs	r3, r1
 8000ca4:	431e      	orrs	r6, r3
 8000ca6:	40cc      	lsrs	r4, r1
 8000ca8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cac:	2100      	movs	r1, #0
 8000cae:	e750      	b.n	8000b52 <__udivmoddi4+0xa6>
 8000cb0:	f1c2 0320 	rsb	r3, r2, #32
 8000cb4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cbc:	fa24 f303 	lsr.w	r3, r4, r3
 8000cc0:	4094      	lsls	r4, r2
 8000cc2:	430c      	orrs	r4, r1
 8000cc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ccc:	fa1f f78c 	uxth.w	r7, ip
 8000cd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cd8:	0c23      	lsrs	r3, r4, #16
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb00 f107 	mul.w	r1, r0, r7
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d908      	bls.n	8000cf8 <__udivmoddi4+0x24c>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cee:	d22c      	bcs.n	8000d4a <__udivmoddi4+0x29e>
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d92a      	bls.n	8000d4a <__udivmoddi4+0x29e>
 8000cf4:	3802      	subs	r0, #2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d00:	fb08 3311 	mls	r3, r8, r1, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb01 f307 	mul.w	r3, r1, r7
 8000d0c:	42a3      	cmp	r3, r4
 8000d0e:	d908      	bls.n	8000d22 <__udivmoddi4+0x276>
 8000d10:	eb1c 0404 	adds.w	r4, ip, r4
 8000d14:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d18:	d213      	bcs.n	8000d42 <__udivmoddi4+0x296>
 8000d1a:	42a3      	cmp	r3, r4
 8000d1c:	d911      	bls.n	8000d42 <__udivmoddi4+0x296>
 8000d1e:	3902      	subs	r1, #2
 8000d20:	4464      	add	r4, ip
 8000d22:	1ae4      	subs	r4, r4, r3
 8000d24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d28:	e739      	b.n	8000b9e <__udivmoddi4+0xf2>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	e6f0      	b.n	8000b10 <__udivmoddi4+0x64>
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e706      	b.n	8000b40 <__udivmoddi4+0x94>
 8000d32:	45c8      	cmp	r8, r9
 8000d34:	d2ae      	bcs.n	8000c94 <__udivmoddi4+0x1e8>
 8000d36:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d3a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d3e:	3801      	subs	r0, #1
 8000d40:	e7a8      	b.n	8000c94 <__udivmoddi4+0x1e8>
 8000d42:	4631      	mov	r1, r6
 8000d44:	e7ed      	b.n	8000d22 <__udivmoddi4+0x276>
 8000d46:	4603      	mov	r3, r0
 8000d48:	e799      	b.n	8000c7e <__udivmoddi4+0x1d2>
 8000d4a:	4630      	mov	r0, r6
 8000d4c:	e7d4      	b.n	8000cf8 <__udivmoddi4+0x24c>
 8000d4e:	46d6      	mov	lr, sl
 8000d50:	e77f      	b.n	8000c52 <__udivmoddi4+0x1a6>
 8000d52:	4463      	add	r3, ip
 8000d54:	3802      	subs	r0, #2
 8000d56:	e74d      	b.n	8000bf4 <__udivmoddi4+0x148>
 8000d58:	4606      	mov	r6, r0
 8000d5a:	4623      	mov	r3, r4
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	e70f      	b.n	8000b80 <__udivmoddi4+0xd4>
 8000d60:	3e02      	subs	r6, #2
 8000d62:	4463      	add	r3, ip
 8000d64:	e730      	b.n	8000bc8 <__udivmoddi4+0x11c>
 8000d66:	bf00      	nop

08000d68 <__aeabi_idiv0>:
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	0000      	movs	r0, r0
	...

08000d70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d76:	f000 ff14 	bl	8001ba2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d7a:	f000 f883 	bl	8000e84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d7e:	f000 f93d 	bl	8000ffc <MX_GPIO_Init>
  MX_TIM14_Init();
 8000d82:	f000 f8e7 	bl	8000f54 <MX_TIM14_Init>
  MX_USART1_UART_Init();
 8000d86:	f000 f909 	bl	8000f9c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  float pi = 3.1416;
 8000d8a:	4b37      	ldr	r3, [pc, #220]	@ (8000e68 <main+0xf8>)
 8000d8c:	60bb      	str	r3, [r7, #8]
  float resultado_seno = 0.0;
 8000d8e:	f04f 0300 	mov.w	r3, #0
 8000d92:	607b      	str	r3, [r7, #4]
  float t = 0.0;
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//INICIALIZAMOS RELOJ
	HAL_TIM_Base_Start(&htim14);
 8000d9a:	4834      	ldr	r0, [pc, #208]	@ (8000e6c <main+0xfc>)
 8000d9c:	f002 fb00 	bl	80033a0 <HAL_TIM_Base_Start>
	past_timetamp = __HAL_TIM_GetCounter(&htim14);
 8000da0:	4b32      	ldr	r3, [pc, #200]	@ (8000e6c <main+0xfc>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	4b31      	ldr	r3, [pc, #196]	@ (8000e70 <main+0x100>)
 8000daa:	801a      	strh	r2, [r3, #0]

	if (t >= 1.0){ //seteo despues de 1 seg
 8000dac:	edd7 7a03 	vldr	s15, [r7, #12]
 8000db0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000db4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dbc:	db03      	blt.n	8000dc6 <main+0x56>
		t = 0.0;
 8000dbe:	f04f 0300 	mov.w	r3, #0
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	e029      	b.n	8000e1a <main+0xaa>
	}else{
		resultado_seno = sin(2*pi*1*t);
 8000dc6:	edd7 7a02 	vldr	s15, [r7, #8]
 8000dca:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000dce:	edd7 7a03 	vldr	s15, [r7, #12]
 8000dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dd6:	ee17 0a90 	vmov	r0, s15
 8000dda:	f7ff fcf7 	bl	80007cc <__aeabi_f2d>
 8000dde:	4602      	mov	r2, r0
 8000de0:	460b      	mov	r3, r1
 8000de2:	ec43 2b10 	vmov	d0, r2, r3
 8000de6:	f003 fd8b 	bl	8004900 <sin>
 8000dea:	ec53 2b10 	vmov	r2, r3, d0
 8000dee:	4610      	mov	r0, r2
 8000df0:	4619      	mov	r1, r3
 8000df2:	f7ff fdf3 	bl	80009dc <__aeabi_d2f>
 8000df6:	4603      	mov	r3, r0
 8000df8:	607b      	str	r3, [r7, #4]
		t += 0.00277;  //siguiente muestreo
 8000dfa:	68f8      	ldr	r0, [r7, #12]
 8000dfc:	f7ff fce6 	bl	80007cc <__aeabi_f2d>
 8000e00:	a317      	add	r3, pc, #92	@ (adr r3, 8000e60 <main+0xf0>)
 8000e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e06:	f7ff fb83 	bl	8000510 <__adddf3>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	460b      	mov	r3, r1
 8000e0e:	4610      	mov	r0, r2
 8000e10:	4619      	mov	r1, r3
 8000e12:	f7ff fde3 	bl	80009dc <__aeabi_d2f>
 8000e16:	4603      	mov	r3, r0
 8000e18:	60fb      	str	r3, [r7, #12]
	}

	timetamo = __HAL_TIM_GetCounter(&htim14);
 8000e1a:	4b14      	ldr	r3, [pc, #80]	@ (8000e6c <main+0xfc>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e20:	b29a      	uxth	r2, r3
 8000e22:	4b14      	ldr	r3, [pc, #80]	@ (8000e74 <main+0x104>)
 8000e24:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Stop(&htim14);
 8000e26:	4811      	ldr	r0, [pc, #68]	@ (8000e6c <main+0xfc>)
 8000e28:	f002 fb2a 	bl	8003480 <HAL_TIM_Base_Stop>

	sprintf(msg,"tiempo: %d\r\n",(int)(timetamo-past_timetamp));
 8000e2c:	4b11      	ldr	r3, [pc, #68]	@ (8000e74 <main+0x104>)
 8000e2e:	881b      	ldrh	r3, [r3, #0]
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b0f      	ldr	r3, [pc, #60]	@ (8000e70 <main+0x100>)
 8000e34:	881b      	ldrh	r3, [r3, #0]
 8000e36:	1ad3      	subs	r3, r2, r3
 8000e38:	461a      	mov	r2, r3
 8000e3a:	490f      	ldr	r1, [pc, #60]	@ (8000e78 <main+0x108>)
 8000e3c:	480f      	ldr	r0, [pc, #60]	@ (8000e7c <main+0x10c>)
 8000e3e:	f003 f8bd 	bl	8003fbc <siprintf>
	HAL_UART_Transmit(&huart1, msg, sizeof(msg), 100);
 8000e42:	2364      	movs	r3, #100	@ 0x64
 8000e44:	2220      	movs	r2, #32
 8000e46:	490d      	ldr	r1, [pc, #52]	@ (8000e7c <main+0x10c>)
 8000e48:	480d      	ldr	r0, [pc, #52]	@ (8000e80 <main+0x110>)
 8000e4a:	f002 fc2f 	bl	80036ac <HAL_UART_Transmit>

	__HAL_TIM_SetCounter(&htim14,0);
 8000e4e:	4b07      	ldr	r3, [pc, #28]	@ (8000e6c <main+0xfc>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2200      	movs	r2, #0
 8000e54:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_Delay(250);
 8000e56:	20fa      	movs	r0, #250	@ 0xfa
 8000e58:	f000 ff00 	bl	8001c5c <HAL_Delay>
	HAL_TIM_Base_Start(&htim14);
 8000e5c:	e79d      	b.n	8000d9a <main+0x2a>
 8000e5e:	bf00      	nop
 8000e60:	6d1e108c 	.word	0x6d1e108c
 8000e64:	3f66b11c 	.word	0x3f66b11c
 8000e68:	40490ff9 	.word	0x40490ff9
 8000e6c:	20000078 	.word	0x20000078
 8000e70:	2000014e 	.word	0x2000014e
 8000e74:	2000014c 	.word	0x2000014c
 8000e78:	08005978 	.word	0x08005978
 8000e7c:	20000150 	.word	0x20000150
 8000e80:	200000c4 	.word	0x200000c4

08000e84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b094      	sub	sp, #80	@ 0x50
 8000e88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e8a:	f107 0320 	add.w	r3, r7, #32
 8000e8e:	2230      	movs	r2, #48	@ 0x30
 8000e90:	2100      	movs	r1, #0
 8000e92:	4618      	mov	r0, r3
 8000e94:	f003 f8b2 	bl	8003ffc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e98:	f107 030c 	add.w	r3, r7, #12
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea8:	4b28      	ldr	r3, [pc, #160]	@ (8000f4c <SystemClock_Config+0xc8>)
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eac:	4a27      	ldr	r2, [pc, #156]	@ (8000f4c <SystemClock_Config+0xc8>)
 8000eae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eb4:	4b25      	ldr	r3, [pc, #148]	@ (8000f4c <SystemClock_Config+0xc8>)
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ebc:	60bb      	str	r3, [r7, #8]
 8000ebe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ec0:	4b23      	ldr	r3, [pc, #140]	@ (8000f50 <SystemClock_Config+0xcc>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ec8:	4a21      	ldr	r2, [pc, #132]	@ (8000f50 <SystemClock_Config+0xcc>)
 8000eca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ece:	6013      	str	r3, [r2, #0]
 8000ed0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f50 <SystemClock_Config+0xcc>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000edc:	2302      	movs	r3, #2
 8000ede:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ee4:	2310      	movs	r3, #16
 8000ee6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eec:	2300      	movs	r3, #0
 8000eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 10;
 8000ef0:	230a      	movs	r3, #10
 8000ef2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 8000ef4:	23d2      	movs	r3, #210	@ 0xd2
 8000ef6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000efc:	2302      	movs	r3, #2
 8000efe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f00:	f107 0320 	add.w	r3, r7, #32
 8000f04:	4618      	mov	r0, r3
 8000f06:	f001 f979 	bl	80021fc <HAL_RCC_OscConfig>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000f10:	f000 fcda 	bl	80018c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f14:	230f      	movs	r3, #15
 8000f16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f20:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f2a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f2c:	f107 030c 	add.w	r3, r7, #12
 8000f30:	2105      	movs	r1, #5
 8000f32:	4618      	mov	r0, r3
 8000f34:	f001 fc06 	bl	8002744 <HAL_RCC_ClockConfig>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000f3e:	f000 fcc3 	bl	80018c8 <Error_Handler>
  }
}
 8000f42:	bf00      	nop
 8000f44:	3750      	adds	r7, #80	@ 0x50
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40007000 	.word	0x40007000

08000f54 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000f58:	4b0e      	ldr	r3, [pc, #56]	@ (8000f94 <MX_TIM14_Init+0x40>)
 8000f5a:	4a0f      	ldr	r2, [pc, #60]	@ (8000f98 <MX_TIM14_Init+0x44>)
 8000f5c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 84-1;
 8000f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f94 <MX_TIM14_Init+0x40>)
 8000f60:	2253      	movs	r2, #83	@ 0x53
 8000f62:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f64:	4b0b      	ldr	r3, [pc, #44]	@ (8000f94 <MX_TIM14_Init+0x40>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f94 <MX_TIM14_Init+0x40>)
 8000f6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f70:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f72:	4b08      	ldr	r3, [pc, #32]	@ (8000f94 <MX_TIM14_Init+0x40>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f78:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <MX_TIM14_Init+0x40>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000f7e:	4805      	ldr	r0, [pc, #20]	@ (8000f94 <MX_TIM14_Init+0x40>)
 8000f80:	f002 f9b6 	bl	80032f0 <HAL_TIM_Base_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000f8a:	f000 fc9d 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000078 	.word	0x20000078
 8000f98:	40002000 	.word	0x40002000

08000f9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fa0:	4b14      	ldr	r3, [pc, #80]	@ (8000ff4 <MX_USART1_UART_Init+0x58>)
 8000fa2:	4a15      	ldr	r2, [pc, #84]	@ (8000ff8 <MX_USART1_UART_Init+0x5c>)
 8000fa4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fa6:	4b13      	ldr	r3, [pc, #76]	@ (8000ff4 <MX_USART1_UART_Init+0x58>)
 8000fa8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fae:	4b11      	ldr	r3, [pc, #68]	@ (8000ff4 <MX_USART1_UART_Init+0x58>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff4 <MX_USART1_UART_Init+0x58>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fba:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff4 <MX_USART1_UART_Init+0x58>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff4 <MX_USART1_UART_Init+0x58>)
 8000fc2:	220c      	movs	r2, #12
 8000fc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff4 <MX_USART1_UART_Init+0x58>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fcc:	4b09      	ldr	r3, [pc, #36]	@ (8000ff4 <MX_USART1_UART_Init+0x58>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fd2:	4b08      	ldr	r3, [pc, #32]	@ (8000ff4 <MX_USART1_UART_Init+0x58>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <MX_USART1_UART_Init+0x58>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fde:	4805      	ldr	r0, [pc, #20]	@ (8000ff4 <MX_USART1_UART_Init+0x58>)
 8000fe0:	f002 fb16 	bl	8003610 <HAL_UART_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000fea:	f000 fc6d 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200000c4 	.word	0x200000c4
 8000ff8:	40011000 	.word	0x40011000

08000ffc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b090      	sub	sp, #64	@ 0x40
 8001000:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001002:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	60da      	str	r2, [r3, #12]
 8001010:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001012:	4bad      	ldr	r3, [pc, #692]	@ (80012c8 <MX_GPIO_Init+0x2cc>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001016:	4aac      	ldr	r2, [pc, #688]	@ (80012c8 <MX_GPIO_Init+0x2cc>)
 8001018:	f043 0310 	orr.w	r3, r3, #16
 800101c:	6313      	str	r3, [r2, #48]	@ 0x30
 800101e:	4baa      	ldr	r3, [pc, #680]	@ (80012c8 <MX_GPIO_Init+0x2cc>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	f003 0310 	and.w	r3, r3, #16
 8001026:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800102a:	4ba7      	ldr	r3, [pc, #668]	@ (80012c8 <MX_GPIO_Init+0x2cc>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	4aa6      	ldr	r2, [pc, #664]	@ (80012c8 <MX_GPIO_Init+0x2cc>)
 8001030:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001034:	6313      	str	r3, [r2, #48]	@ 0x30
 8001036:	4ba4      	ldr	r3, [pc, #656]	@ (80012c8 <MX_GPIO_Init+0x2cc>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800103e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001042:	4ba1      	ldr	r3, [pc, #644]	@ (80012c8 <MX_GPIO_Init+0x2cc>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001046:	4aa0      	ldr	r2, [pc, #640]	@ (80012c8 <MX_GPIO_Init+0x2cc>)
 8001048:	f043 0302 	orr.w	r3, r3, #2
 800104c:	6313      	str	r3, [r2, #48]	@ 0x30
 800104e:	4b9e      	ldr	r3, [pc, #632]	@ (80012c8 <MX_GPIO_Init+0x2cc>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	623b      	str	r3, [r7, #32]
 8001058:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800105a:	4b9b      	ldr	r3, [pc, #620]	@ (80012c8 <MX_GPIO_Init+0x2cc>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105e:	4a9a      	ldr	r2, [pc, #616]	@ (80012c8 <MX_GPIO_Init+0x2cc>)
 8001060:	f043 0308 	orr.w	r3, r3, #8
 8001064:	6313      	str	r3, [r2, #48]	@ 0x30
 8001066:	4b98      	ldr	r3, [pc, #608]	@ (80012c8 <MX_GPIO_Init+0x2cc>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106a:	f003 0308 	and.w	r3, r3, #8
 800106e:	61fb      	str	r3, [r7, #28]
 8001070:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001072:	4b95      	ldr	r3, [pc, #596]	@ (80012c8 <MX_GPIO_Init+0x2cc>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001076:	4a94      	ldr	r2, [pc, #592]	@ (80012c8 <MX_GPIO_Init+0x2cc>)
 8001078:	f043 0304 	orr.w	r3, r3, #4
 800107c:	6313      	str	r3, [r2, #48]	@ 0x30
 800107e:	4b92      	ldr	r3, [pc, #584]	@ (80012c8 <MX_GPIO_Init+0x2cc>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001082:	f003 0304 	and.w	r3, r3, #4
 8001086:	61bb      	str	r3, [r7, #24]
 8001088:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800108a:	4b8f      	ldr	r3, [pc, #572]	@ (80012c8 <MX_GPIO_Init+0x2cc>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	4a8e      	ldr	r2, [pc, #568]	@ (80012c8 <MX_GPIO_Init+0x2cc>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6313      	str	r3, [r2, #48]	@ 0x30
 8001096:	4b8c      	ldr	r3, [pc, #560]	@ (80012c8 <MX_GPIO_Init+0x2cc>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	617b      	str	r3, [r7, #20]
 80010a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80010a2:	4b89      	ldr	r3, [pc, #548]	@ (80012c8 <MX_GPIO_Init+0x2cc>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	4a88      	ldr	r2, [pc, #544]	@ (80012c8 <MX_GPIO_Init+0x2cc>)
 80010a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ae:	4b86      	ldr	r3, [pc, #536]	@ (80012c8 <MX_GPIO_Init+0x2cc>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80010ba:	4b83      	ldr	r3, [pc, #524]	@ (80012c8 <MX_GPIO_Init+0x2cc>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	4a82      	ldr	r2, [pc, #520]	@ (80012c8 <MX_GPIO_Init+0x2cc>)
 80010c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c6:	4b80      	ldr	r3, [pc, #512]	@ (80012c8 <MX_GPIO_Init+0x2cc>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80010d2:	4b7d      	ldr	r3, [pc, #500]	@ (80012c8 <MX_GPIO_Init+0x2cc>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d6:	4a7c      	ldr	r2, [pc, #496]	@ (80012c8 <MX_GPIO_Init+0x2cc>)
 80010d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010de:	4b7a      	ldr	r3, [pc, #488]	@ (80012c8 <MX_GPIO_Init+0x2cc>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010ea:	4b77      	ldr	r3, [pc, #476]	@ (80012c8 <MX_GPIO_Init+0x2cc>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	4a76      	ldr	r2, [pc, #472]	@ (80012c8 <MX_GPIO_Init+0x2cc>)
 80010f0:	f043 0320 	orr.w	r3, r3, #32
 80010f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f6:	4b74      	ldr	r3, [pc, #464]	@ (80012c8 <MX_GPIO_Init+0x2cc>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fa:	f003 0320 	and.w	r3, r3, #32
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001102:	4b71      	ldr	r3, [pc, #452]	@ (80012c8 <MX_GPIO_Init+0x2cc>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	4a70      	ldr	r2, [pc, #448]	@ (80012c8 <MX_GPIO_Init+0x2cc>)
 8001108:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800110c:	6313      	str	r3, [r2, #48]	@ 0x30
 800110e:	4b6e      	ldr	r3, [pc, #440]	@ (80012c8 <MX_GPIO_Init+0x2cc>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001116:	603b      	str	r3, [r7, #0]
 8001118:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800111a:	2201      	movs	r2, #1
 800111c:	2120      	movs	r1, #32
 800111e:	486b      	ldr	r0, [pc, #428]	@ (80012cc <MX_GPIO_Init+0x2d0>)
 8001120:	f001 f852 	bl	80021c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|led_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	f241 010e 	movw	r1, #4110	@ 0x100e
 800112a:	4869      	ldr	r0, [pc, #420]	@ (80012d0 <MX_GPIO_Init+0x2d4>)
 800112c:	f001 f84c 	bl	80021c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8001130:	2200      	movs	r2, #0
 8001132:	2108      	movs	r1, #8
 8001134:	4867      	ldr	r0, [pc, #412]	@ (80012d4 <MX_GPIO_Init+0x2d8>)
 8001136:	f001 f847 	bl	80021c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800113a:	2200      	movs	r2, #0
 800113c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001140:	4865      	ldr	r0, [pc, #404]	@ (80012d8 <MX_GPIO_Init+0x2dc>)
 8001142:	f001 f841 	bl	80021c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001146:	2200      	movs	r2, #0
 8001148:	21c8      	movs	r1, #200	@ 0xc8
 800114a:	4864      	ldr	r0, [pc, #400]	@ (80012dc <MX_GPIO_Init+0x2e0>)
 800114c:	f001 f83c 	bl	80021c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001150:	2310      	movs	r3, #16
 8001152:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001154:	2302      	movs	r3, #2
 8001156:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	2300      	movs	r3, #0
 800115e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001160:	230e      	movs	r3, #14
 8001162:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001164:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001168:	4619      	mov	r1, r3
 800116a:	485d      	ldr	r0, [pc, #372]	@ (80012e0 <MX_GPIO_Init+0x2e4>)
 800116c:	f000 fe80 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001170:	2308      	movs	r3, #8
 8001172:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001174:	2300      	movs	r3, #0
 8001176:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800117c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001180:	4619      	mov	r1, r3
 8001182:	4857      	ldr	r0, [pc, #348]	@ (80012e0 <MX_GPIO_Init+0x2e4>)
 8001184:	f000 fe74 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001188:	2304      	movs	r3, #4
 800118a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118c:	2302      	movs	r3, #2
 800118e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001194:	2303      	movs	r3, #3
 8001196:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001198:	2309      	movs	r3, #9
 800119a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800119c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011a0:	4619      	mov	r1, r3
 80011a2:	484f      	ldr	r0, [pc, #316]	@ (80012e0 <MX_GPIO_Init+0x2e4>)
 80011a4:	f000 fe64 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80011a8:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 80011ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b6:	2303      	movs	r3, #3
 80011b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011ba:	230b      	movs	r3, #11
 80011bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011c2:	4619      	mov	r1, r3
 80011c4:	4845      	ldr	r0, [pc, #276]	@ (80012dc <MX_GPIO_Init+0x2e0>)
 80011c6:	f000 fe53 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80011ca:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80011ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d0:	2302      	movs	r3, #2
 80011d2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d8:	2303      	movs	r3, #3
 80011da:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011dc:	230c      	movs	r3, #12
 80011de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011e4:	4619      	mov	r1, r3
 80011e6:	483e      	ldr	r0, [pc, #248]	@ (80012e0 <MX_GPIO_Init+0x2e4>)
 80011e8:	f000 fe42 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80011ec:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011f2:	2312      	movs	r3, #18
 80011f4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fa:	2300      	movs	r3, #0
 80011fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011fe:	2304      	movs	r3, #4
 8001200:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001202:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001206:	4619      	mov	r1, r3
 8001208:	4836      	ldr	r0, [pc, #216]	@ (80012e4 <MX_GPIO_Init+0x2e8>)
 800120a:	f000 fe31 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800120e:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8001212:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001214:	2302      	movs	r3, #2
 8001216:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121c:	2303      	movs	r3, #3
 800121e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001220:	230a      	movs	r3, #10
 8001222:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001224:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001228:	4619      	mov	r1, r3
 800122a:	482e      	ldr	r0, [pc, #184]	@ (80012e4 <MX_GPIO_Init+0x2e8>)
 800122c:	f000 fe20 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8001230:	2310      	movs	r3, #16
 8001232:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001234:	2302      	movs	r3, #2
 8001236:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123c:	2300      	movs	r3, #0
 800123e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001240:	2302      	movs	r3, #2
 8001242:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8001244:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001248:	4619      	mov	r1, r3
 800124a:	4826      	ldr	r0, [pc, #152]	@ (80012e4 <MX_GPIO_Init+0x2e8>)
 800124c:	f000 fe10 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001250:	2380      	movs	r3, #128	@ 0x80
 8001252:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125c:	2300      	movs	r3, #0
 800125e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001260:	2308      	movs	r3, #8
 8001262:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001264:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001268:	4619      	mov	r1, r3
 800126a:	4818      	ldr	r0, [pc, #96]	@ (80012cc <MX_GPIO_Init+0x2d0>)
 800126c:	f000 fe00 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001270:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001274:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001276:	2302      	movs	r3, #2
 8001278:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127e:	2303      	movs	r3, #3
 8001280:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001282:	230c      	movs	r3, #12
 8001284:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001286:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800128a:	4619      	mov	r1, r3
 800128c:	4816      	ldr	r0, [pc, #88]	@ (80012e8 <MX_GPIO_Init+0x2ec>)
 800128e:	f000 fdef 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8001292:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001296:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001298:	2302      	movs	r3, #2
 800129a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a0:	2300      	movs	r3, #0
 80012a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012a4:	2301      	movs	r3, #1
 80012a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80012a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012ac:	4619      	mov	r1, r3
 80012ae:	480f      	ldr	r0, [pc, #60]	@ (80012ec <MX_GPIO_Init+0x2f0>)
 80012b0:	f000 fdde 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80012b4:	2360      	movs	r3, #96	@ 0x60
 80012b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b8:	2302      	movs	r3, #2
 80012ba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2300      	movs	r3, #0
 80012c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80012c4:	230d      	movs	r3, #13
 80012c6:	e013      	b.n	80012f0 <MX_GPIO_Init+0x2f4>
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40020c00 	.word	0x40020c00
 80012d0:	40022000 	.word	0x40022000
 80012d4:	40022800 	.word	0x40022800
 80012d8:	40021c00 	.word	0x40021c00
 80012dc:	40021800 	.word	0x40021800
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40020400 	.word	0x40020400
 80012e8:	40020800 	.word	0x40020800
 80012ec:	40020000 	.word	0x40020000
 80012f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012f6:	4619      	mov	r1, r3
 80012f8:	48bc      	ldr	r0, [pc, #752]	@ (80015ec <MX_GPIO_Init+0x5f0>)
 80012fa:	f000 fdb9 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80012fe:	2340      	movs	r3, #64	@ 0x40
 8001300:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001302:	2302      	movs	r3, #2
 8001304:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130a:	2303      	movs	r3, #3
 800130c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800130e:	230a      	movs	r3, #10
 8001310:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001312:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001316:	4619      	mov	r1, r3
 8001318:	48b5      	ldr	r0, [pc, #724]	@ (80015f0 <MX_GPIO_Init+0x5f4>)
 800131a:	f000 fda9 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800131e:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001322:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001324:	2302      	movs	r3, #2
 8001326:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132c:	2303      	movs	r3, #3
 800132e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001330:	230c      	movs	r3, #12
 8001332:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001334:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001338:	4619      	mov	r1, r3
 800133a:	48ae      	ldr	r0, [pc, #696]	@ (80015f4 <MX_GPIO_Init+0x5f8>)
 800133c:	f000 fd98 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001340:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8001344:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001346:	2302      	movs	r3, #2
 8001348:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134e:	2300      	movs	r3, #0
 8001350:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001352:	230e      	movs	r3, #14
 8001354:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001356:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800135a:	4619      	mov	r1, r3
 800135c:	48a6      	ldr	r0, [pc, #664]	@ (80015f8 <MX_GPIO_Init+0x5fc>)
 800135e:	f000 fd87 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001362:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001366:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001368:	2300      	movs	r3, #0
 800136a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001370:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001374:	4619      	mov	r1, r3
 8001376:	48a0      	ldr	r0, [pc, #640]	@ (80015f8 <MX_GPIO_Init+0x5fc>)
 8001378:	f000 fd7a 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800137c:	2340      	movs	r3, #64	@ 0x40
 800137e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001380:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001384:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800138a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800138e:	4619      	mov	r1, r3
 8001390:	489a      	ldr	r0, [pc, #616]	@ (80015fc <MX_GPIO_Init+0x600>)
 8001392:	f000 fd6d 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8001396:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800139a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139c:	2302      	movs	r3, #2
 800139e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a4:	2303      	movs	r3, #3
 80013a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013a8:	230c      	movs	r3, #12
 80013aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013b0:	4619      	mov	r1, r3
 80013b2:	4892      	ldr	r0, [pc, #584]	@ (80015fc <MX_GPIO_Init+0x600>)
 80013b4:	f000 fd5c 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80013b8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80013bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013be:	2302      	movs	r3, #2
 80013c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c6:	2303      	movs	r3, #3
 80013c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013ca:	230a      	movs	r3, #10
 80013cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013d2:	4619      	mov	r1, r3
 80013d4:	488a      	ldr	r0, [pc, #552]	@ (8001600 <MX_GPIO_Init+0x604>)
 80013d6:	f000 fd4b 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80013da:	23f0      	movs	r3, #240	@ 0xf0
 80013dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80013ea:	230a      	movs	r3, #10
 80013ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80013ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013f2:	4619      	mov	r1, r3
 80013f4:	4883      	ldr	r0, [pc, #524]	@ (8001604 <MX_GPIO_Init+0x608>)
 80013f6:	f000 fd3b 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80013fa:	23f7      	movs	r3, #247	@ 0xf7
 80013fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fe:	2302      	movs	r3, #2
 8001400:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001406:	2300      	movs	r3, #0
 8001408:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800140a:	230e      	movs	r3, #14
 800140c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800140e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001412:	4619      	mov	r1, r3
 8001414:	487c      	ldr	r0, [pc, #496]	@ (8001608 <MX_GPIO_Init+0x60c>)
 8001416:	f000 fd2b 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 800141a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800141e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001420:	2302      	movs	r3, #2
 8001422:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001428:	2300      	movs	r3, #0
 800142a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800142c:	2309      	movs	r3, #9
 800142e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001430:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001434:	4619      	mov	r1, r3
 8001436:	486f      	ldr	r0, [pc, #444]	@ (80015f4 <MX_GPIO_Init+0x5f8>)
 8001438:	f000 fd1a 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800143c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001440:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	2302      	movs	r3, #2
 8001444:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2300      	movs	r3, #0
 800144c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800144e:	230a      	movs	r3, #10
 8001450:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001452:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001456:	4619      	mov	r1, r3
 8001458:	4866      	ldr	r0, [pc, #408]	@ (80015f4 <MX_GPIO_Init+0x5f8>)
 800145a:	f000 fd09 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800145e:	2320      	movs	r3, #32
 8001460:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001462:	2301      	movs	r3, #1
 8001464:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2300      	movs	r3, #0
 800146c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800146e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001472:	4619      	mov	r1, r3
 8001474:	4861      	ldr	r0, [pc, #388]	@ (80015fc <MX_GPIO_Init+0x600>)
 8001476:	f000 fcfb 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800147a:	2308      	movs	r3, #8
 800147c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147e:	2302      	movs	r3, #2
 8001480:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001486:	2300      	movs	r3, #0
 8001488:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800148a:	230d      	movs	r3, #13
 800148c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800148e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001492:	4619      	mov	r1, r3
 8001494:	4859      	ldr	r0, [pc, #356]	@ (80015fc <MX_GPIO_Init+0x600>)
 8001496:	f000 fceb 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin led_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|led_Pin|LCD_DISP_Pin;
 800149a:	f241 030e 	movw	r3, #4110	@ 0x100e
 800149e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a0:	2301      	movs	r3, #1
 80014a2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a8:	2300      	movs	r3, #0
 80014aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80014ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014b0:	4619      	mov	r1, r3
 80014b2:	4854      	ldr	r0, [pc, #336]	@ (8001604 <MX_GPIO_Init+0x608>)
 80014b4:	f000 fcdc 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80014b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014be:	2300      	movs	r3, #0
 80014c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80014c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014ca:	4619      	mov	r1, r3
 80014cc:	484f      	ldr	r0, [pc, #316]	@ (800160c <MX_GPIO_Init+0x610>)
 80014ce:	f000 fccf 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80014d2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80014d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d8:	2302      	movs	r3, #2
 80014da:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e0:	2303      	movs	r3, #3
 80014e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014e4:	230c      	movs	r3, #12
 80014e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014ec:	4619      	mov	r1, r3
 80014ee:	4848      	ldr	r0, [pc, #288]	@ (8001610 <MX_GPIO_Init+0x614>)
 80014f0:	f000 fcbe 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80014f4:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 80014f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	2302      	movs	r3, #2
 80014fc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001502:	2300      	movs	r3, #0
 8001504:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001506:	230e      	movs	r3, #14
 8001508:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800150a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800150e:	4619      	mov	r1, r3
 8001510:	483c      	ldr	r0, [pc, #240]	@ (8001604 <MX_GPIO_Init+0x608>)
 8001512:	f000 fcad 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001516:	2308      	movs	r3, #8
 8001518:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151a:	2301      	movs	r3, #1
 800151c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001522:	2300      	movs	r3, #0
 8001524:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001526:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800152a:	4619      	mov	r1, r3
 800152c:	4836      	ldr	r0, [pc, #216]	@ (8001608 <MX_GPIO_Init+0x60c>)
 800152e:	f000 fc9f 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001532:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001536:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001538:	2302      	movs	r3, #2
 800153a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001540:	2300      	movs	r3, #0
 8001542:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001544:	230d      	movs	r3, #13
 8001546:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001548:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800154c:	4619      	mov	r1, r3
 800154e:	4829      	ldr	r0, [pc, #164]	@ (80015f4 <MX_GPIO_Init+0x5f8>)
 8001550:	f000 fc8e 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001554:	2310      	movs	r3, #16
 8001556:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001558:	2300      	movs	r3, #0
 800155a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001560:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001564:	4619      	mov	r1, r3
 8001566:	4825      	ldr	r0, [pc, #148]	@ (80015fc <MX_GPIO_Init+0x600>)
 8001568:	f000 fc82 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 800156c:	2304      	movs	r3, #4
 800156e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001570:	2302      	movs	r3, #2
 8001572:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001578:	2303      	movs	r3, #3
 800157a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800157c:	230c      	movs	r3, #12
 800157e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8001580:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001584:	4619      	mov	r1, r3
 8001586:	481d      	ldr	r0, [pc, #116]	@ (80015fc <MX_GPIO_Init+0x600>)
 8001588:	f000 fc72 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800158c:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001590:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001592:	2300      	movs	r3, #0
 8001594:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800159a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800159e:	4619      	mov	r1, r3
 80015a0:	481c      	ldr	r0, [pc, #112]	@ (8001614 <MX_GPIO_Init+0x618>)
 80015a2:	f000 fc65 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80015a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ac:	2301      	movs	r3, #1
 80015ae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80015b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015bc:	4619      	mov	r1, r3
 80015be:	4815      	ldr	r0, [pc, #84]	@ (8001614 <MX_GPIO_Init+0x618>)
 80015c0:	f000 fc56 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80015c4:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 80015c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80015d6:	230d      	movs	r3, #13
 80015d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015de:	4619      	mov	r1, r3
 80015e0:	480c      	ldr	r0, [pc, #48]	@ (8001614 <MX_GPIO_Init+0x618>)
 80015e2:	f000 fc45 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e016      	b.n	8001618 <MX_GPIO_Init+0x61c>
 80015ea:	bf00      	nop
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40020400 	.word	0x40020400
 80015f4:	40021800 	.word	0x40021800
 80015f8:	40022400 	.word	0x40022400
 80015fc:	40020c00 	.word	0x40020c00
 8001600:	40020000 	.word	0x40020000
 8001604:	40022000 	.word	0x40022000
 8001608:	40022800 	.word	0x40022800
 800160c:	40020800 	.word	0x40020800
 8001610:	40021400 	.word	0x40021400
 8001614:	40021c00 	.word	0x40021c00
 8001618:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161a:	2302      	movs	r3, #2
 800161c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001622:	2300      	movs	r3, #0
 8001624:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001626:	2302      	movs	r3, #2
 8001628:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800162a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800162e:	4619      	mov	r1, r3
 8001630:	489d      	ldr	r0, [pc, #628]	@ (80018a8 <MX_GPIO_Init+0x8ac>)
 8001632:	f000 fc1d 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8001636:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800163a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163c:	2302      	movs	r3, #2
 800163e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001644:	2300      	movs	r3, #0
 8001646:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001648:	2301      	movs	r3, #1
 800164a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800164c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001650:	4619      	mov	r1, r3
 8001652:	4896      	ldr	r0, [pc, #600]	@ (80018ac <MX_GPIO_Init+0x8b0>)
 8001654:	f000 fc0c 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001658:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800165c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800165e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001662:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001668:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800166c:	4619      	mov	r1, r3
 800166e:	488e      	ldr	r0, [pc, #568]	@ (80018a8 <MX_GPIO_Init+0x8ac>)
 8001670:	f000 fbfe 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8001674:	23c0      	movs	r3, #192	@ 0xc0
 8001676:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001678:	2302      	movs	r3, #2
 800167a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001680:	2303      	movs	r3, #3
 8001682:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001684:	2308      	movs	r3, #8
 8001686:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001688:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800168c:	4619      	mov	r1, r3
 800168e:	4888      	ldr	r0, [pc, #544]	@ (80018b0 <MX_GPIO_Init+0x8b4>)
 8001690:	f000 fbee 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001694:	2310      	movs	r3, #16
 8001696:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001698:	2302      	movs	r3, #2
 800169a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a0:	2303      	movs	r3, #3
 80016a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80016a4:	230a      	movs	r3, #10
 80016a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80016a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016ac:	4619      	mov	r1, r3
 80016ae:	4881      	ldr	r0, [pc, #516]	@ (80018b4 <MX_GPIO_Init+0x8b8>)
 80016b0:	f000 fbde 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80016b4:	2328      	movs	r3, #40	@ 0x28
 80016b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b8:	2302      	movs	r3, #2
 80016ba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c0:	2303      	movs	r3, #3
 80016c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016c4:	230c      	movs	r3, #12
 80016c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016cc:	4619      	mov	r1, r3
 80016ce:	4879      	ldr	r0, [pc, #484]	@ (80018b4 <MX_GPIO_Init+0x8b8>)
 80016d0:	f000 fbce 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80016d4:	23c8      	movs	r3, #200	@ 0xc8
 80016d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d8:	2301      	movs	r3, #1
 80016da:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	2300      	movs	r3, #0
 80016e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016e8:	4619      	mov	r1, r3
 80016ea:	4873      	ldr	r0, [pc, #460]	@ (80018b8 <MX_GPIO_Init+0x8bc>)
 80016ec:	f000 fbc0 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80016f0:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 80016f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016f6:	2303      	movs	r3, #3
 80016f8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001702:	4619      	mov	r1, r3
 8001704:	486d      	ldr	r0, [pc, #436]	@ (80018bc <MX_GPIO_Init+0x8c0>)
 8001706:	f000 fbb3 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800170a:	2308      	movs	r3, #8
 800170c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170e:	2302      	movs	r3, #2
 8001710:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001716:	2303      	movs	r3, #3
 8001718:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800171a:	230c      	movs	r3, #12
 800171c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800171e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001722:	4619      	mov	r1, r3
 8001724:	4862      	ldr	r0, [pc, #392]	@ (80018b0 <MX_GPIO_Init+0x8b4>)
 8001726:	f000 fba3 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800172a:	2305      	movs	r3, #5
 800172c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001736:	2303      	movs	r3, #3
 8001738:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800173a:	230a      	movs	r3, #10
 800173c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800173e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001742:	4619      	mov	r1, r3
 8001744:	485a      	ldr	r0, [pc, #360]	@ (80018b0 <MX_GPIO_Init+0x8b4>)
 8001746:	f000 fb93 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800174a:	2332      	movs	r3, #50	@ 0x32
 800174c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	2302      	movs	r3, #2
 8001750:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001756:	2303      	movs	r3, #3
 8001758:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800175a:	230b      	movs	r3, #11
 800175c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800175e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001762:	4619      	mov	r1, r3
 8001764:	4852      	ldr	r0, [pc, #328]	@ (80018b0 <MX_GPIO_Init+0x8b4>)
 8001766:	f000 fb83 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800176a:	2304      	movs	r3, #4
 800176c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176e:	2302      	movs	r3, #2
 8001770:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001776:	2303      	movs	r3, #3
 8001778:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800177a:	2309      	movs	r3, #9
 800177c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001782:	4619      	mov	r1, r3
 8001784:	484e      	ldr	r0, [pc, #312]	@ (80018c0 <MX_GPIO_Init+0x8c4>)
 8001786:	f000 fb73 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800178a:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800178e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001790:	2302      	movs	r3, #2
 8001792:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001798:	2303      	movs	r3, #3
 800179a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800179c:	2309      	movs	r3, #9
 800179e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017a4:	4619      	mov	r1, r3
 80017a6:	4847      	ldr	r0, [pc, #284]	@ (80018c4 <MX_GPIO_Init+0x8c8>)
 80017a8:	f000 fb62 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80017ac:	2304      	movs	r3, #4
 80017ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b0:	2300      	movs	r3, #0
 80017b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80017b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017bc:	4619      	mov	r1, r3
 80017be:	483e      	ldr	r0, [pc, #248]	@ (80018b8 <MX_GPIO_Init+0x8bc>)
 80017c0:	f000 fb56 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80017c4:	2386      	movs	r3, #134	@ 0x86
 80017c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c8:	2302      	movs	r3, #2
 80017ca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d0:	2303      	movs	r3, #3
 80017d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017d4:	230b      	movs	r3, #11
 80017d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017dc:	4619      	mov	r1, r3
 80017de:	4833      	ldr	r0, [pc, #204]	@ (80018ac <MX_GPIO_Init+0x8b0>)
 80017e0:	f000 fb46 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80017e4:	2301      	movs	r3, #1
 80017e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017e8:	2303      	movs	r3, #3
 80017ea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80017f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017f4:	4619      	mov	r1, r3
 80017f6:	482d      	ldr	r0, [pc, #180]	@ (80018ac <MX_GPIO_Init+0x8b0>)
 80017f8:	f000 fb3a 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80017fc:	2350      	movs	r3, #80	@ 0x50
 80017fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001800:	2302      	movs	r3, #2
 8001802:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001808:	2300      	movs	r3, #0
 800180a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800180c:	230d      	movs	r3, #13
 800180e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001810:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001814:	4619      	mov	r1, r3
 8001816:	4825      	ldr	r0, [pc, #148]	@ (80018ac <MX_GPIO_Init+0x8b0>)
 8001818:	f000 fb2a 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800181c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001820:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001822:	2312      	movs	r3, #18
 8001824:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182a:	2303      	movs	r3, #3
 800182c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800182e:	2304      	movs	r3, #4
 8001830:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001832:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001836:	4619      	mov	r1, r3
 8001838:	481e      	ldr	r0, [pc, #120]	@ (80018b4 <MX_GPIO_Init+0x8b8>)
 800183a:	f000 fb19 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800183e:	2328      	movs	r3, #40	@ 0x28
 8001840:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001842:	2302      	movs	r3, #2
 8001844:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184a:	2303      	movs	r3, #3
 800184c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800184e:	230a      	movs	r3, #10
 8001850:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001852:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001856:	4619      	mov	r1, r3
 8001858:	4814      	ldr	r0, [pc, #80]	@ (80018ac <MX_GPIO_Init+0x8b0>)
 800185a:	f000 fb09 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800185e:	2340      	movs	r3, #64	@ 0x40
 8001860:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001862:	2302      	movs	r3, #2
 8001864:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186a:	2300      	movs	r3, #0
 800186c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800186e:	2309      	movs	r3, #9
 8001870:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001872:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001876:	4619      	mov	r1, r3
 8001878:	480e      	ldr	r0, [pc, #56]	@ (80018b4 <MX_GPIO_Init+0x8b8>)
 800187a:	f000 faf9 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800187e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001882:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001884:	2302      	movs	r3, #2
 8001886:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188c:	2300      	movs	r3, #0
 800188e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001890:	2305      	movs	r3, #5
 8001892:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001894:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001898:	4619      	mov	r1, r3
 800189a:	4809      	ldr	r0, [pc, #36]	@ (80018c0 <MX_GPIO_Init+0x8c4>)
 800189c:	f000 fae8 	bl	8001e70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018a0:	bf00      	nop
 80018a2:	3740      	adds	r7, #64	@ 0x40
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40022000 	.word	0x40022000
 80018ac:	40020000 	.word	0x40020000
 80018b0:	40020800 	.word	0x40020800
 80018b4:	40021c00 	.word	0x40021c00
 80018b8:	40021800 	.word	0x40021800
 80018bc:	40021400 	.word	0x40021400
 80018c0:	40020400 	.word	0x40020400
 80018c4:	40020c00 	.word	0x40020c00

080018c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018cc:	b672      	cpsid	i
}
 80018ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018d0:	bf00      	nop
 80018d2:	e7fd      	b.n	80018d0 <Error_Handler+0x8>

080018d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80018da:	4b0f      	ldr	r3, [pc, #60]	@ (8001918 <HAL_MspInit+0x44>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018de:	4a0e      	ldr	r2, [pc, #56]	@ (8001918 <HAL_MspInit+0x44>)
 80018e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80018e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001918 <HAL_MspInit+0x44>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f2:	4b09      	ldr	r3, [pc, #36]	@ (8001918 <HAL_MspInit+0x44>)
 80018f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018f6:	4a08      	ldr	r2, [pc, #32]	@ (8001918 <HAL_MspInit+0x44>)
 80018f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80018fe:	4b06      	ldr	r3, [pc, #24]	@ (8001918 <HAL_MspInit+0x44>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001902:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001906:	603b      	str	r3, [r7, #0]
 8001908:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	40023800 	.word	0x40023800

0800191c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a0a      	ldr	r2, [pc, #40]	@ (8001954 <HAL_TIM_Base_MspInit+0x38>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d10b      	bne.n	8001946 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800192e:	4b0a      	ldr	r3, [pc, #40]	@ (8001958 <HAL_TIM_Base_MspInit+0x3c>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001932:	4a09      	ldr	r2, [pc, #36]	@ (8001958 <HAL_TIM_Base_MspInit+0x3c>)
 8001934:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001938:	6413      	str	r3, [r2, #64]	@ 0x40
 800193a:	4b07      	ldr	r3, [pc, #28]	@ (8001958 <HAL_TIM_Base_MspInit+0x3c>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001946:	bf00      	nop
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	40002000 	.word	0x40002000
 8001958:	40023800 	.word	0x40023800

0800195c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b0ac      	sub	sp, #176	@ 0xb0
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001964:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001974:	f107 0318 	add.w	r3, r7, #24
 8001978:	2284      	movs	r2, #132	@ 0x84
 800197a:	2100      	movs	r1, #0
 800197c:	4618      	mov	r0, r3
 800197e:	f002 fb3d 	bl	8003ffc <memset>
  if(huart->Instance==USART1)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a32      	ldr	r2, [pc, #200]	@ (8001a50 <HAL_UART_MspInit+0xf4>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d15c      	bne.n	8001a46 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800198c:	2340      	movs	r3, #64	@ 0x40
 800198e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001990:	2300      	movs	r3, #0
 8001992:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001994:	f107 0318 	add.w	r3, r7, #24
 8001998:	4618      	mov	r0, r3
 800199a:	f001 f8b9 	bl	8002b10 <HAL_RCCEx_PeriphCLKConfig>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019a4:	f7ff ff90 	bl	80018c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001a54 <HAL_UART_MspInit+0xf8>)
 80019aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ac:	4a29      	ldr	r2, [pc, #164]	@ (8001a54 <HAL_UART_MspInit+0xf8>)
 80019ae:	f043 0310 	orr.w	r3, r3, #16
 80019b2:	6453      	str	r3, [r2, #68]	@ 0x44
 80019b4:	4b27      	ldr	r3, [pc, #156]	@ (8001a54 <HAL_UART_MspInit+0xf8>)
 80019b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b8:	f003 0310 	and.w	r3, r3, #16
 80019bc:	617b      	str	r3, [r7, #20]
 80019be:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c0:	4b24      	ldr	r3, [pc, #144]	@ (8001a54 <HAL_UART_MspInit+0xf8>)
 80019c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c4:	4a23      	ldr	r2, [pc, #140]	@ (8001a54 <HAL_UART_MspInit+0xf8>)
 80019c6:	f043 0302 	orr.w	r3, r3, #2
 80019ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80019cc:	4b21      	ldr	r3, [pc, #132]	@ (8001a54 <HAL_UART_MspInit+0xf8>)
 80019ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a54 <HAL_UART_MspInit+0xf8>)
 80019da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019dc:	4a1d      	ldr	r2, [pc, #116]	@ (8001a54 <HAL_UART_MspInit+0xf8>)
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80019e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a54 <HAL_UART_MspInit+0xf8>)
 80019e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80019f0:	2380      	movs	r3, #128	@ 0x80
 80019f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f6:	2302      	movs	r3, #2
 80019f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a02:	2300      	movs	r3, #0
 8001a04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a08:	2307      	movs	r3, #7
 8001a0a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001a0e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a12:	4619      	mov	r1, r3
 8001a14:	4810      	ldr	r0, [pc, #64]	@ (8001a58 <HAL_UART_MspInit+0xfc>)
 8001a16:	f000 fa2b 	bl	8001e70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001a1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a22:	2302      	movs	r3, #2
 8001a24:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a34:	2307      	movs	r3, #7
 8001a36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001a3a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4806      	ldr	r0, [pc, #24]	@ (8001a5c <HAL_UART_MspInit+0x100>)
 8001a42:	f000 fa15 	bl	8001e70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a46:	bf00      	nop
 8001a48:	37b0      	adds	r7, #176	@ 0xb0
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40011000 	.word	0x40011000
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40020400 	.word	0x40020400
 8001a5c:	40020000 	.word	0x40020000

08001a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a64:	bf00      	nop
 8001a66:	e7fd      	b.n	8001a64 <NMI_Handler+0x4>

08001a68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a6c:	bf00      	nop
 8001a6e:	e7fd      	b.n	8001a6c <HardFault_Handler+0x4>

08001a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a74:	bf00      	nop
 8001a76:	e7fd      	b.n	8001a74 <MemManage_Handler+0x4>

08001a78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a7c:	bf00      	nop
 8001a7e:	e7fd      	b.n	8001a7c <BusFault_Handler+0x4>

08001a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a84:	bf00      	nop
 8001a86:	e7fd      	b.n	8001a84 <UsageFault_Handler+0x4>

08001a88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ab6:	f000 f8b1 	bl	8001c1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ac8:	4a14      	ldr	r2, [pc, #80]	@ (8001b1c <_sbrk+0x5c>)
 8001aca:	4b15      	ldr	r3, [pc, #84]	@ (8001b20 <_sbrk+0x60>)
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ad4:	4b13      	ldr	r3, [pc, #76]	@ (8001b24 <_sbrk+0x64>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d102      	bne.n	8001ae2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001adc:	4b11      	ldr	r3, [pc, #68]	@ (8001b24 <_sbrk+0x64>)
 8001ade:	4a12      	ldr	r2, [pc, #72]	@ (8001b28 <_sbrk+0x68>)
 8001ae0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ae2:	4b10      	ldr	r3, [pc, #64]	@ (8001b24 <_sbrk+0x64>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4413      	add	r3, r2
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d207      	bcs.n	8001b00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001af0:	f002 fa8c 	bl	800400c <__errno>
 8001af4:	4603      	mov	r3, r0
 8001af6:	220c      	movs	r2, #12
 8001af8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001afa:	f04f 33ff 	mov.w	r3, #4294967295
 8001afe:	e009      	b.n	8001b14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b00:	4b08      	ldr	r3, [pc, #32]	@ (8001b24 <_sbrk+0x64>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b06:	4b07      	ldr	r3, [pc, #28]	@ (8001b24 <_sbrk+0x64>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	4a05      	ldr	r2, [pc, #20]	@ (8001b24 <_sbrk+0x64>)
 8001b10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b12:	68fb      	ldr	r3, [r7, #12]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3718      	adds	r7, #24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20050000 	.word	0x20050000
 8001b20:	00000400 	.word	0x00000400
 8001b24:	20000170 	.word	0x20000170
 8001b28:	200002c0 	.word	0x200002c0

08001b2c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b30:	4b06      	ldr	r3, [pc, #24]	@ (8001b4c <SystemInit+0x20>)
 8001b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b36:	4a05      	ldr	r2, [pc, #20]	@ (8001b4c <SystemInit+0x20>)
 8001b38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b54:	480d      	ldr	r0, [pc, #52]	@ (8001b8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b56:	490e      	ldr	r1, [pc, #56]	@ (8001b90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b58:	4a0e      	ldr	r2, [pc, #56]	@ (8001b94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b5c:	e002      	b.n	8001b64 <LoopCopyDataInit>

08001b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b62:	3304      	adds	r3, #4

08001b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b68:	d3f9      	bcc.n	8001b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b6a:	4a0b      	ldr	r2, [pc, #44]	@ (8001b98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b6c:	4c0b      	ldr	r4, [pc, #44]	@ (8001b9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b70:	e001      	b.n	8001b76 <LoopFillZerobss>

08001b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b74:	3204      	adds	r2, #4

08001b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b78:	d3fb      	bcc.n	8001b72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b7a:	f7ff ffd7 	bl	8001b2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b7e:	f002 fa4b 	bl	8004018 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b82:	f7ff f8f5 	bl	8000d70 <main>
  bx  lr    
 8001b86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b88:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b90:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001b94:	08005bc0 	.word	0x08005bc0
  ldr r2, =_sbss
 8001b98:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001b9c:	200002c0 	.word	0x200002c0

08001ba0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ba0:	e7fe      	b.n	8001ba0 <ADC_IRQHandler>

08001ba2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba6:	2003      	movs	r0, #3
 8001ba8:	f000 f92e 	bl	8001e08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bac:	2000      	movs	r0, #0
 8001bae:	f000 f805 	bl	8001bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bb2:	f7ff fe8f 	bl	80018d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bc4:	4b12      	ldr	r3, [pc, #72]	@ (8001c10 <HAL_InitTick+0x54>)
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	4b12      	ldr	r3, [pc, #72]	@ (8001c14 <HAL_InitTick+0x58>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 f93b 	bl	8001e56 <HAL_SYSTICK_Config>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e00e      	b.n	8001c08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b0f      	cmp	r3, #15
 8001bee:	d80a      	bhi.n	8001c06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf8:	f000 f911 	bl	8001e1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bfc:	4a06      	ldr	r2, [pc, #24]	@ (8001c18 <HAL_InitTick+0x5c>)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
 8001c04:	e000      	b.n	8001c08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20000000 	.word	0x20000000
 8001c14:	20000008 	.word	0x20000008
 8001c18:	20000004 	.word	0x20000004

08001c1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c20:	4b06      	ldr	r3, [pc, #24]	@ (8001c3c <HAL_IncTick+0x20>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	461a      	mov	r2, r3
 8001c26:	4b06      	ldr	r3, [pc, #24]	@ (8001c40 <HAL_IncTick+0x24>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	4a04      	ldr	r2, [pc, #16]	@ (8001c40 <HAL_IncTick+0x24>)
 8001c2e:	6013      	str	r3, [r2, #0]
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	20000008 	.word	0x20000008
 8001c40:	20000174 	.word	0x20000174

08001c44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  return uwTick;
 8001c48:	4b03      	ldr	r3, [pc, #12]	@ (8001c58 <HAL_GetTick+0x14>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	20000174 	.word	0x20000174

08001c5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c64:	f7ff ffee 	bl	8001c44 <HAL_GetTick>
 8001c68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c74:	d005      	beq.n	8001c82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca0 <HAL_Delay+0x44>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4413      	add	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c82:	bf00      	nop
 8001c84:	f7ff ffde 	bl	8001c44 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d8f7      	bhi.n	8001c84 <HAL_Delay+0x28>
  {
  }
}
 8001c94:	bf00      	nop
 8001c96:	bf00      	nop
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000008 	.word	0x20000008

08001ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce4 <__NVIC_SetPriorityGrouping+0x40>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ccc:	4b06      	ldr	r3, [pc, #24]	@ (8001ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cd2:	4a04      	ldr	r2, [pc, #16]	@ (8001ce4 <__NVIC_SetPriorityGrouping+0x40>)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	60d3      	str	r3, [r2, #12]
}
 8001cd8:	bf00      	nop
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	e000ed00 	.word	0xe000ed00
 8001ce8:	05fa0000 	.word	0x05fa0000

08001cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf0:	4b04      	ldr	r3, [pc, #16]	@ (8001d04 <__NVIC_GetPriorityGrouping+0x18>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	0a1b      	lsrs	r3, r3, #8
 8001cf6:	f003 0307 	and.w	r3, r3, #7
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	6039      	str	r1, [r7, #0]
 8001d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	db0a      	blt.n	8001d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	490c      	ldr	r1, [pc, #48]	@ (8001d54 <__NVIC_SetPriority+0x4c>)
 8001d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d26:	0112      	lsls	r2, r2, #4
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	440b      	add	r3, r1
 8001d2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d30:	e00a      	b.n	8001d48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	4908      	ldr	r1, [pc, #32]	@ (8001d58 <__NVIC_SetPriority+0x50>)
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	3b04      	subs	r3, #4
 8001d40:	0112      	lsls	r2, r2, #4
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	440b      	add	r3, r1
 8001d46:	761a      	strb	r2, [r3, #24]
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	e000e100 	.word	0xe000e100
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b089      	sub	sp, #36	@ 0x24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	f1c3 0307 	rsb	r3, r3, #7
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	bf28      	it	cs
 8001d7a:	2304      	movcs	r3, #4
 8001d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3304      	adds	r3, #4
 8001d82:	2b06      	cmp	r3, #6
 8001d84:	d902      	bls.n	8001d8c <NVIC_EncodePriority+0x30>
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	3b03      	subs	r3, #3
 8001d8a:	e000      	b.n	8001d8e <NVIC_EncodePriority+0x32>
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d90:	f04f 32ff 	mov.w	r2, #4294967295
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43da      	mvns	r2, r3
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	401a      	ands	r2, r3
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001da4:	f04f 31ff 	mov.w	r1, #4294967295
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dae:	43d9      	mvns	r1, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db4:	4313      	orrs	r3, r2
         );
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3724      	adds	r7, #36	@ 0x24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
	...

08001dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dd4:	d301      	bcc.n	8001dda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e00f      	b.n	8001dfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dda:	4a0a      	ldr	r2, [pc, #40]	@ (8001e04 <SysTick_Config+0x40>)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001de2:	210f      	movs	r1, #15
 8001de4:	f04f 30ff 	mov.w	r0, #4294967295
 8001de8:	f7ff ff8e 	bl	8001d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dec:	4b05      	ldr	r3, [pc, #20]	@ (8001e04 <SysTick_Config+0x40>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001df2:	4b04      	ldr	r3, [pc, #16]	@ (8001e04 <SysTick_Config+0x40>)
 8001df4:	2207      	movs	r2, #7
 8001df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	e000e010 	.word	0xe000e010

08001e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f7ff ff47 	bl	8001ca4 <__NVIC_SetPriorityGrouping>
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b086      	sub	sp, #24
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	4603      	mov	r3, r0
 8001e26:	60b9      	str	r1, [r7, #8]
 8001e28:	607a      	str	r2, [r7, #4]
 8001e2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e30:	f7ff ff5c 	bl	8001cec <__NVIC_GetPriorityGrouping>
 8001e34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	68b9      	ldr	r1, [r7, #8]
 8001e3a:	6978      	ldr	r0, [r7, #20]
 8001e3c:	f7ff ff8e 	bl	8001d5c <NVIC_EncodePriority>
 8001e40:	4602      	mov	r2, r0
 8001e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e46:	4611      	mov	r1, r2
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff ff5d 	bl	8001d08 <__NVIC_SetPriority>
}
 8001e4e:	bf00      	nop
 8001e50:	3718      	adds	r7, #24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b082      	sub	sp, #8
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7ff ffb0 	bl	8001dc4 <SysTick_Config>
 8001e64:	4603      	mov	r3, r0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
	...

08001e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b089      	sub	sp, #36	@ 0x24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001e82:	2300      	movs	r3, #0
 8001e84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001e86:	2300      	movs	r3, #0
 8001e88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
 8001e8e:	e175      	b.n	800217c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001e90:	2201      	movs	r2, #1
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	f040 8164 	bne.w	8002176 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d005      	beq.n	8001ec6 <HAL_GPIO_Init+0x56>
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d130      	bne.n	8001f28 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	2203      	movs	r2, #3
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4013      	ands	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001efc:	2201      	movs	r2, #1
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	091b      	lsrs	r3, r3, #4
 8001f12:	f003 0201 	and.w	r2, r3, #1
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	2b03      	cmp	r3, #3
 8001f32:	d017      	beq.n	8001f64 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	2203      	movs	r2, #3
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f003 0303 	and.w	r3, r3, #3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d123      	bne.n	8001fb8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	08da      	lsrs	r2, r3, #3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3208      	adds	r2, #8
 8001f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	220f      	movs	r2, #15
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	691a      	ldr	r2, [r3, #16]
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	08da      	lsrs	r2, r3, #3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	3208      	adds	r2, #8
 8001fb2:	69b9      	ldr	r1, [r7, #24]
 8001fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	2203      	movs	r2, #3
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 0203 	and.w	r2, r3, #3
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f000 80be 	beq.w	8002176 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ffa:	4b66      	ldr	r3, [pc, #408]	@ (8002194 <HAL_GPIO_Init+0x324>)
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffe:	4a65      	ldr	r2, [pc, #404]	@ (8002194 <HAL_GPIO_Init+0x324>)
 8002000:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002004:	6453      	str	r3, [r2, #68]	@ 0x44
 8002006:	4b63      	ldr	r3, [pc, #396]	@ (8002194 <HAL_GPIO_Init+0x324>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800200a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002012:	4a61      	ldr	r2, [pc, #388]	@ (8002198 <HAL_GPIO_Init+0x328>)
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	089b      	lsrs	r3, r3, #2
 8002018:	3302      	adds	r3, #2
 800201a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800201e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	f003 0303 	and.w	r3, r3, #3
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	220f      	movs	r2, #15
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43db      	mvns	r3, r3
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4013      	ands	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a58      	ldr	r2, [pc, #352]	@ (800219c <HAL_GPIO_Init+0x32c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d037      	beq.n	80020ae <HAL_GPIO_Init+0x23e>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a57      	ldr	r2, [pc, #348]	@ (80021a0 <HAL_GPIO_Init+0x330>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d031      	beq.n	80020aa <HAL_GPIO_Init+0x23a>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a56      	ldr	r2, [pc, #344]	@ (80021a4 <HAL_GPIO_Init+0x334>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d02b      	beq.n	80020a6 <HAL_GPIO_Init+0x236>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a55      	ldr	r2, [pc, #340]	@ (80021a8 <HAL_GPIO_Init+0x338>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d025      	beq.n	80020a2 <HAL_GPIO_Init+0x232>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a54      	ldr	r2, [pc, #336]	@ (80021ac <HAL_GPIO_Init+0x33c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d01f      	beq.n	800209e <HAL_GPIO_Init+0x22e>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a53      	ldr	r2, [pc, #332]	@ (80021b0 <HAL_GPIO_Init+0x340>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d019      	beq.n	800209a <HAL_GPIO_Init+0x22a>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a52      	ldr	r2, [pc, #328]	@ (80021b4 <HAL_GPIO_Init+0x344>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d013      	beq.n	8002096 <HAL_GPIO_Init+0x226>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a51      	ldr	r2, [pc, #324]	@ (80021b8 <HAL_GPIO_Init+0x348>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d00d      	beq.n	8002092 <HAL_GPIO_Init+0x222>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a50      	ldr	r2, [pc, #320]	@ (80021bc <HAL_GPIO_Init+0x34c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d007      	beq.n	800208e <HAL_GPIO_Init+0x21e>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a4f      	ldr	r2, [pc, #316]	@ (80021c0 <HAL_GPIO_Init+0x350>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d101      	bne.n	800208a <HAL_GPIO_Init+0x21a>
 8002086:	2309      	movs	r3, #9
 8002088:	e012      	b.n	80020b0 <HAL_GPIO_Init+0x240>
 800208a:	230a      	movs	r3, #10
 800208c:	e010      	b.n	80020b0 <HAL_GPIO_Init+0x240>
 800208e:	2308      	movs	r3, #8
 8002090:	e00e      	b.n	80020b0 <HAL_GPIO_Init+0x240>
 8002092:	2307      	movs	r3, #7
 8002094:	e00c      	b.n	80020b0 <HAL_GPIO_Init+0x240>
 8002096:	2306      	movs	r3, #6
 8002098:	e00a      	b.n	80020b0 <HAL_GPIO_Init+0x240>
 800209a:	2305      	movs	r3, #5
 800209c:	e008      	b.n	80020b0 <HAL_GPIO_Init+0x240>
 800209e:	2304      	movs	r3, #4
 80020a0:	e006      	b.n	80020b0 <HAL_GPIO_Init+0x240>
 80020a2:	2303      	movs	r3, #3
 80020a4:	e004      	b.n	80020b0 <HAL_GPIO_Init+0x240>
 80020a6:	2302      	movs	r3, #2
 80020a8:	e002      	b.n	80020b0 <HAL_GPIO_Init+0x240>
 80020aa:	2301      	movs	r3, #1
 80020ac:	e000      	b.n	80020b0 <HAL_GPIO_Init+0x240>
 80020ae:	2300      	movs	r3, #0
 80020b0:	69fa      	ldr	r2, [r7, #28]
 80020b2:	f002 0203 	and.w	r2, r2, #3
 80020b6:	0092      	lsls	r2, r2, #2
 80020b8:	4093      	lsls	r3, r2
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4313      	orrs	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80020c0:	4935      	ldr	r1, [pc, #212]	@ (8002198 <HAL_GPIO_Init+0x328>)
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	089b      	lsrs	r3, r3, #2
 80020c6:	3302      	adds	r3, #2
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020ce:	4b3d      	ldr	r3, [pc, #244]	@ (80021c4 <HAL_GPIO_Init+0x354>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	43db      	mvns	r3, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4013      	ands	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020f2:	4a34      	ldr	r2, [pc, #208]	@ (80021c4 <HAL_GPIO_Init+0x354>)
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020f8:	4b32      	ldr	r3, [pc, #200]	@ (80021c4 <HAL_GPIO_Init+0x354>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	43db      	mvns	r3, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4013      	ands	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4313      	orrs	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800211c:	4a29      	ldr	r2, [pc, #164]	@ (80021c4 <HAL_GPIO_Init+0x354>)
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002122:	4b28      	ldr	r3, [pc, #160]	@ (80021c4 <HAL_GPIO_Init+0x354>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	43db      	mvns	r3, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4013      	ands	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	4313      	orrs	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002146:	4a1f      	ldr	r2, [pc, #124]	@ (80021c4 <HAL_GPIO_Init+0x354>)
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800214c:	4b1d      	ldr	r3, [pc, #116]	@ (80021c4 <HAL_GPIO_Init+0x354>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	43db      	mvns	r3, r3
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4013      	ands	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	4313      	orrs	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002170:	4a14      	ldr	r2, [pc, #80]	@ (80021c4 <HAL_GPIO_Init+0x354>)
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	3301      	adds	r3, #1
 800217a:	61fb      	str	r3, [r7, #28]
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	2b0f      	cmp	r3, #15
 8002180:	f67f ae86 	bls.w	8001e90 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002184:	bf00      	nop
 8002186:	bf00      	nop
 8002188:	3724      	adds	r7, #36	@ 0x24
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	40023800 	.word	0x40023800
 8002198:	40013800 	.word	0x40013800
 800219c:	40020000 	.word	0x40020000
 80021a0:	40020400 	.word	0x40020400
 80021a4:	40020800 	.word	0x40020800
 80021a8:	40020c00 	.word	0x40020c00
 80021ac:	40021000 	.word	0x40021000
 80021b0:	40021400 	.word	0x40021400
 80021b4:	40021800 	.word	0x40021800
 80021b8:	40021c00 	.word	0x40021c00
 80021bc:	40022000 	.word	0x40022000
 80021c0:	40022400 	.word	0x40022400
 80021c4:	40013c00 	.word	0x40013c00

080021c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	460b      	mov	r3, r1
 80021d2:	807b      	strh	r3, [r7, #2]
 80021d4:	4613      	mov	r3, r2
 80021d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021d8:	787b      	ldrb	r3, [r7, #1]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021de:	887a      	ldrh	r2, [r7, #2]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80021e4:	e003      	b.n	80021ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80021e6:	887b      	ldrh	r3, [r7, #2]
 80021e8:	041a      	lsls	r2, r3, #16
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	619a      	str	r2, [r3, #24]
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
	...

080021fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002204:	2300      	movs	r3, #0
 8002206:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e291      	b.n	8002736 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b00      	cmp	r3, #0
 800221c:	f000 8087 	beq.w	800232e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002220:	4b96      	ldr	r3, [pc, #600]	@ (800247c <HAL_RCC_OscConfig+0x280>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f003 030c 	and.w	r3, r3, #12
 8002228:	2b04      	cmp	r3, #4
 800222a:	d00c      	beq.n	8002246 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800222c:	4b93      	ldr	r3, [pc, #588]	@ (800247c <HAL_RCC_OscConfig+0x280>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 030c 	and.w	r3, r3, #12
 8002234:	2b08      	cmp	r3, #8
 8002236:	d112      	bne.n	800225e <HAL_RCC_OscConfig+0x62>
 8002238:	4b90      	ldr	r3, [pc, #576]	@ (800247c <HAL_RCC_OscConfig+0x280>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002240:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002244:	d10b      	bne.n	800225e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002246:	4b8d      	ldr	r3, [pc, #564]	@ (800247c <HAL_RCC_OscConfig+0x280>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d06c      	beq.n	800232c <HAL_RCC_OscConfig+0x130>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d168      	bne.n	800232c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e26b      	b.n	8002736 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002266:	d106      	bne.n	8002276 <HAL_RCC_OscConfig+0x7a>
 8002268:	4b84      	ldr	r3, [pc, #528]	@ (800247c <HAL_RCC_OscConfig+0x280>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a83      	ldr	r2, [pc, #524]	@ (800247c <HAL_RCC_OscConfig+0x280>)
 800226e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002272:	6013      	str	r3, [r2, #0]
 8002274:	e02e      	b.n	80022d4 <HAL_RCC_OscConfig+0xd8>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d10c      	bne.n	8002298 <HAL_RCC_OscConfig+0x9c>
 800227e:	4b7f      	ldr	r3, [pc, #508]	@ (800247c <HAL_RCC_OscConfig+0x280>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a7e      	ldr	r2, [pc, #504]	@ (800247c <HAL_RCC_OscConfig+0x280>)
 8002284:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	4b7c      	ldr	r3, [pc, #496]	@ (800247c <HAL_RCC_OscConfig+0x280>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a7b      	ldr	r2, [pc, #492]	@ (800247c <HAL_RCC_OscConfig+0x280>)
 8002290:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	e01d      	b.n	80022d4 <HAL_RCC_OscConfig+0xd8>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022a0:	d10c      	bne.n	80022bc <HAL_RCC_OscConfig+0xc0>
 80022a2:	4b76      	ldr	r3, [pc, #472]	@ (800247c <HAL_RCC_OscConfig+0x280>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a75      	ldr	r2, [pc, #468]	@ (800247c <HAL_RCC_OscConfig+0x280>)
 80022a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022ac:	6013      	str	r3, [r2, #0]
 80022ae:	4b73      	ldr	r3, [pc, #460]	@ (800247c <HAL_RCC_OscConfig+0x280>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a72      	ldr	r2, [pc, #456]	@ (800247c <HAL_RCC_OscConfig+0x280>)
 80022b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	e00b      	b.n	80022d4 <HAL_RCC_OscConfig+0xd8>
 80022bc:	4b6f      	ldr	r3, [pc, #444]	@ (800247c <HAL_RCC_OscConfig+0x280>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a6e      	ldr	r2, [pc, #440]	@ (800247c <HAL_RCC_OscConfig+0x280>)
 80022c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022c6:	6013      	str	r3, [r2, #0]
 80022c8:	4b6c      	ldr	r3, [pc, #432]	@ (800247c <HAL_RCC_OscConfig+0x280>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a6b      	ldr	r2, [pc, #428]	@ (800247c <HAL_RCC_OscConfig+0x280>)
 80022ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d013      	beq.n	8002304 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022dc:	f7ff fcb2 	bl	8001c44 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e4:	f7ff fcae 	bl	8001c44 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b64      	cmp	r3, #100	@ 0x64
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e21f      	b.n	8002736 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f6:	4b61      	ldr	r3, [pc, #388]	@ (800247c <HAL_RCC_OscConfig+0x280>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0f0      	beq.n	80022e4 <HAL_RCC_OscConfig+0xe8>
 8002302:	e014      	b.n	800232e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002304:	f7ff fc9e 	bl	8001c44 <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800230c:	f7ff fc9a 	bl	8001c44 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b64      	cmp	r3, #100	@ 0x64
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e20b      	b.n	8002736 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800231e:	4b57      	ldr	r3, [pc, #348]	@ (800247c <HAL_RCC_OscConfig+0x280>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f0      	bne.n	800230c <HAL_RCC_OscConfig+0x110>
 800232a:	e000      	b.n	800232e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800232c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d069      	beq.n	800240e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800233a:	4b50      	ldr	r3, [pc, #320]	@ (800247c <HAL_RCC_OscConfig+0x280>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 030c 	and.w	r3, r3, #12
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00b      	beq.n	800235e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002346:	4b4d      	ldr	r3, [pc, #308]	@ (800247c <HAL_RCC_OscConfig+0x280>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 030c 	and.w	r3, r3, #12
 800234e:	2b08      	cmp	r3, #8
 8002350:	d11c      	bne.n	800238c <HAL_RCC_OscConfig+0x190>
 8002352:	4b4a      	ldr	r3, [pc, #296]	@ (800247c <HAL_RCC_OscConfig+0x280>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d116      	bne.n	800238c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800235e:	4b47      	ldr	r3, [pc, #284]	@ (800247c <HAL_RCC_OscConfig+0x280>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d005      	beq.n	8002376 <HAL_RCC_OscConfig+0x17a>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d001      	beq.n	8002376 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e1df      	b.n	8002736 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002376:	4b41      	ldr	r3, [pc, #260]	@ (800247c <HAL_RCC_OscConfig+0x280>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	493d      	ldr	r1, [pc, #244]	@ (800247c <HAL_RCC_OscConfig+0x280>)
 8002386:	4313      	orrs	r3, r2
 8002388:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800238a:	e040      	b.n	800240e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d023      	beq.n	80023dc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002394:	4b39      	ldr	r3, [pc, #228]	@ (800247c <HAL_RCC_OscConfig+0x280>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a38      	ldr	r2, [pc, #224]	@ (800247c <HAL_RCC_OscConfig+0x280>)
 800239a:	f043 0301 	orr.w	r3, r3, #1
 800239e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a0:	f7ff fc50 	bl	8001c44 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a8:	f7ff fc4c 	bl	8001c44 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e1bd      	b.n	8002736 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ba:	4b30      	ldr	r3, [pc, #192]	@ (800247c <HAL_RCC_OscConfig+0x280>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c6:	4b2d      	ldr	r3, [pc, #180]	@ (800247c <HAL_RCC_OscConfig+0x280>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	4929      	ldr	r1, [pc, #164]	@ (800247c <HAL_RCC_OscConfig+0x280>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	600b      	str	r3, [r1, #0]
 80023da:	e018      	b.n	800240e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023dc:	4b27      	ldr	r3, [pc, #156]	@ (800247c <HAL_RCC_OscConfig+0x280>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a26      	ldr	r2, [pc, #152]	@ (800247c <HAL_RCC_OscConfig+0x280>)
 80023e2:	f023 0301 	bic.w	r3, r3, #1
 80023e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e8:	f7ff fc2c 	bl	8001c44 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023f0:	f7ff fc28 	bl	8001c44 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e199      	b.n	8002736 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002402:	4b1e      	ldr	r3, [pc, #120]	@ (800247c <HAL_RCC_OscConfig+0x280>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f0      	bne.n	80023f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0308 	and.w	r3, r3, #8
 8002416:	2b00      	cmp	r3, #0
 8002418:	d038      	beq.n	800248c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d019      	beq.n	8002456 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002422:	4b16      	ldr	r3, [pc, #88]	@ (800247c <HAL_RCC_OscConfig+0x280>)
 8002424:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002426:	4a15      	ldr	r2, [pc, #84]	@ (800247c <HAL_RCC_OscConfig+0x280>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242e:	f7ff fc09 	bl	8001c44 <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002436:	f7ff fc05 	bl	8001c44 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e176      	b.n	8002736 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002448:	4b0c      	ldr	r3, [pc, #48]	@ (800247c <HAL_RCC_OscConfig+0x280>)
 800244a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0f0      	beq.n	8002436 <HAL_RCC_OscConfig+0x23a>
 8002454:	e01a      	b.n	800248c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002456:	4b09      	ldr	r3, [pc, #36]	@ (800247c <HAL_RCC_OscConfig+0x280>)
 8002458:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800245a:	4a08      	ldr	r2, [pc, #32]	@ (800247c <HAL_RCC_OscConfig+0x280>)
 800245c:	f023 0301 	bic.w	r3, r3, #1
 8002460:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002462:	f7ff fbef 	bl	8001c44 <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002468:	e00a      	b.n	8002480 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800246a:	f7ff fbeb 	bl	8001c44 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d903      	bls.n	8002480 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e15c      	b.n	8002736 <HAL_RCC_OscConfig+0x53a>
 800247c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002480:	4b91      	ldr	r3, [pc, #580]	@ (80026c8 <HAL_RCC_OscConfig+0x4cc>)
 8002482:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1ee      	bne.n	800246a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 80a4 	beq.w	80025e2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800249a:	4b8b      	ldr	r3, [pc, #556]	@ (80026c8 <HAL_RCC_OscConfig+0x4cc>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10d      	bne.n	80024c2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80024a6:	4b88      	ldr	r3, [pc, #544]	@ (80026c8 <HAL_RCC_OscConfig+0x4cc>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024aa:	4a87      	ldr	r2, [pc, #540]	@ (80026c8 <HAL_RCC_OscConfig+0x4cc>)
 80024ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80024b2:	4b85      	ldr	r3, [pc, #532]	@ (80026c8 <HAL_RCC_OscConfig+0x4cc>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ba:	60bb      	str	r3, [r7, #8]
 80024bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024be:	2301      	movs	r3, #1
 80024c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c2:	4b82      	ldr	r3, [pc, #520]	@ (80026cc <HAL_RCC_OscConfig+0x4d0>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d118      	bne.n	8002500 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80024ce:	4b7f      	ldr	r3, [pc, #508]	@ (80026cc <HAL_RCC_OscConfig+0x4d0>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a7e      	ldr	r2, [pc, #504]	@ (80026cc <HAL_RCC_OscConfig+0x4d0>)
 80024d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024da:	f7ff fbb3 	bl	8001c44 <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e2:	f7ff fbaf 	bl	8001c44 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b64      	cmp	r3, #100	@ 0x64
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e120      	b.n	8002736 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024f4:	4b75      	ldr	r3, [pc, #468]	@ (80026cc <HAL_RCC_OscConfig+0x4d0>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0f0      	beq.n	80024e2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d106      	bne.n	8002516 <HAL_RCC_OscConfig+0x31a>
 8002508:	4b6f      	ldr	r3, [pc, #444]	@ (80026c8 <HAL_RCC_OscConfig+0x4cc>)
 800250a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800250c:	4a6e      	ldr	r2, [pc, #440]	@ (80026c8 <HAL_RCC_OscConfig+0x4cc>)
 800250e:	f043 0301 	orr.w	r3, r3, #1
 8002512:	6713      	str	r3, [r2, #112]	@ 0x70
 8002514:	e02d      	b.n	8002572 <HAL_RCC_OscConfig+0x376>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10c      	bne.n	8002538 <HAL_RCC_OscConfig+0x33c>
 800251e:	4b6a      	ldr	r3, [pc, #424]	@ (80026c8 <HAL_RCC_OscConfig+0x4cc>)
 8002520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002522:	4a69      	ldr	r2, [pc, #420]	@ (80026c8 <HAL_RCC_OscConfig+0x4cc>)
 8002524:	f023 0301 	bic.w	r3, r3, #1
 8002528:	6713      	str	r3, [r2, #112]	@ 0x70
 800252a:	4b67      	ldr	r3, [pc, #412]	@ (80026c8 <HAL_RCC_OscConfig+0x4cc>)
 800252c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800252e:	4a66      	ldr	r2, [pc, #408]	@ (80026c8 <HAL_RCC_OscConfig+0x4cc>)
 8002530:	f023 0304 	bic.w	r3, r3, #4
 8002534:	6713      	str	r3, [r2, #112]	@ 0x70
 8002536:	e01c      	b.n	8002572 <HAL_RCC_OscConfig+0x376>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	2b05      	cmp	r3, #5
 800253e:	d10c      	bne.n	800255a <HAL_RCC_OscConfig+0x35e>
 8002540:	4b61      	ldr	r3, [pc, #388]	@ (80026c8 <HAL_RCC_OscConfig+0x4cc>)
 8002542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002544:	4a60      	ldr	r2, [pc, #384]	@ (80026c8 <HAL_RCC_OscConfig+0x4cc>)
 8002546:	f043 0304 	orr.w	r3, r3, #4
 800254a:	6713      	str	r3, [r2, #112]	@ 0x70
 800254c:	4b5e      	ldr	r3, [pc, #376]	@ (80026c8 <HAL_RCC_OscConfig+0x4cc>)
 800254e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002550:	4a5d      	ldr	r2, [pc, #372]	@ (80026c8 <HAL_RCC_OscConfig+0x4cc>)
 8002552:	f043 0301 	orr.w	r3, r3, #1
 8002556:	6713      	str	r3, [r2, #112]	@ 0x70
 8002558:	e00b      	b.n	8002572 <HAL_RCC_OscConfig+0x376>
 800255a:	4b5b      	ldr	r3, [pc, #364]	@ (80026c8 <HAL_RCC_OscConfig+0x4cc>)
 800255c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800255e:	4a5a      	ldr	r2, [pc, #360]	@ (80026c8 <HAL_RCC_OscConfig+0x4cc>)
 8002560:	f023 0301 	bic.w	r3, r3, #1
 8002564:	6713      	str	r3, [r2, #112]	@ 0x70
 8002566:	4b58      	ldr	r3, [pc, #352]	@ (80026c8 <HAL_RCC_OscConfig+0x4cc>)
 8002568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800256a:	4a57      	ldr	r2, [pc, #348]	@ (80026c8 <HAL_RCC_OscConfig+0x4cc>)
 800256c:	f023 0304 	bic.w	r3, r3, #4
 8002570:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d015      	beq.n	80025a6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800257a:	f7ff fb63 	bl	8001c44 <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002580:	e00a      	b.n	8002598 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002582:	f7ff fb5f 	bl	8001c44 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002590:	4293      	cmp	r3, r2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e0ce      	b.n	8002736 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002598:	4b4b      	ldr	r3, [pc, #300]	@ (80026c8 <HAL_RCC_OscConfig+0x4cc>)
 800259a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0ee      	beq.n	8002582 <HAL_RCC_OscConfig+0x386>
 80025a4:	e014      	b.n	80025d0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a6:	f7ff fb4d 	bl	8001c44 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ac:	e00a      	b.n	80025c4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ae:	f7ff fb49 	bl	8001c44 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025bc:	4293      	cmp	r3, r2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e0b8      	b.n	8002736 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025c4:	4b40      	ldr	r3, [pc, #256]	@ (80026c8 <HAL_RCC_OscConfig+0x4cc>)
 80025c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1ee      	bne.n	80025ae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025d0:	7dfb      	ldrb	r3, [r7, #23]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d105      	bne.n	80025e2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d6:	4b3c      	ldr	r3, [pc, #240]	@ (80026c8 <HAL_RCC_OscConfig+0x4cc>)
 80025d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025da:	4a3b      	ldr	r2, [pc, #236]	@ (80026c8 <HAL_RCC_OscConfig+0x4cc>)
 80025dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025e0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 80a4 	beq.w	8002734 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025ec:	4b36      	ldr	r3, [pc, #216]	@ (80026c8 <HAL_RCC_OscConfig+0x4cc>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 030c 	and.w	r3, r3, #12
 80025f4:	2b08      	cmp	r3, #8
 80025f6:	d06b      	beq.n	80026d0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d149      	bne.n	8002694 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002600:	4b31      	ldr	r3, [pc, #196]	@ (80026c8 <HAL_RCC_OscConfig+0x4cc>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a30      	ldr	r2, [pc, #192]	@ (80026c8 <HAL_RCC_OscConfig+0x4cc>)
 8002606:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800260a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260c:	f7ff fb1a 	bl	8001c44 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002614:	f7ff fb16 	bl	8001c44 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e087      	b.n	8002736 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002626:	4b28      	ldr	r3, [pc, #160]	@ (80026c8 <HAL_RCC_OscConfig+0x4cc>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f0      	bne.n	8002614 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69da      	ldr	r2, [r3, #28]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	431a      	orrs	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002640:	019b      	lsls	r3, r3, #6
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002648:	085b      	lsrs	r3, r3, #1
 800264a:	3b01      	subs	r3, #1
 800264c:	041b      	lsls	r3, r3, #16
 800264e:	431a      	orrs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002654:	061b      	lsls	r3, r3, #24
 8002656:	4313      	orrs	r3, r2
 8002658:	4a1b      	ldr	r2, [pc, #108]	@ (80026c8 <HAL_RCC_OscConfig+0x4cc>)
 800265a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800265e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002660:	4b19      	ldr	r3, [pc, #100]	@ (80026c8 <HAL_RCC_OscConfig+0x4cc>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a18      	ldr	r2, [pc, #96]	@ (80026c8 <HAL_RCC_OscConfig+0x4cc>)
 8002666:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800266a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266c:	f7ff faea 	bl	8001c44 <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002674:	f7ff fae6 	bl	8001c44 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e057      	b.n	8002736 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002686:	4b10      	ldr	r3, [pc, #64]	@ (80026c8 <HAL_RCC_OscConfig+0x4cc>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0f0      	beq.n	8002674 <HAL_RCC_OscConfig+0x478>
 8002692:	e04f      	b.n	8002734 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002694:	4b0c      	ldr	r3, [pc, #48]	@ (80026c8 <HAL_RCC_OscConfig+0x4cc>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a0b      	ldr	r2, [pc, #44]	@ (80026c8 <HAL_RCC_OscConfig+0x4cc>)
 800269a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800269e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a0:	f7ff fad0 	bl	8001c44 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a8:	f7ff facc 	bl	8001c44 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e03d      	b.n	8002736 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ba:	4b03      	ldr	r3, [pc, #12]	@ (80026c8 <HAL_RCC_OscConfig+0x4cc>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1f0      	bne.n	80026a8 <HAL_RCC_OscConfig+0x4ac>
 80026c6:	e035      	b.n	8002734 <HAL_RCC_OscConfig+0x538>
 80026c8:	40023800 	.word	0x40023800
 80026cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80026d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002740 <HAL_RCC_OscConfig+0x544>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d028      	beq.n	8002730 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d121      	bne.n	8002730 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d11a      	bne.n	8002730 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002700:	4013      	ands	r3, r2
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002706:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002708:	4293      	cmp	r3, r2
 800270a:	d111      	bne.n	8002730 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002716:	085b      	lsrs	r3, r3, #1
 8002718:	3b01      	subs	r3, #1
 800271a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800271c:	429a      	cmp	r2, r3
 800271e:	d107      	bne.n	8002730 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800272a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800272c:	429a      	cmp	r2, r3
 800272e:	d001      	beq.n	8002734 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e000      	b.n	8002736 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	40023800 	.word	0x40023800

08002744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800274e:	2300      	movs	r3, #0
 8002750:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e0d0      	b.n	80028fe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800275c:	4b6a      	ldr	r3, [pc, #424]	@ (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 030f 	and.w	r3, r3, #15
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	429a      	cmp	r2, r3
 8002768:	d910      	bls.n	800278c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276a:	4b67      	ldr	r3, [pc, #412]	@ (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f023 020f 	bic.w	r2, r3, #15
 8002772:	4965      	ldr	r1, [pc, #404]	@ (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	4313      	orrs	r3, r2
 8002778:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800277a:	4b63      	ldr	r3, [pc, #396]	@ (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 030f 	and.w	r3, r3, #15
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	429a      	cmp	r2, r3
 8002786:	d001      	beq.n	800278c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e0b8      	b.n	80028fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d020      	beq.n	80027da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d005      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027a4:	4b59      	ldr	r3, [pc, #356]	@ (800290c <HAL_RCC_ClockConfig+0x1c8>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	4a58      	ldr	r2, [pc, #352]	@ (800290c <HAL_RCC_ClockConfig+0x1c8>)
 80027aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80027ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0308 	and.w	r3, r3, #8
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d005      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027bc:	4b53      	ldr	r3, [pc, #332]	@ (800290c <HAL_RCC_ClockConfig+0x1c8>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	4a52      	ldr	r2, [pc, #328]	@ (800290c <HAL_RCC_ClockConfig+0x1c8>)
 80027c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80027c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027c8:	4b50      	ldr	r3, [pc, #320]	@ (800290c <HAL_RCC_ClockConfig+0x1c8>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	494d      	ldr	r1, [pc, #308]	@ (800290c <HAL_RCC_ClockConfig+0x1c8>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d040      	beq.n	8002868 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d107      	bne.n	80027fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ee:	4b47      	ldr	r3, [pc, #284]	@ (800290c <HAL_RCC_ClockConfig+0x1c8>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d115      	bne.n	8002826 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e07f      	b.n	80028fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2b02      	cmp	r3, #2
 8002804:	d107      	bne.n	8002816 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002806:	4b41      	ldr	r3, [pc, #260]	@ (800290c <HAL_RCC_ClockConfig+0x1c8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d109      	bne.n	8002826 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e073      	b.n	80028fe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002816:	4b3d      	ldr	r3, [pc, #244]	@ (800290c <HAL_RCC_ClockConfig+0x1c8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e06b      	b.n	80028fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002826:	4b39      	ldr	r3, [pc, #228]	@ (800290c <HAL_RCC_ClockConfig+0x1c8>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f023 0203 	bic.w	r2, r3, #3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	4936      	ldr	r1, [pc, #216]	@ (800290c <HAL_RCC_ClockConfig+0x1c8>)
 8002834:	4313      	orrs	r3, r2
 8002836:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002838:	f7ff fa04 	bl	8001c44 <HAL_GetTick>
 800283c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283e:	e00a      	b.n	8002856 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002840:	f7ff fa00 	bl	8001c44 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800284e:	4293      	cmp	r3, r2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e053      	b.n	80028fe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002856:	4b2d      	ldr	r3, [pc, #180]	@ (800290c <HAL_RCC_ClockConfig+0x1c8>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 020c 	and.w	r2, r3, #12
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	429a      	cmp	r2, r3
 8002866:	d1eb      	bne.n	8002840 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002868:	4b27      	ldr	r3, [pc, #156]	@ (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 030f 	and.w	r3, r3, #15
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d210      	bcs.n	8002898 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002876:	4b24      	ldr	r3, [pc, #144]	@ (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f023 020f 	bic.w	r2, r3, #15
 800287e:	4922      	ldr	r1, [pc, #136]	@ (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	4313      	orrs	r3, r2
 8002884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002886:	4b20      	ldr	r3, [pc, #128]	@ (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	429a      	cmp	r2, r3
 8002892:	d001      	beq.n	8002898 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e032      	b.n	80028fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d008      	beq.n	80028b6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028a4:	4b19      	ldr	r3, [pc, #100]	@ (800290c <HAL_RCC_ClockConfig+0x1c8>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	4916      	ldr	r1, [pc, #88]	@ (800290c <HAL_RCC_ClockConfig+0x1c8>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0308 	and.w	r3, r3, #8
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d009      	beq.n	80028d6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028c2:	4b12      	ldr	r3, [pc, #72]	@ (800290c <HAL_RCC_ClockConfig+0x1c8>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	490e      	ldr	r1, [pc, #56]	@ (800290c <HAL_RCC_ClockConfig+0x1c8>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028d6:	f000 f821 	bl	800291c <HAL_RCC_GetSysClockFreq>
 80028da:	4602      	mov	r2, r0
 80028dc:	4b0b      	ldr	r3, [pc, #44]	@ (800290c <HAL_RCC_ClockConfig+0x1c8>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	091b      	lsrs	r3, r3, #4
 80028e2:	f003 030f 	and.w	r3, r3, #15
 80028e6:	490a      	ldr	r1, [pc, #40]	@ (8002910 <HAL_RCC_ClockConfig+0x1cc>)
 80028e8:	5ccb      	ldrb	r3, [r1, r3]
 80028ea:	fa22 f303 	lsr.w	r3, r2, r3
 80028ee:	4a09      	ldr	r2, [pc, #36]	@ (8002914 <HAL_RCC_ClockConfig+0x1d0>)
 80028f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028f2:	4b09      	ldr	r3, [pc, #36]	@ (8002918 <HAL_RCC_ClockConfig+0x1d4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff f960 	bl	8001bbc <HAL_InitTick>

  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40023c00 	.word	0x40023c00
 800290c:	40023800 	.word	0x40023800
 8002910:	08005988 	.word	0x08005988
 8002914:	20000000 	.word	0x20000000
 8002918:	20000004 	.word	0x20000004

0800291c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800291c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002920:	b090      	sub	sp, #64	@ 0x40
 8002922:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002924:	2300      	movs	r3, #0
 8002926:	637b      	str	r3, [r7, #52]	@ 0x34
 8002928:	2300      	movs	r3, #0
 800292a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800292c:	2300      	movs	r3, #0
 800292e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002930:	2300      	movs	r3, #0
 8002932:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002934:	4b59      	ldr	r3, [pc, #356]	@ (8002a9c <HAL_RCC_GetSysClockFreq+0x180>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f003 030c 	and.w	r3, r3, #12
 800293c:	2b08      	cmp	r3, #8
 800293e:	d00d      	beq.n	800295c <HAL_RCC_GetSysClockFreq+0x40>
 8002940:	2b08      	cmp	r3, #8
 8002942:	f200 80a1 	bhi.w	8002a88 <HAL_RCC_GetSysClockFreq+0x16c>
 8002946:	2b00      	cmp	r3, #0
 8002948:	d002      	beq.n	8002950 <HAL_RCC_GetSysClockFreq+0x34>
 800294a:	2b04      	cmp	r3, #4
 800294c:	d003      	beq.n	8002956 <HAL_RCC_GetSysClockFreq+0x3a>
 800294e:	e09b      	b.n	8002a88 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002950:	4b53      	ldr	r3, [pc, #332]	@ (8002aa0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002952:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002954:	e09b      	b.n	8002a8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002956:	4b53      	ldr	r3, [pc, #332]	@ (8002aa4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002958:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800295a:	e098      	b.n	8002a8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800295c:	4b4f      	ldr	r3, [pc, #316]	@ (8002a9c <HAL_RCC_GetSysClockFreq+0x180>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002964:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002966:	4b4d      	ldr	r3, [pc, #308]	@ (8002a9c <HAL_RCC_GetSysClockFreq+0x180>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d028      	beq.n	80029c4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002972:	4b4a      	ldr	r3, [pc, #296]	@ (8002a9c <HAL_RCC_GetSysClockFreq+0x180>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	099b      	lsrs	r3, r3, #6
 8002978:	2200      	movs	r2, #0
 800297a:	623b      	str	r3, [r7, #32]
 800297c:	627a      	str	r2, [r7, #36]	@ 0x24
 800297e:	6a3b      	ldr	r3, [r7, #32]
 8002980:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002984:	2100      	movs	r1, #0
 8002986:	4b47      	ldr	r3, [pc, #284]	@ (8002aa4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002988:	fb03 f201 	mul.w	r2, r3, r1
 800298c:	2300      	movs	r3, #0
 800298e:	fb00 f303 	mul.w	r3, r0, r3
 8002992:	4413      	add	r3, r2
 8002994:	4a43      	ldr	r2, [pc, #268]	@ (8002aa4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002996:	fba0 1202 	umull	r1, r2, r0, r2
 800299a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800299c:	460a      	mov	r2, r1
 800299e:	62ba      	str	r2, [r7, #40]	@ 0x28
 80029a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029a2:	4413      	add	r3, r2
 80029a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029a8:	2200      	movs	r2, #0
 80029aa:	61bb      	str	r3, [r7, #24]
 80029ac:	61fa      	str	r2, [r7, #28]
 80029ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80029b6:	f7fe f861 	bl	8000a7c <__aeabi_uldivmod>
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	4613      	mov	r3, r2
 80029c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029c2:	e053      	b.n	8002a6c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029c4:	4b35      	ldr	r3, [pc, #212]	@ (8002a9c <HAL_RCC_GetSysClockFreq+0x180>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	099b      	lsrs	r3, r3, #6
 80029ca:	2200      	movs	r2, #0
 80029cc:	613b      	str	r3, [r7, #16]
 80029ce:	617a      	str	r2, [r7, #20]
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80029d6:	f04f 0b00 	mov.w	fp, #0
 80029da:	4652      	mov	r2, sl
 80029dc:	465b      	mov	r3, fp
 80029de:	f04f 0000 	mov.w	r0, #0
 80029e2:	f04f 0100 	mov.w	r1, #0
 80029e6:	0159      	lsls	r1, r3, #5
 80029e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029ec:	0150      	lsls	r0, r2, #5
 80029ee:	4602      	mov	r2, r0
 80029f0:	460b      	mov	r3, r1
 80029f2:	ebb2 080a 	subs.w	r8, r2, sl
 80029f6:	eb63 090b 	sbc.w	r9, r3, fp
 80029fa:	f04f 0200 	mov.w	r2, #0
 80029fe:	f04f 0300 	mov.w	r3, #0
 8002a02:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002a06:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002a0a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002a0e:	ebb2 0408 	subs.w	r4, r2, r8
 8002a12:	eb63 0509 	sbc.w	r5, r3, r9
 8002a16:	f04f 0200 	mov.w	r2, #0
 8002a1a:	f04f 0300 	mov.w	r3, #0
 8002a1e:	00eb      	lsls	r3, r5, #3
 8002a20:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a24:	00e2      	lsls	r2, r4, #3
 8002a26:	4614      	mov	r4, r2
 8002a28:	461d      	mov	r5, r3
 8002a2a:	eb14 030a 	adds.w	r3, r4, sl
 8002a2e:	603b      	str	r3, [r7, #0]
 8002a30:	eb45 030b 	adc.w	r3, r5, fp
 8002a34:	607b      	str	r3, [r7, #4]
 8002a36:	f04f 0200 	mov.w	r2, #0
 8002a3a:	f04f 0300 	mov.w	r3, #0
 8002a3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a42:	4629      	mov	r1, r5
 8002a44:	028b      	lsls	r3, r1, #10
 8002a46:	4621      	mov	r1, r4
 8002a48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a4c:	4621      	mov	r1, r4
 8002a4e:	028a      	lsls	r2, r1, #10
 8002a50:	4610      	mov	r0, r2
 8002a52:	4619      	mov	r1, r3
 8002a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a56:	2200      	movs	r2, #0
 8002a58:	60bb      	str	r3, [r7, #8]
 8002a5a:	60fa      	str	r2, [r7, #12]
 8002a5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a60:	f7fe f80c 	bl	8000a7c <__aeabi_uldivmod>
 8002a64:	4602      	mov	r2, r0
 8002a66:	460b      	mov	r3, r1
 8002a68:	4613      	mov	r3, r2
 8002a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a9c <HAL_RCC_GetSysClockFreq+0x180>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	0c1b      	lsrs	r3, r3, #16
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	3301      	adds	r3, #1
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002a7c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a84:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a86:	e002      	b.n	8002a8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a88:	4b05      	ldr	r3, [pc, #20]	@ (8002aa0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3740      	adds	r7, #64	@ 0x40
 8002a94:	46bd      	mov	sp, r7
 8002a96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	00f42400 	.word	0x00f42400
 8002aa4:	017d7840 	.word	0x017d7840

08002aa8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aac:	4b03      	ldr	r3, [pc, #12]	@ (8002abc <HAL_RCC_GetHCLKFreq+0x14>)
 8002aae:	681b      	ldr	r3, [r3, #0]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	20000000 	.word	0x20000000

08002ac0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ac4:	f7ff fff0 	bl	8002aa8 <HAL_RCC_GetHCLKFreq>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	4b05      	ldr	r3, [pc, #20]	@ (8002ae0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	0a9b      	lsrs	r3, r3, #10
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	4903      	ldr	r1, [pc, #12]	@ (8002ae4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ad6:	5ccb      	ldrb	r3, [r1, r3]
 8002ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	08005998 	.word	0x08005998

08002ae8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002aec:	f7ff ffdc 	bl	8002aa8 <HAL_RCC_GetHCLKFreq>
 8002af0:	4602      	mov	r2, r0
 8002af2:	4b05      	ldr	r3, [pc, #20]	@ (8002b08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	0b5b      	lsrs	r3, r3, #13
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	4903      	ldr	r1, [pc, #12]	@ (8002b0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002afe:	5ccb      	ldrb	r3, [r1, r3]
 8002b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	08005998 	.word	0x08005998

08002b10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b088      	sub	sp, #32
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002b20:	2300      	movs	r3, #0
 8002b22:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d012      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b38:	4b69      	ldr	r3, [pc, #420]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	4a68      	ldr	r2, [pc, #416]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b3e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002b42:	6093      	str	r3, [r2, #8]
 8002b44:	4b66      	ldr	r3, [pc, #408]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b4c:	4964      	ldr	r1, [pc, #400]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d017      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b6a:	4b5d      	ldr	r3, [pc, #372]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b70:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b78:	4959      	ldr	r1, [pc, #356]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b84:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b88:	d101      	bne.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002b96:	2301      	movs	r3, #1
 8002b98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d017      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ba6:	4b4e      	ldr	r3, [pc, #312]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bac:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb4:	494a      	ldr	r1, [pc, #296]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bc4:	d101      	bne.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002be2:	2301      	movs	r3, #1
 8002be4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0320 	and.w	r3, r3, #32
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 808b 	beq.w	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bf4:	4b3a      	ldr	r3, [pc, #232]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf8:	4a39      	ldr	r2, [pc, #228]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bfe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c00:	4b37      	ldr	r3, [pc, #220]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c08:	60bb      	str	r3, [r7, #8]
 8002c0a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c0c:	4b35      	ldr	r3, [pc, #212]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a34      	ldr	r2, [pc, #208]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c18:	f7ff f814 	bl	8001c44 <HAL_GetTick>
 8002c1c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c20:	f7ff f810 	bl	8001c44 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b64      	cmp	r3, #100	@ 0x64
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e357      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c32:	4b2c      	ldr	r3, [pc, #176]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d0f0      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c3e:	4b28      	ldr	r3, [pc, #160]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c46:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d035      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d02e      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c5c:	4b20      	ldr	r3, [pc, #128]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c64:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c66:	4b1e      	ldr	r3, [pc, #120]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c6a:	4a1d      	ldr	r2, [pc, #116]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c70:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c72:	4b1b      	ldr	r3, [pc, #108]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c76:	4a1a      	ldr	r2, [pc, #104]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c7c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c7e:	4a18      	ldr	r2, [pc, #96]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c84:	4b16      	ldr	r3, [pc, #88]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d114      	bne.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c90:	f7fe ffd8 	bl	8001c44 <HAL_GetTick>
 8002c94:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c96:	e00a      	b.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c98:	f7fe ffd4 	bl	8001c44 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e319      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cae:	4b0c      	ldr	r3, [pc, #48]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d0ee      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002cc6:	d111      	bne.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002cc8:	4b05      	ldr	r3, [pc, #20]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002cd4:	4b04      	ldr	r3, [pc, #16]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002cd6:	400b      	ands	r3, r1
 8002cd8:	4901      	ldr	r1, [pc, #4]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	608b      	str	r3, [r1, #8]
 8002cde:	e00b      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	40007000 	.word	0x40007000
 8002ce8:	0ffffcff 	.word	0x0ffffcff
 8002cec:	4baa      	ldr	r3, [pc, #680]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	4aa9      	ldr	r2, [pc, #676]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cf2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002cf6:	6093      	str	r3, [r2, #8]
 8002cf8:	4ba7      	ldr	r3, [pc, #668]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cfa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d04:	49a4      	ldr	r1, [pc, #656]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0310 	and.w	r3, r3, #16
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d010      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002d16:	4ba0      	ldr	r3, [pc, #640]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d1c:	4a9e      	ldr	r2, [pc, #632]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d22:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002d26:	4b9c      	ldr	r3, [pc, #624]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d28:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d30:	4999      	ldr	r1, [pc, #612]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00a      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d44:	4b94      	ldr	r3, [pc, #592]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d4a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d52:	4991      	ldr	r1, [pc, #580]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00a      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d66:	4b8c      	ldr	r3, [pc, #560]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d6c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d74:	4988      	ldr	r1, [pc, #544]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00a      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d88:	4b83      	ldr	r3, [pc, #524]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d8e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d96:	4980      	ldr	r1, [pc, #512]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00a      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002daa:	4b7b      	ldr	r3, [pc, #492]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002db0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002db8:	4977      	ldr	r1, [pc, #476]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00a      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dcc:	4b72      	ldr	r3, [pc, #456]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dd2:	f023 0203 	bic.w	r2, r3, #3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dda:	496f      	ldr	r1, [pc, #444]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00a      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dee:	4b6a      	ldr	r3, [pc, #424]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002df4:	f023 020c 	bic.w	r2, r3, #12
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dfc:	4966      	ldr	r1, [pc, #408]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00a      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e10:	4b61      	ldr	r3, [pc, #388]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e16:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e1e:	495e      	ldr	r1, [pc, #376]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00a      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e32:	4b59      	ldr	r3, [pc, #356]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e38:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e40:	4955      	ldr	r1, [pc, #340]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00a      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e54:	4b50      	ldr	r3, [pc, #320]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e5a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e62:	494d      	ldr	r1, [pc, #308]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00a      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e76:	4b48      	ldr	r3, [pc, #288]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e7c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e84:	4944      	ldr	r1, [pc, #272]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00a      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e98:	4b3f      	ldr	r3, [pc, #252]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e9e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea6:	493c      	ldr	r1, [pc, #240]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00a      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002eba:	4b37      	ldr	r3, [pc, #220]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ec0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ec8:	4933      	ldr	r1, [pc, #204]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00a      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002edc:	4b2e      	ldr	r3, [pc, #184]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ee2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002eea:	492b      	ldr	r1, [pc, #172]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d011      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002efe:	4b26      	ldr	r3, [pc, #152]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f04:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f0c:	4922      	ldr	r1, [pc, #136]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f1c:	d101      	bne.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00a      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f3e:	4b16      	ldr	r3, [pc, #88]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f44:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f4c:	4912      	ldr	r1, [pc, #72]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00b      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f60:	4b0d      	ldr	r3, [pc, #52]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f66:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f70:	4909      	ldr	r1, [pc, #36]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d006      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f000 80d9 	beq.w	800313e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f8c:	4b02      	ldr	r3, [pc, #8]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a01      	ldr	r2, [pc, #4]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f92:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002f96:	e001      	b.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002f98:	40023800 	.word	0x40023800
 8002f9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f9e:	f7fe fe51 	bl	8001c44 <HAL_GetTick>
 8002fa2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fa6:	f7fe fe4d 	bl	8001c44 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b64      	cmp	r3, #100	@ 0x64
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e194      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fb8:	4b6c      	ldr	r3, [pc, #432]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1f0      	bne.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d021      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d11d      	bne.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002fd8:	4b64      	ldr	r3, [pc, #400]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fde:	0c1b      	lsrs	r3, r3, #16
 8002fe0:	f003 0303 	and.w	r3, r3, #3
 8002fe4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002fe6:	4b61      	ldr	r3, [pc, #388]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fec:	0e1b      	lsrs	r3, r3, #24
 8002fee:	f003 030f 	and.w	r3, r3, #15
 8002ff2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	019a      	lsls	r2, r3, #6
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	041b      	lsls	r3, r3, #16
 8002ffe:	431a      	orrs	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	061b      	lsls	r3, r3, #24
 8003004:	431a      	orrs	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	071b      	lsls	r3, r3, #28
 800300c:	4957      	ldr	r1, [pc, #348]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800300e:	4313      	orrs	r3, r2
 8003010:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d004      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003024:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003028:	d00a      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003032:	2b00      	cmp	r3, #0
 8003034:	d02e      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800303e:	d129      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003040:	4b4a      	ldr	r3, [pc, #296]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003042:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003046:	0c1b      	lsrs	r3, r3, #16
 8003048:	f003 0303 	and.w	r3, r3, #3
 800304c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800304e:	4b47      	ldr	r3, [pc, #284]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003050:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003054:	0f1b      	lsrs	r3, r3, #28
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	019a      	lsls	r2, r3, #6
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	041b      	lsls	r3, r3, #16
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	061b      	lsls	r3, r3, #24
 800306e:	431a      	orrs	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	071b      	lsls	r3, r3, #28
 8003074:	493d      	ldr	r1, [pc, #244]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003076:	4313      	orrs	r3, r2
 8003078:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800307c:	4b3b      	ldr	r3, [pc, #236]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800307e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003082:	f023 021f 	bic.w	r2, r3, #31
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800308a:	3b01      	subs	r3, #1
 800308c:	4937      	ldr	r1, [pc, #220]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800308e:	4313      	orrs	r3, r2
 8003090:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d01d      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80030a0:	4b32      	ldr	r3, [pc, #200]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030a6:	0e1b      	lsrs	r3, r3, #24
 80030a8:	f003 030f 	and.w	r3, r3, #15
 80030ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030ae:	4b2f      	ldr	r3, [pc, #188]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030b4:	0f1b      	lsrs	r3, r3, #28
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	019a      	lsls	r2, r3, #6
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	041b      	lsls	r3, r3, #16
 80030c8:	431a      	orrs	r2, r3
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	061b      	lsls	r3, r3, #24
 80030ce:	431a      	orrs	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	071b      	lsls	r3, r3, #28
 80030d4:	4925      	ldr	r1, [pc, #148]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d011      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	019a      	lsls	r2, r3, #6
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	041b      	lsls	r3, r3, #16
 80030f4:	431a      	orrs	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	061b      	lsls	r3, r3, #24
 80030fc:	431a      	orrs	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	071b      	lsls	r3, r3, #28
 8003104:	4919      	ldr	r1, [pc, #100]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003106:	4313      	orrs	r3, r2
 8003108:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800310c:	4b17      	ldr	r3, [pc, #92]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a16      	ldr	r2, [pc, #88]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003112:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003116:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003118:	f7fe fd94 	bl	8001c44 <HAL_GetTick>
 800311c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800311e:	e008      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003120:	f7fe fd90 	bl	8001c44 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b64      	cmp	r3, #100	@ 0x64
 800312c:	d901      	bls.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e0d7      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003132:	4b0e      	ldr	r3, [pc, #56]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d0f0      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	2b01      	cmp	r3, #1
 8003142:	f040 80cd 	bne.w	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003146:	4b09      	ldr	r3, [pc, #36]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a08      	ldr	r2, [pc, #32]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800314c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003150:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003152:	f7fe fd77 	bl	8001c44 <HAL_GetTick>
 8003156:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003158:	e00a      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800315a:	f7fe fd73 	bl	8001c44 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b64      	cmp	r3, #100	@ 0x64
 8003166:	d903      	bls.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e0ba      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800316c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003170:	4b5e      	ldr	r3, [pc, #376]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003178:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800317c:	d0ed      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d003      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800318e:	2b00      	cmp	r3, #0
 8003190:	d009      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800319a:	2b00      	cmp	r3, #0
 800319c:	d02e      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d12a      	bne.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80031a6:	4b51      	ldr	r3, [pc, #324]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ac:	0c1b      	lsrs	r3, r3, #16
 80031ae:	f003 0303 	and.w	r3, r3, #3
 80031b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031b4:	4b4d      	ldr	r3, [pc, #308]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ba:	0f1b      	lsrs	r3, r3, #28
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	019a      	lsls	r2, r3, #6
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	041b      	lsls	r3, r3, #16
 80031cc:	431a      	orrs	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	061b      	lsls	r3, r3, #24
 80031d4:	431a      	orrs	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	071b      	lsls	r3, r3, #28
 80031da:	4944      	ldr	r1, [pc, #272]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80031e2:	4b42      	ldr	r3, [pc, #264]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031e8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f0:	3b01      	subs	r3, #1
 80031f2:	021b      	lsls	r3, r3, #8
 80031f4:	493d      	ldr	r1, [pc, #244]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d022      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800320c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003210:	d11d      	bne.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003212:	4b36      	ldr	r3, [pc, #216]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003214:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003218:	0e1b      	lsrs	r3, r3, #24
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003220:	4b32      	ldr	r3, [pc, #200]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003226:	0f1b      	lsrs	r3, r3, #28
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	019a      	lsls	r2, r3, #6
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	041b      	lsls	r3, r3, #16
 800323a:	431a      	orrs	r2, r3
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	061b      	lsls	r3, r3, #24
 8003240:	431a      	orrs	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	071b      	lsls	r3, r3, #28
 8003246:	4929      	ldr	r1, [pc, #164]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003248:	4313      	orrs	r3, r2
 800324a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0308 	and.w	r3, r3, #8
 8003256:	2b00      	cmp	r3, #0
 8003258:	d028      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800325a:	4b24      	ldr	r3, [pc, #144]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800325c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003260:	0e1b      	lsrs	r3, r3, #24
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003268:	4b20      	ldr	r3, [pc, #128]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800326a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800326e:	0c1b      	lsrs	r3, r3, #16
 8003270:	f003 0303 	and.w	r3, r3, #3
 8003274:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	019a      	lsls	r2, r3, #6
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	041b      	lsls	r3, r3, #16
 8003280:	431a      	orrs	r2, r3
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	061b      	lsls	r3, r3, #24
 8003286:	431a      	orrs	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	69db      	ldr	r3, [r3, #28]
 800328c:	071b      	lsls	r3, r3, #28
 800328e:	4917      	ldr	r1, [pc, #92]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003290:	4313      	orrs	r3, r2
 8003292:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003296:	4b15      	ldr	r3, [pc, #84]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003298:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800329c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a4:	4911      	ldr	r1, [pc, #68]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80032ac:	4b0f      	ldr	r3, [pc, #60]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a0e      	ldr	r2, [pc, #56]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032b8:	f7fe fcc4 	bl	8001c44 <HAL_GetTick>
 80032bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032c0:	f7fe fcc0 	bl	8001c44 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b64      	cmp	r3, #100	@ 0x64
 80032cc:	d901      	bls.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e007      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032d2:	4b06      	ldr	r3, [pc, #24]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032de:	d1ef      	bne.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3720      	adds	r7, #32
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	40023800 	.word	0x40023800

080032f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e049      	b.n	8003396 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d106      	bne.n	800331c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f7fe fb00 	bl	800191c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2202      	movs	r2, #2
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3304      	adds	r3, #4
 800332c:	4619      	mov	r1, r3
 800332e:	4610      	mov	r0, r2
 8003330:	f000 f8ce 	bl	80034d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
	...

080033a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d001      	beq.n	80033b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e04c      	b.n	8003452 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2202      	movs	r2, #2
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a26      	ldr	r2, [pc, #152]	@ (8003460 <HAL_TIM_Base_Start+0xc0>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d022      	beq.n	8003410 <HAL_TIM_Base_Start+0x70>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033d2:	d01d      	beq.n	8003410 <HAL_TIM_Base_Start+0x70>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a22      	ldr	r2, [pc, #136]	@ (8003464 <HAL_TIM_Base_Start+0xc4>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d018      	beq.n	8003410 <HAL_TIM_Base_Start+0x70>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a21      	ldr	r2, [pc, #132]	@ (8003468 <HAL_TIM_Base_Start+0xc8>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d013      	beq.n	8003410 <HAL_TIM_Base_Start+0x70>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a1f      	ldr	r2, [pc, #124]	@ (800346c <HAL_TIM_Base_Start+0xcc>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d00e      	beq.n	8003410 <HAL_TIM_Base_Start+0x70>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a1e      	ldr	r2, [pc, #120]	@ (8003470 <HAL_TIM_Base_Start+0xd0>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d009      	beq.n	8003410 <HAL_TIM_Base_Start+0x70>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a1c      	ldr	r2, [pc, #112]	@ (8003474 <HAL_TIM_Base_Start+0xd4>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d004      	beq.n	8003410 <HAL_TIM_Base_Start+0x70>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a1b      	ldr	r2, [pc, #108]	@ (8003478 <HAL_TIM_Base_Start+0xd8>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d115      	bne.n	800343c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689a      	ldr	r2, [r3, #8]
 8003416:	4b19      	ldr	r3, [pc, #100]	@ (800347c <HAL_TIM_Base_Start+0xdc>)
 8003418:	4013      	ands	r3, r2
 800341a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2b06      	cmp	r3, #6
 8003420:	d015      	beq.n	800344e <HAL_TIM_Base_Start+0xae>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003428:	d011      	beq.n	800344e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f042 0201 	orr.w	r2, r2, #1
 8003438:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800343a:	e008      	b.n	800344e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f042 0201 	orr.w	r2, r2, #1
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	e000      	b.n	8003450 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800344e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3714      	adds	r7, #20
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	40010000 	.word	0x40010000
 8003464:	40000400 	.word	0x40000400
 8003468:	40000800 	.word	0x40000800
 800346c:	40000c00 	.word	0x40000c00
 8003470:	40010400 	.word	0x40010400
 8003474:	40014000 	.word	0x40014000
 8003478:	40001800 	.word	0x40001800
 800347c:	00010007 	.word	0x00010007

08003480 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6a1a      	ldr	r2, [r3, #32]
 800348e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003492:	4013      	ands	r3, r2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10f      	bne.n	80034b8 <HAL_TIM_Base_Stop+0x38>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6a1a      	ldr	r2, [r3, #32]
 800349e:	f240 4344 	movw	r3, #1092	@ 0x444
 80034a2:	4013      	ands	r3, r2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d107      	bne.n	80034b8 <HAL_TIM_Base_Stop+0x38>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0201 	bic.w	r2, r2, #1
 80034b6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
	...

080034d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a40      	ldr	r2, [pc, #256]	@ (80035e4 <TIM_Base_SetConfig+0x114>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d013      	beq.n	8003510 <TIM_Base_SetConfig+0x40>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034ee:	d00f      	beq.n	8003510 <TIM_Base_SetConfig+0x40>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a3d      	ldr	r2, [pc, #244]	@ (80035e8 <TIM_Base_SetConfig+0x118>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d00b      	beq.n	8003510 <TIM_Base_SetConfig+0x40>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a3c      	ldr	r2, [pc, #240]	@ (80035ec <TIM_Base_SetConfig+0x11c>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d007      	beq.n	8003510 <TIM_Base_SetConfig+0x40>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a3b      	ldr	r2, [pc, #236]	@ (80035f0 <TIM_Base_SetConfig+0x120>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d003      	beq.n	8003510 <TIM_Base_SetConfig+0x40>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a3a      	ldr	r2, [pc, #232]	@ (80035f4 <TIM_Base_SetConfig+0x124>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d108      	bne.n	8003522 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003516:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	4313      	orrs	r3, r2
 8003520:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a2f      	ldr	r2, [pc, #188]	@ (80035e4 <TIM_Base_SetConfig+0x114>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d02b      	beq.n	8003582 <TIM_Base_SetConfig+0xb2>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003530:	d027      	beq.n	8003582 <TIM_Base_SetConfig+0xb2>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a2c      	ldr	r2, [pc, #176]	@ (80035e8 <TIM_Base_SetConfig+0x118>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d023      	beq.n	8003582 <TIM_Base_SetConfig+0xb2>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a2b      	ldr	r2, [pc, #172]	@ (80035ec <TIM_Base_SetConfig+0x11c>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d01f      	beq.n	8003582 <TIM_Base_SetConfig+0xb2>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a2a      	ldr	r2, [pc, #168]	@ (80035f0 <TIM_Base_SetConfig+0x120>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d01b      	beq.n	8003582 <TIM_Base_SetConfig+0xb2>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a29      	ldr	r2, [pc, #164]	@ (80035f4 <TIM_Base_SetConfig+0x124>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d017      	beq.n	8003582 <TIM_Base_SetConfig+0xb2>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a28      	ldr	r2, [pc, #160]	@ (80035f8 <TIM_Base_SetConfig+0x128>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d013      	beq.n	8003582 <TIM_Base_SetConfig+0xb2>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a27      	ldr	r2, [pc, #156]	@ (80035fc <TIM_Base_SetConfig+0x12c>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d00f      	beq.n	8003582 <TIM_Base_SetConfig+0xb2>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a26      	ldr	r2, [pc, #152]	@ (8003600 <TIM_Base_SetConfig+0x130>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d00b      	beq.n	8003582 <TIM_Base_SetConfig+0xb2>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a25      	ldr	r2, [pc, #148]	@ (8003604 <TIM_Base_SetConfig+0x134>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d007      	beq.n	8003582 <TIM_Base_SetConfig+0xb2>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a24      	ldr	r2, [pc, #144]	@ (8003608 <TIM_Base_SetConfig+0x138>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d003      	beq.n	8003582 <TIM_Base_SetConfig+0xb2>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a23      	ldr	r2, [pc, #140]	@ (800360c <TIM_Base_SetConfig+0x13c>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d108      	bne.n	8003594 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003588:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	4313      	orrs	r3, r2
 8003592:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	4313      	orrs	r3, r2
 80035a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a0a      	ldr	r2, [pc, #40]	@ (80035e4 <TIM_Base_SetConfig+0x114>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d003      	beq.n	80035c8 <TIM_Base_SetConfig+0xf8>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a0c      	ldr	r2, [pc, #48]	@ (80035f4 <TIM_Base_SetConfig+0x124>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d103      	bne.n	80035d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	691a      	ldr	r2, [r3, #16]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	615a      	str	r2, [r3, #20]
}
 80035d6:	bf00      	nop
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	40010000 	.word	0x40010000
 80035e8:	40000400 	.word	0x40000400
 80035ec:	40000800 	.word	0x40000800
 80035f0:	40000c00 	.word	0x40000c00
 80035f4:	40010400 	.word	0x40010400
 80035f8:	40014000 	.word	0x40014000
 80035fc:	40014400 	.word	0x40014400
 8003600:	40014800 	.word	0x40014800
 8003604:	40001800 	.word	0x40001800
 8003608:	40001c00 	.word	0x40001c00
 800360c:	40002000 	.word	0x40002000

08003610 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e040      	b.n	80036a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003626:	2b00      	cmp	r3, #0
 8003628:	d106      	bne.n	8003638 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f7fe f992 	bl	800195c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2224      	movs	r2, #36	@ 0x24
 800363c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0201 	bic.w	r2, r2, #1
 800364c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f8b0 	bl	80037b4 <UART_SetConfig>
 8003654:	4603      	mov	r3, r0
 8003656:	2b01      	cmp	r3, #1
 8003658:	d101      	bne.n	800365e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e022      	b.n	80036a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003662:	2b00      	cmp	r3, #0
 8003664:	d002      	beq.n	800366c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 fb08 	bl	8003c7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	685a      	ldr	r2, [r3, #4]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800367a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800368a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0201 	orr.w	r2, r2, #1
 800369a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 fb8f 	bl	8003dc0 <UART_CheckIdleState>
 80036a2:	4603      	mov	r3, r0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3708      	adds	r7, #8
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b08a      	sub	sp, #40	@ 0x28
 80036b0:	af02      	add	r7, sp, #8
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	603b      	str	r3, [r7, #0]
 80036b8:	4613      	mov	r3, r2
 80036ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036c0:	2b20      	cmp	r3, #32
 80036c2:	d171      	bne.n	80037a8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d002      	beq.n	80036d0 <HAL_UART_Transmit+0x24>
 80036ca:	88fb      	ldrh	r3, [r7, #6]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d101      	bne.n	80036d4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e06a      	b.n	80037aa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2221      	movs	r2, #33	@ 0x21
 80036e0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036e2:	f7fe faaf 	bl	8001c44 <HAL_GetTick>
 80036e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	88fa      	ldrh	r2, [r7, #6]
 80036ec:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	88fa      	ldrh	r2, [r7, #6]
 80036f4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003700:	d108      	bne.n	8003714 <HAL_UART_Transmit+0x68>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d104      	bne.n	8003714 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800370a:	2300      	movs	r3, #0
 800370c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	61bb      	str	r3, [r7, #24]
 8003712:	e003      	b.n	800371c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003718:	2300      	movs	r3, #0
 800371a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800371c:	e02c      	b.n	8003778 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	2200      	movs	r2, #0
 8003726:	2180      	movs	r1, #128	@ 0x80
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 fb80 	bl	8003e2e <UART_WaitOnFlagUntilTimeout>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e038      	b.n	80037aa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10b      	bne.n	8003756 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	881b      	ldrh	r3, [r3, #0]
 8003742:	461a      	mov	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800374c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	3302      	adds	r3, #2
 8003752:	61bb      	str	r3, [r7, #24]
 8003754:	e007      	b.n	8003766 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	781a      	ldrb	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	3301      	adds	r3, #1
 8003764:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800376c:	b29b      	uxth	r3, r3
 800376e:	3b01      	subs	r3, #1
 8003770:	b29a      	uxth	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800377e:	b29b      	uxth	r3, r3
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1cc      	bne.n	800371e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	2200      	movs	r2, #0
 800378c:	2140      	movs	r1, #64	@ 0x40
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f000 fb4d 	bl	8003e2e <UART_WaitOnFlagUntilTimeout>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e005      	b.n	80037aa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2220      	movs	r2, #32
 80037a2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80037a4:	2300      	movs	r3, #0
 80037a6:	e000      	b.n	80037aa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80037a8:	2302      	movs	r3, #2
  }
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3720      	adds	r7, #32
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
	...

080037b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b088      	sub	sp, #32
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037bc:	2300      	movs	r3, #0
 80037be:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	431a      	orrs	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	431a      	orrs	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	69db      	ldr	r3, [r3, #28]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	4ba6      	ldr	r3, [pc, #664]	@ (8003a78 <UART_SetConfig+0x2c4>)
 80037e0:	4013      	ands	r3, r2
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	6812      	ldr	r2, [r2, #0]
 80037e6:	6979      	ldr	r1, [r7, #20]
 80037e8:	430b      	orrs	r3, r1
 80037ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68da      	ldr	r2, [r3, #12]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	430a      	orrs	r2, r1
 8003800:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	4313      	orrs	r3, r2
 8003810:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	430a      	orrs	r2, r1
 8003824:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a94      	ldr	r2, [pc, #592]	@ (8003a7c <UART_SetConfig+0x2c8>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d120      	bne.n	8003872 <UART_SetConfig+0xbe>
 8003830:	4b93      	ldr	r3, [pc, #588]	@ (8003a80 <UART_SetConfig+0x2cc>)
 8003832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003836:	f003 0303 	and.w	r3, r3, #3
 800383a:	2b03      	cmp	r3, #3
 800383c:	d816      	bhi.n	800386c <UART_SetConfig+0xb8>
 800383e:	a201      	add	r2, pc, #4	@ (adr r2, 8003844 <UART_SetConfig+0x90>)
 8003840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003844:	08003855 	.word	0x08003855
 8003848:	08003861 	.word	0x08003861
 800384c:	0800385b 	.word	0x0800385b
 8003850:	08003867 	.word	0x08003867
 8003854:	2301      	movs	r3, #1
 8003856:	77fb      	strb	r3, [r7, #31]
 8003858:	e150      	b.n	8003afc <UART_SetConfig+0x348>
 800385a:	2302      	movs	r3, #2
 800385c:	77fb      	strb	r3, [r7, #31]
 800385e:	e14d      	b.n	8003afc <UART_SetConfig+0x348>
 8003860:	2304      	movs	r3, #4
 8003862:	77fb      	strb	r3, [r7, #31]
 8003864:	e14a      	b.n	8003afc <UART_SetConfig+0x348>
 8003866:	2308      	movs	r3, #8
 8003868:	77fb      	strb	r3, [r7, #31]
 800386a:	e147      	b.n	8003afc <UART_SetConfig+0x348>
 800386c:	2310      	movs	r3, #16
 800386e:	77fb      	strb	r3, [r7, #31]
 8003870:	e144      	b.n	8003afc <UART_SetConfig+0x348>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a83      	ldr	r2, [pc, #524]	@ (8003a84 <UART_SetConfig+0x2d0>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d132      	bne.n	80038e2 <UART_SetConfig+0x12e>
 800387c:	4b80      	ldr	r3, [pc, #512]	@ (8003a80 <UART_SetConfig+0x2cc>)
 800387e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003882:	f003 030c 	and.w	r3, r3, #12
 8003886:	2b0c      	cmp	r3, #12
 8003888:	d828      	bhi.n	80038dc <UART_SetConfig+0x128>
 800388a:	a201      	add	r2, pc, #4	@ (adr r2, 8003890 <UART_SetConfig+0xdc>)
 800388c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003890:	080038c5 	.word	0x080038c5
 8003894:	080038dd 	.word	0x080038dd
 8003898:	080038dd 	.word	0x080038dd
 800389c:	080038dd 	.word	0x080038dd
 80038a0:	080038d1 	.word	0x080038d1
 80038a4:	080038dd 	.word	0x080038dd
 80038a8:	080038dd 	.word	0x080038dd
 80038ac:	080038dd 	.word	0x080038dd
 80038b0:	080038cb 	.word	0x080038cb
 80038b4:	080038dd 	.word	0x080038dd
 80038b8:	080038dd 	.word	0x080038dd
 80038bc:	080038dd 	.word	0x080038dd
 80038c0:	080038d7 	.word	0x080038d7
 80038c4:	2300      	movs	r3, #0
 80038c6:	77fb      	strb	r3, [r7, #31]
 80038c8:	e118      	b.n	8003afc <UART_SetConfig+0x348>
 80038ca:	2302      	movs	r3, #2
 80038cc:	77fb      	strb	r3, [r7, #31]
 80038ce:	e115      	b.n	8003afc <UART_SetConfig+0x348>
 80038d0:	2304      	movs	r3, #4
 80038d2:	77fb      	strb	r3, [r7, #31]
 80038d4:	e112      	b.n	8003afc <UART_SetConfig+0x348>
 80038d6:	2308      	movs	r3, #8
 80038d8:	77fb      	strb	r3, [r7, #31]
 80038da:	e10f      	b.n	8003afc <UART_SetConfig+0x348>
 80038dc:	2310      	movs	r3, #16
 80038de:	77fb      	strb	r3, [r7, #31]
 80038e0:	e10c      	b.n	8003afc <UART_SetConfig+0x348>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a68      	ldr	r2, [pc, #416]	@ (8003a88 <UART_SetConfig+0x2d4>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d120      	bne.n	800392e <UART_SetConfig+0x17a>
 80038ec:	4b64      	ldr	r3, [pc, #400]	@ (8003a80 <UART_SetConfig+0x2cc>)
 80038ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038f2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80038f6:	2b30      	cmp	r3, #48	@ 0x30
 80038f8:	d013      	beq.n	8003922 <UART_SetConfig+0x16e>
 80038fa:	2b30      	cmp	r3, #48	@ 0x30
 80038fc:	d814      	bhi.n	8003928 <UART_SetConfig+0x174>
 80038fe:	2b20      	cmp	r3, #32
 8003900:	d009      	beq.n	8003916 <UART_SetConfig+0x162>
 8003902:	2b20      	cmp	r3, #32
 8003904:	d810      	bhi.n	8003928 <UART_SetConfig+0x174>
 8003906:	2b00      	cmp	r3, #0
 8003908:	d002      	beq.n	8003910 <UART_SetConfig+0x15c>
 800390a:	2b10      	cmp	r3, #16
 800390c:	d006      	beq.n	800391c <UART_SetConfig+0x168>
 800390e:	e00b      	b.n	8003928 <UART_SetConfig+0x174>
 8003910:	2300      	movs	r3, #0
 8003912:	77fb      	strb	r3, [r7, #31]
 8003914:	e0f2      	b.n	8003afc <UART_SetConfig+0x348>
 8003916:	2302      	movs	r3, #2
 8003918:	77fb      	strb	r3, [r7, #31]
 800391a:	e0ef      	b.n	8003afc <UART_SetConfig+0x348>
 800391c:	2304      	movs	r3, #4
 800391e:	77fb      	strb	r3, [r7, #31]
 8003920:	e0ec      	b.n	8003afc <UART_SetConfig+0x348>
 8003922:	2308      	movs	r3, #8
 8003924:	77fb      	strb	r3, [r7, #31]
 8003926:	e0e9      	b.n	8003afc <UART_SetConfig+0x348>
 8003928:	2310      	movs	r3, #16
 800392a:	77fb      	strb	r3, [r7, #31]
 800392c:	e0e6      	b.n	8003afc <UART_SetConfig+0x348>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a56      	ldr	r2, [pc, #344]	@ (8003a8c <UART_SetConfig+0x2d8>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d120      	bne.n	800397a <UART_SetConfig+0x1c6>
 8003938:	4b51      	ldr	r3, [pc, #324]	@ (8003a80 <UART_SetConfig+0x2cc>)
 800393a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800393e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003942:	2bc0      	cmp	r3, #192	@ 0xc0
 8003944:	d013      	beq.n	800396e <UART_SetConfig+0x1ba>
 8003946:	2bc0      	cmp	r3, #192	@ 0xc0
 8003948:	d814      	bhi.n	8003974 <UART_SetConfig+0x1c0>
 800394a:	2b80      	cmp	r3, #128	@ 0x80
 800394c:	d009      	beq.n	8003962 <UART_SetConfig+0x1ae>
 800394e:	2b80      	cmp	r3, #128	@ 0x80
 8003950:	d810      	bhi.n	8003974 <UART_SetConfig+0x1c0>
 8003952:	2b00      	cmp	r3, #0
 8003954:	d002      	beq.n	800395c <UART_SetConfig+0x1a8>
 8003956:	2b40      	cmp	r3, #64	@ 0x40
 8003958:	d006      	beq.n	8003968 <UART_SetConfig+0x1b4>
 800395a:	e00b      	b.n	8003974 <UART_SetConfig+0x1c0>
 800395c:	2300      	movs	r3, #0
 800395e:	77fb      	strb	r3, [r7, #31]
 8003960:	e0cc      	b.n	8003afc <UART_SetConfig+0x348>
 8003962:	2302      	movs	r3, #2
 8003964:	77fb      	strb	r3, [r7, #31]
 8003966:	e0c9      	b.n	8003afc <UART_SetConfig+0x348>
 8003968:	2304      	movs	r3, #4
 800396a:	77fb      	strb	r3, [r7, #31]
 800396c:	e0c6      	b.n	8003afc <UART_SetConfig+0x348>
 800396e:	2308      	movs	r3, #8
 8003970:	77fb      	strb	r3, [r7, #31]
 8003972:	e0c3      	b.n	8003afc <UART_SetConfig+0x348>
 8003974:	2310      	movs	r3, #16
 8003976:	77fb      	strb	r3, [r7, #31]
 8003978:	e0c0      	b.n	8003afc <UART_SetConfig+0x348>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a44      	ldr	r2, [pc, #272]	@ (8003a90 <UART_SetConfig+0x2dc>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d125      	bne.n	80039d0 <UART_SetConfig+0x21c>
 8003984:	4b3e      	ldr	r3, [pc, #248]	@ (8003a80 <UART_SetConfig+0x2cc>)
 8003986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800398a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800398e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003992:	d017      	beq.n	80039c4 <UART_SetConfig+0x210>
 8003994:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003998:	d817      	bhi.n	80039ca <UART_SetConfig+0x216>
 800399a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800399e:	d00b      	beq.n	80039b8 <UART_SetConfig+0x204>
 80039a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039a4:	d811      	bhi.n	80039ca <UART_SetConfig+0x216>
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <UART_SetConfig+0x1fe>
 80039aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039ae:	d006      	beq.n	80039be <UART_SetConfig+0x20a>
 80039b0:	e00b      	b.n	80039ca <UART_SetConfig+0x216>
 80039b2:	2300      	movs	r3, #0
 80039b4:	77fb      	strb	r3, [r7, #31]
 80039b6:	e0a1      	b.n	8003afc <UART_SetConfig+0x348>
 80039b8:	2302      	movs	r3, #2
 80039ba:	77fb      	strb	r3, [r7, #31]
 80039bc:	e09e      	b.n	8003afc <UART_SetConfig+0x348>
 80039be:	2304      	movs	r3, #4
 80039c0:	77fb      	strb	r3, [r7, #31]
 80039c2:	e09b      	b.n	8003afc <UART_SetConfig+0x348>
 80039c4:	2308      	movs	r3, #8
 80039c6:	77fb      	strb	r3, [r7, #31]
 80039c8:	e098      	b.n	8003afc <UART_SetConfig+0x348>
 80039ca:	2310      	movs	r3, #16
 80039cc:	77fb      	strb	r3, [r7, #31]
 80039ce:	e095      	b.n	8003afc <UART_SetConfig+0x348>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a2f      	ldr	r2, [pc, #188]	@ (8003a94 <UART_SetConfig+0x2e0>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d125      	bne.n	8003a26 <UART_SetConfig+0x272>
 80039da:	4b29      	ldr	r3, [pc, #164]	@ (8003a80 <UART_SetConfig+0x2cc>)
 80039dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039e0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80039e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80039e8:	d017      	beq.n	8003a1a <UART_SetConfig+0x266>
 80039ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80039ee:	d817      	bhi.n	8003a20 <UART_SetConfig+0x26c>
 80039f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039f4:	d00b      	beq.n	8003a0e <UART_SetConfig+0x25a>
 80039f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039fa:	d811      	bhi.n	8003a20 <UART_SetConfig+0x26c>
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <UART_SetConfig+0x254>
 8003a00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a04:	d006      	beq.n	8003a14 <UART_SetConfig+0x260>
 8003a06:	e00b      	b.n	8003a20 <UART_SetConfig+0x26c>
 8003a08:	2301      	movs	r3, #1
 8003a0a:	77fb      	strb	r3, [r7, #31]
 8003a0c:	e076      	b.n	8003afc <UART_SetConfig+0x348>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	77fb      	strb	r3, [r7, #31]
 8003a12:	e073      	b.n	8003afc <UART_SetConfig+0x348>
 8003a14:	2304      	movs	r3, #4
 8003a16:	77fb      	strb	r3, [r7, #31]
 8003a18:	e070      	b.n	8003afc <UART_SetConfig+0x348>
 8003a1a:	2308      	movs	r3, #8
 8003a1c:	77fb      	strb	r3, [r7, #31]
 8003a1e:	e06d      	b.n	8003afc <UART_SetConfig+0x348>
 8003a20:	2310      	movs	r3, #16
 8003a22:	77fb      	strb	r3, [r7, #31]
 8003a24:	e06a      	b.n	8003afc <UART_SetConfig+0x348>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a1b      	ldr	r2, [pc, #108]	@ (8003a98 <UART_SetConfig+0x2e4>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d138      	bne.n	8003aa2 <UART_SetConfig+0x2ee>
 8003a30:	4b13      	ldr	r3, [pc, #76]	@ (8003a80 <UART_SetConfig+0x2cc>)
 8003a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a36:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003a3a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003a3e:	d017      	beq.n	8003a70 <UART_SetConfig+0x2bc>
 8003a40:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003a44:	d82a      	bhi.n	8003a9c <UART_SetConfig+0x2e8>
 8003a46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a4a:	d00b      	beq.n	8003a64 <UART_SetConfig+0x2b0>
 8003a4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a50:	d824      	bhi.n	8003a9c <UART_SetConfig+0x2e8>
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <UART_SetConfig+0x2aa>
 8003a56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a5a:	d006      	beq.n	8003a6a <UART_SetConfig+0x2b6>
 8003a5c:	e01e      	b.n	8003a9c <UART_SetConfig+0x2e8>
 8003a5e:	2300      	movs	r3, #0
 8003a60:	77fb      	strb	r3, [r7, #31]
 8003a62:	e04b      	b.n	8003afc <UART_SetConfig+0x348>
 8003a64:	2302      	movs	r3, #2
 8003a66:	77fb      	strb	r3, [r7, #31]
 8003a68:	e048      	b.n	8003afc <UART_SetConfig+0x348>
 8003a6a:	2304      	movs	r3, #4
 8003a6c:	77fb      	strb	r3, [r7, #31]
 8003a6e:	e045      	b.n	8003afc <UART_SetConfig+0x348>
 8003a70:	2308      	movs	r3, #8
 8003a72:	77fb      	strb	r3, [r7, #31]
 8003a74:	e042      	b.n	8003afc <UART_SetConfig+0x348>
 8003a76:	bf00      	nop
 8003a78:	efff69f3 	.word	0xefff69f3
 8003a7c:	40011000 	.word	0x40011000
 8003a80:	40023800 	.word	0x40023800
 8003a84:	40004400 	.word	0x40004400
 8003a88:	40004800 	.word	0x40004800
 8003a8c:	40004c00 	.word	0x40004c00
 8003a90:	40005000 	.word	0x40005000
 8003a94:	40011400 	.word	0x40011400
 8003a98:	40007800 	.word	0x40007800
 8003a9c:	2310      	movs	r3, #16
 8003a9e:	77fb      	strb	r3, [r7, #31]
 8003aa0:	e02c      	b.n	8003afc <UART_SetConfig+0x348>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a72      	ldr	r2, [pc, #456]	@ (8003c70 <UART_SetConfig+0x4bc>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d125      	bne.n	8003af8 <UART_SetConfig+0x344>
 8003aac:	4b71      	ldr	r3, [pc, #452]	@ (8003c74 <UART_SetConfig+0x4c0>)
 8003aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ab2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003ab6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003aba:	d017      	beq.n	8003aec <UART_SetConfig+0x338>
 8003abc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003ac0:	d817      	bhi.n	8003af2 <UART_SetConfig+0x33e>
 8003ac2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ac6:	d00b      	beq.n	8003ae0 <UART_SetConfig+0x32c>
 8003ac8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003acc:	d811      	bhi.n	8003af2 <UART_SetConfig+0x33e>
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <UART_SetConfig+0x326>
 8003ad2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ad6:	d006      	beq.n	8003ae6 <UART_SetConfig+0x332>
 8003ad8:	e00b      	b.n	8003af2 <UART_SetConfig+0x33e>
 8003ada:	2300      	movs	r3, #0
 8003adc:	77fb      	strb	r3, [r7, #31]
 8003ade:	e00d      	b.n	8003afc <UART_SetConfig+0x348>
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	77fb      	strb	r3, [r7, #31]
 8003ae4:	e00a      	b.n	8003afc <UART_SetConfig+0x348>
 8003ae6:	2304      	movs	r3, #4
 8003ae8:	77fb      	strb	r3, [r7, #31]
 8003aea:	e007      	b.n	8003afc <UART_SetConfig+0x348>
 8003aec:	2308      	movs	r3, #8
 8003aee:	77fb      	strb	r3, [r7, #31]
 8003af0:	e004      	b.n	8003afc <UART_SetConfig+0x348>
 8003af2:	2310      	movs	r3, #16
 8003af4:	77fb      	strb	r3, [r7, #31]
 8003af6:	e001      	b.n	8003afc <UART_SetConfig+0x348>
 8003af8:	2310      	movs	r3, #16
 8003afa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	69db      	ldr	r3, [r3, #28]
 8003b00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b04:	d15b      	bne.n	8003bbe <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003b06:	7ffb      	ldrb	r3, [r7, #31]
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d828      	bhi.n	8003b5e <UART_SetConfig+0x3aa>
 8003b0c:	a201      	add	r2, pc, #4	@ (adr r2, 8003b14 <UART_SetConfig+0x360>)
 8003b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b12:	bf00      	nop
 8003b14:	08003b39 	.word	0x08003b39
 8003b18:	08003b41 	.word	0x08003b41
 8003b1c:	08003b49 	.word	0x08003b49
 8003b20:	08003b5f 	.word	0x08003b5f
 8003b24:	08003b4f 	.word	0x08003b4f
 8003b28:	08003b5f 	.word	0x08003b5f
 8003b2c:	08003b5f 	.word	0x08003b5f
 8003b30:	08003b5f 	.word	0x08003b5f
 8003b34:	08003b57 	.word	0x08003b57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b38:	f7fe ffc2 	bl	8002ac0 <HAL_RCC_GetPCLK1Freq>
 8003b3c:	61b8      	str	r0, [r7, #24]
        break;
 8003b3e:	e013      	b.n	8003b68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b40:	f7fe ffd2 	bl	8002ae8 <HAL_RCC_GetPCLK2Freq>
 8003b44:	61b8      	str	r0, [r7, #24]
        break;
 8003b46:	e00f      	b.n	8003b68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b48:	4b4b      	ldr	r3, [pc, #300]	@ (8003c78 <UART_SetConfig+0x4c4>)
 8003b4a:	61bb      	str	r3, [r7, #24]
        break;
 8003b4c:	e00c      	b.n	8003b68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b4e:	f7fe fee5 	bl	800291c <HAL_RCC_GetSysClockFreq>
 8003b52:	61b8      	str	r0, [r7, #24]
        break;
 8003b54:	e008      	b.n	8003b68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b5a:	61bb      	str	r3, [r7, #24]
        break;
 8003b5c:	e004      	b.n	8003b68 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	77bb      	strb	r3, [r7, #30]
        break;
 8003b66:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d074      	beq.n	8003c58 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	005a      	lsls	r2, r3, #1
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	085b      	lsrs	r3, r3, #1
 8003b78:	441a      	add	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b82:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	2b0f      	cmp	r3, #15
 8003b88:	d916      	bls.n	8003bb8 <UART_SetConfig+0x404>
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b90:	d212      	bcs.n	8003bb8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	f023 030f 	bic.w	r3, r3, #15
 8003b9a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	085b      	lsrs	r3, r3, #1
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	f003 0307 	and.w	r3, r3, #7
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	89fb      	ldrh	r3, [r7, #14]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	89fa      	ldrh	r2, [r7, #14]
 8003bb4:	60da      	str	r2, [r3, #12]
 8003bb6:	e04f      	b.n	8003c58 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	77bb      	strb	r3, [r7, #30]
 8003bbc:	e04c      	b.n	8003c58 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bbe:	7ffb      	ldrb	r3, [r7, #31]
 8003bc0:	2b08      	cmp	r3, #8
 8003bc2:	d828      	bhi.n	8003c16 <UART_SetConfig+0x462>
 8003bc4:	a201      	add	r2, pc, #4	@ (adr r2, 8003bcc <UART_SetConfig+0x418>)
 8003bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bca:	bf00      	nop
 8003bcc:	08003bf1 	.word	0x08003bf1
 8003bd0:	08003bf9 	.word	0x08003bf9
 8003bd4:	08003c01 	.word	0x08003c01
 8003bd8:	08003c17 	.word	0x08003c17
 8003bdc:	08003c07 	.word	0x08003c07
 8003be0:	08003c17 	.word	0x08003c17
 8003be4:	08003c17 	.word	0x08003c17
 8003be8:	08003c17 	.word	0x08003c17
 8003bec:	08003c0f 	.word	0x08003c0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bf0:	f7fe ff66 	bl	8002ac0 <HAL_RCC_GetPCLK1Freq>
 8003bf4:	61b8      	str	r0, [r7, #24]
        break;
 8003bf6:	e013      	b.n	8003c20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bf8:	f7fe ff76 	bl	8002ae8 <HAL_RCC_GetPCLK2Freq>
 8003bfc:	61b8      	str	r0, [r7, #24]
        break;
 8003bfe:	e00f      	b.n	8003c20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c00:	4b1d      	ldr	r3, [pc, #116]	@ (8003c78 <UART_SetConfig+0x4c4>)
 8003c02:	61bb      	str	r3, [r7, #24]
        break;
 8003c04:	e00c      	b.n	8003c20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c06:	f7fe fe89 	bl	800291c <HAL_RCC_GetSysClockFreq>
 8003c0a:	61b8      	str	r0, [r7, #24]
        break;
 8003c0c:	e008      	b.n	8003c20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c12:	61bb      	str	r3, [r7, #24]
        break;
 8003c14:	e004      	b.n	8003c20 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003c16:	2300      	movs	r3, #0
 8003c18:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	77bb      	strb	r3, [r7, #30]
        break;
 8003c1e:	bf00      	nop
    }

    if (pclk != 0U)
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d018      	beq.n	8003c58 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	085a      	lsrs	r2, r3, #1
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	441a      	add	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c38:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	2b0f      	cmp	r3, #15
 8003c3e:	d909      	bls.n	8003c54 <UART_SetConfig+0x4a0>
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c46:	d205      	bcs.n	8003c54 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	60da      	str	r2, [r3, #12]
 8003c52:	e001      	b.n	8003c58 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003c64:	7fbb      	ldrb	r3, [r7, #30]
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3720      	adds	r7, #32
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	40007c00 	.word	0x40007c00
 8003c74:	40023800 	.word	0x40023800
 8003c78:	00f42400 	.word	0x00f42400

08003c7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00a      	beq.n	8003ca6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00a      	beq.n	8003cc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ccc:	f003 0304 	and.w	r3, r3, #4
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00a      	beq.n	8003cea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cee:	f003 0308 	and.w	r3, r3, #8
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00a      	beq.n	8003d0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d10:	f003 0310 	and.w	r3, r3, #16
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00a      	beq.n	8003d2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d32:	f003 0320 	and.w	r3, r3, #32
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00a      	beq.n	8003d50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d01a      	beq.n	8003d92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d7a:	d10a      	bne.n	8003d92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00a      	beq.n	8003db4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	605a      	str	r2, [r3, #4]
  }
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af02      	add	r7, sp, #8
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003dd0:	f7fd ff38 	bl	8001c44 <HAL_GetTick>
 8003dd4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0308 	and.w	r3, r3, #8
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d10e      	bne.n	8003e02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003de4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003de8:	9300      	str	r3, [sp, #0]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f81b 	bl	8003e2e <UART_WaitOnFlagUntilTimeout>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e011      	b.n	8003e26 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2220      	movs	r2, #32
 8003e06:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b09c      	sub	sp, #112	@ 0x70
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	60f8      	str	r0, [r7, #12]
 8003e36:	60b9      	str	r1, [r7, #8]
 8003e38:	603b      	str	r3, [r7, #0]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e3e:	e0a7      	b.n	8003f90 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e46:	f000 80a3 	beq.w	8003f90 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e4a:	f7fd fefb 	bl	8001c44 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d302      	bcc.n	8003e60 <UART_WaitOnFlagUntilTimeout+0x32>
 8003e5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d13f      	bne.n	8003ee0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e68:	e853 3f00 	ldrex	r3, [r3]
 8003e6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003e6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e70:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003e74:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e80:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e82:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003e84:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003e86:	e841 2300 	strex	r3, r2, [r1]
 8003e8a:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8003e8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1e6      	bne.n	8003e60 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	3308      	adds	r3, #8
 8003e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e9c:	e853 3f00 	ldrex	r3, [r3]
 8003ea0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ea4:	f023 0301 	bic.w	r3, r3, #1
 8003ea8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	3308      	adds	r3, #8
 8003eb0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003eb2:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003eb4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003eb8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003eba:	e841 2300 	strex	r3, r2, [r1]
 8003ebe:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003ec0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1e5      	bne.n	8003e92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e068      	b.n	8003fb2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0304 	and.w	r3, r3, #4
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d050      	beq.n	8003f90 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	69db      	ldr	r3, [r3, #28]
 8003ef4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ef8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003efc:	d148      	bne.n	8003f90 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f06:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f10:	e853 3f00 	ldrex	r3, [r3]
 8003f14:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f18:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003f1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	461a      	mov	r2, r3
 8003f24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f26:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f28:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003f2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f2e:	e841 2300 	strex	r3, r2, [r1]
 8003f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1e6      	bne.n	8003f08 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	3308      	adds	r3, #8
 8003f40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	e853 3f00 	ldrex	r3, [r3]
 8003f48:	613b      	str	r3, [r7, #16]
   return(result);
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	f023 0301 	bic.w	r3, r3, #1
 8003f50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	3308      	adds	r3, #8
 8003f58:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003f5a:	623a      	str	r2, [r7, #32]
 8003f5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5e:	69f9      	ldr	r1, [r7, #28]
 8003f60:	6a3a      	ldr	r2, [r7, #32]
 8003f62:	e841 2300 	strex	r3, r2, [r1]
 8003f66:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1e5      	bne.n	8003f3a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2220      	movs	r2, #32
 8003f72:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2220      	movs	r2, #32
 8003f78:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e010      	b.n	8003fb2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	69da      	ldr	r2, [r3, #28]
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	bf0c      	ite	eq
 8003fa0:	2301      	moveq	r3, #1
 8003fa2:	2300      	movne	r3, #0
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	79fb      	ldrb	r3, [r7, #7]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	f43f af48 	beq.w	8003e40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3770      	adds	r7, #112	@ 0x70
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
	...

08003fbc <siprintf>:
 8003fbc:	b40e      	push	{r1, r2, r3}
 8003fbe:	b500      	push	{lr}
 8003fc0:	b09c      	sub	sp, #112	@ 0x70
 8003fc2:	ab1d      	add	r3, sp, #116	@ 0x74
 8003fc4:	9002      	str	r0, [sp, #8]
 8003fc6:	9006      	str	r0, [sp, #24]
 8003fc8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003fcc:	4809      	ldr	r0, [pc, #36]	@ (8003ff4 <siprintf+0x38>)
 8003fce:	9107      	str	r1, [sp, #28]
 8003fd0:	9104      	str	r1, [sp, #16]
 8003fd2:	4909      	ldr	r1, [pc, #36]	@ (8003ff8 <siprintf+0x3c>)
 8003fd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fd8:	9105      	str	r1, [sp, #20]
 8003fda:	6800      	ldr	r0, [r0, #0]
 8003fdc:	9301      	str	r3, [sp, #4]
 8003fde:	a902      	add	r1, sp, #8
 8003fe0:	f000 f994 	bl	800430c <_svfiprintf_r>
 8003fe4:	9b02      	ldr	r3, [sp, #8]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	701a      	strb	r2, [r3, #0]
 8003fea:	b01c      	add	sp, #112	@ 0x70
 8003fec:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ff0:	b003      	add	sp, #12
 8003ff2:	4770      	bx	lr
 8003ff4:	2000000c 	.word	0x2000000c
 8003ff8:	ffff0208 	.word	0xffff0208

08003ffc <memset>:
 8003ffc:	4402      	add	r2, r0
 8003ffe:	4603      	mov	r3, r0
 8004000:	4293      	cmp	r3, r2
 8004002:	d100      	bne.n	8004006 <memset+0xa>
 8004004:	4770      	bx	lr
 8004006:	f803 1b01 	strb.w	r1, [r3], #1
 800400a:	e7f9      	b.n	8004000 <memset+0x4>

0800400c <__errno>:
 800400c:	4b01      	ldr	r3, [pc, #4]	@ (8004014 <__errno+0x8>)
 800400e:	6818      	ldr	r0, [r3, #0]
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	2000000c 	.word	0x2000000c

08004018 <__libc_init_array>:
 8004018:	b570      	push	{r4, r5, r6, lr}
 800401a:	4d0d      	ldr	r5, [pc, #52]	@ (8004050 <__libc_init_array+0x38>)
 800401c:	4c0d      	ldr	r4, [pc, #52]	@ (8004054 <__libc_init_array+0x3c>)
 800401e:	1b64      	subs	r4, r4, r5
 8004020:	10a4      	asrs	r4, r4, #2
 8004022:	2600      	movs	r6, #0
 8004024:	42a6      	cmp	r6, r4
 8004026:	d109      	bne.n	800403c <__libc_init_array+0x24>
 8004028:	4d0b      	ldr	r5, [pc, #44]	@ (8004058 <__libc_init_array+0x40>)
 800402a:	4c0c      	ldr	r4, [pc, #48]	@ (800405c <__libc_init_array+0x44>)
 800402c:	f001 fc98 	bl	8005960 <_init>
 8004030:	1b64      	subs	r4, r4, r5
 8004032:	10a4      	asrs	r4, r4, #2
 8004034:	2600      	movs	r6, #0
 8004036:	42a6      	cmp	r6, r4
 8004038:	d105      	bne.n	8004046 <__libc_init_array+0x2e>
 800403a:	bd70      	pop	{r4, r5, r6, pc}
 800403c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004040:	4798      	blx	r3
 8004042:	3601      	adds	r6, #1
 8004044:	e7ee      	b.n	8004024 <__libc_init_array+0xc>
 8004046:	f855 3b04 	ldr.w	r3, [r5], #4
 800404a:	4798      	blx	r3
 800404c:	3601      	adds	r6, #1
 800404e:	e7f2      	b.n	8004036 <__libc_init_array+0x1e>
 8004050:	08005bb8 	.word	0x08005bb8
 8004054:	08005bb8 	.word	0x08005bb8
 8004058:	08005bb8 	.word	0x08005bb8
 800405c:	08005bbc 	.word	0x08005bbc

08004060 <__retarget_lock_acquire_recursive>:
 8004060:	4770      	bx	lr

08004062 <__retarget_lock_release_recursive>:
 8004062:	4770      	bx	lr

08004064 <_free_r>:
 8004064:	b538      	push	{r3, r4, r5, lr}
 8004066:	4605      	mov	r5, r0
 8004068:	2900      	cmp	r1, #0
 800406a:	d041      	beq.n	80040f0 <_free_r+0x8c>
 800406c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004070:	1f0c      	subs	r4, r1, #4
 8004072:	2b00      	cmp	r3, #0
 8004074:	bfb8      	it	lt
 8004076:	18e4      	addlt	r4, r4, r3
 8004078:	f000 f8e0 	bl	800423c <__malloc_lock>
 800407c:	4a1d      	ldr	r2, [pc, #116]	@ (80040f4 <_free_r+0x90>)
 800407e:	6813      	ldr	r3, [r2, #0]
 8004080:	b933      	cbnz	r3, 8004090 <_free_r+0x2c>
 8004082:	6063      	str	r3, [r4, #4]
 8004084:	6014      	str	r4, [r2, #0]
 8004086:	4628      	mov	r0, r5
 8004088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800408c:	f000 b8dc 	b.w	8004248 <__malloc_unlock>
 8004090:	42a3      	cmp	r3, r4
 8004092:	d908      	bls.n	80040a6 <_free_r+0x42>
 8004094:	6820      	ldr	r0, [r4, #0]
 8004096:	1821      	adds	r1, r4, r0
 8004098:	428b      	cmp	r3, r1
 800409a:	bf01      	itttt	eq
 800409c:	6819      	ldreq	r1, [r3, #0]
 800409e:	685b      	ldreq	r3, [r3, #4]
 80040a0:	1809      	addeq	r1, r1, r0
 80040a2:	6021      	streq	r1, [r4, #0]
 80040a4:	e7ed      	b.n	8004082 <_free_r+0x1e>
 80040a6:	461a      	mov	r2, r3
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	b10b      	cbz	r3, 80040b0 <_free_r+0x4c>
 80040ac:	42a3      	cmp	r3, r4
 80040ae:	d9fa      	bls.n	80040a6 <_free_r+0x42>
 80040b0:	6811      	ldr	r1, [r2, #0]
 80040b2:	1850      	adds	r0, r2, r1
 80040b4:	42a0      	cmp	r0, r4
 80040b6:	d10b      	bne.n	80040d0 <_free_r+0x6c>
 80040b8:	6820      	ldr	r0, [r4, #0]
 80040ba:	4401      	add	r1, r0
 80040bc:	1850      	adds	r0, r2, r1
 80040be:	4283      	cmp	r3, r0
 80040c0:	6011      	str	r1, [r2, #0]
 80040c2:	d1e0      	bne.n	8004086 <_free_r+0x22>
 80040c4:	6818      	ldr	r0, [r3, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	6053      	str	r3, [r2, #4]
 80040ca:	4408      	add	r0, r1
 80040cc:	6010      	str	r0, [r2, #0]
 80040ce:	e7da      	b.n	8004086 <_free_r+0x22>
 80040d0:	d902      	bls.n	80040d8 <_free_r+0x74>
 80040d2:	230c      	movs	r3, #12
 80040d4:	602b      	str	r3, [r5, #0]
 80040d6:	e7d6      	b.n	8004086 <_free_r+0x22>
 80040d8:	6820      	ldr	r0, [r4, #0]
 80040da:	1821      	adds	r1, r4, r0
 80040dc:	428b      	cmp	r3, r1
 80040de:	bf04      	itt	eq
 80040e0:	6819      	ldreq	r1, [r3, #0]
 80040e2:	685b      	ldreq	r3, [r3, #4]
 80040e4:	6063      	str	r3, [r4, #4]
 80040e6:	bf04      	itt	eq
 80040e8:	1809      	addeq	r1, r1, r0
 80040ea:	6021      	streq	r1, [r4, #0]
 80040ec:	6054      	str	r4, [r2, #4]
 80040ee:	e7ca      	b.n	8004086 <_free_r+0x22>
 80040f0:	bd38      	pop	{r3, r4, r5, pc}
 80040f2:	bf00      	nop
 80040f4:	200002bc 	.word	0x200002bc

080040f8 <sbrk_aligned>:
 80040f8:	b570      	push	{r4, r5, r6, lr}
 80040fa:	4e0f      	ldr	r6, [pc, #60]	@ (8004138 <sbrk_aligned+0x40>)
 80040fc:	460c      	mov	r4, r1
 80040fe:	6831      	ldr	r1, [r6, #0]
 8004100:	4605      	mov	r5, r0
 8004102:	b911      	cbnz	r1, 800410a <sbrk_aligned+0x12>
 8004104:	f000 fba6 	bl	8004854 <_sbrk_r>
 8004108:	6030      	str	r0, [r6, #0]
 800410a:	4621      	mov	r1, r4
 800410c:	4628      	mov	r0, r5
 800410e:	f000 fba1 	bl	8004854 <_sbrk_r>
 8004112:	1c43      	adds	r3, r0, #1
 8004114:	d103      	bne.n	800411e <sbrk_aligned+0x26>
 8004116:	f04f 34ff 	mov.w	r4, #4294967295
 800411a:	4620      	mov	r0, r4
 800411c:	bd70      	pop	{r4, r5, r6, pc}
 800411e:	1cc4      	adds	r4, r0, #3
 8004120:	f024 0403 	bic.w	r4, r4, #3
 8004124:	42a0      	cmp	r0, r4
 8004126:	d0f8      	beq.n	800411a <sbrk_aligned+0x22>
 8004128:	1a21      	subs	r1, r4, r0
 800412a:	4628      	mov	r0, r5
 800412c:	f000 fb92 	bl	8004854 <_sbrk_r>
 8004130:	3001      	adds	r0, #1
 8004132:	d1f2      	bne.n	800411a <sbrk_aligned+0x22>
 8004134:	e7ef      	b.n	8004116 <sbrk_aligned+0x1e>
 8004136:	bf00      	nop
 8004138:	200002b8 	.word	0x200002b8

0800413c <_malloc_r>:
 800413c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004140:	1ccd      	adds	r5, r1, #3
 8004142:	f025 0503 	bic.w	r5, r5, #3
 8004146:	3508      	adds	r5, #8
 8004148:	2d0c      	cmp	r5, #12
 800414a:	bf38      	it	cc
 800414c:	250c      	movcc	r5, #12
 800414e:	2d00      	cmp	r5, #0
 8004150:	4606      	mov	r6, r0
 8004152:	db01      	blt.n	8004158 <_malloc_r+0x1c>
 8004154:	42a9      	cmp	r1, r5
 8004156:	d904      	bls.n	8004162 <_malloc_r+0x26>
 8004158:	230c      	movs	r3, #12
 800415a:	6033      	str	r3, [r6, #0]
 800415c:	2000      	movs	r0, #0
 800415e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004162:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004238 <_malloc_r+0xfc>
 8004166:	f000 f869 	bl	800423c <__malloc_lock>
 800416a:	f8d8 3000 	ldr.w	r3, [r8]
 800416e:	461c      	mov	r4, r3
 8004170:	bb44      	cbnz	r4, 80041c4 <_malloc_r+0x88>
 8004172:	4629      	mov	r1, r5
 8004174:	4630      	mov	r0, r6
 8004176:	f7ff ffbf 	bl	80040f8 <sbrk_aligned>
 800417a:	1c43      	adds	r3, r0, #1
 800417c:	4604      	mov	r4, r0
 800417e:	d158      	bne.n	8004232 <_malloc_r+0xf6>
 8004180:	f8d8 4000 	ldr.w	r4, [r8]
 8004184:	4627      	mov	r7, r4
 8004186:	2f00      	cmp	r7, #0
 8004188:	d143      	bne.n	8004212 <_malloc_r+0xd6>
 800418a:	2c00      	cmp	r4, #0
 800418c:	d04b      	beq.n	8004226 <_malloc_r+0xea>
 800418e:	6823      	ldr	r3, [r4, #0]
 8004190:	4639      	mov	r1, r7
 8004192:	4630      	mov	r0, r6
 8004194:	eb04 0903 	add.w	r9, r4, r3
 8004198:	f000 fb5c 	bl	8004854 <_sbrk_r>
 800419c:	4581      	cmp	r9, r0
 800419e:	d142      	bne.n	8004226 <_malloc_r+0xea>
 80041a0:	6821      	ldr	r1, [r4, #0]
 80041a2:	1a6d      	subs	r5, r5, r1
 80041a4:	4629      	mov	r1, r5
 80041a6:	4630      	mov	r0, r6
 80041a8:	f7ff ffa6 	bl	80040f8 <sbrk_aligned>
 80041ac:	3001      	adds	r0, #1
 80041ae:	d03a      	beq.n	8004226 <_malloc_r+0xea>
 80041b0:	6823      	ldr	r3, [r4, #0]
 80041b2:	442b      	add	r3, r5
 80041b4:	6023      	str	r3, [r4, #0]
 80041b6:	f8d8 3000 	ldr.w	r3, [r8]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	bb62      	cbnz	r2, 8004218 <_malloc_r+0xdc>
 80041be:	f8c8 7000 	str.w	r7, [r8]
 80041c2:	e00f      	b.n	80041e4 <_malloc_r+0xa8>
 80041c4:	6822      	ldr	r2, [r4, #0]
 80041c6:	1b52      	subs	r2, r2, r5
 80041c8:	d420      	bmi.n	800420c <_malloc_r+0xd0>
 80041ca:	2a0b      	cmp	r2, #11
 80041cc:	d917      	bls.n	80041fe <_malloc_r+0xc2>
 80041ce:	1961      	adds	r1, r4, r5
 80041d0:	42a3      	cmp	r3, r4
 80041d2:	6025      	str	r5, [r4, #0]
 80041d4:	bf18      	it	ne
 80041d6:	6059      	strne	r1, [r3, #4]
 80041d8:	6863      	ldr	r3, [r4, #4]
 80041da:	bf08      	it	eq
 80041dc:	f8c8 1000 	streq.w	r1, [r8]
 80041e0:	5162      	str	r2, [r4, r5]
 80041e2:	604b      	str	r3, [r1, #4]
 80041e4:	4630      	mov	r0, r6
 80041e6:	f000 f82f 	bl	8004248 <__malloc_unlock>
 80041ea:	f104 000b 	add.w	r0, r4, #11
 80041ee:	1d23      	adds	r3, r4, #4
 80041f0:	f020 0007 	bic.w	r0, r0, #7
 80041f4:	1ac2      	subs	r2, r0, r3
 80041f6:	bf1c      	itt	ne
 80041f8:	1a1b      	subne	r3, r3, r0
 80041fa:	50a3      	strne	r3, [r4, r2]
 80041fc:	e7af      	b.n	800415e <_malloc_r+0x22>
 80041fe:	6862      	ldr	r2, [r4, #4]
 8004200:	42a3      	cmp	r3, r4
 8004202:	bf0c      	ite	eq
 8004204:	f8c8 2000 	streq.w	r2, [r8]
 8004208:	605a      	strne	r2, [r3, #4]
 800420a:	e7eb      	b.n	80041e4 <_malloc_r+0xa8>
 800420c:	4623      	mov	r3, r4
 800420e:	6864      	ldr	r4, [r4, #4]
 8004210:	e7ae      	b.n	8004170 <_malloc_r+0x34>
 8004212:	463c      	mov	r4, r7
 8004214:	687f      	ldr	r7, [r7, #4]
 8004216:	e7b6      	b.n	8004186 <_malloc_r+0x4a>
 8004218:	461a      	mov	r2, r3
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	42a3      	cmp	r3, r4
 800421e:	d1fb      	bne.n	8004218 <_malloc_r+0xdc>
 8004220:	2300      	movs	r3, #0
 8004222:	6053      	str	r3, [r2, #4]
 8004224:	e7de      	b.n	80041e4 <_malloc_r+0xa8>
 8004226:	230c      	movs	r3, #12
 8004228:	6033      	str	r3, [r6, #0]
 800422a:	4630      	mov	r0, r6
 800422c:	f000 f80c 	bl	8004248 <__malloc_unlock>
 8004230:	e794      	b.n	800415c <_malloc_r+0x20>
 8004232:	6005      	str	r5, [r0, #0]
 8004234:	e7d6      	b.n	80041e4 <_malloc_r+0xa8>
 8004236:	bf00      	nop
 8004238:	200002bc 	.word	0x200002bc

0800423c <__malloc_lock>:
 800423c:	4801      	ldr	r0, [pc, #4]	@ (8004244 <__malloc_lock+0x8>)
 800423e:	f7ff bf0f 	b.w	8004060 <__retarget_lock_acquire_recursive>
 8004242:	bf00      	nop
 8004244:	200002b4 	.word	0x200002b4

08004248 <__malloc_unlock>:
 8004248:	4801      	ldr	r0, [pc, #4]	@ (8004250 <__malloc_unlock+0x8>)
 800424a:	f7ff bf0a 	b.w	8004062 <__retarget_lock_release_recursive>
 800424e:	bf00      	nop
 8004250:	200002b4 	.word	0x200002b4

08004254 <__ssputs_r>:
 8004254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004258:	688e      	ldr	r6, [r1, #8]
 800425a:	461f      	mov	r7, r3
 800425c:	42be      	cmp	r6, r7
 800425e:	680b      	ldr	r3, [r1, #0]
 8004260:	4682      	mov	sl, r0
 8004262:	460c      	mov	r4, r1
 8004264:	4690      	mov	r8, r2
 8004266:	d82d      	bhi.n	80042c4 <__ssputs_r+0x70>
 8004268:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800426c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004270:	d026      	beq.n	80042c0 <__ssputs_r+0x6c>
 8004272:	6965      	ldr	r5, [r4, #20]
 8004274:	6909      	ldr	r1, [r1, #16]
 8004276:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800427a:	eba3 0901 	sub.w	r9, r3, r1
 800427e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004282:	1c7b      	adds	r3, r7, #1
 8004284:	444b      	add	r3, r9
 8004286:	106d      	asrs	r5, r5, #1
 8004288:	429d      	cmp	r5, r3
 800428a:	bf38      	it	cc
 800428c:	461d      	movcc	r5, r3
 800428e:	0553      	lsls	r3, r2, #21
 8004290:	d527      	bpl.n	80042e2 <__ssputs_r+0x8e>
 8004292:	4629      	mov	r1, r5
 8004294:	f7ff ff52 	bl	800413c <_malloc_r>
 8004298:	4606      	mov	r6, r0
 800429a:	b360      	cbz	r0, 80042f6 <__ssputs_r+0xa2>
 800429c:	6921      	ldr	r1, [r4, #16]
 800429e:	464a      	mov	r2, r9
 80042a0:	f000 fae8 	bl	8004874 <memcpy>
 80042a4:	89a3      	ldrh	r3, [r4, #12]
 80042a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80042aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042ae:	81a3      	strh	r3, [r4, #12]
 80042b0:	6126      	str	r6, [r4, #16]
 80042b2:	6165      	str	r5, [r4, #20]
 80042b4:	444e      	add	r6, r9
 80042b6:	eba5 0509 	sub.w	r5, r5, r9
 80042ba:	6026      	str	r6, [r4, #0]
 80042bc:	60a5      	str	r5, [r4, #8]
 80042be:	463e      	mov	r6, r7
 80042c0:	42be      	cmp	r6, r7
 80042c2:	d900      	bls.n	80042c6 <__ssputs_r+0x72>
 80042c4:	463e      	mov	r6, r7
 80042c6:	6820      	ldr	r0, [r4, #0]
 80042c8:	4632      	mov	r2, r6
 80042ca:	4641      	mov	r1, r8
 80042cc:	f000 faa8 	bl	8004820 <memmove>
 80042d0:	68a3      	ldr	r3, [r4, #8]
 80042d2:	1b9b      	subs	r3, r3, r6
 80042d4:	60a3      	str	r3, [r4, #8]
 80042d6:	6823      	ldr	r3, [r4, #0]
 80042d8:	4433      	add	r3, r6
 80042da:	6023      	str	r3, [r4, #0]
 80042dc:	2000      	movs	r0, #0
 80042de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042e2:	462a      	mov	r2, r5
 80042e4:	f000 fad4 	bl	8004890 <_realloc_r>
 80042e8:	4606      	mov	r6, r0
 80042ea:	2800      	cmp	r0, #0
 80042ec:	d1e0      	bne.n	80042b0 <__ssputs_r+0x5c>
 80042ee:	6921      	ldr	r1, [r4, #16]
 80042f0:	4650      	mov	r0, sl
 80042f2:	f7ff feb7 	bl	8004064 <_free_r>
 80042f6:	230c      	movs	r3, #12
 80042f8:	f8ca 3000 	str.w	r3, [sl]
 80042fc:	89a3      	ldrh	r3, [r4, #12]
 80042fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004302:	81a3      	strh	r3, [r4, #12]
 8004304:	f04f 30ff 	mov.w	r0, #4294967295
 8004308:	e7e9      	b.n	80042de <__ssputs_r+0x8a>
	...

0800430c <_svfiprintf_r>:
 800430c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004310:	4698      	mov	r8, r3
 8004312:	898b      	ldrh	r3, [r1, #12]
 8004314:	061b      	lsls	r3, r3, #24
 8004316:	b09d      	sub	sp, #116	@ 0x74
 8004318:	4607      	mov	r7, r0
 800431a:	460d      	mov	r5, r1
 800431c:	4614      	mov	r4, r2
 800431e:	d510      	bpl.n	8004342 <_svfiprintf_r+0x36>
 8004320:	690b      	ldr	r3, [r1, #16]
 8004322:	b973      	cbnz	r3, 8004342 <_svfiprintf_r+0x36>
 8004324:	2140      	movs	r1, #64	@ 0x40
 8004326:	f7ff ff09 	bl	800413c <_malloc_r>
 800432a:	6028      	str	r0, [r5, #0]
 800432c:	6128      	str	r0, [r5, #16]
 800432e:	b930      	cbnz	r0, 800433e <_svfiprintf_r+0x32>
 8004330:	230c      	movs	r3, #12
 8004332:	603b      	str	r3, [r7, #0]
 8004334:	f04f 30ff 	mov.w	r0, #4294967295
 8004338:	b01d      	add	sp, #116	@ 0x74
 800433a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800433e:	2340      	movs	r3, #64	@ 0x40
 8004340:	616b      	str	r3, [r5, #20]
 8004342:	2300      	movs	r3, #0
 8004344:	9309      	str	r3, [sp, #36]	@ 0x24
 8004346:	2320      	movs	r3, #32
 8004348:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800434c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004350:	2330      	movs	r3, #48	@ 0x30
 8004352:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80044f0 <_svfiprintf_r+0x1e4>
 8004356:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800435a:	f04f 0901 	mov.w	r9, #1
 800435e:	4623      	mov	r3, r4
 8004360:	469a      	mov	sl, r3
 8004362:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004366:	b10a      	cbz	r2, 800436c <_svfiprintf_r+0x60>
 8004368:	2a25      	cmp	r2, #37	@ 0x25
 800436a:	d1f9      	bne.n	8004360 <_svfiprintf_r+0x54>
 800436c:	ebba 0b04 	subs.w	fp, sl, r4
 8004370:	d00b      	beq.n	800438a <_svfiprintf_r+0x7e>
 8004372:	465b      	mov	r3, fp
 8004374:	4622      	mov	r2, r4
 8004376:	4629      	mov	r1, r5
 8004378:	4638      	mov	r0, r7
 800437a:	f7ff ff6b 	bl	8004254 <__ssputs_r>
 800437e:	3001      	adds	r0, #1
 8004380:	f000 80a7 	beq.w	80044d2 <_svfiprintf_r+0x1c6>
 8004384:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004386:	445a      	add	r2, fp
 8004388:	9209      	str	r2, [sp, #36]	@ 0x24
 800438a:	f89a 3000 	ldrb.w	r3, [sl]
 800438e:	2b00      	cmp	r3, #0
 8004390:	f000 809f 	beq.w	80044d2 <_svfiprintf_r+0x1c6>
 8004394:	2300      	movs	r3, #0
 8004396:	f04f 32ff 	mov.w	r2, #4294967295
 800439a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800439e:	f10a 0a01 	add.w	sl, sl, #1
 80043a2:	9304      	str	r3, [sp, #16]
 80043a4:	9307      	str	r3, [sp, #28]
 80043a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80043aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80043ac:	4654      	mov	r4, sl
 80043ae:	2205      	movs	r2, #5
 80043b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043b4:	484e      	ldr	r0, [pc, #312]	@ (80044f0 <_svfiprintf_r+0x1e4>)
 80043b6:	f7fb ff2b 	bl	8000210 <memchr>
 80043ba:	9a04      	ldr	r2, [sp, #16]
 80043bc:	b9d8      	cbnz	r0, 80043f6 <_svfiprintf_r+0xea>
 80043be:	06d0      	lsls	r0, r2, #27
 80043c0:	bf44      	itt	mi
 80043c2:	2320      	movmi	r3, #32
 80043c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80043c8:	0711      	lsls	r1, r2, #28
 80043ca:	bf44      	itt	mi
 80043cc:	232b      	movmi	r3, #43	@ 0x2b
 80043ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80043d2:	f89a 3000 	ldrb.w	r3, [sl]
 80043d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80043d8:	d015      	beq.n	8004406 <_svfiprintf_r+0xfa>
 80043da:	9a07      	ldr	r2, [sp, #28]
 80043dc:	4654      	mov	r4, sl
 80043de:	2000      	movs	r0, #0
 80043e0:	f04f 0c0a 	mov.w	ip, #10
 80043e4:	4621      	mov	r1, r4
 80043e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043ea:	3b30      	subs	r3, #48	@ 0x30
 80043ec:	2b09      	cmp	r3, #9
 80043ee:	d94b      	bls.n	8004488 <_svfiprintf_r+0x17c>
 80043f0:	b1b0      	cbz	r0, 8004420 <_svfiprintf_r+0x114>
 80043f2:	9207      	str	r2, [sp, #28]
 80043f4:	e014      	b.n	8004420 <_svfiprintf_r+0x114>
 80043f6:	eba0 0308 	sub.w	r3, r0, r8
 80043fa:	fa09 f303 	lsl.w	r3, r9, r3
 80043fe:	4313      	orrs	r3, r2
 8004400:	9304      	str	r3, [sp, #16]
 8004402:	46a2      	mov	sl, r4
 8004404:	e7d2      	b.n	80043ac <_svfiprintf_r+0xa0>
 8004406:	9b03      	ldr	r3, [sp, #12]
 8004408:	1d19      	adds	r1, r3, #4
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	9103      	str	r1, [sp, #12]
 800440e:	2b00      	cmp	r3, #0
 8004410:	bfbb      	ittet	lt
 8004412:	425b      	neglt	r3, r3
 8004414:	f042 0202 	orrlt.w	r2, r2, #2
 8004418:	9307      	strge	r3, [sp, #28]
 800441a:	9307      	strlt	r3, [sp, #28]
 800441c:	bfb8      	it	lt
 800441e:	9204      	strlt	r2, [sp, #16]
 8004420:	7823      	ldrb	r3, [r4, #0]
 8004422:	2b2e      	cmp	r3, #46	@ 0x2e
 8004424:	d10a      	bne.n	800443c <_svfiprintf_r+0x130>
 8004426:	7863      	ldrb	r3, [r4, #1]
 8004428:	2b2a      	cmp	r3, #42	@ 0x2a
 800442a:	d132      	bne.n	8004492 <_svfiprintf_r+0x186>
 800442c:	9b03      	ldr	r3, [sp, #12]
 800442e:	1d1a      	adds	r2, r3, #4
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	9203      	str	r2, [sp, #12]
 8004434:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004438:	3402      	adds	r4, #2
 800443a:	9305      	str	r3, [sp, #20]
 800443c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004500 <_svfiprintf_r+0x1f4>
 8004440:	7821      	ldrb	r1, [r4, #0]
 8004442:	2203      	movs	r2, #3
 8004444:	4650      	mov	r0, sl
 8004446:	f7fb fee3 	bl	8000210 <memchr>
 800444a:	b138      	cbz	r0, 800445c <_svfiprintf_r+0x150>
 800444c:	9b04      	ldr	r3, [sp, #16]
 800444e:	eba0 000a 	sub.w	r0, r0, sl
 8004452:	2240      	movs	r2, #64	@ 0x40
 8004454:	4082      	lsls	r2, r0
 8004456:	4313      	orrs	r3, r2
 8004458:	3401      	adds	r4, #1
 800445a:	9304      	str	r3, [sp, #16]
 800445c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004460:	4824      	ldr	r0, [pc, #144]	@ (80044f4 <_svfiprintf_r+0x1e8>)
 8004462:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004466:	2206      	movs	r2, #6
 8004468:	f7fb fed2 	bl	8000210 <memchr>
 800446c:	2800      	cmp	r0, #0
 800446e:	d036      	beq.n	80044de <_svfiprintf_r+0x1d2>
 8004470:	4b21      	ldr	r3, [pc, #132]	@ (80044f8 <_svfiprintf_r+0x1ec>)
 8004472:	bb1b      	cbnz	r3, 80044bc <_svfiprintf_r+0x1b0>
 8004474:	9b03      	ldr	r3, [sp, #12]
 8004476:	3307      	adds	r3, #7
 8004478:	f023 0307 	bic.w	r3, r3, #7
 800447c:	3308      	adds	r3, #8
 800447e:	9303      	str	r3, [sp, #12]
 8004480:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004482:	4433      	add	r3, r6
 8004484:	9309      	str	r3, [sp, #36]	@ 0x24
 8004486:	e76a      	b.n	800435e <_svfiprintf_r+0x52>
 8004488:	fb0c 3202 	mla	r2, ip, r2, r3
 800448c:	460c      	mov	r4, r1
 800448e:	2001      	movs	r0, #1
 8004490:	e7a8      	b.n	80043e4 <_svfiprintf_r+0xd8>
 8004492:	2300      	movs	r3, #0
 8004494:	3401      	adds	r4, #1
 8004496:	9305      	str	r3, [sp, #20]
 8004498:	4619      	mov	r1, r3
 800449a:	f04f 0c0a 	mov.w	ip, #10
 800449e:	4620      	mov	r0, r4
 80044a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044a4:	3a30      	subs	r2, #48	@ 0x30
 80044a6:	2a09      	cmp	r2, #9
 80044a8:	d903      	bls.n	80044b2 <_svfiprintf_r+0x1a6>
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d0c6      	beq.n	800443c <_svfiprintf_r+0x130>
 80044ae:	9105      	str	r1, [sp, #20]
 80044b0:	e7c4      	b.n	800443c <_svfiprintf_r+0x130>
 80044b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80044b6:	4604      	mov	r4, r0
 80044b8:	2301      	movs	r3, #1
 80044ba:	e7f0      	b.n	800449e <_svfiprintf_r+0x192>
 80044bc:	ab03      	add	r3, sp, #12
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	462a      	mov	r2, r5
 80044c2:	4b0e      	ldr	r3, [pc, #56]	@ (80044fc <_svfiprintf_r+0x1f0>)
 80044c4:	a904      	add	r1, sp, #16
 80044c6:	4638      	mov	r0, r7
 80044c8:	f3af 8000 	nop.w
 80044cc:	1c42      	adds	r2, r0, #1
 80044ce:	4606      	mov	r6, r0
 80044d0:	d1d6      	bne.n	8004480 <_svfiprintf_r+0x174>
 80044d2:	89ab      	ldrh	r3, [r5, #12]
 80044d4:	065b      	lsls	r3, r3, #25
 80044d6:	f53f af2d 	bmi.w	8004334 <_svfiprintf_r+0x28>
 80044da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80044dc:	e72c      	b.n	8004338 <_svfiprintf_r+0x2c>
 80044de:	ab03      	add	r3, sp, #12
 80044e0:	9300      	str	r3, [sp, #0]
 80044e2:	462a      	mov	r2, r5
 80044e4:	4b05      	ldr	r3, [pc, #20]	@ (80044fc <_svfiprintf_r+0x1f0>)
 80044e6:	a904      	add	r1, sp, #16
 80044e8:	4638      	mov	r0, r7
 80044ea:	f000 f879 	bl	80045e0 <_printf_i>
 80044ee:	e7ed      	b.n	80044cc <_svfiprintf_r+0x1c0>
 80044f0:	080059a0 	.word	0x080059a0
 80044f4:	080059aa 	.word	0x080059aa
 80044f8:	00000000 	.word	0x00000000
 80044fc:	08004255 	.word	0x08004255
 8004500:	080059a6 	.word	0x080059a6

08004504 <_printf_common>:
 8004504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004508:	4616      	mov	r6, r2
 800450a:	4698      	mov	r8, r3
 800450c:	688a      	ldr	r2, [r1, #8]
 800450e:	690b      	ldr	r3, [r1, #16]
 8004510:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004514:	4293      	cmp	r3, r2
 8004516:	bfb8      	it	lt
 8004518:	4613      	movlt	r3, r2
 800451a:	6033      	str	r3, [r6, #0]
 800451c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004520:	4607      	mov	r7, r0
 8004522:	460c      	mov	r4, r1
 8004524:	b10a      	cbz	r2, 800452a <_printf_common+0x26>
 8004526:	3301      	adds	r3, #1
 8004528:	6033      	str	r3, [r6, #0]
 800452a:	6823      	ldr	r3, [r4, #0]
 800452c:	0699      	lsls	r1, r3, #26
 800452e:	bf42      	ittt	mi
 8004530:	6833      	ldrmi	r3, [r6, #0]
 8004532:	3302      	addmi	r3, #2
 8004534:	6033      	strmi	r3, [r6, #0]
 8004536:	6825      	ldr	r5, [r4, #0]
 8004538:	f015 0506 	ands.w	r5, r5, #6
 800453c:	d106      	bne.n	800454c <_printf_common+0x48>
 800453e:	f104 0a19 	add.w	sl, r4, #25
 8004542:	68e3      	ldr	r3, [r4, #12]
 8004544:	6832      	ldr	r2, [r6, #0]
 8004546:	1a9b      	subs	r3, r3, r2
 8004548:	42ab      	cmp	r3, r5
 800454a:	dc26      	bgt.n	800459a <_printf_common+0x96>
 800454c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004550:	6822      	ldr	r2, [r4, #0]
 8004552:	3b00      	subs	r3, #0
 8004554:	bf18      	it	ne
 8004556:	2301      	movne	r3, #1
 8004558:	0692      	lsls	r2, r2, #26
 800455a:	d42b      	bmi.n	80045b4 <_printf_common+0xb0>
 800455c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004560:	4641      	mov	r1, r8
 8004562:	4638      	mov	r0, r7
 8004564:	47c8      	blx	r9
 8004566:	3001      	adds	r0, #1
 8004568:	d01e      	beq.n	80045a8 <_printf_common+0xa4>
 800456a:	6823      	ldr	r3, [r4, #0]
 800456c:	6922      	ldr	r2, [r4, #16]
 800456e:	f003 0306 	and.w	r3, r3, #6
 8004572:	2b04      	cmp	r3, #4
 8004574:	bf02      	ittt	eq
 8004576:	68e5      	ldreq	r5, [r4, #12]
 8004578:	6833      	ldreq	r3, [r6, #0]
 800457a:	1aed      	subeq	r5, r5, r3
 800457c:	68a3      	ldr	r3, [r4, #8]
 800457e:	bf0c      	ite	eq
 8004580:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004584:	2500      	movne	r5, #0
 8004586:	4293      	cmp	r3, r2
 8004588:	bfc4      	itt	gt
 800458a:	1a9b      	subgt	r3, r3, r2
 800458c:	18ed      	addgt	r5, r5, r3
 800458e:	2600      	movs	r6, #0
 8004590:	341a      	adds	r4, #26
 8004592:	42b5      	cmp	r5, r6
 8004594:	d11a      	bne.n	80045cc <_printf_common+0xc8>
 8004596:	2000      	movs	r0, #0
 8004598:	e008      	b.n	80045ac <_printf_common+0xa8>
 800459a:	2301      	movs	r3, #1
 800459c:	4652      	mov	r2, sl
 800459e:	4641      	mov	r1, r8
 80045a0:	4638      	mov	r0, r7
 80045a2:	47c8      	blx	r9
 80045a4:	3001      	adds	r0, #1
 80045a6:	d103      	bne.n	80045b0 <_printf_common+0xac>
 80045a8:	f04f 30ff 	mov.w	r0, #4294967295
 80045ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045b0:	3501      	adds	r5, #1
 80045b2:	e7c6      	b.n	8004542 <_printf_common+0x3e>
 80045b4:	18e1      	adds	r1, r4, r3
 80045b6:	1c5a      	adds	r2, r3, #1
 80045b8:	2030      	movs	r0, #48	@ 0x30
 80045ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80045be:	4422      	add	r2, r4
 80045c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80045c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80045c8:	3302      	adds	r3, #2
 80045ca:	e7c7      	b.n	800455c <_printf_common+0x58>
 80045cc:	2301      	movs	r3, #1
 80045ce:	4622      	mov	r2, r4
 80045d0:	4641      	mov	r1, r8
 80045d2:	4638      	mov	r0, r7
 80045d4:	47c8      	blx	r9
 80045d6:	3001      	adds	r0, #1
 80045d8:	d0e6      	beq.n	80045a8 <_printf_common+0xa4>
 80045da:	3601      	adds	r6, #1
 80045dc:	e7d9      	b.n	8004592 <_printf_common+0x8e>
	...

080045e0 <_printf_i>:
 80045e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045e4:	7e0f      	ldrb	r7, [r1, #24]
 80045e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80045e8:	2f78      	cmp	r7, #120	@ 0x78
 80045ea:	4691      	mov	r9, r2
 80045ec:	4680      	mov	r8, r0
 80045ee:	460c      	mov	r4, r1
 80045f0:	469a      	mov	sl, r3
 80045f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80045f6:	d807      	bhi.n	8004608 <_printf_i+0x28>
 80045f8:	2f62      	cmp	r7, #98	@ 0x62
 80045fa:	d80a      	bhi.n	8004612 <_printf_i+0x32>
 80045fc:	2f00      	cmp	r7, #0
 80045fe:	f000 80d2 	beq.w	80047a6 <_printf_i+0x1c6>
 8004602:	2f58      	cmp	r7, #88	@ 0x58
 8004604:	f000 80b9 	beq.w	800477a <_printf_i+0x19a>
 8004608:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800460c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004610:	e03a      	b.n	8004688 <_printf_i+0xa8>
 8004612:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004616:	2b15      	cmp	r3, #21
 8004618:	d8f6      	bhi.n	8004608 <_printf_i+0x28>
 800461a:	a101      	add	r1, pc, #4	@ (adr r1, 8004620 <_printf_i+0x40>)
 800461c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004620:	08004679 	.word	0x08004679
 8004624:	0800468d 	.word	0x0800468d
 8004628:	08004609 	.word	0x08004609
 800462c:	08004609 	.word	0x08004609
 8004630:	08004609 	.word	0x08004609
 8004634:	08004609 	.word	0x08004609
 8004638:	0800468d 	.word	0x0800468d
 800463c:	08004609 	.word	0x08004609
 8004640:	08004609 	.word	0x08004609
 8004644:	08004609 	.word	0x08004609
 8004648:	08004609 	.word	0x08004609
 800464c:	0800478d 	.word	0x0800478d
 8004650:	080046b7 	.word	0x080046b7
 8004654:	08004747 	.word	0x08004747
 8004658:	08004609 	.word	0x08004609
 800465c:	08004609 	.word	0x08004609
 8004660:	080047af 	.word	0x080047af
 8004664:	08004609 	.word	0x08004609
 8004668:	080046b7 	.word	0x080046b7
 800466c:	08004609 	.word	0x08004609
 8004670:	08004609 	.word	0x08004609
 8004674:	0800474f 	.word	0x0800474f
 8004678:	6833      	ldr	r3, [r6, #0]
 800467a:	1d1a      	adds	r2, r3, #4
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6032      	str	r2, [r6, #0]
 8004680:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004684:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004688:	2301      	movs	r3, #1
 800468a:	e09d      	b.n	80047c8 <_printf_i+0x1e8>
 800468c:	6833      	ldr	r3, [r6, #0]
 800468e:	6820      	ldr	r0, [r4, #0]
 8004690:	1d19      	adds	r1, r3, #4
 8004692:	6031      	str	r1, [r6, #0]
 8004694:	0606      	lsls	r6, r0, #24
 8004696:	d501      	bpl.n	800469c <_printf_i+0xbc>
 8004698:	681d      	ldr	r5, [r3, #0]
 800469a:	e003      	b.n	80046a4 <_printf_i+0xc4>
 800469c:	0645      	lsls	r5, r0, #25
 800469e:	d5fb      	bpl.n	8004698 <_printf_i+0xb8>
 80046a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80046a4:	2d00      	cmp	r5, #0
 80046a6:	da03      	bge.n	80046b0 <_printf_i+0xd0>
 80046a8:	232d      	movs	r3, #45	@ 0x2d
 80046aa:	426d      	negs	r5, r5
 80046ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046b0:	4859      	ldr	r0, [pc, #356]	@ (8004818 <_printf_i+0x238>)
 80046b2:	230a      	movs	r3, #10
 80046b4:	e011      	b.n	80046da <_printf_i+0xfa>
 80046b6:	6821      	ldr	r1, [r4, #0]
 80046b8:	6833      	ldr	r3, [r6, #0]
 80046ba:	0608      	lsls	r0, r1, #24
 80046bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80046c0:	d402      	bmi.n	80046c8 <_printf_i+0xe8>
 80046c2:	0649      	lsls	r1, r1, #25
 80046c4:	bf48      	it	mi
 80046c6:	b2ad      	uxthmi	r5, r5
 80046c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80046ca:	4853      	ldr	r0, [pc, #332]	@ (8004818 <_printf_i+0x238>)
 80046cc:	6033      	str	r3, [r6, #0]
 80046ce:	bf14      	ite	ne
 80046d0:	230a      	movne	r3, #10
 80046d2:	2308      	moveq	r3, #8
 80046d4:	2100      	movs	r1, #0
 80046d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80046da:	6866      	ldr	r6, [r4, #4]
 80046dc:	60a6      	str	r6, [r4, #8]
 80046de:	2e00      	cmp	r6, #0
 80046e0:	bfa2      	ittt	ge
 80046e2:	6821      	ldrge	r1, [r4, #0]
 80046e4:	f021 0104 	bicge.w	r1, r1, #4
 80046e8:	6021      	strge	r1, [r4, #0]
 80046ea:	b90d      	cbnz	r5, 80046f0 <_printf_i+0x110>
 80046ec:	2e00      	cmp	r6, #0
 80046ee:	d04b      	beq.n	8004788 <_printf_i+0x1a8>
 80046f0:	4616      	mov	r6, r2
 80046f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80046f6:	fb03 5711 	mls	r7, r3, r1, r5
 80046fa:	5dc7      	ldrb	r7, [r0, r7]
 80046fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004700:	462f      	mov	r7, r5
 8004702:	42bb      	cmp	r3, r7
 8004704:	460d      	mov	r5, r1
 8004706:	d9f4      	bls.n	80046f2 <_printf_i+0x112>
 8004708:	2b08      	cmp	r3, #8
 800470a:	d10b      	bne.n	8004724 <_printf_i+0x144>
 800470c:	6823      	ldr	r3, [r4, #0]
 800470e:	07df      	lsls	r7, r3, #31
 8004710:	d508      	bpl.n	8004724 <_printf_i+0x144>
 8004712:	6923      	ldr	r3, [r4, #16]
 8004714:	6861      	ldr	r1, [r4, #4]
 8004716:	4299      	cmp	r1, r3
 8004718:	bfde      	ittt	le
 800471a:	2330      	movle	r3, #48	@ 0x30
 800471c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004720:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004724:	1b92      	subs	r2, r2, r6
 8004726:	6122      	str	r2, [r4, #16]
 8004728:	f8cd a000 	str.w	sl, [sp]
 800472c:	464b      	mov	r3, r9
 800472e:	aa03      	add	r2, sp, #12
 8004730:	4621      	mov	r1, r4
 8004732:	4640      	mov	r0, r8
 8004734:	f7ff fee6 	bl	8004504 <_printf_common>
 8004738:	3001      	adds	r0, #1
 800473a:	d14a      	bne.n	80047d2 <_printf_i+0x1f2>
 800473c:	f04f 30ff 	mov.w	r0, #4294967295
 8004740:	b004      	add	sp, #16
 8004742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004746:	6823      	ldr	r3, [r4, #0]
 8004748:	f043 0320 	orr.w	r3, r3, #32
 800474c:	6023      	str	r3, [r4, #0]
 800474e:	4833      	ldr	r0, [pc, #204]	@ (800481c <_printf_i+0x23c>)
 8004750:	2778      	movs	r7, #120	@ 0x78
 8004752:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004756:	6823      	ldr	r3, [r4, #0]
 8004758:	6831      	ldr	r1, [r6, #0]
 800475a:	061f      	lsls	r7, r3, #24
 800475c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004760:	d402      	bmi.n	8004768 <_printf_i+0x188>
 8004762:	065f      	lsls	r7, r3, #25
 8004764:	bf48      	it	mi
 8004766:	b2ad      	uxthmi	r5, r5
 8004768:	6031      	str	r1, [r6, #0]
 800476a:	07d9      	lsls	r1, r3, #31
 800476c:	bf44      	itt	mi
 800476e:	f043 0320 	orrmi.w	r3, r3, #32
 8004772:	6023      	strmi	r3, [r4, #0]
 8004774:	b11d      	cbz	r5, 800477e <_printf_i+0x19e>
 8004776:	2310      	movs	r3, #16
 8004778:	e7ac      	b.n	80046d4 <_printf_i+0xf4>
 800477a:	4827      	ldr	r0, [pc, #156]	@ (8004818 <_printf_i+0x238>)
 800477c:	e7e9      	b.n	8004752 <_printf_i+0x172>
 800477e:	6823      	ldr	r3, [r4, #0]
 8004780:	f023 0320 	bic.w	r3, r3, #32
 8004784:	6023      	str	r3, [r4, #0]
 8004786:	e7f6      	b.n	8004776 <_printf_i+0x196>
 8004788:	4616      	mov	r6, r2
 800478a:	e7bd      	b.n	8004708 <_printf_i+0x128>
 800478c:	6833      	ldr	r3, [r6, #0]
 800478e:	6825      	ldr	r5, [r4, #0]
 8004790:	6961      	ldr	r1, [r4, #20]
 8004792:	1d18      	adds	r0, r3, #4
 8004794:	6030      	str	r0, [r6, #0]
 8004796:	062e      	lsls	r6, r5, #24
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	d501      	bpl.n	80047a0 <_printf_i+0x1c0>
 800479c:	6019      	str	r1, [r3, #0]
 800479e:	e002      	b.n	80047a6 <_printf_i+0x1c6>
 80047a0:	0668      	lsls	r0, r5, #25
 80047a2:	d5fb      	bpl.n	800479c <_printf_i+0x1bc>
 80047a4:	8019      	strh	r1, [r3, #0]
 80047a6:	2300      	movs	r3, #0
 80047a8:	6123      	str	r3, [r4, #16]
 80047aa:	4616      	mov	r6, r2
 80047ac:	e7bc      	b.n	8004728 <_printf_i+0x148>
 80047ae:	6833      	ldr	r3, [r6, #0]
 80047b0:	1d1a      	adds	r2, r3, #4
 80047b2:	6032      	str	r2, [r6, #0]
 80047b4:	681e      	ldr	r6, [r3, #0]
 80047b6:	6862      	ldr	r2, [r4, #4]
 80047b8:	2100      	movs	r1, #0
 80047ba:	4630      	mov	r0, r6
 80047bc:	f7fb fd28 	bl	8000210 <memchr>
 80047c0:	b108      	cbz	r0, 80047c6 <_printf_i+0x1e6>
 80047c2:	1b80      	subs	r0, r0, r6
 80047c4:	6060      	str	r0, [r4, #4]
 80047c6:	6863      	ldr	r3, [r4, #4]
 80047c8:	6123      	str	r3, [r4, #16]
 80047ca:	2300      	movs	r3, #0
 80047cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047d0:	e7aa      	b.n	8004728 <_printf_i+0x148>
 80047d2:	6923      	ldr	r3, [r4, #16]
 80047d4:	4632      	mov	r2, r6
 80047d6:	4649      	mov	r1, r9
 80047d8:	4640      	mov	r0, r8
 80047da:	47d0      	blx	sl
 80047dc:	3001      	adds	r0, #1
 80047de:	d0ad      	beq.n	800473c <_printf_i+0x15c>
 80047e0:	6823      	ldr	r3, [r4, #0]
 80047e2:	079b      	lsls	r3, r3, #30
 80047e4:	d413      	bmi.n	800480e <_printf_i+0x22e>
 80047e6:	68e0      	ldr	r0, [r4, #12]
 80047e8:	9b03      	ldr	r3, [sp, #12]
 80047ea:	4298      	cmp	r0, r3
 80047ec:	bfb8      	it	lt
 80047ee:	4618      	movlt	r0, r3
 80047f0:	e7a6      	b.n	8004740 <_printf_i+0x160>
 80047f2:	2301      	movs	r3, #1
 80047f4:	4632      	mov	r2, r6
 80047f6:	4649      	mov	r1, r9
 80047f8:	4640      	mov	r0, r8
 80047fa:	47d0      	blx	sl
 80047fc:	3001      	adds	r0, #1
 80047fe:	d09d      	beq.n	800473c <_printf_i+0x15c>
 8004800:	3501      	adds	r5, #1
 8004802:	68e3      	ldr	r3, [r4, #12]
 8004804:	9903      	ldr	r1, [sp, #12]
 8004806:	1a5b      	subs	r3, r3, r1
 8004808:	42ab      	cmp	r3, r5
 800480a:	dcf2      	bgt.n	80047f2 <_printf_i+0x212>
 800480c:	e7eb      	b.n	80047e6 <_printf_i+0x206>
 800480e:	2500      	movs	r5, #0
 8004810:	f104 0619 	add.w	r6, r4, #25
 8004814:	e7f5      	b.n	8004802 <_printf_i+0x222>
 8004816:	bf00      	nop
 8004818:	080059b1 	.word	0x080059b1
 800481c:	080059c2 	.word	0x080059c2

08004820 <memmove>:
 8004820:	4288      	cmp	r0, r1
 8004822:	b510      	push	{r4, lr}
 8004824:	eb01 0402 	add.w	r4, r1, r2
 8004828:	d902      	bls.n	8004830 <memmove+0x10>
 800482a:	4284      	cmp	r4, r0
 800482c:	4623      	mov	r3, r4
 800482e:	d807      	bhi.n	8004840 <memmove+0x20>
 8004830:	1e43      	subs	r3, r0, #1
 8004832:	42a1      	cmp	r1, r4
 8004834:	d008      	beq.n	8004848 <memmove+0x28>
 8004836:	f811 2b01 	ldrb.w	r2, [r1], #1
 800483a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800483e:	e7f8      	b.n	8004832 <memmove+0x12>
 8004840:	4402      	add	r2, r0
 8004842:	4601      	mov	r1, r0
 8004844:	428a      	cmp	r2, r1
 8004846:	d100      	bne.n	800484a <memmove+0x2a>
 8004848:	bd10      	pop	{r4, pc}
 800484a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800484e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004852:	e7f7      	b.n	8004844 <memmove+0x24>

08004854 <_sbrk_r>:
 8004854:	b538      	push	{r3, r4, r5, lr}
 8004856:	4d06      	ldr	r5, [pc, #24]	@ (8004870 <_sbrk_r+0x1c>)
 8004858:	2300      	movs	r3, #0
 800485a:	4604      	mov	r4, r0
 800485c:	4608      	mov	r0, r1
 800485e:	602b      	str	r3, [r5, #0]
 8004860:	f7fd f92e 	bl	8001ac0 <_sbrk>
 8004864:	1c43      	adds	r3, r0, #1
 8004866:	d102      	bne.n	800486e <_sbrk_r+0x1a>
 8004868:	682b      	ldr	r3, [r5, #0]
 800486a:	b103      	cbz	r3, 800486e <_sbrk_r+0x1a>
 800486c:	6023      	str	r3, [r4, #0]
 800486e:	bd38      	pop	{r3, r4, r5, pc}
 8004870:	200002b0 	.word	0x200002b0

08004874 <memcpy>:
 8004874:	440a      	add	r2, r1
 8004876:	4291      	cmp	r1, r2
 8004878:	f100 33ff 	add.w	r3, r0, #4294967295
 800487c:	d100      	bne.n	8004880 <memcpy+0xc>
 800487e:	4770      	bx	lr
 8004880:	b510      	push	{r4, lr}
 8004882:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004886:	f803 4f01 	strb.w	r4, [r3, #1]!
 800488a:	4291      	cmp	r1, r2
 800488c:	d1f9      	bne.n	8004882 <memcpy+0xe>
 800488e:	bd10      	pop	{r4, pc}

08004890 <_realloc_r>:
 8004890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004894:	4680      	mov	r8, r0
 8004896:	4615      	mov	r5, r2
 8004898:	460c      	mov	r4, r1
 800489a:	b921      	cbnz	r1, 80048a6 <_realloc_r+0x16>
 800489c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048a0:	4611      	mov	r1, r2
 80048a2:	f7ff bc4b 	b.w	800413c <_malloc_r>
 80048a6:	b92a      	cbnz	r2, 80048b4 <_realloc_r+0x24>
 80048a8:	f7ff fbdc 	bl	8004064 <_free_r>
 80048ac:	2400      	movs	r4, #0
 80048ae:	4620      	mov	r0, r4
 80048b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048b4:	f000 f81a 	bl	80048ec <_malloc_usable_size_r>
 80048b8:	4285      	cmp	r5, r0
 80048ba:	4606      	mov	r6, r0
 80048bc:	d802      	bhi.n	80048c4 <_realloc_r+0x34>
 80048be:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80048c2:	d8f4      	bhi.n	80048ae <_realloc_r+0x1e>
 80048c4:	4629      	mov	r1, r5
 80048c6:	4640      	mov	r0, r8
 80048c8:	f7ff fc38 	bl	800413c <_malloc_r>
 80048cc:	4607      	mov	r7, r0
 80048ce:	2800      	cmp	r0, #0
 80048d0:	d0ec      	beq.n	80048ac <_realloc_r+0x1c>
 80048d2:	42b5      	cmp	r5, r6
 80048d4:	462a      	mov	r2, r5
 80048d6:	4621      	mov	r1, r4
 80048d8:	bf28      	it	cs
 80048da:	4632      	movcs	r2, r6
 80048dc:	f7ff ffca 	bl	8004874 <memcpy>
 80048e0:	4621      	mov	r1, r4
 80048e2:	4640      	mov	r0, r8
 80048e4:	f7ff fbbe 	bl	8004064 <_free_r>
 80048e8:	463c      	mov	r4, r7
 80048ea:	e7e0      	b.n	80048ae <_realloc_r+0x1e>

080048ec <_malloc_usable_size_r>:
 80048ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048f0:	1f18      	subs	r0, r3, #4
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	bfbc      	itt	lt
 80048f6:	580b      	ldrlt	r3, [r1, r0]
 80048f8:	18c0      	addlt	r0, r0, r3
 80048fa:	4770      	bx	lr
 80048fc:	0000      	movs	r0, r0
	...

08004900 <sin>:
 8004900:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004902:	ec53 2b10 	vmov	r2, r3, d0
 8004906:	4826      	ldr	r0, [pc, #152]	@ (80049a0 <sin+0xa0>)
 8004908:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800490c:	4281      	cmp	r1, r0
 800490e:	d807      	bhi.n	8004920 <sin+0x20>
 8004910:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8004998 <sin+0x98>
 8004914:	2000      	movs	r0, #0
 8004916:	b005      	add	sp, #20
 8004918:	f85d eb04 	ldr.w	lr, [sp], #4
 800491c:	f000 b90c 	b.w	8004b38 <__kernel_sin>
 8004920:	4820      	ldr	r0, [pc, #128]	@ (80049a4 <sin+0xa4>)
 8004922:	4281      	cmp	r1, r0
 8004924:	d908      	bls.n	8004938 <sin+0x38>
 8004926:	4610      	mov	r0, r2
 8004928:	4619      	mov	r1, r3
 800492a:	f7fb fdef 	bl	800050c <__aeabi_dsub>
 800492e:	ec41 0b10 	vmov	d0, r0, r1
 8004932:	b005      	add	sp, #20
 8004934:	f85d fb04 	ldr.w	pc, [sp], #4
 8004938:	4668      	mov	r0, sp
 800493a:	f000 f9b9 	bl	8004cb0 <__ieee754_rem_pio2>
 800493e:	f000 0003 	and.w	r0, r0, #3
 8004942:	2801      	cmp	r0, #1
 8004944:	d00c      	beq.n	8004960 <sin+0x60>
 8004946:	2802      	cmp	r0, #2
 8004948:	d011      	beq.n	800496e <sin+0x6e>
 800494a:	b9e8      	cbnz	r0, 8004988 <sin+0x88>
 800494c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004950:	ed9d 0b00 	vldr	d0, [sp]
 8004954:	2001      	movs	r0, #1
 8004956:	f000 f8ef 	bl	8004b38 <__kernel_sin>
 800495a:	ec51 0b10 	vmov	r0, r1, d0
 800495e:	e7e6      	b.n	800492e <sin+0x2e>
 8004960:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004964:	ed9d 0b00 	vldr	d0, [sp]
 8004968:	f000 f81e 	bl	80049a8 <__kernel_cos>
 800496c:	e7f5      	b.n	800495a <sin+0x5a>
 800496e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004972:	ed9d 0b00 	vldr	d0, [sp]
 8004976:	2001      	movs	r0, #1
 8004978:	f000 f8de 	bl	8004b38 <__kernel_sin>
 800497c:	ec53 2b10 	vmov	r2, r3, d0
 8004980:	4610      	mov	r0, r2
 8004982:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8004986:	e7d2      	b.n	800492e <sin+0x2e>
 8004988:	ed9d 1b02 	vldr	d1, [sp, #8]
 800498c:	ed9d 0b00 	vldr	d0, [sp]
 8004990:	f000 f80a 	bl	80049a8 <__kernel_cos>
 8004994:	e7f2      	b.n	800497c <sin+0x7c>
 8004996:	bf00      	nop
	...
 80049a0:	3fe921fb 	.word	0x3fe921fb
 80049a4:	7fefffff 	.word	0x7fefffff

080049a8 <__kernel_cos>:
 80049a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ac:	ec57 6b10 	vmov	r6, r7, d0
 80049b0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80049b4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80049b8:	ed8d 1b00 	vstr	d1, [sp]
 80049bc:	d206      	bcs.n	80049cc <__kernel_cos+0x24>
 80049be:	4630      	mov	r0, r6
 80049c0:	4639      	mov	r1, r7
 80049c2:	f7fb ffe3 	bl	800098c <__aeabi_d2iz>
 80049c6:	2800      	cmp	r0, #0
 80049c8:	f000 8088 	beq.w	8004adc <__kernel_cos+0x134>
 80049cc:	4632      	mov	r2, r6
 80049ce:	463b      	mov	r3, r7
 80049d0:	4630      	mov	r0, r6
 80049d2:	4639      	mov	r1, r7
 80049d4:	f7fb fc6c 	bl	80002b0 <__aeabi_dmul>
 80049d8:	4b51      	ldr	r3, [pc, #324]	@ (8004b20 <__kernel_cos+0x178>)
 80049da:	2200      	movs	r2, #0
 80049dc:	4604      	mov	r4, r0
 80049de:	460d      	mov	r5, r1
 80049e0:	f7fb fc66 	bl	80002b0 <__aeabi_dmul>
 80049e4:	a340      	add	r3, pc, #256	@ (adr r3, 8004ae8 <__kernel_cos+0x140>)
 80049e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ea:	4682      	mov	sl, r0
 80049ec:	468b      	mov	fp, r1
 80049ee:	4620      	mov	r0, r4
 80049f0:	4629      	mov	r1, r5
 80049f2:	f7fb fc5d 	bl	80002b0 <__aeabi_dmul>
 80049f6:	a33e      	add	r3, pc, #248	@ (adr r3, 8004af0 <__kernel_cos+0x148>)
 80049f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fc:	f7fb fd88 	bl	8000510 <__adddf3>
 8004a00:	4622      	mov	r2, r4
 8004a02:	462b      	mov	r3, r5
 8004a04:	f7fb fc54 	bl	80002b0 <__aeabi_dmul>
 8004a08:	a33b      	add	r3, pc, #236	@ (adr r3, 8004af8 <__kernel_cos+0x150>)
 8004a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0e:	f7fb fd7d 	bl	800050c <__aeabi_dsub>
 8004a12:	4622      	mov	r2, r4
 8004a14:	462b      	mov	r3, r5
 8004a16:	f7fb fc4b 	bl	80002b0 <__aeabi_dmul>
 8004a1a:	a339      	add	r3, pc, #228	@ (adr r3, 8004b00 <__kernel_cos+0x158>)
 8004a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a20:	f7fb fd76 	bl	8000510 <__adddf3>
 8004a24:	4622      	mov	r2, r4
 8004a26:	462b      	mov	r3, r5
 8004a28:	f7fb fc42 	bl	80002b0 <__aeabi_dmul>
 8004a2c:	a336      	add	r3, pc, #216	@ (adr r3, 8004b08 <__kernel_cos+0x160>)
 8004a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a32:	f7fb fd6b 	bl	800050c <__aeabi_dsub>
 8004a36:	4622      	mov	r2, r4
 8004a38:	462b      	mov	r3, r5
 8004a3a:	f7fb fc39 	bl	80002b0 <__aeabi_dmul>
 8004a3e:	a334      	add	r3, pc, #208	@ (adr r3, 8004b10 <__kernel_cos+0x168>)
 8004a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a44:	f7fb fd64 	bl	8000510 <__adddf3>
 8004a48:	4622      	mov	r2, r4
 8004a4a:	462b      	mov	r3, r5
 8004a4c:	f7fb fc30 	bl	80002b0 <__aeabi_dmul>
 8004a50:	4622      	mov	r2, r4
 8004a52:	462b      	mov	r3, r5
 8004a54:	f7fb fc2c 	bl	80002b0 <__aeabi_dmul>
 8004a58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a5c:	4604      	mov	r4, r0
 8004a5e:	460d      	mov	r5, r1
 8004a60:	4630      	mov	r0, r6
 8004a62:	4639      	mov	r1, r7
 8004a64:	f7fb fc24 	bl	80002b0 <__aeabi_dmul>
 8004a68:	460b      	mov	r3, r1
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	4629      	mov	r1, r5
 8004a6e:	4620      	mov	r0, r4
 8004a70:	f7fb fd4c 	bl	800050c <__aeabi_dsub>
 8004a74:	4b2b      	ldr	r3, [pc, #172]	@ (8004b24 <__kernel_cos+0x17c>)
 8004a76:	4598      	cmp	r8, r3
 8004a78:	4606      	mov	r6, r0
 8004a7a:	460f      	mov	r7, r1
 8004a7c:	d810      	bhi.n	8004aa0 <__kernel_cos+0xf8>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	460b      	mov	r3, r1
 8004a82:	4650      	mov	r0, sl
 8004a84:	4659      	mov	r1, fp
 8004a86:	f7fb fd41 	bl	800050c <__aeabi_dsub>
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	4926      	ldr	r1, [pc, #152]	@ (8004b28 <__kernel_cos+0x180>)
 8004a8e:	4602      	mov	r2, r0
 8004a90:	2000      	movs	r0, #0
 8004a92:	f7fb fd3b 	bl	800050c <__aeabi_dsub>
 8004a96:	ec41 0b10 	vmov	d0, r0, r1
 8004a9a:	b003      	add	sp, #12
 8004a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aa0:	4b22      	ldr	r3, [pc, #136]	@ (8004b2c <__kernel_cos+0x184>)
 8004aa2:	4921      	ldr	r1, [pc, #132]	@ (8004b28 <__kernel_cos+0x180>)
 8004aa4:	4598      	cmp	r8, r3
 8004aa6:	bf8c      	ite	hi
 8004aa8:	4d21      	ldrhi	r5, [pc, #132]	@ (8004b30 <__kernel_cos+0x188>)
 8004aaa:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8004aae:	2400      	movs	r4, #0
 8004ab0:	4622      	mov	r2, r4
 8004ab2:	462b      	mov	r3, r5
 8004ab4:	2000      	movs	r0, #0
 8004ab6:	f7fb fd29 	bl	800050c <__aeabi_dsub>
 8004aba:	4622      	mov	r2, r4
 8004abc:	4680      	mov	r8, r0
 8004abe:	4689      	mov	r9, r1
 8004ac0:	462b      	mov	r3, r5
 8004ac2:	4650      	mov	r0, sl
 8004ac4:	4659      	mov	r1, fp
 8004ac6:	f7fb fd21 	bl	800050c <__aeabi_dsub>
 8004aca:	4632      	mov	r2, r6
 8004acc:	463b      	mov	r3, r7
 8004ace:	f7fb fd1d 	bl	800050c <__aeabi_dsub>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	4640      	mov	r0, r8
 8004ad8:	4649      	mov	r1, r9
 8004ada:	e7da      	b.n	8004a92 <__kernel_cos+0xea>
 8004adc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8004b18 <__kernel_cos+0x170>
 8004ae0:	e7db      	b.n	8004a9a <__kernel_cos+0xf2>
 8004ae2:	bf00      	nop
 8004ae4:	f3af 8000 	nop.w
 8004ae8:	be8838d4 	.word	0xbe8838d4
 8004aec:	bda8fae9 	.word	0xbda8fae9
 8004af0:	bdb4b1c4 	.word	0xbdb4b1c4
 8004af4:	3e21ee9e 	.word	0x3e21ee9e
 8004af8:	809c52ad 	.word	0x809c52ad
 8004afc:	3e927e4f 	.word	0x3e927e4f
 8004b00:	19cb1590 	.word	0x19cb1590
 8004b04:	3efa01a0 	.word	0x3efa01a0
 8004b08:	16c15177 	.word	0x16c15177
 8004b0c:	3f56c16c 	.word	0x3f56c16c
 8004b10:	5555554c 	.word	0x5555554c
 8004b14:	3fa55555 	.word	0x3fa55555
 8004b18:	00000000 	.word	0x00000000
 8004b1c:	3ff00000 	.word	0x3ff00000
 8004b20:	3fe00000 	.word	0x3fe00000
 8004b24:	3fd33332 	.word	0x3fd33332
 8004b28:	3ff00000 	.word	0x3ff00000
 8004b2c:	3fe90000 	.word	0x3fe90000
 8004b30:	3fd20000 	.word	0x3fd20000
 8004b34:	00000000 	.word	0x00000000

08004b38 <__kernel_sin>:
 8004b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b3c:	ec55 4b10 	vmov	r4, r5, d0
 8004b40:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8004b44:	b085      	sub	sp, #20
 8004b46:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8004b4a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8004b4e:	4680      	mov	r8, r0
 8004b50:	d205      	bcs.n	8004b5e <__kernel_sin+0x26>
 8004b52:	4620      	mov	r0, r4
 8004b54:	4629      	mov	r1, r5
 8004b56:	f7fb ff19 	bl	800098c <__aeabi_d2iz>
 8004b5a:	2800      	cmp	r0, #0
 8004b5c:	d052      	beq.n	8004c04 <__kernel_sin+0xcc>
 8004b5e:	4622      	mov	r2, r4
 8004b60:	462b      	mov	r3, r5
 8004b62:	4620      	mov	r0, r4
 8004b64:	4629      	mov	r1, r5
 8004b66:	f7fb fba3 	bl	80002b0 <__aeabi_dmul>
 8004b6a:	4682      	mov	sl, r0
 8004b6c:	468b      	mov	fp, r1
 8004b6e:	4602      	mov	r2, r0
 8004b70:	460b      	mov	r3, r1
 8004b72:	4620      	mov	r0, r4
 8004b74:	4629      	mov	r1, r5
 8004b76:	f7fb fb9b 	bl	80002b0 <__aeabi_dmul>
 8004b7a:	a342      	add	r3, pc, #264	@ (adr r3, 8004c84 <__kernel_sin+0x14c>)
 8004b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b80:	e9cd 0100 	strd	r0, r1, [sp]
 8004b84:	4650      	mov	r0, sl
 8004b86:	4659      	mov	r1, fp
 8004b88:	f7fb fb92 	bl	80002b0 <__aeabi_dmul>
 8004b8c:	a33f      	add	r3, pc, #252	@ (adr r3, 8004c8c <__kernel_sin+0x154>)
 8004b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b92:	f7fb fcbb 	bl	800050c <__aeabi_dsub>
 8004b96:	4652      	mov	r2, sl
 8004b98:	465b      	mov	r3, fp
 8004b9a:	f7fb fb89 	bl	80002b0 <__aeabi_dmul>
 8004b9e:	a33d      	add	r3, pc, #244	@ (adr r3, 8004c94 <__kernel_sin+0x15c>)
 8004ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba4:	f7fb fcb4 	bl	8000510 <__adddf3>
 8004ba8:	4652      	mov	r2, sl
 8004baa:	465b      	mov	r3, fp
 8004bac:	f7fb fb80 	bl	80002b0 <__aeabi_dmul>
 8004bb0:	a33a      	add	r3, pc, #232	@ (adr r3, 8004c9c <__kernel_sin+0x164>)
 8004bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb6:	f7fb fca9 	bl	800050c <__aeabi_dsub>
 8004bba:	4652      	mov	r2, sl
 8004bbc:	465b      	mov	r3, fp
 8004bbe:	f7fb fb77 	bl	80002b0 <__aeabi_dmul>
 8004bc2:	a338      	add	r3, pc, #224	@ (adr r3, 8004ca4 <__kernel_sin+0x16c>)
 8004bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc8:	f7fb fca2 	bl	8000510 <__adddf3>
 8004bcc:	4606      	mov	r6, r0
 8004bce:	460f      	mov	r7, r1
 8004bd0:	f1b8 0f00 	cmp.w	r8, #0
 8004bd4:	d11b      	bne.n	8004c0e <__kernel_sin+0xd6>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	460b      	mov	r3, r1
 8004bda:	4650      	mov	r0, sl
 8004bdc:	4659      	mov	r1, fp
 8004bde:	f7fb fb67 	bl	80002b0 <__aeabi_dmul>
 8004be2:	a325      	add	r3, pc, #148	@ (adr r3, 8004c78 <__kernel_sin+0x140>)
 8004be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be8:	f7fb fc90 	bl	800050c <__aeabi_dsub>
 8004bec:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004bf0:	f7fb fb5e 	bl	80002b0 <__aeabi_dmul>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	4620      	mov	r0, r4
 8004bfa:	4629      	mov	r1, r5
 8004bfc:	f7fb fc88 	bl	8000510 <__adddf3>
 8004c00:	4604      	mov	r4, r0
 8004c02:	460d      	mov	r5, r1
 8004c04:	ec45 4b10 	vmov	d0, r4, r5
 8004c08:	b005      	add	sp, #20
 8004c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c12:	4b1b      	ldr	r3, [pc, #108]	@ (8004c80 <__kernel_sin+0x148>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	f7fb fb4b 	bl	80002b0 <__aeabi_dmul>
 8004c1a:	4632      	mov	r2, r6
 8004c1c:	4680      	mov	r8, r0
 8004c1e:	4689      	mov	r9, r1
 8004c20:	463b      	mov	r3, r7
 8004c22:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004c26:	f7fb fb43 	bl	80002b0 <__aeabi_dmul>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	4640      	mov	r0, r8
 8004c30:	4649      	mov	r1, r9
 8004c32:	f7fb fc6b 	bl	800050c <__aeabi_dsub>
 8004c36:	4652      	mov	r2, sl
 8004c38:	465b      	mov	r3, fp
 8004c3a:	f7fb fb39 	bl	80002b0 <__aeabi_dmul>
 8004c3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c42:	f7fb fc63 	bl	800050c <__aeabi_dsub>
 8004c46:	a30c      	add	r3, pc, #48	@ (adr r3, 8004c78 <__kernel_sin+0x140>)
 8004c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4c:	4606      	mov	r6, r0
 8004c4e:	460f      	mov	r7, r1
 8004c50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004c54:	f7fb fb2c 	bl	80002b0 <__aeabi_dmul>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	4630      	mov	r0, r6
 8004c5e:	4639      	mov	r1, r7
 8004c60:	f7fb fc56 	bl	8000510 <__adddf3>
 8004c64:	4602      	mov	r2, r0
 8004c66:	460b      	mov	r3, r1
 8004c68:	4620      	mov	r0, r4
 8004c6a:	4629      	mov	r1, r5
 8004c6c:	f7fb fc4e 	bl	800050c <__aeabi_dsub>
 8004c70:	e7c6      	b.n	8004c00 <__kernel_sin+0xc8>
 8004c72:	bf00      	nop
 8004c74:	f3af 8000 	nop.w
 8004c78:	55555549 	.word	0x55555549
 8004c7c:	3fc55555 	.word	0x3fc55555
 8004c80:	3fe00000 	.word	0x3fe00000
 8004c84:	5acfd57c 	.word	0x5acfd57c
 8004c88:	3de5d93a 	.word	0x3de5d93a
 8004c8c:	8a2b9ceb 	.word	0x8a2b9ceb
 8004c90:	3e5ae5e6 	.word	0x3e5ae5e6
 8004c94:	57b1fe7d 	.word	0x57b1fe7d
 8004c98:	3ec71de3 	.word	0x3ec71de3
 8004c9c:	19c161d5 	.word	0x19c161d5
 8004ca0:	3f2a01a0 	.word	0x3f2a01a0
 8004ca4:	1110f8a6 	.word	0x1110f8a6
 8004ca8:	3f811111 	.word	0x3f811111
 8004cac:	00000000 	.word	0x00000000

08004cb0 <__ieee754_rem_pio2>:
 8004cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cb4:	ec57 6b10 	vmov	r6, r7, d0
 8004cb8:	4bc5      	ldr	r3, [pc, #788]	@ (8004fd0 <__ieee754_rem_pio2+0x320>)
 8004cba:	b08d      	sub	sp, #52	@ 0x34
 8004cbc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8004cc0:	4598      	cmp	r8, r3
 8004cc2:	4604      	mov	r4, r0
 8004cc4:	9704      	str	r7, [sp, #16]
 8004cc6:	d807      	bhi.n	8004cd8 <__ieee754_rem_pio2+0x28>
 8004cc8:	2200      	movs	r2, #0
 8004cca:	2300      	movs	r3, #0
 8004ccc:	ed80 0b00 	vstr	d0, [r0]
 8004cd0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004cd4:	2500      	movs	r5, #0
 8004cd6:	e028      	b.n	8004d2a <__ieee754_rem_pio2+0x7a>
 8004cd8:	4bbe      	ldr	r3, [pc, #760]	@ (8004fd4 <__ieee754_rem_pio2+0x324>)
 8004cda:	4598      	cmp	r8, r3
 8004cdc:	d878      	bhi.n	8004dd0 <__ieee754_rem_pio2+0x120>
 8004cde:	9b04      	ldr	r3, [sp, #16]
 8004ce0:	4dbd      	ldr	r5, [pc, #756]	@ (8004fd8 <__ieee754_rem_pio2+0x328>)
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	4630      	mov	r0, r6
 8004ce6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8004f98 <__ieee754_rem_pio2+0x2e8>)
 8004ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cec:	4639      	mov	r1, r7
 8004cee:	dd38      	ble.n	8004d62 <__ieee754_rem_pio2+0xb2>
 8004cf0:	f7fb fc0c 	bl	800050c <__aeabi_dsub>
 8004cf4:	45a8      	cmp	r8, r5
 8004cf6:	4606      	mov	r6, r0
 8004cf8:	460f      	mov	r7, r1
 8004cfa:	d01a      	beq.n	8004d32 <__ieee754_rem_pio2+0x82>
 8004cfc:	a3a8      	add	r3, pc, #672	@ (adr r3, 8004fa0 <__ieee754_rem_pio2+0x2f0>)
 8004cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d02:	f7fb fc03 	bl	800050c <__aeabi_dsub>
 8004d06:	4602      	mov	r2, r0
 8004d08:	460b      	mov	r3, r1
 8004d0a:	4680      	mov	r8, r0
 8004d0c:	4689      	mov	r9, r1
 8004d0e:	4630      	mov	r0, r6
 8004d10:	4639      	mov	r1, r7
 8004d12:	f7fb fbfb 	bl	800050c <__aeabi_dsub>
 8004d16:	a3a2      	add	r3, pc, #648	@ (adr r3, 8004fa0 <__ieee754_rem_pio2+0x2f0>)
 8004d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1c:	f7fb fbf6 	bl	800050c <__aeabi_dsub>
 8004d20:	e9c4 8900 	strd	r8, r9, [r4]
 8004d24:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004d28:	2501      	movs	r5, #1
 8004d2a:	4628      	mov	r0, r5
 8004d2c:	b00d      	add	sp, #52	@ 0x34
 8004d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d32:	a39d      	add	r3, pc, #628	@ (adr r3, 8004fa8 <__ieee754_rem_pio2+0x2f8>)
 8004d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d38:	f7fb fbe8 	bl	800050c <__aeabi_dsub>
 8004d3c:	a39c      	add	r3, pc, #624	@ (adr r3, 8004fb0 <__ieee754_rem_pio2+0x300>)
 8004d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d42:	4606      	mov	r6, r0
 8004d44:	460f      	mov	r7, r1
 8004d46:	f7fb fbe1 	bl	800050c <__aeabi_dsub>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	4680      	mov	r8, r0
 8004d50:	4689      	mov	r9, r1
 8004d52:	4630      	mov	r0, r6
 8004d54:	4639      	mov	r1, r7
 8004d56:	f7fb fbd9 	bl	800050c <__aeabi_dsub>
 8004d5a:	a395      	add	r3, pc, #596	@ (adr r3, 8004fb0 <__ieee754_rem_pio2+0x300>)
 8004d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d60:	e7dc      	b.n	8004d1c <__ieee754_rem_pio2+0x6c>
 8004d62:	f7fb fbd5 	bl	8000510 <__adddf3>
 8004d66:	45a8      	cmp	r8, r5
 8004d68:	4606      	mov	r6, r0
 8004d6a:	460f      	mov	r7, r1
 8004d6c:	d018      	beq.n	8004da0 <__ieee754_rem_pio2+0xf0>
 8004d6e:	a38c      	add	r3, pc, #560	@ (adr r3, 8004fa0 <__ieee754_rem_pio2+0x2f0>)
 8004d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d74:	f7fb fbcc 	bl	8000510 <__adddf3>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	4680      	mov	r8, r0
 8004d7e:	4689      	mov	r9, r1
 8004d80:	4630      	mov	r0, r6
 8004d82:	4639      	mov	r1, r7
 8004d84:	f7fb fbc2 	bl	800050c <__aeabi_dsub>
 8004d88:	a385      	add	r3, pc, #532	@ (adr r3, 8004fa0 <__ieee754_rem_pio2+0x2f0>)
 8004d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8e:	f7fb fbbf 	bl	8000510 <__adddf3>
 8004d92:	f04f 35ff 	mov.w	r5, #4294967295
 8004d96:	e9c4 8900 	strd	r8, r9, [r4]
 8004d9a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004d9e:	e7c4      	b.n	8004d2a <__ieee754_rem_pio2+0x7a>
 8004da0:	a381      	add	r3, pc, #516	@ (adr r3, 8004fa8 <__ieee754_rem_pio2+0x2f8>)
 8004da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da6:	f7fb fbb3 	bl	8000510 <__adddf3>
 8004daa:	a381      	add	r3, pc, #516	@ (adr r3, 8004fb0 <__ieee754_rem_pio2+0x300>)
 8004dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db0:	4606      	mov	r6, r0
 8004db2:	460f      	mov	r7, r1
 8004db4:	f7fb fbac 	bl	8000510 <__adddf3>
 8004db8:	4602      	mov	r2, r0
 8004dba:	460b      	mov	r3, r1
 8004dbc:	4680      	mov	r8, r0
 8004dbe:	4689      	mov	r9, r1
 8004dc0:	4630      	mov	r0, r6
 8004dc2:	4639      	mov	r1, r7
 8004dc4:	f7fb fba2 	bl	800050c <__aeabi_dsub>
 8004dc8:	a379      	add	r3, pc, #484	@ (adr r3, 8004fb0 <__ieee754_rem_pio2+0x300>)
 8004dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dce:	e7de      	b.n	8004d8e <__ieee754_rem_pio2+0xde>
 8004dd0:	4b82      	ldr	r3, [pc, #520]	@ (8004fdc <__ieee754_rem_pio2+0x32c>)
 8004dd2:	4598      	cmp	r8, r3
 8004dd4:	f200 80d1 	bhi.w	8004f7a <__ieee754_rem_pio2+0x2ca>
 8004dd8:	f000 f966 	bl	80050a8 <fabs>
 8004ddc:	ec57 6b10 	vmov	r6, r7, d0
 8004de0:	a375      	add	r3, pc, #468	@ (adr r3, 8004fb8 <__ieee754_rem_pio2+0x308>)
 8004de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de6:	4630      	mov	r0, r6
 8004de8:	4639      	mov	r1, r7
 8004dea:	f7fb fa61 	bl	80002b0 <__aeabi_dmul>
 8004dee:	4b7c      	ldr	r3, [pc, #496]	@ (8004fe0 <__ieee754_rem_pio2+0x330>)
 8004df0:	2200      	movs	r2, #0
 8004df2:	f7fb fb8d 	bl	8000510 <__adddf3>
 8004df6:	f7fb fdc9 	bl	800098c <__aeabi_d2iz>
 8004dfa:	4605      	mov	r5, r0
 8004dfc:	f7fb fcd4 	bl	80007a8 <__aeabi_i2d>
 8004e00:	4602      	mov	r2, r0
 8004e02:	460b      	mov	r3, r1
 8004e04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004e08:	a363      	add	r3, pc, #396	@ (adr r3, 8004f98 <__ieee754_rem_pio2+0x2e8>)
 8004e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0e:	f7fb fa4f 	bl	80002b0 <__aeabi_dmul>
 8004e12:	4602      	mov	r2, r0
 8004e14:	460b      	mov	r3, r1
 8004e16:	4630      	mov	r0, r6
 8004e18:	4639      	mov	r1, r7
 8004e1a:	f7fb fb77 	bl	800050c <__aeabi_dsub>
 8004e1e:	a360      	add	r3, pc, #384	@ (adr r3, 8004fa0 <__ieee754_rem_pio2+0x2f0>)
 8004e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e24:	4682      	mov	sl, r0
 8004e26:	468b      	mov	fp, r1
 8004e28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e2c:	f7fb fa40 	bl	80002b0 <__aeabi_dmul>
 8004e30:	2d1f      	cmp	r5, #31
 8004e32:	4606      	mov	r6, r0
 8004e34:	460f      	mov	r7, r1
 8004e36:	dc0c      	bgt.n	8004e52 <__ieee754_rem_pio2+0x1a2>
 8004e38:	4b6a      	ldr	r3, [pc, #424]	@ (8004fe4 <__ieee754_rem_pio2+0x334>)
 8004e3a:	1e6a      	subs	r2, r5, #1
 8004e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e40:	4543      	cmp	r3, r8
 8004e42:	d006      	beq.n	8004e52 <__ieee754_rem_pio2+0x1a2>
 8004e44:	4632      	mov	r2, r6
 8004e46:	463b      	mov	r3, r7
 8004e48:	4650      	mov	r0, sl
 8004e4a:	4659      	mov	r1, fp
 8004e4c:	f7fb fb5e 	bl	800050c <__aeabi_dsub>
 8004e50:	e00e      	b.n	8004e70 <__ieee754_rem_pio2+0x1c0>
 8004e52:	463b      	mov	r3, r7
 8004e54:	4632      	mov	r2, r6
 8004e56:	4650      	mov	r0, sl
 8004e58:	4659      	mov	r1, fp
 8004e5a:	f7fb fb57 	bl	800050c <__aeabi_dsub>
 8004e5e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004e62:	9305      	str	r3, [sp, #20]
 8004e64:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004e68:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8004e6c:	2b10      	cmp	r3, #16
 8004e6e:	dc02      	bgt.n	8004e76 <__ieee754_rem_pio2+0x1c6>
 8004e70:	e9c4 0100 	strd	r0, r1, [r4]
 8004e74:	e039      	b.n	8004eea <__ieee754_rem_pio2+0x23a>
 8004e76:	a34c      	add	r3, pc, #304	@ (adr r3, 8004fa8 <__ieee754_rem_pio2+0x2f8>)
 8004e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e80:	f7fb fa16 	bl	80002b0 <__aeabi_dmul>
 8004e84:	4606      	mov	r6, r0
 8004e86:	460f      	mov	r7, r1
 8004e88:	4602      	mov	r2, r0
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	4650      	mov	r0, sl
 8004e8e:	4659      	mov	r1, fp
 8004e90:	f7fb fb3c 	bl	800050c <__aeabi_dsub>
 8004e94:	4602      	mov	r2, r0
 8004e96:	460b      	mov	r3, r1
 8004e98:	4680      	mov	r8, r0
 8004e9a:	4689      	mov	r9, r1
 8004e9c:	4650      	mov	r0, sl
 8004e9e:	4659      	mov	r1, fp
 8004ea0:	f7fb fb34 	bl	800050c <__aeabi_dsub>
 8004ea4:	4632      	mov	r2, r6
 8004ea6:	463b      	mov	r3, r7
 8004ea8:	f7fb fb30 	bl	800050c <__aeabi_dsub>
 8004eac:	a340      	add	r3, pc, #256	@ (adr r3, 8004fb0 <__ieee754_rem_pio2+0x300>)
 8004eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb2:	4606      	mov	r6, r0
 8004eb4:	460f      	mov	r7, r1
 8004eb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004eba:	f7fb f9f9 	bl	80002b0 <__aeabi_dmul>
 8004ebe:	4632      	mov	r2, r6
 8004ec0:	463b      	mov	r3, r7
 8004ec2:	f7fb fb23 	bl	800050c <__aeabi_dsub>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	460b      	mov	r3, r1
 8004eca:	4606      	mov	r6, r0
 8004ecc:	460f      	mov	r7, r1
 8004ece:	4640      	mov	r0, r8
 8004ed0:	4649      	mov	r1, r9
 8004ed2:	f7fb fb1b 	bl	800050c <__aeabi_dsub>
 8004ed6:	9a05      	ldr	r2, [sp, #20]
 8004ed8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	2b31      	cmp	r3, #49	@ 0x31
 8004ee0:	dc20      	bgt.n	8004f24 <__ieee754_rem_pio2+0x274>
 8004ee2:	e9c4 0100 	strd	r0, r1, [r4]
 8004ee6:	46c2      	mov	sl, r8
 8004ee8:	46cb      	mov	fp, r9
 8004eea:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004eee:	4650      	mov	r0, sl
 8004ef0:	4642      	mov	r2, r8
 8004ef2:	464b      	mov	r3, r9
 8004ef4:	4659      	mov	r1, fp
 8004ef6:	f7fb fb09 	bl	800050c <__aeabi_dsub>
 8004efa:	463b      	mov	r3, r7
 8004efc:	4632      	mov	r2, r6
 8004efe:	f7fb fb05 	bl	800050c <__aeabi_dsub>
 8004f02:	9b04      	ldr	r3, [sp, #16]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004f0a:	f6bf af0e 	bge.w	8004d2a <__ieee754_rem_pio2+0x7a>
 8004f0e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8004f12:	6063      	str	r3, [r4, #4]
 8004f14:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004f18:	f8c4 8000 	str.w	r8, [r4]
 8004f1c:	60a0      	str	r0, [r4, #8]
 8004f1e:	60e3      	str	r3, [r4, #12]
 8004f20:	426d      	negs	r5, r5
 8004f22:	e702      	b.n	8004d2a <__ieee754_rem_pio2+0x7a>
 8004f24:	a326      	add	r3, pc, #152	@ (adr r3, 8004fc0 <__ieee754_rem_pio2+0x310>)
 8004f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f2e:	f7fb f9bf 	bl	80002b0 <__aeabi_dmul>
 8004f32:	4606      	mov	r6, r0
 8004f34:	460f      	mov	r7, r1
 8004f36:	4602      	mov	r2, r0
 8004f38:	460b      	mov	r3, r1
 8004f3a:	4640      	mov	r0, r8
 8004f3c:	4649      	mov	r1, r9
 8004f3e:	f7fb fae5 	bl	800050c <__aeabi_dsub>
 8004f42:	4602      	mov	r2, r0
 8004f44:	460b      	mov	r3, r1
 8004f46:	4682      	mov	sl, r0
 8004f48:	468b      	mov	fp, r1
 8004f4a:	4640      	mov	r0, r8
 8004f4c:	4649      	mov	r1, r9
 8004f4e:	f7fb fadd 	bl	800050c <__aeabi_dsub>
 8004f52:	4632      	mov	r2, r6
 8004f54:	463b      	mov	r3, r7
 8004f56:	f7fb fad9 	bl	800050c <__aeabi_dsub>
 8004f5a:	a31b      	add	r3, pc, #108	@ (adr r3, 8004fc8 <__ieee754_rem_pio2+0x318>)
 8004f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f60:	4606      	mov	r6, r0
 8004f62:	460f      	mov	r7, r1
 8004f64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f68:	f7fb f9a2 	bl	80002b0 <__aeabi_dmul>
 8004f6c:	4632      	mov	r2, r6
 8004f6e:	463b      	mov	r3, r7
 8004f70:	f7fb facc 	bl	800050c <__aeabi_dsub>
 8004f74:	4606      	mov	r6, r0
 8004f76:	460f      	mov	r7, r1
 8004f78:	e764      	b.n	8004e44 <__ieee754_rem_pio2+0x194>
 8004f7a:	4b1b      	ldr	r3, [pc, #108]	@ (8004fe8 <__ieee754_rem_pio2+0x338>)
 8004f7c:	4598      	cmp	r8, r3
 8004f7e:	d935      	bls.n	8004fec <__ieee754_rem_pio2+0x33c>
 8004f80:	4632      	mov	r2, r6
 8004f82:	463b      	mov	r3, r7
 8004f84:	4630      	mov	r0, r6
 8004f86:	4639      	mov	r1, r7
 8004f88:	f7fb fac0 	bl	800050c <__aeabi_dsub>
 8004f8c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004f90:	e9c4 0100 	strd	r0, r1, [r4]
 8004f94:	e69e      	b.n	8004cd4 <__ieee754_rem_pio2+0x24>
 8004f96:	bf00      	nop
 8004f98:	54400000 	.word	0x54400000
 8004f9c:	3ff921fb 	.word	0x3ff921fb
 8004fa0:	1a626331 	.word	0x1a626331
 8004fa4:	3dd0b461 	.word	0x3dd0b461
 8004fa8:	1a600000 	.word	0x1a600000
 8004fac:	3dd0b461 	.word	0x3dd0b461
 8004fb0:	2e037073 	.word	0x2e037073
 8004fb4:	3ba3198a 	.word	0x3ba3198a
 8004fb8:	6dc9c883 	.word	0x6dc9c883
 8004fbc:	3fe45f30 	.word	0x3fe45f30
 8004fc0:	2e000000 	.word	0x2e000000
 8004fc4:	3ba3198a 	.word	0x3ba3198a
 8004fc8:	252049c1 	.word	0x252049c1
 8004fcc:	397b839a 	.word	0x397b839a
 8004fd0:	3fe921fb 	.word	0x3fe921fb
 8004fd4:	4002d97b 	.word	0x4002d97b
 8004fd8:	3ff921fb 	.word	0x3ff921fb
 8004fdc:	413921fb 	.word	0x413921fb
 8004fe0:	3fe00000 	.word	0x3fe00000
 8004fe4:	080059d4 	.word	0x080059d4
 8004fe8:	7fefffff 	.word	0x7fefffff
 8004fec:	ea4f 5528 	mov.w	r5, r8, asr #20
 8004ff0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8004ff4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8004ff8:	4630      	mov	r0, r6
 8004ffa:	460f      	mov	r7, r1
 8004ffc:	f7fb fcc6 	bl	800098c <__aeabi_d2iz>
 8005000:	f7fb fbd2 	bl	80007a8 <__aeabi_i2d>
 8005004:	4602      	mov	r2, r0
 8005006:	460b      	mov	r3, r1
 8005008:	4630      	mov	r0, r6
 800500a:	4639      	mov	r1, r7
 800500c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005010:	f7fb fa7c 	bl	800050c <__aeabi_dsub>
 8005014:	4b22      	ldr	r3, [pc, #136]	@ (80050a0 <__ieee754_rem_pio2+0x3f0>)
 8005016:	2200      	movs	r2, #0
 8005018:	f7fb f94a 	bl	80002b0 <__aeabi_dmul>
 800501c:	460f      	mov	r7, r1
 800501e:	4606      	mov	r6, r0
 8005020:	f7fb fcb4 	bl	800098c <__aeabi_d2iz>
 8005024:	f7fb fbc0 	bl	80007a8 <__aeabi_i2d>
 8005028:	4602      	mov	r2, r0
 800502a:	460b      	mov	r3, r1
 800502c:	4630      	mov	r0, r6
 800502e:	4639      	mov	r1, r7
 8005030:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005034:	f7fb fa6a 	bl	800050c <__aeabi_dsub>
 8005038:	4b19      	ldr	r3, [pc, #100]	@ (80050a0 <__ieee754_rem_pio2+0x3f0>)
 800503a:	2200      	movs	r2, #0
 800503c:	f7fb f938 	bl	80002b0 <__aeabi_dmul>
 8005040:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8005044:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8005048:	f04f 0803 	mov.w	r8, #3
 800504c:	2600      	movs	r6, #0
 800504e:	2700      	movs	r7, #0
 8005050:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005054:	4632      	mov	r2, r6
 8005056:	463b      	mov	r3, r7
 8005058:	46c2      	mov	sl, r8
 800505a:	f108 38ff 	add.w	r8, r8, #4294967295
 800505e:	f7fb fc63 	bl	8000928 <__aeabi_dcmpeq>
 8005062:	2800      	cmp	r0, #0
 8005064:	d1f4      	bne.n	8005050 <__ieee754_rem_pio2+0x3a0>
 8005066:	4b0f      	ldr	r3, [pc, #60]	@ (80050a4 <__ieee754_rem_pio2+0x3f4>)
 8005068:	9301      	str	r3, [sp, #4]
 800506a:	2302      	movs	r3, #2
 800506c:	9300      	str	r3, [sp, #0]
 800506e:	462a      	mov	r2, r5
 8005070:	4653      	mov	r3, sl
 8005072:	4621      	mov	r1, r4
 8005074:	a806      	add	r0, sp, #24
 8005076:	f000 f81f 	bl	80050b8 <__kernel_rem_pio2>
 800507a:	9b04      	ldr	r3, [sp, #16]
 800507c:	2b00      	cmp	r3, #0
 800507e:	4605      	mov	r5, r0
 8005080:	f6bf ae53 	bge.w	8004d2a <__ieee754_rem_pio2+0x7a>
 8005084:	e9d4 2100 	ldrd	r2, r1, [r4]
 8005088:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800508c:	e9c4 2300 	strd	r2, r3, [r4]
 8005090:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8005094:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005098:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800509c:	e740      	b.n	8004f20 <__ieee754_rem_pio2+0x270>
 800509e:	bf00      	nop
 80050a0:	41700000 	.word	0x41700000
 80050a4:	08005a54 	.word	0x08005a54

080050a8 <fabs>:
 80050a8:	ec51 0b10 	vmov	r0, r1, d0
 80050ac:	4602      	mov	r2, r0
 80050ae:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80050b2:	ec43 2b10 	vmov	d0, r2, r3
 80050b6:	4770      	bx	lr

080050b8 <__kernel_rem_pio2>:
 80050b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050bc:	ed2d 8b02 	vpush	{d8}
 80050c0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80050c4:	f112 0f14 	cmn.w	r2, #20
 80050c8:	9306      	str	r3, [sp, #24]
 80050ca:	9104      	str	r1, [sp, #16]
 80050cc:	4bbe      	ldr	r3, [pc, #760]	@ (80053c8 <__kernel_rem_pio2+0x310>)
 80050ce:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80050d0:	9008      	str	r0, [sp, #32]
 80050d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80050d6:	9300      	str	r3, [sp, #0]
 80050d8:	9b06      	ldr	r3, [sp, #24]
 80050da:	f103 33ff 	add.w	r3, r3, #4294967295
 80050de:	bfa8      	it	ge
 80050e0:	1ed4      	subge	r4, r2, #3
 80050e2:	9305      	str	r3, [sp, #20]
 80050e4:	bfb2      	itee	lt
 80050e6:	2400      	movlt	r4, #0
 80050e8:	2318      	movge	r3, #24
 80050ea:	fb94 f4f3 	sdivge	r4, r4, r3
 80050ee:	f06f 0317 	mvn.w	r3, #23
 80050f2:	fb04 3303 	mla	r3, r4, r3, r3
 80050f6:	eb03 0b02 	add.w	fp, r3, r2
 80050fa:	9b00      	ldr	r3, [sp, #0]
 80050fc:	9a05      	ldr	r2, [sp, #20]
 80050fe:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 80053b8 <__kernel_rem_pio2+0x300>
 8005102:	eb03 0802 	add.w	r8, r3, r2
 8005106:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8005108:	1aa7      	subs	r7, r4, r2
 800510a:	ae20      	add	r6, sp, #128	@ 0x80
 800510c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005110:	2500      	movs	r5, #0
 8005112:	4545      	cmp	r5, r8
 8005114:	dd13      	ble.n	800513e <__kernel_rem_pio2+0x86>
 8005116:	9b06      	ldr	r3, [sp, #24]
 8005118:	aa20      	add	r2, sp, #128	@ 0x80
 800511a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800511e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8005122:	f04f 0800 	mov.w	r8, #0
 8005126:	9b00      	ldr	r3, [sp, #0]
 8005128:	4598      	cmp	r8, r3
 800512a:	dc31      	bgt.n	8005190 <__kernel_rem_pio2+0xd8>
 800512c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 80053b8 <__kernel_rem_pio2+0x300>
 8005130:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005134:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005138:	462f      	mov	r7, r5
 800513a:	2600      	movs	r6, #0
 800513c:	e01b      	b.n	8005176 <__kernel_rem_pio2+0xbe>
 800513e:	42ef      	cmn	r7, r5
 8005140:	d407      	bmi.n	8005152 <__kernel_rem_pio2+0x9a>
 8005142:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005146:	f7fb fb2f 	bl	80007a8 <__aeabi_i2d>
 800514a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800514e:	3501      	adds	r5, #1
 8005150:	e7df      	b.n	8005112 <__kernel_rem_pio2+0x5a>
 8005152:	ec51 0b18 	vmov	r0, r1, d8
 8005156:	e7f8      	b.n	800514a <__kernel_rem_pio2+0x92>
 8005158:	e9d7 2300 	ldrd	r2, r3, [r7]
 800515c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005160:	f7fb f8a6 	bl	80002b0 <__aeabi_dmul>
 8005164:	4602      	mov	r2, r0
 8005166:	460b      	mov	r3, r1
 8005168:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800516c:	f7fb f9d0 	bl	8000510 <__adddf3>
 8005170:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005174:	3601      	adds	r6, #1
 8005176:	9b05      	ldr	r3, [sp, #20]
 8005178:	429e      	cmp	r6, r3
 800517a:	f1a7 0708 	sub.w	r7, r7, #8
 800517e:	ddeb      	ble.n	8005158 <__kernel_rem_pio2+0xa0>
 8005180:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005184:	f108 0801 	add.w	r8, r8, #1
 8005188:	ecaa 7b02 	vstmia	sl!, {d7}
 800518c:	3508      	adds	r5, #8
 800518e:	e7ca      	b.n	8005126 <__kernel_rem_pio2+0x6e>
 8005190:	9b00      	ldr	r3, [sp, #0]
 8005192:	f8dd 8000 	ldr.w	r8, [sp]
 8005196:	aa0c      	add	r2, sp, #48	@ 0x30
 8005198:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800519c:	930a      	str	r3, [sp, #40]	@ 0x28
 800519e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80051a0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80051a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80051a6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80051aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80051ac:	ab98      	add	r3, sp, #608	@ 0x260
 80051ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80051b2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80051b6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80051ba:	ac0c      	add	r4, sp, #48	@ 0x30
 80051bc:	ab70      	add	r3, sp, #448	@ 0x1c0
 80051be:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80051c2:	46a1      	mov	r9, r4
 80051c4:	46c2      	mov	sl, r8
 80051c6:	f1ba 0f00 	cmp.w	sl, #0
 80051ca:	f1a5 0508 	sub.w	r5, r5, #8
 80051ce:	dc77      	bgt.n	80052c0 <__kernel_rem_pio2+0x208>
 80051d0:	4658      	mov	r0, fp
 80051d2:	ed9d 0b02 	vldr	d0, [sp, #8]
 80051d6:	f000 fac7 	bl	8005768 <scalbn>
 80051da:	ec57 6b10 	vmov	r6, r7, d0
 80051de:	2200      	movs	r2, #0
 80051e0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80051e4:	4630      	mov	r0, r6
 80051e6:	4639      	mov	r1, r7
 80051e8:	f7fb f862 	bl	80002b0 <__aeabi_dmul>
 80051ec:	ec41 0b10 	vmov	d0, r0, r1
 80051f0:	f000 fb3a 	bl	8005868 <floor>
 80051f4:	4b75      	ldr	r3, [pc, #468]	@ (80053cc <__kernel_rem_pio2+0x314>)
 80051f6:	ec51 0b10 	vmov	r0, r1, d0
 80051fa:	2200      	movs	r2, #0
 80051fc:	f7fb f858 	bl	80002b0 <__aeabi_dmul>
 8005200:	4602      	mov	r2, r0
 8005202:	460b      	mov	r3, r1
 8005204:	4630      	mov	r0, r6
 8005206:	4639      	mov	r1, r7
 8005208:	f7fb f980 	bl	800050c <__aeabi_dsub>
 800520c:	460f      	mov	r7, r1
 800520e:	4606      	mov	r6, r0
 8005210:	f7fb fbbc 	bl	800098c <__aeabi_d2iz>
 8005214:	9002      	str	r0, [sp, #8]
 8005216:	f7fb fac7 	bl	80007a8 <__aeabi_i2d>
 800521a:	4602      	mov	r2, r0
 800521c:	460b      	mov	r3, r1
 800521e:	4630      	mov	r0, r6
 8005220:	4639      	mov	r1, r7
 8005222:	f7fb f973 	bl	800050c <__aeabi_dsub>
 8005226:	f1bb 0f00 	cmp.w	fp, #0
 800522a:	4606      	mov	r6, r0
 800522c:	460f      	mov	r7, r1
 800522e:	dd6c      	ble.n	800530a <__kernel_rem_pio2+0x252>
 8005230:	f108 31ff 	add.w	r1, r8, #4294967295
 8005234:	ab0c      	add	r3, sp, #48	@ 0x30
 8005236:	9d02      	ldr	r5, [sp, #8]
 8005238:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800523c:	f1cb 0018 	rsb	r0, fp, #24
 8005240:	fa43 f200 	asr.w	r2, r3, r0
 8005244:	4415      	add	r5, r2
 8005246:	4082      	lsls	r2, r0
 8005248:	1a9b      	subs	r3, r3, r2
 800524a:	aa0c      	add	r2, sp, #48	@ 0x30
 800524c:	9502      	str	r5, [sp, #8]
 800524e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8005252:	f1cb 0217 	rsb	r2, fp, #23
 8005256:	fa43 f902 	asr.w	r9, r3, r2
 800525a:	f1b9 0f00 	cmp.w	r9, #0
 800525e:	dd64      	ble.n	800532a <__kernel_rem_pio2+0x272>
 8005260:	9b02      	ldr	r3, [sp, #8]
 8005262:	2200      	movs	r2, #0
 8005264:	3301      	adds	r3, #1
 8005266:	9302      	str	r3, [sp, #8]
 8005268:	4615      	mov	r5, r2
 800526a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800526e:	4590      	cmp	r8, r2
 8005270:	f300 80b8 	bgt.w	80053e4 <__kernel_rem_pio2+0x32c>
 8005274:	f1bb 0f00 	cmp.w	fp, #0
 8005278:	dd07      	ble.n	800528a <__kernel_rem_pio2+0x1d2>
 800527a:	f1bb 0f01 	cmp.w	fp, #1
 800527e:	f000 80bf 	beq.w	8005400 <__kernel_rem_pio2+0x348>
 8005282:	f1bb 0f02 	cmp.w	fp, #2
 8005286:	f000 80c6 	beq.w	8005416 <__kernel_rem_pio2+0x35e>
 800528a:	f1b9 0f02 	cmp.w	r9, #2
 800528e:	d14c      	bne.n	800532a <__kernel_rem_pio2+0x272>
 8005290:	4632      	mov	r2, r6
 8005292:	463b      	mov	r3, r7
 8005294:	494e      	ldr	r1, [pc, #312]	@ (80053d0 <__kernel_rem_pio2+0x318>)
 8005296:	2000      	movs	r0, #0
 8005298:	f7fb f938 	bl	800050c <__aeabi_dsub>
 800529c:	4606      	mov	r6, r0
 800529e:	460f      	mov	r7, r1
 80052a0:	2d00      	cmp	r5, #0
 80052a2:	d042      	beq.n	800532a <__kernel_rem_pio2+0x272>
 80052a4:	4658      	mov	r0, fp
 80052a6:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 80053c0 <__kernel_rem_pio2+0x308>
 80052aa:	f000 fa5d 	bl	8005768 <scalbn>
 80052ae:	4630      	mov	r0, r6
 80052b0:	4639      	mov	r1, r7
 80052b2:	ec53 2b10 	vmov	r2, r3, d0
 80052b6:	f7fb f929 	bl	800050c <__aeabi_dsub>
 80052ba:	4606      	mov	r6, r0
 80052bc:	460f      	mov	r7, r1
 80052be:	e034      	b.n	800532a <__kernel_rem_pio2+0x272>
 80052c0:	4b44      	ldr	r3, [pc, #272]	@ (80053d4 <__kernel_rem_pio2+0x31c>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052c8:	f7fa fff2 	bl	80002b0 <__aeabi_dmul>
 80052cc:	f7fb fb5e 	bl	800098c <__aeabi_d2iz>
 80052d0:	f7fb fa6a 	bl	80007a8 <__aeabi_i2d>
 80052d4:	4b40      	ldr	r3, [pc, #256]	@ (80053d8 <__kernel_rem_pio2+0x320>)
 80052d6:	2200      	movs	r2, #0
 80052d8:	4606      	mov	r6, r0
 80052da:	460f      	mov	r7, r1
 80052dc:	f7fa ffe8 	bl	80002b0 <__aeabi_dmul>
 80052e0:	4602      	mov	r2, r0
 80052e2:	460b      	mov	r3, r1
 80052e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052e8:	f7fb f910 	bl	800050c <__aeabi_dsub>
 80052ec:	f7fb fb4e 	bl	800098c <__aeabi_d2iz>
 80052f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80052f4:	f849 0b04 	str.w	r0, [r9], #4
 80052f8:	4639      	mov	r1, r7
 80052fa:	4630      	mov	r0, r6
 80052fc:	f7fb f908 	bl	8000510 <__adddf3>
 8005300:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005304:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005308:	e75d      	b.n	80051c6 <__kernel_rem_pio2+0x10e>
 800530a:	d107      	bne.n	800531c <__kernel_rem_pio2+0x264>
 800530c:	f108 33ff 	add.w	r3, r8, #4294967295
 8005310:	aa0c      	add	r2, sp, #48	@ 0x30
 8005312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005316:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800531a:	e79e      	b.n	800525a <__kernel_rem_pio2+0x1a2>
 800531c:	4b2f      	ldr	r3, [pc, #188]	@ (80053dc <__kernel_rem_pio2+0x324>)
 800531e:	2200      	movs	r2, #0
 8005320:	f7fb fb20 	bl	8000964 <__aeabi_dcmpge>
 8005324:	2800      	cmp	r0, #0
 8005326:	d143      	bne.n	80053b0 <__kernel_rem_pio2+0x2f8>
 8005328:	4681      	mov	r9, r0
 800532a:	2200      	movs	r2, #0
 800532c:	2300      	movs	r3, #0
 800532e:	4630      	mov	r0, r6
 8005330:	4639      	mov	r1, r7
 8005332:	f7fb faf9 	bl	8000928 <__aeabi_dcmpeq>
 8005336:	2800      	cmp	r0, #0
 8005338:	f000 80bf 	beq.w	80054ba <__kernel_rem_pio2+0x402>
 800533c:	f108 33ff 	add.w	r3, r8, #4294967295
 8005340:	2200      	movs	r2, #0
 8005342:	9900      	ldr	r1, [sp, #0]
 8005344:	428b      	cmp	r3, r1
 8005346:	da6e      	bge.n	8005426 <__kernel_rem_pio2+0x36e>
 8005348:	2a00      	cmp	r2, #0
 800534a:	f000 8089 	beq.w	8005460 <__kernel_rem_pio2+0x3a8>
 800534e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005352:	ab0c      	add	r3, sp, #48	@ 0x30
 8005354:	f1ab 0b18 	sub.w	fp, fp, #24
 8005358:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d0f6      	beq.n	800534e <__kernel_rem_pio2+0x296>
 8005360:	4658      	mov	r0, fp
 8005362:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 80053c0 <__kernel_rem_pio2+0x308>
 8005366:	f000 f9ff 	bl	8005768 <scalbn>
 800536a:	f108 0301 	add.w	r3, r8, #1
 800536e:	00da      	lsls	r2, r3, #3
 8005370:	9205      	str	r2, [sp, #20]
 8005372:	ec55 4b10 	vmov	r4, r5, d0
 8005376:	aa70      	add	r2, sp, #448	@ 0x1c0
 8005378:	f8df b058 	ldr.w	fp, [pc, #88]	@ 80053d4 <__kernel_rem_pio2+0x31c>
 800537c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8005380:	4646      	mov	r6, r8
 8005382:	f04f 0a00 	mov.w	sl, #0
 8005386:	2e00      	cmp	r6, #0
 8005388:	f280 80cf 	bge.w	800552a <__kernel_rem_pio2+0x472>
 800538c:	4644      	mov	r4, r8
 800538e:	2c00      	cmp	r4, #0
 8005390:	f2c0 80fd 	blt.w	800558e <__kernel_rem_pio2+0x4d6>
 8005394:	4b12      	ldr	r3, [pc, #72]	@ (80053e0 <__kernel_rem_pio2+0x328>)
 8005396:	461f      	mov	r7, r3
 8005398:	ab70      	add	r3, sp, #448	@ 0x1c0
 800539a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800539e:	9306      	str	r3, [sp, #24]
 80053a0:	f04f 0a00 	mov.w	sl, #0
 80053a4:	f04f 0b00 	mov.w	fp, #0
 80053a8:	2600      	movs	r6, #0
 80053aa:	eba8 0504 	sub.w	r5, r8, r4
 80053ae:	e0e2      	b.n	8005576 <__kernel_rem_pio2+0x4be>
 80053b0:	f04f 0902 	mov.w	r9, #2
 80053b4:	e754      	b.n	8005260 <__kernel_rem_pio2+0x1a8>
 80053b6:	bf00      	nop
	...
 80053c4:	3ff00000 	.word	0x3ff00000
 80053c8:	08005ba0 	.word	0x08005ba0
 80053cc:	40200000 	.word	0x40200000
 80053d0:	3ff00000 	.word	0x3ff00000
 80053d4:	3e700000 	.word	0x3e700000
 80053d8:	41700000 	.word	0x41700000
 80053dc:	3fe00000 	.word	0x3fe00000
 80053e0:	08005b60 	.word	0x08005b60
 80053e4:	f854 3b04 	ldr.w	r3, [r4], #4
 80053e8:	b945      	cbnz	r5, 80053fc <__kernel_rem_pio2+0x344>
 80053ea:	b123      	cbz	r3, 80053f6 <__kernel_rem_pio2+0x33e>
 80053ec:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80053f0:	f844 3c04 	str.w	r3, [r4, #-4]
 80053f4:	2301      	movs	r3, #1
 80053f6:	3201      	adds	r2, #1
 80053f8:	461d      	mov	r5, r3
 80053fa:	e738      	b.n	800526e <__kernel_rem_pio2+0x1b6>
 80053fc:	1acb      	subs	r3, r1, r3
 80053fe:	e7f7      	b.n	80053f0 <__kernel_rem_pio2+0x338>
 8005400:	f108 32ff 	add.w	r2, r8, #4294967295
 8005404:	ab0c      	add	r3, sp, #48	@ 0x30
 8005406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800540a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800540e:	a90c      	add	r1, sp, #48	@ 0x30
 8005410:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005414:	e739      	b.n	800528a <__kernel_rem_pio2+0x1d2>
 8005416:	f108 32ff 	add.w	r2, r8, #4294967295
 800541a:	ab0c      	add	r3, sp, #48	@ 0x30
 800541c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005420:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005424:	e7f3      	b.n	800540e <__kernel_rem_pio2+0x356>
 8005426:	a90c      	add	r1, sp, #48	@ 0x30
 8005428:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800542c:	3b01      	subs	r3, #1
 800542e:	430a      	orrs	r2, r1
 8005430:	e787      	b.n	8005342 <__kernel_rem_pio2+0x28a>
 8005432:	3401      	adds	r4, #1
 8005434:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005438:	2a00      	cmp	r2, #0
 800543a:	d0fa      	beq.n	8005432 <__kernel_rem_pio2+0x37a>
 800543c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800543e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005442:	eb0d 0503 	add.w	r5, sp, r3
 8005446:	9b06      	ldr	r3, [sp, #24]
 8005448:	aa20      	add	r2, sp, #128	@ 0x80
 800544a:	4443      	add	r3, r8
 800544c:	f108 0701 	add.w	r7, r8, #1
 8005450:	3d98      	subs	r5, #152	@ 0x98
 8005452:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8005456:	4444      	add	r4, r8
 8005458:	42bc      	cmp	r4, r7
 800545a:	da04      	bge.n	8005466 <__kernel_rem_pio2+0x3ae>
 800545c:	46a0      	mov	r8, r4
 800545e:	e6a2      	b.n	80051a6 <__kernel_rem_pio2+0xee>
 8005460:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005462:	2401      	movs	r4, #1
 8005464:	e7e6      	b.n	8005434 <__kernel_rem_pio2+0x37c>
 8005466:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005468:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800546c:	f7fb f99c 	bl	80007a8 <__aeabi_i2d>
 8005470:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8005738 <__kernel_rem_pio2+0x680>
 8005474:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005478:	ed8d 7b02 	vstr	d7, [sp, #8]
 800547c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005480:	46b2      	mov	sl, r6
 8005482:	f04f 0800 	mov.w	r8, #0
 8005486:	9b05      	ldr	r3, [sp, #20]
 8005488:	4598      	cmp	r8, r3
 800548a:	dd05      	ble.n	8005498 <__kernel_rem_pio2+0x3e0>
 800548c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005490:	3701      	adds	r7, #1
 8005492:	eca5 7b02 	vstmia	r5!, {d7}
 8005496:	e7df      	b.n	8005458 <__kernel_rem_pio2+0x3a0>
 8005498:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800549c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80054a0:	f7fa ff06 	bl	80002b0 <__aeabi_dmul>
 80054a4:	4602      	mov	r2, r0
 80054a6:	460b      	mov	r3, r1
 80054a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054ac:	f7fb f830 	bl	8000510 <__adddf3>
 80054b0:	f108 0801 	add.w	r8, r8, #1
 80054b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054b8:	e7e5      	b.n	8005486 <__kernel_rem_pio2+0x3ce>
 80054ba:	f1cb 0000 	rsb	r0, fp, #0
 80054be:	ec47 6b10 	vmov	d0, r6, r7
 80054c2:	f000 f951 	bl	8005768 <scalbn>
 80054c6:	ec55 4b10 	vmov	r4, r5, d0
 80054ca:	4b9d      	ldr	r3, [pc, #628]	@ (8005740 <__kernel_rem_pio2+0x688>)
 80054cc:	2200      	movs	r2, #0
 80054ce:	4620      	mov	r0, r4
 80054d0:	4629      	mov	r1, r5
 80054d2:	f7fb fa47 	bl	8000964 <__aeabi_dcmpge>
 80054d6:	b300      	cbz	r0, 800551a <__kernel_rem_pio2+0x462>
 80054d8:	4b9a      	ldr	r3, [pc, #616]	@ (8005744 <__kernel_rem_pio2+0x68c>)
 80054da:	2200      	movs	r2, #0
 80054dc:	4620      	mov	r0, r4
 80054de:	4629      	mov	r1, r5
 80054e0:	f7fa fee6 	bl	80002b0 <__aeabi_dmul>
 80054e4:	f7fb fa52 	bl	800098c <__aeabi_d2iz>
 80054e8:	4606      	mov	r6, r0
 80054ea:	f7fb f95d 	bl	80007a8 <__aeabi_i2d>
 80054ee:	4b94      	ldr	r3, [pc, #592]	@ (8005740 <__kernel_rem_pio2+0x688>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	f7fa fedd 	bl	80002b0 <__aeabi_dmul>
 80054f6:	460b      	mov	r3, r1
 80054f8:	4602      	mov	r2, r0
 80054fa:	4629      	mov	r1, r5
 80054fc:	4620      	mov	r0, r4
 80054fe:	f7fb f805 	bl	800050c <__aeabi_dsub>
 8005502:	f7fb fa43 	bl	800098c <__aeabi_d2iz>
 8005506:	ab0c      	add	r3, sp, #48	@ 0x30
 8005508:	f10b 0b18 	add.w	fp, fp, #24
 800550c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8005510:	f108 0801 	add.w	r8, r8, #1
 8005514:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8005518:	e722      	b.n	8005360 <__kernel_rem_pio2+0x2a8>
 800551a:	4620      	mov	r0, r4
 800551c:	4629      	mov	r1, r5
 800551e:	f7fb fa35 	bl	800098c <__aeabi_d2iz>
 8005522:	ab0c      	add	r3, sp, #48	@ 0x30
 8005524:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8005528:	e71a      	b.n	8005360 <__kernel_rem_pio2+0x2a8>
 800552a:	ab0c      	add	r3, sp, #48	@ 0x30
 800552c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005530:	f7fb f93a 	bl	80007a8 <__aeabi_i2d>
 8005534:	4622      	mov	r2, r4
 8005536:	462b      	mov	r3, r5
 8005538:	f7fa feba 	bl	80002b0 <__aeabi_dmul>
 800553c:	4652      	mov	r2, sl
 800553e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8005542:	465b      	mov	r3, fp
 8005544:	4620      	mov	r0, r4
 8005546:	4629      	mov	r1, r5
 8005548:	f7fa feb2 	bl	80002b0 <__aeabi_dmul>
 800554c:	3e01      	subs	r6, #1
 800554e:	4604      	mov	r4, r0
 8005550:	460d      	mov	r5, r1
 8005552:	e718      	b.n	8005386 <__kernel_rem_pio2+0x2ce>
 8005554:	9906      	ldr	r1, [sp, #24]
 8005556:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800555a:	9106      	str	r1, [sp, #24]
 800555c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8005560:	f7fa fea6 	bl	80002b0 <__aeabi_dmul>
 8005564:	4602      	mov	r2, r0
 8005566:	460b      	mov	r3, r1
 8005568:	4650      	mov	r0, sl
 800556a:	4659      	mov	r1, fp
 800556c:	f7fa ffd0 	bl	8000510 <__adddf3>
 8005570:	3601      	adds	r6, #1
 8005572:	4682      	mov	sl, r0
 8005574:	468b      	mov	fp, r1
 8005576:	9b00      	ldr	r3, [sp, #0]
 8005578:	429e      	cmp	r6, r3
 800557a:	dc01      	bgt.n	8005580 <__kernel_rem_pio2+0x4c8>
 800557c:	42b5      	cmp	r5, r6
 800557e:	dae9      	bge.n	8005554 <__kernel_rem_pio2+0x49c>
 8005580:	ab48      	add	r3, sp, #288	@ 0x120
 8005582:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005586:	e9c5 ab00 	strd	sl, fp, [r5]
 800558a:	3c01      	subs	r4, #1
 800558c:	e6ff      	b.n	800538e <__kernel_rem_pio2+0x2d6>
 800558e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8005590:	2b02      	cmp	r3, #2
 8005592:	dc0b      	bgt.n	80055ac <__kernel_rem_pio2+0x4f4>
 8005594:	2b00      	cmp	r3, #0
 8005596:	dc39      	bgt.n	800560c <__kernel_rem_pio2+0x554>
 8005598:	d05d      	beq.n	8005656 <__kernel_rem_pio2+0x59e>
 800559a:	9b02      	ldr	r3, [sp, #8]
 800559c:	f003 0007 	and.w	r0, r3, #7
 80055a0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80055a4:	ecbd 8b02 	vpop	{d8}
 80055a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ac:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80055ae:	2b03      	cmp	r3, #3
 80055b0:	d1f3      	bne.n	800559a <__kernel_rem_pio2+0x4e2>
 80055b2:	9b05      	ldr	r3, [sp, #20]
 80055b4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80055b8:	eb0d 0403 	add.w	r4, sp, r3
 80055bc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80055c0:	4625      	mov	r5, r4
 80055c2:	46c2      	mov	sl, r8
 80055c4:	f1ba 0f00 	cmp.w	sl, #0
 80055c8:	f1a5 0508 	sub.w	r5, r5, #8
 80055cc:	dc6b      	bgt.n	80056a6 <__kernel_rem_pio2+0x5ee>
 80055ce:	4645      	mov	r5, r8
 80055d0:	2d01      	cmp	r5, #1
 80055d2:	f1a4 0408 	sub.w	r4, r4, #8
 80055d6:	f300 8087 	bgt.w	80056e8 <__kernel_rem_pio2+0x630>
 80055da:	9c05      	ldr	r4, [sp, #20]
 80055dc:	ab48      	add	r3, sp, #288	@ 0x120
 80055de:	441c      	add	r4, r3
 80055e0:	2000      	movs	r0, #0
 80055e2:	2100      	movs	r1, #0
 80055e4:	f1b8 0f01 	cmp.w	r8, #1
 80055e8:	f300 809c 	bgt.w	8005724 <__kernel_rem_pio2+0x66c>
 80055ec:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 80055f0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 80055f4:	f1b9 0f00 	cmp.w	r9, #0
 80055f8:	f040 80a6 	bne.w	8005748 <__kernel_rem_pio2+0x690>
 80055fc:	9b04      	ldr	r3, [sp, #16]
 80055fe:	e9c3 7800 	strd	r7, r8, [r3]
 8005602:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005606:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800560a:	e7c6      	b.n	800559a <__kernel_rem_pio2+0x4e2>
 800560c:	9d05      	ldr	r5, [sp, #20]
 800560e:	ab48      	add	r3, sp, #288	@ 0x120
 8005610:	441d      	add	r5, r3
 8005612:	4644      	mov	r4, r8
 8005614:	2000      	movs	r0, #0
 8005616:	2100      	movs	r1, #0
 8005618:	2c00      	cmp	r4, #0
 800561a:	da35      	bge.n	8005688 <__kernel_rem_pio2+0x5d0>
 800561c:	f1b9 0f00 	cmp.w	r9, #0
 8005620:	d038      	beq.n	8005694 <__kernel_rem_pio2+0x5dc>
 8005622:	4602      	mov	r2, r0
 8005624:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005628:	9c04      	ldr	r4, [sp, #16]
 800562a:	e9c4 2300 	strd	r2, r3, [r4]
 800562e:	4602      	mov	r2, r0
 8005630:	460b      	mov	r3, r1
 8005632:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8005636:	f7fa ff69 	bl	800050c <__aeabi_dsub>
 800563a:	ad4a      	add	r5, sp, #296	@ 0x128
 800563c:	2401      	movs	r4, #1
 800563e:	45a0      	cmp	r8, r4
 8005640:	da2b      	bge.n	800569a <__kernel_rem_pio2+0x5e2>
 8005642:	f1b9 0f00 	cmp.w	r9, #0
 8005646:	d002      	beq.n	800564e <__kernel_rem_pio2+0x596>
 8005648:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800564c:	4619      	mov	r1, r3
 800564e:	9b04      	ldr	r3, [sp, #16]
 8005650:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005654:	e7a1      	b.n	800559a <__kernel_rem_pio2+0x4e2>
 8005656:	9c05      	ldr	r4, [sp, #20]
 8005658:	ab48      	add	r3, sp, #288	@ 0x120
 800565a:	441c      	add	r4, r3
 800565c:	2000      	movs	r0, #0
 800565e:	2100      	movs	r1, #0
 8005660:	f1b8 0f00 	cmp.w	r8, #0
 8005664:	da09      	bge.n	800567a <__kernel_rem_pio2+0x5c2>
 8005666:	f1b9 0f00 	cmp.w	r9, #0
 800566a:	d002      	beq.n	8005672 <__kernel_rem_pio2+0x5ba>
 800566c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005670:	4619      	mov	r1, r3
 8005672:	9b04      	ldr	r3, [sp, #16]
 8005674:	e9c3 0100 	strd	r0, r1, [r3]
 8005678:	e78f      	b.n	800559a <__kernel_rem_pio2+0x4e2>
 800567a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800567e:	f7fa ff47 	bl	8000510 <__adddf3>
 8005682:	f108 38ff 	add.w	r8, r8, #4294967295
 8005686:	e7eb      	b.n	8005660 <__kernel_rem_pio2+0x5a8>
 8005688:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800568c:	f7fa ff40 	bl	8000510 <__adddf3>
 8005690:	3c01      	subs	r4, #1
 8005692:	e7c1      	b.n	8005618 <__kernel_rem_pio2+0x560>
 8005694:	4602      	mov	r2, r0
 8005696:	460b      	mov	r3, r1
 8005698:	e7c6      	b.n	8005628 <__kernel_rem_pio2+0x570>
 800569a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800569e:	f7fa ff37 	bl	8000510 <__adddf3>
 80056a2:	3401      	adds	r4, #1
 80056a4:	e7cb      	b.n	800563e <__kernel_rem_pio2+0x586>
 80056a6:	ed95 7b00 	vldr	d7, [r5]
 80056aa:	ed8d 7b00 	vstr	d7, [sp]
 80056ae:	ed95 7b02 	vldr	d7, [r5, #8]
 80056b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80056b6:	ec53 2b17 	vmov	r2, r3, d7
 80056ba:	ed8d 7b06 	vstr	d7, [sp, #24]
 80056be:	f7fa ff27 	bl	8000510 <__adddf3>
 80056c2:	4602      	mov	r2, r0
 80056c4:	460b      	mov	r3, r1
 80056c6:	4606      	mov	r6, r0
 80056c8:	460f      	mov	r7, r1
 80056ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80056ce:	f7fa ff1d 	bl	800050c <__aeabi_dsub>
 80056d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80056d6:	f7fa ff1b 	bl	8000510 <__adddf3>
 80056da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80056de:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80056e2:	e9c5 6700 	strd	r6, r7, [r5]
 80056e6:	e76d      	b.n	80055c4 <__kernel_rem_pio2+0x50c>
 80056e8:	ed94 7b00 	vldr	d7, [r4]
 80056ec:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80056f0:	ec51 0b17 	vmov	r0, r1, d7
 80056f4:	4652      	mov	r2, sl
 80056f6:	465b      	mov	r3, fp
 80056f8:	ed8d 7b00 	vstr	d7, [sp]
 80056fc:	f7fa ff08 	bl	8000510 <__adddf3>
 8005700:	4602      	mov	r2, r0
 8005702:	460b      	mov	r3, r1
 8005704:	4606      	mov	r6, r0
 8005706:	460f      	mov	r7, r1
 8005708:	e9dd 0100 	ldrd	r0, r1, [sp]
 800570c:	f7fa fefe 	bl	800050c <__aeabi_dsub>
 8005710:	4652      	mov	r2, sl
 8005712:	465b      	mov	r3, fp
 8005714:	f7fa fefc 	bl	8000510 <__adddf3>
 8005718:	3d01      	subs	r5, #1
 800571a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800571e:	e9c4 6700 	strd	r6, r7, [r4]
 8005722:	e755      	b.n	80055d0 <__kernel_rem_pio2+0x518>
 8005724:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005728:	f7fa fef2 	bl	8000510 <__adddf3>
 800572c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005730:	e758      	b.n	80055e4 <__kernel_rem_pio2+0x52c>
 8005732:	bf00      	nop
 8005734:	f3af 8000 	nop.w
	...
 8005740:	41700000 	.word	0x41700000
 8005744:	3e700000 	.word	0x3e700000
 8005748:	9b04      	ldr	r3, [sp, #16]
 800574a:	9a04      	ldr	r2, [sp, #16]
 800574c:	601f      	str	r7, [r3, #0]
 800574e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8005752:	605c      	str	r4, [r3, #4]
 8005754:	609d      	str	r5, [r3, #8]
 8005756:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800575a:	60d3      	str	r3, [r2, #12]
 800575c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005760:	6110      	str	r0, [r2, #16]
 8005762:	6153      	str	r3, [r2, #20]
 8005764:	e719      	b.n	800559a <__kernel_rem_pio2+0x4e2>
 8005766:	bf00      	nop

08005768 <scalbn>:
 8005768:	b570      	push	{r4, r5, r6, lr}
 800576a:	ec55 4b10 	vmov	r4, r5, d0
 800576e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8005772:	4606      	mov	r6, r0
 8005774:	462b      	mov	r3, r5
 8005776:	b991      	cbnz	r1, 800579e <scalbn+0x36>
 8005778:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800577c:	4323      	orrs	r3, r4
 800577e:	d03d      	beq.n	80057fc <scalbn+0x94>
 8005780:	4b35      	ldr	r3, [pc, #212]	@ (8005858 <scalbn+0xf0>)
 8005782:	4620      	mov	r0, r4
 8005784:	4629      	mov	r1, r5
 8005786:	2200      	movs	r2, #0
 8005788:	f7fa fd92 	bl	80002b0 <__aeabi_dmul>
 800578c:	4b33      	ldr	r3, [pc, #204]	@ (800585c <scalbn+0xf4>)
 800578e:	429e      	cmp	r6, r3
 8005790:	4604      	mov	r4, r0
 8005792:	460d      	mov	r5, r1
 8005794:	da0f      	bge.n	80057b6 <scalbn+0x4e>
 8005796:	a328      	add	r3, pc, #160	@ (adr r3, 8005838 <scalbn+0xd0>)
 8005798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579c:	e01e      	b.n	80057dc <scalbn+0x74>
 800579e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80057a2:	4291      	cmp	r1, r2
 80057a4:	d10b      	bne.n	80057be <scalbn+0x56>
 80057a6:	4622      	mov	r2, r4
 80057a8:	4620      	mov	r0, r4
 80057aa:	4629      	mov	r1, r5
 80057ac:	f7fa feb0 	bl	8000510 <__adddf3>
 80057b0:	4604      	mov	r4, r0
 80057b2:	460d      	mov	r5, r1
 80057b4:	e022      	b.n	80057fc <scalbn+0x94>
 80057b6:	460b      	mov	r3, r1
 80057b8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80057bc:	3936      	subs	r1, #54	@ 0x36
 80057be:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80057c2:	4296      	cmp	r6, r2
 80057c4:	dd0d      	ble.n	80057e2 <scalbn+0x7a>
 80057c6:	2d00      	cmp	r5, #0
 80057c8:	a11d      	add	r1, pc, #116	@ (adr r1, 8005840 <scalbn+0xd8>)
 80057ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057ce:	da02      	bge.n	80057d6 <scalbn+0x6e>
 80057d0:	a11d      	add	r1, pc, #116	@ (adr r1, 8005848 <scalbn+0xe0>)
 80057d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057d6:	a31a      	add	r3, pc, #104	@ (adr r3, 8005840 <scalbn+0xd8>)
 80057d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057dc:	f7fa fd68 	bl	80002b0 <__aeabi_dmul>
 80057e0:	e7e6      	b.n	80057b0 <scalbn+0x48>
 80057e2:	1872      	adds	r2, r6, r1
 80057e4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80057e8:	428a      	cmp	r2, r1
 80057ea:	dcec      	bgt.n	80057c6 <scalbn+0x5e>
 80057ec:	2a00      	cmp	r2, #0
 80057ee:	dd08      	ble.n	8005802 <scalbn+0x9a>
 80057f0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80057f4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80057f8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80057fc:	ec45 4b10 	vmov	d0, r4, r5
 8005800:	bd70      	pop	{r4, r5, r6, pc}
 8005802:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8005806:	da08      	bge.n	800581a <scalbn+0xb2>
 8005808:	2d00      	cmp	r5, #0
 800580a:	a10b      	add	r1, pc, #44	@ (adr r1, 8005838 <scalbn+0xd0>)
 800580c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005810:	dac1      	bge.n	8005796 <scalbn+0x2e>
 8005812:	a10f      	add	r1, pc, #60	@ (adr r1, 8005850 <scalbn+0xe8>)
 8005814:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005818:	e7bd      	b.n	8005796 <scalbn+0x2e>
 800581a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800581e:	3236      	adds	r2, #54	@ 0x36
 8005820:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005824:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005828:	4620      	mov	r0, r4
 800582a:	4b0d      	ldr	r3, [pc, #52]	@ (8005860 <scalbn+0xf8>)
 800582c:	4629      	mov	r1, r5
 800582e:	2200      	movs	r2, #0
 8005830:	e7d4      	b.n	80057dc <scalbn+0x74>
 8005832:	bf00      	nop
 8005834:	f3af 8000 	nop.w
 8005838:	c2f8f359 	.word	0xc2f8f359
 800583c:	01a56e1f 	.word	0x01a56e1f
 8005840:	8800759c 	.word	0x8800759c
 8005844:	7e37e43c 	.word	0x7e37e43c
 8005848:	8800759c 	.word	0x8800759c
 800584c:	fe37e43c 	.word	0xfe37e43c
 8005850:	c2f8f359 	.word	0xc2f8f359
 8005854:	81a56e1f 	.word	0x81a56e1f
 8005858:	43500000 	.word	0x43500000
 800585c:	ffff3cb0 	.word	0xffff3cb0
 8005860:	3c900000 	.word	0x3c900000
 8005864:	00000000 	.word	0x00000000

08005868 <floor>:
 8005868:	ec51 0b10 	vmov	r0, r1, d0
 800586c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005874:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8005878:	2e13      	cmp	r6, #19
 800587a:	460c      	mov	r4, r1
 800587c:	4605      	mov	r5, r0
 800587e:	4680      	mov	r8, r0
 8005880:	dc34      	bgt.n	80058ec <floor+0x84>
 8005882:	2e00      	cmp	r6, #0
 8005884:	da17      	bge.n	80058b6 <floor+0x4e>
 8005886:	a332      	add	r3, pc, #200	@ (adr r3, 8005950 <floor+0xe8>)
 8005888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588c:	f7fa fe40 	bl	8000510 <__adddf3>
 8005890:	2200      	movs	r2, #0
 8005892:	2300      	movs	r3, #0
 8005894:	f7fb f870 	bl	8000978 <__aeabi_dcmpgt>
 8005898:	b150      	cbz	r0, 80058b0 <floor+0x48>
 800589a:	2c00      	cmp	r4, #0
 800589c:	da55      	bge.n	800594a <floor+0xe2>
 800589e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80058a2:	432c      	orrs	r4, r5
 80058a4:	2500      	movs	r5, #0
 80058a6:	42ac      	cmp	r4, r5
 80058a8:	4c2b      	ldr	r4, [pc, #172]	@ (8005958 <floor+0xf0>)
 80058aa:	bf08      	it	eq
 80058ac:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80058b0:	4621      	mov	r1, r4
 80058b2:	4628      	mov	r0, r5
 80058b4:	e023      	b.n	80058fe <floor+0x96>
 80058b6:	4f29      	ldr	r7, [pc, #164]	@ (800595c <floor+0xf4>)
 80058b8:	4137      	asrs	r7, r6
 80058ba:	ea01 0307 	and.w	r3, r1, r7
 80058be:	4303      	orrs	r3, r0
 80058c0:	d01d      	beq.n	80058fe <floor+0x96>
 80058c2:	a323      	add	r3, pc, #140	@ (adr r3, 8005950 <floor+0xe8>)
 80058c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c8:	f7fa fe22 	bl	8000510 <__adddf3>
 80058cc:	2200      	movs	r2, #0
 80058ce:	2300      	movs	r3, #0
 80058d0:	f7fb f852 	bl	8000978 <__aeabi_dcmpgt>
 80058d4:	2800      	cmp	r0, #0
 80058d6:	d0eb      	beq.n	80058b0 <floor+0x48>
 80058d8:	2c00      	cmp	r4, #0
 80058da:	bfbe      	ittt	lt
 80058dc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80058e0:	4133      	asrlt	r3, r6
 80058e2:	18e4      	addlt	r4, r4, r3
 80058e4:	ea24 0407 	bic.w	r4, r4, r7
 80058e8:	2500      	movs	r5, #0
 80058ea:	e7e1      	b.n	80058b0 <floor+0x48>
 80058ec:	2e33      	cmp	r6, #51	@ 0x33
 80058ee:	dd0a      	ble.n	8005906 <floor+0x9e>
 80058f0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80058f4:	d103      	bne.n	80058fe <floor+0x96>
 80058f6:	4602      	mov	r2, r0
 80058f8:	460b      	mov	r3, r1
 80058fa:	f7fa fe09 	bl	8000510 <__adddf3>
 80058fe:	ec41 0b10 	vmov	d0, r0, r1
 8005902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005906:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800590a:	f04f 37ff 	mov.w	r7, #4294967295
 800590e:	40df      	lsrs	r7, r3
 8005910:	4207      	tst	r7, r0
 8005912:	d0f4      	beq.n	80058fe <floor+0x96>
 8005914:	a30e      	add	r3, pc, #56	@ (adr r3, 8005950 <floor+0xe8>)
 8005916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591a:	f7fa fdf9 	bl	8000510 <__adddf3>
 800591e:	2200      	movs	r2, #0
 8005920:	2300      	movs	r3, #0
 8005922:	f7fb f829 	bl	8000978 <__aeabi_dcmpgt>
 8005926:	2800      	cmp	r0, #0
 8005928:	d0c2      	beq.n	80058b0 <floor+0x48>
 800592a:	2c00      	cmp	r4, #0
 800592c:	da0a      	bge.n	8005944 <floor+0xdc>
 800592e:	2e14      	cmp	r6, #20
 8005930:	d101      	bne.n	8005936 <floor+0xce>
 8005932:	3401      	adds	r4, #1
 8005934:	e006      	b.n	8005944 <floor+0xdc>
 8005936:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800593a:	2301      	movs	r3, #1
 800593c:	40b3      	lsls	r3, r6
 800593e:	441d      	add	r5, r3
 8005940:	4545      	cmp	r5, r8
 8005942:	d3f6      	bcc.n	8005932 <floor+0xca>
 8005944:	ea25 0507 	bic.w	r5, r5, r7
 8005948:	e7b2      	b.n	80058b0 <floor+0x48>
 800594a:	2500      	movs	r5, #0
 800594c:	462c      	mov	r4, r5
 800594e:	e7af      	b.n	80058b0 <floor+0x48>
 8005950:	8800759c 	.word	0x8800759c
 8005954:	7e37e43c 	.word	0x7e37e43c
 8005958:	bff00000 	.word	0xbff00000
 800595c:	000fffff 	.word	0x000fffff

08005960 <_init>:
 8005960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005962:	bf00      	nop
 8005964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005966:	bc08      	pop	{r3}
 8005968:	469e      	mov	lr, r3
 800596a:	4770      	bx	lr

0800596c <_fini>:
 800596c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800596e:	bf00      	nop
 8005970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005972:	bc08      	pop	{r3}
 8005974:	469e      	mov	lr, r3
 8005976:	4770      	bx	lr
