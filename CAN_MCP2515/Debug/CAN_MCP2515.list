
CAN_MCP2515.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034e8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003680  08003680  00013680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003698  08003698  00020030  2**0
                  CONTENTS
  4 .ARM          00000008  08003698  08003698  00013698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036a0  080036a0  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036a0  080036a0  000136a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036a4  080036a4  000136a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  080036a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  20000030  080036d8  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  080036d8  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a328  00000000  00000000  000200a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019cd  00000000  00000000  0002a3cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000920  00000000  00000000  0002bd98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006fc  00000000  00000000  0002c6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015d43  00000000  00000000  0002cdb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000abef  00000000  00000000  00042af7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087e84  00000000  00000000  0004d6e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000024d4  00000000  00000000  000d556c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000d7a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000030 	.word	0x20000030
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003668 	.word	0x08003668

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000034 	.word	0x20000034
 80001d4:	08003668 	.word	0x08003668

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* CAN 통신 초기화  */
int CANSPI_Initialize(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b088      	sub	sp, #32
 80004d8:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;

  /* Rx Mask values 초기화 */
  RXM0reg.RXM0SIDH = 0x00;
 80004da:	2300      	movs	r3, #0
 80004dc:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 80004de:	2300      	movs	r3, #0
 80004e0:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 80004e2:	2300      	movs	r3, #0
 80004e4:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 80004e6:	2300      	movs	r3, #0
 80004e8:	71fb      	strb	r3, [r7, #7]

  RXM1reg.RXM1SIDH = 0x00;
 80004ea:	2300      	movs	r3, #0
 80004ec:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 80004ee:	2300      	movs	r3, #0
 80004f0:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 80004f2:	2300      	movs	r3, #0
 80004f4:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 80004f6:	2300      	movs	r3, #0
 80004f8:	70fb      	strb	r3, [r7, #3]

  /* Rx Filter values 초기화 */
  RXF0reg.RXF0SIDH = 0x00;
 80004fa:	2300      	movs	r3, #0
 80004fc:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 80004fe:	2300      	movs	r3, #0
 8000500:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 8000502:	2300      	movs	r3, #0
 8000504:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 8000506:	2300      	movs	r3, #0
 8000508:	77fb      	strb	r3, [r7, #31]

  RXF1reg.RXF1SIDH = 0x00;
 800050a:	2300      	movs	r3, #0
 800050c:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 800050e:	2308      	movs	r3, #8
 8000510:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 8000512:	2300      	movs	r3, #0
 8000514:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 8000516:	2300      	movs	r3, #0
 8000518:	76fb      	strb	r3, [r7, #27]

  RXF2reg.RXF2SIDH = 0x00;
 800051a:	2300      	movs	r3, #0
 800051c:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 800051e:	2300      	movs	r3, #0
 8000520:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 8000522:	2300      	movs	r3, #0
 8000524:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 8000526:	2300      	movs	r3, #0
 8000528:	75fb      	strb	r3, [r7, #23]

  RXF3reg.RXF3SIDH = 0x00;
 800052a:	2300      	movs	r3, #0
 800052c:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 800052e:	2300      	movs	r3, #0
 8000530:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 8000532:	2300      	movs	r3, #0
 8000534:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 8000536:	2300      	movs	r3, #0
 8000538:	74fb      	strb	r3, [r7, #19]

  RXF4reg.RXF4SIDH = 0x00;
 800053a:	2300      	movs	r3, #0
 800053c:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 800053e:	2300      	movs	r3, #0
 8000540:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 8000542:	2300      	movs	r3, #0
 8000544:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 8000546:	2300      	movs	r3, #0
 8000548:	73fb      	strb	r3, [r7, #15]

  RXF5reg.RXF5SIDH = 0x00;
 800054a:	2300      	movs	r3, #0
 800054c:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 800054e:	2308      	movs	r3, #8
 8000550:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 8000552:	2300      	movs	r3, #0
 8000554:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 8000556:	2300      	movs	r3, #0
 8000558:	72fb      	strb	r3, [r7, #11]

  /* MCP2515 초기화, SPI 통신 상태 확인 */
  if(!MCP2515_Initialize())
 800055a:	f000 fa13 	bl	8000984 <MCP2515_Initialize>
 800055e:	4603      	mov	r3, r0
 8000560:	f083 0301 	eor.w	r3, r3, #1
 8000564:	b2db      	uxtb	r3, r3
 8000566:	2b00      	cmp	r3, #0
 8000568:	d002      	beq.n	8000570 <CANSPI_Initialize+0x9c>
    return -1;
 800056a:	f04f 33ff 	mov.w	r3, #4294967295
 800056e:	e060      	b.n	8000632 <CANSPI_Initialize+0x15e>

  /* Configuration 모드로 설정 */
  if(!MCP2515_SetConfigMode())
 8000570:	f000 fa2a 	bl	80009c8 <MCP2515_SetConfigMode>
 8000574:	4603      	mov	r3, r0
 8000576:	f083 0301 	eor.w	r3, r3, #1
 800057a:	b2db      	uxtb	r3, r3
 800057c:	2b00      	cmp	r3, #0
 800057e:	d002      	beq.n	8000586 <CANSPI_Initialize+0xb2>
    return -2;
 8000580:	f06f 0301 	mvn.w	r3, #1
 8000584:	e055      	b.n	8000632 <CANSPI_Initialize+0x15e>

  /* Filter & Mask 값 설정 */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	461a      	mov	r2, r3
 800058a:	2123      	movs	r1, #35	; 0x23
 800058c:	2020      	movs	r0, #32
 800058e:	f000 fabf 	bl	8000b10 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 8000592:	463b      	mov	r3, r7
 8000594:	461a      	mov	r2, r3
 8000596:	2127      	movs	r1, #39	; 0x27
 8000598:	2024      	movs	r0, #36	; 0x24
 800059a:	f000 fab9 	bl	8000b10 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 800059e:	f107 031c 	add.w	r3, r7, #28
 80005a2:	461a      	mov	r2, r3
 80005a4:	2103      	movs	r1, #3
 80005a6:	2000      	movs	r0, #0
 80005a8:	f000 fab2 	bl	8000b10 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 80005ac:	f107 0318 	add.w	r3, r7, #24
 80005b0:	461a      	mov	r2, r3
 80005b2:	2107      	movs	r1, #7
 80005b4:	2004      	movs	r0, #4
 80005b6:	f000 faab 	bl	8000b10 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	461a      	mov	r2, r3
 80005c0:	210b      	movs	r1, #11
 80005c2:	2008      	movs	r0, #8
 80005c4:	f000 faa4 	bl	8000b10 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 80005c8:	f107 0310 	add.w	r3, r7, #16
 80005cc:	461a      	mov	r2, r3
 80005ce:	2113      	movs	r1, #19
 80005d0:	2010      	movs	r0, #16
 80005d2:	f000 fa9d 	bl	8000b10 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 80005d6:	f107 030c 	add.w	r3, r7, #12
 80005da:	461a      	mov	r2, r3
 80005dc:	2117      	movs	r1, #23
 80005de:	2014      	movs	r0, #20
 80005e0:	f000 fa96 	bl	8000b10 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 80005e4:	f107 0308 	add.w	r3, r7, #8
 80005e8:	461a      	mov	r2, r3
 80005ea:	211b      	movs	r1, #27
 80005ec:	2018      	movs	r0, #24
 80005ee:	f000 fa8f 	bl	8000b10 <MCP2515_WriteByteSequence>

  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 80005f2:	2104      	movs	r1, #4
 80005f4:	2060      	movs	r0, #96	; 0x60
 80005f6:	f000 fa67 	bl	8000ac8 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 80005fa:	2101      	movs	r1, #1
 80005fc:	2070      	movs	r0, #112	; 0x70
 80005fe:	f000 fa63 	bl	8000ac8 <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */

  /* 00(SJW 1tq) 000000 */
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 8000602:	2100      	movs	r1, #0
 8000604:	202a      	movs	r0, #42	; 0x2a
 8000606:	f000 fa5f 	bl	8000ac8 <MCP2515_WriteByte>

  /* 1 1 100(5tq) 101(6tq) */
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 800060a:	21e5      	movs	r1, #229	; 0xe5
 800060c:	2029      	movs	r0, #41	; 0x29
 800060e:	f000 fa5b 	bl	8000ac8 <MCP2515_WriteByte>

  /* 1 0 000 011(4tq) */
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 8000612:	2183      	movs	r1, #131	; 0x83
 8000614:	2028      	movs	r0, #40	; 0x28
 8000616:	f000 fa57 	bl	8000ac8 <MCP2515_WriteByte>

  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 800061a:	f000 f9f3 	bl	8000a04 <MCP2515_SetNormalMode>
 800061e:	4603      	mov	r3, r0
 8000620:	f083 0301 	eor.w	r3, r3, #1
 8000624:	b2db      	uxtb	r3, r3
 8000626:	2b00      	cmp	r3, #0
 8000628:	d002      	beq.n	8000630 <CANSPI_Initialize+0x15c>
    return -3;
 800062a:	f06f 0302 	mvn.w	r3, #2
 800062e:	e000      	b.n	8000632 <CANSPI_Initialize+0x15e>

  return 1;
 8000630:	2301      	movs	r3, #1
}
 8000632:	4618      	mov	r0, r3
 8000634:	3720      	adds	r7, #32
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
	...

0800063c <CANSPI_Transmit>:

/* CAN 메시지 전송 */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	73fb      	strb	r3, [r7, #15]

  idReg.tempSIDH = 0;
 8000648:	4b36      	ldr	r3, [pc, #216]	; (8000724 <CANSPI_Transmit+0xe8>)
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 800064e:	4b35      	ldr	r3, [pc, #212]	; (8000724 <CANSPI_Transmit+0xe8>)
 8000650:	2200      	movs	r2, #0
 8000652:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 8000654:	4b33      	ldr	r3, [pc, #204]	; (8000724 <CANSPI_Transmit+0xe8>)
 8000656:	2200      	movs	r2, #0
 8000658:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 800065a:	4b32      	ldr	r3, [pc, #200]	; (8000724 <CANSPI_Transmit+0xe8>)
 800065c:	2200      	movs	r2, #0
 800065e:	70da      	strb	r2, [r3, #3]

  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 8000660:	f000 fac4 	bl	8000bec <MCP2515_ReadStatus>
 8000664:	4603      	mov	r3, r0
 8000666:	461a      	mov	r2, r3
 8000668:	4b2f      	ldr	r3, [pc, #188]	; (8000728 <CANSPI_Transmit+0xec>)
 800066a:	701a      	strb	r2, [r3, #0]

  /* 현재 Transmission 이 Pending 되지 않은 버퍼를 찾아서 전송한다. */
  if (ctrlStatus.TXB0REQ != 1)
 800066c:	4b2e      	ldr	r3, [pc, #184]	; (8000728 <CANSPI_Transmit+0xec>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	f003 0304 	and.w	r3, r3, #4
 8000674:	b2db      	uxtb	r3, r3
 8000676:	2b00      	cmp	r3, #0
 8000678:	d115      	bne.n	80006a6 <CANSPI_Transmit+0x6a>
  {
    /* ID Type에 맞게 변환 */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	6858      	ldr	r0, [r3, #4]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	4a28      	ldr	r2, [pc, #160]	; (8000724 <CANSPI_Transmit+0xe8>)
 8000684:	4619      	mov	r1, r3
 8000686:	f000 f928 	bl	80008da <convertCANid2Reg>

    /* Tx Buffer에 전송할 데이터 Loading */
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	7a1a      	ldrb	r2, [r3, #8]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	3309      	adds	r3, #9
 8000692:	4924      	ldr	r1, [pc, #144]	; (8000724 <CANSPI_Transmit+0xe8>)
 8000694:	2040      	movs	r0, #64	; 0x40
 8000696:	f000 fa65 	bl	8000b64 <MCP2515_LoadTxSequence>

    /* Tx Buffer의 데이터 전송요청 */
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 800069a:	2081      	movs	r0, #129	; 0x81
 800069c:	f000 fa8c 	bl	8000bb8 <MCP2515_RequestToSend>

    returnValue = 1;
 80006a0:	2301      	movs	r3, #1
 80006a2:	73fb      	strb	r3, [r7, #15]
 80006a4:	e038      	b.n	8000718 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 80006a6:	4b20      	ldr	r3, [pc, #128]	; (8000728 <CANSPI_Transmit+0xec>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	f003 0310 	and.w	r3, r3, #16
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d115      	bne.n	80006e0 <CANSPI_Transmit+0xa4>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	6858      	ldr	r0, [r3, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	4a19      	ldr	r2, [pc, #100]	; (8000724 <CANSPI_Transmit+0xe8>)
 80006be:	4619      	mov	r1, r3
 80006c0:	f000 f90b 	bl	80008da <convertCANid2Reg>

    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	7a1a      	ldrb	r2, [r3, #8]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	3309      	adds	r3, #9
 80006cc:	4915      	ldr	r1, [pc, #84]	; (8000724 <CANSPI_Transmit+0xe8>)
 80006ce:	2042      	movs	r0, #66	; 0x42
 80006d0:	f000 fa48 	bl	8000b64 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 80006d4:	2082      	movs	r0, #130	; 0x82
 80006d6:	f000 fa6f 	bl	8000bb8 <MCP2515_RequestToSend>

    returnValue = 1;
 80006da:	2301      	movs	r3, #1
 80006dc:	73fb      	strb	r3, [r7, #15]
 80006de:	e01b      	b.n	8000718 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 80006e0:	4b11      	ldr	r3, [pc, #68]	; (8000728 <CANSPI_Transmit+0xec>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d114      	bne.n	8000718 <CANSPI_Transmit+0xdc>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	6858      	ldr	r0, [r3, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	4a0b      	ldr	r2, [pc, #44]	; (8000724 <CANSPI_Transmit+0xe8>)
 80006f8:	4619      	mov	r1, r3
 80006fa:	f000 f8ee 	bl	80008da <convertCANid2Reg>

    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	7a1a      	ldrb	r2, [r3, #8]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	3309      	adds	r3, #9
 8000706:	4907      	ldr	r1, [pc, #28]	; (8000724 <CANSPI_Transmit+0xe8>)
 8000708:	2044      	movs	r0, #68	; 0x44
 800070a:	f000 fa2b 	bl	8000b64 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 800070e:	2084      	movs	r0, #132	; 0x84
 8000710:	f000 fa52 	bl	8000bb8 <MCP2515_RequestToSend>

    returnValue = 1;
 8000714:	2301      	movs	r3, #1
 8000716:	73fb      	strb	r3, [r7, #15]
  }

  return (returnValue);
 8000718:	7bfb      	ldrb	r3, [r7, #15]
}
 800071a:	4618      	mov	r0, r3
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000050 	.word	0x20000050
 8000728:	2000004c 	.word	0x2000004c

0800072c <CANSPI_Receive>:

/* CAN 메시지 수신 */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b088      	sub	sp, #32
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;

  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 8000738:	f000 fa74 	bl	8000c24 <MCP2515_GetRxStatus>
 800073c:	4603      	mov	r3, r0
 800073e:	733b      	strb	r3, [r7, #12]

  /* 버퍼에 수신된 메시지가 있는지 확인 */
  if (rxStatus.rxBuffer != 0)
 8000740:	7b3b      	ldrb	r3, [r7, #12]
 8000742:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000746:	b2db      	uxtb	r3, r3
 8000748:	2b00      	cmp	r3, #0
 800074a:	d066      	beq.n	800081a <CANSPI_Receive+0xee>
  {
    /* 어떤 버퍼에 메시지가 있는지 확인 후 처리 */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 800074c:	7b3b      	ldrb	r3, [r7, #12]
 800074e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000752:	b2db      	uxtb	r3, r3
 8000754:	2b40      	cmp	r3, #64	; 0x40
 8000756:	bf0c      	ite	eq
 8000758:	2301      	moveq	r3, #1
 800075a:	2300      	movne	r3, #0
 800075c:	b2da      	uxtb	r2, r3
 800075e:	7b3b      	ldrb	r3, [r7, #12]
 8000760:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000764:	b2db      	uxtb	r3, r3
 8000766:	2bc0      	cmp	r3, #192	; 0xc0
 8000768:	bf0c      	ite	eq
 800076a:	2301      	moveq	r3, #1
 800076c:	2300      	movne	r3, #0
 800076e:	b2db      	uxtb	r3, r3
 8000770:	4313      	orrs	r3, r2
 8000772:	b2db      	uxtb	r3, r3
 8000774:	2b00      	cmp	r3, #0
 8000776:	d007      	beq.n	8000788 <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8000778:	f107 0310 	add.w	r3, r7, #16
 800077c:	220d      	movs	r2, #13
 800077e:	4619      	mov	r1, r3
 8000780:	2090      	movs	r0, #144	; 0x90
 8000782:	f000 f97f 	bl	8000a84 <MCP2515_ReadRxSequence>
 8000786:	e00c      	b.n	80007a2 <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 8000788:	7b3b      	ldrb	r3, [r7, #12]
 800078a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800078e:	b2db      	uxtb	r3, r3
 8000790:	2b80      	cmp	r3, #128	; 0x80
 8000792:	d106      	bne.n	80007a2 <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8000794:	f107 0310 	add.w	r3, r7, #16
 8000798:	220d      	movs	r2, #13
 800079a:	4619      	mov	r1, r3
 800079c:	2094      	movs	r0, #148	; 0x94
 800079e:	f000 f971 	bl	8000a84 <MCP2515_ReadRxSequence>
    }

    /* Extended 타입 */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 80007a2:	7b3b      	ldrb	r3, [r7, #12]
 80007a4:	f003 0318 	and.w	r3, r3, #24
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	2b10      	cmp	r3, #16
 80007ac:	d10c      	bne.n	80007c8 <CANSPI_Receive+0x9c>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2202      	movs	r2, #2
 80007b2:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 80007b4:	7cb8      	ldrb	r0, [r7, #18]
 80007b6:	7cf9      	ldrb	r1, [r7, #19]
 80007b8:	7c3a      	ldrb	r2, [r7, #16]
 80007ba:	7c7b      	ldrb	r3, [r7, #17]
 80007bc:	f000 f832 	bl	8000824 <convertReg2ExtendedCANid>
 80007c0:	4602      	mov	r2, r0
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	e00b      	b.n	80007e0 <CANSPI_Receive+0xb4>
    }
    else
    {
      /* Standard 타입 */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2201      	movs	r2, #1
 80007cc:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 80007ce:	7c3b      	ldrb	r3, [r7, #16]
 80007d0:	7c7a      	ldrb	r2, [r7, #17]
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 f863 	bl	80008a0 <convertReg2StandardCANid>
 80007da:	4602      	mov	r2, r0
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	605a      	str	r2, [r3, #4]
    }

    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 80007e0:	7d3a      	ldrb	r2, [r7, #20]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 80007e6:	7d7a      	ldrb	r2, [r7, #21]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 80007ec:	7dba      	ldrb	r2, [r7, #22]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 80007f2:	7dfa      	ldrb	r2, [r7, #23]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 80007f8:	7e3a      	ldrb	r2, [r7, #24]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 80007fe:	7e7a      	ldrb	r2, [r7, #25]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 8000804:	7eba      	ldrb	r2, [r7, #26]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 800080a:	7efa      	ldrb	r2, [r7, #27]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 8000810:	7f3a      	ldrb	r2, [r7, #28]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	741a      	strb	r2, [r3, #16]

    returnValue = 1;
 8000816:	2301      	movs	r3, #1
 8000818:	77fb      	strb	r3, [r7, #31]
  }

  return (returnValue);
 800081a:	7ffb      	ldrb	r3, [r7, #31]
}
 800081c:	4618      	mov	r0, r3
 800081e:	3720      	adds	r7, #32
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}

08000824 <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* Register 저장값을 Extended ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 8000824:	b490      	push	{r4, r7}
 8000826:	b086      	sub	sp, #24
 8000828:	af00      	add	r7, sp, #0
 800082a:	4604      	mov	r4, r0
 800082c:	4608      	mov	r0, r1
 800082e:	4611      	mov	r1, r2
 8000830:	461a      	mov	r2, r3
 8000832:	4623      	mov	r3, r4
 8000834:	71fb      	strb	r3, [r7, #7]
 8000836:	4603      	mov	r3, r0
 8000838:	71bb      	strb	r3, [r7, #6]
 800083a:	460b      	mov	r3, r1
 800083c:	717b      	strb	r3, [r7, #5]
 800083e:	4613      	mov	r3, r2
 8000840:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;

  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 800084a:	793b      	ldrb	r3, [r7, #4]
 800084c:	f003 0303 	and.w	r3, r3, #3
 8000850:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 8000852:	793b      	ldrb	r3, [r7, #4]
 8000854:	095b      	lsrs	r3, r3, #5
 8000856:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 8000858:	797b      	ldrb	r3, [r7, #5]
 800085a:	00db      	lsls	r3, r3, #3
 800085c:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 800085e:	7bbb      	ldrb	r3, [r7, #14]
 8000860:	693a      	ldr	r2, [r7, #16]
 8000862:	4413      	add	r3, r2
 8000864:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 8000866:	693b      	ldr	r3, [r7, #16]
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 800086c:	7bfb      	ldrb	r3, [r7, #15]
 800086e:	693a      	ldr	r2, [r7, #16]
 8000870:	4413      	add	r3, r2
 8000872:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 8000874:	693b      	ldr	r3, [r7, #16]
 8000876:	021b      	lsls	r3, r3, #8
 8000878:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	693a      	ldr	r2, [r7, #16]
 800087e:	4413      	add	r3, r2
 8000880:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	021b      	lsls	r3, r3, #8
 8000886:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 8000888:	79bb      	ldrb	r3, [r7, #6]
 800088a:	693a      	ldr	r2, [r7, #16]
 800088c:	4413      	add	r3, r2
 800088e:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;
 8000890:	693b      	ldr	r3, [r7, #16]
 8000892:	617b      	str	r3, [r7, #20]
  return (returnValue);
 8000894:	697b      	ldr	r3, [r7, #20]
}
 8000896:	4618      	mov	r0, r3
 8000898:	3718      	adds	r7, #24
 800089a:	46bd      	mov	sp, r7
 800089c:	bc90      	pop	{r4, r7}
 800089e:	4770      	bx	lr

080008a0 <convertReg2StandardCANid>:

/* Register 저장값을 Standard ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	460a      	mov	r2, r1
 80008aa:	71fb      	strb	r3, [r7, #7]
 80008ac:	4613      	mov	r3, r2
 80008ae:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;

  ConvertedID = (tempRXBn_SIDH << 3);
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	00db      	lsls	r3, r3, #3
 80008b8:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 80008ba:	79bb      	ldrb	r3, [r7, #6]
 80008bc:	095b      	lsrs	r3, r3, #5
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	461a      	mov	r2, r3
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	4413      	add	r3, r2
 80008c6:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	60fb      	str	r3, [r7, #12]

  return (returnValue);
 80008cc:	68fb      	ldr	r3, [r7, #12]
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3714      	adds	r7, #20
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr

080008da <convertCANid2Reg>:

/* CAN ID를 Register에 저장하기 위한 변환 함수 */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg)
{
 80008da:	b480      	push	{r7}
 80008dc:	b087      	sub	sp, #28
 80008de:	af00      	add	r7, sp, #0
 80008e0:	60f8      	str	r0, [r7, #12]
 80008e2:	460b      	mov	r3, r1
 80008e4:	607a      	str	r2, [r7, #4]
 80008e6:	72fb      	strb	r3, [r7, #11]
  uint8_t wipSIDL = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	75fb      	strb	r3, [r7, #23]

  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B)
 80008ec:	7afb      	ldrb	r3, [r7, #11]
 80008ee:	2b02      	cmp	r3, #2
 80008f0:	d12e      	bne.n	8000950 <convertCANid2Reg+0x76>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	0a1b      	lsrs	r3, r3, #8
 80008fe:	60fb      	str	r3, [r7, #12]

    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	b2da      	uxtb	r2, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	0a1b      	lsrs	r3, r3, #8
 800090c:	60fb      	str	r3, [r7, #12]

    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	b2db      	uxtb	r3, r3
 8000912:	f003 0303 	and.w	r3, r3, #3
 8000916:	75fb      	strb	r3, [r7, #23]
    tempPassedInID = tempPassedInID << 3;
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	00db      	lsls	r3, r3, #3
 800091c:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	b2db      	uxtb	r3, r3
 8000922:	f023 031f 	bic.w	r3, r3, #31
 8000926:	b2da      	uxtb	r2, r3
 8000928:	7dfb      	ldrb	r3, [r7, #23]
 800092a:	4413      	add	r3, r2
 800092c:	75fb      	strb	r3, [r7, #23]
    wipSIDL = wipSIDL + 0x08;
 800092e:	7dfb      	ldrb	r3, [r7, #23]
 8000930:	3308      	adds	r3, #8
 8000932:	75fb      	strb	r3, [r7, #23]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 8000934:	7dfb      	ldrb	r3, [r7, #23]
 8000936:	f023 0314 	bic.w	r3, r3, #20
 800093a:	b2da      	uxtb	r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	705a      	strb	r2, [r3, #1]

    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	0a1b      	lsrs	r3, r3, #8
 8000944:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	b2da      	uxtb	r2, r3
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 800094e:	e013      	b.n	8000978 <convertCANid2Reg+0x9e>
    passedIdReg->tempEID8 = 0;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2200      	movs	r2, #0
 8000954:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2200      	movs	r2, #0
 800095a:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	015b      	lsls	r3, r3, #5
 8000960:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	b2da      	uxtb	r2, r3
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	0a1b      	lsrs	r3, r3, #8
 800096e:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	b2da      	uxtb	r2, r3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	701a      	strb	r2, [r3, #0]
}
 8000978:	bf00      	nop
 800097a:	371c      	adds	r7, #28
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* MCP2515 초기화 */
bool MCP2515_Initialize(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();
 800098a:	2201      	movs	r2, #1
 800098c:	2110      	movs	r1, #16
 800098e:	480c      	ldr	r0, [pc, #48]	; (80009c0 <MCP2515_Initialize+0x3c>)
 8000990:	f000 ffc2 	bl	8001918 <HAL_GPIO_WritePin>

  uint8_t loop = 10;
 8000994:	230a      	movs	r3, #10
 8000996:	71fb      	strb	r3, [r7, #7]

  do {
    /* SPI Ready 확인 */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 8000998:	480a      	ldr	r0, [pc, #40]	; (80009c4 <MCP2515_Initialize+0x40>)
 800099a:	f002 f8dd 	bl	8002b58 <HAL_SPI_GetState>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d101      	bne.n	80009a8 <MCP2515_Initialize+0x24>
      return true;
 80009a4:	2301      	movs	r3, #1
 80009a6:	e006      	b.n	80009b6 <MCP2515_Initialize+0x32>

    loop--;
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d1f1      	bne.n	8000998 <MCP2515_Initialize+0x14>

  return false;
 80009b4:	2300      	movs	r3, #0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40020000 	.word	0x40020000
 80009c4:	20000054 	.word	0x20000054

080009c8 <MCP2515_SetConfigMode>:

/* MCP2515 를 설정모드로 전환 */
bool MCP2515_SetConfigMode(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
  /* CANCTRL Register Configuration 모드 설정 */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 80009ce:	2180      	movs	r1, #128	; 0x80
 80009d0:	200f      	movs	r0, #15
 80009d2:	f000 f879 	bl	8000ac8 <MCP2515_WriteByte>

  uint8_t loop = 10;
 80009d6:	230a      	movs	r3, #10
 80009d8:	71fb      	strb	r3, [r7, #7]

  do {
    /* 모드전환 확인 */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 80009da:	200e      	movs	r0, #14
 80009dc:	f000 f830 	bl	8000a40 <MCP2515_ReadByte>
 80009e0:	4603      	mov	r3, r0
 80009e2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80009e6:	2b80      	cmp	r3, #128	; 0x80
 80009e8:	d101      	bne.n	80009ee <MCP2515_SetConfigMode+0x26>
      return true;
 80009ea:	2301      	movs	r3, #1
 80009ec:	e006      	b.n	80009fc <MCP2515_SetConfigMode+0x34>

    loop--;
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	3b01      	subs	r3, #1
 80009f2:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d1ef      	bne.n	80009da <MCP2515_SetConfigMode+0x12>

  return false;
 80009fa:	2300      	movs	r3, #0
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <MCP2515_SetNormalMode>:

/* MCP2515 를 Normal모드로 전환 */
bool MCP2515_SetNormalMode(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
  /* CANCTRL Register Normal 모드 설정 */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	200f      	movs	r0, #15
 8000a0e:	f000 f85b 	bl	8000ac8 <MCP2515_WriteByte>

  uint8_t loop = 10;
 8000a12:	230a      	movs	r3, #10
 8000a14:	71fb      	strb	r3, [r7, #7]

  do {
    /* 모드전환 확인 */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 8000a16:	200e      	movs	r0, #14
 8000a18:	f000 f812 	bl	8000a40 <MCP2515_ReadByte>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d101      	bne.n	8000a2a <MCP2515_SetNormalMode+0x26>
      return true;
 8000a26:	2301      	movs	r3, #1
 8000a28:	e006      	b.n	8000a38 <MCP2515_SetNormalMode+0x34>

    loop--;
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	3b01      	subs	r3, #1
 8000a2e:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d1ef      	bne.n	8000a16 <MCP2515_SetNormalMode+0x12>

  return false;
 8000a36:	2300      	movs	r3, #0
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* 1바이트 읽기 */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;

  MCP2515_CS_LOW();
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2110      	movs	r1, #16
 8000a4e:	480c      	ldr	r0, [pc, #48]	; (8000a80 <MCP2515_ReadByte+0x40>)
 8000a50:	f000 ff62 	bl	8001918 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ);
 8000a54:	2003      	movs	r0, #3
 8000a56:	f000 f901 	bl	8000c5c <SPI_Tx>
  SPI_Tx(address);
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f000 f8fd 	bl	8000c5c <SPI_Tx>
  retVal = SPI_Rx();
 8000a62:	f000 f921 	bl	8000ca8 <SPI_Rx>
 8000a66:	4603      	mov	r3, r0
 8000a68:	73fb      	strb	r3, [r7, #15]

  MCP2515_CS_HIGH();
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	2110      	movs	r1, #16
 8000a6e:	4804      	ldr	r0, [pc, #16]	; (8000a80 <MCP2515_ReadByte+0x40>)
 8000a70:	f000 ff52 	bl	8001918 <HAL_GPIO_WritePin>

  return retVal;
 8000a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40020000 	.word	0x40020000

08000a84 <MCP2515_ReadRxSequence>:

/* Sequential Bytes 읽기 */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	6039      	str	r1, [r7, #0]
 8000a8e:	71fb      	strb	r3, [r7, #7]
 8000a90:	4613      	mov	r3, r2
 8000a92:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8000a94:	2200      	movs	r2, #0
 8000a96:	2110      	movs	r1, #16
 8000a98:	480a      	ldr	r0, [pc, #40]	; (8000ac4 <MCP2515_ReadRxSequence+0x40>)
 8000a9a:	f000 ff3d 	bl	8001918 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f000 f8db 	bl	8000c5c <SPI_Tx>
  SPI_RxBuffer(data, length);
 8000aa6:	79bb      	ldrb	r3, [r7, #6]
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	6838      	ldr	r0, [r7, #0]
 8000aac:	f000 f90c 	bl	8000cc8 <SPI_RxBuffer>

  MCP2515_CS_HIGH();
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	2110      	movs	r1, #16
 8000ab4:	4803      	ldr	r0, [pc, #12]	; (8000ac4 <MCP2515_ReadRxSequence+0x40>)
 8000ab6:	f000 ff2f 	bl	8001918 <HAL_GPIO_WritePin>
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40020000 	.word	0x40020000

08000ac8 <MCP2515_WriteByte>:

/* 1바이트 쓰기 */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	460a      	mov	r2, r1
 8000ad2:	71fb      	strb	r3, [r7, #7]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2110      	movs	r1, #16
 8000adc:	480b      	ldr	r0, [pc, #44]	; (8000b0c <MCP2515_WriteByte+0x44>)
 8000ade:	f000 ff1b 	bl	8001918 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 8000ae2:	2002      	movs	r0, #2
 8000ae4:	f000 f8ba 	bl	8000c5c <SPI_Tx>
  SPI_Tx(address);
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 f8b6 	bl	8000c5c <SPI_Tx>
  SPI_Tx(data);
 8000af0:	79bb      	ldrb	r3, [r7, #6]
 8000af2:	4618      	mov	r0, r3
 8000af4:	f000 f8b2 	bl	8000c5c <SPI_Tx>

  MCP2515_CS_HIGH();
 8000af8:	2201      	movs	r2, #1
 8000afa:	2110      	movs	r1, #16
 8000afc:	4803      	ldr	r0, [pc, #12]	; (8000b0c <MCP2515_WriteByte+0x44>)
 8000afe:	f000 ff0b 	bl	8001918 <HAL_GPIO_WritePin>
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40020000 	.word	0x40020000

08000b10 <MCP2515_WriteByteSequence>:

/* Sequential Bytes 쓰기 */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	603a      	str	r2, [r7, #0]
 8000b1a:	71fb      	strb	r3, [r7, #7]
 8000b1c:	460b      	mov	r3, r1
 8000b1e:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8000b20:	2200      	movs	r2, #0
 8000b22:	2110      	movs	r1, #16
 8000b24:	480e      	ldr	r0, [pc, #56]	; (8000b60 <MCP2515_WriteByteSequence+0x50>)
 8000b26:	f000 fef7 	bl	8001918 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 8000b2a:	2002      	movs	r0, #2
 8000b2c:	f000 f896 	bl	8000c5c <SPI_Tx>
  SPI_Tx(startAddress);
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 f892 	bl	8000c5c <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 8000b38:	79ba      	ldrb	r2, [r7, #6]
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	3301      	adds	r3, #1
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	4619      	mov	r1, r3
 8000b46:	6838      	ldr	r0, [r7, #0]
 8000b48:	f000 f89a 	bl	8000c80 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	2110      	movs	r1, #16
 8000b50:	4803      	ldr	r0, [pc, #12]	; (8000b60 <MCP2515_WriteByteSequence+0x50>)
 8000b52:	f000 fee1 	bl	8001918 <HAL_GPIO_WritePin>
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40020000 	.word	0x40020000

08000b64 <MCP2515_LoadTxSequence>:

/* TxBuffer에 Sequential Bytes 쓰기 */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60b9      	str	r1, [r7, #8]
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	4603      	mov	r3, r0
 8000b70:	73fb      	strb	r3, [r7, #15]
 8000b72:	4613      	mov	r3, r2
 8000b74:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 8000b76:	2200      	movs	r2, #0
 8000b78:	2110      	movs	r1, #16
 8000b7a:	480e      	ldr	r0, [pc, #56]	; (8000bb4 <MCP2515_LoadTxSequence+0x50>)
 8000b7c:	f000 fecc 	bl	8001918 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8000b80:	7bfb      	ldrb	r3, [r7, #15]
 8000b82:	4618      	mov	r0, r3
 8000b84:	f000 f86a 	bl	8000c5c <SPI_Tx>
  SPI_TxBuffer(idReg, 4);
 8000b88:	2104      	movs	r1, #4
 8000b8a:	68b8      	ldr	r0, [r7, #8]
 8000b8c:	f000 f878 	bl	8000c80 <SPI_TxBuffer>
  SPI_Tx(dlc);
 8000b90:	7bbb      	ldrb	r3, [r7, #14]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f000 f862 	bl	8000c5c <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 8000b98:	7bbb      	ldrb	r3, [r7, #14]
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f000 f86f 	bl	8000c80 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	2110      	movs	r1, #16
 8000ba6:	4803      	ldr	r0, [pc, #12]	; (8000bb4 <MCP2515_LoadTxSequence+0x50>)
 8000ba8:	f000 feb6 	bl	8001918 <HAL_GPIO_WritePin>
}
 8000bac:	bf00      	nop
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40020000 	.word	0x40020000

08000bb8 <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH();
}

/* RTS 명령을 통해서 TxBuffer 전송 */
void MCP2515_RequestToSend(uint8_t instruction)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2110      	movs	r1, #16
 8000bc6:	4808      	ldr	r0, [pc, #32]	; (8000be8 <MCP2515_RequestToSend+0x30>)
 8000bc8:	f000 fea6 	bl	8001918 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f000 f844 	bl	8000c5c <SPI_Tx>

  MCP2515_CS_HIGH();
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	2110      	movs	r1, #16
 8000bd8:	4803      	ldr	r0, [pc, #12]	; (8000be8 <MCP2515_RequestToSend+0x30>)
 8000bda:	f000 fe9d 	bl	8001918 <HAL_GPIO_WritePin>
}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40020000 	.word	0x40020000

08000bec <MCP2515_ReadStatus>:

/* MCP2515 Status 확인 */
uint8_t MCP2515_ReadStatus(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2110      	movs	r1, #16
 8000bf6:	480a      	ldr	r0, [pc, #40]	; (8000c20 <MCP2515_ReadStatus+0x34>)
 8000bf8:	f000 fe8e 	bl	8001918 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ_STATUS);
 8000bfc:	20a0      	movs	r0, #160	; 0xa0
 8000bfe:	f000 f82d 	bl	8000c5c <SPI_Tx>
  retVal = SPI_Rx();
 8000c02:	f000 f851 	bl	8000ca8 <SPI_Rx>
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	2110      	movs	r1, #16
 8000c0e:	4804      	ldr	r0, [pc, #16]	; (8000c20 <MCP2515_ReadStatus+0x34>)
 8000c10:	f000 fe82 	bl	8001918 <HAL_GPIO_WritePin>

  return retVal;
 8000c14:	79fb      	ldrb	r3, [r7, #7]
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40020000 	.word	0x40020000

08000c24 <MCP2515_GetRxStatus>:

/* MCP2515 RxStatus 레지스터 확인 */
uint8_t MCP2515_GetRxStatus(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2110      	movs	r1, #16
 8000c2e:	480a      	ldr	r0, [pc, #40]	; (8000c58 <MCP2515_GetRxStatus+0x34>)
 8000c30:	f000 fe72 	bl	8001918 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_RX_STATUS);
 8000c34:	20b0      	movs	r0, #176	; 0xb0
 8000c36:	f000 f811 	bl	8000c5c <SPI_Tx>
  retVal = SPI_Rx();
 8000c3a:	f000 f835 	bl	8000ca8 <SPI_Rx>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 8000c42:	2201      	movs	r2, #1
 8000c44:	2110      	movs	r1, #16
 8000c46:	4804      	ldr	r0, [pc, #16]	; (8000c58 <MCP2515_GetRxStatus+0x34>)
 8000c48:	f000 fe66 	bl	8001918 <HAL_GPIO_WritePin>

  return retVal;
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40020000 	.word	0x40020000

08000c5c <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx Wrapper 함수 */
static void SPI_Tx(uint8_t data)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 8000c66:	1df9      	adds	r1, r7, #7
 8000c68:	230a      	movs	r3, #10
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	4803      	ldr	r0, [pc, #12]	; (8000c7c <SPI_Tx+0x20>)
 8000c6e:	f001 fb68 	bl	8002342 <HAL_SPI_Transmit>
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000054 	.word	0x20000054

08000c80 <SPI_TxBuffer>:

/* SPI Tx Wrapper 함수 */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	460b      	mov	r3, r1
 8000c8a:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8000c8c:	78fb      	ldrb	r3, [r7, #3]
 8000c8e:	b29a      	uxth	r2, r3
 8000c90:	230a      	movs	r3, #10
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	4803      	ldr	r0, [pc, #12]	; (8000ca4 <SPI_TxBuffer+0x24>)
 8000c96:	f001 fb54 	bl	8002342 <HAL_SPI_Transmit>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000054 	.word	0x20000054

08000ca8 <SPI_Rx>:

/* SPI Rx Wrapper 함수 */
static uint8_t SPI_Rx(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8000cae:	1df9      	adds	r1, r7, #7
 8000cb0:	230a      	movs	r3, #10
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	4803      	ldr	r0, [pc, #12]	; (8000cc4 <SPI_Rx+0x1c>)
 8000cb6:	f001 fc87 	bl	80025c8 <HAL_SPI_Receive>
  return retVal;
 8000cba:	79fb      	ldrb	r3, [r7, #7]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000054 	.word	0x20000054

08000cc8 <SPI_RxBuffer>:

/* SPI Rx Wrapper 함수 */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8000cd4:	78fb      	ldrb	r3, [r7, #3]
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	230a      	movs	r3, #10
 8000cda:	6879      	ldr	r1, [r7, #4]
 8000cdc:	4803      	ldr	r0, [pc, #12]	; (8000cec <SPI_RxBuffer+0x24>)
 8000cde:	f001 fc73 	bl	80025c8 <HAL_SPI_Receive>
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000054 	.word	0x20000054

08000cf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf6:	f000 fb0f 	bl	8001318 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cfa:	f000 f895 	bl	8000e28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cfe:	f000 f95b 	bl	8000fb8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d02:	f000 f8f9 	bl	8000ef8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000d06:	f000 f92d 	bl	8000f64 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  int ret;
  ret = CANSPI_Initialize();
 8000d0a:	f7ff fbe3 	bl	80004d4 <CANSPI_Initialize>
 8000d0e:	6038      	str	r0, [r7, #0]
  if(ret < 0){
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	da11      	bge.n	8000d3a <main+0x4a>
	  for (int var = 0; var < 4; ++var)
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	e00a      	b.n	8000d32 <main+0x42>
	  {
		  HAL_GPIO_TogglePin(TX_led_GPIO_Port,TX_led_Pin);
 8000d1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d20:	483a      	ldr	r0, [pc, #232]	; (8000e0c <main+0x11c>)
 8000d22:	f000 fe12 	bl	800194a <HAL_GPIO_TogglePin>
		  HAL_Delay(50);
 8000d26:	2032      	movs	r0, #50	; 0x32
 8000d28:	f000 fb68 	bl	80013fc <HAL_Delay>
	  for (int var = 0; var < 4; ++var)
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	2b03      	cmp	r3, #3
 8000d36:	ddf1      	ble.n	8000d1c <main+0x2c>
	  }
	  while(1){}
 8000d38:	e7fe      	b.n	8000d38 <main+0x48>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(CANSPI_Receive(&rxMessage)){
 8000d3a:	4835      	ldr	r0, [pc, #212]	; (8000e10 <main+0x120>)
 8000d3c:	f7ff fcf6 	bl	800072c <CANSPI_Receive>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d0f9      	beq.n	8000d3a <main+0x4a>

		  for (int var = 0; var < 4; ++var)//BLINKEO DE RX
 8000d46:	2300      	movs	r3, #0
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	e00a      	b.n	8000d62 <main+0x72>
			  {
				  HAL_GPIO_TogglePin(RX_led_GPIO_Port,RX_led_Pin);
 8000d4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d50:	4830      	ldr	r0, [pc, #192]	; (8000e14 <main+0x124>)
 8000d52:	f000 fdfa 	bl	800194a <HAL_GPIO_TogglePin>
				  HAL_Delay(50);
 8000d56:	2032      	movs	r0, #50	; 0x32
 8000d58:	f000 fb50 	bl	80013fc <HAL_Delay>
		  for (int var = 0; var < 4; ++var)//BLINKEO DE RX
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	2b03      	cmp	r3, #3
 8000d66:	ddf1      	ble.n	8000d4c <main+0x5c>
			  }

		  if(rxMessage.frame.id == ID_transferee){//Es la dispositivo que esperabamos
 8000d68:	4b29      	ldr	r3, [pc, #164]	; (8000e10 <main+0x120>)
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	2b0b      	cmp	r3, #11
 8000d6e:	d109      	bne.n	8000d84 <main+0x94>
	  		  if(rxMessage.frame.data0 == 1){//Si se recive el dato
 8000d70:	4b27      	ldr	r3, [pc, #156]	; (8000e10 <main+0x120>)
 8000d72:	7a5b      	ldrb	r3, [r3, #9]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d105      	bne.n	8000d84 <main+0x94>

	  			  HAL_UART_Transmit(&huart1, OK_IN, sizeof(OK_IN), 100);
 8000d78:	2364      	movs	r3, #100	; 0x64
 8000d7a:	2212      	movs	r2, #18
 8000d7c:	4926      	ldr	r1, [pc, #152]	; (8000e18 <main+0x128>)
 8000d7e:	4827      	ldr	r0, [pc, #156]	; (8000e1c <main+0x12c>)
 8000d80:	f002 f88a 	bl	8002e98 <HAL_UART_Transmit>

	  		  }
	  	  }

	  	  	HAL_Delay(2000);
 8000d84:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d88:	f000 fb38 	bl	80013fc <HAL_Delay>
	  		txMessage.frame.idType = rxMessage.frame.idType;
 8000d8c:	4b20      	ldr	r3, [pc, #128]	; (8000e10 <main+0x120>)
 8000d8e:	781a      	ldrb	r2, [r3, #0]
 8000d90:	4b23      	ldr	r3, [pc, #140]	; (8000e20 <main+0x130>)
 8000d92:	701a      	strb	r2, [r3, #0]
	  		txMessage.frame.id = ID_reciver;
 8000d94:	4b22      	ldr	r3, [pc, #136]	; (8000e20 <main+0x130>)
 8000d96:	220a      	movs	r2, #10
 8000d98:	605a      	str	r2, [r3, #4]
	  		txMessage.frame.dlc = 8;
 8000d9a:	4b21      	ldr	r3, [pc, #132]	; (8000e20 <main+0x130>)
 8000d9c:	2208      	movs	r2, #8
 8000d9e:	721a      	strb	r2, [r3, #8]
	  		txMessage.frame.data0 = 0;
 8000da0:	4b1f      	ldr	r3, [pc, #124]	; (8000e20 <main+0x130>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	725a      	strb	r2, [r3, #9]
	  		txMessage.frame.data1 = 1;
 8000da6:	4b1e      	ldr	r3, [pc, #120]	; (8000e20 <main+0x130>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	729a      	strb	r2, [r3, #10]
	  		txMessage.frame.data2 = 2;
 8000dac:	4b1c      	ldr	r3, [pc, #112]	; (8000e20 <main+0x130>)
 8000dae:	2202      	movs	r2, #2
 8000db0:	72da      	strb	r2, [r3, #11]
	  		txMessage.frame.data3 = 3;
 8000db2:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <main+0x130>)
 8000db4:	2203      	movs	r2, #3
 8000db6:	731a      	strb	r2, [r3, #12]
	  		txMessage.frame.data4 = 4;
 8000db8:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <main+0x130>)
 8000dba:	2204      	movs	r2, #4
 8000dbc:	735a      	strb	r2, [r3, #13]
	  		txMessage.frame.data5 = 5;
 8000dbe:	4b18      	ldr	r3, [pc, #96]	; (8000e20 <main+0x130>)
 8000dc0:	2205      	movs	r2, #5
 8000dc2:	739a      	strb	r2, [r3, #14]
	  		txMessage.frame.data6 = 6;
 8000dc4:	4b16      	ldr	r3, [pc, #88]	; (8000e20 <main+0x130>)
 8000dc6:	2206      	movs	r2, #6
 8000dc8:	73da      	strb	r2, [r3, #15]
	  		txMessage.frame.data7 = 7;
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <main+0x130>)
 8000dcc:	2207      	movs	r2, #7
 8000dce:	741a      	strb	r2, [r3, #16]

	  		if(CANSPI_Transmit(&txMessage)) //Si logramos mandar el mensaje correctamente
 8000dd0:	4813      	ldr	r0, [pc, #76]	; (8000e20 <main+0x130>)
 8000dd2:	f7ff fc33 	bl	800063c <CANSPI_Transmit>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d0ae      	beq.n	8000d3a <main+0x4a>
	  		{

	  			for (int var = 0; var < 4; ++var)//BLINKEO DE RX
 8000ddc:	2300      	movs	r3, #0
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	e00a      	b.n	8000df8 <main+0x108>
	  				{
	  					HAL_GPIO_TogglePin(TX_led_GPIO_Port,TX_led_Pin);
 8000de2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000de6:	4809      	ldr	r0, [pc, #36]	; (8000e0c <main+0x11c>)
 8000de8:	f000 fdaf 	bl	800194a <HAL_GPIO_TogglePin>
	  					HAL_Delay(50);
 8000dec:	2032      	movs	r0, #50	; 0x32
 8000dee:	f000 fb05 	bl	80013fc <HAL_Delay>
	  			for (int var = 0; var < 4; ++var)//BLINKEO DE RX
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	3301      	adds	r3, #1
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2b03      	cmp	r3, #3
 8000dfc:	ddf1      	ble.n	8000de2 <main+0xf2>
	  				}
	  				HAL_UART_Transmit(&huart1, OK_OUT, sizeof(OK_OUT), 100);
 8000dfe:	2364      	movs	r3, #100	; 0x64
 8000e00:	2210      	movs	r2, #16
 8000e02:	4908      	ldr	r1, [pc, #32]	; (8000e24 <main+0x134>)
 8000e04:	4805      	ldr	r0, [pc, #20]	; (8000e1c <main+0x12c>)
 8000e06:	f002 f847 	bl	8002e98 <HAL_UART_Transmit>
	  if(CANSPI_Receive(&rxMessage)){
 8000e0a:	e796      	b.n	8000d3a <main+0x4a>
 8000e0c:	40020800 	.word	0x40020800
 8000e10:	20000108 	.word	0x20000108
 8000e14:	40020400 	.word	0x40020400
 8000e18:	20000000 	.word	0x20000000
 8000e1c:	200000ac 	.word	0x200000ac
 8000e20:	200000f4 	.word	0x200000f4
 8000e24:	20000014 	.word	0x20000014

08000e28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b094      	sub	sp, #80	; 0x50
 8000e2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e2e:	f107 0320 	add.w	r3, r7, #32
 8000e32:	2230      	movs	r2, #48	; 0x30
 8000e34:	2100      	movs	r1, #0
 8000e36:	4618      	mov	r0, r3
 8000e38:	f002 fbea 	bl	8003610 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e3c:	f107 030c 	add.w	r3, r7, #12
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	4b27      	ldr	r3, [pc, #156]	; (8000ef0 <SystemClock_Config+0xc8>)
 8000e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e54:	4a26      	ldr	r2, [pc, #152]	; (8000ef0 <SystemClock_Config+0xc8>)
 8000e56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5c:	4b24      	ldr	r3, [pc, #144]	; (8000ef0 <SystemClock_Config+0xc8>)
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e68:	2300      	movs	r3, #0
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	4b21      	ldr	r3, [pc, #132]	; (8000ef4 <SystemClock_Config+0xcc>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a20      	ldr	r2, [pc, #128]	; (8000ef4 <SystemClock_Config+0xcc>)
 8000e72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e76:	6013      	str	r3, [r2, #0]
 8000e78:	4b1e      	ldr	r3, [pc, #120]	; (8000ef4 <SystemClock_Config+0xcc>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e80:	607b      	str	r3, [r7, #4]
 8000e82:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e84:	2301      	movs	r3, #1
 8000e86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000e98:	2319      	movs	r3, #25
 8000e9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000e9c:	2390      	movs	r3, #144	; 0x90
 8000e9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ea4:	2304      	movs	r3, #4
 8000ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ea8:	f107 0320 	add.w	r3, r7, #32
 8000eac:	4618      	mov	r0, r3
 8000eae:	f000 fd67 	bl	8001980 <HAL_RCC_OscConfig>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000eb8:	f000 f90a 	bl	80010d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ebc:	230f      	movs	r3, #15
 8000ebe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ec8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ecc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ed2:	f107 030c 	add.w	r3, r7, #12
 8000ed6:	2102      	movs	r1, #2
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f000 ffc9 	bl	8001e70 <HAL_RCC_ClockConfig>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000ee4:	f000 f8f4 	bl	80010d0 <Error_Handler>
  }
}
 8000ee8:	bf00      	nop
 8000eea:	3750      	adds	r7, #80	; 0x50
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40007000 	.word	0x40007000

08000ef8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000efc:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <MX_SPI1_Init+0x64>)
 8000efe:	4a18      	ldr	r2, [pc, #96]	; (8000f60 <MX_SPI1_Init+0x68>)
 8000f00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f02:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <MX_SPI1_Init+0x64>)
 8000f04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <MX_SPI1_Init+0x64>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <MX_SPI1_Init+0x64>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f16:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <MX_SPI1_Init+0x64>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f1c:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <MX_SPI1_Init+0x64>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f22:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <MX_SPI1_Init+0x64>)
 8000f24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f28:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000f2a:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <MX_SPI1_Init+0x64>)
 8000f2c:	2210      	movs	r2, #16
 8000f2e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f30:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <MX_SPI1_Init+0x64>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f36:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <MX_SPI1_Init+0x64>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f3c:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <MX_SPI1_Init+0x64>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <MX_SPI1_Init+0x64>)
 8000f44:	220a      	movs	r2, #10
 8000f46:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f48:	4804      	ldr	r0, [pc, #16]	; (8000f5c <MX_SPI1_Init+0x64>)
 8000f4a:	f001 f971 	bl	8002230 <HAL_SPI_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f54:	f000 f8bc 	bl	80010d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000054 	.word	0x20000054
 8000f60:	40013000 	.word	0x40013000

08000f64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <MX_USART1_UART_Init+0x4c>)
 8000f6a:	4a12      	ldr	r2, [pc, #72]	; (8000fb4 <MX_USART1_UART_Init+0x50>)
 8000f6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <MX_USART1_UART_Init+0x4c>)
 8000f70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <MX_USART1_UART_Init+0x4c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <MX_USART1_UART_Init+0x4c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <MX_USART1_UART_Init+0x4c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <MX_USART1_UART_Init+0x4c>)
 8000f8a:	220c      	movs	r2, #12
 8000f8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <MX_USART1_UART_Init+0x4c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <MX_USART1_UART_Init+0x4c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f9a:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <MX_USART1_UART_Init+0x4c>)
 8000f9c:	f001 ff2c 	bl	8002df8 <HAL_UART_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000fa6:	f000 f893 	bl	80010d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	200000ac 	.word	0x200000ac
 8000fb4:	40011000 	.word	0x40011000

08000fb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	; 0x28
 8000fbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
 8000fcc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	613b      	str	r3, [r7, #16]
 8000fd2:	4b3b      	ldr	r3, [pc, #236]	; (80010c0 <MX_GPIO_Init+0x108>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a3a      	ldr	r2, [pc, #232]	; (80010c0 <MX_GPIO_Init+0x108>)
 8000fd8:	f043 0304 	orr.w	r3, r3, #4
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b38      	ldr	r3, [pc, #224]	; (80010c0 <MX_GPIO_Init+0x108>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	4b34      	ldr	r3, [pc, #208]	; (80010c0 <MX_GPIO_Init+0x108>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a33      	ldr	r2, [pc, #204]	; (80010c0 <MX_GPIO_Init+0x108>)
 8000ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b31      	ldr	r3, [pc, #196]	; (80010c0 <MX_GPIO_Init+0x108>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	4b2d      	ldr	r3, [pc, #180]	; (80010c0 <MX_GPIO_Init+0x108>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a2c      	ldr	r2, [pc, #176]	; (80010c0 <MX_GPIO_Init+0x108>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b2a      	ldr	r3, [pc, #168]	; (80010c0 <MX_GPIO_Init+0x108>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	4b26      	ldr	r3, [pc, #152]	; (80010c0 <MX_GPIO_Init+0x108>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a25      	ldr	r2, [pc, #148]	; (80010c0 <MX_GPIO_Init+0x108>)
 800102c:	f043 0302 	orr.w	r3, r3, #2
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b23      	ldr	r3, [pc, #140]	; (80010c0 <MX_GPIO_Init+0x108>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TX_led_GPIO_Port, TX_led_Pin, GPIO_PIN_SET);
 800103e:	2201      	movs	r2, #1
 8001040:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001044:	481f      	ldr	r0, [pc, #124]	; (80010c4 <MX_GPIO_Init+0x10c>)
 8001046:	f000 fc67 	bl	8001918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 800104a:	2201      	movs	r2, #1
 800104c:	2110      	movs	r1, #16
 800104e:	481e      	ldr	r0, [pc, #120]	; (80010c8 <MX_GPIO_Init+0x110>)
 8001050:	f000 fc62 	bl	8001918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RX_led_GPIO_Port, RX_led_Pin, GPIO_PIN_RESET);
 8001054:	2200      	movs	r2, #0
 8001056:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800105a:	481c      	ldr	r0, [pc, #112]	; (80010cc <MX_GPIO_Init+0x114>)
 800105c:	f000 fc5c 	bl	8001918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TX_led_Pin */
  GPIO_InitStruct.Pin = TX_led_Pin;
 8001060:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001064:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001066:	2301      	movs	r3, #1
 8001068:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TX_led_GPIO_Port, &GPIO_InitStruct);
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	4619      	mov	r1, r3
 8001078:	4812      	ldr	r0, [pc, #72]	; (80010c4 <MX_GPIO_Init+0x10c>)
 800107a:	f000 fac9 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 800107e:	2310      	movs	r3, #16
 8001080:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001082:	2301      	movs	r3, #1
 8001084:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800108a:	2302      	movs	r3, #2
 800108c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4619      	mov	r1, r3
 8001094:	480c      	ldr	r0, [pc, #48]	; (80010c8 <MX_GPIO_Init+0x110>)
 8001096:	f000 fabb 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pin : RX_led_Pin */
  GPIO_InitStruct.Pin = RX_led_Pin;
 800109a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800109e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a0:	2301      	movs	r3, #1
 80010a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2300      	movs	r3, #0
 80010aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RX_led_GPIO_Port, &GPIO_InitStruct);
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	4619      	mov	r1, r3
 80010b2:	4806      	ldr	r0, [pc, #24]	; (80010cc <MX_GPIO_Init+0x114>)
 80010b4:	f000 faac 	bl	8001610 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010b8:	bf00      	nop
 80010ba:	3728      	adds	r7, #40	; 0x28
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40020800 	.word	0x40020800
 80010c8:	40020000 	.word	0x40020000
 80010cc:	40020400 	.word	0x40020400

080010d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010d4:	b672      	cpsid	i
}
 80010d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <Error_Handler+0x8>
	...

080010dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	4b10      	ldr	r3, [pc, #64]	; (8001128 <HAL_MspInit+0x4c>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	4a0f      	ldr	r2, [pc, #60]	; (8001128 <HAL_MspInit+0x4c>)
 80010ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f0:	6453      	str	r3, [r2, #68]	; 0x44
 80010f2:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <HAL_MspInit+0x4c>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	603b      	str	r3, [r7, #0]
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <HAL_MspInit+0x4c>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	4a08      	ldr	r2, [pc, #32]	; (8001128 <HAL_MspInit+0x4c>)
 8001108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800110c:	6413      	str	r3, [r2, #64]	; 0x40
 800110e:	4b06      	ldr	r3, [pc, #24]	; (8001128 <HAL_MspInit+0x4c>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001116:	603b      	str	r3, [r7, #0]
 8001118:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	40023800 	.word	0x40023800

0800112c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08a      	sub	sp, #40	; 0x28
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a19      	ldr	r2, [pc, #100]	; (80011b0 <HAL_SPI_MspInit+0x84>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d12b      	bne.n	80011a6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <HAL_SPI_MspInit+0x88>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001156:	4a17      	ldr	r2, [pc, #92]	; (80011b4 <HAL_SPI_MspInit+0x88>)
 8001158:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800115c:	6453      	str	r3, [r2, #68]	; 0x44
 800115e:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <HAL_SPI_MspInit+0x88>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001162:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <HAL_SPI_MspInit+0x88>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a10      	ldr	r2, [pc, #64]	; (80011b4 <HAL_SPI_MspInit+0x88>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <HAL_SPI_MspInit+0x88>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001186:	23e0      	movs	r3, #224	; 0xe0
 8001188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	2302      	movs	r3, #2
 800118c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001192:	2303      	movs	r3, #3
 8001194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001196:	2305      	movs	r3, #5
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	4619      	mov	r1, r3
 80011a0:	4805      	ldr	r0, [pc, #20]	; (80011b8 <HAL_SPI_MspInit+0x8c>)
 80011a2:	f000 fa35 	bl	8001610 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011a6:	bf00      	nop
 80011a8:	3728      	adds	r7, #40	; 0x28
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40013000 	.word	0x40013000
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40020000 	.word	0x40020000

080011bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	; 0x28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a19      	ldr	r2, [pc, #100]	; (8001240 <HAL_UART_MspInit+0x84>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d12c      	bne.n	8001238 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
 80011e2:	4b18      	ldr	r3, [pc, #96]	; (8001244 <HAL_UART_MspInit+0x88>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	4a17      	ldr	r2, [pc, #92]	; (8001244 <HAL_UART_MspInit+0x88>)
 80011e8:	f043 0310 	orr.w	r3, r3, #16
 80011ec:	6453      	str	r3, [r2, #68]	; 0x44
 80011ee:	4b15      	ldr	r3, [pc, #84]	; (8001244 <HAL_UART_MspInit+0x88>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	f003 0310 	and.w	r3, r3, #16
 80011f6:	613b      	str	r3, [r7, #16]
 80011f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	4b11      	ldr	r3, [pc, #68]	; (8001244 <HAL_UART_MspInit+0x88>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a10      	ldr	r2, [pc, #64]	; (8001244 <HAL_UART_MspInit+0x88>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <HAL_UART_MspInit+0x88>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001216:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800121a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121c:	2302      	movs	r3, #2
 800121e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001224:	2303      	movs	r3, #3
 8001226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001228:	2307      	movs	r3, #7
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	4619      	mov	r1, r3
 8001232:	4805      	ldr	r0, [pc, #20]	; (8001248 <HAL_UART_MspInit+0x8c>)
 8001234:	f000 f9ec 	bl	8001610 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001238:	bf00      	nop
 800123a:	3728      	adds	r7, #40	; 0x28
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40011000 	.word	0x40011000
 8001244:	40023800 	.word	0x40023800
 8001248:	40020000 	.word	0x40020000

0800124c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001250:	e7fe      	b.n	8001250 <NMI_Handler+0x4>

08001252 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001256:	e7fe      	b.n	8001256 <HardFault_Handler+0x4>

08001258 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800125c:	e7fe      	b.n	800125c <MemManage_Handler+0x4>

0800125e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001262:	e7fe      	b.n	8001262 <BusFault_Handler+0x4>

08001264 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001268:	e7fe      	b.n	8001268 <UsageFault_Handler+0x4>

0800126a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001298:	f000 f890 	bl	80013bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}

080012a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <SystemInit+0x20>)
 80012a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012aa:	4a05      	ldr	r2, [pc, #20]	; (80012c0 <SystemInit+0x20>)
 80012ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80012c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012c8:	f7ff ffea 	bl	80012a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012cc:	480c      	ldr	r0, [pc, #48]	; (8001300 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012ce:	490d      	ldr	r1, [pc, #52]	; (8001304 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012d0:	4a0d      	ldr	r2, [pc, #52]	; (8001308 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012d4:	e002      	b.n	80012dc <LoopCopyDataInit>

080012d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012da:	3304      	adds	r3, #4

080012dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012e0:	d3f9      	bcc.n	80012d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012e2:	4a0a      	ldr	r2, [pc, #40]	; (800130c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012e4:	4c0a      	ldr	r4, [pc, #40]	; (8001310 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e8:	e001      	b.n	80012ee <LoopFillZerobss>

080012ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012ec:	3204      	adds	r2, #4

080012ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012f0:	d3fb      	bcc.n	80012ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012f2:	f002 f995 	bl	8003620 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012f6:	f7ff fcfb 	bl	8000cf0 <main>
  bx  lr    
 80012fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001304:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001308:	080036a8 	.word	0x080036a8
  ldr r2, =_sbss
 800130c:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001310:	20000120 	.word	0x20000120

08001314 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001314:	e7fe      	b.n	8001314 <ADC_IRQHandler>
	...

08001318 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800131c:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <HAL_Init+0x40>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a0d      	ldr	r2, [pc, #52]	; (8001358 <HAL_Init+0x40>)
 8001322:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001326:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001328:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <HAL_Init+0x40>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a0a      	ldr	r2, [pc, #40]	; (8001358 <HAL_Init+0x40>)
 800132e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001332:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001334:	4b08      	ldr	r3, [pc, #32]	; (8001358 <HAL_Init+0x40>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a07      	ldr	r2, [pc, #28]	; (8001358 <HAL_Init+0x40>)
 800133a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800133e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001340:	2003      	movs	r0, #3
 8001342:	f000 f931 	bl	80015a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001346:	200f      	movs	r0, #15
 8001348:	f000 f808 	bl	800135c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800134c:	f7ff fec6 	bl	80010dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40023c00 	.word	0x40023c00

0800135c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <HAL_InitTick+0x54>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <HAL_InitTick+0x58>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	4619      	mov	r1, r3
 800136e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001372:	fbb3 f3f1 	udiv	r3, r3, r1
 8001376:	fbb2 f3f3 	udiv	r3, r2, r3
 800137a:	4618      	mov	r0, r3
 800137c:	f000 f93b 	bl	80015f6 <HAL_SYSTICK_Config>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e00e      	b.n	80013a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2b0f      	cmp	r3, #15
 800138e:	d80a      	bhi.n	80013a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001390:	2200      	movs	r2, #0
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	f04f 30ff 	mov.w	r0, #4294967295
 8001398:	f000 f911 	bl	80015be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800139c:	4a06      	ldr	r2, [pc, #24]	; (80013b8 <HAL_InitTick+0x5c>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013a2:	2300      	movs	r3, #0
 80013a4:	e000      	b.n	80013a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000024 	.word	0x20000024
 80013b4:	2000002c 	.word	0x2000002c
 80013b8:	20000028 	.word	0x20000028

080013bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_IncTick+0x20>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <HAL_IncTick+0x24>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4413      	add	r3, r2
 80013cc:	4a04      	ldr	r2, [pc, #16]	; (80013e0 <HAL_IncTick+0x24>)
 80013ce:	6013      	str	r3, [r2, #0]
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	2000002c 	.word	0x2000002c
 80013e0:	2000011c 	.word	0x2000011c

080013e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return uwTick;
 80013e8:	4b03      	ldr	r3, [pc, #12]	; (80013f8 <HAL_GetTick+0x14>)
 80013ea:	681b      	ldr	r3, [r3, #0]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	2000011c 	.word	0x2000011c

080013fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001404:	f7ff ffee 	bl	80013e4 <HAL_GetTick>
 8001408:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001414:	d005      	beq.n	8001422 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001416:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <HAL_Delay+0x44>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	461a      	mov	r2, r3
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4413      	add	r3, r2
 8001420:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001422:	bf00      	nop
 8001424:	f7ff ffde 	bl	80013e4 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	429a      	cmp	r2, r3
 8001432:	d8f7      	bhi.n	8001424 <HAL_Delay+0x28>
  {
  }
}
 8001434:	bf00      	nop
 8001436:	bf00      	nop
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	2000002c 	.word	0x2000002c

08001444 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <__NVIC_SetPriorityGrouping+0x44>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001460:	4013      	ands	r3, r2
 8001462:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800146c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001474:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001476:	4a04      	ldr	r2, [pc, #16]	; (8001488 <__NVIC_SetPriorityGrouping+0x44>)
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	60d3      	str	r3, [r2, #12]
}
 800147c:	bf00      	nop
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001490:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	0a1b      	lsrs	r3, r3, #8
 8001496:	f003 0307 	and.w	r3, r3, #7
}
 800149a:	4618      	mov	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	6039      	str	r1, [r7, #0]
 80014b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	db0a      	blt.n	80014d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	490c      	ldr	r1, [pc, #48]	; (80014f4 <__NVIC_SetPriority+0x4c>)
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	0112      	lsls	r2, r2, #4
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	440b      	add	r3, r1
 80014cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d0:	e00a      	b.n	80014e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4908      	ldr	r1, [pc, #32]	; (80014f8 <__NVIC_SetPriority+0x50>)
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	f003 030f 	and.w	r3, r3, #15
 80014de:	3b04      	subs	r3, #4
 80014e0:	0112      	lsls	r2, r2, #4
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	440b      	add	r3, r1
 80014e6:	761a      	strb	r2, [r3, #24]
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000e100 	.word	0xe000e100
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b089      	sub	sp, #36	; 0x24
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	f1c3 0307 	rsb	r3, r3, #7
 8001516:	2b04      	cmp	r3, #4
 8001518:	bf28      	it	cs
 800151a:	2304      	movcs	r3, #4
 800151c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3304      	adds	r3, #4
 8001522:	2b06      	cmp	r3, #6
 8001524:	d902      	bls.n	800152c <NVIC_EncodePriority+0x30>
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3b03      	subs	r3, #3
 800152a:	e000      	b.n	800152e <NVIC_EncodePriority+0x32>
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001530:	f04f 32ff 	mov.w	r2, #4294967295
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43da      	mvns	r2, r3
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	401a      	ands	r2, r3
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001544:	f04f 31ff 	mov.w	r1, #4294967295
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	fa01 f303 	lsl.w	r3, r1, r3
 800154e:	43d9      	mvns	r1, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001554:	4313      	orrs	r3, r2
         );
}
 8001556:	4618      	mov	r0, r3
 8001558:	3724      	adds	r7, #36	; 0x24
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
	...

08001564 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3b01      	subs	r3, #1
 8001570:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001574:	d301      	bcc.n	800157a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001576:	2301      	movs	r3, #1
 8001578:	e00f      	b.n	800159a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800157a:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <SysTick_Config+0x40>)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3b01      	subs	r3, #1
 8001580:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001582:	210f      	movs	r1, #15
 8001584:	f04f 30ff 	mov.w	r0, #4294967295
 8001588:	f7ff ff8e 	bl	80014a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <SysTick_Config+0x40>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001592:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <SysTick_Config+0x40>)
 8001594:	2207      	movs	r2, #7
 8001596:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	e000e010 	.word	0xe000e010

080015a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff ff47 	bl	8001444 <__NVIC_SetPriorityGrouping>
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015be:	b580      	push	{r7, lr}
 80015c0:	b086      	sub	sp, #24
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	4603      	mov	r3, r0
 80015c6:	60b9      	str	r1, [r7, #8]
 80015c8:	607a      	str	r2, [r7, #4]
 80015ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015d0:	f7ff ff5c 	bl	800148c <__NVIC_GetPriorityGrouping>
 80015d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	68b9      	ldr	r1, [r7, #8]
 80015da:	6978      	ldr	r0, [r7, #20]
 80015dc:	f7ff ff8e 	bl	80014fc <NVIC_EncodePriority>
 80015e0:	4602      	mov	r2, r0
 80015e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e6:	4611      	mov	r1, r2
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff5d 	bl	80014a8 <__NVIC_SetPriority>
}
 80015ee:	bf00      	nop
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff ffb0 	bl	8001564 <SysTick_Config>
 8001604:	4603      	mov	r3, r0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001610:	b480      	push	{r7}
 8001612:	b089      	sub	sp, #36	; 0x24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800161e:	2300      	movs	r3, #0
 8001620:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001622:	2300      	movs	r3, #0
 8001624:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001626:	2300      	movs	r3, #0
 8001628:	61fb      	str	r3, [r7, #28]
 800162a:	e159      	b.n	80018e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800162c:	2201      	movs	r2, #1
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	4013      	ands	r3, r2
 800163e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	429a      	cmp	r2, r3
 8001646:	f040 8148 	bne.w	80018da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f003 0303 	and.w	r3, r3, #3
 8001652:	2b01      	cmp	r3, #1
 8001654:	d005      	beq.n	8001662 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800165e:	2b02      	cmp	r3, #2
 8001660:	d130      	bne.n	80016c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	2203      	movs	r2, #3
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43db      	mvns	r3, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4013      	ands	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	68da      	ldr	r2, [r3, #12]
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4313      	orrs	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001698:	2201      	movs	r2, #1
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4013      	ands	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	091b      	lsrs	r3, r3, #4
 80016ae:	f003 0201 	and.w	r2, r3, #1
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	2b03      	cmp	r3, #3
 80016ce:	d017      	beq.n	8001700 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	2203      	movs	r2, #3
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4013      	ands	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 0303 	and.w	r3, r3, #3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d123      	bne.n	8001754 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	08da      	lsrs	r2, r3, #3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3208      	adds	r2, #8
 8001714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001718:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	220f      	movs	r2, #15
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4013      	ands	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	691a      	ldr	r2, [r3, #16]
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4313      	orrs	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	08da      	lsrs	r2, r3, #3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	3208      	adds	r2, #8
 800174e:	69b9      	ldr	r1, [r7, #24]
 8001750:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	2203      	movs	r2, #3
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	43db      	mvns	r3, r3
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4013      	ands	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 0203 	and.w	r2, r3, #3
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4313      	orrs	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001790:	2b00      	cmp	r3, #0
 8001792:	f000 80a2 	beq.w	80018da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	4b57      	ldr	r3, [pc, #348]	; (80018f8 <HAL_GPIO_Init+0x2e8>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179e:	4a56      	ldr	r2, [pc, #344]	; (80018f8 <HAL_GPIO_Init+0x2e8>)
 80017a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017a4:	6453      	str	r3, [r2, #68]	; 0x44
 80017a6:	4b54      	ldr	r3, [pc, #336]	; (80018f8 <HAL_GPIO_Init+0x2e8>)
 80017a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017b2:	4a52      	ldr	r2, [pc, #328]	; (80018fc <HAL_GPIO_Init+0x2ec>)
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	089b      	lsrs	r3, r3, #2
 80017b8:	3302      	adds	r3, #2
 80017ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	f003 0303 	and.w	r3, r3, #3
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	220f      	movs	r2, #15
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43db      	mvns	r3, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4013      	ands	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a49      	ldr	r2, [pc, #292]	; (8001900 <HAL_GPIO_Init+0x2f0>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d019      	beq.n	8001812 <HAL_GPIO_Init+0x202>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a48      	ldr	r2, [pc, #288]	; (8001904 <HAL_GPIO_Init+0x2f4>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d013      	beq.n	800180e <HAL_GPIO_Init+0x1fe>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a47      	ldr	r2, [pc, #284]	; (8001908 <HAL_GPIO_Init+0x2f8>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d00d      	beq.n	800180a <HAL_GPIO_Init+0x1fa>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a46      	ldr	r2, [pc, #280]	; (800190c <HAL_GPIO_Init+0x2fc>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d007      	beq.n	8001806 <HAL_GPIO_Init+0x1f6>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a45      	ldr	r2, [pc, #276]	; (8001910 <HAL_GPIO_Init+0x300>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d101      	bne.n	8001802 <HAL_GPIO_Init+0x1f2>
 80017fe:	2304      	movs	r3, #4
 8001800:	e008      	b.n	8001814 <HAL_GPIO_Init+0x204>
 8001802:	2307      	movs	r3, #7
 8001804:	e006      	b.n	8001814 <HAL_GPIO_Init+0x204>
 8001806:	2303      	movs	r3, #3
 8001808:	e004      	b.n	8001814 <HAL_GPIO_Init+0x204>
 800180a:	2302      	movs	r3, #2
 800180c:	e002      	b.n	8001814 <HAL_GPIO_Init+0x204>
 800180e:	2301      	movs	r3, #1
 8001810:	e000      	b.n	8001814 <HAL_GPIO_Init+0x204>
 8001812:	2300      	movs	r3, #0
 8001814:	69fa      	ldr	r2, [r7, #28]
 8001816:	f002 0203 	and.w	r2, r2, #3
 800181a:	0092      	lsls	r2, r2, #2
 800181c:	4093      	lsls	r3, r2
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	4313      	orrs	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001824:	4935      	ldr	r1, [pc, #212]	; (80018fc <HAL_GPIO_Init+0x2ec>)
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	089b      	lsrs	r3, r3, #2
 800182a:	3302      	adds	r3, #2
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001832:	4b38      	ldr	r3, [pc, #224]	; (8001914 <HAL_GPIO_Init+0x304>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	43db      	mvns	r3, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4013      	ands	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001856:	4a2f      	ldr	r2, [pc, #188]	; (8001914 <HAL_GPIO_Init+0x304>)
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800185c:	4b2d      	ldr	r3, [pc, #180]	; (8001914 <HAL_GPIO_Init+0x304>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	43db      	mvns	r3, r3
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4013      	ands	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d003      	beq.n	8001880 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	4313      	orrs	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001880:	4a24      	ldr	r2, [pc, #144]	; (8001914 <HAL_GPIO_Init+0x304>)
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001886:	4b23      	ldr	r3, [pc, #140]	; (8001914 <HAL_GPIO_Init+0x304>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	43db      	mvns	r3, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4013      	ands	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018aa:	4a1a      	ldr	r2, [pc, #104]	; (8001914 <HAL_GPIO_Init+0x304>)
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018b0:	4b18      	ldr	r3, [pc, #96]	; (8001914 <HAL_GPIO_Init+0x304>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	43db      	mvns	r3, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018d4:	4a0f      	ldr	r2, [pc, #60]	; (8001914 <HAL_GPIO_Init+0x304>)
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3301      	adds	r3, #1
 80018de:	61fb      	str	r3, [r7, #28]
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	2b0f      	cmp	r3, #15
 80018e4:	f67f aea2 	bls.w	800162c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018e8:	bf00      	nop
 80018ea:	bf00      	nop
 80018ec:	3724      	adds	r7, #36	; 0x24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40013800 	.word	0x40013800
 8001900:	40020000 	.word	0x40020000
 8001904:	40020400 	.word	0x40020400
 8001908:	40020800 	.word	0x40020800
 800190c:	40020c00 	.word	0x40020c00
 8001910:	40021000 	.word	0x40021000
 8001914:	40013c00 	.word	0x40013c00

08001918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	807b      	strh	r3, [r7, #2]
 8001924:	4613      	mov	r3, r2
 8001926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001928:	787b      	ldrb	r3, [r7, #1]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800192e:	887a      	ldrh	r2, [r7, #2]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001934:	e003      	b.n	800193e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001936:	887b      	ldrh	r3, [r7, #2]
 8001938:	041a      	lsls	r2, r3, #16
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	619a      	str	r2, [r3, #24]
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800194a:	b480      	push	{r7}
 800194c:	b085      	sub	sp, #20
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
 8001952:	460b      	mov	r3, r1
 8001954:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800195c:	887a      	ldrh	r2, [r7, #2]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	4013      	ands	r3, r2
 8001962:	041a      	lsls	r2, r3, #16
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	43d9      	mvns	r1, r3
 8001968:	887b      	ldrh	r3, [r7, #2]
 800196a:	400b      	ands	r3, r1
 800196c:	431a      	orrs	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	619a      	str	r2, [r3, #24]
}
 8001972:	bf00      	nop
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
	...

08001980 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e267      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d075      	beq.n	8001a8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800199e:	4b88      	ldr	r3, [pc, #544]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 030c 	and.w	r3, r3, #12
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	d00c      	beq.n	80019c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019aa:	4b85      	ldr	r3, [pc, #532]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019b2:	2b08      	cmp	r3, #8
 80019b4:	d112      	bne.n	80019dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019b6:	4b82      	ldr	r3, [pc, #520]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019c2:	d10b      	bne.n	80019dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c4:	4b7e      	ldr	r3, [pc, #504]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d05b      	beq.n	8001a88 <HAL_RCC_OscConfig+0x108>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d157      	bne.n	8001a88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e242      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e4:	d106      	bne.n	80019f4 <HAL_RCC_OscConfig+0x74>
 80019e6:	4b76      	ldr	r3, [pc, #472]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a75      	ldr	r2, [pc, #468]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 80019ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	e01d      	b.n	8001a30 <HAL_RCC_OscConfig+0xb0>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019fc:	d10c      	bne.n	8001a18 <HAL_RCC_OscConfig+0x98>
 80019fe:	4b70      	ldr	r3, [pc, #448]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a6f      	ldr	r2, [pc, #444]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001a04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	4b6d      	ldr	r3, [pc, #436]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a6c      	ldr	r2, [pc, #432]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	e00b      	b.n	8001a30 <HAL_RCC_OscConfig+0xb0>
 8001a18:	4b69      	ldr	r3, [pc, #420]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a68      	ldr	r2, [pc, #416]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001a1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a22:	6013      	str	r3, [r2, #0]
 8001a24:	4b66      	ldr	r3, [pc, #408]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a65      	ldr	r2, [pc, #404]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001a2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d013      	beq.n	8001a60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a38:	f7ff fcd4 	bl	80013e4 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a40:	f7ff fcd0 	bl	80013e4 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b64      	cmp	r3, #100	; 0x64
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e207      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a52:	4b5b      	ldr	r3, [pc, #364]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0f0      	beq.n	8001a40 <HAL_RCC_OscConfig+0xc0>
 8001a5e:	e014      	b.n	8001a8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a60:	f7ff fcc0 	bl	80013e4 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a68:	f7ff fcbc 	bl	80013e4 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b64      	cmp	r3, #100	; 0x64
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e1f3      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a7a:	4b51      	ldr	r3, [pc, #324]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f0      	bne.n	8001a68 <HAL_RCC_OscConfig+0xe8>
 8001a86:	e000      	b.n	8001a8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d063      	beq.n	8001b5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a96:	4b4a      	ldr	r3, [pc, #296]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 030c 	and.w	r3, r3, #12
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00b      	beq.n	8001aba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aa2:	4b47      	ldr	r3, [pc, #284]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001aaa:	2b08      	cmp	r3, #8
 8001aac:	d11c      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aae:	4b44      	ldr	r3, [pc, #272]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d116      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aba:	4b41      	ldr	r3, [pc, #260]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d005      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x152>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d001      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e1c7      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad2:	4b3b      	ldr	r3, [pc, #236]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	4937      	ldr	r1, [pc, #220]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae6:	e03a      	b.n	8001b5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d020      	beq.n	8001b32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001af0:	4b34      	ldr	r3, [pc, #208]	; (8001bc4 <HAL_RCC_OscConfig+0x244>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af6:	f7ff fc75 	bl	80013e4 <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001afe:	f7ff fc71 	bl	80013e4 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e1a8      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b10:	4b2b      	ldr	r3, [pc, #172]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0f0      	beq.n	8001afe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1c:	4b28      	ldr	r3, [pc, #160]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	4925      	ldr	r1, [pc, #148]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	600b      	str	r3, [r1, #0]
 8001b30:	e015      	b.n	8001b5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b32:	4b24      	ldr	r3, [pc, #144]	; (8001bc4 <HAL_RCC_OscConfig+0x244>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b38:	f7ff fc54 	bl	80013e4 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b40:	f7ff fc50 	bl	80013e4 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e187      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b52:	4b1b      	ldr	r3, [pc, #108]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1f0      	bne.n	8001b40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d036      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d016      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b72:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <HAL_RCC_OscConfig+0x248>)
 8001b74:	2201      	movs	r2, #1
 8001b76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b78:	f7ff fc34 	bl	80013e4 <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b80:	f7ff fc30 	bl	80013e4 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e167      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b92:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <HAL_RCC_OscConfig+0x240>)
 8001b94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0f0      	beq.n	8001b80 <HAL_RCC_OscConfig+0x200>
 8001b9e:	e01b      	b.n	8001bd8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ba0:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <HAL_RCC_OscConfig+0x248>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba6:	f7ff fc1d 	bl	80013e4 <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bac:	e00e      	b.n	8001bcc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bae:	f7ff fc19 	bl	80013e4 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d907      	bls.n	8001bcc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e150      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	42470000 	.word	0x42470000
 8001bc8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bcc:	4b88      	ldr	r3, [pc, #544]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001bce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1ea      	bne.n	8001bae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 8097 	beq.w	8001d14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be6:	2300      	movs	r3, #0
 8001be8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bea:	4b81      	ldr	r3, [pc, #516]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d10f      	bne.n	8001c16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	4b7d      	ldr	r3, [pc, #500]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	4a7c      	ldr	r2, [pc, #496]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c04:	6413      	str	r3, [r2, #64]	; 0x40
 8001c06:	4b7a      	ldr	r3, [pc, #488]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c12:	2301      	movs	r3, #1
 8001c14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c16:	4b77      	ldr	r3, [pc, #476]	; (8001df4 <HAL_RCC_OscConfig+0x474>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d118      	bne.n	8001c54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c22:	4b74      	ldr	r3, [pc, #464]	; (8001df4 <HAL_RCC_OscConfig+0x474>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a73      	ldr	r2, [pc, #460]	; (8001df4 <HAL_RCC_OscConfig+0x474>)
 8001c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c2e:	f7ff fbd9 	bl	80013e4 <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c36:	f7ff fbd5 	bl	80013e4 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e10c      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c48:	4b6a      	ldr	r3, [pc, #424]	; (8001df4 <HAL_RCC_OscConfig+0x474>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0f0      	beq.n	8001c36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d106      	bne.n	8001c6a <HAL_RCC_OscConfig+0x2ea>
 8001c5c:	4b64      	ldr	r3, [pc, #400]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c60:	4a63      	ldr	r2, [pc, #396]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	6713      	str	r3, [r2, #112]	; 0x70
 8001c68:	e01c      	b.n	8001ca4 <HAL_RCC_OscConfig+0x324>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	2b05      	cmp	r3, #5
 8001c70:	d10c      	bne.n	8001c8c <HAL_RCC_OscConfig+0x30c>
 8001c72:	4b5f      	ldr	r3, [pc, #380]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c76:	4a5e      	ldr	r2, [pc, #376]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c78:	f043 0304 	orr.w	r3, r3, #4
 8001c7c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c7e:	4b5c      	ldr	r3, [pc, #368]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c82:	4a5b      	ldr	r2, [pc, #364]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6713      	str	r3, [r2, #112]	; 0x70
 8001c8a:	e00b      	b.n	8001ca4 <HAL_RCC_OscConfig+0x324>
 8001c8c:	4b58      	ldr	r3, [pc, #352]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c90:	4a57      	ldr	r2, [pc, #348]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c92:	f023 0301 	bic.w	r3, r3, #1
 8001c96:	6713      	str	r3, [r2, #112]	; 0x70
 8001c98:	4b55      	ldr	r3, [pc, #340]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c9c:	4a54      	ldr	r2, [pc, #336]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001c9e:	f023 0304 	bic.w	r3, r3, #4
 8001ca2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d015      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cac:	f7ff fb9a 	bl	80013e4 <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cb2:	e00a      	b.n	8001cca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cb4:	f7ff fb96 	bl	80013e4 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e0cb      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cca:	4b49      	ldr	r3, [pc, #292]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d0ee      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x334>
 8001cd6:	e014      	b.n	8001d02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd8:	f7ff fb84 	bl	80013e4 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cde:	e00a      	b.n	8001cf6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ce0:	f7ff fb80 	bl	80013e4 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e0b5      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf6:	4b3e      	ldr	r3, [pc, #248]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1ee      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d02:	7dfb      	ldrb	r3, [r7, #23]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d105      	bne.n	8001d14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d08:	4b39      	ldr	r3, [pc, #228]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0c:	4a38      	ldr	r2, [pc, #224]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001d0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 80a1 	beq.w	8001e60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d1e:	4b34      	ldr	r3, [pc, #208]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 030c 	and.w	r3, r3, #12
 8001d26:	2b08      	cmp	r3, #8
 8001d28:	d05c      	beq.n	8001de4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d141      	bne.n	8001db6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d32:	4b31      	ldr	r3, [pc, #196]	; (8001df8 <HAL_RCC_OscConfig+0x478>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d38:	f7ff fb54 	bl	80013e4 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d40:	f7ff fb50 	bl	80013e4 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e087      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d52:	4b27      	ldr	r3, [pc, #156]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f0      	bne.n	8001d40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69da      	ldr	r2, [r3, #28]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	431a      	orrs	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6c:	019b      	lsls	r3, r3, #6
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d74:	085b      	lsrs	r3, r3, #1
 8001d76:	3b01      	subs	r3, #1
 8001d78:	041b      	lsls	r3, r3, #16
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d80:	061b      	lsls	r3, r3, #24
 8001d82:	491b      	ldr	r1, [pc, #108]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d88:	4b1b      	ldr	r3, [pc, #108]	; (8001df8 <HAL_RCC_OscConfig+0x478>)
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8e:	f7ff fb29 	bl	80013e4 <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d96:	f7ff fb25 	bl	80013e4 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e05c      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da8:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d0f0      	beq.n	8001d96 <HAL_RCC_OscConfig+0x416>
 8001db4:	e054      	b.n	8001e60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db6:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <HAL_RCC_OscConfig+0x478>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbc:	f7ff fb12 	bl	80013e4 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dc4:	f7ff fb0e 	bl	80013e4 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e045      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dd6:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <HAL_RCC_OscConfig+0x470>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f0      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x444>
 8001de2:	e03d      	b.n	8001e60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d107      	bne.n	8001dfc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e038      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
 8001df0:	40023800 	.word	0x40023800
 8001df4:	40007000 	.word	0x40007000
 8001df8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001dfc:	4b1b      	ldr	r3, [pc, #108]	; (8001e6c <HAL_RCC_OscConfig+0x4ec>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d028      	beq.n	8001e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d121      	bne.n	8001e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d11a      	bne.n	8001e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d111      	bne.n	8001e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e42:	085b      	lsrs	r3, r3, #1
 8001e44:	3b01      	subs	r3, #1
 8001e46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d107      	bne.n	8001e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d001      	beq.n	8001e60 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e000      	b.n	8001e62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3718      	adds	r7, #24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40023800 	.word	0x40023800

08001e70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d101      	bne.n	8001e84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e0cc      	b.n	800201e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e84:	4b68      	ldr	r3, [pc, #416]	; (8002028 <HAL_RCC_ClockConfig+0x1b8>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d90c      	bls.n	8001eac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e92:	4b65      	ldr	r3, [pc, #404]	; (8002028 <HAL_RCC_ClockConfig+0x1b8>)
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e9a:	4b63      	ldr	r3, [pc, #396]	; (8002028 <HAL_RCC_ClockConfig+0x1b8>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d001      	beq.n	8001eac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e0b8      	b.n	800201e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d020      	beq.n	8001efa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d005      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ec4:	4b59      	ldr	r3, [pc, #356]	; (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	4a58      	ldr	r2, [pc, #352]	; (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001eca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ece:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0308 	and.w	r3, r3, #8
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d005      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001edc:	4b53      	ldr	r3, [pc, #332]	; (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	4a52      	ldr	r2, [pc, #328]	; (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001ee2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ee6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee8:	4b50      	ldr	r3, [pc, #320]	; (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	494d      	ldr	r1, [pc, #308]	; (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d044      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d107      	bne.n	8001f1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0e:	4b47      	ldr	r3, [pc, #284]	; (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d119      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e07f      	b.n	800201e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d003      	beq.n	8001f2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f2a:	2b03      	cmp	r3, #3
 8001f2c:	d107      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f2e:	4b3f      	ldr	r3, [pc, #252]	; (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d109      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e06f      	b.n	800201e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f3e:	4b3b      	ldr	r3, [pc, #236]	; (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e067      	b.n	800201e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f4e:	4b37      	ldr	r3, [pc, #220]	; (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f023 0203 	bic.w	r2, r3, #3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	4934      	ldr	r1, [pc, #208]	; (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f60:	f7ff fa40 	bl	80013e4 <HAL_GetTick>
 8001f64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f66:	e00a      	b.n	8001f7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f68:	f7ff fa3c 	bl	80013e4 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e04f      	b.n	800201e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7e:	4b2b      	ldr	r3, [pc, #172]	; (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 020c 	and.w	r2, r3, #12
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d1eb      	bne.n	8001f68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f90:	4b25      	ldr	r3, [pc, #148]	; (8002028 <HAL_RCC_ClockConfig+0x1b8>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d20c      	bcs.n	8001fb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9e:	4b22      	ldr	r3, [pc, #136]	; (8002028 <HAL_RCC_ClockConfig+0x1b8>)
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa6:	4b20      	ldr	r3, [pc, #128]	; (8002028 <HAL_RCC_ClockConfig+0x1b8>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d001      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e032      	b.n	800201e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d008      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fc4:	4b19      	ldr	r3, [pc, #100]	; (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	4916      	ldr	r1, [pc, #88]	; (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d009      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fe2:	4b12      	ldr	r3, [pc, #72]	; (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	490e      	ldr	r1, [pc, #56]	; (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ff6:	f000 f821 	bl	800203c <HAL_RCC_GetSysClockFreq>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	; (800202c <HAL_RCC_ClockConfig+0x1bc>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	091b      	lsrs	r3, r3, #4
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	490a      	ldr	r1, [pc, #40]	; (8002030 <HAL_RCC_ClockConfig+0x1c0>)
 8002008:	5ccb      	ldrb	r3, [r1, r3]
 800200a:	fa22 f303 	lsr.w	r3, r2, r3
 800200e:	4a09      	ldr	r2, [pc, #36]	; (8002034 <HAL_RCC_ClockConfig+0x1c4>)
 8002010:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002012:	4b09      	ldr	r3, [pc, #36]	; (8002038 <HAL_RCC_ClockConfig+0x1c8>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff f9a0 	bl	800135c <HAL_InitTick>

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40023c00 	.word	0x40023c00
 800202c:	40023800 	.word	0x40023800
 8002030:	08003680 	.word	0x08003680
 8002034:	20000024 	.word	0x20000024
 8002038:	20000028 	.word	0x20000028

0800203c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800203c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002040:	b090      	sub	sp, #64	; 0x40
 8002042:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002044:	2300      	movs	r3, #0
 8002046:	637b      	str	r3, [r7, #52]	; 0x34
 8002048:	2300      	movs	r3, #0
 800204a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800204c:	2300      	movs	r3, #0
 800204e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002050:	2300      	movs	r3, #0
 8002052:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002054:	4b59      	ldr	r3, [pc, #356]	; (80021bc <HAL_RCC_GetSysClockFreq+0x180>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 030c 	and.w	r3, r3, #12
 800205c:	2b08      	cmp	r3, #8
 800205e:	d00d      	beq.n	800207c <HAL_RCC_GetSysClockFreq+0x40>
 8002060:	2b08      	cmp	r3, #8
 8002062:	f200 80a1 	bhi.w	80021a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002066:	2b00      	cmp	r3, #0
 8002068:	d002      	beq.n	8002070 <HAL_RCC_GetSysClockFreq+0x34>
 800206a:	2b04      	cmp	r3, #4
 800206c:	d003      	beq.n	8002076 <HAL_RCC_GetSysClockFreq+0x3a>
 800206e:	e09b      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002070:	4b53      	ldr	r3, [pc, #332]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002072:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002074:	e09b      	b.n	80021ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002076:	4b53      	ldr	r3, [pc, #332]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002078:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800207a:	e098      	b.n	80021ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800207c:	4b4f      	ldr	r3, [pc, #316]	; (80021bc <HAL_RCC_GetSysClockFreq+0x180>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002084:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002086:	4b4d      	ldr	r3, [pc, #308]	; (80021bc <HAL_RCC_GetSysClockFreq+0x180>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d028      	beq.n	80020e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002092:	4b4a      	ldr	r3, [pc, #296]	; (80021bc <HAL_RCC_GetSysClockFreq+0x180>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	099b      	lsrs	r3, r3, #6
 8002098:	2200      	movs	r2, #0
 800209a:	623b      	str	r3, [r7, #32]
 800209c:	627a      	str	r2, [r7, #36]	; 0x24
 800209e:	6a3b      	ldr	r3, [r7, #32]
 80020a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80020a4:	2100      	movs	r1, #0
 80020a6:	4b47      	ldr	r3, [pc, #284]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80020a8:	fb03 f201 	mul.w	r2, r3, r1
 80020ac:	2300      	movs	r3, #0
 80020ae:	fb00 f303 	mul.w	r3, r0, r3
 80020b2:	4413      	add	r3, r2
 80020b4:	4a43      	ldr	r2, [pc, #268]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80020b6:	fba0 1202 	umull	r1, r2, r0, r2
 80020ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80020bc:	460a      	mov	r2, r1
 80020be:	62ba      	str	r2, [r7, #40]	; 0x28
 80020c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020c2:	4413      	add	r3, r2
 80020c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020c8:	2200      	movs	r2, #0
 80020ca:	61bb      	str	r3, [r7, #24]
 80020cc:	61fa      	str	r2, [r7, #28]
 80020ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80020d6:	f7fe f87f 	bl	80001d8 <__aeabi_uldivmod>
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	4613      	mov	r3, r2
 80020e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020e2:	e053      	b.n	800218c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020e4:	4b35      	ldr	r3, [pc, #212]	; (80021bc <HAL_RCC_GetSysClockFreq+0x180>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	099b      	lsrs	r3, r3, #6
 80020ea:	2200      	movs	r2, #0
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	617a      	str	r2, [r7, #20]
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80020f6:	f04f 0b00 	mov.w	fp, #0
 80020fa:	4652      	mov	r2, sl
 80020fc:	465b      	mov	r3, fp
 80020fe:	f04f 0000 	mov.w	r0, #0
 8002102:	f04f 0100 	mov.w	r1, #0
 8002106:	0159      	lsls	r1, r3, #5
 8002108:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800210c:	0150      	lsls	r0, r2, #5
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	ebb2 080a 	subs.w	r8, r2, sl
 8002116:	eb63 090b 	sbc.w	r9, r3, fp
 800211a:	f04f 0200 	mov.w	r2, #0
 800211e:	f04f 0300 	mov.w	r3, #0
 8002122:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002126:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800212a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800212e:	ebb2 0408 	subs.w	r4, r2, r8
 8002132:	eb63 0509 	sbc.w	r5, r3, r9
 8002136:	f04f 0200 	mov.w	r2, #0
 800213a:	f04f 0300 	mov.w	r3, #0
 800213e:	00eb      	lsls	r3, r5, #3
 8002140:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002144:	00e2      	lsls	r2, r4, #3
 8002146:	4614      	mov	r4, r2
 8002148:	461d      	mov	r5, r3
 800214a:	eb14 030a 	adds.w	r3, r4, sl
 800214e:	603b      	str	r3, [r7, #0]
 8002150:	eb45 030b 	adc.w	r3, r5, fp
 8002154:	607b      	str	r3, [r7, #4]
 8002156:	f04f 0200 	mov.w	r2, #0
 800215a:	f04f 0300 	mov.w	r3, #0
 800215e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002162:	4629      	mov	r1, r5
 8002164:	028b      	lsls	r3, r1, #10
 8002166:	4621      	mov	r1, r4
 8002168:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800216c:	4621      	mov	r1, r4
 800216e:	028a      	lsls	r2, r1, #10
 8002170:	4610      	mov	r0, r2
 8002172:	4619      	mov	r1, r3
 8002174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002176:	2200      	movs	r2, #0
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	60fa      	str	r2, [r7, #12]
 800217c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002180:	f7fe f82a 	bl	80001d8 <__aeabi_uldivmod>
 8002184:	4602      	mov	r2, r0
 8002186:	460b      	mov	r3, r1
 8002188:	4613      	mov	r3, r2
 800218a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800218c:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <HAL_RCC_GetSysClockFreq+0x180>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	0c1b      	lsrs	r3, r3, #16
 8002192:	f003 0303 	and.w	r3, r3, #3
 8002196:	3301      	adds	r3, #1
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800219c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800219e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80021a6:	e002      	b.n	80021ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021a8:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80021aa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80021ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3740      	adds	r7, #64	; 0x40
 80021b4:	46bd      	mov	sp, r7
 80021b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021ba:	bf00      	nop
 80021bc:	40023800 	.word	0x40023800
 80021c0:	00f42400 	.word	0x00f42400
 80021c4:	017d7840 	.word	0x017d7840

080021c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021cc:	4b03      	ldr	r3, [pc, #12]	; (80021dc <HAL_RCC_GetHCLKFreq+0x14>)
 80021ce:	681b      	ldr	r3, [r3, #0]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	20000024 	.word	0x20000024

080021e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80021e4:	f7ff fff0 	bl	80021c8 <HAL_RCC_GetHCLKFreq>
 80021e8:	4602      	mov	r2, r0
 80021ea:	4b05      	ldr	r3, [pc, #20]	; (8002200 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	0a9b      	lsrs	r3, r3, #10
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	4903      	ldr	r1, [pc, #12]	; (8002204 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021f6:	5ccb      	ldrb	r3, [r1, r3]
 80021f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40023800 	.word	0x40023800
 8002204:	08003690 	.word	0x08003690

08002208 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800220c:	f7ff ffdc 	bl	80021c8 <HAL_RCC_GetHCLKFreq>
 8002210:	4602      	mov	r2, r0
 8002212:	4b05      	ldr	r3, [pc, #20]	; (8002228 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	0b5b      	lsrs	r3, r3, #13
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	4903      	ldr	r1, [pc, #12]	; (800222c <HAL_RCC_GetPCLK2Freq+0x24>)
 800221e:	5ccb      	ldrb	r3, [r1, r3]
 8002220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002224:	4618      	mov	r0, r3
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40023800 	.word	0x40023800
 800222c:	08003690 	.word	0x08003690

08002230 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e07b      	b.n	800233a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002246:	2b00      	cmp	r3, #0
 8002248:	d108      	bne.n	800225c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002252:	d009      	beq.n	8002268 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	61da      	str	r2, [r3, #28]
 800225a:	e005      	b.n	8002268 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d106      	bne.n	8002288 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7fe ff52 	bl	800112c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2202      	movs	r2, #2
 800228c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800229e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80022b0:	431a      	orrs	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022d8:	431a      	orrs	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022e2:	431a      	orrs	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ec:	ea42 0103 	orr.w	r1, r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	430a      	orrs	r2, r1
 80022fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	0c1b      	lsrs	r3, r3, #16
 8002306:	f003 0104 	and.w	r1, r3, #4
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230e:	f003 0210 	and.w	r2, r3, #16
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	69da      	ldr	r2, [r3, #28]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002328:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b088      	sub	sp, #32
 8002346:	af00      	add	r7, sp, #0
 8002348:	60f8      	str	r0, [r7, #12]
 800234a:	60b9      	str	r1, [r7, #8]
 800234c:	603b      	str	r3, [r7, #0]
 800234e:	4613      	mov	r3, r2
 8002350:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002352:	2300      	movs	r3, #0
 8002354:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800235c:	2b01      	cmp	r3, #1
 800235e:	d101      	bne.n	8002364 <HAL_SPI_Transmit+0x22>
 8002360:	2302      	movs	r3, #2
 8002362:	e12d      	b.n	80025c0 <HAL_SPI_Transmit+0x27e>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800236c:	f7ff f83a 	bl	80013e4 <HAL_GetTick>
 8002370:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002372:	88fb      	ldrh	r3, [r7, #6]
 8002374:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b01      	cmp	r3, #1
 8002380:	d002      	beq.n	8002388 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002382:	2302      	movs	r3, #2
 8002384:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002386:	e116      	b.n	80025b6 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d002      	beq.n	8002394 <HAL_SPI_Transmit+0x52>
 800238e:	88fb      	ldrh	r3, [r7, #6]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d102      	bne.n	800239a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002398:	e10d      	b.n	80025b6 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2203      	movs	r2, #3
 800239e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	88fa      	ldrh	r2, [r7, #6]
 80023b2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	88fa      	ldrh	r2, [r7, #6]
 80023b8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2200      	movs	r2, #0
 80023d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023e0:	d10f      	bne.n	8002402 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002400:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800240c:	2b40      	cmp	r3, #64	; 0x40
 800240e:	d007      	beq.n	8002420 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800241e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002428:	d14f      	bne.n	80024ca <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d002      	beq.n	8002438 <HAL_SPI_Transmit+0xf6>
 8002432:	8afb      	ldrh	r3, [r7, #22]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d142      	bne.n	80024be <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243c:	881a      	ldrh	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002448:	1c9a      	adds	r2, r3, #2
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002452:	b29b      	uxth	r3, r3
 8002454:	3b01      	subs	r3, #1
 8002456:	b29a      	uxth	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800245c:	e02f      	b.n	80024be <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b02      	cmp	r3, #2
 800246a:	d112      	bne.n	8002492 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002470:	881a      	ldrh	r2, [r3, #0]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247c:	1c9a      	adds	r2, r3, #2
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002486:	b29b      	uxth	r3, r3
 8002488:	3b01      	subs	r3, #1
 800248a:	b29a      	uxth	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002490:	e015      	b.n	80024be <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002492:	f7fe ffa7 	bl	80013e4 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d803      	bhi.n	80024aa <HAL_SPI_Transmit+0x168>
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a8:	d102      	bne.n	80024b0 <HAL_SPI_Transmit+0x16e>
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d106      	bne.n	80024be <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80024bc:	e07b      	b.n	80025b6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1ca      	bne.n	800245e <HAL_SPI_Transmit+0x11c>
 80024c8:	e050      	b.n	800256c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d002      	beq.n	80024d8 <HAL_SPI_Transmit+0x196>
 80024d2:	8afb      	ldrh	r3, [r7, #22]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d144      	bne.n	8002562 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	330c      	adds	r3, #12
 80024e2:	7812      	ldrb	r2, [r2, #0]
 80024e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	1c5a      	adds	r2, r3, #1
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	3b01      	subs	r3, #1
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80024fe:	e030      	b.n	8002562 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b02      	cmp	r3, #2
 800250c:	d113      	bne.n	8002536 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	330c      	adds	r3, #12
 8002518:	7812      	ldrb	r2, [r2, #0]
 800251a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002520:	1c5a      	adds	r2, r3, #1
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800252a:	b29b      	uxth	r3, r3
 800252c:	3b01      	subs	r3, #1
 800252e:	b29a      	uxth	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	86da      	strh	r2, [r3, #54]	; 0x36
 8002534:	e015      	b.n	8002562 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002536:	f7fe ff55 	bl	80013e4 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	429a      	cmp	r2, r3
 8002544:	d803      	bhi.n	800254e <HAL_SPI_Transmit+0x20c>
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800254c:	d102      	bne.n	8002554 <HAL_SPI_Transmit+0x212>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d106      	bne.n	8002562 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002560:	e029      	b.n	80025b6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002566:	b29b      	uxth	r3, r3
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1c9      	bne.n	8002500 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	6839      	ldr	r1, [r7, #0]
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f000 fbed 	bl	8002d50 <SPI_EndRxTxTransaction>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d002      	beq.n	8002582 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2220      	movs	r2, #32
 8002580:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10a      	bne.n	80025a0 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800258a:	2300      	movs	r3, #0
 800258c:	613b      	str	r3, [r7, #16]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	613b      	str	r3, [r7, #16]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	613b      	str	r3, [r7, #16]
 800259e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d002      	beq.n	80025ae <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	77fb      	strb	r3, [r7, #31]
 80025ac:	e003      	b.n	80025b6 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80025be:	7ffb      	ldrb	r3, [r7, #31]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3720      	adds	r7, #32
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b088      	sub	sp, #32
 80025cc:	af02      	add	r7, sp, #8
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	603b      	str	r3, [r7, #0]
 80025d4:	4613      	mov	r3, r2
 80025d6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025d8:	2300      	movs	r3, #0
 80025da:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d002      	beq.n	80025ee <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80025e8:	2302      	movs	r3, #2
 80025ea:	75fb      	strb	r3, [r7, #23]
    goto error;
 80025ec:	e0fb      	b.n	80027e6 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025f6:	d112      	bne.n	800261e <HAL_SPI_Receive+0x56>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d10e      	bne.n	800261e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2204      	movs	r2, #4
 8002604:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002608:	88fa      	ldrh	r2, [r7, #6]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	4613      	mov	r3, r2
 8002610:	68ba      	ldr	r2, [r7, #8]
 8002612:	68b9      	ldr	r1, [r7, #8]
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f000 f8ef 	bl	80027f8 <HAL_SPI_TransmitReceive>
 800261a:	4603      	mov	r3, r0
 800261c:	e0e8      	b.n	80027f0 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002624:	2b01      	cmp	r3, #1
 8002626:	d101      	bne.n	800262c <HAL_SPI_Receive+0x64>
 8002628:	2302      	movs	r3, #2
 800262a:	e0e1      	b.n	80027f0 <HAL_SPI_Receive+0x228>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002634:	f7fe fed6 	bl	80013e4 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d002      	beq.n	8002646 <HAL_SPI_Receive+0x7e>
 8002640:	88fb      	ldrh	r3, [r7, #6]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d102      	bne.n	800264c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	75fb      	strb	r3, [r7, #23]
    goto error;
 800264a:	e0cc      	b.n	80027e6 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2204      	movs	r2, #4
 8002650:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	68ba      	ldr	r2, [r7, #8]
 800265e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	88fa      	ldrh	r2, [r7, #6]
 8002664:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	88fa      	ldrh	r2, [r7, #6]
 800266a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002692:	d10f      	bne.n	80026b4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80026b2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026be:	2b40      	cmp	r3, #64	; 0x40
 80026c0:	d007      	beq.n	80026d2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026d0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d16a      	bne.n	80027b0 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80026da:	e032      	b.n	8002742 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d115      	bne.n	8002716 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f103 020c 	add.w	r2, r3, #12
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f6:	7812      	ldrb	r2, [r2, #0]
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002700:	1c5a      	adds	r2, r3, #1
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800270a:	b29b      	uxth	r3, r3
 800270c:	3b01      	subs	r3, #1
 800270e:	b29a      	uxth	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002714:	e015      	b.n	8002742 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002716:	f7fe fe65 	bl	80013e4 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d803      	bhi.n	800272e <HAL_SPI_Receive+0x166>
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272c:	d102      	bne.n	8002734 <HAL_SPI_Receive+0x16c>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d106      	bne.n	8002742 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002740:	e051      	b.n	80027e6 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002746:	b29b      	uxth	r3, r3
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1c7      	bne.n	80026dc <HAL_SPI_Receive+0x114>
 800274c:	e035      	b.n	80027ba <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b01      	cmp	r3, #1
 800275a:	d113      	bne.n	8002784 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68da      	ldr	r2, [r3, #12]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002766:	b292      	uxth	r2, r2
 8002768:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276e:	1c9a      	adds	r2, r3, #2
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002778:	b29b      	uxth	r3, r3
 800277a:	3b01      	subs	r3, #1
 800277c:	b29a      	uxth	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002782:	e015      	b.n	80027b0 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002784:	f7fe fe2e 	bl	80013e4 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	429a      	cmp	r2, r3
 8002792:	d803      	bhi.n	800279c <HAL_SPI_Receive+0x1d4>
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800279a:	d102      	bne.n	80027a2 <HAL_SPI_Receive+0x1da>
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d106      	bne.n	80027b0 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80027ae:	e01a      	b.n	80027e6 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1c9      	bne.n	800274e <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	6839      	ldr	r1, [r7, #0]
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 fa60 	bl	8002c84 <SPI_EndRxTransaction>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d002      	beq.n	80027d0 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2220      	movs	r2, #32
 80027ce:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d002      	beq.n	80027de <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	75fb      	strb	r3, [r7, #23]
 80027dc:	e003      	b.n	80027e6 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3718      	adds	r7, #24
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08c      	sub	sp, #48	; 0x30
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
 8002804:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002806:	2301      	movs	r3, #1
 8002808:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800280a:	2300      	movs	r3, #0
 800280c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002816:	2b01      	cmp	r3, #1
 8002818:	d101      	bne.n	800281e <HAL_SPI_TransmitReceive+0x26>
 800281a:	2302      	movs	r3, #2
 800281c:	e198      	b.n	8002b50 <HAL_SPI_TransmitReceive+0x358>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002826:	f7fe fddd 	bl	80013e4 <HAL_GetTick>
 800282a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800283c:	887b      	ldrh	r3, [r7, #2]
 800283e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002840:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002844:	2b01      	cmp	r3, #1
 8002846:	d00f      	beq.n	8002868 <HAL_SPI_TransmitReceive+0x70>
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800284e:	d107      	bne.n	8002860 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d103      	bne.n	8002860 <HAL_SPI_TransmitReceive+0x68>
 8002858:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800285c:	2b04      	cmp	r3, #4
 800285e:	d003      	beq.n	8002868 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002860:	2302      	movs	r3, #2
 8002862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002866:	e16d      	b.n	8002b44 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d005      	beq.n	800287a <HAL_SPI_TransmitReceive+0x82>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d002      	beq.n	800287a <HAL_SPI_TransmitReceive+0x82>
 8002874:	887b      	ldrh	r3, [r7, #2]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d103      	bne.n	8002882 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002880:	e160      	b.n	8002b44 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b04      	cmp	r3, #4
 800288c:	d003      	beq.n	8002896 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2205      	movs	r2, #5
 8002892:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	887a      	ldrh	r2, [r7, #2]
 80028a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	887a      	ldrh	r2, [r7, #2]
 80028ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	68ba      	ldr	r2, [r7, #8]
 80028b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	887a      	ldrh	r2, [r7, #2]
 80028b8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	887a      	ldrh	r2, [r7, #2]
 80028be:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d6:	2b40      	cmp	r3, #64	; 0x40
 80028d8:	d007      	beq.n	80028ea <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028f2:	d17c      	bne.n	80029ee <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d002      	beq.n	8002902 <HAL_SPI_TransmitReceive+0x10a>
 80028fc:	8b7b      	ldrh	r3, [r7, #26]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d16a      	bne.n	80029d8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	881a      	ldrh	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	1c9a      	adds	r2, r3, #2
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800291c:	b29b      	uxth	r3, r3
 800291e:	3b01      	subs	r3, #1
 8002920:	b29a      	uxth	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002926:	e057      	b.n	80029d8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b02      	cmp	r3, #2
 8002934:	d11b      	bne.n	800296e <HAL_SPI_TransmitReceive+0x176>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800293a:	b29b      	uxth	r3, r3
 800293c:	2b00      	cmp	r3, #0
 800293e:	d016      	beq.n	800296e <HAL_SPI_TransmitReceive+0x176>
 8002940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002942:	2b01      	cmp	r3, #1
 8002944:	d113      	bne.n	800296e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294a:	881a      	ldrh	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	1c9a      	adds	r2, r3, #2
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002960:	b29b      	uxth	r3, r3
 8002962:	3b01      	subs	r3, #1
 8002964:	b29a      	uxth	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800296a:	2300      	movs	r3, #0
 800296c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b01      	cmp	r3, #1
 800297a:	d119      	bne.n	80029b0 <HAL_SPI_TransmitReceive+0x1b8>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002980:	b29b      	uxth	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d014      	beq.n	80029b0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68da      	ldr	r2, [r3, #12]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002990:	b292      	uxth	r2, r2
 8002992:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002998:	1c9a      	adds	r2, r3, #2
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	3b01      	subs	r3, #1
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029ac:	2301      	movs	r3, #1
 80029ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80029b0:	f7fe fd18 	bl	80013e4 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029bc:	429a      	cmp	r2, r3
 80029be:	d80b      	bhi.n	80029d8 <HAL_SPI_TransmitReceive+0x1e0>
 80029c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c6:	d007      	beq.n	80029d8 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80029d6:	e0b5      	b.n	8002b44 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029dc:	b29b      	uxth	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1a2      	bne.n	8002928 <HAL_SPI_TransmitReceive+0x130>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d19d      	bne.n	8002928 <HAL_SPI_TransmitReceive+0x130>
 80029ec:	e080      	b.n	8002af0 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d002      	beq.n	80029fc <HAL_SPI_TransmitReceive+0x204>
 80029f6:	8b7b      	ldrh	r3, [r7, #26]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d16f      	bne.n	8002adc <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	330c      	adds	r3, #12
 8002a06:	7812      	ldrb	r2, [r2, #0]
 8002a08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	1c5a      	adds	r2, r3, #1
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a22:	e05b      	b.n	8002adc <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d11c      	bne.n	8002a6c <HAL_SPI_TransmitReceive+0x274>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d017      	beq.n	8002a6c <HAL_SPI_TransmitReceive+0x274>
 8002a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d114      	bne.n	8002a6c <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	330c      	adds	r3, #12
 8002a4c:	7812      	ldrb	r2, [r2, #0]
 8002a4e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a54:	1c5a      	adds	r2, r3, #1
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	3b01      	subs	r3, #1
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d119      	bne.n	8002aae <HAL_SPI_TransmitReceive+0x2b6>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d014      	beq.n	8002aae <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68da      	ldr	r2, [r3, #12]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a96:	1c5a      	adds	r2, r3, #1
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002aae:	f7fe fc99 	bl	80013e4 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d803      	bhi.n	8002ac6 <HAL_SPI_TransmitReceive+0x2ce>
 8002abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac4:	d102      	bne.n	8002acc <HAL_SPI_TransmitReceive+0x2d4>
 8002ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d107      	bne.n	8002adc <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002ada:	e033      	b.n	8002b44 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d19e      	bne.n	8002a24 <HAL_SPI_TransmitReceive+0x22c>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d199      	bne.n	8002a24 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002af2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f000 f92b 	bl	8002d50 <SPI_EndRxTxTransaction>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d006      	beq.n	8002b0e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2220      	movs	r2, #32
 8002b0a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002b0c:	e01a      	b.n	8002b44 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10a      	bne.n	8002b2c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b16:	2300      	movs	r3, #0
 8002b18:	617b      	str	r3, [r7, #20]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	617b      	str	r3, [r7, #20]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	617b      	str	r3, [r7, #20]
 8002b2a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d003      	beq.n	8002b3c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b3a:	e003      	b.n	8002b44 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3730      	adds	r7, #48	; 0x30
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b66:	b2db      	uxtb	r3, r3
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b088      	sub	sp, #32
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	603b      	str	r3, [r7, #0]
 8002b80:	4613      	mov	r3, r2
 8002b82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b84:	f7fe fc2e 	bl	80013e4 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8c:	1a9b      	subs	r3, r3, r2
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	4413      	add	r3, r2
 8002b92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b94:	f7fe fc26 	bl	80013e4 <HAL_GetTick>
 8002b98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b9a:	4b39      	ldr	r3, [pc, #228]	; (8002c80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	015b      	lsls	r3, r3, #5
 8002ba0:	0d1b      	lsrs	r3, r3, #20
 8002ba2:	69fa      	ldr	r2, [r7, #28]
 8002ba4:	fb02 f303 	mul.w	r3, r2, r3
 8002ba8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002baa:	e054      	b.n	8002c56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb2:	d050      	beq.n	8002c56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002bb4:	f7fe fc16 	bl	80013e4 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	69fa      	ldr	r2, [r7, #28]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d902      	bls.n	8002bca <SPI_WaitFlagStateUntilTimeout+0x56>
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d13d      	bne.n	8002c46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002bd8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002be2:	d111      	bne.n	8002c08 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bec:	d004      	beq.n	8002bf8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bf6:	d107      	bne.n	8002c08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c10:	d10f      	bne.n	8002c32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e017      	b.n	8002c76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	3b01      	subs	r3, #1
 8002c54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	68ba      	ldr	r2, [r7, #8]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	bf0c      	ite	eq
 8002c66:	2301      	moveq	r3, #1
 8002c68:	2300      	movne	r3, #0
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	79fb      	ldrb	r3, [r7, #7]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d19b      	bne.n	8002bac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3720      	adds	r7, #32
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	20000024 	.word	0x20000024

08002c84 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af02      	add	r7, sp, #8
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c98:	d111      	bne.n	8002cbe <SPI_EndRxTransaction+0x3a>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ca2:	d004      	beq.n	8002cae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cac:	d107      	bne.n	8002cbe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cbc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cc6:	d12a      	bne.n	8002d1e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cd0:	d012      	beq.n	8002cf8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	9300      	str	r3, [sp, #0]
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	2180      	movs	r1, #128	; 0x80
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f7ff ff49 	bl	8002b74 <SPI_WaitFlagStateUntilTimeout>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d02d      	beq.n	8002d44 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cec:	f043 0220 	orr.w	r2, r3, #32
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e026      	b.n	8002d46 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	2101      	movs	r1, #1
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f7ff ff36 	bl	8002b74 <SPI_WaitFlagStateUntilTimeout>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d01a      	beq.n	8002d44 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d12:	f043 0220 	orr.w	r2, r3, #32
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e013      	b.n	8002d46 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	2200      	movs	r2, #0
 8002d26:	2101      	movs	r1, #1
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f7ff ff23 	bl	8002b74 <SPI_WaitFlagStateUntilTimeout>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d007      	beq.n	8002d44 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d38:	f043 0220 	orr.w	r2, r3, #32
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e000      	b.n	8002d46 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
	...

08002d50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b088      	sub	sp, #32
 8002d54:	af02      	add	r7, sp, #8
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	2201      	movs	r2, #1
 8002d64:	2102      	movs	r1, #2
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f7ff ff04 	bl	8002b74 <SPI_WaitFlagStateUntilTimeout>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d007      	beq.n	8002d82 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d76:	f043 0220 	orr.w	r2, r3, #32
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e032      	b.n	8002de8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002d82:	4b1b      	ldr	r3, [pc, #108]	; (8002df0 <SPI_EndRxTxTransaction+0xa0>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a1b      	ldr	r2, [pc, #108]	; (8002df4 <SPI_EndRxTxTransaction+0xa4>)
 8002d88:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8c:	0d5b      	lsrs	r3, r3, #21
 8002d8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d92:	fb02 f303 	mul.w	r3, r2, r3
 8002d96:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002da0:	d112      	bne.n	8002dc8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	2200      	movs	r2, #0
 8002daa:	2180      	movs	r1, #128	; 0x80
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f7ff fee1 	bl	8002b74 <SPI_WaitFlagStateUntilTimeout>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d016      	beq.n	8002de6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dbc:	f043 0220 	orr.w	r2, r3, #32
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e00f      	b.n	8002de8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00a      	beq.n	8002de4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dde:	2b80      	cmp	r3, #128	; 0x80
 8002de0:	d0f2      	beq.n	8002dc8 <SPI_EndRxTxTransaction+0x78>
 8002de2:	e000      	b.n	8002de6 <SPI_EndRxTxTransaction+0x96>
        break;
 8002de4:	bf00      	nop
  }

  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	20000024 	.word	0x20000024
 8002df4:	165e9f81 	.word	0x165e9f81

08002df8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e042      	b.n	8002e90 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d106      	bne.n	8002e24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7fe f9cc 	bl	80011bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2224      	movs	r2, #36	; 0x24
 8002e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68da      	ldr	r2, [r3, #12]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 f973 	bl	8003128 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	691a      	ldr	r2, [r3, #16]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	695a      	ldr	r2, [r3, #20]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68da      	ldr	r2, [r3, #12]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2220      	movs	r2, #32
 8002e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b08a      	sub	sp, #40	; 0x28
 8002e9c:	af02      	add	r7, sp, #8
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	603b      	str	r3, [r7, #0]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b20      	cmp	r3, #32
 8002eb6:	d175      	bne.n	8002fa4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d002      	beq.n	8002ec4 <HAL_UART_Transmit+0x2c>
 8002ebe:	88fb      	ldrh	r3, [r7, #6]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e06e      	b.n	8002fa6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2221      	movs	r2, #33	; 0x21
 8002ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ed6:	f7fe fa85 	bl	80013e4 <HAL_GetTick>
 8002eda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	88fa      	ldrh	r2, [r7, #6]
 8002ee0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	88fa      	ldrh	r2, [r7, #6]
 8002ee6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ef0:	d108      	bne.n	8002f04 <HAL_UART_Transmit+0x6c>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d104      	bne.n	8002f04 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002efa:	2300      	movs	r3, #0
 8002efc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	61bb      	str	r3, [r7, #24]
 8002f02:	e003      	b.n	8002f0c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f0c:	e02e      	b.n	8002f6c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	2200      	movs	r2, #0
 8002f16:	2180      	movs	r1, #128	; 0x80
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 f848 	bl	8002fae <UART_WaitOnFlagUntilTimeout>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d005      	beq.n	8002f30 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2220      	movs	r2, #32
 8002f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e03a      	b.n	8002fa6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10b      	bne.n	8002f4e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	881b      	ldrh	r3, [r3, #0]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	3302      	adds	r3, #2
 8002f4a:	61bb      	str	r3, [r7, #24]
 8002f4c:	e007      	b.n	8002f5e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	781a      	ldrb	r2, [r3, #0]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	3b01      	subs	r3, #1
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1cb      	bne.n	8002f0e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	2140      	movs	r1, #64	; 0x40
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f000 f814 	bl	8002fae <UART_WaitOnFlagUntilTimeout>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d005      	beq.n	8002f98 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e006      	b.n	8002fa6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	e000      	b.n	8002fa6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002fa4:	2302      	movs	r3, #2
  }
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3720      	adds	r7, #32
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b086      	sub	sp, #24
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	60f8      	str	r0, [r7, #12]
 8002fb6:	60b9      	str	r1, [r7, #8]
 8002fb8:	603b      	str	r3, [r7, #0]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fbe:	e03b      	b.n	8003038 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fc0:	6a3b      	ldr	r3, [r7, #32]
 8002fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc6:	d037      	beq.n	8003038 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc8:	f7fe fa0c 	bl	80013e4 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	6a3a      	ldr	r2, [r7, #32]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d302      	bcc.n	8002fde <UART_WaitOnFlagUntilTimeout+0x30>
 8002fd8:	6a3b      	ldr	r3, [r7, #32]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e03a      	b.n	8003058 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	f003 0304 	and.w	r3, r3, #4
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d023      	beq.n	8003038 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	2b80      	cmp	r3, #128	; 0x80
 8002ff4:	d020      	beq.n	8003038 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2b40      	cmp	r3, #64	; 0x40
 8002ffa:	d01d      	beq.n	8003038 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	2b08      	cmp	r3, #8
 8003008:	d116      	bne.n	8003038 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800300a:	2300      	movs	r3, #0
 800300c:	617b      	str	r3, [r7, #20]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	617b      	str	r3, [r7, #20]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	617b      	str	r3, [r7, #20]
 800301e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f000 f81d 	bl	8003060 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2208      	movs	r2, #8
 800302a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e00f      	b.n	8003058 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	4013      	ands	r3, r2
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	429a      	cmp	r2, r3
 8003046:	bf0c      	ite	eq
 8003048:	2301      	moveq	r3, #1
 800304a:	2300      	movne	r3, #0
 800304c:	b2db      	uxtb	r3, r3
 800304e:	461a      	mov	r2, r3
 8003050:	79fb      	ldrb	r3, [r7, #7]
 8003052:	429a      	cmp	r2, r3
 8003054:	d0b4      	beq.n	8002fc0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003060:	b480      	push	{r7}
 8003062:	b095      	sub	sp, #84	; 0x54
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	330c      	adds	r3, #12
 800306e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003072:	e853 3f00 	ldrex	r3, [r3]
 8003076:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800307e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	330c      	adds	r3, #12
 8003086:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003088:	643a      	str	r2, [r7, #64]	; 0x40
 800308a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800308c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800308e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003090:	e841 2300 	strex	r3, r2, [r1]
 8003094:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1e5      	bne.n	8003068 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	3314      	adds	r3, #20
 80030a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	e853 3f00 	ldrex	r3, [r3]
 80030aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	f023 0301 	bic.w	r3, r3, #1
 80030b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	3314      	adds	r3, #20
 80030ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030c4:	e841 2300 	strex	r3, r2, [r1]
 80030c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1e5      	bne.n	800309c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d119      	bne.n	800310c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	330c      	adds	r3, #12
 80030de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	e853 3f00 	ldrex	r3, [r3]
 80030e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	f023 0310 	bic.w	r3, r3, #16
 80030ee:	647b      	str	r3, [r7, #68]	; 0x44
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	330c      	adds	r3, #12
 80030f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030f8:	61ba      	str	r2, [r7, #24]
 80030fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030fc:	6979      	ldr	r1, [r7, #20]
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	e841 2300 	strex	r3, r2, [r1]
 8003104:	613b      	str	r3, [r7, #16]
   return(result);
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1e5      	bne.n	80030d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2220      	movs	r2, #32
 8003110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	631a      	str	r2, [r3, #48]	; 0x30
}
 800311a:	bf00      	nop
 800311c:	3754      	adds	r7, #84	; 0x54
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
	...

08003128 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003128:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800312c:	b0c0      	sub	sp, #256	; 0x100
 800312e:	af00      	add	r7, sp, #0
 8003130:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003144:	68d9      	ldr	r1, [r3, #12]
 8003146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	ea40 0301 	orr.w	r3, r0, r1
 8003150:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	431a      	orrs	r2, r3
 8003160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	431a      	orrs	r2, r3
 8003168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	4313      	orrs	r3, r2
 8003170:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003180:	f021 010c 	bic.w	r1, r1, #12
 8003184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800318e:	430b      	orrs	r3, r1
 8003190:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800319e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a2:	6999      	ldr	r1, [r3, #24]
 80031a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	ea40 0301 	orr.w	r3, r0, r1
 80031ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	4b8f      	ldr	r3, [pc, #572]	; (80033f4 <UART_SetConfig+0x2cc>)
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d005      	beq.n	80031c8 <UART_SetConfig+0xa0>
 80031bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	4b8d      	ldr	r3, [pc, #564]	; (80033f8 <UART_SetConfig+0x2d0>)
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d104      	bne.n	80031d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031c8:	f7ff f81e 	bl	8002208 <HAL_RCC_GetPCLK2Freq>
 80031cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80031d0:	e003      	b.n	80031da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031d2:	f7ff f805 	bl	80021e0 <HAL_RCC_GetPCLK1Freq>
 80031d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031e4:	f040 810c 	bne.w	8003400 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031ec:	2200      	movs	r2, #0
 80031ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80031f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80031f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80031fa:	4622      	mov	r2, r4
 80031fc:	462b      	mov	r3, r5
 80031fe:	1891      	adds	r1, r2, r2
 8003200:	65b9      	str	r1, [r7, #88]	; 0x58
 8003202:	415b      	adcs	r3, r3
 8003204:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003206:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800320a:	4621      	mov	r1, r4
 800320c:	eb12 0801 	adds.w	r8, r2, r1
 8003210:	4629      	mov	r1, r5
 8003212:	eb43 0901 	adc.w	r9, r3, r1
 8003216:	f04f 0200 	mov.w	r2, #0
 800321a:	f04f 0300 	mov.w	r3, #0
 800321e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003222:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003226:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800322a:	4690      	mov	r8, r2
 800322c:	4699      	mov	r9, r3
 800322e:	4623      	mov	r3, r4
 8003230:	eb18 0303 	adds.w	r3, r8, r3
 8003234:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003238:	462b      	mov	r3, r5
 800323a:	eb49 0303 	adc.w	r3, r9, r3
 800323e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800324e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003252:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003256:	460b      	mov	r3, r1
 8003258:	18db      	adds	r3, r3, r3
 800325a:	653b      	str	r3, [r7, #80]	; 0x50
 800325c:	4613      	mov	r3, r2
 800325e:	eb42 0303 	adc.w	r3, r2, r3
 8003262:	657b      	str	r3, [r7, #84]	; 0x54
 8003264:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003268:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800326c:	f7fc ffb4 	bl	80001d8 <__aeabi_uldivmod>
 8003270:	4602      	mov	r2, r0
 8003272:	460b      	mov	r3, r1
 8003274:	4b61      	ldr	r3, [pc, #388]	; (80033fc <UART_SetConfig+0x2d4>)
 8003276:	fba3 2302 	umull	r2, r3, r3, r2
 800327a:	095b      	lsrs	r3, r3, #5
 800327c:	011c      	lsls	r4, r3, #4
 800327e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003282:	2200      	movs	r2, #0
 8003284:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003288:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800328c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003290:	4642      	mov	r2, r8
 8003292:	464b      	mov	r3, r9
 8003294:	1891      	adds	r1, r2, r2
 8003296:	64b9      	str	r1, [r7, #72]	; 0x48
 8003298:	415b      	adcs	r3, r3
 800329a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800329c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80032a0:	4641      	mov	r1, r8
 80032a2:	eb12 0a01 	adds.w	sl, r2, r1
 80032a6:	4649      	mov	r1, r9
 80032a8:	eb43 0b01 	adc.w	fp, r3, r1
 80032ac:	f04f 0200 	mov.w	r2, #0
 80032b0:	f04f 0300 	mov.w	r3, #0
 80032b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032c0:	4692      	mov	sl, r2
 80032c2:	469b      	mov	fp, r3
 80032c4:	4643      	mov	r3, r8
 80032c6:	eb1a 0303 	adds.w	r3, sl, r3
 80032ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032ce:	464b      	mov	r3, r9
 80032d0:	eb4b 0303 	adc.w	r3, fp, r3
 80032d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80032d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80032e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80032ec:	460b      	mov	r3, r1
 80032ee:	18db      	adds	r3, r3, r3
 80032f0:	643b      	str	r3, [r7, #64]	; 0x40
 80032f2:	4613      	mov	r3, r2
 80032f4:	eb42 0303 	adc.w	r3, r2, r3
 80032f8:	647b      	str	r3, [r7, #68]	; 0x44
 80032fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80032fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003302:	f7fc ff69 	bl	80001d8 <__aeabi_uldivmod>
 8003306:	4602      	mov	r2, r0
 8003308:	460b      	mov	r3, r1
 800330a:	4611      	mov	r1, r2
 800330c:	4b3b      	ldr	r3, [pc, #236]	; (80033fc <UART_SetConfig+0x2d4>)
 800330e:	fba3 2301 	umull	r2, r3, r3, r1
 8003312:	095b      	lsrs	r3, r3, #5
 8003314:	2264      	movs	r2, #100	; 0x64
 8003316:	fb02 f303 	mul.w	r3, r2, r3
 800331a:	1acb      	subs	r3, r1, r3
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003322:	4b36      	ldr	r3, [pc, #216]	; (80033fc <UART_SetConfig+0x2d4>)
 8003324:	fba3 2302 	umull	r2, r3, r3, r2
 8003328:	095b      	lsrs	r3, r3, #5
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003330:	441c      	add	r4, r3
 8003332:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003336:	2200      	movs	r2, #0
 8003338:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800333c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003340:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003344:	4642      	mov	r2, r8
 8003346:	464b      	mov	r3, r9
 8003348:	1891      	adds	r1, r2, r2
 800334a:	63b9      	str	r1, [r7, #56]	; 0x38
 800334c:	415b      	adcs	r3, r3
 800334e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003350:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003354:	4641      	mov	r1, r8
 8003356:	1851      	adds	r1, r2, r1
 8003358:	6339      	str	r1, [r7, #48]	; 0x30
 800335a:	4649      	mov	r1, r9
 800335c:	414b      	adcs	r3, r1
 800335e:	637b      	str	r3, [r7, #52]	; 0x34
 8003360:	f04f 0200 	mov.w	r2, #0
 8003364:	f04f 0300 	mov.w	r3, #0
 8003368:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800336c:	4659      	mov	r1, fp
 800336e:	00cb      	lsls	r3, r1, #3
 8003370:	4651      	mov	r1, sl
 8003372:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003376:	4651      	mov	r1, sl
 8003378:	00ca      	lsls	r2, r1, #3
 800337a:	4610      	mov	r0, r2
 800337c:	4619      	mov	r1, r3
 800337e:	4603      	mov	r3, r0
 8003380:	4642      	mov	r2, r8
 8003382:	189b      	adds	r3, r3, r2
 8003384:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003388:	464b      	mov	r3, r9
 800338a:	460a      	mov	r2, r1
 800338c:	eb42 0303 	adc.w	r3, r2, r3
 8003390:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80033a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80033a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80033a8:	460b      	mov	r3, r1
 80033aa:	18db      	adds	r3, r3, r3
 80033ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80033ae:	4613      	mov	r3, r2
 80033b0:	eb42 0303 	adc.w	r3, r2, r3
 80033b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80033be:	f7fc ff0b 	bl	80001d8 <__aeabi_uldivmod>
 80033c2:	4602      	mov	r2, r0
 80033c4:	460b      	mov	r3, r1
 80033c6:	4b0d      	ldr	r3, [pc, #52]	; (80033fc <UART_SetConfig+0x2d4>)
 80033c8:	fba3 1302 	umull	r1, r3, r3, r2
 80033cc:	095b      	lsrs	r3, r3, #5
 80033ce:	2164      	movs	r1, #100	; 0x64
 80033d0:	fb01 f303 	mul.w	r3, r1, r3
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	3332      	adds	r3, #50	; 0x32
 80033da:	4a08      	ldr	r2, [pc, #32]	; (80033fc <UART_SetConfig+0x2d4>)
 80033dc:	fba2 2303 	umull	r2, r3, r2, r3
 80033e0:	095b      	lsrs	r3, r3, #5
 80033e2:	f003 0207 	and.w	r2, r3, #7
 80033e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4422      	add	r2, r4
 80033ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033f0:	e106      	b.n	8003600 <UART_SetConfig+0x4d8>
 80033f2:	bf00      	nop
 80033f4:	40011000 	.word	0x40011000
 80033f8:	40011400 	.word	0x40011400
 80033fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003400:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003404:	2200      	movs	r2, #0
 8003406:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800340a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800340e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003412:	4642      	mov	r2, r8
 8003414:	464b      	mov	r3, r9
 8003416:	1891      	adds	r1, r2, r2
 8003418:	6239      	str	r1, [r7, #32]
 800341a:	415b      	adcs	r3, r3
 800341c:	627b      	str	r3, [r7, #36]	; 0x24
 800341e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003422:	4641      	mov	r1, r8
 8003424:	1854      	adds	r4, r2, r1
 8003426:	4649      	mov	r1, r9
 8003428:	eb43 0501 	adc.w	r5, r3, r1
 800342c:	f04f 0200 	mov.w	r2, #0
 8003430:	f04f 0300 	mov.w	r3, #0
 8003434:	00eb      	lsls	r3, r5, #3
 8003436:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800343a:	00e2      	lsls	r2, r4, #3
 800343c:	4614      	mov	r4, r2
 800343e:	461d      	mov	r5, r3
 8003440:	4643      	mov	r3, r8
 8003442:	18e3      	adds	r3, r4, r3
 8003444:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003448:	464b      	mov	r3, r9
 800344a:	eb45 0303 	adc.w	r3, r5, r3
 800344e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800345e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003462:	f04f 0200 	mov.w	r2, #0
 8003466:	f04f 0300 	mov.w	r3, #0
 800346a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800346e:	4629      	mov	r1, r5
 8003470:	008b      	lsls	r3, r1, #2
 8003472:	4621      	mov	r1, r4
 8003474:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003478:	4621      	mov	r1, r4
 800347a:	008a      	lsls	r2, r1, #2
 800347c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003480:	f7fc feaa 	bl	80001d8 <__aeabi_uldivmod>
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	4b60      	ldr	r3, [pc, #384]	; (800360c <UART_SetConfig+0x4e4>)
 800348a:	fba3 2302 	umull	r2, r3, r3, r2
 800348e:	095b      	lsrs	r3, r3, #5
 8003490:	011c      	lsls	r4, r3, #4
 8003492:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003496:	2200      	movs	r2, #0
 8003498:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800349c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80034a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80034a4:	4642      	mov	r2, r8
 80034a6:	464b      	mov	r3, r9
 80034a8:	1891      	adds	r1, r2, r2
 80034aa:	61b9      	str	r1, [r7, #24]
 80034ac:	415b      	adcs	r3, r3
 80034ae:	61fb      	str	r3, [r7, #28]
 80034b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034b4:	4641      	mov	r1, r8
 80034b6:	1851      	adds	r1, r2, r1
 80034b8:	6139      	str	r1, [r7, #16]
 80034ba:	4649      	mov	r1, r9
 80034bc:	414b      	adcs	r3, r1
 80034be:	617b      	str	r3, [r7, #20]
 80034c0:	f04f 0200 	mov.w	r2, #0
 80034c4:	f04f 0300 	mov.w	r3, #0
 80034c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034cc:	4659      	mov	r1, fp
 80034ce:	00cb      	lsls	r3, r1, #3
 80034d0:	4651      	mov	r1, sl
 80034d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034d6:	4651      	mov	r1, sl
 80034d8:	00ca      	lsls	r2, r1, #3
 80034da:	4610      	mov	r0, r2
 80034dc:	4619      	mov	r1, r3
 80034de:	4603      	mov	r3, r0
 80034e0:	4642      	mov	r2, r8
 80034e2:	189b      	adds	r3, r3, r2
 80034e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80034e8:	464b      	mov	r3, r9
 80034ea:	460a      	mov	r2, r1
 80034ec:	eb42 0303 	adc.w	r3, r2, r3
 80034f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80034f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80034fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003500:	f04f 0200 	mov.w	r2, #0
 8003504:	f04f 0300 	mov.w	r3, #0
 8003508:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800350c:	4649      	mov	r1, r9
 800350e:	008b      	lsls	r3, r1, #2
 8003510:	4641      	mov	r1, r8
 8003512:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003516:	4641      	mov	r1, r8
 8003518:	008a      	lsls	r2, r1, #2
 800351a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800351e:	f7fc fe5b 	bl	80001d8 <__aeabi_uldivmod>
 8003522:	4602      	mov	r2, r0
 8003524:	460b      	mov	r3, r1
 8003526:	4611      	mov	r1, r2
 8003528:	4b38      	ldr	r3, [pc, #224]	; (800360c <UART_SetConfig+0x4e4>)
 800352a:	fba3 2301 	umull	r2, r3, r3, r1
 800352e:	095b      	lsrs	r3, r3, #5
 8003530:	2264      	movs	r2, #100	; 0x64
 8003532:	fb02 f303 	mul.w	r3, r2, r3
 8003536:	1acb      	subs	r3, r1, r3
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	3332      	adds	r3, #50	; 0x32
 800353c:	4a33      	ldr	r2, [pc, #204]	; (800360c <UART_SetConfig+0x4e4>)
 800353e:	fba2 2303 	umull	r2, r3, r2, r3
 8003542:	095b      	lsrs	r3, r3, #5
 8003544:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003548:	441c      	add	r4, r3
 800354a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800354e:	2200      	movs	r2, #0
 8003550:	673b      	str	r3, [r7, #112]	; 0x70
 8003552:	677a      	str	r2, [r7, #116]	; 0x74
 8003554:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003558:	4642      	mov	r2, r8
 800355a:	464b      	mov	r3, r9
 800355c:	1891      	adds	r1, r2, r2
 800355e:	60b9      	str	r1, [r7, #8]
 8003560:	415b      	adcs	r3, r3
 8003562:	60fb      	str	r3, [r7, #12]
 8003564:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003568:	4641      	mov	r1, r8
 800356a:	1851      	adds	r1, r2, r1
 800356c:	6039      	str	r1, [r7, #0]
 800356e:	4649      	mov	r1, r9
 8003570:	414b      	adcs	r3, r1
 8003572:	607b      	str	r3, [r7, #4]
 8003574:	f04f 0200 	mov.w	r2, #0
 8003578:	f04f 0300 	mov.w	r3, #0
 800357c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003580:	4659      	mov	r1, fp
 8003582:	00cb      	lsls	r3, r1, #3
 8003584:	4651      	mov	r1, sl
 8003586:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800358a:	4651      	mov	r1, sl
 800358c:	00ca      	lsls	r2, r1, #3
 800358e:	4610      	mov	r0, r2
 8003590:	4619      	mov	r1, r3
 8003592:	4603      	mov	r3, r0
 8003594:	4642      	mov	r2, r8
 8003596:	189b      	adds	r3, r3, r2
 8003598:	66bb      	str	r3, [r7, #104]	; 0x68
 800359a:	464b      	mov	r3, r9
 800359c:	460a      	mov	r2, r1
 800359e:	eb42 0303 	adc.w	r3, r2, r3
 80035a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	663b      	str	r3, [r7, #96]	; 0x60
 80035ae:	667a      	str	r2, [r7, #100]	; 0x64
 80035b0:	f04f 0200 	mov.w	r2, #0
 80035b4:	f04f 0300 	mov.w	r3, #0
 80035b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80035bc:	4649      	mov	r1, r9
 80035be:	008b      	lsls	r3, r1, #2
 80035c0:	4641      	mov	r1, r8
 80035c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035c6:	4641      	mov	r1, r8
 80035c8:	008a      	lsls	r2, r1, #2
 80035ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80035ce:	f7fc fe03 	bl	80001d8 <__aeabi_uldivmod>
 80035d2:	4602      	mov	r2, r0
 80035d4:	460b      	mov	r3, r1
 80035d6:	4b0d      	ldr	r3, [pc, #52]	; (800360c <UART_SetConfig+0x4e4>)
 80035d8:	fba3 1302 	umull	r1, r3, r3, r2
 80035dc:	095b      	lsrs	r3, r3, #5
 80035de:	2164      	movs	r1, #100	; 0x64
 80035e0:	fb01 f303 	mul.w	r3, r1, r3
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	011b      	lsls	r3, r3, #4
 80035e8:	3332      	adds	r3, #50	; 0x32
 80035ea:	4a08      	ldr	r2, [pc, #32]	; (800360c <UART_SetConfig+0x4e4>)
 80035ec:	fba2 2303 	umull	r2, r3, r2, r3
 80035f0:	095b      	lsrs	r3, r3, #5
 80035f2:	f003 020f 	and.w	r2, r3, #15
 80035f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4422      	add	r2, r4
 80035fe:	609a      	str	r2, [r3, #8]
}
 8003600:	bf00      	nop
 8003602:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003606:	46bd      	mov	sp, r7
 8003608:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800360c:	51eb851f 	.word	0x51eb851f

08003610 <memset>:
 8003610:	4402      	add	r2, r0
 8003612:	4603      	mov	r3, r0
 8003614:	4293      	cmp	r3, r2
 8003616:	d100      	bne.n	800361a <memset+0xa>
 8003618:	4770      	bx	lr
 800361a:	f803 1b01 	strb.w	r1, [r3], #1
 800361e:	e7f9      	b.n	8003614 <memset+0x4>

08003620 <__libc_init_array>:
 8003620:	b570      	push	{r4, r5, r6, lr}
 8003622:	4d0d      	ldr	r5, [pc, #52]	; (8003658 <__libc_init_array+0x38>)
 8003624:	4c0d      	ldr	r4, [pc, #52]	; (800365c <__libc_init_array+0x3c>)
 8003626:	1b64      	subs	r4, r4, r5
 8003628:	10a4      	asrs	r4, r4, #2
 800362a:	2600      	movs	r6, #0
 800362c:	42a6      	cmp	r6, r4
 800362e:	d109      	bne.n	8003644 <__libc_init_array+0x24>
 8003630:	4d0b      	ldr	r5, [pc, #44]	; (8003660 <__libc_init_array+0x40>)
 8003632:	4c0c      	ldr	r4, [pc, #48]	; (8003664 <__libc_init_array+0x44>)
 8003634:	f000 f818 	bl	8003668 <_init>
 8003638:	1b64      	subs	r4, r4, r5
 800363a:	10a4      	asrs	r4, r4, #2
 800363c:	2600      	movs	r6, #0
 800363e:	42a6      	cmp	r6, r4
 8003640:	d105      	bne.n	800364e <__libc_init_array+0x2e>
 8003642:	bd70      	pop	{r4, r5, r6, pc}
 8003644:	f855 3b04 	ldr.w	r3, [r5], #4
 8003648:	4798      	blx	r3
 800364a:	3601      	adds	r6, #1
 800364c:	e7ee      	b.n	800362c <__libc_init_array+0xc>
 800364e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003652:	4798      	blx	r3
 8003654:	3601      	adds	r6, #1
 8003656:	e7f2      	b.n	800363e <__libc_init_array+0x1e>
 8003658:	080036a0 	.word	0x080036a0
 800365c:	080036a0 	.word	0x080036a0
 8003660:	080036a0 	.word	0x080036a0
 8003664:	080036a4 	.word	0x080036a4

08003668 <_init>:
 8003668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800366a:	bf00      	nop
 800366c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800366e:	bc08      	pop	{r3}
 8003670:	469e      	mov	lr, r3
 8003672:	4770      	bx	lr

08003674 <_fini>:
 8003674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003676:	bf00      	nop
 8003678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800367a:	bc08      	pop	{r3}
 800367c:	469e      	mov	lr, r3
 800367e:	4770      	bx	lr
