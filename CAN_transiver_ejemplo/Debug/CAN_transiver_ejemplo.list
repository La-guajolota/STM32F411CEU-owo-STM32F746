
CAN_transiver_ejemplo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030e8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080031f4  080031f4  000041f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003234  08003234  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003234  08003234  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003234  08003234  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003234  08003234  00004234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003238  08003238  00004238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800323c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  2000000c  08003248  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08003248  000050f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a16b  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c6e  00000000  00000000  0000f1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000908  00000000  00000000  00010e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006ea  00000000  00000000  00011718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a89  00000000  00000000  00011e02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b2ae  00000000  00000000  0002988b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008959d  00000000  00000000  00034b39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000be0d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000241c  00000000  00000000  000be11c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000c0538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080031dc 	.word	0x080031dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080031dc 	.word	0x080031dc

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fb33 	bl	80007bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f855 	bl	8000204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f94d 	bl	80003f8 <MX_GPIO_Init>
  MX_CAN_Init();
 800015e:	f000 f8eb 	bl	8000338 <MX_CAN_Init>
  MX_USART2_UART_Init();
 8000162:	f000 f91f 	bl	80003a4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000166:	f000 f8a9 	bl	80002bc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan);
 800016a:	4820      	ldr	r0, [pc, #128]	@ (80001ec <main+0xa0>)
 800016c:	f001 f8d2 	bl	8001314 <HAL_CAN_Start>
  TxHeader.IDE = CAN_ID_STD;
 8000170:	4b1f      	ldr	r3, [pc, #124]	@ (80001f0 <main+0xa4>)
 8000172:	2200      	movs	r2, #0
 8000174:	609a      	str	r2, [r3, #8]
  TxHeader.StdId = ID_transferee;
 8000176:	4b1e      	ldr	r3, [pc, #120]	@ (80001f0 <main+0xa4>)
 8000178:	220b      	movs	r2, #11
 800017a:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA; //eSTAMOS MANDAMOS DATAFRAMES
 800017c:	4b1c      	ldr	r3, [pc, #112]	@ (80001f0 <main+0xa4>)
 800017e:	2200      	movs	r2, #0
 8000180:	60da      	str	r2, [r3, #12]
  TxHeader.DLC = 2; // Estamos mandando 2 bytes
 8000182:	4b1b      	ldr	r3, [pc, #108]	@ (80001f0 <main+0xa4>)
 8000184:	2202      	movs	r2, #2
 8000186:	611a      	str	r2, [r3, #16]

  TxData[0] = 0; //low bits del adc
 8000188:	4b1a      	ldr	r3, [pc, #104]	@ (80001f4 <main+0xa8>)
 800018a:	2200      	movs	r2, #0
 800018c:	701a      	strb	r2, [r3, #0]
  TxData[1] = 0; //high bits del adc
 800018e:	4b19      	ldr	r3, [pc, #100]	@ (80001f4 <main+0xa8>)
 8000190:	2200      	movs	r2, #0
 8000192:	705a      	strb	r2, [r3, #1]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //Inicia conversion
	  HAL_ADC_Start(&hadc1);
 8000194:	4818      	ldr	r0, [pc, #96]	@ (80001f8 <main+0xac>)
 8000196:	f000 fc6f 	bl	8000a78 <HAL_ADC_Start>
	  //Polleamos el resultado
	  HAL_ADC_PollForConversion(&hadc1, 1);
 800019a:	2101      	movs	r1, #1
 800019c:	4816      	ldr	r0, [pc, #88]	@ (80001f8 <main+0xac>)
 800019e:	f000 fd19 	bl	8000bd4 <HAL_ADC_PollForConversion>
	  //recivimos la lectura
	  adc_lec = HAL_ADC_GetValue(&hadc1);
 80001a2:	4815      	ldr	r0, [pc, #84]	@ (80001f8 <main+0xac>)
 80001a4:	f000 fe1c 	bl	8000de0 <HAL_ADC_GetValue>
 80001a8:	4603      	mov	r3, r0
 80001aa:	80fb      	strh	r3, [r7, #6]
	  TxData[0] = adc_lec & 0x00FF;
 80001ac:	88fb      	ldrh	r3, [r7, #6]
 80001ae:	b2da      	uxtb	r2, r3
 80001b0:	4b10      	ldr	r3, [pc, #64]	@ (80001f4 <main+0xa8>)
 80001b2:	701a      	strb	r2, [r3, #0]
	  TxData[1] = (adc_lec & 0xFF00)>>8;
 80001b4:	88fb      	ldrh	r3, [r7, #6]
 80001b6:	0a1b      	lsrs	r3, r3, #8
 80001b8:	b29b      	uxth	r3, r3
 80001ba:	b2da      	uxtb	r2, r3
 80001bc:	4b0d      	ldr	r3, [pc, #52]	@ (80001f4 <main+0xa8>)
 80001be:	705a      	strb	r2, [r3, #1]

	  /*
	   * MANDAMOS INFO AL BUS
	   */
	  if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 80001c0:	4b0e      	ldr	r3, [pc, #56]	@ (80001fc <main+0xb0>)
 80001c2:	4a0c      	ldr	r2, [pc, #48]	@ (80001f4 <main+0xa8>)
 80001c4:	490a      	ldr	r1, [pc, #40]	@ (80001f0 <main+0xa4>)
 80001c6:	4809      	ldr	r0, [pc, #36]	@ (80001ec <main+0xa0>)
 80001c8:	f001 f8e8 	bl	800139c <HAL_CAN_AddTxMessage>
 80001cc:	4603      	mov	r3, r0
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d002      	beq.n	80001d8 <main+0x8c>
		  Error_Handler();
 80001d2:	f000 f97f 	bl	80004d4 <Error_Handler>
 80001d6:	e7dd      	b.n	8000194 <main+0x48>
	  }else { //No hubo problema en lanzar la informacion
		HAL_GPIO_TogglePin(TX_led_GPIO_Port, TX_led_Pin);
 80001d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001dc:	4808      	ldr	r0, [pc, #32]	@ (8000200 <main+0xb4>)
 80001de:	f001 fd09 	bl	8001bf4 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80001e2:	2064      	movs	r0, #100	@ 0x64
 80001e4:	f000 fb4c 	bl	8000880 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 80001e8:	e7d4      	b.n	8000194 <main+0x48>
 80001ea:	bf00      	nop
 80001ec:	20000058 	.word	0x20000058
 80001f0:	200000c8 	.word	0x200000c8
 80001f4:	200000e0 	.word	0x200000e0
 80001f8:	20000028 	.word	0x20000028
 80001fc:	200000e8 	.word	0x200000e8
 8000200:	40011000 	.word	0x40011000

08000204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b094      	sub	sp, #80	@ 0x50
 8000208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800020e:	2228      	movs	r2, #40	@ 0x28
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f002 ffb6 	bl	8003184 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000218:	f107 0314 	add.w	r3, r7, #20
 800021c:	2200      	movs	r2, #0
 800021e:	601a      	str	r2, [r3, #0]
 8000220:	605a      	str	r2, [r3, #4]
 8000222:	609a      	str	r2, [r3, #8]
 8000224:	60da      	str	r2, [r3, #12]
 8000226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000228:	1d3b      	adds	r3, r7, #4
 800022a:	2200      	movs	r2, #0
 800022c:	601a      	str	r2, [r3, #0]
 800022e:	605a      	str	r2, [r3, #4]
 8000230:	609a      	str	r2, [r3, #8]
 8000232:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000234:	2301      	movs	r3, #1
 8000236:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000238:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800023c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800023e:	2300      	movs	r3, #0
 8000240:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000242:	2301      	movs	r3, #1
 8000244:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000246:	2302      	movs	r3, #2
 8000248:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800024a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800024e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000250:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000254:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000256:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800025a:	4618      	mov	r0, r3
 800025c:	f001 fce4 	bl	8001c28 <HAL_RCC_OscConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000266:	f000 f935 	bl	80004d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026a:	230f      	movs	r3, #15
 800026c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800026e:	2302      	movs	r3, #2
 8000270:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000276:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800027a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000280:	f107 0314 	add.w	r3, r7, #20
 8000284:	2102      	movs	r1, #2
 8000286:	4618      	mov	r0, r3
 8000288:	f001 ff50 	bl	800212c <HAL_RCC_ClockConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000292:	f000 f91f 	bl	80004d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000296:	2302      	movs	r3, #2
 8000298:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800029a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800029e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	4618      	mov	r0, r3
 80002a4:	f002 f8d0 	bl	8002448 <HAL_RCCEx_PeriphCLKConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002ae:	f000 f911 	bl	80004d4 <Error_Handler>
  }
}
 80002b2:	bf00      	nop
 80002b4:	3750      	adds	r7, #80	@ 0x50
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
	...

080002bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	2200      	movs	r2, #0
 80002c6:	601a      	str	r2, [r3, #0]
 80002c8:	605a      	str	r2, [r3, #4]
 80002ca:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002cc:	4b18      	ldr	r3, [pc, #96]	@ (8000330 <MX_ADC1_Init+0x74>)
 80002ce:	4a19      	ldr	r2, [pc, #100]	@ (8000334 <MX_ADC1_Init+0x78>)
 80002d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002d2:	4b17      	ldr	r3, [pc, #92]	@ (8000330 <MX_ADC1_Init+0x74>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002d8:	4b15      	ldr	r3, [pc, #84]	@ (8000330 <MX_ADC1_Init+0x74>)
 80002da:	2200      	movs	r2, #0
 80002dc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002de:	4b14      	ldr	r3, [pc, #80]	@ (8000330 <MX_ADC1_Init+0x74>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002e4:	4b12      	ldr	r3, [pc, #72]	@ (8000330 <MX_ADC1_Init+0x74>)
 80002e6:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80002ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002ec:	4b10      	ldr	r3, [pc, #64]	@ (8000330 <MX_ADC1_Init+0x74>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000330 <MX_ADC1_Init+0x74>)
 80002f4:	2201      	movs	r2, #1
 80002f6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002f8:	480d      	ldr	r0, [pc, #52]	@ (8000330 <MX_ADC1_Init+0x74>)
 80002fa:	f000 fae5 	bl	80008c8 <HAL_ADC_Init>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000304:	f000 f8e6 	bl	80004d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000308:	2300      	movs	r3, #0
 800030a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800030c:	2301      	movs	r3, #1
 800030e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000310:	2300      	movs	r3, #0
 8000312:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000314:	1d3b      	adds	r3, r7, #4
 8000316:	4619      	mov	r1, r3
 8000318:	4805      	ldr	r0, [pc, #20]	@ (8000330 <MX_ADC1_Init+0x74>)
 800031a:	f000 fd6d 	bl	8000df8 <HAL_ADC_ConfigChannel>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000324:	f000 f8d6 	bl	80004d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000328:	bf00      	nop
 800032a:	3710      	adds	r7, #16
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	20000028 	.word	0x20000028
 8000334:	40012400 	.word	0x40012400

08000338 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800033c:	4b17      	ldr	r3, [pc, #92]	@ (800039c <MX_CAN_Init+0x64>)
 800033e:	4a18      	ldr	r2, [pc, #96]	@ (80003a0 <MX_CAN_Init+0x68>)
 8000340:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 8000342:	4b16      	ldr	r3, [pc, #88]	@ (800039c <MX_CAN_Init+0x64>)
 8000344:	2212      	movs	r2, #18
 8000346:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000348:	4b14      	ldr	r3, [pc, #80]	@ (800039c <MX_CAN_Init+0x64>)
 800034a:	2200      	movs	r2, #0
 800034c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800034e:	4b13      	ldr	r3, [pc, #76]	@ (800039c <MX_CAN_Init+0x64>)
 8000350:	2200      	movs	r2, #0
 8000352:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000354:	4b11      	ldr	r3, [pc, #68]	@ (800039c <MX_CAN_Init+0x64>)
 8000356:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800035a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800035c:	4b0f      	ldr	r3, [pc, #60]	@ (800039c <MX_CAN_Init+0x64>)
 800035e:	2200      	movs	r2, #0
 8000360:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000362:	4b0e      	ldr	r3, [pc, #56]	@ (800039c <MX_CAN_Init+0x64>)
 8000364:	2200      	movs	r2, #0
 8000366:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000368:	4b0c      	ldr	r3, [pc, #48]	@ (800039c <MX_CAN_Init+0x64>)
 800036a:	2200      	movs	r2, #0
 800036c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800036e:	4b0b      	ldr	r3, [pc, #44]	@ (800039c <MX_CAN_Init+0x64>)
 8000370:	2200      	movs	r2, #0
 8000372:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000374:	4b09      	ldr	r3, [pc, #36]	@ (800039c <MX_CAN_Init+0x64>)
 8000376:	2200      	movs	r2, #0
 8000378:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800037a:	4b08      	ldr	r3, [pc, #32]	@ (800039c <MX_CAN_Init+0x64>)
 800037c:	2200      	movs	r2, #0
 800037e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000380:	4b06      	ldr	r3, [pc, #24]	@ (800039c <MX_CAN_Init+0x64>)
 8000382:	2200      	movs	r2, #0
 8000384:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000386:	4805      	ldr	r0, [pc, #20]	@ (800039c <MX_CAN_Init+0x64>)
 8000388:	f000 fec9 	bl	800111e <HAL_CAN_Init>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8000392:	f000 f89f 	bl	80004d4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	20000058 	.word	0x20000058
 80003a0:	40006400 	.word	0x40006400

080003a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003a8:	4b11      	ldr	r3, [pc, #68]	@ (80003f0 <MX_USART2_UART_Init+0x4c>)
 80003aa:	4a12      	ldr	r2, [pc, #72]	@ (80003f4 <MX_USART2_UART_Init+0x50>)
 80003ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003ae:	4b10      	ldr	r3, [pc, #64]	@ (80003f0 <MX_USART2_UART_Init+0x4c>)
 80003b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80003b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003b6:	4b0e      	ldr	r3, [pc, #56]	@ (80003f0 <MX_USART2_UART_Init+0x4c>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003bc:	4b0c      	ldr	r3, [pc, #48]	@ (80003f0 <MX_USART2_UART_Init+0x4c>)
 80003be:	2200      	movs	r2, #0
 80003c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003c2:	4b0b      	ldr	r3, [pc, #44]	@ (80003f0 <MX_USART2_UART_Init+0x4c>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003c8:	4b09      	ldr	r3, [pc, #36]	@ (80003f0 <MX_USART2_UART_Init+0x4c>)
 80003ca:	220c      	movs	r2, #12
 80003cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ce:	4b08      	ldr	r3, [pc, #32]	@ (80003f0 <MX_USART2_UART_Init+0x4c>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d4:	4b06      	ldr	r3, [pc, #24]	@ (80003f0 <MX_USART2_UART_Init+0x4c>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003da:	4805      	ldr	r0, [pc, #20]	@ (80003f0 <MX_USART2_UART_Init+0x4c>)
 80003dc:	f002 f9a0 	bl	8002720 <HAL_UART_Init>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003e6:	f000 f875 	bl	80004d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	20000080 	.word	0x20000080
 80003f4:	40004400 	.word	0x40004400

080003f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b088      	sub	sp, #32
 80003fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fe:	f107 0310 	add.w	r3, r7, #16
 8000402:	2200      	movs	r2, #0
 8000404:	601a      	str	r2, [r3, #0]
 8000406:	605a      	str	r2, [r3, #4]
 8000408:	609a      	str	r2, [r3, #8]
 800040a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800040c:	4b2e      	ldr	r3, [pc, #184]	@ (80004c8 <MX_GPIO_Init+0xd0>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	4a2d      	ldr	r2, [pc, #180]	@ (80004c8 <MX_GPIO_Init+0xd0>)
 8000412:	f043 0310 	orr.w	r3, r3, #16
 8000416:	6193      	str	r3, [r2, #24]
 8000418:	4b2b      	ldr	r3, [pc, #172]	@ (80004c8 <MX_GPIO_Init+0xd0>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	f003 0310 	and.w	r3, r3, #16
 8000420:	60fb      	str	r3, [r7, #12]
 8000422:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000424:	4b28      	ldr	r3, [pc, #160]	@ (80004c8 <MX_GPIO_Init+0xd0>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	4a27      	ldr	r2, [pc, #156]	@ (80004c8 <MX_GPIO_Init+0xd0>)
 800042a:	f043 0320 	orr.w	r3, r3, #32
 800042e:	6193      	str	r3, [r2, #24]
 8000430:	4b25      	ldr	r3, [pc, #148]	@ (80004c8 <MX_GPIO_Init+0xd0>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	f003 0320 	and.w	r3, r3, #32
 8000438:	60bb      	str	r3, [r7, #8]
 800043a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800043c:	4b22      	ldr	r3, [pc, #136]	@ (80004c8 <MX_GPIO_Init+0xd0>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	4a21      	ldr	r2, [pc, #132]	@ (80004c8 <MX_GPIO_Init+0xd0>)
 8000442:	f043 0304 	orr.w	r3, r3, #4
 8000446:	6193      	str	r3, [r2, #24]
 8000448:	4b1f      	ldr	r3, [pc, #124]	@ (80004c8 <MX_GPIO_Init+0xd0>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	f003 0304 	and.w	r3, r3, #4
 8000450:	607b      	str	r3, [r7, #4]
 8000452:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000454:	4b1c      	ldr	r3, [pc, #112]	@ (80004c8 <MX_GPIO_Init+0xd0>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	4a1b      	ldr	r2, [pc, #108]	@ (80004c8 <MX_GPIO_Init+0xd0>)
 800045a:	f043 0308 	orr.w	r3, r3, #8
 800045e:	6193      	str	r3, [r2, #24]
 8000460:	4b19      	ldr	r3, [pc, #100]	@ (80004c8 <MX_GPIO_Init+0xd0>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	f003 0308 	and.w	r3, r3, #8
 8000468:	603b      	str	r3, [r7, #0]
 800046a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TX_led_GPIO_Port, TX_led_Pin, GPIO_PIN_SET);
 800046c:	2201      	movs	r2, #1
 800046e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000472:	4816      	ldr	r0, [pc, #88]	@ (80004cc <MX_GPIO_Init+0xd4>)
 8000474:	f001 fba6 	bl	8001bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RX_led_GPIO_Port, RX_led_Pin, GPIO_PIN_RESET);
 8000478:	2200      	movs	r2, #0
 800047a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800047e:	4814      	ldr	r0, [pc, #80]	@ (80004d0 <MX_GPIO_Init+0xd8>)
 8000480:	f001 fba0 	bl	8001bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TX_led_Pin */
  GPIO_InitStruct.Pin = TX_led_Pin;
 8000484:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000488:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800048a:	2311      	movs	r3, #17
 800048c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048e:	2300      	movs	r3, #0
 8000490:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000492:	2303      	movs	r3, #3
 8000494:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TX_led_GPIO_Port, &GPIO_InitStruct);
 8000496:	f107 0310 	add.w	r3, r7, #16
 800049a:	4619      	mov	r1, r3
 800049c:	480b      	ldr	r0, [pc, #44]	@ (80004cc <MX_GPIO_Init+0xd4>)
 800049e:	f001 fa0d 	bl	80018bc <HAL_GPIO_Init>

  /*Configure GPIO pin : RX_led_Pin */
  GPIO_InitStruct.Pin = RX_led_Pin;
 80004a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80004a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a8:	2301      	movs	r3, #1
 80004aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ac:	2300      	movs	r3, #0
 80004ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b0:	2302      	movs	r3, #2
 80004b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RX_led_GPIO_Port, &GPIO_InitStruct);
 80004b4:	f107 0310 	add.w	r3, r7, #16
 80004b8:	4619      	mov	r1, r3
 80004ba:	4805      	ldr	r0, [pc, #20]	@ (80004d0 <MX_GPIO_Init+0xd8>)
 80004bc:	f001 f9fe 	bl	80018bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004c0:	bf00      	nop
 80004c2:	3720      	adds	r7, #32
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	40021000 	.word	0x40021000
 80004cc:	40011000 	.word	0x40011000
 80004d0:	40010c00 	.word	0x40010c00

080004d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004d8:	b672      	cpsid	i
}
 80004da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004dc:	bf00      	nop
 80004de:	e7fd      	b.n	80004dc <Error_Handler+0x8>

080004e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004e6:	4b15      	ldr	r3, [pc, #84]	@ (800053c <HAL_MspInit+0x5c>)
 80004e8:	699b      	ldr	r3, [r3, #24]
 80004ea:	4a14      	ldr	r2, [pc, #80]	@ (800053c <HAL_MspInit+0x5c>)
 80004ec:	f043 0301 	orr.w	r3, r3, #1
 80004f0:	6193      	str	r3, [r2, #24]
 80004f2:	4b12      	ldr	r3, [pc, #72]	@ (800053c <HAL_MspInit+0x5c>)
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	f003 0301 	and.w	r3, r3, #1
 80004fa:	60bb      	str	r3, [r7, #8]
 80004fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004fe:	4b0f      	ldr	r3, [pc, #60]	@ (800053c <HAL_MspInit+0x5c>)
 8000500:	69db      	ldr	r3, [r3, #28]
 8000502:	4a0e      	ldr	r2, [pc, #56]	@ (800053c <HAL_MspInit+0x5c>)
 8000504:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000508:	61d3      	str	r3, [r2, #28]
 800050a:	4b0c      	ldr	r3, [pc, #48]	@ (800053c <HAL_MspInit+0x5c>)
 800050c:	69db      	ldr	r3, [r3, #28]
 800050e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000516:	4b0a      	ldr	r3, [pc, #40]	@ (8000540 <HAL_MspInit+0x60>)
 8000518:	685b      	ldr	r3, [r3, #4]
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	4a04      	ldr	r2, [pc, #16]	@ (8000540 <HAL_MspInit+0x60>)
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000532:	bf00      	nop
 8000534:	3714      	adds	r7, #20
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr
 800053c:	40021000 	.word	0x40021000
 8000540:	40010000 	.word	0x40010000

08000544 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b088      	sub	sp, #32
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054c:	f107 0310 	add.w	r3, r7, #16
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a14      	ldr	r2, [pc, #80]	@ (80005b0 <HAL_ADC_MspInit+0x6c>)
 8000560:	4293      	cmp	r3, r2
 8000562:	d121      	bne.n	80005a8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000564:	4b13      	ldr	r3, [pc, #76]	@ (80005b4 <HAL_ADC_MspInit+0x70>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	4a12      	ldr	r2, [pc, #72]	@ (80005b4 <HAL_ADC_MspInit+0x70>)
 800056a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800056e:	6193      	str	r3, [r2, #24]
 8000570:	4b10      	ldr	r3, [pc, #64]	@ (80005b4 <HAL_ADC_MspInit+0x70>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000578:	60fb      	str	r3, [r7, #12]
 800057a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800057c:	4b0d      	ldr	r3, [pc, #52]	@ (80005b4 <HAL_ADC_MspInit+0x70>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	4a0c      	ldr	r2, [pc, #48]	@ (80005b4 <HAL_ADC_MspInit+0x70>)
 8000582:	f043 0304 	orr.w	r3, r3, #4
 8000586:	6193      	str	r3, [r2, #24]
 8000588:	4b0a      	ldr	r3, [pc, #40]	@ (80005b4 <HAL_ADC_MspInit+0x70>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	f003 0304 	and.w	r3, r3, #4
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000594:	2301      	movs	r3, #1
 8000596:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000598:	2303      	movs	r3, #3
 800059a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059c:	f107 0310 	add.w	r3, r7, #16
 80005a0:	4619      	mov	r1, r3
 80005a2:	4805      	ldr	r0, [pc, #20]	@ (80005b8 <HAL_ADC_MspInit+0x74>)
 80005a4:	f001 f98a 	bl	80018bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80005a8:	bf00      	nop
 80005aa:	3720      	adds	r7, #32
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40012400 	.word	0x40012400
 80005b4:	40021000 	.word	0x40021000
 80005b8:	40010800 	.word	0x40010800

080005bc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c4:	f107 0310 	add.w	r3, r7, #16
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a1c      	ldr	r2, [pc, #112]	@ (8000648 <HAL_CAN_MspInit+0x8c>)
 80005d8:	4293      	cmp	r3, r2
 80005da:	d131      	bne.n	8000640 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005dc:	4b1b      	ldr	r3, [pc, #108]	@ (800064c <HAL_CAN_MspInit+0x90>)
 80005de:	69db      	ldr	r3, [r3, #28]
 80005e0:	4a1a      	ldr	r2, [pc, #104]	@ (800064c <HAL_CAN_MspInit+0x90>)
 80005e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005e6:	61d3      	str	r3, [r2, #28]
 80005e8:	4b18      	ldr	r3, [pc, #96]	@ (800064c <HAL_CAN_MspInit+0x90>)
 80005ea:	69db      	ldr	r3, [r3, #28]
 80005ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f4:	4b15      	ldr	r3, [pc, #84]	@ (800064c <HAL_CAN_MspInit+0x90>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	4a14      	ldr	r2, [pc, #80]	@ (800064c <HAL_CAN_MspInit+0x90>)
 80005fa:	f043 0304 	orr.w	r3, r3, #4
 80005fe:	6193      	str	r3, [r2, #24]
 8000600:	4b12      	ldr	r3, [pc, #72]	@ (800064c <HAL_CAN_MspInit+0x90>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	f003 0304 	and.w	r3, r3, #4
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800060c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000610:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000616:	2301      	movs	r3, #1
 8000618:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061a:	f107 0310 	add.w	r3, r7, #16
 800061e:	4619      	mov	r1, r3
 8000620:	480b      	ldr	r0, [pc, #44]	@ (8000650 <HAL_CAN_MspInit+0x94>)
 8000622:	f001 f94b 	bl	80018bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000626:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800062a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062c:	2302      	movs	r3, #2
 800062e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000630:	2303      	movs	r3, #3
 8000632:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	4619      	mov	r1, r3
 800063a:	4805      	ldr	r0, [pc, #20]	@ (8000650 <HAL_CAN_MspInit+0x94>)
 800063c:	f001 f93e 	bl	80018bc <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000640:	bf00      	nop
 8000642:	3720      	adds	r7, #32
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40006400 	.word	0x40006400
 800064c:	40021000 	.word	0x40021000
 8000650:	40010800 	.word	0x40010800

08000654 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	f107 0310 	add.w	r3, r7, #16
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a1f      	ldr	r2, [pc, #124]	@ (80006ec <HAL_UART_MspInit+0x98>)
 8000670:	4293      	cmp	r3, r2
 8000672:	d137      	bne.n	80006e4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000674:	4b1e      	ldr	r3, [pc, #120]	@ (80006f0 <HAL_UART_MspInit+0x9c>)
 8000676:	69db      	ldr	r3, [r3, #28]
 8000678:	4a1d      	ldr	r2, [pc, #116]	@ (80006f0 <HAL_UART_MspInit+0x9c>)
 800067a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800067e:	61d3      	str	r3, [r2, #28]
 8000680:	4b1b      	ldr	r3, [pc, #108]	@ (80006f0 <HAL_UART_MspInit+0x9c>)
 8000682:	69db      	ldr	r3, [r3, #28]
 8000684:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800068c:	4b18      	ldr	r3, [pc, #96]	@ (80006f0 <HAL_UART_MspInit+0x9c>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a17      	ldr	r2, [pc, #92]	@ (80006f0 <HAL_UART_MspInit+0x9c>)
 8000692:	f043 0304 	orr.w	r3, r3, #4
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b15      	ldr	r3, [pc, #84]	@ (80006f0 <HAL_UART_MspInit+0x9c>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f003 0304 	and.w	r3, r3, #4
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a8:	2302      	movs	r3, #2
 80006aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ac:	2303      	movs	r3, #3
 80006ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b0:	f107 0310 	add.w	r3, r7, #16
 80006b4:	4619      	mov	r1, r3
 80006b6:	480f      	ldr	r0, [pc, #60]	@ (80006f4 <HAL_UART_MspInit+0xa0>)
 80006b8:	f001 f900 	bl	80018bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006bc:	2308      	movs	r3, #8
 80006be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c8:	f107 0310 	add.w	r3, r7, #16
 80006cc:	4619      	mov	r1, r3
 80006ce:	4809      	ldr	r0, [pc, #36]	@ (80006f4 <HAL_UART_MspInit+0xa0>)
 80006d0:	f001 f8f4 	bl	80018bc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2100      	movs	r1, #0
 80006d8:	2026      	movs	r0, #38	@ 0x26
 80006da:	f001 f806 	bl	80016ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80006de:	2026      	movs	r0, #38	@ 0x26
 80006e0:	f001 f81f 	bl	8001722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006e4:	bf00      	nop
 80006e6:	3720      	adds	r7, #32
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40004400 	.word	0x40004400
 80006f0:	40021000 	.word	0x40021000
 80006f4:	40010800 	.word	0x40010800

080006f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006fc:	bf00      	nop
 80006fe:	e7fd      	b.n	80006fc <NMI_Handler+0x4>

08000700 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000704:	bf00      	nop
 8000706:	e7fd      	b.n	8000704 <HardFault_Handler+0x4>

08000708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800070c:	bf00      	nop
 800070e:	e7fd      	b.n	800070c <MemManage_Handler+0x4>

08000710 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000714:	bf00      	nop
 8000716:	e7fd      	b.n	8000714 <BusFault_Handler+0x4>

08000718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800071c:	bf00      	nop
 800071e:	e7fd      	b.n	800071c <UsageFault_Handler+0x4>

08000720 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr

0800072c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr

08000738 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr

08000744 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000748:	f000 f87e 	bl	8000848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}

08000750 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000754:	4802      	ldr	r0, [pc, #8]	@ (8000760 <USART2_IRQHandler+0x10>)
 8000756:	f002 f833 	bl	80027c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000080 	.word	0x20000080

08000764 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr

08000770 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000770:	f7ff fff8 	bl	8000764 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000774:	480b      	ldr	r0, [pc, #44]	@ (80007a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000776:	490c      	ldr	r1, [pc, #48]	@ (80007a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000778:	4a0c      	ldr	r2, [pc, #48]	@ (80007ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800077a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800077c:	e002      	b.n	8000784 <LoopCopyDataInit>

0800077e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800077e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000782:	3304      	adds	r3, #4

08000784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000788:	d3f9      	bcc.n	800077e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800078a:	4a09      	ldr	r2, [pc, #36]	@ (80007b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800078c:	4c09      	ldr	r4, [pc, #36]	@ (80007b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800078e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000790:	e001      	b.n	8000796 <LoopFillZerobss>

08000792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000794:	3204      	adds	r2, #4

08000796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000798:	d3fb      	bcc.n	8000792 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800079a:	f002 fcfb 	bl	8003194 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800079e:	f7ff fcd5 	bl	800014c <main>
  bx lr
 80007a2:	4770      	bx	lr
  ldr r0, =_sdata
 80007a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007ac:	0800323c 	.word	0x0800323c
  ldr r2, =_sbss
 80007b0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007b4:	200000f0 	.word	0x200000f0

080007b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007b8:	e7fe      	b.n	80007b8 <ADC1_2_IRQHandler>
	...

080007bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007c0:	4b08      	ldr	r3, [pc, #32]	@ (80007e4 <HAL_Init+0x28>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a07      	ldr	r2, [pc, #28]	@ (80007e4 <HAL_Init+0x28>)
 80007c6:	f043 0310 	orr.w	r3, r3, #16
 80007ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007cc:	2003      	movs	r0, #3
 80007ce:	f000 ff81 	bl	80016d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007d2:	200f      	movs	r0, #15
 80007d4:	f000 f808 	bl	80007e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007d8:	f7ff fe82 	bl	80004e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007dc:	2300      	movs	r3, #0
}
 80007de:	4618      	mov	r0, r3
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40022000 	.word	0x40022000

080007e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007f0:	4b12      	ldr	r3, [pc, #72]	@ (800083c <HAL_InitTick+0x54>)
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	4b12      	ldr	r3, [pc, #72]	@ (8000840 <HAL_InitTick+0x58>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	4619      	mov	r1, r3
 80007fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000802:	fbb2 f3f3 	udiv	r3, r2, r3
 8000806:	4618      	mov	r0, r3
 8000808:	f000 ff99 	bl	800173e <HAL_SYSTICK_Config>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000812:	2301      	movs	r3, #1
 8000814:	e00e      	b.n	8000834 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2b0f      	cmp	r3, #15
 800081a:	d80a      	bhi.n	8000832 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800081c:	2200      	movs	r2, #0
 800081e:	6879      	ldr	r1, [r7, #4]
 8000820:	f04f 30ff 	mov.w	r0, #4294967295
 8000824:	f000 ff61 	bl	80016ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000828:	4a06      	ldr	r2, [pc, #24]	@ (8000844 <HAL_InitTick+0x5c>)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800082e:	2300      	movs	r3, #0
 8000830:	e000      	b.n	8000834 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000832:	2301      	movs	r3, #1
}
 8000834:	4618      	mov	r0, r3
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000000 	.word	0x20000000
 8000840:	20000008 	.word	0x20000008
 8000844:	20000004 	.word	0x20000004

08000848 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800084c:	4b05      	ldr	r3, [pc, #20]	@ (8000864 <HAL_IncTick+0x1c>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	461a      	mov	r2, r3
 8000852:	4b05      	ldr	r3, [pc, #20]	@ (8000868 <HAL_IncTick+0x20>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4413      	add	r3, r2
 8000858:	4a03      	ldr	r2, [pc, #12]	@ (8000868 <HAL_IncTick+0x20>)
 800085a:	6013      	str	r3, [r2, #0]
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr
 8000864:	20000008 	.word	0x20000008
 8000868:	200000ec 	.word	0x200000ec

0800086c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  return uwTick;
 8000870:	4b02      	ldr	r3, [pc, #8]	@ (800087c <HAL_GetTick+0x10>)
 8000872:	681b      	ldr	r3, [r3, #0]
}
 8000874:	4618      	mov	r0, r3
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr
 800087c:	200000ec 	.word	0x200000ec

08000880 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000888:	f7ff fff0 	bl	800086c <HAL_GetTick>
 800088c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000898:	d005      	beq.n	80008a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800089a:	4b0a      	ldr	r3, [pc, #40]	@ (80008c4 <HAL_Delay+0x44>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	461a      	mov	r2, r3
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	4413      	add	r3, r2
 80008a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008a6:	bf00      	nop
 80008a8:	f7ff ffe0 	bl	800086c <HAL_GetTick>
 80008ac:	4602      	mov	r2, r0
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	1ad3      	subs	r3, r2, r3
 80008b2:	68fa      	ldr	r2, [r7, #12]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d8f7      	bhi.n	80008a8 <HAL_Delay+0x28>
  {
  }
}
 80008b8:	bf00      	nop
 80008ba:	bf00      	nop
 80008bc:	3710      	adds	r7, #16
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000008 	.word	0x20000008

080008c8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008d0:	2300      	movs	r3, #0
 80008d2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80008d4:	2300      	movs	r3, #0
 80008d6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80008d8:	2300      	movs	r3, #0
 80008da:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d101      	bne.n	80008ea <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
 80008e8:	e0be      	b.n	8000a68 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	689b      	ldr	r3, [r3, #8]
 80008ee:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d109      	bne.n	800090c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2200      	movs	r2, #0
 80008fc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2200      	movs	r2, #0
 8000902:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f7ff fe1c 	bl	8000544 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f000 fbc5 	bl	800109c <ADC_ConversionStop_Disable>
 8000912:	4603      	mov	r3, r0
 8000914:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800091a:	f003 0310 	and.w	r3, r3, #16
 800091e:	2b00      	cmp	r3, #0
 8000920:	f040 8099 	bne.w	8000a56 <HAL_ADC_Init+0x18e>
 8000924:	7dfb      	ldrb	r3, [r7, #23]
 8000926:	2b00      	cmp	r3, #0
 8000928:	f040 8095 	bne.w	8000a56 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000930:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000934:	f023 0302 	bic.w	r3, r3, #2
 8000938:	f043 0202 	orr.w	r2, r3, #2
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000948:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	7b1b      	ldrb	r3, [r3, #12]
 800094e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000950:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000952:	68ba      	ldr	r2, [r7, #8]
 8000954:	4313      	orrs	r3, r2
 8000956:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	689b      	ldr	r3, [r3, #8]
 800095c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000960:	d003      	beq.n	800096a <HAL_ADC_Init+0xa2>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	689b      	ldr	r3, [r3, #8]
 8000966:	2b01      	cmp	r3, #1
 8000968:	d102      	bne.n	8000970 <HAL_ADC_Init+0xa8>
 800096a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800096e:	e000      	b.n	8000972 <HAL_ADC_Init+0xaa>
 8000970:	2300      	movs	r3, #0
 8000972:	693a      	ldr	r2, [r7, #16]
 8000974:	4313      	orrs	r3, r2
 8000976:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	7d1b      	ldrb	r3, [r3, #20]
 800097c:	2b01      	cmp	r3, #1
 800097e:	d119      	bne.n	80009b4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	7b1b      	ldrb	r3, [r3, #12]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d109      	bne.n	800099c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	3b01      	subs	r3, #1
 800098e:	035a      	lsls	r2, r3, #13
 8000990:	693b      	ldr	r3, [r7, #16]
 8000992:	4313      	orrs	r3, r2
 8000994:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000998:	613b      	str	r3, [r7, #16]
 800099a:	e00b      	b.n	80009b4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009a0:	f043 0220 	orr.w	r2, r3, #32
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009ac:	f043 0201 	orr.w	r2, r3, #1
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	430a      	orrs	r2, r1
 80009c6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	689a      	ldr	r2, [r3, #8]
 80009ce:	4b28      	ldr	r3, [pc, #160]	@ (8000a70 <HAL_ADC_Init+0x1a8>)
 80009d0:	4013      	ands	r3, r2
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	6812      	ldr	r2, [r2, #0]
 80009d6:	68b9      	ldr	r1, [r7, #8]
 80009d8:	430b      	orrs	r3, r1
 80009da:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	689b      	ldr	r3, [r3, #8]
 80009e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80009e4:	d003      	beq.n	80009ee <HAL_ADC_Init+0x126>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	689b      	ldr	r3, [r3, #8]
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d104      	bne.n	80009f8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	691b      	ldr	r3, [r3, #16]
 80009f2:	3b01      	subs	r3, #1
 80009f4:	051b      	lsls	r3, r3, #20
 80009f6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009fe:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	68fa      	ldr	r2, [r7, #12]
 8000a08:	430a      	orrs	r2, r1
 8000a0a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	689a      	ldr	r2, [r3, #8]
 8000a12:	4b18      	ldr	r3, [pc, #96]	@ (8000a74 <HAL_ADC_Init+0x1ac>)
 8000a14:	4013      	ands	r3, r2
 8000a16:	68ba      	ldr	r2, [r7, #8]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d10b      	bne.n	8000a34 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2200      	movs	r2, #0
 8000a20:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a26:	f023 0303 	bic.w	r3, r3, #3
 8000a2a:	f043 0201 	orr.w	r2, r3, #1
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a32:	e018      	b.n	8000a66 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a38:	f023 0312 	bic.w	r3, r3, #18
 8000a3c:	f043 0210 	orr.w	r2, r3, #16
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a48:	f043 0201 	orr.w	r2, r3, #1
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000a50:	2301      	movs	r3, #1
 8000a52:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a54:	e007      	b.n	8000a66 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a5a:	f043 0210 	orr.w	r2, r3, #16
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
 8000a64:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000a66:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3718      	adds	r7, #24
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	ffe1f7fd 	.word	0xffe1f7fd
 8000a74:	ff1f0efe 	.word	0xff1f0efe

08000a78 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a80:	2300      	movs	r3, #0
 8000a82:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d101      	bne.n	8000a92 <HAL_ADC_Start+0x1a>
 8000a8e:	2302      	movs	r3, #2
 8000a90:	e098      	b.n	8000bc4 <HAL_ADC_Start+0x14c>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2201      	movs	r2, #1
 8000a96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f000 faa4 	bl	8000fe8 <ADC_Enable>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000aa4:	7bfb      	ldrb	r3, [r7, #15]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	f040 8087 	bne.w	8000bba <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ab0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000ab4:	f023 0301 	bic.w	r3, r3, #1
 8000ab8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a41      	ldr	r2, [pc, #260]	@ (8000bcc <HAL_ADC_Start+0x154>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d105      	bne.n	8000ad6 <HAL_ADC_Start+0x5e>
 8000aca:	4b41      	ldr	r3, [pc, #260]	@ (8000bd0 <HAL_ADC_Start+0x158>)
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d115      	bne.n	8000b02 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ada:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d026      	beq.n	8000b3e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000af4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000af8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000b00:	e01d      	b.n	8000b3e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b06:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a2f      	ldr	r2, [pc, #188]	@ (8000bd0 <HAL_ADC_Start+0x158>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d004      	beq.n	8000b22 <HAL_ADC_Start+0xaa>
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a2b      	ldr	r2, [pc, #172]	@ (8000bcc <HAL_ADC_Start+0x154>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d10d      	bne.n	8000b3e <HAL_ADC_Start+0xc6>
 8000b22:	4b2b      	ldr	r3, [pc, #172]	@ (8000bd0 <HAL_ADC_Start+0x158>)
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d007      	beq.n	8000b3e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b32:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000b36:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d006      	beq.n	8000b58 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b4e:	f023 0206 	bic.w	r2, r3, #6
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b56:	e002      	b.n	8000b5e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2200      	movs	r2, #0
 8000b62:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f06f 0202 	mvn.w	r2, #2
 8000b6e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000b7a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000b7e:	d113      	bne.n	8000ba8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000b84:	4a11      	ldr	r2, [pc, #68]	@ (8000bcc <HAL_ADC_Start+0x154>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d105      	bne.n	8000b96 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000b8a:	4b11      	ldr	r3, [pc, #68]	@ (8000bd0 <HAL_ADC_Start+0x158>)
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d108      	bne.n	8000ba8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	689a      	ldr	r2, [r3, #8]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	e00c      	b.n	8000bc2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	689a      	ldr	r2, [r3, #8]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	e003      	b.n	8000bc2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40012800 	.word	0x40012800
 8000bd0:	40012400 	.word	0x40012400

08000bd4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000bd4:	b590      	push	{r4, r7, lr}
 8000bd6:	b087      	sub	sp, #28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000bde:	2300      	movs	r3, #0
 8000be0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000bea:	f7ff fe3f 	bl	800086c <HAL_GetTick>
 8000bee:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	689b      	ldr	r3, [r3, #8]
 8000bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d00b      	beq.n	8000c16 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c02:	f043 0220 	orr.w	r2, r3, #32
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e0d3      	b.n	8000dbe <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d131      	bne.n	8000c88 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c2a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d12a      	bne.n	8000c88 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000c32:	e021      	b.n	8000c78 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c3a:	d01d      	beq.n	8000c78 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d007      	beq.n	8000c52 <HAL_ADC_PollForConversion+0x7e>
 8000c42:	f7ff fe13 	bl	800086c <HAL_GetTick>
 8000c46:	4602      	mov	r2, r0
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	1ad3      	subs	r3, r2, r3
 8000c4c:	683a      	ldr	r2, [r7, #0]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	d212      	bcs.n	8000c78 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f003 0302 	and.w	r3, r3, #2
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d10b      	bne.n	8000c78 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c64:	f043 0204 	orr.w	r2, r3, #4
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8000c74:	2303      	movs	r3, #3
 8000c76:	e0a2      	b.n	8000dbe <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f003 0302 	and.w	r3, r3, #2
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d0d6      	beq.n	8000c34 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000c86:	e070      	b.n	8000d6a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000c88:	4b4f      	ldr	r3, [pc, #316]	@ (8000dc8 <HAL_ADC_PollForConversion+0x1f4>)
 8000c8a:	681c      	ldr	r4, [r3, #0]
 8000c8c:	2002      	movs	r0, #2
 8000c8e:	f001 fc91 	bl	80025b4 <HAL_RCCEx_GetPeriphCLKFreq>
 8000c92:	4603      	mov	r3, r0
 8000c94:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	6919      	ldr	r1, [r3, #16]
 8000c9e:	4b4b      	ldr	r3, [pc, #300]	@ (8000dcc <HAL_ADC_PollForConversion+0x1f8>)
 8000ca0:	400b      	ands	r3, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d118      	bne.n	8000cd8 <HAL_ADC_PollForConversion+0x104>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	68d9      	ldr	r1, [r3, #12]
 8000cac:	4b48      	ldr	r3, [pc, #288]	@ (8000dd0 <HAL_ADC_PollForConversion+0x1fc>)
 8000cae:	400b      	ands	r3, r1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d111      	bne.n	8000cd8 <HAL_ADC_PollForConversion+0x104>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	6919      	ldr	r1, [r3, #16]
 8000cba:	4b46      	ldr	r3, [pc, #280]	@ (8000dd4 <HAL_ADC_PollForConversion+0x200>)
 8000cbc:	400b      	ands	r3, r1
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d108      	bne.n	8000cd4 <HAL_ADC_PollForConversion+0x100>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	68d9      	ldr	r1, [r3, #12]
 8000cc8:	4b43      	ldr	r3, [pc, #268]	@ (8000dd8 <HAL_ADC_PollForConversion+0x204>)
 8000cca:	400b      	ands	r3, r1
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d101      	bne.n	8000cd4 <HAL_ADC_PollForConversion+0x100>
 8000cd0:	2314      	movs	r3, #20
 8000cd2:	e020      	b.n	8000d16 <HAL_ADC_PollForConversion+0x142>
 8000cd4:	2329      	movs	r3, #41	@ 0x29
 8000cd6:	e01e      	b.n	8000d16 <HAL_ADC_PollForConversion+0x142>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	6919      	ldr	r1, [r3, #16]
 8000cde:	4b3d      	ldr	r3, [pc, #244]	@ (8000dd4 <HAL_ADC_PollForConversion+0x200>)
 8000ce0:	400b      	ands	r3, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d106      	bne.n	8000cf4 <HAL_ADC_PollForConversion+0x120>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	68d9      	ldr	r1, [r3, #12]
 8000cec:	4b3a      	ldr	r3, [pc, #232]	@ (8000dd8 <HAL_ADC_PollForConversion+0x204>)
 8000cee:	400b      	ands	r3, r1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d00d      	beq.n	8000d10 <HAL_ADC_PollForConversion+0x13c>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	6919      	ldr	r1, [r3, #16]
 8000cfa:	4b38      	ldr	r3, [pc, #224]	@ (8000ddc <HAL_ADC_PollForConversion+0x208>)
 8000cfc:	400b      	ands	r3, r1
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d108      	bne.n	8000d14 <HAL_ADC_PollForConversion+0x140>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	68d9      	ldr	r1, [r3, #12]
 8000d08:	4b34      	ldr	r3, [pc, #208]	@ (8000ddc <HAL_ADC_PollForConversion+0x208>)
 8000d0a:	400b      	ands	r3, r1
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d101      	bne.n	8000d14 <HAL_ADC_PollForConversion+0x140>
 8000d10:	2354      	movs	r3, #84	@ 0x54
 8000d12:	e000      	b.n	8000d16 <HAL_ADC_PollForConversion+0x142>
 8000d14:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000d16:	fb02 f303 	mul.w	r3, r2, r3
 8000d1a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000d1c:	e021      	b.n	8000d62 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d24:	d01a      	beq.n	8000d5c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d007      	beq.n	8000d3c <HAL_ADC_PollForConversion+0x168>
 8000d2c:	f7ff fd9e 	bl	800086c <HAL_GetTick>
 8000d30:	4602      	mov	r2, r0
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	683a      	ldr	r2, [r7, #0]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d20f      	bcs.n	8000d5c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d90b      	bls.n	8000d5c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d48:	f043 0204 	orr.w	r2, r3, #4
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2200      	movs	r2, #0
 8000d54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	e030      	b.n	8000dbe <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d8d9      	bhi.n	8000d1e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f06f 0212 	mvn.w	r2, #18
 8000d72:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d78:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000d8a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000d8e:	d115      	bne.n	8000dbc <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d111      	bne.n	8000dbc <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000da8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d105      	bne.n	8000dbc <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000db4:	f043 0201 	orr.w	r2, r3, #1
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	371c      	adds	r7, #28
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd90      	pop	{r4, r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000000 	.word	0x20000000
 8000dcc:	24924924 	.word	0x24924924
 8000dd0:	00924924 	.word	0x00924924
 8000dd4:	12492492 	.word	0x12492492
 8000dd8:	00492492 	.word	0x00492492
 8000ddc:	00249249 	.word	0x00249249

08000de0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr

08000df8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e02:	2300      	movs	r3, #0
 8000e04:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000e06:	2300      	movs	r3, #0
 8000e08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d101      	bne.n	8000e18 <HAL_ADC_ConfigChannel+0x20>
 8000e14:	2302      	movs	r3, #2
 8000e16:	e0dc      	b.n	8000fd2 <HAL_ADC_ConfigChannel+0x1da>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	2b06      	cmp	r3, #6
 8000e26:	d81c      	bhi.n	8000e62 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685a      	ldr	r2, [r3, #4]
 8000e32:	4613      	mov	r3, r2
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	4413      	add	r3, r2
 8000e38:	3b05      	subs	r3, #5
 8000e3a:	221f      	movs	r2, #31
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	4019      	ands	r1, r3
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	6818      	ldr	r0, [r3, #0]
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685a      	ldr	r2, [r3, #4]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	4413      	add	r3, r2
 8000e52:	3b05      	subs	r3, #5
 8000e54:	fa00 f203 	lsl.w	r2, r0, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e60:	e03c      	b.n	8000edc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	2b0c      	cmp	r3, #12
 8000e68:	d81c      	bhi.n	8000ea4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685a      	ldr	r2, [r3, #4]
 8000e74:	4613      	mov	r3, r2
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	4413      	add	r3, r2
 8000e7a:	3b23      	subs	r3, #35	@ 0x23
 8000e7c:	221f      	movs	r2, #31
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43db      	mvns	r3, r3
 8000e84:	4019      	ands	r1, r3
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	6818      	ldr	r0, [r3, #0]
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685a      	ldr	r2, [r3, #4]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	4413      	add	r3, r2
 8000e94:	3b23      	subs	r3, #35	@ 0x23
 8000e96:	fa00 f203 	lsl.w	r2, r0, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ea2:	e01b      	b.n	8000edc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685a      	ldr	r2, [r3, #4]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	4413      	add	r3, r2
 8000eb4:	3b41      	subs	r3, #65	@ 0x41
 8000eb6:	221f      	movs	r2, #31
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	4019      	ands	r1, r3
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	6818      	ldr	r0, [r3, #0]
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685a      	ldr	r2, [r3, #4]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	4413      	add	r3, r2
 8000ece:	3b41      	subs	r3, #65	@ 0x41
 8000ed0:	fa00 f203 	lsl.w	r2, r0, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b09      	cmp	r3, #9
 8000ee2:	d91c      	bls.n	8000f1e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	68d9      	ldr	r1, [r3, #12]
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	4413      	add	r3, r2
 8000ef4:	3b1e      	subs	r3, #30
 8000ef6:	2207      	movs	r2, #7
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	4019      	ands	r1, r3
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	6898      	ldr	r0, [r3, #8]
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	4413      	add	r3, r2
 8000f0e:	3b1e      	subs	r3, #30
 8000f10:	fa00 f203 	lsl.w	r2, r0, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	60da      	str	r2, [r3, #12]
 8000f1c:	e019      	b.n	8000f52 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	6919      	ldr	r1, [r3, #16]
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	4413      	add	r3, r2
 8000f2e:	2207      	movs	r2, #7
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	4019      	ands	r1, r3
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	6898      	ldr	r0, [r3, #8]
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	4613      	mov	r3, r2
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	4413      	add	r3, r2
 8000f46:	fa00 f203 	lsl.w	r2, r0, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2b10      	cmp	r3, #16
 8000f58:	d003      	beq.n	8000f62 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f5e:	2b11      	cmp	r3, #17
 8000f60:	d132      	bne.n	8000fc8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a1d      	ldr	r2, [pc, #116]	@ (8000fdc <HAL_ADC_ConfigChannel+0x1e4>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d125      	bne.n	8000fb8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d126      	bne.n	8000fc8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	689a      	ldr	r2, [r3, #8]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000f88:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2b10      	cmp	r3, #16
 8000f90:	d11a      	bne.n	8000fc8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f92:	4b13      	ldr	r3, [pc, #76]	@ (8000fe0 <HAL_ADC_ConfigChannel+0x1e8>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a13      	ldr	r2, [pc, #76]	@ (8000fe4 <HAL_ADC_ConfigChannel+0x1ec>)
 8000f98:	fba2 2303 	umull	r2, r3, r2, r3
 8000f9c:	0c9a      	lsrs	r2, r3, #18
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	4413      	add	r3, r2
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fa8:	e002      	b.n	8000fb0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	3b01      	subs	r3, #1
 8000fae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d1f9      	bne.n	8000faa <HAL_ADC_ConfigChannel+0x1b2>
 8000fb6:	e007      	b.n	8000fc8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fbc:	f043 0220 	orr.w	r2, r3, #32
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr
 8000fdc:	40012400 	.word	0x40012400
 8000fe0:	20000000 	.word	0x20000000
 8000fe4:	431bde83 	.word	0x431bde83

08000fe8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	2b01      	cmp	r3, #1
 8001004:	d040      	beq.n	8001088 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	689a      	ldr	r2, [r3, #8]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f042 0201 	orr.w	r2, r2, #1
 8001014:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001016:	4b1f      	ldr	r3, [pc, #124]	@ (8001094 <ADC_Enable+0xac>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a1f      	ldr	r2, [pc, #124]	@ (8001098 <ADC_Enable+0xb0>)
 800101c:	fba2 2303 	umull	r2, r3, r2, r3
 8001020:	0c9b      	lsrs	r3, r3, #18
 8001022:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001024:	e002      	b.n	800102c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	3b01      	subs	r3, #1
 800102a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d1f9      	bne.n	8001026 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001032:	f7ff fc1b 	bl	800086c <HAL_GetTick>
 8001036:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001038:	e01f      	b.n	800107a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800103a:	f7ff fc17 	bl	800086c <HAL_GetTick>
 800103e:	4602      	mov	r2, r0
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d918      	bls.n	800107a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	2b01      	cmp	r3, #1
 8001054:	d011      	beq.n	800107a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800105a:	f043 0210 	orr.w	r2, r3, #16
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001066:	f043 0201 	orr.w	r2, r3, #1
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e007      	b.n	800108a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	2b01      	cmp	r3, #1
 8001086:	d1d8      	bne.n	800103a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000000 	.word	0x20000000
 8001098:	431bde83 	.word	0x431bde83

0800109c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d12e      	bne.n	8001114 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	689a      	ldr	r2, [r3, #8]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f022 0201 	bic.w	r2, r2, #1
 80010c4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80010c6:	f7ff fbd1 	bl	800086c <HAL_GetTick>
 80010ca:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80010cc:	e01b      	b.n	8001106 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80010ce:	f7ff fbcd 	bl	800086c <HAL_GetTick>
 80010d2:	4602      	mov	r2, r0
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d914      	bls.n	8001106 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d10d      	bne.n	8001106 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010ee:	f043 0210 	orr.w	r2, r3, #16
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010fa:	f043 0201 	orr.w	r2, r3, #1
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e007      	b.n	8001116 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	2b01      	cmp	r3, #1
 8001112:	d0dc      	beq.n	80010ce <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b084      	sub	sp, #16
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d101      	bne.n	8001130 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	e0ed      	b.n	800130c <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b00      	cmp	r3, #0
 800113a:	d102      	bne.n	8001142 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff fa3d 	bl	80005bc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f042 0201 	orr.w	r2, r2, #1
 8001150:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001152:	f7ff fb8b 	bl	800086c <HAL_GetTick>
 8001156:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001158:	e012      	b.n	8001180 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800115a:	f7ff fb87 	bl	800086c <HAL_GetTick>
 800115e:	4602      	mov	r2, r0
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	2b0a      	cmp	r3, #10
 8001166:	d90b      	bls.n	8001180 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800116c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2205      	movs	r2, #5
 8001178:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e0c5      	b.n	800130c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	2b00      	cmp	r3, #0
 800118c:	d0e5      	beq.n	800115a <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f022 0202 	bic.w	r2, r2, #2
 800119c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800119e:	f7ff fb65 	bl	800086c <HAL_GetTick>
 80011a2:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011a4:	e012      	b.n	80011cc <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011a6:	f7ff fb61 	bl	800086c <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b0a      	cmp	r3, #10
 80011b2:	d90b      	bls.n	80011cc <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011b8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2205      	movs	r2, #5
 80011c4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e09f      	b.n	800130c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d1e5      	bne.n	80011a6 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	7e1b      	ldrb	r3, [r3, #24]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d108      	bne.n	80011f4 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	e007      	b.n	8001204 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001202:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	7e5b      	ldrb	r3, [r3, #25]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d108      	bne.n	800121e <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	e007      	b.n	800122e <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800122c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	7e9b      	ldrb	r3, [r3, #26]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d108      	bne.n	8001248 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f042 0220 	orr.w	r2, r2, #32
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	e007      	b.n	8001258 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f022 0220 	bic.w	r2, r2, #32
 8001256:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	7edb      	ldrb	r3, [r3, #27]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d108      	bne.n	8001272 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f022 0210 	bic.w	r2, r2, #16
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	e007      	b.n	8001282 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f042 0210 	orr.w	r2, r2, #16
 8001280:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	7f1b      	ldrb	r3, [r3, #28]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d108      	bne.n	800129c <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f042 0208 	orr.w	r2, r2, #8
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	e007      	b.n	80012ac <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f022 0208 	bic.w	r2, r2, #8
 80012aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	7f5b      	ldrb	r3, [r3, #29]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d108      	bne.n	80012c6 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f042 0204 	orr.w	r2, r2, #4
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	e007      	b.n	80012d6 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f022 0204 	bic.w	r2, r2, #4
 80012d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689a      	ldr	r2, [r3, #8]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	431a      	orrs	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	691b      	ldr	r3, [r3, #16]
 80012e4:	431a      	orrs	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	ea42 0103 	orr.w	r1, r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	1e5a      	subs	r2, r3, #1
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	430a      	orrs	r2, r1
 80012fa:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2201      	movs	r2, #1
 8001306:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b01      	cmp	r3, #1
 8001326:	d12e      	bne.n	8001386 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2202      	movs	r2, #2
 800132c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f022 0201 	bic.w	r2, r2, #1
 800133e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001340:	f7ff fa94 	bl	800086c <HAL_GetTick>
 8001344:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001346:	e012      	b.n	800136e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001348:	f7ff fa90 	bl	800086c <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b0a      	cmp	r3, #10
 8001354:	d90b      	bls.n	800136e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800135a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2205      	movs	r2, #5
 8001366:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e012      	b.n	8001394 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1e5      	bne.n	8001348 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001382:	2300      	movs	r3, #0
 8001384:	e006      	b.n	8001394 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800138a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
  }
}
 8001394:	4618      	mov	r0, r3
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800139c:	b480      	push	{r7}
 800139e:	b089      	sub	sp, #36	@ 0x24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
 80013a8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013b0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80013ba:	7ffb      	ldrb	r3, [r7, #31]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d003      	beq.n	80013c8 <HAL_CAN_AddTxMessage+0x2c>
 80013c0:	7ffb      	ldrb	r3, [r7, #31]
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	f040 80ad 	bne.w	8001522 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d10a      	bne.n	80013e8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d105      	bne.n	80013e8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f000 8095 	beq.w	8001512 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	0e1b      	lsrs	r3, r3, #24
 80013ec:	f003 0303 	and.w	r3, r3, #3
 80013f0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80013f2:	2201      	movs	r2, #1
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	409a      	lsls	r2, r3
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d10d      	bne.n	8001420 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800140e:	68f9      	ldr	r1, [r7, #12]
 8001410:	6809      	ldr	r1, [r1, #0]
 8001412:	431a      	orrs	r2, r3
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	3318      	adds	r3, #24
 8001418:	011b      	lsls	r3, r3, #4
 800141a:	440b      	add	r3, r1
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	e00f      	b.n	8001440 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800142a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001430:	68f9      	ldr	r1, [r7, #12]
 8001432:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001434:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	3318      	adds	r3, #24
 800143a:	011b      	lsls	r3, r3, #4
 800143c:	440b      	add	r3, r1
 800143e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	6819      	ldr	r1, [r3, #0]
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	691a      	ldr	r2, [r3, #16]
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	3318      	adds	r3, #24
 800144c:	011b      	lsls	r3, r3, #4
 800144e:	440b      	add	r3, r1
 8001450:	3304      	adds	r3, #4
 8001452:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	7d1b      	ldrb	r3, [r3, #20]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d111      	bne.n	8001480 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	3318      	adds	r3, #24
 8001464:	011b      	lsls	r3, r3, #4
 8001466:	4413      	add	r3, r2
 8001468:	3304      	adds	r3, #4
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	68fa      	ldr	r2, [r7, #12]
 800146e:	6811      	ldr	r1, [r2, #0]
 8001470:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	3318      	adds	r3, #24
 8001478:	011b      	lsls	r3, r3, #4
 800147a:	440b      	add	r3, r1
 800147c:	3304      	adds	r3, #4
 800147e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3307      	adds	r3, #7
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	061a      	lsls	r2, r3, #24
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3306      	adds	r3, #6
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	041b      	lsls	r3, r3, #16
 8001490:	431a      	orrs	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	3305      	adds	r3, #5
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	021b      	lsls	r3, r3, #8
 800149a:	4313      	orrs	r3, r2
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	3204      	adds	r2, #4
 80014a0:	7812      	ldrb	r2, [r2, #0]
 80014a2:	4610      	mov	r0, r2
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	6811      	ldr	r1, [r2, #0]
 80014a8:	ea43 0200 	orr.w	r2, r3, r0
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	011b      	lsls	r3, r3, #4
 80014b0:	440b      	add	r3, r1
 80014b2:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80014b6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3303      	adds	r3, #3
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	061a      	lsls	r2, r3, #24
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3302      	adds	r3, #2
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	041b      	lsls	r3, r3, #16
 80014c8:	431a      	orrs	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	3301      	adds	r3, #1
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	021b      	lsls	r3, r3, #8
 80014d2:	4313      	orrs	r3, r2
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	7812      	ldrb	r2, [r2, #0]
 80014d8:	4610      	mov	r0, r2
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	6811      	ldr	r1, [r2, #0]
 80014de:	ea43 0200 	orr.w	r2, r3, r0
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	011b      	lsls	r3, r3, #4
 80014e6:	440b      	add	r3, r1
 80014e8:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80014ec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	3318      	adds	r3, #24
 80014f6:	011b      	lsls	r3, r3, #4
 80014f8:	4413      	add	r3, r2
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	68fa      	ldr	r2, [r7, #12]
 80014fe:	6811      	ldr	r1, [r2, #0]
 8001500:	f043 0201 	orr.w	r2, r3, #1
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	3318      	adds	r3, #24
 8001508:	011b      	lsls	r3, r3, #4
 800150a:	440b      	add	r3, r1
 800150c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800150e:	2300      	movs	r3, #0
 8001510:	e00e      	b.n	8001530 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001516:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e006      	b.n	8001530 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001526:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
  }
}
 8001530:	4618      	mov	r0, r3
 8001532:	3724      	adds	r7, #36	@ 0x24
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr
	...

0800153c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800154c:	4b0c      	ldr	r3, [pc, #48]	@ (8001580 <__NVIC_SetPriorityGrouping+0x44>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001552:	68ba      	ldr	r2, [r7, #8]
 8001554:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001558:	4013      	ands	r3, r2
 800155a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001564:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001568:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800156c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800156e:	4a04      	ldr	r2, [pc, #16]	@ (8001580 <__NVIC_SetPriorityGrouping+0x44>)
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	60d3      	str	r3, [r2, #12]
}
 8001574:	bf00      	nop
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001588:	4b04      	ldr	r3, [pc, #16]	@ (800159c <__NVIC_GetPriorityGrouping+0x18>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	0a1b      	lsrs	r3, r3, #8
 800158e:	f003 0307 	and.w	r3, r3, #7
}
 8001592:	4618      	mov	r0, r3
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	db0b      	blt.n	80015ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	f003 021f 	and.w	r2, r3, #31
 80015b8:	4906      	ldr	r1, [pc, #24]	@ (80015d4 <__NVIC_EnableIRQ+0x34>)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	095b      	lsrs	r3, r3, #5
 80015c0:	2001      	movs	r0, #1
 80015c2:	fa00 f202 	lsl.w	r2, r0, r2
 80015c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr
 80015d4:	e000e100 	.word	0xe000e100

080015d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	6039      	str	r1, [r7, #0]
 80015e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	db0a      	blt.n	8001602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	490c      	ldr	r1, [pc, #48]	@ (8001624 <__NVIC_SetPriority+0x4c>)
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	0112      	lsls	r2, r2, #4
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	440b      	add	r3, r1
 80015fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001600:	e00a      	b.n	8001618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	b2da      	uxtb	r2, r3
 8001606:	4908      	ldr	r1, [pc, #32]	@ (8001628 <__NVIC_SetPriority+0x50>)
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	3b04      	subs	r3, #4
 8001610:	0112      	lsls	r2, r2, #4
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	440b      	add	r3, r1
 8001616:	761a      	strb	r2, [r3, #24]
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	e000e100 	.word	0xe000e100
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800162c:	b480      	push	{r7}
 800162e:	b089      	sub	sp, #36	@ 0x24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	f1c3 0307 	rsb	r3, r3, #7
 8001646:	2b04      	cmp	r3, #4
 8001648:	bf28      	it	cs
 800164a:	2304      	movcs	r3, #4
 800164c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	3304      	adds	r3, #4
 8001652:	2b06      	cmp	r3, #6
 8001654:	d902      	bls.n	800165c <NVIC_EncodePriority+0x30>
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3b03      	subs	r3, #3
 800165a:	e000      	b.n	800165e <NVIC_EncodePriority+0x32>
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001660:	f04f 32ff 	mov.w	r2, #4294967295
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43da      	mvns	r2, r3
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	401a      	ands	r2, r3
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001674:	f04f 31ff 	mov.w	r1, #4294967295
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	fa01 f303 	lsl.w	r3, r1, r3
 800167e:	43d9      	mvns	r1, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001684:	4313      	orrs	r3, r2
         );
}
 8001686:	4618      	mov	r0, r3
 8001688:	3724      	adds	r7, #36	@ 0x24
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr

08001690 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3b01      	subs	r3, #1
 800169c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016a0:	d301      	bcc.n	80016a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016a2:	2301      	movs	r3, #1
 80016a4:	e00f      	b.n	80016c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016a6:	4a0a      	ldr	r2, [pc, #40]	@ (80016d0 <SysTick_Config+0x40>)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ae:	210f      	movs	r1, #15
 80016b0:	f04f 30ff 	mov.w	r0, #4294967295
 80016b4:	f7ff ff90 	bl	80015d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b8:	4b05      	ldr	r3, [pc, #20]	@ (80016d0 <SysTick_Config+0x40>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016be:	4b04      	ldr	r3, [pc, #16]	@ (80016d0 <SysTick_Config+0x40>)
 80016c0:	2207      	movs	r2, #7
 80016c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	e000e010 	.word	0xe000e010

080016d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff ff2d 	bl	800153c <__NVIC_SetPriorityGrouping>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b086      	sub	sp, #24
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	4603      	mov	r3, r0
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
 80016f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016fc:	f7ff ff42 	bl	8001584 <__NVIC_GetPriorityGrouping>
 8001700:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	68b9      	ldr	r1, [r7, #8]
 8001706:	6978      	ldr	r0, [r7, #20]
 8001708:	f7ff ff90 	bl	800162c <NVIC_EncodePriority>
 800170c:	4602      	mov	r2, r0
 800170e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001712:	4611      	mov	r1, r2
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff5f 	bl	80015d8 <__NVIC_SetPriority>
}
 800171a:	bf00      	nop
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ff35 	bl	80015a0 <__NVIC_EnableIRQ>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff ffa2 	bl	8001690 <SysTick_Config>
 800174c:	4603      	mov	r3, r0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001756:	b480      	push	{r7}
 8001758:	b085      	sub	sp, #20
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800175e:	2300      	movs	r3, #0
 8001760:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d008      	beq.n	8001780 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2204      	movs	r2, #4
 8001772:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e020      	b.n	80017c2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 020e 	bic.w	r2, r2, #14
 800178e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f022 0201 	bic.w	r2, r2, #1
 800179e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017a8:	2101      	movs	r1, #1
 80017aa:	fa01 f202 	lsl.w	r2, r1, r2
 80017ae:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2201      	movs	r2, #1
 80017b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3714      	adds	r7, #20
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr

080017cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017d4:	2300      	movs	r3, #0
 80017d6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d005      	beq.n	80017f0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2204      	movs	r2, #4
 80017e8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	73fb      	strb	r3, [r7, #15]
 80017ee:	e051      	b.n	8001894 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f022 020e 	bic.w	r2, r2, #14
 80017fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f022 0201 	bic.w	r2, r2, #1
 800180e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a22      	ldr	r2, [pc, #136]	@ (80018a0 <HAL_DMA_Abort_IT+0xd4>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d029      	beq.n	800186e <HAL_DMA_Abort_IT+0xa2>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a21      	ldr	r2, [pc, #132]	@ (80018a4 <HAL_DMA_Abort_IT+0xd8>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d022      	beq.n	800186a <HAL_DMA_Abort_IT+0x9e>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a1f      	ldr	r2, [pc, #124]	@ (80018a8 <HAL_DMA_Abort_IT+0xdc>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d01a      	beq.n	8001864 <HAL_DMA_Abort_IT+0x98>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a1e      	ldr	r2, [pc, #120]	@ (80018ac <HAL_DMA_Abort_IT+0xe0>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d012      	beq.n	800185e <HAL_DMA_Abort_IT+0x92>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a1c      	ldr	r2, [pc, #112]	@ (80018b0 <HAL_DMA_Abort_IT+0xe4>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d00a      	beq.n	8001858 <HAL_DMA_Abort_IT+0x8c>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a1b      	ldr	r2, [pc, #108]	@ (80018b4 <HAL_DMA_Abort_IT+0xe8>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d102      	bne.n	8001852 <HAL_DMA_Abort_IT+0x86>
 800184c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001850:	e00e      	b.n	8001870 <HAL_DMA_Abort_IT+0xa4>
 8001852:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001856:	e00b      	b.n	8001870 <HAL_DMA_Abort_IT+0xa4>
 8001858:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800185c:	e008      	b.n	8001870 <HAL_DMA_Abort_IT+0xa4>
 800185e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001862:	e005      	b.n	8001870 <HAL_DMA_Abort_IT+0xa4>
 8001864:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001868:	e002      	b.n	8001870 <HAL_DMA_Abort_IT+0xa4>
 800186a:	2310      	movs	r3, #16
 800186c:	e000      	b.n	8001870 <HAL_DMA_Abort_IT+0xa4>
 800186e:	2301      	movs	r3, #1
 8001870:	4a11      	ldr	r2, [pc, #68]	@ (80018b8 <HAL_DMA_Abort_IT+0xec>)
 8001872:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	4798      	blx	r3
    } 
  }
  return status;
 8001894:	7bfb      	ldrb	r3, [r7, #15]
}
 8001896:	4618      	mov	r0, r3
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40020008 	.word	0x40020008
 80018a4:	4002001c 	.word	0x4002001c
 80018a8:	40020030 	.word	0x40020030
 80018ac:	40020044 	.word	0x40020044
 80018b0:	40020058 	.word	0x40020058
 80018b4:	4002006c 	.word	0x4002006c
 80018b8:	40020000 	.word	0x40020000

080018bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018bc:	b480      	push	{r7}
 80018be:	b08b      	sub	sp, #44	@ 0x2c
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018c6:	2300      	movs	r3, #0
 80018c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018ca:	2300      	movs	r3, #0
 80018cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ce:	e169      	b.n	8001ba4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018d0:	2201      	movs	r2, #1
 80018d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	69fa      	ldr	r2, [r7, #28]
 80018e0:	4013      	ands	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	f040 8158 	bne.w	8001b9e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	4a9a      	ldr	r2, [pc, #616]	@ (8001b5c <HAL_GPIO_Init+0x2a0>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d05e      	beq.n	80019b6 <HAL_GPIO_Init+0xfa>
 80018f8:	4a98      	ldr	r2, [pc, #608]	@ (8001b5c <HAL_GPIO_Init+0x2a0>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d875      	bhi.n	80019ea <HAL_GPIO_Init+0x12e>
 80018fe:	4a98      	ldr	r2, [pc, #608]	@ (8001b60 <HAL_GPIO_Init+0x2a4>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d058      	beq.n	80019b6 <HAL_GPIO_Init+0xfa>
 8001904:	4a96      	ldr	r2, [pc, #600]	@ (8001b60 <HAL_GPIO_Init+0x2a4>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d86f      	bhi.n	80019ea <HAL_GPIO_Init+0x12e>
 800190a:	4a96      	ldr	r2, [pc, #600]	@ (8001b64 <HAL_GPIO_Init+0x2a8>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d052      	beq.n	80019b6 <HAL_GPIO_Init+0xfa>
 8001910:	4a94      	ldr	r2, [pc, #592]	@ (8001b64 <HAL_GPIO_Init+0x2a8>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d869      	bhi.n	80019ea <HAL_GPIO_Init+0x12e>
 8001916:	4a94      	ldr	r2, [pc, #592]	@ (8001b68 <HAL_GPIO_Init+0x2ac>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d04c      	beq.n	80019b6 <HAL_GPIO_Init+0xfa>
 800191c:	4a92      	ldr	r2, [pc, #584]	@ (8001b68 <HAL_GPIO_Init+0x2ac>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d863      	bhi.n	80019ea <HAL_GPIO_Init+0x12e>
 8001922:	4a92      	ldr	r2, [pc, #584]	@ (8001b6c <HAL_GPIO_Init+0x2b0>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d046      	beq.n	80019b6 <HAL_GPIO_Init+0xfa>
 8001928:	4a90      	ldr	r2, [pc, #576]	@ (8001b6c <HAL_GPIO_Init+0x2b0>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d85d      	bhi.n	80019ea <HAL_GPIO_Init+0x12e>
 800192e:	2b12      	cmp	r3, #18
 8001930:	d82a      	bhi.n	8001988 <HAL_GPIO_Init+0xcc>
 8001932:	2b12      	cmp	r3, #18
 8001934:	d859      	bhi.n	80019ea <HAL_GPIO_Init+0x12e>
 8001936:	a201      	add	r2, pc, #4	@ (adr r2, 800193c <HAL_GPIO_Init+0x80>)
 8001938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800193c:	080019b7 	.word	0x080019b7
 8001940:	08001991 	.word	0x08001991
 8001944:	080019a3 	.word	0x080019a3
 8001948:	080019e5 	.word	0x080019e5
 800194c:	080019eb 	.word	0x080019eb
 8001950:	080019eb 	.word	0x080019eb
 8001954:	080019eb 	.word	0x080019eb
 8001958:	080019eb 	.word	0x080019eb
 800195c:	080019eb 	.word	0x080019eb
 8001960:	080019eb 	.word	0x080019eb
 8001964:	080019eb 	.word	0x080019eb
 8001968:	080019eb 	.word	0x080019eb
 800196c:	080019eb 	.word	0x080019eb
 8001970:	080019eb 	.word	0x080019eb
 8001974:	080019eb 	.word	0x080019eb
 8001978:	080019eb 	.word	0x080019eb
 800197c:	080019eb 	.word	0x080019eb
 8001980:	08001999 	.word	0x08001999
 8001984:	080019ad 	.word	0x080019ad
 8001988:	4a79      	ldr	r2, [pc, #484]	@ (8001b70 <HAL_GPIO_Init+0x2b4>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d013      	beq.n	80019b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800198e:	e02c      	b.n	80019ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	623b      	str	r3, [r7, #32]
          break;
 8001996:	e029      	b.n	80019ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	3304      	adds	r3, #4
 800199e:	623b      	str	r3, [r7, #32]
          break;
 80019a0:	e024      	b.n	80019ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	3308      	adds	r3, #8
 80019a8:	623b      	str	r3, [r7, #32]
          break;
 80019aa:	e01f      	b.n	80019ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	330c      	adds	r3, #12
 80019b2:	623b      	str	r3, [r7, #32]
          break;
 80019b4:	e01a      	b.n	80019ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d102      	bne.n	80019c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019be:	2304      	movs	r3, #4
 80019c0:	623b      	str	r3, [r7, #32]
          break;
 80019c2:	e013      	b.n	80019ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d105      	bne.n	80019d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019cc:	2308      	movs	r3, #8
 80019ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	69fa      	ldr	r2, [r7, #28]
 80019d4:	611a      	str	r2, [r3, #16]
          break;
 80019d6:	e009      	b.n	80019ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019d8:	2308      	movs	r3, #8
 80019da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	69fa      	ldr	r2, [r7, #28]
 80019e0:	615a      	str	r2, [r3, #20]
          break;
 80019e2:	e003      	b.n	80019ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019e4:	2300      	movs	r3, #0
 80019e6:	623b      	str	r3, [r7, #32]
          break;
 80019e8:	e000      	b.n	80019ec <HAL_GPIO_Init+0x130>
          break;
 80019ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	2bff      	cmp	r3, #255	@ 0xff
 80019f0:	d801      	bhi.n	80019f6 <HAL_GPIO_Init+0x13a>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	e001      	b.n	80019fa <HAL_GPIO_Init+0x13e>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	3304      	adds	r3, #4
 80019fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	2bff      	cmp	r3, #255	@ 0xff
 8001a00:	d802      	bhi.n	8001a08 <HAL_GPIO_Init+0x14c>
 8001a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	e002      	b.n	8001a0e <HAL_GPIO_Init+0x152>
 8001a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0a:	3b08      	subs	r3, #8
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	210f      	movs	r1, #15
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	401a      	ands	r2, r3
 8001a20:	6a39      	ldr	r1, [r7, #32]
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	fa01 f303 	lsl.w	r3, r1, r3
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f000 80b1 	beq.w	8001b9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a3c:	4b4d      	ldr	r3, [pc, #308]	@ (8001b74 <HAL_GPIO_Init+0x2b8>)
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	4a4c      	ldr	r2, [pc, #304]	@ (8001b74 <HAL_GPIO_Init+0x2b8>)
 8001a42:	f043 0301 	orr.w	r3, r3, #1
 8001a46:	6193      	str	r3, [r2, #24]
 8001a48:	4b4a      	ldr	r3, [pc, #296]	@ (8001b74 <HAL_GPIO_Init+0x2b8>)
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a54:	4a48      	ldr	r2, [pc, #288]	@ (8001b78 <HAL_GPIO_Init+0x2bc>)
 8001a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a58:	089b      	lsrs	r3, r3, #2
 8001a5a:	3302      	adds	r3, #2
 8001a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	220f      	movs	r2, #15
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	4013      	ands	r3, r2
 8001a76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4a40      	ldr	r2, [pc, #256]	@ (8001b7c <HAL_GPIO_Init+0x2c0>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d013      	beq.n	8001aa8 <HAL_GPIO_Init+0x1ec>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a3f      	ldr	r2, [pc, #252]	@ (8001b80 <HAL_GPIO_Init+0x2c4>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d00d      	beq.n	8001aa4 <HAL_GPIO_Init+0x1e8>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4a3e      	ldr	r2, [pc, #248]	@ (8001b84 <HAL_GPIO_Init+0x2c8>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d007      	beq.n	8001aa0 <HAL_GPIO_Init+0x1e4>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4a3d      	ldr	r2, [pc, #244]	@ (8001b88 <HAL_GPIO_Init+0x2cc>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d101      	bne.n	8001a9c <HAL_GPIO_Init+0x1e0>
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e006      	b.n	8001aaa <HAL_GPIO_Init+0x1ee>
 8001a9c:	2304      	movs	r3, #4
 8001a9e:	e004      	b.n	8001aaa <HAL_GPIO_Init+0x1ee>
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	e002      	b.n	8001aaa <HAL_GPIO_Init+0x1ee>
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e000      	b.n	8001aaa <HAL_GPIO_Init+0x1ee>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001aac:	f002 0203 	and.w	r2, r2, #3
 8001ab0:	0092      	lsls	r2, r2, #2
 8001ab2:	4093      	lsls	r3, r2
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001aba:	492f      	ldr	r1, [pc, #188]	@ (8001b78 <HAL_GPIO_Init+0x2bc>)
 8001abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001abe:	089b      	lsrs	r3, r3, #2
 8001ac0:	3302      	adds	r3, #2
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d006      	beq.n	8001ae2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ad4:	4b2d      	ldr	r3, [pc, #180]	@ (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	492c      	ldr	r1, [pc, #176]	@ (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	608b      	str	r3, [r1, #8]
 8001ae0:	e006      	b.n	8001af0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ae2:	4b2a      	ldr	r3, [pc, #168]	@ (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	4928      	ldr	r1, [pc, #160]	@ (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d006      	beq.n	8001b0a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001afc:	4b23      	ldr	r3, [pc, #140]	@ (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001afe:	68da      	ldr	r2, [r3, #12]
 8001b00:	4922      	ldr	r1, [pc, #136]	@ (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	60cb      	str	r3, [r1, #12]
 8001b08:	e006      	b.n	8001b18 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b0a:	4b20      	ldr	r3, [pc, #128]	@ (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b0c:	68da      	ldr	r2, [r3, #12]
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	43db      	mvns	r3, r3
 8001b12:	491e      	ldr	r1, [pc, #120]	@ (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d006      	beq.n	8001b32 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b24:	4b19      	ldr	r3, [pc, #100]	@ (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	4918      	ldr	r1, [pc, #96]	@ (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	604b      	str	r3, [r1, #4]
 8001b30:	e006      	b.n	8001b40 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b32:	4b16      	ldr	r3, [pc, #88]	@ (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	4914      	ldr	r1, [pc, #80]	@ (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d021      	beq.n	8001b90 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	490e      	ldr	r1, [pc, #56]	@ (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	600b      	str	r3, [r1, #0]
 8001b58:	e021      	b.n	8001b9e <HAL_GPIO_Init+0x2e2>
 8001b5a:	bf00      	nop
 8001b5c:	10320000 	.word	0x10320000
 8001b60:	10310000 	.word	0x10310000
 8001b64:	10220000 	.word	0x10220000
 8001b68:	10210000 	.word	0x10210000
 8001b6c:	10120000 	.word	0x10120000
 8001b70:	10110000 	.word	0x10110000
 8001b74:	40021000 	.word	0x40021000
 8001b78:	40010000 	.word	0x40010000
 8001b7c:	40010800 	.word	0x40010800
 8001b80:	40010c00 	.word	0x40010c00
 8001b84:	40011000 	.word	0x40011000
 8001b88:	40011400 	.word	0x40011400
 8001b8c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b90:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc0 <HAL_GPIO_Init+0x304>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	43db      	mvns	r3, r3
 8001b98:	4909      	ldr	r1, [pc, #36]	@ (8001bc0 <HAL_GPIO_Init+0x304>)
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001baa:	fa22 f303 	lsr.w	r3, r2, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f47f ae8e 	bne.w	80018d0 <HAL_GPIO_Init+0x14>
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	bf00      	nop
 8001bb8:	372c      	adds	r7, #44	@ 0x2c
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr
 8001bc0:	40010400 	.word	0x40010400

08001bc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	460b      	mov	r3, r1
 8001bce:	807b      	strh	r3, [r7, #2]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bd4:	787b      	ldrb	r3, [r7, #1]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bda:	887a      	ldrh	r2, [r7, #2]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001be0:	e003      	b.n	8001bea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001be2:	887b      	ldrh	r3, [r7, #2]
 8001be4:	041a      	lsls	r2, r3, #16
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	611a      	str	r2, [r3, #16]
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c06:	887a      	ldrh	r2, [r7, #2]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	041a      	lsls	r2, r3, #16
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	43d9      	mvns	r1, r3
 8001c12:	887b      	ldrh	r3, [r7, #2]
 8001c14:	400b      	ands	r3, r1
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	611a      	str	r2, [r3, #16]
}
 8001c1c:	bf00      	nop
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr
	...

08001c28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e272      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f000 8087 	beq.w	8001d56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c48:	4b92      	ldr	r3, [pc, #584]	@ (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 030c 	and.w	r3, r3, #12
 8001c50:	2b04      	cmp	r3, #4
 8001c52:	d00c      	beq.n	8001c6e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c54:	4b8f      	ldr	r3, [pc, #572]	@ (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 030c 	and.w	r3, r3, #12
 8001c5c:	2b08      	cmp	r3, #8
 8001c5e:	d112      	bne.n	8001c86 <HAL_RCC_OscConfig+0x5e>
 8001c60:	4b8c      	ldr	r3, [pc, #560]	@ (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c6c:	d10b      	bne.n	8001c86 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c6e:	4b89      	ldr	r3, [pc, #548]	@ (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d06c      	beq.n	8001d54 <HAL_RCC_OscConfig+0x12c>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d168      	bne.n	8001d54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e24c      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c8e:	d106      	bne.n	8001c9e <HAL_RCC_OscConfig+0x76>
 8001c90:	4b80      	ldr	r3, [pc, #512]	@ (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a7f      	ldr	r2, [pc, #508]	@ (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001c96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c9a:	6013      	str	r3, [r2, #0]
 8001c9c:	e02e      	b.n	8001cfc <HAL_RCC_OscConfig+0xd4>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d10c      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x98>
 8001ca6:	4b7b      	ldr	r3, [pc, #492]	@ (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a7a      	ldr	r2, [pc, #488]	@ (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	4b78      	ldr	r3, [pc, #480]	@ (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a77      	ldr	r2, [pc, #476]	@ (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	e01d      	b.n	8001cfc <HAL_RCC_OscConfig+0xd4>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001cc8:	d10c      	bne.n	8001ce4 <HAL_RCC_OscConfig+0xbc>
 8001cca:	4b72      	ldr	r3, [pc, #456]	@ (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a71      	ldr	r2, [pc, #452]	@ (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	4b6f      	ldr	r3, [pc, #444]	@ (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a6e      	ldr	r2, [pc, #440]	@ (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	e00b      	b.n	8001cfc <HAL_RCC_OscConfig+0xd4>
 8001ce4:	4b6b      	ldr	r3, [pc, #428]	@ (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a6a      	ldr	r2, [pc, #424]	@ (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001cea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cee:	6013      	str	r3, [r2, #0]
 8001cf0:	4b68      	ldr	r3, [pc, #416]	@ (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a67      	ldr	r2, [pc, #412]	@ (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001cf6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cfa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d013      	beq.n	8001d2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d04:	f7fe fdb2 	bl	800086c <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d0c:	f7fe fdae 	bl	800086c <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b64      	cmp	r3, #100	@ 0x64
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e200      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1e:	4b5d      	ldr	r3, [pc, #372]	@ (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0f0      	beq.n	8001d0c <HAL_RCC_OscConfig+0xe4>
 8001d2a:	e014      	b.n	8001d56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2c:	f7fe fd9e 	bl	800086c <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d34:	f7fe fd9a 	bl	800086c <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b64      	cmp	r3, #100	@ 0x64
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e1ec      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d46:	4b53      	ldr	r3, [pc, #332]	@ (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1f0      	bne.n	8001d34 <HAL_RCC_OscConfig+0x10c>
 8001d52:	e000      	b.n	8001d56 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d063      	beq.n	8001e2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d62:	4b4c      	ldr	r3, [pc, #304]	@ (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f003 030c 	and.w	r3, r3, #12
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d00b      	beq.n	8001d86 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d6e:	4b49      	ldr	r3, [pc, #292]	@ (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f003 030c 	and.w	r3, r3, #12
 8001d76:	2b08      	cmp	r3, #8
 8001d78:	d11c      	bne.n	8001db4 <HAL_RCC_OscConfig+0x18c>
 8001d7a:	4b46      	ldr	r3, [pc, #280]	@ (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d116      	bne.n	8001db4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d86:	4b43      	ldr	r3, [pc, #268]	@ (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d005      	beq.n	8001d9e <HAL_RCC_OscConfig+0x176>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d001      	beq.n	8001d9e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e1c0      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	4939      	ldr	r1, [pc, #228]	@ (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001db2:	e03a      	b.n	8001e2a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d020      	beq.n	8001dfe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dbc:	4b36      	ldr	r3, [pc, #216]	@ (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc2:	f7fe fd53 	bl	800086c <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc8:	e008      	b.n	8001ddc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dca:	f7fe fd4f 	bl	800086c <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e1a1      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ddc:	4b2d      	ldr	r3, [pc, #180]	@ (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d0f0      	beq.n	8001dca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de8:	4b2a      	ldr	r3, [pc, #168]	@ (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	695b      	ldr	r3, [r3, #20]
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	4927      	ldr	r1, [pc, #156]	@ (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	600b      	str	r3, [r1, #0]
 8001dfc:	e015      	b.n	8001e2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dfe:	4b26      	ldr	r3, [pc, #152]	@ (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e04:	f7fe fd32 	bl	800086c <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e0c:	f7fe fd2e 	bl	800086c <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e180      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e1e:	4b1d      	ldr	r3, [pc, #116]	@ (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1f0      	bne.n	8001e0c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0308 	and.w	r3, r3, #8
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d03a      	beq.n	8001eac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d019      	beq.n	8001e72 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e3e:	4b17      	ldr	r3, [pc, #92]	@ (8001e9c <HAL_RCC_OscConfig+0x274>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e44:	f7fe fd12 	bl	800086c <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e4c:	f7fe fd0e 	bl	800086c <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e160      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d0f0      	beq.n	8001e4c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e6a:	2001      	movs	r0, #1
 8001e6c:	f000 face 	bl	800240c <RCC_Delay>
 8001e70:	e01c      	b.n	8001eac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e72:	4b0a      	ldr	r3, [pc, #40]	@ (8001e9c <HAL_RCC_OscConfig+0x274>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e78:	f7fe fcf8 	bl	800086c <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e7e:	e00f      	b.n	8001ea0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e80:	f7fe fcf4 	bl	800086c <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d908      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e146      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
 8001e92:	bf00      	nop
 8001e94:	40021000 	.word	0x40021000
 8001e98:	42420000 	.word	0x42420000
 8001e9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea0:	4b92      	ldr	r3, [pc, #584]	@ (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1e9      	bne.n	8001e80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 80a6 	beq.w	8002006 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ebe:	4b8b      	ldr	r3, [pc, #556]	@ (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10d      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eca:	4b88      	ldr	r3, [pc, #544]	@ (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	4a87      	ldr	r2, [pc, #540]	@ (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001ed0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ed4:	61d3      	str	r3, [r2, #28]
 8001ed6:	4b85      	ldr	r3, [pc, #532]	@ (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ede:	60bb      	str	r3, [r7, #8]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee6:	4b82      	ldr	r3, [pc, #520]	@ (80020f0 <HAL_RCC_OscConfig+0x4c8>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d118      	bne.n	8001f24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ef2:	4b7f      	ldr	r3, [pc, #508]	@ (80020f0 <HAL_RCC_OscConfig+0x4c8>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a7e      	ldr	r2, [pc, #504]	@ (80020f0 <HAL_RCC_OscConfig+0x4c8>)
 8001ef8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001efc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001efe:	f7fe fcb5 	bl	800086c <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f04:	e008      	b.n	8001f18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f06:	f7fe fcb1 	bl	800086c <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b64      	cmp	r3, #100	@ 0x64
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e103      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f18:	4b75      	ldr	r3, [pc, #468]	@ (80020f0 <HAL_RCC_OscConfig+0x4c8>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0f0      	beq.n	8001f06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d106      	bne.n	8001f3a <HAL_RCC_OscConfig+0x312>
 8001f2c:	4b6f      	ldr	r3, [pc, #444]	@ (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	4a6e      	ldr	r2, [pc, #440]	@ (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	6213      	str	r3, [r2, #32]
 8001f38:	e02d      	b.n	8001f96 <HAL_RCC_OscConfig+0x36e>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10c      	bne.n	8001f5c <HAL_RCC_OscConfig+0x334>
 8001f42:	4b6a      	ldr	r3, [pc, #424]	@ (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	4a69      	ldr	r2, [pc, #420]	@ (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001f48:	f023 0301 	bic.w	r3, r3, #1
 8001f4c:	6213      	str	r3, [r2, #32]
 8001f4e:	4b67      	ldr	r3, [pc, #412]	@ (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	4a66      	ldr	r2, [pc, #408]	@ (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001f54:	f023 0304 	bic.w	r3, r3, #4
 8001f58:	6213      	str	r3, [r2, #32]
 8001f5a:	e01c      	b.n	8001f96 <HAL_RCC_OscConfig+0x36e>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	2b05      	cmp	r3, #5
 8001f62:	d10c      	bne.n	8001f7e <HAL_RCC_OscConfig+0x356>
 8001f64:	4b61      	ldr	r3, [pc, #388]	@ (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	4a60      	ldr	r2, [pc, #384]	@ (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001f6a:	f043 0304 	orr.w	r3, r3, #4
 8001f6e:	6213      	str	r3, [r2, #32]
 8001f70:	4b5e      	ldr	r3, [pc, #376]	@ (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	4a5d      	ldr	r2, [pc, #372]	@ (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	6213      	str	r3, [r2, #32]
 8001f7c:	e00b      	b.n	8001f96 <HAL_RCC_OscConfig+0x36e>
 8001f7e:	4b5b      	ldr	r3, [pc, #364]	@ (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001f80:	6a1b      	ldr	r3, [r3, #32]
 8001f82:	4a5a      	ldr	r2, [pc, #360]	@ (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001f84:	f023 0301 	bic.w	r3, r3, #1
 8001f88:	6213      	str	r3, [r2, #32]
 8001f8a:	4b58      	ldr	r3, [pc, #352]	@ (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	4a57      	ldr	r2, [pc, #348]	@ (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001f90:	f023 0304 	bic.w	r3, r3, #4
 8001f94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d015      	beq.n	8001fca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f9e:	f7fe fc65 	bl	800086c <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa4:	e00a      	b.n	8001fbc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa6:	f7fe fc61 	bl	800086c <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e0b1      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fbc:	4b4b      	ldr	r3, [pc, #300]	@ (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0ee      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x37e>
 8001fc8:	e014      	b.n	8001ff4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fca:	f7fe fc4f 	bl	800086c <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd0:	e00a      	b.n	8001fe8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd2:	f7fe fc4b 	bl	800086c <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e09b      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe8:	4b40      	ldr	r3, [pc, #256]	@ (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1ee      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ff4:	7dfb      	ldrb	r3, [r7, #23]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d105      	bne.n	8002006 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ffa:	4b3c      	ldr	r3, [pc, #240]	@ (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	4a3b      	ldr	r2, [pc, #236]	@ (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8002000:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002004:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	2b00      	cmp	r3, #0
 800200c:	f000 8087 	beq.w	800211e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002010:	4b36      	ldr	r3, [pc, #216]	@ (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 030c 	and.w	r3, r3, #12
 8002018:	2b08      	cmp	r3, #8
 800201a:	d061      	beq.n	80020e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69db      	ldr	r3, [r3, #28]
 8002020:	2b02      	cmp	r3, #2
 8002022:	d146      	bne.n	80020b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002024:	4b33      	ldr	r3, [pc, #204]	@ (80020f4 <HAL_RCC_OscConfig+0x4cc>)
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202a:	f7fe fc1f 	bl	800086c <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002030:	e008      	b.n	8002044 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002032:	f7fe fc1b 	bl	800086c <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e06d      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002044:	4b29      	ldr	r3, [pc, #164]	@ (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1f0      	bne.n	8002032 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002058:	d108      	bne.n	800206c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800205a:	4b24      	ldr	r3, [pc, #144]	@ (80020ec <HAL_RCC_OscConfig+0x4c4>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	4921      	ldr	r1, [pc, #132]	@ (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8002068:	4313      	orrs	r3, r2
 800206a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800206c:	4b1f      	ldr	r3, [pc, #124]	@ (80020ec <HAL_RCC_OscConfig+0x4c4>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a19      	ldr	r1, [r3, #32]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207c:	430b      	orrs	r3, r1
 800207e:	491b      	ldr	r1, [pc, #108]	@ (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8002080:	4313      	orrs	r3, r2
 8002082:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002084:	4b1b      	ldr	r3, [pc, #108]	@ (80020f4 <HAL_RCC_OscConfig+0x4cc>)
 8002086:	2201      	movs	r2, #1
 8002088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208a:	f7fe fbef 	bl	800086c <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002090:	e008      	b.n	80020a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002092:	f7fe fbeb 	bl	800086c <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e03d      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020a4:	4b11      	ldr	r3, [pc, #68]	@ (80020ec <HAL_RCC_OscConfig+0x4c4>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0f0      	beq.n	8002092 <HAL_RCC_OscConfig+0x46a>
 80020b0:	e035      	b.n	800211e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b2:	4b10      	ldr	r3, [pc, #64]	@ (80020f4 <HAL_RCC_OscConfig+0x4cc>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b8:	f7fe fbd8 	bl	800086c <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c0:	f7fe fbd4 	bl	800086c <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e026      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020d2:	4b06      	ldr	r3, [pc, #24]	@ (80020ec <HAL_RCC_OscConfig+0x4c4>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0x498>
 80020de:	e01e      	b.n	800211e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	69db      	ldr	r3, [r3, #28]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d107      	bne.n	80020f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e019      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
 80020ec:	40021000 	.word	0x40021000
 80020f0:	40007000 	.word	0x40007000
 80020f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002128 <HAL_RCC_OscConfig+0x500>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	429a      	cmp	r2, r3
 800210a:	d106      	bne.n	800211a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002116:	429a      	cmp	r2, r3
 8002118:	d001      	beq.n	800211e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e000      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40021000 	.word	0x40021000

0800212c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e0d0      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002140:	4b6a      	ldr	r3, [pc, #424]	@ (80022ec <HAL_RCC_ClockConfig+0x1c0>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	429a      	cmp	r2, r3
 800214c:	d910      	bls.n	8002170 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800214e:	4b67      	ldr	r3, [pc, #412]	@ (80022ec <HAL_RCC_ClockConfig+0x1c0>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f023 0207 	bic.w	r2, r3, #7
 8002156:	4965      	ldr	r1, [pc, #404]	@ (80022ec <HAL_RCC_ClockConfig+0x1c0>)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	4313      	orrs	r3, r2
 800215c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800215e:	4b63      	ldr	r3, [pc, #396]	@ (80022ec <HAL_RCC_ClockConfig+0x1c0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	429a      	cmp	r2, r3
 800216a:	d001      	beq.n	8002170 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e0b8      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d020      	beq.n	80021be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b00      	cmp	r3, #0
 8002186:	d005      	beq.n	8002194 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002188:	4b59      	ldr	r3, [pc, #356]	@ (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	4a58      	ldr	r2, [pc, #352]	@ (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 800218e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002192:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0308 	and.w	r3, r3, #8
 800219c:	2b00      	cmp	r3, #0
 800219e:	d005      	beq.n	80021ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021a0:	4b53      	ldr	r3, [pc, #332]	@ (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	4a52      	ldr	r2, [pc, #328]	@ (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80021a6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80021aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ac:	4b50      	ldr	r3, [pc, #320]	@ (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	494d      	ldr	r1, [pc, #308]	@ (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d040      	beq.n	800224c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d107      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d2:	4b47      	ldr	r3, [pc, #284]	@ (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d115      	bne.n	800220a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e07f      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d107      	bne.n	80021fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ea:	4b41      	ldr	r3, [pc, #260]	@ (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d109      	bne.n	800220a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e073      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fa:	4b3d      	ldr	r3, [pc, #244]	@ (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e06b      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800220a:	4b39      	ldr	r3, [pc, #228]	@ (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f023 0203 	bic.w	r2, r3, #3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	4936      	ldr	r1, [pc, #216]	@ (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002218:	4313      	orrs	r3, r2
 800221a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800221c:	f7fe fb26 	bl	800086c <HAL_GetTick>
 8002220:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002222:	e00a      	b.n	800223a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002224:	f7fe fb22 	bl	800086c <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002232:	4293      	cmp	r3, r2
 8002234:	d901      	bls.n	800223a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e053      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223a:	4b2d      	ldr	r3, [pc, #180]	@ (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f003 020c 	and.w	r2, r3, #12
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	429a      	cmp	r2, r3
 800224a:	d1eb      	bne.n	8002224 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800224c:	4b27      	ldr	r3, [pc, #156]	@ (80022ec <HAL_RCC_ClockConfig+0x1c0>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	429a      	cmp	r2, r3
 8002258:	d210      	bcs.n	800227c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225a:	4b24      	ldr	r3, [pc, #144]	@ (80022ec <HAL_RCC_ClockConfig+0x1c0>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f023 0207 	bic.w	r2, r3, #7
 8002262:	4922      	ldr	r1, [pc, #136]	@ (80022ec <HAL_RCC_ClockConfig+0x1c0>)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	4313      	orrs	r3, r2
 8002268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800226a:	4b20      	ldr	r3, [pc, #128]	@ (80022ec <HAL_RCC_ClockConfig+0x1c0>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	429a      	cmp	r2, r3
 8002276:	d001      	beq.n	800227c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e032      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0304 	and.w	r3, r3, #4
 8002284:	2b00      	cmp	r3, #0
 8002286:	d008      	beq.n	800229a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002288:	4b19      	ldr	r3, [pc, #100]	@ (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	4916      	ldr	r1, [pc, #88]	@ (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002296:	4313      	orrs	r3, r2
 8002298:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0308 	and.w	r3, r3, #8
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d009      	beq.n	80022ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022a6:	4b12      	ldr	r3, [pc, #72]	@ (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	490e      	ldr	r1, [pc, #56]	@ (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022ba:	f000 f821 	bl	8002300 <HAL_RCC_GetSysClockFreq>
 80022be:	4602      	mov	r2, r0
 80022c0:	4b0b      	ldr	r3, [pc, #44]	@ (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	091b      	lsrs	r3, r3, #4
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	490a      	ldr	r1, [pc, #40]	@ (80022f4 <HAL_RCC_ClockConfig+0x1c8>)
 80022cc:	5ccb      	ldrb	r3, [r1, r3]
 80022ce:	fa22 f303 	lsr.w	r3, r2, r3
 80022d2:	4a09      	ldr	r2, [pc, #36]	@ (80022f8 <HAL_RCC_ClockConfig+0x1cc>)
 80022d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022d6:	4b09      	ldr	r3, [pc, #36]	@ (80022fc <HAL_RCC_ClockConfig+0x1d0>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7fe fa84 	bl	80007e8 <HAL_InitTick>

  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40022000 	.word	0x40022000
 80022f0:	40021000 	.word	0x40021000
 80022f4:	080031f4 	.word	0x080031f4
 80022f8:	20000000 	.word	0x20000000
 80022fc:	20000004 	.word	0x20000004

08002300 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002300:	b480      	push	{r7}
 8002302:	b087      	sub	sp, #28
 8002304:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002306:	2300      	movs	r3, #0
 8002308:	60fb      	str	r3, [r7, #12]
 800230a:	2300      	movs	r3, #0
 800230c:	60bb      	str	r3, [r7, #8]
 800230e:	2300      	movs	r3, #0
 8002310:	617b      	str	r3, [r7, #20]
 8002312:	2300      	movs	r3, #0
 8002314:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002316:	2300      	movs	r3, #0
 8002318:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800231a:	4b1e      	ldr	r3, [pc, #120]	@ (8002394 <HAL_RCC_GetSysClockFreq+0x94>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f003 030c 	and.w	r3, r3, #12
 8002326:	2b04      	cmp	r3, #4
 8002328:	d002      	beq.n	8002330 <HAL_RCC_GetSysClockFreq+0x30>
 800232a:	2b08      	cmp	r3, #8
 800232c:	d003      	beq.n	8002336 <HAL_RCC_GetSysClockFreq+0x36>
 800232e:	e027      	b.n	8002380 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002330:	4b19      	ldr	r3, [pc, #100]	@ (8002398 <HAL_RCC_GetSysClockFreq+0x98>)
 8002332:	613b      	str	r3, [r7, #16]
      break;
 8002334:	e027      	b.n	8002386 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	0c9b      	lsrs	r3, r3, #18
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	4a17      	ldr	r2, [pc, #92]	@ (800239c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002340:	5cd3      	ldrb	r3, [r2, r3]
 8002342:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d010      	beq.n	8002370 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800234e:	4b11      	ldr	r3, [pc, #68]	@ (8002394 <HAL_RCC_GetSysClockFreq+0x94>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	0c5b      	lsrs	r3, r3, #17
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	4a11      	ldr	r2, [pc, #68]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800235a:	5cd3      	ldrb	r3, [r2, r3]
 800235c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a0d      	ldr	r2, [pc, #52]	@ (8002398 <HAL_RCC_GetSysClockFreq+0x98>)
 8002362:	fb03 f202 	mul.w	r2, r3, r2
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	fbb2 f3f3 	udiv	r3, r2, r3
 800236c:	617b      	str	r3, [r7, #20]
 800236e:	e004      	b.n	800237a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a0c      	ldr	r2, [pc, #48]	@ (80023a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002374:	fb02 f303 	mul.w	r3, r2, r3
 8002378:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	613b      	str	r3, [r7, #16]
      break;
 800237e:	e002      	b.n	8002386 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002380:	4b05      	ldr	r3, [pc, #20]	@ (8002398 <HAL_RCC_GetSysClockFreq+0x98>)
 8002382:	613b      	str	r3, [r7, #16]
      break;
 8002384:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002386:	693b      	ldr	r3, [r7, #16]
}
 8002388:	4618      	mov	r0, r3
 800238a:	371c      	adds	r7, #28
 800238c:	46bd      	mov	sp, r7
 800238e:	bc80      	pop	{r7}
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	40021000 	.word	0x40021000
 8002398:	007a1200 	.word	0x007a1200
 800239c:	0800320c 	.word	0x0800320c
 80023a0:	0800321c 	.word	0x0800321c
 80023a4:	003d0900 	.word	0x003d0900

080023a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023ac:	4b02      	ldr	r3, [pc, #8]	@ (80023b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80023ae:	681b      	ldr	r3, [r3, #0]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr
 80023b8:	20000000 	.word	0x20000000

080023bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023c0:	f7ff fff2 	bl	80023a8 <HAL_RCC_GetHCLKFreq>
 80023c4:	4602      	mov	r2, r0
 80023c6:	4b05      	ldr	r3, [pc, #20]	@ (80023dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	0a1b      	lsrs	r3, r3, #8
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	4903      	ldr	r1, [pc, #12]	@ (80023e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023d2:	5ccb      	ldrb	r3, [r1, r3]
 80023d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023d8:	4618      	mov	r0, r3
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40021000 	.word	0x40021000
 80023e0:	08003204 	.word	0x08003204

080023e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023e8:	f7ff ffde 	bl	80023a8 <HAL_RCC_GetHCLKFreq>
 80023ec:	4602      	mov	r2, r0
 80023ee:	4b05      	ldr	r3, [pc, #20]	@ (8002404 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	0adb      	lsrs	r3, r3, #11
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	4903      	ldr	r1, [pc, #12]	@ (8002408 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023fa:	5ccb      	ldrb	r3, [r1, r3]
 80023fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002400:	4618      	mov	r0, r3
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40021000 	.word	0x40021000
 8002408:	08003204 	.word	0x08003204

0800240c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002414:	4b0a      	ldr	r3, [pc, #40]	@ (8002440 <RCC_Delay+0x34>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a0a      	ldr	r2, [pc, #40]	@ (8002444 <RCC_Delay+0x38>)
 800241a:	fba2 2303 	umull	r2, r3, r2, r3
 800241e:	0a5b      	lsrs	r3, r3, #9
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	fb02 f303 	mul.w	r3, r2, r3
 8002426:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002428:	bf00      	nop
  }
  while (Delay --);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	1e5a      	subs	r2, r3, #1
 800242e:	60fa      	str	r2, [r7, #12]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1f9      	bne.n	8002428 <RCC_Delay+0x1c>
}
 8002434:	bf00      	nop
 8002436:	bf00      	nop
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr
 8002440:	20000000 	.word	0x20000000
 8002444:	10624dd3 	.word	0x10624dd3

08002448 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002450:	2300      	movs	r3, #0
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	2b00      	cmp	r3, #0
 8002462:	d07d      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002464:	2300      	movs	r3, #0
 8002466:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002468:	4b4f      	ldr	r3, [pc, #316]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800246a:	69db      	ldr	r3, [r3, #28]
 800246c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10d      	bne.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002474:	4b4c      	ldr	r3, [pc, #304]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002476:	69db      	ldr	r3, [r3, #28]
 8002478:	4a4b      	ldr	r2, [pc, #300]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800247a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800247e:	61d3      	str	r3, [r2, #28]
 8002480:	4b49      	ldr	r3, [pc, #292]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002482:	69db      	ldr	r3, [r3, #28]
 8002484:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002488:	60bb      	str	r3, [r7, #8]
 800248a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800248c:	2301      	movs	r3, #1
 800248e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002490:	4b46      	ldr	r3, [pc, #280]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002498:	2b00      	cmp	r3, #0
 800249a:	d118      	bne.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800249c:	4b43      	ldr	r3, [pc, #268]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a42      	ldr	r2, [pc, #264]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024a8:	f7fe f9e0 	bl	800086c <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ae:	e008      	b.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024b0:	f7fe f9dc 	bl	800086c <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b64      	cmp	r3, #100	@ 0x64
 80024bc:	d901      	bls.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e06d      	b.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c2:	4b3a      	ldr	r3, [pc, #232]	@ (80025ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0f0      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024ce:	4b36      	ldr	r3, [pc, #216]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024d6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d02e      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d027      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024ec:	4b2e      	ldr	r3, [pc, #184]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024f4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024f6:	4b2e      	ldr	r3, [pc, #184]	@ (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024f8:	2201      	movs	r2, #1
 80024fa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024fc:	4b2c      	ldr	r3, [pc, #176]	@ (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002502:	4a29      	ldr	r2, [pc, #164]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d014      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002512:	f7fe f9ab 	bl	800086c <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002518:	e00a      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800251a:	f7fe f9a7 	bl	800086c <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002528:	4293      	cmp	r3, r2
 800252a:	d901      	bls.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e036      	b.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002530:	4b1d      	ldr	r3, [pc, #116]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d0ee      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800253c:	4b1a      	ldr	r3, [pc, #104]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	4917      	ldr	r1, [pc, #92]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800254a:	4313      	orrs	r3, r2
 800254c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800254e:	7dfb      	ldrb	r3, [r7, #23]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d105      	bne.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002554:	4b14      	ldr	r3, [pc, #80]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002556:	69db      	ldr	r3, [r3, #28]
 8002558:	4a13      	ldr	r2, [pc, #76]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800255a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800255e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d008      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800256c:	4b0e      	ldr	r3, [pc, #56]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	490b      	ldr	r1, [pc, #44]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800257a:	4313      	orrs	r3, r2
 800257c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0310 	and.w	r3, r3, #16
 8002586:	2b00      	cmp	r3, #0
 8002588:	d008      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800258a:	4b07      	ldr	r3, [pc, #28]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	4904      	ldr	r1, [pc, #16]	@ (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002598:	4313      	orrs	r3, r2
 800259a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40021000 	.word	0x40021000
 80025ac:	40007000 	.word	0x40007000
 80025b0:	42420440 	.word	0x42420440

080025b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b088      	sub	sp, #32
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80025bc:	2300      	movs	r3, #0
 80025be:	617b      	str	r3, [r7, #20]
 80025c0:	2300      	movs	r3, #0
 80025c2:	61fb      	str	r3, [r7, #28]
 80025c4:	2300      	movs	r3, #0
 80025c6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	2300      	movs	r3, #0
 80025ce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b10      	cmp	r3, #16
 80025d4:	d00a      	beq.n	80025ec <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b10      	cmp	r3, #16
 80025da:	f200 808a 	bhi.w	80026f2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d045      	beq.n	8002670 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d075      	beq.n	80026d6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80025ea:	e082      	b.n	80026f2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80025ec:	4b46      	ldr	r3, [pc, #280]	@ (8002708 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80025f2:	4b45      	ldr	r3, [pc, #276]	@ (8002708 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d07b      	beq.n	80026f6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	0c9b      	lsrs	r3, r3, #18
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	4a41      	ldr	r2, [pc, #260]	@ (800270c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002608:	5cd3      	ldrb	r3, [r2, r3]
 800260a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d015      	beq.n	8002642 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002616:	4b3c      	ldr	r3, [pc, #240]	@ (8002708 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	0c5b      	lsrs	r3, r3, #17
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	4a3b      	ldr	r2, [pc, #236]	@ (8002710 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002622:	5cd3      	ldrb	r3, [r2, r3]
 8002624:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00d      	beq.n	800264c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002630:	4a38      	ldr	r2, [pc, #224]	@ (8002714 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	fbb2 f2f3 	udiv	r2, r2, r3
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	fb02 f303 	mul.w	r3, r2, r3
 800263e:	61fb      	str	r3, [r7, #28]
 8002640:	e004      	b.n	800264c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	4a34      	ldr	r2, [pc, #208]	@ (8002718 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002646:	fb02 f303 	mul.w	r3, r2, r3
 800264a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800264c:	4b2e      	ldr	r3, [pc, #184]	@ (8002708 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002654:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002658:	d102      	bne.n	8002660 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	61bb      	str	r3, [r7, #24]
      break;
 800265e:	e04a      	b.n	80026f6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	4a2d      	ldr	r2, [pc, #180]	@ (800271c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002666:	fba2 2303 	umull	r2, r3, r2, r3
 800266a:	085b      	lsrs	r3, r3, #1
 800266c:	61bb      	str	r3, [r7, #24]
      break;
 800266e:	e042      	b.n	80026f6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002670:	4b25      	ldr	r3, [pc, #148]	@ (8002708 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800267c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002680:	d108      	bne.n	8002694 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800268c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002690:	61bb      	str	r3, [r7, #24]
 8002692:	e01f      	b.n	80026d4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800269a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800269e:	d109      	bne.n	80026b4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80026a0:	4b19      	ldr	r3, [pc, #100]	@ (8002708 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80026a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d003      	beq.n	80026b4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80026ac:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80026b0:	61bb      	str	r3, [r7, #24]
 80026b2:	e00f      	b.n	80026d4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80026be:	d11c      	bne.n	80026fa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80026c0:	4b11      	ldr	r3, [pc, #68]	@ (8002708 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d016      	beq.n	80026fa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80026cc:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80026d0:	61bb      	str	r3, [r7, #24]
      break;
 80026d2:	e012      	b.n	80026fa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80026d4:	e011      	b.n	80026fa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80026d6:	f7ff fe85 	bl	80023e4 <HAL_RCC_GetPCLK2Freq>
 80026da:	4602      	mov	r2, r0
 80026dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002708 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	0b9b      	lsrs	r3, r3, #14
 80026e2:	f003 0303 	and.w	r3, r3, #3
 80026e6:	3301      	adds	r3, #1
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ee:	61bb      	str	r3, [r7, #24]
      break;
 80026f0:	e004      	b.n	80026fc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80026f2:	bf00      	nop
 80026f4:	e002      	b.n	80026fc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80026f6:	bf00      	nop
 80026f8:	e000      	b.n	80026fc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80026fa:	bf00      	nop
    }
  }
  return (frequency);
 80026fc:	69bb      	ldr	r3, [r7, #24]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3720      	adds	r7, #32
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40021000 	.word	0x40021000
 800270c:	08003220 	.word	0x08003220
 8002710:	08003230 	.word	0x08003230
 8002714:	007a1200 	.word	0x007a1200
 8002718:	003d0900 	.word	0x003d0900
 800271c:	aaaaaaab 	.word	0xaaaaaaab

08002720 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e042      	b.n	80027b8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d106      	bne.n	800274c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7fd ff84 	bl	8000654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2224      	movs	r2, #36	@ 0x24
 8002750:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68da      	ldr	r2, [r3, #12]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002762:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 fc7f 	bl	8003068 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	691a      	ldr	r2, [r3, #16]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002778:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	695a      	ldr	r2, [r3, #20]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002788:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68da      	ldr	r2, [r3, #12]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002798:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2220      	movs	r2, #32
 80027a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2220      	movs	r2, #32
 80027ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b0ba      	sub	sp, #232	@ 0xe8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80027e6:	2300      	movs	r3, #0
 80027e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80027ec:	2300      	movs	r3, #0
 80027ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80027f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80027fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10f      	bne.n	8002826 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800280a:	f003 0320 	and.w	r3, r3, #32
 800280e:	2b00      	cmp	r3, #0
 8002810:	d009      	beq.n	8002826 <HAL_UART_IRQHandler+0x66>
 8002812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002816:	f003 0320 	and.w	r3, r3, #32
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 fb63 	bl	8002eea <UART_Receive_IT>
      return;
 8002824:	e25b      	b.n	8002cde <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002826:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800282a:	2b00      	cmp	r3, #0
 800282c:	f000 80de 	beq.w	80029ec <HAL_UART_IRQHandler+0x22c>
 8002830:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	2b00      	cmp	r3, #0
 800283a:	d106      	bne.n	800284a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800283c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002840:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 80d1 	beq.w	80029ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800284a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00b      	beq.n	800286e <HAL_UART_IRQHandler+0xae>
 8002856:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800285a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800285e:	2b00      	cmp	r3, #0
 8002860:	d005      	beq.n	800286e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002866:	f043 0201 	orr.w	r2, r3, #1
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800286e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002872:	f003 0304 	and.w	r3, r3, #4
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00b      	beq.n	8002892 <HAL_UART_IRQHandler+0xd2>
 800287a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d005      	beq.n	8002892 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288a:	f043 0202 	orr.w	r2, r3, #2
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00b      	beq.n	80028b6 <HAL_UART_IRQHandler+0xf6>
 800289e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d005      	beq.n	80028b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ae:	f043 0204 	orr.w	r2, r3, #4
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80028b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028ba:	f003 0308 	and.w	r3, r3, #8
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d011      	beq.n	80028e6 <HAL_UART_IRQHandler+0x126>
 80028c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028c6:	f003 0320 	and.w	r3, r3, #32
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d105      	bne.n	80028da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80028ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d005      	beq.n	80028e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028de:	f043 0208 	orr.w	r2, r3, #8
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f000 81f2 	beq.w	8002cd4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028f4:	f003 0320 	and.w	r3, r3, #32
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d008      	beq.n	800290e <HAL_UART_IRQHandler+0x14e>
 80028fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002900:	f003 0320 	and.w	r3, r3, #32
 8002904:	2b00      	cmp	r3, #0
 8002906:	d002      	beq.n	800290e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 faee 	bl	8002eea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002918:	2b00      	cmp	r3, #0
 800291a:	bf14      	ite	ne
 800291c:	2301      	movne	r3, #1
 800291e:	2300      	moveq	r3, #0
 8002920:	b2db      	uxtb	r3, r3
 8002922:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800292a:	f003 0308 	and.w	r3, r3, #8
 800292e:	2b00      	cmp	r3, #0
 8002930:	d103      	bne.n	800293a <HAL_UART_IRQHandler+0x17a>
 8002932:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002936:	2b00      	cmp	r3, #0
 8002938:	d04f      	beq.n	80029da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 f9f8 	bl	8002d30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800294a:	2b00      	cmp	r3, #0
 800294c:	d041      	beq.n	80029d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	3314      	adds	r3, #20
 8002954:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002958:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800295c:	e853 3f00 	ldrex	r3, [r3]
 8002960:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002964:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002968:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800296c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	3314      	adds	r3, #20
 8002976:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800297a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800297e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002982:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002986:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800298a:	e841 2300 	strex	r3, r2, [r1]
 800298e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002992:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1d9      	bne.n	800294e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d013      	beq.n	80029ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029a6:	4a7e      	ldr	r2, [pc, #504]	@ (8002ba0 <HAL_UART_IRQHandler+0x3e0>)
 80029a8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7fe ff0c 	bl	80017cc <HAL_DMA_Abort_IT>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d016      	beq.n	80029e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80029c4:	4610      	mov	r0, r2
 80029c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029c8:	e00e      	b.n	80029e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f99c 	bl	8002d08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029d0:	e00a      	b.n	80029e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f998 	bl	8002d08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029d8:	e006      	b.n	80029e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 f994 	bl	8002d08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80029e6:	e175      	b.n	8002cd4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029e8:	bf00      	nop
    return;
 80029ea:	e173      	b.n	8002cd4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	f040 814f 	bne.w	8002c94 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80029f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029fa:	f003 0310 	and.w	r3, r3, #16
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f000 8148 	beq.w	8002c94 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a08:	f003 0310 	and.w	r3, r3, #16
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f000 8141 	beq.w	8002c94 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a12:	2300      	movs	r3, #0
 8002a14:	60bb      	str	r3, [r7, #8]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	60bb      	str	r3, [r7, #8]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	60bb      	str	r3, [r7, #8]
 8002a26:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 80b6 	beq.w	8002ba4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 8145 	beq.w	8002cd8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002a52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002a56:	429a      	cmp	r2, r3
 8002a58:	f080 813e 	bcs.w	8002cd8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002a62:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	2b20      	cmp	r3, #32
 8002a6c:	f000 8088 	beq.w	8002b80 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	330c      	adds	r3, #12
 8002a76:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a7e:	e853 3f00 	ldrex	r3, [r3]
 8002a82:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002a86:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a8a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a8e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	330c      	adds	r3, #12
 8002a98:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002a9c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002aa0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002aa8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002aac:	e841 2300 	strex	r3, r2, [r1]
 8002ab0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002ab4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1d9      	bne.n	8002a70 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	3314      	adds	r3, #20
 8002ac2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ac4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ac6:	e853 3f00 	ldrex	r3, [r3]
 8002aca:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002acc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ace:	f023 0301 	bic.w	r3, r3, #1
 8002ad2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	3314      	adds	r3, #20
 8002adc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002ae0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002ae4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ae6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002ae8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002aec:	e841 2300 	strex	r3, r2, [r1]
 8002af0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002af2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d1e1      	bne.n	8002abc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	3314      	adds	r3, #20
 8002afe:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b00:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b02:	e853 3f00 	ldrex	r3, [r3]
 8002b06:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002b08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	3314      	adds	r3, #20
 8002b18:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002b1c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002b1e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b20:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002b22:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002b24:	e841 2300 	strex	r3, r2, [r1]
 8002b28:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002b2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1e3      	bne.n	8002af8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2220      	movs	r2, #32
 8002b34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	330c      	adds	r3, #12
 8002b44:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b48:	e853 3f00 	ldrex	r3, [r3]
 8002b4c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002b4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b50:	f023 0310 	bic.w	r3, r3, #16
 8002b54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	330c      	adds	r3, #12
 8002b5e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002b62:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002b64:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b66:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002b68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002b6a:	e841 2300 	strex	r3, r2, [r1]
 8002b6e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002b70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1e3      	bne.n	8002b3e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7fe fdeb 	bl	8001756 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2202      	movs	r2, #2
 8002b84:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	4619      	mov	r1, r3
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f8bf 	bl	8002d1a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b9c:	e09c      	b.n	8002cd8 <HAL_UART_IRQHandler+0x518>
 8002b9e:	bf00      	nop
 8002ba0:	08002df5 	.word	0x08002df5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 808e 	beq.w	8002cdc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002bc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 8089 	beq.w	8002cdc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	330c      	adds	r3, #12
 8002bd0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bd4:	e853 3f00 	ldrex	r3, [r3]
 8002bd8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002bda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002be0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	330c      	adds	r3, #12
 8002bea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002bee:	647a      	str	r2, [r7, #68]	@ 0x44
 8002bf0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002bf4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002bf6:	e841 2300 	strex	r3, r2, [r1]
 8002bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002bfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1e3      	bne.n	8002bca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	3314      	adds	r3, #20
 8002c08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0c:	e853 3f00 	ldrex	r3, [r3]
 8002c10:	623b      	str	r3, [r7, #32]
   return(result);
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	f023 0301 	bic.w	r3, r3, #1
 8002c18:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	3314      	adds	r3, #20
 8002c22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002c26:	633a      	str	r2, [r7, #48]	@ 0x30
 8002c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c2e:	e841 2300 	strex	r3, r2, [r1]
 8002c32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1e3      	bne.n	8002c02 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	330c      	adds	r3, #12
 8002c4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	e853 3f00 	ldrex	r3, [r3]
 8002c56:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f023 0310 	bic.w	r3, r3, #16
 8002c5e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	330c      	adds	r3, #12
 8002c68:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002c6c:	61fa      	str	r2, [r7, #28]
 8002c6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c70:	69b9      	ldr	r1, [r7, #24]
 8002c72:	69fa      	ldr	r2, [r7, #28]
 8002c74:	e841 2300 	strex	r3, r2, [r1]
 8002c78:	617b      	str	r3, [r7, #20]
   return(result);
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1e3      	bne.n	8002c48 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2202      	movs	r2, #2
 8002c84:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f844 	bl	8002d1a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c92:	e023      	b.n	8002cdc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d009      	beq.n	8002cb4 <HAL_UART_IRQHandler+0x4f4>
 8002ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ca4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f8b5 	bl	8002e1c <UART_Transmit_IT>
    return;
 8002cb2:	e014      	b.n	8002cde <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00e      	beq.n	8002cde <HAL_UART_IRQHandler+0x51e>
 8002cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d008      	beq.n	8002cde <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 f8f4 	bl	8002eba <UART_EndTransmit_IT>
    return;
 8002cd2:	e004      	b.n	8002cde <HAL_UART_IRQHandler+0x51e>
    return;
 8002cd4:	bf00      	nop
 8002cd6:	e002      	b.n	8002cde <HAL_UART_IRQHandler+0x51e>
      return;
 8002cd8:	bf00      	nop
 8002cda:	e000      	b.n	8002cde <HAL_UART_IRQHandler+0x51e>
      return;
 8002cdc:	bf00      	nop
  }
}
 8002cde:	37e8      	adds	r7, #232	@ 0xe8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bc80      	pop	{r7}
 8002cf4:	4770      	bx	lr

08002cf6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b083      	sub	sp, #12
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bc80      	pop	{r7}
 8002d06:	4770      	bx	lr

08002d08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bc80      	pop	{r7}
 8002d18:	4770      	bx	lr

08002d1a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
 8002d22:	460b      	mov	r3, r1
 8002d24:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr

08002d30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b095      	sub	sp, #84	@ 0x54
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	330c      	adds	r3, #12
 8002d3e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d42:	e853 3f00 	ldrex	r3, [r3]
 8002d46:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d4a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	330c      	adds	r3, #12
 8002d56:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d58:	643a      	str	r2, [r7, #64]	@ 0x40
 8002d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d5c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002d5e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002d60:	e841 2300 	strex	r3, r2, [r1]
 8002d64:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1e5      	bne.n	8002d38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	3314      	adds	r3, #20
 8002d72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d74:	6a3b      	ldr	r3, [r7, #32]
 8002d76:	e853 3f00 	ldrex	r3, [r3]
 8002d7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	f023 0301 	bic.w	r3, r3, #1
 8002d82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	3314      	adds	r3, #20
 8002d8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d94:	e841 2300 	strex	r3, r2, [r1]
 8002d98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1e5      	bne.n	8002d6c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d119      	bne.n	8002ddc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	330c      	adds	r3, #12
 8002dae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	e853 3f00 	ldrex	r3, [r3]
 8002db6:	60bb      	str	r3, [r7, #8]
   return(result);
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	f023 0310 	bic.w	r3, r3, #16
 8002dbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	330c      	adds	r3, #12
 8002dc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002dc8:	61ba      	str	r2, [r7, #24]
 8002dca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dcc:	6979      	ldr	r1, [r7, #20]
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	e841 2300 	strex	r3, r2, [r1]
 8002dd4:	613b      	str	r3, [r7, #16]
   return(result);
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1e5      	bne.n	8002da8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2220      	movs	r2, #32
 8002de0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002dea:	bf00      	nop
 8002dec:	3754      	adds	r7, #84	@ 0x54
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr

08002df4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f7ff ff7a 	bl	8002d08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e14:	bf00      	nop
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b21      	cmp	r3, #33	@ 0x21
 8002e2e:	d13e      	bne.n	8002eae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e38:	d114      	bne.n	8002e64 <UART_Transmit_IT+0x48>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d110      	bne.n	8002e64 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	881b      	ldrh	r3, [r3, #0]
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e56:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	1c9a      	adds	r2, r3, #2
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	621a      	str	r2, [r3, #32]
 8002e62:	e008      	b.n	8002e76 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	1c59      	adds	r1, r3, #1
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	6211      	str	r1, [r2, #32]
 8002e6e:	781a      	ldrb	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	4619      	mov	r1, r3
 8002e84:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10f      	bne.n	8002eaa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68da      	ldr	r2, [r3, #12]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e98:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68da      	ldr	r2, [r3, #12]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ea8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	e000      	b.n	8002eb0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002eae:	2302      	movs	r3, #2
  }
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bc80      	pop	{r7}
 8002eb8:	4770      	bx	lr

08002eba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b082      	sub	sp, #8
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68da      	ldr	r2, [r3, #12]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ed0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7ff ff02 	bl	8002ce4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b08c      	sub	sp, #48	@ 0x30
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b22      	cmp	r3, #34	@ 0x22
 8002efc:	f040 80ae 	bne.w	800305c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f08:	d117      	bne.n	8002f3a <UART_Receive_IT+0x50>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d113      	bne.n	8002f3a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002f12:	2300      	movs	r3, #0
 8002f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f2c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f32:	1c9a      	adds	r2, r3, #2
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f38:	e026      	b.n	8002f88 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002f40:	2300      	movs	r3, #0
 8002f42:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f4c:	d007      	beq.n	8002f5e <UART_Receive_IT+0x74>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10a      	bne.n	8002f6c <UART_Receive_IT+0x82>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d106      	bne.n	8002f6c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f68:	701a      	strb	r2, [r3, #0]
 8002f6a:	e008      	b.n	8002f7e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f7c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f82:	1c5a      	adds	r2, r3, #1
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	4619      	mov	r1, r3
 8002f96:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d15d      	bne.n	8003058 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68da      	ldr	r2, [r3, #12]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0220 	bic.w	r2, r2, #32
 8002faa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68da      	ldr	r2, [r3, #12]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002fba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	695a      	ldr	r2, [r3, #20]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 0201 	bic.w	r2, r2, #1
 8002fca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d135      	bne.n	800304e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	330c      	adds	r3, #12
 8002fee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	e853 3f00 	ldrex	r3, [r3]
 8002ff6:	613b      	str	r3, [r7, #16]
   return(result);
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	f023 0310 	bic.w	r3, r3, #16
 8002ffe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	330c      	adds	r3, #12
 8003006:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003008:	623a      	str	r2, [r7, #32]
 800300a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800300c:	69f9      	ldr	r1, [r7, #28]
 800300e:	6a3a      	ldr	r2, [r7, #32]
 8003010:	e841 2300 	strex	r3, r2, [r1]
 8003014:	61bb      	str	r3, [r7, #24]
   return(result);
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1e5      	bne.n	8002fe8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0310 	and.w	r3, r3, #16
 8003026:	2b10      	cmp	r3, #16
 8003028:	d10a      	bne.n	8003040 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800302a:	2300      	movs	r3, #0
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	60fb      	str	r3, [r7, #12]
 800303e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003044:	4619      	mov	r1, r3
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7ff fe67 	bl	8002d1a <HAL_UARTEx_RxEventCallback>
 800304c:	e002      	b.n	8003054 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7ff fe51 	bl	8002cf6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003054:	2300      	movs	r3, #0
 8003056:	e002      	b.n	800305e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003058:	2300      	movs	r3, #0
 800305a:	e000      	b.n	800305e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800305c:	2302      	movs	r3, #2
  }
}
 800305e:	4618      	mov	r0, r3
 8003060:	3730      	adds	r7, #48	@ 0x30
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
	...

08003068 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68da      	ldr	r2, [r3, #12]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	430a      	orrs	r2, r1
 8003084:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	689a      	ldr	r2, [r3, #8]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	4313      	orrs	r3, r2
 8003096:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80030a2:	f023 030c 	bic.w	r3, r3, #12
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	6812      	ldr	r2, [r2, #0]
 80030aa:	68b9      	ldr	r1, [r7, #8]
 80030ac:	430b      	orrs	r3, r1
 80030ae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	699a      	ldr	r2, [r3, #24]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a2c      	ldr	r2, [pc, #176]	@ (800317c <UART_SetConfig+0x114>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d103      	bne.n	80030d8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80030d0:	f7ff f988 	bl	80023e4 <HAL_RCC_GetPCLK2Freq>
 80030d4:	60f8      	str	r0, [r7, #12]
 80030d6:	e002      	b.n	80030de <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80030d8:	f7ff f970 	bl	80023bc <HAL_RCC_GetPCLK1Freq>
 80030dc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	4613      	mov	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	4413      	add	r3, r2
 80030e6:	009a      	lsls	r2, r3, #2
 80030e8:	441a      	add	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f4:	4a22      	ldr	r2, [pc, #136]	@ (8003180 <UART_SetConfig+0x118>)
 80030f6:	fba2 2303 	umull	r2, r3, r2, r3
 80030fa:	095b      	lsrs	r3, r3, #5
 80030fc:	0119      	lsls	r1, r3, #4
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	4613      	mov	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	009a      	lsls	r2, r3, #2
 8003108:	441a      	add	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	fbb2 f2f3 	udiv	r2, r2, r3
 8003114:	4b1a      	ldr	r3, [pc, #104]	@ (8003180 <UART_SetConfig+0x118>)
 8003116:	fba3 0302 	umull	r0, r3, r3, r2
 800311a:	095b      	lsrs	r3, r3, #5
 800311c:	2064      	movs	r0, #100	@ 0x64
 800311e:	fb00 f303 	mul.w	r3, r0, r3
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	011b      	lsls	r3, r3, #4
 8003126:	3332      	adds	r3, #50	@ 0x32
 8003128:	4a15      	ldr	r2, [pc, #84]	@ (8003180 <UART_SetConfig+0x118>)
 800312a:	fba2 2303 	umull	r2, r3, r2, r3
 800312e:	095b      	lsrs	r3, r3, #5
 8003130:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003134:	4419      	add	r1, r3
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	4613      	mov	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	009a      	lsls	r2, r3, #2
 8003140:	441a      	add	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	fbb2 f2f3 	udiv	r2, r2, r3
 800314c:	4b0c      	ldr	r3, [pc, #48]	@ (8003180 <UART_SetConfig+0x118>)
 800314e:	fba3 0302 	umull	r0, r3, r3, r2
 8003152:	095b      	lsrs	r3, r3, #5
 8003154:	2064      	movs	r0, #100	@ 0x64
 8003156:	fb00 f303 	mul.w	r3, r0, r3
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	011b      	lsls	r3, r3, #4
 800315e:	3332      	adds	r3, #50	@ 0x32
 8003160:	4a07      	ldr	r2, [pc, #28]	@ (8003180 <UART_SetConfig+0x118>)
 8003162:	fba2 2303 	umull	r2, r3, r2, r3
 8003166:	095b      	lsrs	r3, r3, #5
 8003168:	f003 020f 	and.w	r2, r3, #15
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	440a      	add	r2, r1
 8003172:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003174:	bf00      	nop
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40013800 	.word	0x40013800
 8003180:	51eb851f 	.word	0x51eb851f

08003184 <memset>:
 8003184:	4603      	mov	r3, r0
 8003186:	4402      	add	r2, r0
 8003188:	4293      	cmp	r3, r2
 800318a:	d100      	bne.n	800318e <memset+0xa>
 800318c:	4770      	bx	lr
 800318e:	f803 1b01 	strb.w	r1, [r3], #1
 8003192:	e7f9      	b.n	8003188 <memset+0x4>

08003194 <__libc_init_array>:
 8003194:	b570      	push	{r4, r5, r6, lr}
 8003196:	2600      	movs	r6, #0
 8003198:	4d0c      	ldr	r5, [pc, #48]	@ (80031cc <__libc_init_array+0x38>)
 800319a:	4c0d      	ldr	r4, [pc, #52]	@ (80031d0 <__libc_init_array+0x3c>)
 800319c:	1b64      	subs	r4, r4, r5
 800319e:	10a4      	asrs	r4, r4, #2
 80031a0:	42a6      	cmp	r6, r4
 80031a2:	d109      	bne.n	80031b8 <__libc_init_array+0x24>
 80031a4:	f000 f81a 	bl	80031dc <_init>
 80031a8:	2600      	movs	r6, #0
 80031aa:	4d0a      	ldr	r5, [pc, #40]	@ (80031d4 <__libc_init_array+0x40>)
 80031ac:	4c0a      	ldr	r4, [pc, #40]	@ (80031d8 <__libc_init_array+0x44>)
 80031ae:	1b64      	subs	r4, r4, r5
 80031b0:	10a4      	asrs	r4, r4, #2
 80031b2:	42a6      	cmp	r6, r4
 80031b4:	d105      	bne.n	80031c2 <__libc_init_array+0x2e>
 80031b6:	bd70      	pop	{r4, r5, r6, pc}
 80031b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80031bc:	4798      	blx	r3
 80031be:	3601      	adds	r6, #1
 80031c0:	e7ee      	b.n	80031a0 <__libc_init_array+0xc>
 80031c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80031c6:	4798      	blx	r3
 80031c8:	3601      	adds	r6, #1
 80031ca:	e7f2      	b.n	80031b2 <__libc_init_array+0x1e>
 80031cc:	08003234 	.word	0x08003234
 80031d0:	08003234 	.word	0x08003234
 80031d4:	08003234 	.word	0x08003234
 80031d8:	08003238 	.word	0x08003238

080031dc <_init>:
 80031dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031de:	bf00      	nop
 80031e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031e2:	bc08      	pop	{r3}
 80031e4:	469e      	mov	lr, r3
 80031e6:	4770      	bx	lr

080031e8 <_fini>:
 80031e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ea:	bf00      	nop
 80031ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ee:	bc08      	pop	{r3}
 80031f0:	469e      	mov	lr, r3
 80031f2:	4770      	bx	lr
