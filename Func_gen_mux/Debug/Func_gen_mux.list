
Func_gen_mux.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069c4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  08006b64  08006b64  00016b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800703c  0800703c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800703c  0800703c  0001703c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007044  08007044  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007044  08007044  00017044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007048  08007048  00017048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800704c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a14  20000010  0800705c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a24  0800705c  00024a24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013431  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002da6  00000000  00000000  000334b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c0  00000000  00000000  00036260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000daf  00000000  00000000  00037420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003582  00000000  00000000  000381cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012c5d  00000000  00000000  0003b751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000961e7  00000000  00000000  0004e3ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004d24  00000000  00000000  000e4598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000e92bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006b4c 	.word	0x08006b4c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08006b4c 	.word	0x08006b4c

080001e0 <__aeabi_dmul>:
 80001e0:	b570      	push	{r4, r5, r6, lr}
 80001e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001ee:	bf1d      	ittte	ne
 80001f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001f4:	ea94 0f0c 	teqne	r4, ip
 80001f8:	ea95 0f0c 	teqne	r5, ip
 80001fc:	f000 f8de 	bleq	80003bc <__aeabi_dmul+0x1dc>
 8000200:	442c      	add	r4, r5
 8000202:	ea81 0603 	eor.w	r6, r1, r3
 8000206:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800020a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800020e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000212:	bf18      	it	ne
 8000214:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000218:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800021c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000220:	d038      	beq.n	8000294 <__aeabi_dmul+0xb4>
 8000222:	fba0 ce02 	umull	ip, lr, r0, r2
 8000226:	f04f 0500 	mov.w	r5, #0
 800022a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800022e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000232:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000236:	f04f 0600 	mov.w	r6, #0
 800023a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800023e:	f09c 0f00 	teq	ip, #0
 8000242:	bf18      	it	ne
 8000244:	f04e 0e01 	orrne.w	lr, lr, #1
 8000248:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800024c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000250:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000254:	d204      	bcs.n	8000260 <__aeabi_dmul+0x80>
 8000256:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800025a:	416d      	adcs	r5, r5
 800025c:	eb46 0606 	adc.w	r6, r6, r6
 8000260:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000264:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000268:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800026c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000270:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000274:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000278:	bf88      	it	hi
 800027a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800027e:	d81e      	bhi.n	80002be <__aeabi_dmul+0xde>
 8000280:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000284:	bf08      	it	eq
 8000286:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800028a:	f150 0000 	adcs.w	r0, r0, #0
 800028e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000298:	ea46 0101 	orr.w	r1, r6, r1
 800029c:	ea40 0002 	orr.w	r0, r0, r2
 80002a0:	ea81 0103 	eor.w	r1, r1, r3
 80002a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a8:	bfc2      	ittt	gt
 80002aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002b2:	bd70      	popgt	{r4, r5, r6, pc}
 80002b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b8:	f04f 0e00 	mov.w	lr, #0
 80002bc:	3c01      	subs	r4, #1
 80002be:	f300 80ab 	bgt.w	8000418 <__aeabi_dmul+0x238>
 80002c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002c6:	bfde      	ittt	le
 80002c8:	2000      	movle	r0, #0
 80002ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002ce:	bd70      	pople	{r4, r5, r6, pc}
 80002d0:	f1c4 0400 	rsb	r4, r4, #0
 80002d4:	3c20      	subs	r4, #32
 80002d6:	da35      	bge.n	8000344 <__aeabi_dmul+0x164>
 80002d8:	340c      	adds	r4, #12
 80002da:	dc1b      	bgt.n	8000314 <__aeabi_dmul+0x134>
 80002dc:	f104 0414 	add.w	r4, r4, #20
 80002e0:	f1c4 0520 	rsb	r5, r4, #32
 80002e4:	fa00 f305 	lsl.w	r3, r0, r5
 80002e8:	fa20 f004 	lsr.w	r0, r0, r4
 80002ec:	fa01 f205 	lsl.w	r2, r1, r5
 80002f0:	ea40 0002 	orr.w	r0, r0, r2
 80002f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000300:	fa21 f604 	lsr.w	r6, r1, r4
 8000304:	eb42 0106 	adc.w	r1, r2, r6
 8000308:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800030c:	bf08      	it	eq
 800030e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000312:	bd70      	pop	{r4, r5, r6, pc}
 8000314:	f1c4 040c 	rsb	r4, r4, #12
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f304 	lsl.w	r3, r0, r4
 8000320:	fa20 f005 	lsr.w	r0, r0, r5
 8000324:	fa01 f204 	lsl.w	r2, r1, r4
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000330:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800033c:	bf08      	it	eq
 800033e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f1c4 0520 	rsb	r5, r4, #32
 8000348:	fa00 f205 	lsl.w	r2, r0, r5
 800034c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000350:	fa20 f304 	lsr.w	r3, r0, r4
 8000354:	fa01 f205 	lsl.w	r2, r1, r5
 8000358:	ea43 0302 	orr.w	r3, r3, r2
 800035c:	fa21 f004 	lsr.w	r0, r1, r4
 8000360:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000364:	fa21 f204 	lsr.w	r2, r1, r4
 8000368:	ea20 0002 	bic.w	r0, r0, r2
 800036c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f094 0f00 	teq	r4, #0
 8000380:	d10f      	bne.n	80003a2 <__aeabi_dmul+0x1c2>
 8000382:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000386:	0040      	lsls	r0, r0, #1
 8000388:	eb41 0101 	adc.w	r1, r1, r1
 800038c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000390:	bf08      	it	eq
 8000392:	3c01      	subeq	r4, #1
 8000394:	d0f7      	beq.n	8000386 <__aeabi_dmul+0x1a6>
 8000396:	ea41 0106 	orr.w	r1, r1, r6
 800039a:	f095 0f00 	teq	r5, #0
 800039e:	bf18      	it	ne
 80003a0:	4770      	bxne	lr
 80003a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003a6:	0052      	lsls	r2, r2, #1
 80003a8:	eb43 0303 	adc.w	r3, r3, r3
 80003ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003b0:	bf08      	it	eq
 80003b2:	3d01      	subeq	r5, #1
 80003b4:	d0f7      	beq.n	80003a6 <__aeabi_dmul+0x1c6>
 80003b6:	ea43 0306 	orr.w	r3, r3, r6
 80003ba:	4770      	bx	lr
 80003bc:	ea94 0f0c 	teq	r4, ip
 80003c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003c4:	bf18      	it	ne
 80003c6:	ea95 0f0c 	teqne	r5, ip
 80003ca:	d00c      	beq.n	80003e6 <__aeabi_dmul+0x206>
 80003cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d0:	bf18      	it	ne
 80003d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003d6:	d1d1      	bne.n	800037c <__aeabi_dmul+0x19c>
 80003d8:	ea81 0103 	eor.w	r1, r1, r3
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	f04f 0000 	mov.w	r0, #0
 80003e4:	bd70      	pop	{r4, r5, r6, pc}
 80003e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003ea:	bf06      	itte	eq
 80003ec:	4610      	moveq	r0, r2
 80003ee:	4619      	moveq	r1, r3
 80003f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003f4:	d019      	beq.n	800042a <__aeabi_dmul+0x24a>
 80003f6:	ea94 0f0c 	teq	r4, ip
 80003fa:	d102      	bne.n	8000402 <__aeabi_dmul+0x222>
 80003fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000400:	d113      	bne.n	800042a <__aeabi_dmul+0x24a>
 8000402:	ea95 0f0c 	teq	r5, ip
 8000406:	d105      	bne.n	8000414 <__aeabi_dmul+0x234>
 8000408:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800040c:	bf1c      	itt	ne
 800040e:	4610      	movne	r0, r2
 8000410:	4619      	movne	r1, r3
 8000412:	d10a      	bne.n	800042a <__aeabi_dmul+0x24a>
 8000414:	ea81 0103 	eor.w	r1, r1, r3
 8000418:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800041c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd70      	pop	{r4, r5, r6, pc}
 800042a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800042e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000432:	bd70      	pop	{r4, r5, r6, pc}

08000434 <__aeabi_drsub>:
 8000434:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000438:	e002      	b.n	8000440 <__adddf3>
 800043a:	bf00      	nop

0800043c <__aeabi_dsub>:
 800043c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000440 <__adddf3>:
 8000440:	b530      	push	{r4, r5, lr}
 8000442:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000446:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800044a:	ea94 0f05 	teq	r4, r5
 800044e:	bf08      	it	eq
 8000450:	ea90 0f02 	teqeq	r0, r2
 8000454:	bf1f      	itttt	ne
 8000456:	ea54 0c00 	orrsne.w	ip, r4, r0
 800045a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800045e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000462:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000466:	f000 80e2 	beq.w	800062e <__adddf3+0x1ee>
 800046a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800046e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000472:	bfb8      	it	lt
 8000474:	426d      	neglt	r5, r5
 8000476:	dd0c      	ble.n	8000492 <__adddf3+0x52>
 8000478:	442c      	add	r4, r5
 800047a:	ea80 0202 	eor.w	r2, r0, r2
 800047e:	ea81 0303 	eor.w	r3, r1, r3
 8000482:	ea82 0000 	eor.w	r0, r2, r0
 8000486:	ea83 0101 	eor.w	r1, r3, r1
 800048a:	ea80 0202 	eor.w	r2, r0, r2
 800048e:	ea81 0303 	eor.w	r3, r1, r3
 8000492:	2d36      	cmp	r5, #54	; 0x36
 8000494:	bf88      	it	hi
 8000496:	bd30      	pophi	{r4, r5, pc}
 8000498:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800049c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a8:	d002      	beq.n	80004b0 <__adddf3+0x70>
 80004aa:	4240      	negs	r0, r0
 80004ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004bc:	d002      	beq.n	80004c4 <__adddf3+0x84>
 80004be:	4252      	negs	r2, r2
 80004c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004c4:	ea94 0f05 	teq	r4, r5
 80004c8:	f000 80a7 	beq.w	800061a <__adddf3+0x1da>
 80004cc:	f1a4 0401 	sub.w	r4, r4, #1
 80004d0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004d4:	db0d      	blt.n	80004f2 <__adddf3+0xb2>
 80004d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004da:	fa22 f205 	lsr.w	r2, r2, r5
 80004de:	1880      	adds	r0, r0, r2
 80004e0:	f141 0100 	adc.w	r1, r1, #0
 80004e4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e8:	1880      	adds	r0, r0, r2
 80004ea:	fa43 f305 	asr.w	r3, r3, r5
 80004ee:	4159      	adcs	r1, r3
 80004f0:	e00e      	b.n	8000510 <__adddf3+0xd0>
 80004f2:	f1a5 0520 	sub.w	r5, r5, #32
 80004f6:	f10e 0e20 	add.w	lr, lr, #32
 80004fa:	2a01      	cmp	r2, #1
 80004fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000500:	bf28      	it	cs
 8000502:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000506:	fa43 f305 	asr.w	r3, r3, r5
 800050a:	18c0      	adds	r0, r0, r3
 800050c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	d507      	bpl.n	8000526 <__adddf3+0xe6>
 8000516:	f04f 0e00 	mov.w	lr, #0
 800051a:	f1dc 0c00 	rsbs	ip, ip, #0
 800051e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000522:	eb6e 0101 	sbc.w	r1, lr, r1
 8000526:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800052a:	d31b      	bcc.n	8000564 <__adddf3+0x124>
 800052c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000530:	d30c      	bcc.n	800054c <__adddf3+0x10c>
 8000532:	0849      	lsrs	r1, r1, #1
 8000534:	ea5f 0030 	movs.w	r0, r0, rrx
 8000538:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800053c:	f104 0401 	add.w	r4, r4, #1
 8000540:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000544:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000548:	f080 809a 	bcs.w	8000680 <__adddf3+0x240>
 800054c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000550:	bf08      	it	eq
 8000552:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000556:	f150 0000 	adcs.w	r0, r0, #0
 800055a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800055e:	ea41 0105 	orr.w	r1, r1, r5
 8000562:	bd30      	pop	{r4, r5, pc}
 8000564:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000568:	4140      	adcs	r0, r0
 800056a:	eb41 0101 	adc.w	r1, r1, r1
 800056e:	3c01      	subs	r4, #1
 8000570:	bf28      	it	cs
 8000572:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000576:	d2e9      	bcs.n	800054c <__adddf3+0x10c>
 8000578:	f091 0f00 	teq	r1, #0
 800057c:	bf04      	itt	eq
 800057e:	4601      	moveq	r1, r0
 8000580:	2000      	moveq	r0, #0
 8000582:	fab1 f381 	clz	r3, r1
 8000586:	bf08      	it	eq
 8000588:	3320      	addeq	r3, #32
 800058a:	f1a3 030b 	sub.w	r3, r3, #11
 800058e:	f1b3 0220 	subs.w	r2, r3, #32
 8000592:	da0c      	bge.n	80005ae <__adddf3+0x16e>
 8000594:	320c      	adds	r2, #12
 8000596:	dd08      	ble.n	80005aa <__adddf3+0x16a>
 8000598:	f102 0c14 	add.w	ip, r2, #20
 800059c:	f1c2 020c 	rsb	r2, r2, #12
 80005a0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005a4:	fa21 f102 	lsr.w	r1, r1, r2
 80005a8:	e00c      	b.n	80005c4 <__adddf3+0x184>
 80005aa:	f102 0214 	add.w	r2, r2, #20
 80005ae:	bfd8      	it	le
 80005b0:	f1c2 0c20 	rsble	ip, r2, #32
 80005b4:	fa01 f102 	lsl.w	r1, r1, r2
 80005b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005bc:	bfdc      	itt	le
 80005be:	ea41 010c 	orrle.w	r1, r1, ip
 80005c2:	4090      	lslle	r0, r2
 80005c4:	1ae4      	subs	r4, r4, r3
 80005c6:	bfa2      	ittt	ge
 80005c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005cc:	4329      	orrge	r1, r5
 80005ce:	bd30      	popge	{r4, r5, pc}
 80005d0:	ea6f 0404 	mvn.w	r4, r4
 80005d4:	3c1f      	subs	r4, #31
 80005d6:	da1c      	bge.n	8000612 <__adddf3+0x1d2>
 80005d8:	340c      	adds	r4, #12
 80005da:	dc0e      	bgt.n	80005fa <__adddf3+0x1ba>
 80005dc:	f104 0414 	add.w	r4, r4, #20
 80005e0:	f1c4 0220 	rsb	r2, r4, #32
 80005e4:	fa20 f004 	lsr.w	r0, r0, r4
 80005e8:	fa01 f302 	lsl.w	r3, r1, r2
 80005ec:	ea40 0003 	orr.w	r0, r0, r3
 80005f0:	fa21 f304 	lsr.w	r3, r1, r4
 80005f4:	ea45 0103 	orr.w	r1, r5, r3
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	f1c4 040c 	rsb	r4, r4, #12
 80005fe:	f1c4 0220 	rsb	r2, r4, #32
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 f304 	lsl.w	r3, r1, r4
 800060a:	ea40 0003 	orr.w	r0, r0, r3
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	fa21 f004 	lsr.w	r0, r1, r4
 8000616:	4629      	mov	r1, r5
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	f094 0f00 	teq	r4, #0
 800061e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000622:	bf06      	itte	eq
 8000624:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000628:	3401      	addeq	r4, #1
 800062a:	3d01      	subne	r5, #1
 800062c:	e74e      	b.n	80004cc <__adddf3+0x8c>
 800062e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000632:	bf18      	it	ne
 8000634:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000638:	d029      	beq.n	800068e <__adddf3+0x24e>
 800063a:	ea94 0f05 	teq	r4, r5
 800063e:	bf08      	it	eq
 8000640:	ea90 0f02 	teqeq	r0, r2
 8000644:	d005      	beq.n	8000652 <__adddf3+0x212>
 8000646:	ea54 0c00 	orrs.w	ip, r4, r0
 800064a:	bf04      	itt	eq
 800064c:	4619      	moveq	r1, r3
 800064e:	4610      	moveq	r0, r2
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	ea91 0f03 	teq	r1, r3
 8000656:	bf1e      	ittt	ne
 8000658:	2100      	movne	r1, #0
 800065a:	2000      	movne	r0, #0
 800065c:	bd30      	popne	{r4, r5, pc}
 800065e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000662:	d105      	bne.n	8000670 <__adddf3+0x230>
 8000664:	0040      	lsls	r0, r0, #1
 8000666:	4149      	adcs	r1, r1
 8000668:	bf28      	it	cs
 800066a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd30      	pop	{r4, r5, pc}
 8000670:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000674:	bf3c      	itt	cc
 8000676:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800067a:	bd30      	popcc	{r4, r5, pc}
 800067c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000680:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000684:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000688:	f04f 0000 	mov.w	r0, #0
 800068c:	bd30      	pop	{r4, r5, pc}
 800068e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000692:	bf1a      	itte	ne
 8000694:	4619      	movne	r1, r3
 8000696:	4610      	movne	r0, r2
 8000698:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800069c:	bf1c      	itt	ne
 800069e:	460b      	movne	r3, r1
 80006a0:	4602      	movne	r2, r0
 80006a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006a6:	bf06      	itte	eq
 80006a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006ac:	ea91 0f03 	teqeq	r1, r3
 80006b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	bf00      	nop

080006b8 <__aeabi_ui2d>:
 80006b8:	f090 0f00 	teq	r0, #0
 80006bc:	bf04      	itt	eq
 80006be:	2100      	moveq	r1, #0
 80006c0:	4770      	bxeq	lr
 80006c2:	b530      	push	{r4, r5, lr}
 80006c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006cc:	f04f 0500 	mov.w	r5, #0
 80006d0:	f04f 0100 	mov.w	r1, #0
 80006d4:	e750      	b.n	8000578 <__adddf3+0x138>
 80006d6:	bf00      	nop

080006d8 <__aeabi_i2d>:
 80006d8:	f090 0f00 	teq	r0, #0
 80006dc:	bf04      	itt	eq
 80006de:	2100      	moveq	r1, #0
 80006e0:	4770      	bxeq	lr
 80006e2:	b530      	push	{r4, r5, lr}
 80006e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006f0:	bf48      	it	mi
 80006f2:	4240      	negmi	r0, r0
 80006f4:	f04f 0100 	mov.w	r1, #0
 80006f8:	e73e      	b.n	8000578 <__adddf3+0x138>
 80006fa:	bf00      	nop

080006fc <__aeabi_f2d>:
 80006fc:	0042      	lsls	r2, r0, #1
 80006fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000702:	ea4f 0131 	mov.w	r1, r1, rrx
 8000706:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800070a:	bf1f      	itttt	ne
 800070c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000710:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000714:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000718:	4770      	bxne	lr
 800071a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800071e:	bf08      	it	eq
 8000720:	4770      	bxeq	lr
 8000722:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000726:	bf04      	itt	eq
 8000728:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800072c:	4770      	bxeq	lr
 800072e:	b530      	push	{r4, r5, lr}
 8000730:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000734:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800073c:	e71c      	b.n	8000578 <__adddf3+0x138>
 800073e:	bf00      	nop

08000740 <__aeabi_ul2d>:
 8000740:	ea50 0201 	orrs.w	r2, r0, r1
 8000744:	bf08      	it	eq
 8000746:	4770      	bxeq	lr
 8000748:	b530      	push	{r4, r5, lr}
 800074a:	f04f 0500 	mov.w	r5, #0
 800074e:	e00a      	b.n	8000766 <__aeabi_l2d+0x16>

08000750 <__aeabi_l2d>:
 8000750:	ea50 0201 	orrs.w	r2, r0, r1
 8000754:	bf08      	it	eq
 8000756:	4770      	bxeq	lr
 8000758:	b530      	push	{r4, r5, lr}
 800075a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800075e:	d502      	bpl.n	8000766 <__aeabi_l2d+0x16>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800076a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000772:	f43f aed8 	beq.w	8000526 <__adddf3+0xe6>
 8000776:	f04f 0203 	mov.w	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000786:	bf18      	it	ne
 8000788:	3203      	addne	r2, #3
 800078a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800078e:	f1c2 0320 	rsb	r3, r2, #32
 8000792:	fa00 fc03 	lsl.w	ip, r0, r3
 8000796:	fa20 f002 	lsr.w	r0, r0, r2
 800079a:	fa01 fe03 	lsl.w	lr, r1, r3
 800079e:	ea40 000e 	orr.w	r0, r0, lr
 80007a2:	fa21 f102 	lsr.w	r1, r1, r2
 80007a6:	4414      	add	r4, r2
 80007a8:	e6bd      	b.n	8000526 <__adddf3+0xe6>
 80007aa:	bf00      	nop

080007ac <__aeabi_d2uiz>:
 80007ac:	004a      	lsls	r2, r1, #1
 80007ae:	d211      	bcs.n	80007d4 <__aeabi_d2uiz+0x28>
 80007b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007b4:	d211      	bcs.n	80007da <__aeabi_d2uiz+0x2e>
 80007b6:	d50d      	bpl.n	80007d4 <__aeabi_d2uiz+0x28>
 80007b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007c0:	d40e      	bmi.n	80007e0 <__aeabi_d2uiz+0x34>
 80007c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007ce:	fa23 f002 	lsr.w	r0, r3, r2
 80007d2:	4770      	bx	lr
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	4770      	bx	lr
 80007da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007de:	d102      	bne.n	80007e6 <__aeabi_d2uiz+0x3a>
 80007e0:	f04f 30ff 	mov.w	r0, #4294967295
 80007e4:	4770      	bx	lr
 80007e6:	f04f 0000 	mov.w	r0, #0
 80007ea:	4770      	bx	lr

080007ec <__aeabi_d2f>:
 80007ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007f4:	bf24      	itt	cs
 80007f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007fe:	d90d      	bls.n	800081c <__aeabi_d2f+0x30>
 8000800:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000804:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000808:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800080c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000810:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000814:	bf08      	it	eq
 8000816:	f020 0001 	biceq.w	r0, r0, #1
 800081a:	4770      	bx	lr
 800081c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000820:	d121      	bne.n	8000866 <__aeabi_d2f+0x7a>
 8000822:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000826:	bfbc      	itt	lt
 8000828:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800082c:	4770      	bxlt	lr
 800082e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000832:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000836:	f1c2 0218 	rsb	r2, r2, #24
 800083a:	f1c2 0c20 	rsb	ip, r2, #32
 800083e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000842:	fa20 f002 	lsr.w	r0, r0, r2
 8000846:	bf18      	it	ne
 8000848:	f040 0001 	orrne.w	r0, r0, #1
 800084c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000850:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000854:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000858:	ea40 000c 	orr.w	r0, r0, ip
 800085c:	fa23 f302 	lsr.w	r3, r3, r2
 8000860:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000864:	e7cc      	b.n	8000800 <__aeabi_d2f+0x14>
 8000866:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800086a:	d107      	bne.n	800087c <__aeabi_d2f+0x90>
 800086c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000870:	bf1e      	ittt	ne
 8000872:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000876:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800087a:	4770      	bxne	lr
 800087c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000880:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000884:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295
 800089c:	f04f 30ff 	movne.w	r0, #4294967295
 80008a0:	f000 b970 	b.w	8000b84 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9e08      	ldr	r6, [sp, #32]
 80008c2:	460d      	mov	r5, r1
 80008c4:	4604      	mov	r4, r0
 80008c6:	460f      	mov	r7, r1
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d14a      	bne.n	8000962 <__udivmoddi4+0xa6>
 80008cc:	428a      	cmp	r2, r1
 80008ce:	4694      	mov	ip, r2
 80008d0:	d965      	bls.n	800099e <__udivmoddi4+0xe2>
 80008d2:	fab2 f382 	clz	r3, r2
 80008d6:	b143      	cbz	r3, 80008ea <__udivmoddi4+0x2e>
 80008d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80008dc:	f1c3 0220 	rsb	r2, r3, #32
 80008e0:	409f      	lsls	r7, r3
 80008e2:	fa20 f202 	lsr.w	r2, r0, r2
 80008e6:	4317      	orrs	r7, r2
 80008e8:	409c      	lsls	r4, r3
 80008ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008ee:	fa1f f58c 	uxth.w	r5, ip
 80008f2:	fbb7 f1fe 	udiv	r1, r7, lr
 80008f6:	0c22      	lsrs	r2, r4, #16
 80008f8:	fb0e 7711 	mls	r7, lr, r1, r7
 80008fc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000900:	fb01 f005 	mul.w	r0, r1, r5
 8000904:	4290      	cmp	r0, r2
 8000906:	d90a      	bls.n	800091e <__udivmoddi4+0x62>
 8000908:	eb1c 0202 	adds.w	r2, ip, r2
 800090c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000910:	f080 811c 	bcs.w	8000b4c <__udivmoddi4+0x290>
 8000914:	4290      	cmp	r0, r2
 8000916:	f240 8119 	bls.w	8000b4c <__udivmoddi4+0x290>
 800091a:	3902      	subs	r1, #2
 800091c:	4462      	add	r2, ip
 800091e:	1a12      	subs	r2, r2, r0
 8000920:	b2a4      	uxth	r4, r4
 8000922:	fbb2 f0fe 	udiv	r0, r2, lr
 8000926:	fb0e 2210 	mls	r2, lr, r0, r2
 800092a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800092e:	fb00 f505 	mul.w	r5, r0, r5
 8000932:	42a5      	cmp	r5, r4
 8000934:	d90a      	bls.n	800094c <__udivmoddi4+0x90>
 8000936:	eb1c 0404 	adds.w	r4, ip, r4
 800093a:	f100 32ff 	add.w	r2, r0, #4294967295
 800093e:	f080 8107 	bcs.w	8000b50 <__udivmoddi4+0x294>
 8000942:	42a5      	cmp	r5, r4
 8000944:	f240 8104 	bls.w	8000b50 <__udivmoddi4+0x294>
 8000948:	4464      	add	r4, ip
 800094a:	3802      	subs	r0, #2
 800094c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000950:	1b64      	subs	r4, r4, r5
 8000952:	2100      	movs	r1, #0
 8000954:	b11e      	cbz	r6, 800095e <__udivmoddi4+0xa2>
 8000956:	40dc      	lsrs	r4, r3
 8000958:	2300      	movs	r3, #0
 800095a:	e9c6 4300 	strd	r4, r3, [r6]
 800095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000962:	428b      	cmp	r3, r1
 8000964:	d908      	bls.n	8000978 <__udivmoddi4+0xbc>
 8000966:	2e00      	cmp	r6, #0
 8000968:	f000 80ed 	beq.w	8000b46 <__udivmoddi4+0x28a>
 800096c:	2100      	movs	r1, #0
 800096e:	e9c6 0500 	strd	r0, r5, [r6]
 8000972:	4608      	mov	r0, r1
 8000974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000978:	fab3 f183 	clz	r1, r3
 800097c:	2900      	cmp	r1, #0
 800097e:	d149      	bne.n	8000a14 <__udivmoddi4+0x158>
 8000980:	42ab      	cmp	r3, r5
 8000982:	d302      	bcc.n	800098a <__udivmoddi4+0xce>
 8000984:	4282      	cmp	r2, r0
 8000986:	f200 80f8 	bhi.w	8000b7a <__udivmoddi4+0x2be>
 800098a:	1a84      	subs	r4, r0, r2
 800098c:	eb65 0203 	sbc.w	r2, r5, r3
 8000990:	2001      	movs	r0, #1
 8000992:	4617      	mov	r7, r2
 8000994:	2e00      	cmp	r6, #0
 8000996:	d0e2      	beq.n	800095e <__udivmoddi4+0xa2>
 8000998:	e9c6 4700 	strd	r4, r7, [r6]
 800099c:	e7df      	b.n	800095e <__udivmoddi4+0xa2>
 800099e:	b902      	cbnz	r2, 80009a2 <__udivmoddi4+0xe6>
 80009a0:	deff      	udf	#255	; 0xff
 80009a2:	fab2 f382 	clz	r3, r2
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	f040 8090 	bne.w	8000acc <__udivmoddi4+0x210>
 80009ac:	1a8a      	subs	r2, r1, r2
 80009ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009b2:	fa1f fe8c 	uxth.w	lr, ip
 80009b6:	2101      	movs	r1, #1
 80009b8:	fbb2 f5f7 	udiv	r5, r2, r7
 80009bc:	fb07 2015 	mls	r0, r7, r5, r2
 80009c0:	0c22      	lsrs	r2, r4, #16
 80009c2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009c6:	fb0e f005 	mul.w	r0, lr, r5
 80009ca:	4290      	cmp	r0, r2
 80009cc:	d908      	bls.n	80009e0 <__udivmoddi4+0x124>
 80009ce:	eb1c 0202 	adds.w	r2, ip, r2
 80009d2:	f105 38ff 	add.w	r8, r5, #4294967295
 80009d6:	d202      	bcs.n	80009de <__udivmoddi4+0x122>
 80009d8:	4290      	cmp	r0, r2
 80009da:	f200 80cb 	bhi.w	8000b74 <__udivmoddi4+0x2b8>
 80009de:	4645      	mov	r5, r8
 80009e0:	1a12      	subs	r2, r2, r0
 80009e2:	b2a4      	uxth	r4, r4
 80009e4:	fbb2 f0f7 	udiv	r0, r2, r7
 80009e8:	fb07 2210 	mls	r2, r7, r0, r2
 80009ec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009f0:	fb0e fe00 	mul.w	lr, lr, r0
 80009f4:	45a6      	cmp	lr, r4
 80009f6:	d908      	bls.n	8000a0a <__udivmoddi4+0x14e>
 80009f8:	eb1c 0404 	adds.w	r4, ip, r4
 80009fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a00:	d202      	bcs.n	8000a08 <__udivmoddi4+0x14c>
 8000a02:	45a6      	cmp	lr, r4
 8000a04:	f200 80bb 	bhi.w	8000b7e <__udivmoddi4+0x2c2>
 8000a08:	4610      	mov	r0, r2
 8000a0a:	eba4 040e 	sub.w	r4, r4, lr
 8000a0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a12:	e79f      	b.n	8000954 <__udivmoddi4+0x98>
 8000a14:	f1c1 0720 	rsb	r7, r1, #32
 8000a18:	408b      	lsls	r3, r1
 8000a1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a22:	fa05 f401 	lsl.w	r4, r5, r1
 8000a26:	fa20 f307 	lsr.w	r3, r0, r7
 8000a2a:	40fd      	lsrs	r5, r7
 8000a2c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a30:	4323      	orrs	r3, r4
 8000a32:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a36:	fa1f fe8c 	uxth.w	lr, ip
 8000a3a:	fb09 5518 	mls	r5, r9, r8, r5
 8000a3e:	0c1c      	lsrs	r4, r3, #16
 8000a40:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a44:	fb08 f50e 	mul.w	r5, r8, lr
 8000a48:	42a5      	cmp	r5, r4
 8000a4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a4e:	fa00 f001 	lsl.w	r0, r0, r1
 8000a52:	d90b      	bls.n	8000a6c <__udivmoddi4+0x1b0>
 8000a54:	eb1c 0404 	adds.w	r4, ip, r4
 8000a58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a5c:	f080 8088 	bcs.w	8000b70 <__udivmoddi4+0x2b4>
 8000a60:	42a5      	cmp	r5, r4
 8000a62:	f240 8085 	bls.w	8000b70 <__udivmoddi4+0x2b4>
 8000a66:	f1a8 0802 	sub.w	r8, r8, #2
 8000a6a:	4464      	add	r4, ip
 8000a6c:	1b64      	subs	r4, r4, r5
 8000a6e:	b29d      	uxth	r5, r3
 8000a70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a74:	fb09 4413 	mls	r4, r9, r3, r4
 8000a78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a80:	45a6      	cmp	lr, r4
 8000a82:	d908      	bls.n	8000a96 <__udivmoddi4+0x1da>
 8000a84:	eb1c 0404 	adds.w	r4, ip, r4
 8000a88:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a8c:	d26c      	bcs.n	8000b68 <__udivmoddi4+0x2ac>
 8000a8e:	45a6      	cmp	lr, r4
 8000a90:	d96a      	bls.n	8000b68 <__udivmoddi4+0x2ac>
 8000a92:	3b02      	subs	r3, #2
 8000a94:	4464      	add	r4, ip
 8000a96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a9a:	fba3 9502 	umull	r9, r5, r3, r2
 8000a9e:	eba4 040e 	sub.w	r4, r4, lr
 8000aa2:	42ac      	cmp	r4, r5
 8000aa4:	46c8      	mov	r8, r9
 8000aa6:	46ae      	mov	lr, r5
 8000aa8:	d356      	bcc.n	8000b58 <__udivmoddi4+0x29c>
 8000aaa:	d053      	beq.n	8000b54 <__udivmoddi4+0x298>
 8000aac:	b156      	cbz	r6, 8000ac4 <__udivmoddi4+0x208>
 8000aae:	ebb0 0208 	subs.w	r2, r0, r8
 8000ab2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ab6:	fa04 f707 	lsl.w	r7, r4, r7
 8000aba:	40ca      	lsrs	r2, r1
 8000abc:	40cc      	lsrs	r4, r1
 8000abe:	4317      	orrs	r7, r2
 8000ac0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000acc:	f1c3 0120 	rsb	r1, r3, #32
 8000ad0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ad4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ad8:	fa25 f101 	lsr.w	r1, r5, r1
 8000adc:	409d      	lsls	r5, r3
 8000ade:	432a      	orrs	r2, r5
 8000ae0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ae4:	fa1f fe8c 	uxth.w	lr, ip
 8000ae8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aec:	fb07 1510 	mls	r5, r7, r0, r1
 8000af0:	0c11      	lsrs	r1, r2, #16
 8000af2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000af6:	fb00 f50e 	mul.w	r5, r0, lr
 8000afa:	428d      	cmp	r5, r1
 8000afc:	fa04 f403 	lsl.w	r4, r4, r3
 8000b00:	d908      	bls.n	8000b14 <__udivmoddi4+0x258>
 8000b02:	eb1c 0101 	adds.w	r1, ip, r1
 8000b06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b0a:	d22f      	bcs.n	8000b6c <__udivmoddi4+0x2b0>
 8000b0c:	428d      	cmp	r5, r1
 8000b0e:	d92d      	bls.n	8000b6c <__udivmoddi4+0x2b0>
 8000b10:	3802      	subs	r0, #2
 8000b12:	4461      	add	r1, ip
 8000b14:	1b49      	subs	r1, r1, r5
 8000b16:	b292      	uxth	r2, r2
 8000b18:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b1c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b24:	fb05 f10e 	mul.w	r1, r5, lr
 8000b28:	4291      	cmp	r1, r2
 8000b2a:	d908      	bls.n	8000b3e <__udivmoddi4+0x282>
 8000b2c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b30:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b34:	d216      	bcs.n	8000b64 <__udivmoddi4+0x2a8>
 8000b36:	4291      	cmp	r1, r2
 8000b38:	d914      	bls.n	8000b64 <__udivmoddi4+0x2a8>
 8000b3a:	3d02      	subs	r5, #2
 8000b3c:	4462      	add	r2, ip
 8000b3e:	1a52      	subs	r2, r2, r1
 8000b40:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b44:	e738      	b.n	80009b8 <__udivmoddi4+0xfc>
 8000b46:	4631      	mov	r1, r6
 8000b48:	4630      	mov	r0, r6
 8000b4a:	e708      	b.n	800095e <__udivmoddi4+0xa2>
 8000b4c:	4639      	mov	r1, r7
 8000b4e:	e6e6      	b.n	800091e <__udivmoddi4+0x62>
 8000b50:	4610      	mov	r0, r2
 8000b52:	e6fb      	b.n	800094c <__udivmoddi4+0x90>
 8000b54:	4548      	cmp	r0, r9
 8000b56:	d2a9      	bcs.n	8000aac <__udivmoddi4+0x1f0>
 8000b58:	ebb9 0802 	subs.w	r8, r9, r2
 8000b5c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b60:	3b01      	subs	r3, #1
 8000b62:	e7a3      	b.n	8000aac <__udivmoddi4+0x1f0>
 8000b64:	4645      	mov	r5, r8
 8000b66:	e7ea      	b.n	8000b3e <__udivmoddi4+0x282>
 8000b68:	462b      	mov	r3, r5
 8000b6a:	e794      	b.n	8000a96 <__udivmoddi4+0x1da>
 8000b6c:	4640      	mov	r0, r8
 8000b6e:	e7d1      	b.n	8000b14 <__udivmoddi4+0x258>
 8000b70:	46d0      	mov	r8, sl
 8000b72:	e77b      	b.n	8000a6c <__udivmoddi4+0x1b0>
 8000b74:	3d02      	subs	r5, #2
 8000b76:	4462      	add	r2, ip
 8000b78:	e732      	b.n	80009e0 <__udivmoddi4+0x124>
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	e70a      	b.n	8000994 <__udivmoddi4+0xd8>
 8000b7e:	4464      	add	r4, ip
 8000b80:	3802      	subs	r0, #2
 8000b82:	e742      	b.n	8000a0a <__udivmoddi4+0x14e>

08000b84 <__aeabi_idiv0>:
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b8c:	f000 fd4c 	bl	8001628 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b90:	f000 f862 	bl	8000c58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b94:	f000 f98c 	bl	8000eb0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000b98:	f000 f8c6 	bl	8000d28 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /*
   * INICIALIZAMOS EL PWM de todos los canales
   */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	481e      	ldr	r0, [pc, #120]	; (8000c18 <main+0x90>)
 8000ba0:	f001 fd86 	bl	80026b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000ba4:	2104      	movs	r1, #4
 8000ba6:	481c      	ldr	r0, [pc, #112]	; (8000c18 <main+0x90>)
 8000ba8:	f001 fd82 	bl	80026b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000bac:	2108      	movs	r1, #8
 8000bae:	481a      	ldr	r0, [pc, #104]	; (8000c18 <main+0x90>)
 8000bb0:	f001 fd7e 	bl	80026b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000bb4:	210c      	movs	r1, #12
 8000bb6:	4818      	ldr	r0, [pc, #96]	; (8000c18 <main+0x90>)
 8000bb8:	f001 fd7a 	bl	80026b0 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000bbc:	f002 fcba 	bl	8003534 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of signal0 */
  signal0Handle = osThreadNew(signal0_func, NULL, &signal0_attributes);
 8000bc0:	4a16      	ldr	r2, [pc, #88]	; (8000c1c <main+0x94>)
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4816      	ldr	r0, [pc, #88]	; (8000c20 <main+0x98>)
 8000bc6:	f002 fcff 	bl	80035c8 <osThreadNew>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	4a15      	ldr	r2, [pc, #84]	; (8000c24 <main+0x9c>)
 8000bce:	6013      	str	r3, [r2, #0]

  /* creation of signal1 */
  signal1Handle = osThreadNew(signal1_func, NULL, &signal1_attributes);
 8000bd0:	4a15      	ldr	r2, [pc, #84]	; (8000c28 <main+0xa0>)
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4815      	ldr	r0, [pc, #84]	; (8000c2c <main+0xa4>)
 8000bd6:	f002 fcf7 	bl	80035c8 <osThreadNew>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	4a14      	ldr	r2, [pc, #80]	; (8000c30 <main+0xa8>)
 8000bde:	6013      	str	r3, [r2, #0]

  /* creation of mux */
  muxHandle = osThreadNew(mux_signal, NULL, &mux_attributes);
 8000be0:	4a14      	ldr	r2, [pc, #80]	; (8000c34 <main+0xac>)
 8000be2:	2100      	movs	r1, #0
 8000be4:	4814      	ldr	r0, [pc, #80]	; (8000c38 <main+0xb0>)
 8000be6:	f002 fcef 	bl	80035c8 <osThreadNew>
 8000bea:	4603      	mov	r3, r0
 8000bec:	4a13      	ldr	r2, [pc, #76]	; (8000c3c <main+0xb4>)
 8000bee:	6013      	str	r3, [r2, #0]

  /* creation of signal2 */
  signal2Handle = osThreadNew(signal2_func, NULL, &signal2_attributes);
 8000bf0:	4a13      	ldr	r2, [pc, #76]	; (8000c40 <main+0xb8>)
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4813      	ldr	r0, [pc, #76]	; (8000c44 <main+0xbc>)
 8000bf6:	f002 fce7 	bl	80035c8 <osThreadNew>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	4a12      	ldr	r2, [pc, #72]	; (8000c48 <main+0xc0>)
 8000bfe:	6013      	str	r3, [r2, #0]

  /* creation of signal3 */
  signal3Handle = osThreadNew(signal3_func, NULL, &signal3_attributes);
 8000c00:	4a12      	ldr	r2, [pc, #72]	; (8000c4c <main+0xc4>)
 8000c02:	2100      	movs	r1, #0
 8000c04:	4812      	ldr	r0, [pc, #72]	; (8000c50 <main+0xc8>)
 8000c06:	f002 fcdf 	bl	80035c8 <osThreadNew>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	4a11      	ldr	r2, [pc, #68]	; (8000c54 <main+0xcc>)
 8000c0e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c10:	f002 fcb4 	bl	800357c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <main+0x8c>
 8000c16:	bf00      	nop
 8000c18:	2000002c 	.word	0x2000002c
 8000c1c:	08006ba0 	.word	0x08006ba0
 8000c20:	08000f51 	.word	0x08000f51
 8000c24:	20000074 	.word	0x20000074
 8000c28:	08006bc4 	.word	0x08006bc4
 8000c2c:	08001029 	.word	0x08001029
 8000c30:	20000078 	.word	0x20000078
 8000c34:	08006be8 	.word	0x08006be8
 8000c38:	080010fd 	.word	0x080010fd
 8000c3c:	2000007c 	.word	0x2000007c
 8000c40:	08006c0c 	.word	0x08006c0c
 8000c44:	08001129 	.word	0x08001129
 8000c48:	20000080 	.word	0x20000080
 8000c4c:	08006c30 	.word	0x08006c30
 8000c50:	08001221 	.word	0x08001221
 8000c54:	20000084 	.word	0x20000084

08000c58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b094      	sub	sp, #80	; 0x50
 8000c5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c5e:	f107 0320 	add.w	r3, r7, #32
 8000c62:	2230      	movs	r2, #48	; 0x30
 8000c64:	2100      	movs	r1, #0
 8000c66:	4618      	mov	r0, r3
 8000c68:	f005 f9b8 	bl	8005fdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c6c:	f107 030c 	add.w	r3, r7, #12
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	4b27      	ldr	r3, [pc, #156]	; (8000d20 <SystemClock_Config+0xc8>)
 8000c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c84:	4a26      	ldr	r2, [pc, #152]	; (8000d20 <SystemClock_Config+0xc8>)
 8000c86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8c:	4b24      	ldr	r3, [pc, #144]	; (8000d20 <SystemClock_Config+0xc8>)
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c98:	2300      	movs	r3, #0
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	4b21      	ldr	r3, [pc, #132]	; (8000d24 <SystemClock_Config+0xcc>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a20      	ldr	r2, [pc, #128]	; (8000d24 <SystemClock_Config+0xcc>)
 8000ca2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ca6:	6013      	str	r3, [r2, #0]
 8000ca8:	4b1e      	ldr	r3, [pc, #120]	; (8000d24 <SystemClock_Config+0xcc>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cc2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000cc8:	230c      	movs	r3, #12
 8000cca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000ccc:	2360      	movs	r3, #96	; 0x60
 8000cce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cd4:	2304      	movs	r3, #4
 8000cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd8:	f107 0320 	add.w	r3, r7, #32
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f000 ff65 	bl	8001bac <HAL_RCC_OscConfig>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ce8:	f000 fb26 	bl	8001338 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cec:	230f      	movs	r3, #15
 8000cee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cfc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d02:	f107 030c 	add.w	r3, r7, #12
 8000d06:	2103      	movs	r1, #3
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f001 f9c7 	bl	800209c <HAL_RCC_ClockConfig>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000d14:	f000 fb10 	bl	8001338 <Error_Handler>
  }
}
 8000d18:	bf00      	nop
 8000d1a:	3750      	adds	r7, #80	; 0x50
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40007000 	.word	0x40007000

08000d28 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b096      	sub	sp, #88	; 0x58
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d2e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d3c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]
 8000d54:	611a      	str	r2, [r3, #16]
 8000d56:	615a      	str	r2, [r3, #20]
 8000d58:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	2220      	movs	r2, #32
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4618      	mov	r0, r3
 8000d62:	f005 f93b 	bl	8005fdc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d66:	4b50      	ldr	r3, [pc, #320]	; (8000ea8 <MX_TIM1_Init+0x180>)
 8000d68:	4a50      	ldr	r2, [pc, #320]	; (8000eac <MX_TIM1_Init+0x184>)
 8000d6a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8000d6c:	4b4e      	ldr	r3, [pc, #312]	; (8000ea8 <MX_TIM1_Init+0x180>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d72:	4b4d      	ldr	r3, [pc, #308]	; (8000ea8 <MX_TIM1_Init+0x180>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255-1;
 8000d78:	4b4b      	ldr	r3, [pc, #300]	; (8000ea8 <MX_TIM1_Init+0x180>)
 8000d7a:	22fe      	movs	r2, #254	; 0xfe
 8000d7c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d7e:	4b4a      	ldr	r3, [pc, #296]	; (8000ea8 <MX_TIM1_Init+0x180>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d84:	4b48      	ldr	r3, [pc, #288]	; (8000ea8 <MX_TIM1_Init+0x180>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8a:	4b47      	ldr	r3, [pc, #284]	; (8000ea8 <MX_TIM1_Init+0x180>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d90:	4845      	ldr	r0, [pc, #276]	; (8000ea8 <MX_TIM1_Init+0x180>)
 8000d92:	f001 fb81 	bl	8002498 <HAL_TIM_Base_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000d9c:	f000 facc 	bl	8001338 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000da0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000da6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000daa:	4619      	mov	r1, r3
 8000dac:	483e      	ldr	r0, [pc, #248]	; (8000ea8 <MX_TIM1_Init+0x180>)
 8000dae:	f001 fee1 	bl	8002b74 <HAL_TIM_ConfigClockSource>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000db8:	f000 fabe 	bl	8001338 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000dbc:	483a      	ldr	r0, [pc, #232]	; (8000ea8 <MX_TIM1_Init+0x180>)
 8000dbe:	f001 fc1d 	bl	80025fc <HAL_TIM_PWM_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000dc8:	f000 fab6 	bl	8001338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dd4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4833      	ldr	r0, [pc, #204]	; (8000ea8 <MX_TIM1_Init+0x180>)
 8000ddc:	f002 fa92 	bl	8003304 <HAL_TIMEx_MasterConfigSynchronization>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000de6:	f000 faa7 	bl	8001338 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dea:	2360      	movs	r3, #96	; 0x60
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000df2:	2300      	movs	r3, #0
 8000df4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000df6:	2300      	movs	r3, #0
 8000df8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e02:	2300      	movs	r3, #0
 8000e04:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4826      	ldr	r0, [pc, #152]	; (8000ea8 <MX_TIM1_Init+0x180>)
 8000e10:	f001 fdee 	bl	80029f0 <HAL_TIM_PWM_ConfigChannel>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000e1a:	f000 fa8d 	bl	8001338 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e22:	2204      	movs	r2, #4
 8000e24:	4619      	mov	r1, r3
 8000e26:	4820      	ldr	r0, [pc, #128]	; (8000ea8 <MX_TIM1_Init+0x180>)
 8000e28:	f001 fde2 	bl	80029f0 <HAL_TIM_PWM_ConfigChannel>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000e32:	f000 fa81 	bl	8001338 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3a:	2208      	movs	r2, #8
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	481a      	ldr	r0, [pc, #104]	; (8000ea8 <MX_TIM1_Init+0x180>)
 8000e40:	f001 fdd6 	bl	80029f0 <HAL_TIM_PWM_ConfigChannel>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8000e4a:	f000 fa75 	bl	8001338 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e52:	220c      	movs	r2, #12
 8000e54:	4619      	mov	r1, r3
 8000e56:	4814      	ldr	r0, [pc, #80]	; (8000ea8 <MX_TIM1_Init+0x180>)
 8000e58:	f001 fdca 	bl	80029f0 <HAL_TIM_PWM_ConfigChannel>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 8000e62:	f000 fa69 	bl	8001338 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e7e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e80:	2300      	movs	r3, #0
 8000e82:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	4619      	mov	r1, r3
 8000e88:	4807      	ldr	r0, [pc, #28]	; (8000ea8 <MX_TIM1_Init+0x180>)
 8000e8a:	f002 faa9 	bl	80033e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8000e94:	f000 fa50 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e98:	4803      	ldr	r0, [pc, #12]	; (8000ea8 <MX_TIM1_Init+0x180>)
 8000e9a:	f000 faaf 	bl	80013fc <HAL_TIM_MspPostInit>

}
 8000e9e:	bf00      	nop
 8000ea0:	3758      	adds	r7, #88	; 0x58
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	2000002c 	.word	0x2000002c
 8000eac:	40010000 	.word	0x40010000

08000eb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b088      	sub	sp, #32
 8000eb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb6:	f107 030c 	add.w	r3, r7, #12
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
 8000ec4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	4b1f      	ldr	r3, [pc, #124]	; (8000f48 <MX_GPIO_Init+0x98>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a1e      	ldr	r2, [pc, #120]	; (8000f48 <MX_GPIO_Init+0x98>)
 8000ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <MX_GPIO_Init+0x98>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	4b18      	ldr	r3, [pc, #96]	; (8000f48 <MX_GPIO_Init+0x98>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a17      	ldr	r2, [pc, #92]	; (8000f48 <MX_GPIO_Init+0x98>)
 8000eec:	f043 0302 	orr.w	r3, r3, #2
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <MX_GPIO_Init+0x98>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0302 	and.w	r3, r3, #2
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	603b      	str	r3, [r7, #0]
 8000f02:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <MX_GPIO_Init+0x98>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a10      	ldr	r2, [pc, #64]	; (8000f48 <MX_GPIO_Init+0x98>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <MX_GPIO_Init+0x98>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	603b      	str	r3, [r7, #0]
 8000f18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, mux_0_Pin|mux_1_Pin|mux_en_Pin, GPIO_PIN_RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2107      	movs	r1, #7
 8000f1e:	480b      	ldr	r0, [pc, #44]	; (8000f4c <MX_GPIO_Init+0x9c>)
 8000f20:	f000 fe2a 	bl	8001b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : mux_0_Pin mux_1_Pin mux_en_Pin */
  GPIO_InitStruct.Pin = mux_0_Pin|mux_1_Pin|mux_en_Pin;
 8000f24:	2307      	movs	r3, #7
 8000f26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f34:	f107 030c 	add.w	r3, r7, #12
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4804      	ldr	r0, [pc, #16]	; (8000f4c <MX_GPIO_Init+0x9c>)
 8000f3c:	f000 fc98 	bl	8001870 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f40:	bf00      	nop
 8000f42:	3720      	adds	r7, #32
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	40020400 	.word	0x40020400

08000f50 <signal0_func>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_signal0_func */
void signal0_func(void *argument)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t val = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	73fb      	strb	r3, [r7, #15]
	float t = 0.0;
 8000f5c:	f04f 0300 	mov.w	r3, #0
 8000f60:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	for(;;)
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,val);
 8000f62:	4b2f      	ldr	r3, [pc, #188]	; (8001020 <signal0_func+0xd0>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	7bfa      	ldrb	r2, [r7, #15]
 8000f68:	641a      	str	r2, [r3, #64]	; 0x40

		if (t<=0.5) { //mayor a 1s
 8000f6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f6e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f7a:	d810      	bhi.n	8000f9e <signal0_func+0x4e>
			t += 0.0001;
 8000f7c:	68b8      	ldr	r0, [r7, #8]
 8000f7e:	f7ff fbbd 	bl	80006fc <__aeabi_f2d>
 8000f82:	a321      	add	r3, pc, #132	; (adr r3, 8001008 <signal0_func+0xb8>)
 8000f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f88:	f7ff fa5a 	bl	8000440 <__adddf3>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	4610      	mov	r0, r2
 8000f92:	4619      	mov	r1, r3
 8000f94:	f7ff fc2a 	bl	80007ec <__aeabi_d2f>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	e002      	b.n	8000fa4 <signal0_func+0x54>
		}else{
			t = 0.0;
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	60bb      	str	r3, [r7, #8]
		}
		val = (uint8_t)(127.0*sinf(2*pi*2*t)+127.0);
 8000fa4:	68b8      	ldr	r0, [r7, #8]
 8000fa6:	f7ff fba9 	bl	80006fc <__aeabi_f2d>
 8000faa:	a319      	add	r3, pc, #100	; (adr r3, 8001010 <signal0_func+0xc0>)
 8000fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb0:	f7ff f916 	bl	80001e0 <__aeabi_dmul>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	4610      	mov	r0, r2
 8000fba:	4619      	mov	r1, r3
 8000fbc:	f7ff fc16 	bl	80007ec <__aeabi_d2f>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	ee00 3a10 	vmov	s0, r3
 8000fc6:	f005 f887 	bl	80060d8 <sinf>
 8000fca:	ee10 3a10 	vmov	r3, s0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fb94 	bl	80006fc <__aeabi_f2d>
 8000fd4:	a310      	add	r3, pc, #64	; (adr r3, 8001018 <signal0_func+0xc8>)
 8000fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fda:	f7ff f901 	bl	80001e0 <__aeabi_dmul>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	4610      	mov	r0, r2
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	a30c      	add	r3, pc, #48	; (adr r3, 8001018 <signal0_func+0xc8>)
 8000fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fec:	f7ff fa28 	bl	8000440 <__adddf3>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	4610      	mov	r0, r2
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	f7ff fbd8 	bl	80007ac <__aeabi_d2uiz>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	73fb      	strb	r3, [r7, #15]
		osDelay(3);
 8001000:	2003      	movs	r0, #3
 8001002:	f002 fb73 	bl	80036ec <osDelay>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,val);
 8001006:	e7ac      	b.n	8000f62 <signal0_func+0x12>
 8001008:	eb1c432d 	.word	0xeb1c432d
 800100c:	3f1a36e2 	.word	0x3f1a36e2
 8001010:	2e48e8a7 	.word	0x2e48e8a7
 8001014:	402921ff 	.word	0x402921ff
 8001018:	00000000 	.word	0x00000000
 800101c:	405fc000 	.word	0x405fc000
 8001020:	2000002c 	.word	0x2000002c
 8001024:	00000000 	.word	0x00000000

08001028 <signal1_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_signal1_func */
void signal1_func(void *argument)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN signal1_func */
	uint8_t val = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	73fb      	strb	r3, [r7, #15]
	float t = 0.0;
 8001034:	f04f 0300 	mov.w	r3, #0
 8001038:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	for(;;)
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,val);
 800103a:	4b2f      	ldr	r3, [pc, #188]	; (80010f8 <signal1_func+0xd0>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	7bfa      	ldrb	r2, [r7, #15]
 8001040:	639a      	str	r2, [r3, #56]	; 0x38

		if (t<=1) { //mayor a 1s
 8001042:	edd7 7a02 	vldr	s15, [r7, #8]
 8001046:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800104a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800104e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001052:	d810      	bhi.n	8001076 <signal1_func+0x4e>
			t += 0.0001;
 8001054:	68b8      	ldr	r0, [r7, #8]
 8001056:	f7ff fb51 	bl	80006fc <__aeabi_f2d>
 800105a:	a321      	add	r3, pc, #132	; (adr r3, 80010e0 <signal1_func+0xb8>)
 800105c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001060:	f7ff f9ee 	bl	8000440 <__adddf3>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	4610      	mov	r0, r2
 800106a:	4619      	mov	r1, r3
 800106c:	f7ff fbbe 	bl	80007ec <__aeabi_d2f>
 8001070:	4603      	mov	r3, r0
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	e002      	b.n	800107c <signal1_func+0x54>
		}else{
			t = 0.0;
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	60bb      	str	r3, [r7, #8]
		}
		val = (uint8_t)(127.0*cosf(2*pi*1*t)+127.0);
 800107c:	68b8      	ldr	r0, [r7, #8]
 800107e:	f7ff fb3d 	bl	80006fc <__aeabi_f2d>
 8001082:	a319      	add	r3, pc, #100	; (adr r3, 80010e8 <signal1_func+0xc0>)
 8001084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001088:	f7ff f8aa 	bl	80001e0 <__aeabi_dmul>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4610      	mov	r0, r2
 8001092:	4619      	mov	r1, r3
 8001094:	f7ff fbaa 	bl	80007ec <__aeabi_d2f>
 8001098:	4603      	mov	r3, r0
 800109a:	ee00 3a10 	vmov	s0, r3
 800109e:	f004 ffd7 	bl	8006050 <cosf>
 80010a2:	ee10 3a10 	vmov	r3, s0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fb28 	bl	80006fc <__aeabi_f2d>
 80010ac:	a310      	add	r3, pc, #64	; (adr r3, 80010f0 <signal1_func+0xc8>)
 80010ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b2:	f7ff f895 	bl	80001e0 <__aeabi_dmul>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	4610      	mov	r0, r2
 80010bc:	4619      	mov	r1, r3
 80010be:	a30c      	add	r3, pc, #48	; (adr r3, 80010f0 <signal1_func+0xc8>)
 80010c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c4:	f7ff f9bc 	bl	8000440 <__adddf3>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	4610      	mov	r0, r2
 80010ce:	4619      	mov	r1, r3
 80010d0:	f7ff fb6c 	bl	80007ac <__aeabi_d2uiz>
 80010d4:	4603      	mov	r3, r0
 80010d6:	73fb      	strb	r3, [r7, #15]
		osDelay(4);
 80010d8:	2004      	movs	r0, #4
 80010da:	f002 fb07 	bl	80036ec <osDelay>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,val);
 80010de:	e7ac      	b.n	800103a <signal1_func+0x12>
 80010e0:	eb1c432d 	.word	0xeb1c432d
 80010e4:	3f1a36e2 	.word	0x3f1a36e2
 80010e8:	2e48e8a7 	.word	0x2e48e8a7
 80010ec:	401921ff 	.word	0x401921ff
 80010f0:	00000000 	.word	0x00000000
 80010f4:	405fc000 	.word	0x405fc000
 80010f8:	2000002c 	.word	0x2000002c

080010fc <mux_signal>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_mux_signal */
void mux_signal(void *argument)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

	uint8_t canal;
	for(;;)
	  {
		for(canal=0;canal<=0b11;canal++){
 8001104:	2300      	movs	r3, #0
 8001106:	73fb      	strb	r3, [r7, #15]
 8001108:	e008      	b.n	800111c <mux_signal+0x20>
			//Cortamos el paso
			//HAL_GPIO_WritePin(mux_en_GPIO_Port,mux_en_Pin,0);
			osDelay(1);
 800110a:	2001      	movs	r0, #1
 800110c:	f002 faee 	bl	80036ec <osDelay>
			//Canal n
			GPIOB->ODR = canal;
 8001110:	4a04      	ldr	r2, [pc, #16]	; (8001124 <mux_signal+0x28>)
 8001112:	7bfb      	ldrb	r3, [r7, #15]
 8001114:	6153      	str	r3, [r2, #20]
		for(canal=0;canal<=0b11;canal++){
 8001116:	7bfb      	ldrb	r3, [r7, #15]
 8001118:	3301      	adds	r3, #1
 800111a:	73fb      	strb	r3, [r7, #15]
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	2b03      	cmp	r3, #3
 8001120:	d9f3      	bls.n	800110a <mux_signal+0xe>
 8001122:	e7ef      	b.n	8001104 <mux_signal+0x8>
 8001124:	40020400 	.word	0x40020400

08001128 <signal2_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_signal2_func */
void signal2_func(void *argument)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN signal2_func */
	uint8_t val = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	73fb      	strb	r3, [r7, #15]
	float t = 0.0;
 8001134:	f04f 0300 	mov.w	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	for(;;)
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,val);
 800113a:	4b37      	ldr	r3, [pc, #220]	; (8001218 <signal2_func+0xf0>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	7bfa      	ldrb	r2, [r7, #15]
 8001140:	635a      	str	r2, [r3, #52]	; 0x34

		if (t<=0.25) { //mayor a 1s
 8001142:	edd7 7a02 	vldr	s15, [r7, #8]
 8001146:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800114a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800114e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001152:	d810      	bhi.n	8001176 <signal2_func+0x4e>
			t += 0.0001;
 8001154:	68b8      	ldr	r0, [r7, #8]
 8001156:	f7ff fad1 	bl	80006fc <__aeabi_f2d>
 800115a:	a327      	add	r3, pc, #156	; (adr r3, 80011f8 <signal2_func+0xd0>)
 800115c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001160:	f7ff f96e 	bl	8000440 <__adddf3>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4610      	mov	r0, r2
 800116a:	4619      	mov	r1, r3
 800116c:	f7ff fb3e 	bl	80007ec <__aeabi_d2f>
 8001170:	4603      	mov	r3, r0
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	e002      	b.n	800117c <signal2_func+0x54>
		}else{
			t = 0.0;
 8001176:	f04f 0300 	mov.w	r3, #0
 800117a:	60bb      	str	r3, [r7, #8]
		}
		val = (uint8_t)(127.0*cosf(2*pi*4*t + pi)+127.0);
 800117c:	68b8      	ldr	r0, [r7, #8]
 800117e:	f7ff fabd 	bl	80006fc <__aeabi_f2d>
 8001182:	a31f      	add	r3, pc, #124	; (adr r3, 8001200 <signal2_func+0xd8>)
 8001184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001188:	f7ff f82a 	bl	80001e0 <__aeabi_dmul>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4610      	mov	r0, r2
 8001192:	4619      	mov	r1, r3
 8001194:	a31c      	add	r3, pc, #112	; (adr r3, 8001208 <signal2_func+0xe0>)
 8001196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119a:	f7ff f951 	bl	8000440 <__adddf3>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	4610      	mov	r0, r2
 80011a4:	4619      	mov	r1, r3
 80011a6:	f7ff fb21 	bl	80007ec <__aeabi_d2f>
 80011aa:	4603      	mov	r3, r0
 80011ac:	ee00 3a10 	vmov	s0, r3
 80011b0:	f004 ff4e 	bl	8006050 <cosf>
 80011b4:	ee10 3a10 	vmov	r3, s0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff fa9f 	bl	80006fc <__aeabi_f2d>
 80011be:	a314      	add	r3, pc, #80	; (adr r3, 8001210 <signal2_func+0xe8>)
 80011c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c4:	f7ff f80c 	bl	80001e0 <__aeabi_dmul>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4610      	mov	r0, r2
 80011ce:	4619      	mov	r1, r3
 80011d0:	a30f      	add	r3, pc, #60	; (adr r3, 8001210 <signal2_func+0xe8>)
 80011d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d6:	f7ff f933 	bl	8000440 <__adddf3>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	4610      	mov	r0, r2
 80011e0:	4619      	mov	r1, r3
 80011e2:	f7ff fae3 	bl	80007ac <__aeabi_d2uiz>
 80011e6:	4603      	mov	r3, r0
 80011e8:	73fb      	strb	r3, [r7, #15]
		osDelay(5);
 80011ea:	2005      	movs	r0, #5
 80011ec:	f002 fa7e 	bl	80036ec <osDelay>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,val);
 80011f0:	e7a3      	b.n	800113a <signal2_func+0x12>
 80011f2:	bf00      	nop
 80011f4:	f3af 8000 	nop.w
 80011f8:	eb1c432d 	.word	0xeb1c432d
 80011fc:	3f1a36e2 	.word	0x3f1a36e2
 8001200:	2e48e8a7 	.word	0x2e48e8a7
 8001204:	403921ff 	.word	0x403921ff
 8001208:	2e48e8a7 	.word	0x2e48e8a7
 800120c:	400921ff 	.word	0x400921ff
 8001210:	00000000 	.word	0x00000000
 8001214:	405fc000 	.word	0x405fc000
 8001218:	2000002c 	.word	0x2000002c
 800121c:	00000000 	.word	0x00000000

08001220 <signal3_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_signal3_func */
void signal3_func(void *argument)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN signal3_func */
	uint8_t val = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	73fb      	strb	r3, [r7, #15]
	float t = 0.0;
 800122c:	f04f 0300 	mov.w	r3, #0
 8001230:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	for(;;)
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,val);
 8001232:	4b37      	ldr	r3, [pc, #220]	; (8001310 <signal3_func+0xf0>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	7bfa      	ldrb	r2, [r7, #15]
 8001238:	63da      	str	r2, [r3, #60]	; 0x3c

		if (t<=1) { //mayor a 1s
 800123a:	edd7 7a02 	vldr	s15, [r7, #8]
 800123e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001242:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124a:	d810      	bhi.n	800126e <signal3_func+0x4e>
			t += 0.0001;
 800124c:	68b8      	ldr	r0, [r7, #8]
 800124e:	f7ff fa55 	bl	80006fc <__aeabi_f2d>
 8001252:	a327      	add	r3, pc, #156	; (adr r3, 80012f0 <signal3_func+0xd0>)
 8001254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001258:	f7ff f8f2 	bl	8000440 <__adddf3>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4610      	mov	r0, r2
 8001262:	4619      	mov	r1, r3
 8001264:	f7ff fac2 	bl	80007ec <__aeabi_d2f>
 8001268:	4603      	mov	r3, r0
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	e002      	b.n	8001274 <signal3_func+0x54>
		}else{
			t = 0.0;
 800126e:	f04f 0300 	mov.w	r3, #0
 8001272:	60bb      	str	r3, [r7, #8]
		}
		val = (uint8_t)(127.0*sinf(2*pi*1*t + pi)+127.0);
 8001274:	68b8      	ldr	r0, [r7, #8]
 8001276:	f7ff fa41 	bl	80006fc <__aeabi_f2d>
 800127a:	a31f      	add	r3, pc, #124	; (adr r3, 80012f8 <signal3_func+0xd8>)
 800127c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001280:	f7fe ffae 	bl	80001e0 <__aeabi_dmul>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4610      	mov	r0, r2
 800128a:	4619      	mov	r1, r3
 800128c:	a31c      	add	r3, pc, #112	; (adr r3, 8001300 <signal3_func+0xe0>)
 800128e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001292:	f7ff f8d5 	bl	8000440 <__adddf3>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4610      	mov	r0, r2
 800129c:	4619      	mov	r1, r3
 800129e:	f7ff faa5 	bl	80007ec <__aeabi_d2f>
 80012a2:	4603      	mov	r3, r0
 80012a4:	ee00 3a10 	vmov	s0, r3
 80012a8:	f004 ff16 	bl	80060d8 <sinf>
 80012ac:	ee10 3a10 	vmov	r3, s0
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff fa23 	bl	80006fc <__aeabi_f2d>
 80012b6:	a314      	add	r3, pc, #80	; (adr r3, 8001308 <signal3_func+0xe8>)
 80012b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012bc:	f7fe ff90 	bl	80001e0 <__aeabi_dmul>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4610      	mov	r0, r2
 80012c6:	4619      	mov	r1, r3
 80012c8:	a30f      	add	r3, pc, #60	; (adr r3, 8001308 <signal3_func+0xe8>)
 80012ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ce:	f7ff f8b7 	bl	8000440 <__adddf3>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	4610      	mov	r0, r2
 80012d8:	4619      	mov	r1, r3
 80012da:	f7ff fa67 	bl	80007ac <__aeabi_d2uiz>
 80012de:	4603      	mov	r3, r0
 80012e0:	73fb      	strb	r3, [r7, #15]
		osDelay(6);
 80012e2:	2006      	movs	r0, #6
 80012e4:	f002 fa02 	bl	80036ec <osDelay>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,val);
 80012e8:	e7a3      	b.n	8001232 <signal3_func+0x12>
 80012ea:	bf00      	nop
 80012ec:	f3af 8000 	nop.w
 80012f0:	eb1c432d 	.word	0xeb1c432d
 80012f4:	3f1a36e2 	.word	0x3f1a36e2
 80012f8:	2e48e8a7 	.word	0x2e48e8a7
 80012fc:	401921ff 	.word	0x401921ff
 8001300:	2e48e8a7 	.word	0x2e48e8a7
 8001304:	400921ff 	.word	0x400921ff
 8001308:	00000000 	.word	0x00000000
 800130c:	405fc000 	.word	0x405fc000
 8001310:	2000002c 	.word	0x2000002c

08001314 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a04      	ldr	r2, [pc, #16]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d101      	bne.n	800132a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001326:	f000 f9a1 	bl	800166c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40014800 	.word	0x40014800

08001338 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800133c:	b672      	cpsid	i
}
 800133e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001340:	e7fe      	b.n	8001340 <Error_Handler+0x8>
	...

08001344 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	4b12      	ldr	r3, [pc, #72]	; (8001398 <HAL_MspInit+0x54>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	4a11      	ldr	r2, [pc, #68]	; (8001398 <HAL_MspInit+0x54>)
 8001354:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001358:	6453      	str	r3, [r2, #68]	; 0x44
 800135a:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <HAL_MspInit+0x54>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	603b      	str	r3, [r7, #0]
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <HAL_MspInit+0x54>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <HAL_MspInit+0x54>)
 8001370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001374:	6413      	str	r3, [r2, #64]	; 0x40
 8001376:	4b08      	ldr	r3, [pc, #32]	; (8001398 <HAL_MspInit+0x54>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	210f      	movs	r1, #15
 8001386:	f06f 0001 	mvn.w	r0, #1
 800138a:	f000 fa47 	bl	800181c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800

0800139c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a12      	ldr	r2, [pc, #72]	; (80013f4 <HAL_TIM_Base_MspInit+0x58>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d11d      	bne.n	80013ea <HAL_TIM_Base_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <HAL_TIM_Base_MspInit+0x5c>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b6:	4a10      	ldr	r2, [pc, #64]	; (80013f8 <HAL_TIM_Base_MspInit+0x5c>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	6453      	str	r3, [r2, #68]	; 0x44
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <HAL_TIM_Base_MspInit+0x5c>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2105      	movs	r1, #5
 80013ce:	2019      	movs	r0, #25
 80013d0:	f000 fa24 	bl	800181c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80013d4:	2019      	movs	r0, #25
 80013d6:	f000 fa3d 	bl	8001854 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 15, 0);
 80013da:	2200      	movs	r2, #0
 80013dc:	210f      	movs	r1, #15
 80013de:	201a      	movs	r0, #26
 80013e0:	f000 fa1c 	bl	800181c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80013e4:	201a      	movs	r0, #26
 80013e6:	f000 fa35 	bl	8001854 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80013ea:	bf00      	nop
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40010000 	.word	0x40010000
 80013f8:	40023800 	.word	0x40023800

080013fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 030c 	add.w	r3, r7, #12
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a12      	ldr	r2, [pc, #72]	; (8001464 <HAL_TIM_MspPostInit+0x68>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d11e      	bne.n	800145c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <HAL_TIM_MspPostInit+0x6c>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a10      	ldr	r2, [pc, #64]	; (8001468 <HAL_TIM_MspPostInit+0x6c>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <HAL_TIM_MspPostInit+0x6c>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = signal_3_Pin|signal_2_Pin|signal_1_Pin|signal_0_Pin;
 800143a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800143e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001440:	2302      	movs	r3, #2
 8001442:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001448:	2300      	movs	r3, #0
 800144a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800144c:	2301      	movs	r3, #1
 800144e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001450:	f107 030c 	add.w	r3, r7, #12
 8001454:	4619      	mov	r1, r3
 8001456:	4805      	ldr	r0, [pc, #20]	; (800146c <HAL_TIM_MspPostInit+0x70>)
 8001458:	f000 fa0a 	bl	8001870 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800145c:	bf00      	nop
 800145e:	3720      	adds	r7, #32
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40010000 	.word	0x40010000
 8001468:	40023800 	.word	0x40023800
 800146c:	40020000 	.word	0x40020000

08001470 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08c      	sub	sp, #48	; 0x30
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001478:	2300      	movs	r3, #0
 800147a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800147c:	2300      	movs	r3, #0
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8001480:	2300      	movs	r3, #0
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	4b2e      	ldr	r3, [pc, #184]	; (8001540 <HAL_InitTick+0xd0>)
 8001486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001488:	4a2d      	ldr	r2, [pc, #180]	; (8001540 <HAL_InitTick+0xd0>)
 800148a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800148e:	6453      	str	r3, [r2, #68]	; 0x44
 8001490:	4b2b      	ldr	r3, [pc, #172]	; (8001540 <HAL_InitTick+0xd0>)
 8001492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001494:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800149c:	f107 020c 	add.w	r2, r7, #12
 80014a0:	f107 0310 	add.w	r3, r7, #16
 80014a4:	4611      	mov	r1, r2
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 ffc4 	bl	8002434 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80014ac:	f000 ffae 	bl	800240c <HAL_RCC_GetPCLK2Freq>
 80014b0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b4:	4a23      	ldr	r2, [pc, #140]	; (8001544 <HAL_InitTick+0xd4>)
 80014b6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ba:	0c9b      	lsrs	r3, r3, #18
 80014bc:	3b01      	subs	r3, #1
 80014be:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 80014c0:	4b21      	ldr	r3, [pc, #132]	; (8001548 <HAL_InitTick+0xd8>)
 80014c2:	4a22      	ldr	r2, [pc, #136]	; (800154c <HAL_InitTick+0xdc>)
 80014c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 80014c6:	4b20      	ldr	r3, [pc, #128]	; (8001548 <HAL_InitTick+0xd8>)
 80014c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014cc:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 80014ce:	4a1e      	ldr	r2, [pc, #120]	; (8001548 <HAL_InitTick+0xd8>)
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d2:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 80014d4:	4b1c      	ldr	r3, [pc, #112]	; (8001548 <HAL_InitTick+0xd8>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014da:	4b1b      	ldr	r3, [pc, #108]	; (8001548 <HAL_InitTick+0xd8>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e0:	4b19      	ldr	r3, [pc, #100]	; (8001548 <HAL_InitTick+0xd8>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 80014e6:	4818      	ldr	r0, [pc, #96]	; (8001548 <HAL_InitTick+0xd8>)
 80014e8:	f000 ffd6 	bl	8002498 <HAL_TIM_Base_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80014f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d11b      	bne.n	8001532 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 80014fa:	4813      	ldr	r0, [pc, #76]	; (8001548 <HAL_InitTick+0xd8>)
 80014fc:	f001 f81c 	bl	8002538 <HAL_TIM_Base_Start_IT>
 8001500:	4603      	mov	r3, r0
 8001502:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001506:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800150a:	2b00      	cmp	r3, #0
 800150c:	d111      	bne.n	8001532 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800150e:	201a      	movs	r0, #26
 8001510:	f000 f9a0 	bl	8001854 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b0f      	cmp	r3, #15
 8001518:	d808      	bhi.n	800152c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 800151a:	2200      	movs	r2, #0
 800151c:	6879      	ldr	r1, [r7, #4]
 800151e:	201a      	movs	r0, #26
 8001520:	f000 f97c 	bl	800181c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001524:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <HAL_InitTick+0xe0>)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6013      	str	r3, [r2, #0]
 800152a:	e002      	b.n	8001532 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001532:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001536:	4618      	mov	r0, r3
 8001538:	3730      	adds	r7, #48	; 0x30
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40023800 	.word	0x40023800
 8001544:	431bde83 	.word	0x431bde83
 8001548:	20000088 	.word	0x20000088
 800154c:	40014800 	.word	0x40014800
 8001550:	20000004 	.word	0x20000004

08001554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001558:	e7fe      	b.n	8001558 <NMI_Handler+0x4>

0800155a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800155e:	e7fe      	b.n	800155e <HardFault_Handler+0x4>

08001560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <MemManage_Handler+0x4>

08001566 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800156a:	e7fe      	b.n	800156a <BusFault_Handler+0x4>

0800156c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001570:	e7fe      	b.n	8001570 <UsageFault_Handler+0x4>

08001572 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001584:	4802      	ldr	r0, [pc, #8]	; (8001590 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001586:	f001 f943 	bl	8002810 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	2000002c 	.word	0x2000002c

08001594 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001598:	4803      	ldr	r0, [pc, #12]	; (80015a8 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800159a:	f001 f939 	bl	8002810 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800159e:	4803      	ldr	r0, [pc, #12]	; (80015ac <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80015a0:	f001 f936 	bl	8002810 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	2000002c 	.word	0x2000002c
 80015ac:	20000088 	.word	0x20000088

080015b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <SystemInit+0x20>)
 80015b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ba:	4a05      	ldr	r2, [pc, #20]	; (80015d0 <SystemInit+0x20>)
 80015bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800160c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015d8:	f7ff ffea 	bl	80015b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015dc:	480c      	ldr	r0, [pc, #48]	; (8001610 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015de:	490d      	ldr	r1, [pc, #52]	; (8001614 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015e0:	4a0d      	ldr	r2, [pc, #52]	; (8001618 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015e4:	e002      	b.n	80015ec <LoopCopyDataInit>

080015e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ea:	3304      	adds	r3, #4

080015ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f0:	d3f9      	bcc.n	80015e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015f2:	4a0a      	ldr	r2, [pc, #40]	; (800161c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015f4:	4c0a      	ldr	r4, [pc, #40]	; (8001620 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015f8:	e001      	b.n	80015fe <LoopFillZerobss>

080015fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015fc:	3204      	adds	r2, #4

080015fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001600:	d3fb      	bcc.n	80015fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001602:	f004 fcf3 	bl	8005fec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001606:	f7ff fabf 	bl	8000b88 <main>
  bx  lr    
 800160a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800160c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001610:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001614:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001618:	0800704c 	.word	0x0800704c
  ldr r2, =_sbss
 800161c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001620:	20004a24 	.word	0x20004a24

08001624 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001624:	e7fe      	b.n	8001624 <ADC_IRQHandler>
	...

08001628 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800162c:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <HAL_Init+0x40>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a0d      	ldr	r2, [pc, #52]	; (8001668 <HAL_Init+0x40>)
 8001632:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001636:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001638:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <HAL_Init+0x40>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a0a      	ldr	r2, [pc, #40]	; (8001668 <HAL_Init+0x40>)
 800163e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001642:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001644:	4b08      	ldr	r3, [pc, #32]	; (8001668 <HAL_Init+0x40>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a07      	ldr	r2, [pc, #28]	; (8001668 <HAL_Init+0x40>)
 800164a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800164e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001650:	2003      	movs	r0, #3
 8001652:	f000 f8d8 	bl	8001806 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001656:	200f      	movs	r0, #15
 8001658:	f7ff ff0a 	bl	8001470 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800165c:	f7ff fe72 	bl	8001344 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40023c00 	.word	0x40023c00

0800166c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001670:	4b06      	ldr	r3, [pc, #24]	; (800168c <HAL_IncTick+0x20>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	461a      	mov	r2, r3
 8001676:	4b06      	ldr	r3, [pc, #24]	; (8001690 <HAL_IncTick+0x24>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4413      	add	r3, r2
 800167c:	4a04      	ldr	r2, [pc, #16]	; (8001690 <HAL_IncTick+0x24>)
 800167e:	6013      	str	r3, [r2, #0]
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	20000008 	.word	0x20000008
 8001690:	200000d0 	.word	0x200000d0

08001694 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  return uwTick;
 8001698:	4b03      	ldr	r3, [pc, #12]	; (80016a8 <HAL_GetTick+0x14>)
 800169a:	681b      	ldr	r3, [r3, #0]
}
 800169c:	4618      	mov	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	200000d0 	.word	0x200000d0

080016ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016bc:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <__NVIC_SetPriorityGrouping+0x44>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016c8:	4013      	ands	r3, r2
 80016ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016de:	4a04      	ldr	r2, [pc, #16]	; (80016f0 <__NVIC_SetPriorityGrouping+0x44>)
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	60d3      	str	r3, [r2, #12]
}
 80016e4:	bf00      	nop
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f8:	4b04      	ldr	r3, [pc, #16]	; (800170c <__NVIC_GetPriorityGrouping+0x18>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	0a1b      	lsrs	r3, r3, #8
 80016fe:	f003 0307 	and.w	r3, r3, #7
}
 8001702:	4618      	mov	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800171a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171e:	2b00      	cmp	r3, #0
 8001720:	db0b      	blt.n	800173a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	f003 021f 	and.w	r2, r3, #31
 8001728:	4907      	ldr	r1, [pc, #28]	; (8001748 <__NVIC_EnableIRQ+0x38>)
 800172a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172e:	095b      	lsrs	r3, r3, #5
 8001730:	2001      	movs	r0, #1
 8001732:	fa00 f202 	lsl.w	r2, r0, r2
 8001736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	e000e100 	.word	0xe000e100

0800174c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	6039      	str	r1, [r7, #0]
 8001756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175c:	2b00      	cmp	r3, #0
 800175e:	db0a      	blt.n	8001776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	b2da      	uxtb	r2, r3
 8001764:	490c      	ldr	r1, [pc, #48]	; (8001798 <__NVIC_SetPriority+0x4c>)
 8001766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176a:	0112      	lsls	r2, r2, #4
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	440b      	add	r3, r1
 8001770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001774:	e00a      	b.n	800178c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	b2da      	uxtb	r2, r3
 800177a:	4908      	ldr	r1, [pc, #32]	; (800179c <__NVIC_SetPriority+0x50>)
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	3b04      	subs	r3, #4
 8001784:	0112      	lsls	r2, r2, #4
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	440b      	add	r3, r1
 800178a:	761a      	strb	r2, [r3, #24]
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	e000e100 	.word	0xe000e100
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b089      	sub	sp, #36	; 0x24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f1c3 0307 	rsb	r3, r3, #7
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	bf28      	it	cs
 80017be:	2304      	movcs	r3, #4
 80017c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3304      	adds	r3, #4
 80017c6:	2b06      	cmp	r3, #6
 80017c8:	d902      	bls.n	80017d0 <NVIC_EncodePriority+0x30>
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3b03      	subs	r3, #3
 80017ce:	e000      	b.n	80017d2 <NVIC_EncodePriority+0x32>
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d4:	f04f 32ff 	mov.w	r2, #4294967295
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43da      	mvns	r2, r3
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	401a      	ands	r2, r3
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e8:	f04f 31ff 	mov.w	r1, #4294967295
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	fa01 f303 	lsl.w	r3, r1, r3
 80017f2:	43d9      	mvns	r1, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f8:	4313      	orrs	r3, r2
         );
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3724      	adds	r7, #36	; 0x24
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff ff4c 	bl	80016ac <__NVIC_SetPriorityGrouping>
}
 8001814:	bf00      	nop
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
 8001828:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800182e:	f7ff ff61 	bl	80016f4 <__NVIC_GetPriorityGrouping>
 8001832:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	68b9      	ldr	r1, [r7, #8]
 8001838:	6978      	ldr	r0, [r7, #20]
 800183a:	f7ff ffb1 	bl	80017a0 <NVIC_EncodePriority>
 800183e:	4602      	mov	r2, r0
 8001840:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001844:	4611      	mov	r1, r2
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff ff80 	bl	800174c <__NVIC_SetPriority>
}
 800184c:	bf00      	nop
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800185e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff ff54 	bl	8001710 <__NVIC_EnableIRQ>
}
 8001868:	bf00      	nop
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001870:	b480      	push	{r7}
 8001872:	b089      	sub	sp, #36	; 0x24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800187e:	2300      	movs	r3, #0
 8001880:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001882:	2300      	movs	r3, #0
 8001884:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001886:	2300      	movs	r3, #0
 8001888:	61fb      	str	r3, [r7, #28]
 800188a:	e159      	b.n	8001b40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800188c:	2201      	movs	r2, #1
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	697a      	ldr	r2, [r7, #20]
 800189c:	4013      	ands	r3, r2
 800189e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	f040 8148 	bne.w	8001b3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f003 0303 	and.w	r3, r3, #3
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d005      	beq.n	80018c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d130      	bne.n	8001924 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	2203      	movs	r2, #3
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43db      	mvns	r3, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4013      	ands	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	68da      	ldr	r2, [r3, #12]
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018f8:	2201      	movs	r2, #1
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4013      	ands	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	091b      	lsrs	r3, r3, #4
 800190e:	f003 0201 	and.w	r2, r3, #1
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4313      	orrs	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 0303 	and.w	r3, r3, #3
 800192c:	2b03      	cmp	r3, #3
 800192e:	d017      	beq.n	8001960 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	2203      	movs	r2, #3
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4013      	ands	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 0303 	and.w	r3, r3, #3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d123      	bne.n	80019b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	08da      	lsrs	r2, r3, #3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3208      	adds	r2, #8
 8001974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001978:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	f003 0307 	and.w	r3, r3, #7
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	220f      	movs	r2, #15
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4013      	ands	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	691a      	ldr	r2, [r3, #16]
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	08da      	lsrs	r2, r3, #3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	3208      	adds	r2, #8
 80019ae:	69b9      	ldr	r1, [r7, #24]
 80019b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	2203      	movs	r2, #3
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4013      	ands	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 0203 	and.w	r2, r3, #3
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f000 80a2 	beq.w	8001b3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	4b57      	ldr	r3, [pc, #348]	; (8001b58 <HAL_GPIO_Init+0x2e8>)
 80019fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fe:	4a56      	ldr	r2, [pc, #344]	; (8001b58 <HAL_GPIO_Init+0x2e8>)
 8001a00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a04:	6453      	str	r3, [r2, #68]	; 0x44
 8001a06:	4b54      	ldr	r3, [pc, #336]	; (8001b58 <HAL_GPIO_Init+0x2e8>)
 8001a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a12:	4a52      	ldr	r2, [pc, #328]	; (8001b5c <HAL_GPIO_Init+0x2ec>)
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	089b      	lsrs	r3, r3, #2
 8001a18:	3302      	adds	r3, #2
 8001a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	f003 0303 	and.w	r3, r3, #3
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	220f      	movs	r2, #15
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4013      	ands	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a49      	ldr	r2, [pc, #292]	; (8001b60 <HAL_GPIO_Init+0x2f0>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d019      	beq.n	8001a72 <HAL_GPIO_Init+0x202>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a48      	ldr	r2, [pc, #288]	; (8001b64 <HAL_GPIO_Init+0x2f4>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d013      	beq.n	8001a6e <HAL_GPIO_Init+0x1fe>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a47      	ldr	r2, [pc, #284]	; (8001b68 <HAL_GPIO_Init+0x2f8>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d00d      	beq.n	8001a6a <HAL_GPIO_Init+0x1fa>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a46      	ldr	r2, [pc, #280]	; (8001b6c <HAL_GPIO_Init+0x2fc>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d007      	beq.n	8001a66 <HAL_GPIO_Init+0x1f6>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a45      	ldr	r2, [pc, #276]	; (8001b70 <HAL_GPIO_Init+0x300>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d101      	bne.n	8001a62 <HAL_GPIO_Init+0x1f2>
 8001a5e:	2304      	movs	r3, #4
 8001a60:	e008      	b.n	8001a74 <HAL_GPIO_Init+0x204>
 8001a62:	2307      	movs	r3, #7
 8001a64:	e006      	b.n	8001a74 <HAL_GPIO_Init+0x204>
 8001a66:	2303      	movs	r3, #3
 8001a68:	e004      	b.n	8001a74 <HAL_GPIO_Init+0x204>
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	e002      	b.n	8001a74 <HAL_GPIO_Init+0x204>
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e000      	b.n	8001a74 <HAL_GPIO_Init+0x204>
 8001a72:	2300      	movs	r3, #0
 8001a74:	69fa      	ldr	r2, [r7, #28]
 8001a76:	f002 0203 	and.w	r2, r2, #3
 8001a7a:	0092      	lsls	r2, r2, #2
 8001a7c:	4093      	lsls	r3, r2
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a84:	4935      	ldr	r1, [pc, #212]	; (8001b5c <HAL_GPIO_Init+0x2ec>)
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	089b      	lsrs	r3, r3, #2
 8001a8a:	3302      	adds	r3, #2
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a92:	4b38      	ldr	r3, [pc, #224]	; (8001b74 <HAL_GPIO_Init+0x304>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ab6:	4a2f      	ldr	r2, [pc, #188]	; (8001b74 <HAL_GPIO_Init+0x304>)
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001abc:	4b2d      	ldr	r3, [pc, #180]	; (8001b74 <HAL_GPIO_Init+0x304>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d003      	beq.n	8001ae0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ae0:	4a24      	ldr	r2, [pc, #144]	; (8001b74 <HAL_GPIO_Init+0x304>)
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ae6:	4b23      	ldr	r3, [pc, #140]	; (8001b74 <HAL_GPIO_Init+0x304>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	43db      	mvns	r3, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4013      	ands	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b0a:	4a1a      	ldr	r2, [pc, #104]	; (8001b74 <HAL_GPIO_Init+0x304>)
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b10:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <HAL_GPIO_Init+0x304>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d003      	beq.n	8001b34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b34:	4a0f      	ldr	r2, [pc, #60]	; (8001b74 <HAL_GPIO_Init+0x304>)
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	61fb      	str	r3, [r7, #28]
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	2b0f      	cmp	r3, #15
 8001b44:	f67f aea2 	bls.w	800188c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b48:	bf00      	nop
 8001b4a:	bf00      	nop
 8001b4c:	3724      	adds	r7, #36	; 0x24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	40013800 	.word	0x40013800
 8001b60:	40020000 	.word	0x40020000
 8001b64:	40020400 	.word	0x40020400
 8001b68:	40020800 	.word	0x40020800
 8001b6c:	40020c00 	.word	0x40020c00
 8001b70:	40021000 	.word	0x40021000
 8001b74:	40013c00 	.word	0x40013c00

08001b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	460b      	mov	r3, r1
 8001b82:	807b      	strh	r3, [r7, #2]
 8001b84:	4613      	mov	r3, r2
 8001b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b88:	787b      	ldrb	r3, [r7, #1]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b8e:	887a      	ldrh	r2, [r7, #2]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b94:	e003      	b.n	8001b9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b96:	887b      	ldrh	r3, [r7, #2]
 8001b98:	041a      	lsls	r2, r3, #16
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	619a      	str	r2, [r3, #24]
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
	...

08001bac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e267      	b.n	800208e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d075      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bca:	4b88      	ldr	r3, [pc, #544]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 030c 	and.w	r3, r3, #12
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	d00c      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bd6:	4b85      	ldr	r3, [pc, #532]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bde:	2b08      	cmp	r3, #8
 8001be0:	d112      	bne.n	8001c08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001be2:	4b82      	ldr	r3, [pc, #520]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bee:	d10b      	bne.n	8001c08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf0:	4b7e      	ldr	r3, [pc, #504]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d05b      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x108>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d157      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e242      	b.n	800208e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c10:	d106      	bne.n	8001c20 <HAL_RCC_OscConfig+0x74>
 8001c12:	4b76      	ldr	r3, [pc, #472]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a75      	ldr	r2, [pc, #468]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c1c:	6013      	str	r3, [r2, #0]
 8001c1e:	e01d      	b.n	8001c5c <HAL_RCC_OscConfig+0xb0>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c28:	d10c      	bne.n	8001c44 <HAL_RCC_OscConfig+0x98>
 8001c2a:	4b70      	ldr	r3, [pc, #448]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a6f      	ldr	r2, [pc, #444]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001c30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	4b6d      	ldr	r3, [pc, #436]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a6c      	ldr	r2, [pc, #432]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	e00b      	b.n	8001c5c <HAL_RCC_OscConfig+0xb0>
 8001c44:	4b69      	ldr	r3, [pc, #420]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a68      	ldr	r2, [pc, #416]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c4e:	6013      	str	r3, [r2, #0]
 8001c50:	4b66      	ldr	r3, [pc, #408]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a65      	ldr	r2, [pc, #404]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d013      	beq.n	8001c8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c64:	f7ff fd16 	bl	8001694 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c6c:	f7ff fd12 	bl	8001694 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b64      	cmp	r3, #100	; 0x64
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e207      	b.n	800208e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7e:	4b5b      	ldr	r3, [pc, #364]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0f0      	beq.n	8001c6c <HAL_RCC_OscConfig+0xc0>
 8001c8a:	e014      	b.n	8001cb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8c:	f7ff fd02 	bl	8001694 <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c94:	f7ff fcfe 	bl	8001694 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b64      	cmp	r3, #100	; 0x64
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e1f3      	b.n	800208e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ca6:	4b51      	ldr	r3, [pc, #324]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1f0      	bne.n	8001c94 <HAL_RCC_OscConfig+0xe8>
 8001cb2:	e000      	b.n	8001cb6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d063      	beq.n	8001d8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cc2:	4b4a      	ldr	r3, [pc, #296]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 030c 	and.w	r3, r3, #12
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d00b      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cce:	4b47      	ldr	r3, [pc, #284]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cd6:	2b08      	cmp	r3, #8
 8001cd8:	d11c      	bne.n	8001d14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cda:	4b44      	ldr	r3, [pc, #272]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d116      	bne.n	8001d14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ce6:	4b41      	ldr	r3, [pc, #260]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d005      	beq.n	8001cfe <HAL_RCC_OscConfig+0x152>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d001      	beq.n	8001cfe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e1c7      	b.n	800208e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cfe:	4b3b      	ldr	r3, [pc, #236]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	4937      	ldr	r1, [pc, #220]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d12:	e03a      	b.n	8001d8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d020      	beq.n	8001d5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d1c:	4b34      	ldr	r3, [pc, #208]	; (8001df0 <HAL_RCC_OscConfig+0x244>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d22:	f7ff fcb7 	bl	8001694 <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d28:	e008      	b.n	8001d3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d2a:	f7ff fcb3 	bl	8001694 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e1a8      	b.n	800208e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d3c:	4b2b      	ldr	r3, [pc, #172]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d0f0      	beq.n	8001d2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d48:	4b28      	ldr	r3, [pc, #160]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	4925      	ldr	r1, [pc, #148]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	600b      	str	r3, [r1, #0]
 8001d5c:	e015      	b.n	8001d8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d5e:	4b24      	ldr	r3, [pc, #144]	; (8001df0 <HAL_RCC_OscConfig+0x244>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d64:	f7ff fc96 	bl	8001694 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d6c:	f7ff fc92 	bl	8001694 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e187      	b.n	800208e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d7e:	4b1b      	ldr	r3, [pc, #108]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1f0      	bne.n	8001d6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d036      	beq.n	8001e04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d016      	beq.n	8001dcc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d9e:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <HAL_RCC_OscConfig+0x248>)
 8001da0:	2201      	movs	r2, #1
 8001da2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da4:	f7ff fc76 	bl	8001694 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dac:	f7ff fc72 	bl	8001694 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e167      	b.n	800208e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dbe:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <HAL_RCC_OscConfig+0x240>)
 8001dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0f0      	beq.n	8001dac <HAL_RCC_OscConfig+0x200>
 8001dca:	e01b      	b.n	8001e04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dcc:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <HAL_RCC_OscConfig+0x248>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd2:	f7ff fc5f 	bl	8001694 <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd8:	e00e      	b.n	8001df8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dda:	f7ff fc5b 	bl	8001694 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d907      	bls.n	8001df8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e150      	b.n	800208e <HAL_RCC_OscConfig+0x4e2>
 8001dec:	40023800 	.word	0x40023800
 8001df0:	42470000 	.word	0x42470000
 8001df4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df8:	4b88      	ldr	r3, [pc, #544]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8001dfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d1ea      	bne.n	8001dda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f000 8097 	beq.w	8001f40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e12:	2300      	movs	r3, #0
 8001e14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e16:	4b81      	ldr	r3, [pc, #516]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d10f      	bne.n	8001e42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	4b7d      	ldr	r3, [pc, #500]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	4a7c      	ldr	r2, [pc, #496]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8001e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e30:	6413      	str	r3, [r2, #64]	; 0x40
 8001e32:	4b7a      	ldr	r3, [pc, #488]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3a:	60bb      	str	r3, [r7, #8]
 8001e3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e42:	4b77      	ldr	r3, [pc, #476]	; (8002020 <HAL_RCC_OscConfig+0x474>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d118      	bne.n	8001e80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e4e:	4b74      	ldr	r3, [pc, #464]	; (8002020 <HAL_RCC_OscConfig+0x474>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a73      	ldr	r2, [pc, #460]	; (8002020 <HAL_RCC_OscConfig+0x474>)
 8001e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e5a:	f7ff fc1b 	bl	8001694 <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e62:	f7ff fc17 	bl	8001694 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e10c      	b.n	800208e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e74:	4b6a      	ldr	r3, [pc, #424]	; (8002020 <HAL_RCC_OscConfig+0x474>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d0f0      	beq.n	8001e62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d106      	bne.n	8001e96 <HAL_RCC_OscConfig+0x2ea>
 8001e88:	4b64      	ldr	r3, [pc, #400]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8001e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e8c:	4a63      	ldr	r2, [pc, #396]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8001e8e:	f043 0301 	orr.w	r3, r3, #1
 8001e92:	6713      	str	r3, [r2, #112]	; 0x70
 8001e94:	e01c      	b.n	8001ed0 <HAL_RCC_OscConfig+0x324>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	2b05      	cmp	r3, #5
 8001e9c:	d10c      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x30c>
 8001e9e:	4b5f      	ldr	r3, [pc, #380]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8001ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea2:	4a5e      	ldr	r2, [pc, #376]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8001ea4:	f043 0304 	orr.w	r3, r3, #4
 8001ea8:	6713      	str	r3, [r2, #112]	; 0x70
 8001eaa:	4b5c      	ldr	r3, [pc, #368]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8001eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eae:	4a5b      	ldr	r2, [pc, #364]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	6713      	str	r3, [r2, #112]	; 0x70
 8001eb6:	e00b      	b.n	8001ed0 <HAL_RCC_OscConfig+0x324>
 8001eb8:	4b58      	ldr	r3, [pc, #352]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8001eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ebc:	4a57      	ldr	r2, [pc, #348]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8001ebe:	f023 0301 	bic.w	r3, r3, #1
 8001ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ec4:	4b55      	ldr	r3, [pc, #340]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8001ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec8:	4a54      	ldr	r2, [pc, #336]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8001eca:	f023 0304 	bic.w	r3, r3, #4
 8001ece:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d015      	beq.n	8001f04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed8:	f7ff fbdc 	bl	8001694 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ede:	e00a      	b.n	8001ef6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ee0:	f7ff fbd8 	bl	8001694 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e0cb      	b.n	800208e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef6:	4b49      	ldr	r3, [pc, #292]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8001ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0ee      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x334>
 8001f02:	e014      	b.n	8001f2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f04:	f7ff fbc6 	bl	8001694 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f0a:	e00a      	b.n	8001f22 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f0c:	f7ff fbc2 	bl	8001694 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e0b5      	b.n	800208e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f22:	4b3e      	ldr	r3, [pc, #248]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8001f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1ee      	bne.n	8001f0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f2e:	7dfb      	ldrb	r3, [r7, #23]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d105      	bne.n	8001f40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f34:	4b39      	ldr	r3, [pc, #228]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	4a38      	ldr	r2, [pc, #224]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8001f3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f000 80a1 	beq.w	800208c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f4a:	4b34      	ldr	r3, [pc, #208]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 030c 	and.w	r3, r3, #12
 8001f52:	2b08      	cmp	r3, #8
 8001f54:	d05c      	beq.n	8002010 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d141      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f5e:	4b31      	ldr	r3, [pc, #196]	; (8002024 <HAL_RCC_OscConfig+0x478>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f64:	f7ff fb96 	bl	8001694 <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f6c:	f7ff fb92 	bl	8001694 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e087      	b.n	800208e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f7e:	4b27      	ldr	r3, [pc, #156]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1f0      	bne.n	8001f6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69da      	ldr	r2, [r3, #28]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	431a      	orrs	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f98:	019b      	lsls	r3, r3, #6
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa0:	085b      	lsrs	r3, r3, #1
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	041b      	lsls	r3, r3, #16
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fac:	061b      	lsls	r3, r3, #24
 8001fae:	491b      	ldr	r1, [pc, #108]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fb4:	4b1b      	ldr	r3, [pc, #108]	; (8002024 <HAL_RCC_OscConfig+0x478>)
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fba:	f7ff fb6b 	bl	8001694 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fc2:	f7ff fb67 	bl	8001694 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e05c      	b.n	800208e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fd4:	4b11      	ldr	r3, [pc, #68]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0f0      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x416>
 8001fe0:	e054      	b.n	800208c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe2:	4b10      	ldr	r3, [pc, #64]	; (8002024 <HAL_RCC_OscConfig+0x478>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe8:	f7ff fb54 	bl	8001694 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ff0:	f7ff fb50 	bl	8001694 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e045      	b.n	800208e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002002:	4b06      	ldr	r3, [pc, #24]	; (800201c <HAL_RCC_OscConfig+0x470>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1f0      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x444>
 800200e:	e03d      	b.n	800208c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d107      	bne.n	8002028 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e038      	b.n	800208e <HAL_RCC_OscConfig+0x4e2>
 800201c:	40023800 	.word	0x40023800
 8002020:	40007000 	.word	0x40007000
 8002024:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002028:	4b1b      	ldr	r3, [pc, #108]	; (8002098 <HAL_RCC_OscConfig+0x4ec>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d028      	beq.n	8002088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002040:	429a      	cmp	r2, r3
 8002042:	d121      	bne.n	8002088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800204e:	429a      	cmp	r2, r3
 8002050:	d11a      	bne.n	8002088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002058:	4013      	ands	r3, r2
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800205e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002060:	4293      	cmp	r3, r2
 8002062:	d111      	bne.n	8002088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206e:	085b      	lsrs	r3, r3, #1
 8002070:	3b01      	subs	r3, #1
 8002072:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002074:	429a      	cmp	r2, r3
 8002076:	d107      	bne.n	8002088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002082:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002084:	429a      	cmp	r2, r3
 8002086:	d001      	beq.n	800208c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e000      	b.n	800208e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40023800 	.word	0x40023800

0800209c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e0cc      	b.n	800224a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020b0:	4b68      	ldr	r3, [pc, #416]	; (8002254 <HAL_RCC_ClockConfig+0x1b8>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0307 	and.w	r3, r3, #7
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d90c      	bls.n	80020d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020be:	4b65      	ldr	r3, [pc, #404]	; (8002254 <HAL_RCC_ClockConfig+0x1b8>)
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020c6:	4b63      	ldr	r3, [pc, #396]	; (8002254 <HAL_RCC_ClockConfig+0x1b8>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d001      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e0b8      	b.n	800224a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d020      	beq.n	8002126 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d005      	beq.n	80020fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020f0:	4b59      	ldr	r3, [pc, #356]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	4a58      	ldr	r2, [pc, #352]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 80020f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0308 	and.w	r3, r3, #8
 8002104:	2b00      	cmp	r3, #0
 8002106:	d005      	beq.n	8002114 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002108:	4b53      	ldr	r3, [pc, #332]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	4a52      	ldr	r2, [pc, #328]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 800210e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002112:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002114:	4b50      	ldr	r3, [pc, #320]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	494d      	ldr	r1, [pc, #308]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 8002122:	4313      	orrs	r3, r2
 8002124:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	d044      	beq.n	80021bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d107      	bne.n	800214a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213a:	4b47      	ldr	r3, [pc, #284]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d119      	bne.n	800217a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e07f      	b.n	800224a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b02      	cmp	r3, #2
 8002150:	d003      	beq.n	800215a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002156:	2b03      	cmp	r3, #3
 8002158:	d107      	bne.n	800216a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800215a:	4b3f      	ldr	r3, [pc, #252]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d109      	bne.n	800217a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e06f      	b.n	800224a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216a:	4b3b      	ldr	r3, [pc, #236]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e067      	b.n	800224a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800217a:	4b37      	ldr	r3, [pc, #220]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f023 0203 	bic.w	r2, r3, #3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	4934      	ldr	r1, [pc, #208]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 8002188:	4313      	orrs	r3, r2
 800218a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800218c:	f7ff fa82 	bl	8001694 <HAL_GetTick>
 8002190:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002192:	e00a      	b.n	80021aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002194:	f7ff fa7e 	bl	8001694 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e04f      	b.n	800224a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021aa:	4b2b      	ldr	r3, [pc, #172]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 020c 	and.w	r2, r3, #12
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d1eb      	bne.n	8002194 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021bc:	4b25      	ldr	r3, [pc, #148]	; (8002254 <HAL_RCC_ClockConfig+0x1b8>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0307 	and.w	r3, r3, #7
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d20c      	bcs.n	80021e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ca:	4b22      	ldr	r3, [pc, #136]	; (8002254 <HAL_RCC_ClockConfig+0x1b8>)
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d2:	4b20      	ldr	r3, [pc, #128]	; (8002254 <HAL_RCC_ClockConfig+0x1b8>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d001      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e032      	b.n	800224a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d008      	beq.n	8002202 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021f0:	4b19      	ldr	r3, [pc, #100]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	4916      	ldr	r1, [pc, #88]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0308 	and.w	r3, r3, #8
 800220a:	2b00      	cmp	r3, #0
 800220c:	d009      	beq.n	8002222 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800220e:	4b12      	ldr	r3, [pc, #72]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	490e      	ldr	r1, [pc, #56]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 800221e:	4313      	orrs	r3, r2
 8002220:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002222:	f000 f821 	bl	8002268 <HAL_RCC_GetSysClockFreq>
 8002226:	4602      	mov	r2, r0
 8002228:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <HAL_RCC_ClockConfig+0x1bc>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	091b      	lsrs	r3, r3, #4
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	490a      	ldr	r1, [pc, #40]	; (800225c <HAL_RCC_ClockConfig+0x1c0>)
 8002234:	5ccb      	ldrb	r3, [r1, r3]
 8002236:	fa22 f303 	lsr.w	r3, r2, r3
 800223a:	4a09      	ldr	r2, [pc, #36]	; (8002260 <HAL_RCC_ClockConfig+0x1c4>)
 800223c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800223e:	4b09      	ldr	r3, [pc, #36]	; (8002264 <HAL_RCC_ClockConfig+0x1c8>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff f914 	bl	8001470 <HAL_InitTick>

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40023c00 	.word	0x40023c00
 8002258:	40023800 	.word	0x40023800
 800225c:	08006c54 	.word	0x08006c54
 8002260:	20000000 	.word	0x20000000
 8002264:	20000004 	.word	0x20000004

08002268 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800226c:	b090      	sub	sp, #64	; 0x40
 800226e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002270:	2300      	movs	r3, #0
 8002272:	637b      	str	r3, [r7, #52]	; 0x34
 8002274:	2300      	movs	r3, #0
 8002276:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002278:	2300      	movs	r3, #0
 800227a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800227c:	2300      	movs	r3, #0
 800227e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002280:	4b59      	ldr	r3, [pc, #356]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 030c 	and.w	r3, r3, #12
 8002288:	2b08      	cmp	r3, #8
 800228a:	d00d      	beq.n	80022a8 <HAL_RCC_GetSysClockFreq+0x40>
 800228c:	2b08      	cmp	r3, #8
 800228e:	f200 80a1 	bhi.w	80023d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002292:	2b00      	cmp	r3, #0
 8002294:	d002      	beq.n	800229c <HAL_RCC_GetSysClockFreq+0x34>
 8002296:	2b04      	cmp	r3, #4
 8002298:	d003      	beq.n	80022a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800229a:	e09b      	b.n	80023d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800229c:	4b53      	ldr	r3, [pc, #332]	; (80023ec <HAL_RCC_GetSysClockFreq+0x184>)
 800229e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80022a0:	e09b      	b.n	80023da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022a2:	4b53      	ldr	r3, [pc, #332]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80022a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80022a6:	e098      	b.n	80023da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022a8:	4b4f      	ldr	r3, [pc, #316]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022b0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022b2:	4b4d      	ldr	r3, [pc, #308]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d028      	beq.n	8002310 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022be:	4b4a      	ldr	r3, [pc, #296]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	099b      	lsrs	r3, r3, #6
 80022c4:	2200      	movs	r2, #0
 80022c6:	623b      	str	r3, [r7, #32]
 80022c8:	627a      	str	r2, [r7, #36]	; 0x24
 80022ca:	6a3b      	ldr	r3, [r7, #32]
 80022cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80022d0:	2100      	movs	r1, #0
 80022d2:	4b47      	ldr	r3, [pc, #284]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80022d4:	fb03 f201 	mul.w	r2, r3, r1
 80022d8:	2300      	movs	r3, #0
 80022da:	fb00 f303 	mul.w	r3, r0, r3
 80022de:	4413      	add	r3, r2
 80022e0:	4a43      	ldr	r2, [pc, #268]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80022e2:	fba0 1202 	umull	r1, r2, r0, r2
 80022e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022e8:	460a      	mov	r2, r1
 80022ea:	62ba      	str	r2, [r7, #40]	; 0x28
 80022ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022ee:	4413      	add	r3, r2
 80022f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022f4:	2200      	movs	r2, #0
 80022f6:	61bb      	str	r3, [r7, #24]
 80022f8:	61fa      	str	r2, [r7, #28]
 80022fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002302:	f7fe fac3 	bl	800088c <__aeabi_uldivmod>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	4613      	mov	r3, r2
 800230c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800230e:	e053      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002310:	4b35      	ldr	r3, [pc, #212]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	099b      	lsrs	r3, r3, #6
 8002316:	2200      	movs	r2, #0
 8002318:	613b      	str	r3, [r7, #16]
 800231a:	617a      	str	r2, [r7, #20]
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002322:	f04f 0b00 	mov.w	fp, #0
 8002326:	4652      	mov	r2, sl
 8002328:	465b      	mov	r3, fp
 800232a:	f04f 0000 	mov.w	r0, #0
 800232e:	f04f 0100 	mov.w	r1, #0
 8002332:	0159      	lsls	r1, r3, #5
 8002334:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002338:	0150      	lsls	r0, r2, #5
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	ebb2 080a 	subs.w	r8, r2, sl
 8002342:	eb63 090b 	sbc.w	r9, r3, fp
 8002346:	f04f 0200 	mov.w	r2, #0
 800234a:	f04f 0300 	mov.w	r3, #0
 800234e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002352:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002356:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800235a:	ebb2 0408 	subs.w	r4, r2, r8
 800235e:	eb63 0509 	sbc.w	r5, r3, r9
 8002362:	f04f 0200 	mov.w	r2, #0
 8002366:	f04f 0300 	mov.w	r3, #0
 800236a:	00eb      	lsls	r3, r5, #3
 800236c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002370:	00e2      	lsls	r2, r4, #3
 8002372:	4614      	mov	r4, r2
 8002374:	461d      	mov	r5, r3
 8002376:	eb14 030a 	adds.w	r3, r4, sl
 800237a:	603b      	str	r3, [r7, #0]
 800237c:	eb45 030b 	adc.w	r3, r5, fp
 8002380:	607b      	str	r3, [r7, #4]
 8002382:	f04f 0200 	mov.w	r2, #0
 8002386:	f04f 0300 	mov.w	r3, #0
 800238a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800238e:	4629      	mov	r1, r5
 8002390:	028b      	lsls	r3, r1, #10
 8002392:	4621      	mov	r1, r4
 8002394:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002398:	4621      	mov	r1, r4
 800239a:	028a      	lsls	r2, r1, #10
 800239c:	4610      	mov	r0, r2
 800239e:	4619      	mov	r1, r3
 80023a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023a2:	2200      	movs	r2, #0
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	60fa      	str	r2, [r7, #12]
 80023a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023ac:	f7fe fa6e 	bl	800088c <__aeabi_uldivmod>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	4613      	mov	r3, r2
 80023b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023b8:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	0c1b      	lsrs	r3, r3, #16
 80023be:	f003 0303 	and.w	r3, r3, #3
 80023c2:	3301      	adds	r3, #1
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80023c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80023d2:	e002      	b.n	80023da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023d4:	4b05      	ldr	r3, [pc, #20]	; (80023ec <HAL_RCC_GetSysClockFreq+0x184>)
 80023d6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80023d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3740      	adds	r7, #64	; 0x40
 80023e0:	46bd      	mov	sp, r7
 80023e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023e6:	bf00      	nop
 80023e8:	40023800 	.word	0x40023800
 80023ec:	00f42400 	.word	0x00f42400
 80023f0:	017d7840 	.word	0x017d7840

080023f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023f8:	4b03      	ldr	r3, [pc, #12]	; (8002408 <HAL_RCC_GetHCLKFreq+0x14>)
 80023fa:	681b      	ldr	r3, [r3, #0]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	20000000 	.word	0x20000000

0800240c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002410:	f7ff fff0 	bl	80023f4 <HAL_RCC_GetHCLKFreq>
 8002414:	4602      	mov	r2, r0
 8002416:	4b05      	ldr	r3, [pc, #20]	; (800242c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	0b5b      	lsrs	r3, r3, #13
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	4903      	ldr	r1, [pc, #12]	; (8002430 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002422:	5ccb      	ldrb	r3, [r1, r3]
 8002424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002428:	4618      	mov	r0, r3
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40023800 	.word	0x40023800
 8002430:	08006c64 	.word	0x08006c64

08002434 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	220f      	movs	r2, #15
 8002442:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002444:	4b12      	ldr	r3, [pc, #72]	; (8002490 <HAL_RCC_GetClockConfig+0x5c>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f003 0203 	and.w	r2, r3, #3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002450:	4b0f      	ldr	r3, [pc, #60]	; (8002490 <HAL_RCC_GetClockConfig+0x5c>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800245c:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <HAL_RCC_GetClockConfig+0x5c>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002468:	4b09      	ldr	r3, [pc, #36]	; (8002490 <HAL_RCC_GetClockConfig+0x5c>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	08db      	lsrs	r3, r3, #3
 800246e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002476:	4b07      	ldr	r3, [pc, #28]	; (8002494 <HAL_RCC_GetClockConfig+0x60>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0207 	and.w	r2, r3, #7
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	601a      	str	r2, [r3, #0]
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	40023800 	.word	0x40023800
 8002494:	40023c00 	.word	0x40023c00

08002498 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e041      	b.n	800252e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d106      	bne.n	80024c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7fe ff6c 	bl	800139c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2202      	movs	r2, #2
 80024c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3304      	adds	r3, #4
 80024d4:	4619      	mov	r1, r3
 80024d6:	4610      	mov	r0, r2
 80024d8:	f000 fc3c 	bl	8002d54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b01      	cmp	r3, #1
 800254a:	d001      	beq.n	8002550 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e044      	b.n	80025da <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2202      	movs	r2, #2
 8002554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68da      	ldr	r2, [r3, #12]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0201 	orr.w	r2, r2, #1
 8002566:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a1e      	ldr	r2, [pc, #120]	; (80025e8 <HAL_TIM_Base_Start_IT+0xb0>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d018      	beq.n	80025a4 <HAL_TIM_Base_Start_IT+0x6c>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800257a:	d013      	beq.n	80025a4 <HAL_TIM_Base_Start_IT+0x6c>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a1a      	ldr	r2, [pc, #104]	; (80025ec <HAL_TIM_Base_Start_IT+0xb4>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d00e      	beq.n	80025a4 <HAL_TIM_Base_Start_IT+0x6c>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a19      	ldr	r2, [pc, #100]	; (80025f0 <HAL_TIM_Base_Start_IT+0xb8>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d009      	beq.n	80025a4 <HAL_TIM_Base_Start_IT+0x6c>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a17      	ldr	r2, [pc, #92]	; (80025f4 <HAL_TIM_Base_Start_IT+0xbc>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d004      	beq.n	80025a4 <HAL_TIM_Base_Start_IT+0x6c>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a16      	ldr	r2, [pc, #88]	; (80025f8 <HAL_TIM_Base_Start_IT+0xc0>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d111      	bne.n	80025c8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2b06      	cmp	r3, #6
 80025b4:	d010      	beq.n	80025d8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f042 0201 	orr.w	r2, r2, #1
 80025c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025c6:	e007      	b.n	80025d8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 0201 	orr.w	r2, r2, #1
 80025d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3714      	adds	r7, #20
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	40010000 	.word	0x40010000
 80025ec:	40000400 	.word	0x40000400
 80025f0:	40000800 	.word	0x40000800
 80025f4:	40000c00 	.word	0x40000c00
 80025f8:	40014000 	.word	0x40014000

080025fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e041      	b.n	8002692 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d106      	bne.n	8002628 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f839 	bl	800269a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2202      	movs	r2, #2
 800262c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3304      	adds	r3, #4
 8002638:	4619      	mov	r1, r3
 800263a:	4610      	mov	r0, r2
 800263c:	f000 fb8a 	bl	8002d54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
	...

080026b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d109      	bne.n	80026d4 <HAL_TIM_PWM_Start+0x24>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	bf14      	ite	ne
 80026cc:	2301      	movne	r3, #1
 80026ce:	2300      	moveq	r3, #0
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	e022      	b.n	800271a <HAL_TIM_PWM_Start+0x6a>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d109      	bne.n	80026ee <HAL_TIM_PWM_Start+0x3e>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	bf14      	ite	ne
 80026e6:	2301      	movne	r3, #1
 80026e8:	2300      	moveq	r3, #0
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	e015      	b.n	800271a <HAL_TIM_PWM_Start+0x6a>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2b08      	cmp	r3, #8
 80026f2:	d109      	bne.n	8002708 <HAL_TIM_PWM_Start+0x58>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	bf14      	ite	ne
 8002700:	2301      	movne	r3, #1
 8002702:	2300      	moveq	r3, #0
 8002704:	b2db      	uxtb	r3, r3
 8002706:	e008      	b.n	800271a <HAL_TIM_PWM_Start+0x6a>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b01      	cmp	r3, #1
 8002712:	bf14      	ite	ne
 8002714:	2301      	movne	r3, #1
 8002716:	2300      	moveq	r3, #0
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e068      	b.n	80027f4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d104      	bne.n	8002732 <HAL_TIM_PWM_Start+0x82>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2202      	movs	r2, #2
 800272c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002730:	e013      	b.n	800275a <HAL_TIM_PWM_Start+0xaa>
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	2b04      	cmp	r3, #4
 8002736:	d104      	bne.n	8002742 <HAL_TIM_PWM_Start+0x92>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2202      	movs	r2, #2
 800273c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002740:	e00b      	b.n	800275a <HAL_TIM_PWM_Start+0xaa>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	2b08      	cmp	r3, #8
 8002746:	d104      	bne.n	8002752 <HAL_TIM_PWM_Start+0xa2>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2202      	movs	r2, #2
 800274c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002750:	e003      	b.n	800275a <HAL_TIM_PWM_Start+0xaa>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2202      	movs	r2, #2
 8002756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2201      	movs	r2, #1
 8002760:	6839      	ldr	r1, [r7, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f000 fda8 	bl	80032b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a23      	ldr	r2, [pc, #140]	; (80027fc <HAL_TIM_PWM_Start+0x14c>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d107      	bne.n	8002782 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002780:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a1d      	ldr	r2, [pc, #116]	; (80027fc <HAL_TIM_PWM_Start+0x14c>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d018      	beq.n	80027be <HAL_TIM_PWM_Start+0x10e>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002794:	d013      	beq.n	80027be <HAL_TIM_PWM_Start+0x10e>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a19      	ldr	r2, [pc, #100]	; (8002800 <HAL_TIM_PWM_Start+0x150>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d00e      	beq.n	80027be <HAL_TIM_PWM_Start+0x10e>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a17      	ldr	r2, [pc, #92]	; (8002804 <HAL_TIM_PWM_Start+0x154>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d009      	beq.n	80027be <HAL_TIM_PWM_Start+0x10e>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a16      	ldr	r2, [pc, #88]	; (8002808 <HAL_TIM_PWM_Start+0x158>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d004      	beq.n	80027be <HAL_TIM_PWM_Start+0x10e>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a14      	ldr	r2, [pc, #80]	; (800280c <HAL_TIM_PWM_Start+0x15c>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d111      	bne.n	80027e2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2b06      	cmp	r3, #6
 80027ce:	d010      	beq.n	80027f2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 0201 	orr.w	r2, r2, #1
 80027de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027e0:	e007      	b.n	80027f2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f042 0201 	orr.w	r2, r2, #1
 80027f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40010000 	.word	0x40010000
 8002800:	40000400 	.word	0x40000400
 8002804:	40000800 	.word	0x40000800
 8002808:	40000c00 	.word	0x40000c00
 800280c:	40014000 	.word	0x40014000

08002810 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d020      	beq.n	8002874 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d01b      	beq.n	8002874 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f06f 0202 	mvn.w	r2, #2
 8002844:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	f003 0303 	and.w	r3, r3, #3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 fa5b 	bl	8002d16 <HAL_TIM_IC_CaptureCallback>
 8002860:	e005      	b.n	800286e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 fa4d 	bl	8002d02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 fa5e 	bl	8002d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	f003 0304 	and.w	r3, r3, #4
 800287a:	2b00      	cmp	r3, #0
 800287c:	d020      	beq.n	80028c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b00      	cmp	r3, #0
 8002886:	d01b      	beq.n	80028c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f06f 0204 	mvn.w	r2, #4
 8002890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2202      	movs	r2, #2
 8002896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 fa35 	bl	8002d16 <HAL_TIM_IC_CaptureCallback>
 80028ac:	e005      	b.n	80028ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 fa27 	bl	8002d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 fa38 	bl	8002d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	f003 0308 	and.w	r3, r3, #8
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d020      	beq.n	800290c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f003 0308 	and.w	r3, r3, #8
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d01b      	beq.n	800290c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f06f 0208 	mvn.w	r2, #8
 80028dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2204      	movs	r2, #4
 80028e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	f003 0303 	and.w	r3, r3, #3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 fa0f 	bl	8002d16 <HAL_TIM_IC_CaptureCallback>
 80028f8:	e005      	b.n	8002906 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 fa01 	bl	8002d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 fa12 	bl	8002d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	f003 0310 	and.w	r3, r3, #16
 8002912:	2b00      	cmp	r3, #0
 8002914:	d020      	beq.n	8002958 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f003 0310 	and.w	r3, r3, #16
 800291c:	2b00      	cmp	r3, #0
 800291e:	d01b      	beq.n	8002958 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f06f 0210 	mvn.w	r2, #16
 8002928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2208      	movs	r2, #8
 800292e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 f9e9 	bl	8002d16 <HAL_TIM_IC_CaptureCallback>
 8002944:	e005      	b.n	8002952 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f9db 	bl	8002d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 f9ec 	bl	8002d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00c      	beq.n	800297c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	2b00      	cmp	r3, #0
 800296a:	d007      	beq.n	800297c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f06f 0201 	mvn.w	r2, #1
 8002974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7fe fccc 	bl	8001314 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00c      	beq.n	80029a0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800298c:	2b00      	cmp	r3, #0
 800298e:	d007      	beq.n	80029a0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 fd7c 	bl	8003498 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00c      	beq.n	80029c4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d007      	beq.n	80029c4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f9bd 	bl	8002d3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	f003 0320 	and.w	r3, r3, #32
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00c      	beq.n	80029e8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f003 0320 	and.w	r3, r3, #32
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d007      	beq.n	80029e8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f06f 0220 	mvn.w	r2, #32
 80029e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 fd4e 	bl	8003484 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029e8:	bf00      	nop
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029fc:	2300      	movs	r3, #0
 80029fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d101      	bne.n	8002a0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	e0ae      	b.n	8002b6c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2b0c      	cmp	r3, #12
 8002a1a:	f200 809f 	bhi.w	8002b5c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002a1e:	a201      	add	r2, pc, #4	; (adr r2, 8002a24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a24:	08002a59 	.word	0x08002a59
 8002a28:	08002b5d 	.word	0x08002b5d
 8002a2c:	08002b5d 	.word	0x08002b5d
 8002a30:	08002b5d 	.word	0x08002b5d
 8002a34:	08002a99 	.word	0x08002a99
 8002a38:	08002b5d 	.word	0x08002b5d
 8002a3c:	08002b5d 	.word	0x08002b5d
 8002a40:	08002b5d 	.word	0x08002b5d
 8002a44:	08002adb 	.word	0x08002adb
 8002a48:	08002b5d 	.word	0x08002b5d
 8002a4c:	08002b5d 	.word	0x08002b5d
 8002a50:	08002b5d 	.word	0x08002b5d
 8002a54:	08002b1b 	.word	0x08002b1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68b9      	ldr	r1, [r7, #8]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f000 fa04 	bl	8002e6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	699a      	ldr	r2, [r3, #24]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f042 0208 	orr.w	r2, r2, #8
 8002a72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	699a      	ldr	r2, [r3, #24]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 0204 	bic.w	r2, r2, #4
 8002a82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6999      	ldr	r1, [r3, #24]
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	691a      	ldr	r2, [r3, #16]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	619a      	str	r2, [r3, #24]
      break;
 8002a96:	e064      	b.n	8002b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68b9      	ldr	r1, [r7, #8]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 fa4a 	bl	8002f38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	699a      	ldr	r2, [r3, #24]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ab2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	699a      	ldr	r2, [r3, #24]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ac2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6999      	ldr	r1, [r3, #24]
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	021a      	lsls	r2, r3, #8
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	619a      	str	r2, [r3, #24]
      break;
 8002ad8:	e043      	b.n	8002b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68b9      	ldr	r1, [r7, #8]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f000 fa95 	bl	8003010 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	69da      	ldr	r2, [r3, #28]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f042 0208 	orr.w	r2, r2, #8
 8002af4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	69da      	ldr	r2, [r3, #28]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 0204 	bic.w	r2, r2, #4
 8002b04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	69d9      	ldr	r1, [r3, #28]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	691a      	ldr	r2, [r3, #16]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	61da      	str	r2, [r3, #28]
      break;
 8002b18:	e023      	b.n	8002b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68b9      	ldr	r1, [r7, #8]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 fadf 	bl	80030e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	69da      	ldr	r2, [r3, #28]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	69da      	ldr	r2, [r3, #28]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	69d9      	ldr	r1, [r3, #28]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	021a      	lsls	r2, r3, #8
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	430a      	orrs	r2, r1
 8002b58:	61da      	str	r2, [r3, #28]
      break;
 8002b5a:	e002      	b.n	8002b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	75fb      	strb	r3, [r7, #23]
      break;
 8002b60:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d101      	bne.n	8002b90 <HAL_TIM_ConfigClockSource+0x1c>
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	e0b4      	b.n	8002cfa <HAL_TIM_ConfigClockSource+0x186>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bc8:	d03e      	beq.n	8002c48 <HAL_TIM_ConfigClockSource+0xd4>
 8002bca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bce:	f200 8087 	bhi.w	8002ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8002bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bd6:	f000 8086 	beq.w	8002ce6 <HAL_TIM_ConfigClockSource+0x172>
 8002bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bde:	d87f      	bhi.n	8002ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8002be0:	2b70      	cmp	r3, #112	; 0x70
 8002be2:	d01a      	beq.n	8002c1a <HAL_TIM_ConfigClockSource+0xa6>
 8002be4:	2b70      	cmp	r3, #112	; 0x70
 8002be6:	d87b      	bhi.n	8002ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8002be8:	2b60      	cmp	r3, #96	; 0x60
 8002bea:	d050      	beq.n	8002c8e <HAL_TIM_ConfigClockSource+0x11a>
 8002bec:	2b60      	cmp	r3, #96	; 0x60
 8002bee:	d877      	bhi.n	8002ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8002bf0:	2b50      	cmp	r3, #80	; 0x50
 8002bf2:	d03c      	beq.n	8002c6e <HAL_TIM_ConfigClockSource+0xfa>
 8002bf4:	2b50      	cmp	r3, #80	; 0x50
 8002bf6:	d873      	bhi.n	8002ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8002bf8:	2b40      	cmp	r3, #64	; 0x40
 8002bfa:	d058      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0x13a>
 8002bfc:	2b40      	cmp	r3, #64	; 0x40
 8002bfe:	d86f      	bhi.n	8002ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8002c00:	2b30      	cmp	r3, #48	; 0x30
 8002c02:	d064      	beq.n	8002cce <HAL_TIM_ConfigClockSource+0x15a>
 8002c04:	2b30      	cmp	r3, #48	; 0x30
 8002c06:	d86b      	bhi.n	8002ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8002c08:	2b20      	cmp	r3, #32
 8002c0a:	d060      	beq.n	8002cce <HAL_TIM_ConfigClockSource+0x15a>
 8002c0c:	2b20      	cmp	r3, #32
 8002c0e:	d867      	bhi.n	8002ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d05c      	beq.n	8002cce <HAL_TIM_ConfigClockSource+0x15a>
 8002c14:	2b10      	cmp	r3, #16
 8002c16:	d05a      	beq.n	8002cce <HAL_TIM_ConfigClockSource+0x15a>
 8002c18:	e062      	b.n	8002ce0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c2a:	f000 fb25 	bl	8003278 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	609a      	str	r2, [r3, #8]
      break;
 8002c46:	e04f      	b.n	8002ce8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c58:	f000 fb0e 	bl	8003278 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689a      	ldr	r2, [r3, #8]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c6a:	609a      	str	r2, [r3, #8]
      break;
 8002c6c:	e03c      	b.n	8002ce8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	f000 fa82 	bl	8003184 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2150      	movs	r1, #80	; 0x50
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 fadb 	bl	8003242 <TIM_ITRx_SetConfig>
      break;
 8002c8c:	e02c      	b.n	8002ce8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	f000 faa1 	bl	80031e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2160      	movs	r1, #96	; 0x60
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f000 facb 	bl	8003242 <TIM_ITRx_SetConfig>
      break;
 8002cac:	e01c      	b.n	8002ce8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cba:	461a      	mov	r2, r3
 8002cbc:	f000 fa62 	bl	8003184 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2140      	movs	r1, #64	; 0x40
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 fabb 	bl	8003242 <TIM_ITRx_SetConfig>
      break;
 8002ccc:	e00c      	b.n	8002ce8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4610      	mov	r0, r2
 8002cda:	f000 fab2 	bl	8003242 <TIM_ITRx_SetConfig>
      break;
 8002cde:	e003      	b.n	8002ce8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ce4:	e000      	b.n	8002ce8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ce6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b083      	sub	sp, #12
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
	...

08002d54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a3a      	ldr	r2, [pc, #232]	; (8002e50 <TIM_Base_SetConfig+0xfc>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d00f      	beq.n	8002d8c <TIM_Base_SetConfig+0x38>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d72:	d00b      	beq.n	8002d8c <TIM_Base_SetConfig+0x38>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a37      	ldr	r2, [pc, #220]	; (8002e54 <TIM_Base_SetConfig+0x100>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d007      	beq.n	8002d8c <TIM_Base_SetConfig+0x38>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a36      	ldr	r2, [pc, #216]	; (8002e58 <TIM_Base_SetConfig+0x104>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d003      	beq.n	8002d8c <TIM_Base_SetConfig+0x38>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a35      	ldr	r2, [pc, #212]	; (8002e5c <TIM_Base_SetConfig+0x108>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d108      	bne.n	8002d9e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a2b      	ldr	r2, [pc, #172]	; (8002e50 <TIM_Base_SetConfig+0xfc>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d01b      	beq.n	8002dde <TIM_Base_SetConfig+0x8a>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dac:	d017      	beq.n	8002dde <TIM_Base_SetConfig+0x8a>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a28      	ldr	r2, [pc, #160]	; (8002e54 <TIM_Base_SetConfig+0x100>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d013      	beq.n	8002dde <TIM_Base_SetConfig+0x8a>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a27      	ldr	r2, [pc, #156]	; (8002e58 <TIM_Base_SetConfig+0x104>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d00f      	beq.n	8002dde <TIM_Base_SetConfig+0x8a>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a26      	ldr	r2, [pc, #152]	; (8002e5c <TIM_Base_SetConfig+0x108>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d00b      	beq.n	8002dde <TIM_Base_SetConfig+0x8a>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a25      	ldr	r2, [pc, #148]	; (8002e60 <TIM_Base_SetConfig+0x10c>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d007      	beq.n	8002dde <TIM_Base_SetConfig+0x8a>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a24      	ldr	r2, [pc, #144]	; (8002e64 <TIM_Base_SetConfig+0x110>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d003      	beq.n	8002dde <TIM_Base_SetConfig+0x8a>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a23      	ldr	r2, [pc, #140]	; (8002e68 <TIM_Base_SetConfig+0x114>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d108      	bne.n	8002df0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002de4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a0e      	ldr	r2, [pc, #56]	; (8002e50 <TIM_Base_SetConfig+0xfc>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d103      	bne.n	8002e24 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	691a      	ldr	r2, [r3, #16]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d105      	bne.n	8002e42 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	f023 0201 	bic.w	r2, r3, #1
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	611a      	str	r2, [r3, #16]
  }
}
 8002e42:	bf00      	nop
 8002e44:	3714      	adds	r7, #20
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	40010000 	.word	0x40010000
 8002e54:	40000400 	.word	0x40000400
 8002e58:	40000800 	.word	0x40000800
 8002e5c:	40000c00 	.word	0x40000c00
 8002e60:	40014000 	.word	0x40014000
 8002e64:	40014400 	.word	0x40014400
 8002e68:	40014800 	.word	0x40014800

08002e6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b087      	sub	sp, #28
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	f023 0201 	bic.w	r2, r3, #1
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f023 0303 	bic.w	r3, r3, #3
 8002ea2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	f023 0302 	bic.w	r3, r3, #2
 8002eb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a1c      	ldr	r2, [pc, #112]	; (8002f34 <TIM_OC1_SetConfig+0xc8>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d10c      	bne.n	8002ee2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	f023 0308 	bic.w	r3, r3, #8
 8002ece:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f023 0304 	bic.w	r3, r3, #4
 8002ee0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a13      	ldr	r2, [pc, #76]	; (8002f34 <TIM_OC1_SetConfig+0xc8>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d111      	bne.n	8002f0e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ef0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ef8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	621a      	str	r2, [r3, #32]
}
 8002f28:	bf00      	nop
 8002f2a:	371c      	adds	r7, #28
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr
 8002f34:	40010000 	.word	0x40010000

08002f38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b087      	sub	sp, #28
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	f023 0210 	bic.w	r2, r3, #16
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	021b      	lsls	r3, r3, #8
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	f023 0320 	bic.w	r3, r3, #32
 8002f82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	011b      	lsls	r3, r3, #4
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a1e      	ldr	r2, [pc, #120]	; (800300c <TIM_OC2_SetConfig+0xd4>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d10d      	bne.n	8002fb4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	011b      	lsls	r3, r3, #4
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fb2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a15      	ldr	r2, [pc, #84]	; (800300c <TIM_OC2_SetConfig+0xd4>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d113      	bne.n	8002fe4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fc2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	621a      	str	r2, [r3, #32]
}
 8002ffe:	bf00      	nop
 8003000:	371c      	adds	r7, #28
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	40010000 	.word	0x40010000

08003010 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003010:	b480      	push	{r7}
 8003012:	b087      	sub	sp, #28
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69db      	ldr	r3, [r3, #28]
 8003036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800303e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f023 0303 	bic.w	r3, r3, #3
 8003046:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	4313      	orrs	r3, r2
 8003050:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003058:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	021b      	lsls	r3, r3, #8
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	4313      	orrs	r3, r2
 8003064:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a1d      	ldr	r2, [pc, #116]	; (80030e0 <TIM_OC3_SetConfig+0xd0>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d10d      	bne.n	800308a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003074:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	021b      	lsls	r3, r3, #8
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	4313      	orrs	r3, r2
 8003080:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003088:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a14      	ldr	r2, [pc, #80]	; (80030e0 <TIM_OC3_SetConfig+0xd0>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d113      	bne.n	80030ba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003098:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	011b      	lsls	r3, r3, #4
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685a      	ldr	r2, [r3, #4]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	621a      	str	r2, [r3, #32]
}
 80030d4:	bf00      	nop
 80030d6:	371c      	adds	r7, #28
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr
 80030e0:	40010000 	.word	0x40010000

080030e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b087      	sub	sp, #28
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800311a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	021b      	lsls	r3, r3, #8
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	4313      	orrs	r3, r2
 8003126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800312e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	031b      	lsls	r3, r3, #12
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	4313      	orrs	r3, r2
 800313a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a10      	ldr	r2, [pc, #64]	; (8003180 <TIM_OC4_SetConfig+0x9c>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d109      	bne.n	8003158 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800314a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	019b      	lsls	r3, r3, #6
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	4313      	orrs	r3, r2
 8003156:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	621a      	str	r2, [r3, #32]
}
 8003172:	bf00      	nop
 8003174:	371c      	adds	r7, #28
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	40010000 	.word	0x40010000

08003184 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003184:	b480      	push	{r7}
 8003186:	b087      	sub	sp, #28
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	f023 0201 	bic.w	r2, r3, #1
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	011b      	lsls	r3, r3, #4
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f023 030a 	bic.w	r3, r3, #10
 80031c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	621a      	str	r2, [r3, #32]
}
 80031d6:	bf00      	nop
 80031d8:	371c      	adds	r7, #28
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr

080031e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b087      	sub	sp, #28
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	60f8      	str	r0, [r7, #12]
 80031ea:	60b9      	str	r1, [r7, #8]
 80031ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	f023 0210 	bic.w	r2, r3, #16
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800320c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	031b      	lsls	r3, r3, #12
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	4313      	orrs	r3, r2
 8003216:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800321e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	697a      	ldr	r2, [r7, #20]
 8003226:	4313      	orrs	r3, r2
 8003228:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	621a      	str	r2, [r3, #32]
}
 8003236:	bf00      	nop
 8003238:	371c      	adds	r7, #28
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr

08003242 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003242:	b480      	push	{r7}
 8003244:	b085      	sub	sp, #20
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
 800324a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003258:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4313      	orrs	r3, r2
 8003260:	f043 0307 	orr.w	r3, r3, #7
 8003264:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	609a      	str	r2, [r3, #8]
}
 800326c:	bf00      	nop
 800326e:	3714      	adds	r7, #20
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003278:	b480      	push	{r7}
 800327a:	b087      	sub	sp, #28
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
 8003284:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003292:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	021a      	lsls	r2, r3, #8
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	431a      	orrs	r2, r3
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	4313      	orrs	r3, r2
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	609a      	str	r2, [r3, #8]
}
 80032ac:	bf00      	nop
 80032ae:	371c      	adds	r7, #28
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b087      	sub	sp, #28
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	f003 031f 	and.w	r3, r3, #31
 80032ca:	2201      	movs	r2, #1
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6a1a      	ldr	r2, [r3, #32]
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	43db      	mvns	r3, r3
 80032da:	401a      	ands	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6a1a      	ldr	r2, [r3, #32]
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	f003 031f 	and.w	r3, r3, #31
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	fa01 f303 	lsl.w	r3, r1, r3
 80032f0:	431a      	orrs	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	621a      	str	r2, [r3, #32]
}
 80032f6:	bf00      	nop
 80032f8:	371c      	adds	r7, #28
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
	...

08003304 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003314:	2b01      	cmp	r3, #1
 8003316:	d101      	bne.n	800331c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003318:	2302      	movs	r3, #2
 800331a:	e050      	b.n	80033be <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2202      	movs	r2, #2
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003342:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	4313      	orrs	r3, r2
 800334c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a1c      	ldr	r2, [pc, #112]	; (80033cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d018      	beq.n	8003392 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003368:	d013      	beq.n	8003392 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a18      	ldr	r2, [pc, #96]	; (80033d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d00e      	beq.n	8003392 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a16      	ldr	r2, [pc, #88]	; (80033d4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d009      	beq.n	8003392 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a15      	ldr	r2, [pc, #84]	; (80033d8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d004      	beq.n	8003392 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a13      	ldr	r2, [pc, #76]	; (80033dc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d10c      	bne.n	80033ac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003398:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	40010000 	.word	0x40010000
 80033d0:	40000400 	.word	0x40000400
 80033d4:	40000800 	.word	0x40000800
 80033d8:	40000c00 	.word	0x40000c00
 80033dc:	40014000 	.word	0x40014000

080033e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80033ea:	2300      	movs	r3, #0
 80033ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d101      	bne.n	80033fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80033f8:	2302      	movs	r3, #2
 80033fa:	e03d      	b.n	8003478 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	4313      	orrs	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	4313      	orrs	r3, r2
 800341e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	4313      	orrs	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4313      	orrs	r3, r2
 800343a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	4313      	orrs	r3, r2
 8003448:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	4313      	orrs	r3, r2
 8003456:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	4313      	orrs	r3, r2
 8003464:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <__NVIC_SetPriority>:
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	4603      	mov	r3, r0
 80034b4:	6039      	str	r1, [r7, #0]
 80034b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	db0a      	blt.n	80034d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	490c      	ldr	r1, [pc, #48]	; (80034f8 <__NVIC_SetPriority+0x4c>)
 80034c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ca:	0112      	lsls	r2, r2, #4
 80034cc:	b2d2      	uxtb	r2, r2
 80034ce:	440b      	add	r3, r1
 80034d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80034d4:	e00a      	b.n	80034ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	b2da      	uxtb	r2, r3
 80034da:	4908      	ldr	r1, [pc, #32]	; (80034fc <__NVIC_SetPriority+0x50>)
 80034dc:	79fb      	ldrb	r3, [r7, #7]
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	3b04      	subs	r3, #4
 80034e4:	0112      	lsls	r2, r2, #4
 80034e6:	b2d2      	uxtb	r2, r2
 80034e8:	440b      	add	r3, r1
 80034ea:	761a      	strb	r2, [r3, #24]
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	e000e100 	.word	0xe000e100
 80034fc:	e000ed00 	.word	0xe000ed00

08003500 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003504:	4b05      	ldr	r3, [pc, #20]	; (800351c <SysTick_Handler+0x1c>)
 8003506:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003508:	f001 fcfe 	bl	8004f08 <xTaskGetSchedulerState>
 800350c:	4603      	mov	r3, r0
 800350e:	2b01      	cmp	r3, #1
 8003510:	d001      	beq.n	8003516 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003512:	f002 fae9 	bl	8005ae8 <xPortSysTickHandler>
  }
}
 8003516:	bf00      	nop
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	e000e010 	.word	0xe000e010

08003520 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003524:	2100      	movs	r1, #0
 8003526:	f06f 0004 	mvn.w	r0, #4
 800352a:	f7ff ffbf 	bl	80034ac <__NVIC_SetPriority>
#endif
}
 800352e:	bf00      	nop
 8003530:	bd80      	pop	{r7, pc}
	...

08003534 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800353a:	f3ef 8305 	mrs	r3, IPSR
 800353e:	603b      	str	r3, [r7, #0]
  return(result);
 8003540:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003546:	f06f 0305 	mvn.w	r3, #5
 800354a:	607b      	str	r3, [r7, #4]
 800354c:	e00c      	b.n	8003568 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800354e:	4b0a      	ldr	r3, [pc, #40]	; (8003578 <osKernelInitialize+0x44>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d105      	bne.n	8003562 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003556:	4b08      	ldr	r3, [pc, #32]	; (8003578 <osKernelInitialize+0x44>)
 8003558:	2201      	movs	r2, #1
 800355a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800355c:	2300      	movs	r3, #0
 800355e:	607b      	str	r3, [r7, #4]
 8003560:	e002      	b.n	8003568 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003562:	f04f 33ff 	mov.w	r3, #4294967295
 8003566:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003568:	687b      	ldr	r3, [r7, #4]
}
 800356a:	4618      	mov	r0, r3
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	200000d4 	.word	0x200000d4

0800357c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003582:	f3ef 8305 	mrs	r3, IPSR
 8003586:	603b      	str	r3, [r7, #0]
  return(result);
 8003588:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <osKernelStart+0x1a>
    stat = osErrorISR;
 800358e:	f06f 0305 	mvn.w	r3, #5
 8003592:	607b      	str	r3, [r7, #4]
 8003594:	e010      	b.n	80035b8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003596:	4b0b      	ldr	r3, [pc, #44]	; (80035c4 <osKernelStart+0x48>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d109      	bne.n	80035b2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800359e:	f7ff ffbf 	bl	8003520 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80035a2:	4b08      	ldr	r3, [pc, #32]	; (80035c4 <osKernelStart+0x48>)
 80035a4:	2202      	movs	r2, #2
 80035a6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80035a8:	f001 f866 	bl	8004678 <vTaskStartScheduler>
      stat = osOK;
 80035ac:	2300      	movs	r3, #0
 80035ae:	607b      	str	r3, [r7, #4]
 80035b0:	e002      	b.n	80035b8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80035b2:	f04f 33ff 	mov.w	r3, #4294967295
 80035b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80035b8:	687b      	ldr	r3, [r7, #4]
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	200000d4 	.word	0x200000d4

080035c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b08e      	sub	sp, #56	; 0x38
 80035cc:	af04      	add	r7, sp, #16
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80035d4:	2300      	movs	r3, #0
 80035d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035d8:	f3ef 8305 	mrs	r3, IPSR
 80035dc:	617b      	str	r3, [r7, #20]
  return(result);
 80035de:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d17e      	bne.n	80036e2 <osThreadNew+0x11a>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d07b      	beq.n	80036e2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80035ea:	2380      	movs	r3, #128	; 0x80
 80035ec:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80035ee:	2318      	movs	r3, #24
 80035f0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80035f2:	2300      	movs	r3, #0
 80035f4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80035f6:	f04f 33ff 	mov.w	r3, #4294967295
 80035fa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d045      	beq.n	800368e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d002      	beq.n	8003610 <osThreadNew+0x48>
        name = attr->name;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d002      	beq.n	800361e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d008      	beq.n	8003636 <osThreadNew+0x6e>
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	2b38      	cmp	r3, #56	; 0x38
 8003628:	d805      	bhi.n	8003636 <osThreadNew+0x6e>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <osThreadNew+0x72>
        return (NULL);
 8003636:	2300      	movs	r3, #0
 8003638:	e054      	b.n	80036e4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	089b      	lsrs	r3, r3, #2
 8003648:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00e      	beq.n	8003670 <osThreadNew+0xa8>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	2b5b      	cmp	r3, #91	; 0x5b
 8003658:	d90a      	bls.n	8003670 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800365e:	2b00      	cmp	r3, #0
 8003660:	d006      	beq.n	8003670 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d002      	beq.n	8003670 <osThreadNew+0xa8>
        mem = 1;
 800366a:	2301      	movs	r3, #1
 800366c:	61bb      	str	r3, [r7, #24]
 800366e:	e010      	b.n	8003692 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10c      	bne.n	8003692 <osThreadNew+0xca>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d108      	bne.n	8003692 <osThreadNew+0xca>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d104      	bne.n	8003692 <osThreadNew+0xca>
          mem = 0;
 8003688:	2300      	movs	r3, #0
 800368a:	61bb      	str	r3, [r7, #24]
 800368c:	e001      	b.n	8003692 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800368e:	2300      	movs	r3, #0
 8003690:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d110      	bne.n	80036ba <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80036a0:	9202      	str	r2, [sp, #8]
 80036a2:	9301      	str	r3, [sp, #4]
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	6a3a      	ldr	r2, [r7, #32]
 80036ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f000 fe0c 	bl	80042cc <xTaskCreateStatic>
 80036b4:	4603      	mov	r3, r0
 80036b6:	613b      	str	r3, [r7, #16]
 80036b8:	e013      	b.n	80036e2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d110      	bne.n	80036e2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80036c0:	6a3b      	ldr	r3, [r7, #32]
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	f107 0310 	add.w	r3, r7, #16
 80036c8:	9301      	str	r3, [sp, #4]
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036d2:	68f8      	ldr	r0, [r7, #12]
 80036d4:	f000 fe57 	bl	8004386 <xTaskCreate>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d001      	beq.n	80036e2 <osThreadNew+0x11a>
            hTask = NULL;
 80036de:	2300      	movs	r3, #0
 80036e0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80036e2:	693b      	ldr	r3, [r7, #16]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3728      	adds	r7, #40	; 0x28
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036f4:	f3ef 8305 	mrs	r3, IPSR
 80036f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80036fa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d003      	beq.n	8003708 <osDelay+0x1c>
    stat = osErrorISR;
 8003700:	f06f 0305 	mvn.w	r3, #5
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	e007      	b.n	8003718 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003708:	2300      	movs	r3, #0
 800370a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d002      	beq.n	8003718 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 ff7c 	bl	8004610 <vTaskDelay>
    }
  }

  return (stat);
 8003718:	68fb      	ldr	r3, [r7, #12]
}
 800371a:	4618      	mov	r0, r3
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
	...

08003724 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	4a07      	ldr	r2, [pc, #28]	; (8003750 <vApplicationGetIdleTaskMemory+0x2c>)
 8003734:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	4a06      	ldr	r2, [pc, #24]	; (8003754 <vApplicationGetIdleTaskMemory+0x30>)
 800373a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2280      	movs	r2, #128	; 0x80
 8003740:	601a      	str	r2, [r3, #0]
}
 8003742:	bf00      	nop
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	200000d8 	.word	0x200000d8
 8003754:	20000134 	.word	0x20000134

08003758 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	4a07      	ldr	r2, [pc, #28]	; (8003784 <vApplicationGetTimerTaskMemory+0x2c>)
 8003768:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	4a06      	ldr	r2, [pc, #24]	; (8003788 <vApplicationGetTimerTaskMemory+0x30>)
 800376e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003776:	601a      	str	r2, [r3, #0]
}
 8003778:	bf00      	nop
 800377a:	3714      	adds	r7, #20
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr
 8003784:	20000334 	.word	0x20000334
 8003788:	20000390 	.word	0x20000390

0800378c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f103 0208 	add.w	r2, r3, #8
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f04f 32ff 	mov.w	r2, #4294967295
 80037a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f103 0208 	add.w	r2, r3, #8
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f103 0208 	add.w	r2, r3, #8
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80037da:	bf00      	nop
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr

080037e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037e6:	b480      	push	{r7}
 80037e8:	b085      	sub	sp, #20
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
 80037ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	1c5a      	adds	r2, r3, #1
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	601a      	str	r2, [r3, #0]
}
 8003822:	bf00      	nop
 8003824:	3714      	adds	r7, #20
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800382e:	b480      	push	{r7}
 8003830:	b085      	sub	sp, #20
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
 8003836:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003844:	d103      	bne.n	800384e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	e00c      	b.n	8003868 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	3308      	adds	r3, #8
 8003852:	60fb      	str	r3, [r7, #12]
 8003854:	e002      	b.n	800385c <vListInsert+0x2e>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	429a      	cmp	r2, r3
 8003866:	d2f6      	bcs.n	8003856 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	685a      	ldr	r2, [r3, #4]
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	1c5a      	adds	r2, r3, #1
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	601a      	str	r2, [r3, #0]
}
 8003894:	bf00      	nop
 8003896:	3714      	adds	r7, #20
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	6892      	ldr	r2, [r2, #8]
 80038b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6852      	ldr	r2, [r2, #4]
 80038c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d103      	bne.n	80038d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	1e5a      	subs	r2, r3, #1
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3714      	adds	r7, #20
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10a      	bne.n	800391e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800390c:	f383 8811 	msr	BASEPRI, r3
 8003910:	f3bf 8f6f 	isb	sy
 8003914:	f3bf 8f4f 	dsb	sy
 8003918:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800391a:	bf00      	nop
 800391c:	e7fe      	b.n	800391c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800391e:	f002 f851 	bl	80059c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392a:	68f9      	ldr	r1, [r7, #12]
 800392c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800392e:	fb01 f303 	mul.w	r3, r1, r3
 8003932:	441a      	add	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800394e:	3b01      	subs	r3, #1
 8003950:	68f9      	ldr	r1, [r7, #12]
 8003952:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003954:	fb01 f303 	mul.w	r3, r1, r3
 8003958:	441a      	add	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	22ff      	movs	r2, #255	; 0xff
 8003962:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	22ff      	movs	r2, #255	; 0xff
 800396a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d114      	bne.n	800399e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d01a      	beq.n	80039b2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	3310      	adds	r3, #16
 8003980:	4618      	mov	r0, r3
 8003982:	f001 f903 	bl	8004b8c <xTaskRemoveFromEventList>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d012      	beq.n	80039b2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800398c:	4b0c      	ldr	r3, [pc, #48]	; (80039c0 <xQueueGenericReset+0xcc>)
 800398e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	f3bf 8f4f 	dsb	sy
 8003998:	f3bf 8f6f 	isb	sy
 800399c:	e009      	b.n	80039b2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	3310      	adds	r3, #16
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7ff fef2 	bl	800378c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	3324      	adds	r3, #36	; 0x24
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff feed 	bl	800378c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80039b2:	f002 f837 	bl	8005a24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80039b6:	2301      	movs	r3, #1
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	e000ed04 	.word	0xe000ed04

080039c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b08e      	sub	sp, #56	; 0x38
 80039c8:	af02      	add	r7, sp, #8
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
 80039d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10a      	bne.n	80039ee <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80039d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039dc:	f383 8811 	msr	BASEPRI, r3
 80039e0:	f3bf 8f6f 	isb	sy
 80039e4:	f3bf 8f4f 	dsb	sy
 80039e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80039ea:	bf00      	nop
 80039ec:	e7fe      	b.n	80039ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10a      	bne.n	8003a0a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80039f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f8:	f383 8811 	msr	BASEPRI, r3
 80039fc:	f3bf 8f6f 	isb	sy
 8003a00:	f3bf 8f4f 	dsb	sy
 8003a04:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003a06:	bf00      	nop
 8003a08:	e7fe      	b.n	8003a08 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d002      	beq.n	8003a16 <xQueueGenericCreateStatic+0x52>
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <xQueueGenericCreateStatic+0x56>
 8003a16:	2301      	movs	r3, #1
 8003a18:	e000      	b.n	8003a1c <xQueueGenericCreateStatic+0x58>
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10a      	bne.n	8003a36 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a24:	f383 8811 	msr	BASEPRI, r3
 8003a28:	f3bf 8f6f 	isb	sy
 8003a2c:	f3bf 8f4f 	dsb	sy
 8003a30:	623b      	str	r3, [r7, #32]
}
 8003a32:	bf00      	nop
 8003a34:	e7fe      	b.n	8003a34 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d102      	bne.n	8003a42 <xQueueGenericCreateStatic+0x7e>
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <xQueueGenericCreateStatic+0x82>
 8003a42:	2301      	movs	r3, #1
 8003a44:	e000      	b.n	8003a48 <xQueueGenericCreateStatic+0x84>
 8003a46:	2300      	movs	r3, #0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d10a      	bne.n	8003a62 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a50:	f383 8811 	msr	BASEPRI, r3
 8003a54:	f3bf 8f6f 	isb	sy
 8003a58:	f3bf 8f4f 	dsb	sy
 8003a5c:	61fb      	str	r3, [r7, #28]
}
 8003a5e:	bf00      	nop
 8003a60:	e7fe      	b.n	8003a60 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003a62:	2350      	movs	r3, #80	; 0x50
 8003a64:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	2b50      	cmp	r3, #80	; 0x50
 8003a6a:	d00a      	beq.n	8003a82 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a70:	f383 8811 	msr	BASEPRI, r3
 8003a74:	f3bf 8f6f 	isb	sy
 8003a78:	f3bf 8f4f 	dsb	sy
 8003a7c:	61bb      	str	r3, [r7, #24]
}
 8003a7e:	bf00      	nop
 8003a80:	e7fe      	b.n	8003a80 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003a82:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00d      	beq.n	8003aaa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a96:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	68b9      	ldr	r1, [r7, #8]
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f000 f805 	bl	8003ab4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3730      	adds	r7, #48	; 0x30
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
 8003ac0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d103      	bne.n	8003ad0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	e002      	b.n	8003ad6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	69b8      	ldr	r0, [r7, #24]
 8003ae6:	f7ff ff05 	bl	80038f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	78fa      	ldrb	r2, [r7, #3]
 8003aee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003af2:	bf00      	nop
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
	...

08003afc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08e      	sub	sp, #56	; 0x38
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
 8003b08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10a      	bne.n	8003b2e <xQueueGenericSend+0x32>
	__asm volatile
 8003b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1c:	f383 8811 	msr	BASEPRI, r3
 8003b20:	f3bf 8f6f 	isb	sy
 8003b24:	f3bf 8f4f 	dsb	sy
 8003b28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003b2a:	bf00      	nop
 8003b2c:	e7fe      	b.n	8003b2c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d103      	bne.n	8003b3c <xQueueGenericSend+0x40>
 8003b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <xQueueGenericSend+0x44>
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e000      	b.n	8003b42 <xQueueGenericSend+0x46>
 8003b40:	2300      	movs	r3, #0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10a      	bne.n	8003b5c <xQueueGenericSend+0x60>
	__asm volatile
 8003b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4a:	f383 8811 	msr	BASEPRI, r3
 8003b4e:	f3bf 8f6f 	isb	sy
 8003b52:	f3bf 8f4f 	dsb	sy
 8003b56:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003b58:	bf00      	nop
 8003b5a:	e7fe      	b.n	8003b5a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d103      	bne.n	8003b6a <xQueueGenericSend+0x6e>
 8003b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d101      	bne.n	8003b6e <xQueueGenericSend+0x72>
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e000      	b.n	8003b70 <xQueueGenericSend+0x74>
 8003b6e:	2300      	movs	r3, #0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10a      	bne.n	8003b8a <xQueueGenericSend+0x8e>
	__asm volatile
 8003b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b78:	f383 8811 	msr	BASEPRI, r3
 8003b7c:	f3bf 8f6f 	isb	sy
 8003b80:	f3bf 8f4f 	dsb	sy
 8003b84:	623b      	str	r3, [r7, #32]
}
 8003b86:	bf00      	nop
 8003b88:	e7fe      	b.n	8003b88 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b8a:	f001 f9bd 	bl	8004f08 <xTaskGetSchedulerState>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d102      	bne.n	8003b9a <xQueueGenericSend+0x9e>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <xQueueGenericSend+0xa2>
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e000      	b.n	8003ba0 <xQueueGenericSend+0xa4>
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d10a      	bne.n	8003bba <xQueueGenericSend+0xbe>
	__asm volatile
 8003ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba8:	f383 8811 	msr	BASEPRI, r3
 8003bac:	f3bf 8f6f 	isb	sy
 8003bb0:	f3bf 8f4f 	dsb	sy
 8003bb4:	61fb      	str	r3, [r7, #28]
}
 8003bb6:	bf00      	nop
 8003bb8:	e7fe      	b.n	8003bb8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003bba:	f001 ff03 	bl	80059c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d302      	bcc.n	8003bd0 <xQueueGenericSend+0xd4>
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d129      	bne.n	8003c24 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	68b9      	ldr	r1, [r7, #8]
 8003bd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bd6:	f000 fa0b 	bl	8003ff0 <prvCopyDataToQueue>
 8003bda:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d010      	beq.n	8003c06 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be6:	3324      	adds	r3, #36	; 0x24
 8003be8:	4618      	mov	r0, r3
 8003bea:	f000 ffcf 	bl	8004b8c <xTaskRemoveFromEventList>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d013      	beq.n	8003c1c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003bf4:	4b3f      	ldr	r3, [pc, #252]	; (8003cf4 <xQueueGenericSend+0x1f8>)
 8003bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	f3bf 8f4f 	dsb	sy
 8003c00:	f3bf 8f6f 	isb	sy
 8003c04:	e00a      	b.n	8003c1c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d007      	beq.n	8003c1c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003c0c:	4b39      	ldr	r3, [pc, #228]	; (8003cf4 <xQueueGenericSend+0x1f8>)
 8003c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c12:	601a      	str	r2, [r3, #0]
 8003c14:	f3bf 8f4f 	dsb	sy
 8003c18:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003c1c:	f001 ff02 	bl	8005a24 <vPortExitCritical>
				return pdPASS;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e063      	b.n	8003cec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d103      	bne.n	8003c32 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c2a:	f001 fefb 	bl	8005a24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	e05c      	b.n	8003cec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d106      	bne.n	8003c46 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c38:	f107 0314 	add.w	r3, r7, #20
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f001 f809 	bl	8004c54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c42:	2301      	movs	r3, #1
 8003c44:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c46:	f001 feed 	bl	8005a24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c4a:	f000 fd7b 	bl	8004744 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c4e:	f001 feb9 	bl	80059c4 <vPortEnterCritical>
 8003c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c58:	b25b      	sxtb	r3, r3
 8003c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c5e:	d103      	bne.n	8003c68 <xQueueGenericSend+0x16c>
 8003c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c6e:	b25b      	sxtb	r3, r3
 8003c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c74:	d103      	bne.n	8003c7e <xQueueGenericSend+0x182>
 8003c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c7e:	f001 fed1 	bl	8005a24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c82:	1d3a      	adds	r2, r7, #4
 8003c84:	f107 0314 	add.w	r3, r7, #20
 8003c88:	4611      	mov	r1, r2
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 fff8 	bl	8004c80 <xTaskCheckForTimeOut>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d124      	bne.n	8003ce0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003c96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c98:	f000 faa2 	bl	80041e0 <prvIsQueueFull>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d018      	beq.n	8003cd4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca4:	3310      	adds	r3, #16
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	4611      	mov	r1, r2
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 ff1e 	bl	8004aec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003cb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cb2:	f000 fa2d 	bl	8004110 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003cb6:	f000 fd53 	bl	8004760 <xTaskResumeAll>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f47f af7c 	bne.w	8003bba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003cc2:	4b0c      	ldr	r3, [pc, #48]	; (8003cf4 <xQueueGenericSend+0x1f8>)
 8003cc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	f3bf 8f4f 	dsb	sy
 8003cce:	f3bf 8f6f 	isb	sy
 8003cd2:	e772      	b.n	8003bba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003cd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cd6:	f000 fa1b 	bl	8004110 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003cda:	f000 fd41 	bl	8004760 <xTaskResumeAll>
 8003cde:	e76c      	b.n	8003bba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003ce0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ce2:	f000 fa15 	bl	8004110 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ce6:	f000 fd3b 	bl	8004760 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003cea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3738      	adds	r7, #56	; 0x38
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	e000ed04 	.word	0xe000ed04

08003cf8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b090      	sub	sp, #64	; 0x40
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
 8003d04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10a      	bne.n	8003d26 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d14:	f383 8811 	msr	BASEPRI, r3
 8003d18:	f3bf 8f6f 	isb	sy
 8003d1c:	f3bf 8f4f 	dsb	sy
 8003d20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003d22:	bf00      	nop
 8003d24:	e7fe      	b.n	8003d24 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d103      	bne.n	8003d34 <xQueueGenericSendFromISR+0x3c>
 8003d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <xQueueGenericSendFromISR+0x40>
 8003d34:	2301      	movs	r3, #1
 8003d36:	e000      	b.n	8003d3a <xQueueGenericSendFromISR+0x42>
 8003d38:	2300      	movs	r3, #0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10a      	bne.n	8003d54 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d42:	f383 8811 	msr	BASEPRI, r3
 8003d46:	f3bf 8f6f 	isb	sy
 8003d4a:	f3bf 8f4f 	dsb	sy
 8003d4e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003d50:	bf00      	nop
 8003d52:	e7fe      	b.n	8003d52 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d103      	bne.n	8003d62 <xQueueGenericSendFromISR+0x6a>
 8003d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d101      	bne.n	8003d66 <xQueueGenericSendFromISR+0x6e>
 8003d62:	2301      	movs	r3, #1
 8003d64:	e000      	b.n	8003d68 <xQueueGenericSendFromISR+0x70>
 8003d66:	2300      	movs	r3, #0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10a      	bne.n	8003d82 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d70:	f383 8811 	msr	BASEPRI, r3
 8003d74:	f3bf 8f6f 	isb	sy
 8003d78:	f3bf 8f4f 	dsb	sy
 8003d7c:	623b      	str	r3, [r7, #32]
}
 8003d7e:	bf00      	nop
 8003d80:	e7fe      	b.n	8003d80 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d82:	f001 ff01 	bl	8005b88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003d86:	f3ef 8211 	mrs	r2, BASEPRI
 8003d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8e:	f383 8811 	msr	BASEPRI, r3
 8003d92:	f3bf 8f6f 	isb	sy
 8003d96:	f3bf 8f4f 	dsb	sy
 8003d9a:	61fa      	str	r2, [r7, #28]
 8003d9c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003d9e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003da0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d302      	bcc.n	8003db4 <xQueueGenericSendFromISR+0xbc>
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d12f      	bne.n	8003e14 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	68b9      	ldr	r1, [r7, #8]
 8003dc8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003dca:	f000 f911 	bl	8003ff0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003dce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd6:	d112      	bne.n	8003dfe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d016      	beq.n	8003e0e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de2:	3324      	adds	r3, #36	; 0x24
 8003de4:	4618      	mov	r0, r3
 8003de6:	f000 fed1 	bl	8004b8c <xTaskRemoveFromEventList>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00e      	beq.n	8003e0e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00b      	beq.n	8003e0e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	601a      	str	r2, [r3, #0]
 8003dfc:	e007      	b.n	8003e0e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003dfe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003e02:	3301      	adds	r3, #1
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	b25a      	sxtb	r2, r3
 8003e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003e12:	e001      	b.n	8003e18 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003e14:	2300      	movs	r3, #0
 8003e16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e1a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003e22:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3740      	adds	r7, #64	; 0x40
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
	...

08003e30 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b08c      	sub	sp, #48	; 0x30
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10a      	bne.n	8003e60 <xQueueReceive+0x30>
	__asm volatile
 8003e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4e:	f383 8811 	msr	BASEPRI, r3
 8003e52:	f3bf 8f6f 	isb	sy
 8003e56:	f3bf 8f4f 	dsb	sy
 8003e5a:	623b      	str	r3, [r7, #32]
}
 8003e5c:	bf00      	nop
 8003e5e:	e7fe      	b.n	8003e5e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d103      	bne.n	8003e6e <xQueueReceive+0x3e>
 8003e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <xQueueReceive+0x42>
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e000      	b.n	8003e74 <xQueueReceive+0x44>
 8003e72:	2300      	movs	r3, #0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d10a      	bne.n	8003e8e <xQueueReceive+0x5e>
	__asm volatile
 8003e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e7c:	f383 8811 	msr	BASEPRI, r3
 8003e80:	f3bf 8f6f 	isb	sy
 8003e84:	f3bf 8f4f 	dsb	sy
 8003e88:	61fb      	str	r3, [r7, #28]
}
 8003e8a:	bf00      	nop
 8003e8c:	e7fe      	b.n	8003e8c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e8e:	f001 f83b 	bl	8004f08 <xTaskGetSchedulerState>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d102      	bne.n	8003e9e <xQueueReceive+0x6e>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d101      	bne.n	8003ea2 <xQueueReceive+0x72>
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e000      	b.n	8003ea4 <xQueueReceive+0x74>
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d10a      	bne.n	8003ebe <xQueueReceive+0x8e>
	__asm volatile
 8003ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eac:	f383 8811 	msr	BASEPRI, r3
 8003eb0:	f3bf 8f6f 	isb	sy
 8003eb4:	f3bf 8f4f 	dsb	sy
 8003eb8:	61bb      	str	r3, [r7, #24]
}
 8003eba:	bf00      	nop
 8003ebc:	e7fe      	b.n	8003ebc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ebe:	f001 fd81 	bl	80059c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d01f      	beq.n	8003f0e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ece:	68b9      	ldr	r1, [r7, #8]
 8003ed0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ed2:	f000 f8f7 	bl	80040c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	1e5a      	subs	r2, r3, #1
 8003eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003edc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00f      	beq.n	8003f06 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee8:	3310      	adds	r3, #16
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 fe4e 	bl	8004b8c <xTaskRemoveFromEventList>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d007      	beq.n	8003f06 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003ef6:	4b3d      	ldr	r3, [pc, #244]	; (8003fec <xQueueReceive+0x1bc>)
 8003ef8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003efc:	601a      	str	r2, [r3, #0]
 8003efe:	f3bf 8f4f 	dsb	sy
 8003f02:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003f06:	f001 fd8d 	bl	8005a24 <vPortExitCritical>
				return pdPASS;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e069      	b.n	8003fe2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d103      	bne.n	8003f1c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003f14:	f001 fd86 	bl	8005a24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	e062      	b.n	8003fe2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d106      	bne.n	8003f30 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f22:	f107 0310 	add.w	r3, r7, #16
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 fe94 	bl	8004c54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f30:	f001 fd78 	bl	8005a24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f34:	f000 fc06 	bl	8004744 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f38:	f001 fd44 	bl	80059c4 <vPortEnterCritical>
 8003f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f42:	b25b      	sxtb	r3, r3
 8003f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f48:	d103      	bne.n	8003f52 <xQueueReceive+0x122>
 8003f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f58:	b25b      	sxtb	r3, r3
 8003f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f5e:	d103      	bne.n	8003f68 <xQueueReceive+0x138>
 8003f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f68:	f001 fd5c 	bl	8005a24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f6c:	1d3a      	adds	r2, r7, #4
 8003f6e:	f107 0310 	add.w	r3, r7, #16
 8003f72:	4611      	mov	r1, r2
 8003f74:	4618      	mov	r0, r3
 8003f76:	f000 fe83 	bl	8004c80 <xTaskCheckForTimeOut>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d123      	bne.n	8003fc8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f82:	f000 f917 	bl	80041b4 <prvIsQueueEmpty>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d017      	beq.n	8003fbc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8e:	3324      	adds	r3, #36	; 0x24
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	4611      	mov	r1, r2
 8003f94:	4618      	mov	r0, r3
 8003f96:	f000 fda9 	bl	8004aec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f9c:	f000 f8b8 	bl	8004110 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003fa0:	f000 fbde 	bl	8004760 <xTaskResumeAll>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d189      	bne.n	8003ebe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003faa:	4b10      	ldr	r3, [pc, #64]	; (8003fec <xQueueReceive+0x1bc>)
 8003fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	f3bf 8f4f 	dsb	sy
 8003fb6:	f3bf 8f6f 	isb	sy
 8003fba:	e780      	b.n	8003ebe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003fbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fbe:	f000 f8a7 	bl	8004110 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003fc2:	f000 fbcd 	bl	8004760 <xTaskResumeAll>
 8003fc6:	e77a      	b.n	8003ebe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003fc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fca:	f000 f8a1 	bl	8004110 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003fce:	f000 fbc7 	bl	8004760 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003fd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fd4:	f000 f8ee 	bl	80041b4 <prvIsQueueEmpty>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f43f af6f 	beq.w	8003ebe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003fe0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3730      	adds	r7, #48	; 0x30
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	e000ed04 	.word	0xe000ed04

08003ff0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004004:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10d      	bne.n	800402a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d14d      	bne.n	80040b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	4618      	mov	r0, r3
 800401c:	f000 ff92 	bl	8004f44 <xTaskPriorityDisinherit>
 8004020:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	609a      	str	r2, [r3, #8]
 8004028:	e043      	b.n	80040b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d119      	bne.n	8004064 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6858      	ldr	r0, [r3, #4]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004038:	461a      	mov	r2, r3
 800403a:	68b9      	ldr	r1, [r7, #8]
 800403c:	f001 fffa 	bl	8006034 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	685a      	ldr	r2, [r3, #4]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004048:	441a      	add	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	685a      	ldr	r2, [r3, #4]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	429a      	cmp	r2, r3
 8004058:	d32b      	bcc.n	80040b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	605a      	str	r2, [r3, #4]
 8004062:	e026      	b.n	80040b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	68d8      	ldr	r0, [r3, #12]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406c:	461a      	mov	r2, r3
 800406e:	68b9      	ldr	r1, [r7, #8]
 8004070:	f001 ffe0 	bl	8006034 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	68da      	ldr	r2, [r3, #12]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407c:	425b      	negs	r3, r3
 800407e:	441a      	add	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	68da      	ldr	r2, [r3, #12]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	429a      	cmp	r2, r3
 800408e:	d207      	bcs.n	80040a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004098:	425b      	negs	r3, r3
 800409a:	441a      	add	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d105      	bne.n	80040b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d002      	beq.n	80040b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1c5a      	adds	r2, r3, #1
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80040ba:	697b      	ldr	r3, [r7, #20]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3718      	adds	r7, #24
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d018      	beq.n	8004108 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	68da      	ldr	r2, [r3, #12]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	441a      	add	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68da      	ldr	r2, [r3, #12]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d303      	bcc.n	80040f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	68d9      	ldr	r1, [r3, #12]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004100:	461a      	mov	r2, r3
 8004102:	6838      	ldr	r0, [r7, #0]
 8004104:	f001 ff96 	bl	8006034 <memcpy>
	}
}
 8004108:	bf00      	nop
 800410a:	3708      	adds	r7, #8
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004118:	f001 fc54 	bl	80059c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004122:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004124:	e011      	b.n	800414a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412a:	2b00      	cmp	r3, #0
 800412c:	d012      	beq.n	8004154 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	3324      	adds	r3, #36	; 0x24
 8004132:	4618      	mov	r0, r3
 8004134:	f000 fd2a 	bl	8004b8c <xTaskRemoveFromEventList>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800413e:	f000 fe01 	bl	8004d44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004142:	7bfb      	ldrb	r3, [r7, #15]
 8004144:	3b01      	subs	r3, #1
 8004146:	b2db      	uxtb	r3, r3
 8004148:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800414a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800414e:	2b00      	cmp	r3, #0
 8004150:	dce9      	bgt.n	8004126 <prvUnlockQueue+0x16>
 8004152:	e000      	b.n	8004156 <prvUnlockQueue+0x46>
					break;
 8004154:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	22ff      	movs	r2, #255	; 0xff
 800415a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800415e:	f001 fc61 	bl	8005a24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004162:	f001 fc2f 	bl	80059c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800416c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800416e:	e011      	b.n	8004194 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d012      	beq.n	800419e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	3310      	adds	r3, #16
 800417c:	4618      	mov	r0, r3
 800417e:	f000 fd05 	bl	8004b8c <xTaskRemoveFromEventList>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d001      	beq.n	800418c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004188:	f000 fddc 	bl	8004d44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800418c:	7bbb      	ldrb	r3, [r7, #14]
 800418e:	3b01      	subs	r3, #1
 8004190:	b2db      	uxtb	r3, r3
 8004192:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004194:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004198:	2b00      	cmp	r3, #0
 800419a:	dce9      	bgt.n	8004170 <prvUnlockQueue+0x60>
 800419c:	e000      	b.n	80041a0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800419e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	22ff      	movs	r2, #255	; 0xff
 80041a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80041a8:	f001 fc3c 	bl	8005a24 <vPortExitCritical>
}
 80041ac:	bf00      	nop
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041bc:	f001 fc02 	bl	80059c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d102      	bne.n	80041ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80041c8:	2301      	movs	r3, #1
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	e001      	b.n	80041d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80041ce:	2300      	movs	r3, #0
 80041d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041d2:	f001 fc27 	bl	8005a24 <vPortExitCritical>

	return xReturn;
 80041d6:	68fb      	ldr	r3, [r7, #12]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041e8:	f001 fbec 	bl	80059c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d102      	bne.n	80041fe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80041f8:	2301      	movs	r3, #1
 80041fa:	60fb      	str	r3, [r7, #12]
 80041fc:	e001      	b.n	8004202 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80041fe:	2300      	movs	r3, #0
 8004200:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004202:	f001 fc0f 	bl	8005a24 <vPortExitCritical>

	return xReturn;
 8004206:	68fb      	ldr	r3, [r7, #12]
}
 8004208:	4618      	mov	r0, r3
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800421a:	2300      	movs	r3, #0
 800421c:	60fb      	str	r3, [r7, #12]
 800421e:	e014      	b.n	800424a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004220:	4a0f      	ldr	r2, [pc, #60]	; (8004260 <vQueueAddToRegistry+0x50>)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10b      	bne.n	8004244 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800422c:	490c      	ldr	r1, [pc, #48]	; (8004260 <vQueueAddToRegistry+0x50>)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004236:	4a0a      	ldr	r2, [pc, #40]	; (8004260 <vQueueAddToRegistry+0x50>)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	4413      	add	r3, r2
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004242:	e006      	b.n	8004252 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	3301      	adds	r3, #1
 8004248:	60fb      	str	r3, [r7, #12]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2b07      	cmp	r3, #7
 800424e:	d9e7      	bls.n	8004220 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004250:	bf00      	nop
 8004252:	bf00      	nop
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	20000790 	.word	0x20000790

08004264 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004274:	f001 fba6 	bl	80059c4 <vPortEnterCritical>
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800427e:	b25b      	sxtb	r3, r3
 8004280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004284:	d103      	bne.n	800428e <vQueueWaitForMessageRestricted+0x2a>
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004294:	b25b      	sxtb	r3, r3
 8004296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429a:	d103      	bne.n	80042a4 <vQueueWaitForMessageRestricted+0x40>
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042a4:	f001 fbbe 	bl	8005a24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d106      	bne.n	80042be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	3324      	adds	r3, #36	; 0x24
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	68b9      	ldr	r1, [r7, #8]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f000 fc3b 	bl	8004b34 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80042be:	6978      	ldr	r0, [r7, #20]
 80042c0:	f7ff ff26 	bl	8004110 <prvUnlockQueue>
	}
 80042c4:	bf00      	nop
 80042c6:	3718      	adds	r7, #24
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b08e      	sub	sp, #56	; 0x38
 80042d0:	af04      	add	r7, sp, #16
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
 80042d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80042da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10a      	bne.n	80042f6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80042e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e4:	f383 8811 	msr	BASEPRI, r3
 80042e8:	f3bf 8f6f 	isb	sy
 80042ec:	f3bf 8f4f 	dsb	sy
 80042f0:	623b      	str	r3, [r7, #32]
}
 80042f2:	bf00      	nop
 80042f4:	e7fe      	b.n	80042f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80042f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d10a      	bne.n	8004312 <xTaskCreateStatic+0x46>
	__asm volatile
 80042fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004300:	f383 8811 	msr	BASEPRI, r3
 8004304:	f3bf 8f6f 	isb	sy
 8004308:	f3bf 8f4f 	dsb	sy
 800430c:	61fb      	str	r3, [r7, #28]
}
 800430e:	bf00      	nop
 8004310:	e7fe      	b.n	8004310 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004312:	235c      	movs	r3, #92	; 0x5c
 8004314:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	2b5c      	cmp	r3, #92	; 0x5c
 800431a:	d00a      	beq.n	8004332 <xTaskCreateStatic+0x66>
	__asm volatile
 800431c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004320:	f383 8811 	msr	BASEPRI, r3
 8004324:	f3bf 8f6f 	isb	sy
 8004328:	f3bf 8f4f 	dsb	sy
 800432c:	61bb      	str	r3, [r7, #24]
}
 800432e:	bf00      	nop
 8004330:	e7fe      	b.n	8004330 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004332:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004336:	2b00      	cmp	r3, #0
 8004338:	d01e      	beq.n	8004378 <xTaskCreateStatic+0xac>
 800433a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800433c:	2b00      	cmp	r3, #0
 800433e:	d01b      	beq.n	8004378 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004342:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004346:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004348:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800434a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434c:	2202      	movs	r2, #2
 800434e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004352:	2300      	movs	r3, #0
 8004354:	9303      	str	r3, [sp, #12]
 8004356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004358:	9302      	str	r3, [sp, #8]
 800435a:	f107 0314 	add.w	r3, r7, #20
 800435e:	9301      	str	r3, [sp, #4]
 8004360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004362:	9300      	str	r3, [sp, #0]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	68b9      	ldr	r1, [r7, #8]
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f000 f850 	bl	8004410 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004370:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004372:	f000 f8dd 	bl	8004530 <prvAddNewTaskToReadyList>
 8004376:	e001      	b.n	800437c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004378:	2300      	movs	r3, #0
 800437a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800437c:	697b      	ldr	r3, [r7, #20]
	}
 800437e:	4618      	mov	r0, r3
 8004380:	3728      	adds	r7, #40	; 0x28
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004386:	b580      	push	{r7, lr}
 8004388:	b08c      	sub	sp, #48	; 0x30
 800438a:	af04      	add	r7, sp, #16
 800438c:	60f8      	str	r0, [r7, #12]
 800438e:	60b9      	str	r1, [r7, #8]
 8004390:	603b      	str	r3, [r7, #0]
 8004392:	4613      	mov	r3, r2
 8004394:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004396:	88fb      	ldrh	r3, [r7, #6]
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	4618      	mov	r0, r3
 800439c:	f001 fc34 	bl	8005c08 <pvPortMalloc>
 80043a0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00e      	beq.n	80043c6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80043a8:	205c      	movs	r0, #92	; 0x5c
 80043aa:	f001 fc2d 	bl	8005c08 <pvPortMalloc>
 80043ae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	631a      	str	r2, [r3, #48]	; 0x30
 80043bc:	e005      	b.n	80043ca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80043be:	6978      	ldr	r0, [r7, #20]
 80043c0:	f001 fcee 	bl	8005da0 <vPortFree>
 80043c4:	e001      	b.n	80043ca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80043c6:	2300      	movs	r3, #0
 80043c8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d017      	beq.n	8004400 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80043d8:	88fa      	ldrh	r2, [r7, #6]
 80043da:	2300      	movs	r3, #0
 80043dc:	9303      	str	r3, [sp, #12]
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	9302      	str	r3, [sp, #8]
 80043e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e4:	9301      	str	r3, [sp, #4]
 80043e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e8:	9300      	str	r3, [sp, #0]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	68b9      	ldr	r1, [r7, #8]
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f000 f80e 	bl	8004410 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043f4:	69f8      	ldr	r0, [r7, #28]
 80043f6:	f000 f89b 	bl	8004530 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80043fa:	2301      	movs	r3, #1
 80043fc:	61bb      	str	r3, [r7, #24]
 80043fe:	e002      	b.n	8004406 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004400:	f04f 33ff 	mov.w	r3, #4294967295
 8004404:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004406:	69bb      	ldr	r3, [r7, #24]
	}
 8004408:	4618      	mov	r0, r3
 800440a:	3720      	adds	r7, #32
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b088      	sub	sp, #32
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
 800441c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800441e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004420:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	461a      	mov	r2, r3
 8004428:	21a5      	movs	r1, #165	; 0xa5
 800442a:	f001 fdd7 	bl	8005fdc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800442e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004430:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004438:	3b01      	subs	r3, #1
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4413      	add	r3, r2
 800443e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	f023 0307 	bic.w	r3, r3, #7
 8004446:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	f003 0307 	and.w	r3, r3, #7
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00a      	beq.n	8004468 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004456:	f383 8811 	msr	BASEPRI, r3
 800445a:	f3bf 8f6f 	isb	sy
 800445e:	f3bf 8f4f 	dsb	sy
 8004462:	617b      	str	r3, [r7, #20]
}
 8004464:	bf00      	nop
 8004466:	e7fe      	b.n	8004466 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d01f      	beq.n	80044ae <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800446e:	2300      	movs	r3, #0
 8004470:	61fb      	str	r3, [r7, #28]
 8004472:	e012      	b.n	800449a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	4413      	add	r3, r2
 800447a:	7819      	ldrb	r1, [r3, #0]
 800447c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	4413      	add	r3, r2
 8004482:	3334      	adds	r3, #52	; 0x34
 8004484:	460a      	mov	r2, r1
 8004486:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004488:	68ba      	ldr	r2, [r7, #8]
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	4413      	add	r3, r2
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d006      	beq.n	80044a2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	3301      	adds	r3, #1
 8004498:	61fb      	str	r3, [r7, #28]
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	2b0f      	cmp	r3, #15
 800449e:	d9e9      	bls.n	8004474 <prvInitialiseNewTask+0x64>
 80044a0:	e000      	b.n	80044a4 <prvInitialiseNewTask+0x94>
			{
				break;
 80044a2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80044a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044ac:	e003      	b.n	80044b6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80044ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80044b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b8:	2b37      	cmp	r3, #55	; 0x37
 80044ba:	d901      	bls.n	80044c0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80044bc:	2337      	movs	r3, #55	; 0x37
 80044be:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80044c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044c4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80044c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044ca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80044cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ce:	2200      	movs	r2, #0
 80044d0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80044d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d4:	3304      	adds	r3, #4
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7ff f978 	bl	80037cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80044dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044de:	3318      	adds	r3, #24
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7ff f973 	bl	80037cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80044e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80044f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80044f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044fa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80044fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fe:	2200      	movs	r2, #0
 8004500:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	68f9      	ldr	r1, [r7, #12]
 800450e:	69b8      	ldr	r0, [r7, #24]
 8004510:	f001 f928 	bl	8005764 <pxPortInitialiseStack>
 8004514:	4602      	mov	r2, r0
 8004516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004518:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800451a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451c:	2b00      	cmp	r3, #0
 800451e:	d002      	beq.n	8004526 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004522:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004524:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004526:	bf00      	nop
 8004528:	3720      	adds	r7, #32
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
	...

08004530 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004538:	f001 fa44 	bl	80059c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800453c:	4b2d      	ldr	r3, [pc, #180]	; (80045f4 <prvAddNewTaskToReadyList+0xc4>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	3301      	adds	r3, #1
 8004542:	4a2c      	ldr	r2, [pc, #176]	; (80045f4 <prvAddNewTaskToReadyList+0xc4>)
 8004544:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004546:	4b2c      	ldr	r3, [pc, #176]	; (80045f8 <prvAddNewTaskToReadyList+0xc8>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d109      	bne.n	8004562 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800454e:	4a2a      	ldr	r2, [pc, #168]	; (80045f8 <prvAddNewTaskToReadyList+0xc8>)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004554:	4b27      	ldr	r3, [pc, #156]	; (80045f4 <prvAddNewTaskToReadyList+0xc4>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d110      	bne.n	800457e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800455c:	f000 fc16 	bl	8004d8c <prvInitialiseTaskLists>
 8004560:	e00d      	b.n	800457e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004562:	4b26      	ldr	r3, [pc, #152]	; (80045fc <prvAddNewTaskToReadyList+0xcc>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d109      	bne.n	800457e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800456a:	4b23      	ldr	r3, [pc, #140]	; (80045f8 <prvAddNewTaskToReadyList+0xc8>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004574:	429a      	cmp	r2, r3
 8004576:	d802      	bhi.n	800457e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004578:	4a1f      	ldr	r2, [pc, #124]	; (80045f8 <prvAddNewTaskToReadyList+0xc8>)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800457e:	4b20      	ldr	r3, [pc, #128]	; (8004600 <prvAddNewTaskToReadyList+0xd0>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	3301      	adds	r3, #1
 8004584:	4a1e      	ldr	r2, [pc, #120]	; (8004600 <prvAddNewTaskToReadyList+0xd0>)
 8004586:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004588:	4b1d      	ldr	r3, [pc, #116]	; (8004600 <prvAddNewTaskToReadyList+0xd0>)
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004594:	4b1b      	ldr	r3, [pc, #108]	; (8004604 <prvAddNewTaskToReadyList+0xd4>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	429a      	cmp	r2, r3
 800459a:	d903      	bls.n	80045a4 <prvAddNewTaskToReadyList+0x74>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a0:	4a18      	ldr	r2, [pc, #96]	; (8004604 <prvAddNewTaskToReadyList+0xd4>)
 80045a2:	6013      	str	r3, [r2, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a8:	4613      	mov	r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	4413      	add	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	4a15      	ldr	r2, [pc, #84]	; (8004608 <prvAddNewTaskToReadyList+0xd8>)
 80045b2:	441a      	add	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3304      	adds	r3, #4
 80045b8:	4619      	mov	r1, r3
 80045ba:	4610      	mov	r0, r2
 80045bc:	f7ff f913 	bl	80037e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80045c0:	f001 fa30 	bl	8005a24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80045c4:	4b0d      	ldr	r3, [pc, #52]	; (80045fc <prvAddNewTaskToReadyList+0xcc>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00e      	beq.n	80045ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80045cc:	4b0a      	ldr	r3, [pc, #40]	; (80045f8 <prvAddNewTaskToReadyList+0xc8>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d207      	bcs.n	80045ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80045da:	4b0c      	ldr	r3, [pc, #48]	; (800460c <prvAddNewTaskToReadyList+0xdc>)
 80045dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	f3bf 8f4f 	dsb	sy
 80045e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045ea:	bf00      	nop
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	20000ca4 	.word	0x20000ca4
 80045f8:	200007d0 	.word	0x200007d0
 80045fc:	20000cb0 	.word	0x20000cb0
 8004600:	20000cc0 	.word	0x20000cc0
 8004604:	20000cac 	.word	0x20000cac
 8004608:	200007d4 	.word	0x200007d4
 800460c:	e000ed04 	.word	0xe000ed04

08004610 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004618:	2300      	movs	r3, #0
 800461a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d017      	beq.n	8004652 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004622:	4b13      	ldr	r3, [pc, #76]	; (8004670 <vTaskDelay+0x60>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00a      	beq.n	8004640 <vTaskDelay+0x30>
	__asm volatile
 800462a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462e:	f383 8811 	msr	BASEPRI, r3
 8004632:	f3bf 8f6f 	isb	sy
 8004636:	f3bf 8f4f 	dsb	sy
 800463a:	60bb      	str	r3, [r7, #8]
}
 800463c:	bf00      	nop
 800463e:	e7fe      	b.n	800463e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004640:	f000 f880 	bl	8004744 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004644:	2100      	movs	r1, #0
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 fcea 	bl	8005020 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800464c:	f000 f888 	bl	8004760 <xTaskResumeAll>
 8004650:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d107      	bne.n	8004668 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004658:	4b06      	ldr	r3, [pc, #24]	; (8004674 <vTaskDelay+0x64>)
 800465a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800465e:	601a      	str	r2, [r3, #0]
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004668:	bf00      	nop
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	20000ccc 	.word	0x20000ccc
 8004674:	e000ed04 	.word	0xe000ed04

08004678 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b08a      	sub	sp, #40	; 0x28
 800467c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800467e:	2300      	movs	r3, #0
 8004680:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004682:	2300      	movs	r3, #0
 8004684:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004686:	463a      	mov	r2, r7
 8004688:	1d39      	adds	r1, r7, #4
 800468a:	f107 0308 	add.w	r3, r7, #8
 800468e:	4618      	mov	r0, r3
 8004690:	f7ff f848 	bl	8003724 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004694:	6839      	ldr	r1, [r7, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68ba      	ldr	r2, [r7, #8]
 800469a:	9202      	str	r2, [sp, #8]
 800469c:	9301      	str	r3, [sp, #4]
 800469e:	2300      	movs	r3, #0
 80046a0:	9300      	str	r3, [sp, #0]
 80046a2:	2300      	movs	r3, #0
 80046a4:	460a      	mov	r2, r1
 80046a6:	4921      	ldr	r1, [pc, #132]	; (800472c <vTaskStartScheduler+0xb4>)
 80046a8:	4821      	ldr	r0, [pc, #132]	; (8004730 <vTaskStartScheduler+0xb8>)
 80046aa:	f7ff fe0f 	bl	80042cc <xTaskCreateStatic>
 80046ae:	4603      	mov	r3, r0
 80046b0:	4a20      	ldr	r2, [pc, #128]	; (8004734 <vTaskStartScheduler+0xbc>)
 80046b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80046b4:	4b1f      	ldr	r3, [pc, #124]	; (8004734 <vTaskStartScheduler+0xbc>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d002      	beq.n	80046c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80046bc:	2301      	movs	r3, #1
 80046be:	617b      	str	r3, [r7, #20]
 80046c0:	e001      	b.n	80046c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80046c2:	2300      	movs	r3, #0
 80046c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d102      	bne.n	80046d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80046cc:	f000 fcfc 	bl	80050c8 <xTimerCreateTimerTask>
 80046d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d116      	bne.n	8004706 <vTaskStartScheduler+0x8e>
	__asm volatile
 80046d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046dc:	f383 8811 	msr	BASEPRI, r3
 80046e0:	f3bf 8f6f 	isb	sy
 80046e4:	f3bf 8f4f 	dsb	sy
 80046e8:	613b      	str	r3, [r7, #16]
}
 80046ea:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80046ec:	4b12      	ldr	r3, [pc, #72]	; (8004738 <vTaskStartScheduler+0xc0>)
 80046ee:	f04f 32ff 	mov.w	r2, #4294967295
 80046f2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80046f4:	4b11      	ldr	r3, [pc, #68]	; (800473c <vTaskStartScheduler+0xc4>)
 80046f6:	2201      	movs	r2, #1
 80046f8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80046fa:	4b11      	ldr	r3, [pc, #68]	; (8004740 <vTaskStartScheduler+0xc8>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004700:	f001 f8be 	bl	8005880 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004704:	e00e      	b.n	8004724 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800470c:	d10a      	bne.n	8004724 <vTaskStartScheduler+0xac>
	__asm volatile
 800470e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004712:	f383 8811 	msr	BASEPRI, r3
 8004716:	f3bf 8f6f 	isb	sy
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	60fb      	str	r3, [r7, #12]
}
 8004720:	bf00      	nop
 8004722:	e7fe      	b.n	8004722 <vTaskStartScheduler+0xaa>
}
 8004724:	bf00      	nop
 8004726:	3718      	adds	r7, #24
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	08006b88 	.word	0x08006b88
 8004730:	08004d5d 	.word	0x08004d5d
 8004734:	20000cc8 	.word	0x20000cc8
 8004738:	20000cc4 	.word	0x20000cc4
 800473c:	20000cb0 	.word	0x20000cb0
 8004740:	20000ca8 	.word	0x20000ca8

08004744 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004744:	b480      	push	{r7}
 8004746:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004748:	4b04      	ldr	r3, [pc, #16]	; (800475c <vTaskSuspendAll+0x18>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	3301      	adds	r3, #1
 800474e:	4a03      	ldr	r2, [pc, #12]	; (800475c <vTaskSuspendAll+0x18>)
 8004750:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004752:	bf00      	nop
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	20000ccc 	.word	0x20000ccc

08004760 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004766:	2300      	movs	r3, #0
 8004768:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800476a:	2300      	movs	r3, #0
 800476c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800476e:	4b42      	ldr	r3, [pc, #264]	; (8004878 <xTaskResumeAll+0x118>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10a      	bne.n	800478c <xTaskResumeAll+0x2c>
	__asm volatile
 8004776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800477a:	f383 8811 	msr	BASEPRI, r3
 800477e:	f3bf 8f6f 	isb	sy
 8004782:	f3bf 8f4f 	dsb	sy
 8004786:	603b      	str	r3, [r7, #0]
}
 8004788:	bf00      	nop
 800478a:	e7fe      	b.n	800478a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800478c:	f001 f91a 	bl	80059c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004790:	4b39      	ldr	r3, [pc, #228]	; (8004878 <xTaskResumeAll+0x118>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	3b01      	subs	r3, #1
 8004796:	4a38      	ldr	r2, [pc, #224]	; (8004878 <xTaskResumeAll+0x118>)
 8004798:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800479a:	4b37      	ldr	r3, [pc, #220]	; (8004878 <xTaskResumeAll+0x118>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d162      	bne.n	8004868 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80047a2:	4b36      	ldr	r3, [pc, #216]	; (800487c <xTaskResumeAll+0x11c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d05e      	beq.n	8004868 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047aa:	e02f      	b.n	800480c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047ac:	4b34      	ldr	r3, [pc, #208]	; (8004880 <xTaskResumeAll+0x120>)
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	3318      	adds	r3, #24
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7ff f871 	bl	80038a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	3304      	adds	r3, #4
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7ff f86c 	bl	80038a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047cc:	4b2d      	ldr	r3, [pc, #180]	; (8004884 <xTaskResumeAll+0x124>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d903      	bls.n	80047dc <xTaskResumeAll+0x7c>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d8:	4a2a      	ldr	r2, [pc, #168]	; (8004884 <xTaskResumeAll+0x124>)
 80047da:	6013      	str	r3, [r2, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e0:	4613      	mov	r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	4413      	add	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	4a27      	ldr	r2, [pc, #156]	; (8004888 <xTaskResumeAll+0x128>)
 80047ea:	441a      	add	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	3304      	adds	r3, #4
 80047f0:	4619      	mov	r1, r3
 80047f2:	4610      	mov	r0, r2
 80047f4:	f7fe fff7 	bl	80037e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047fc:	4b23      	ldr	r3, [pc, #140]	; (800488c <xTaskResumeAll+0x12c>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004802:	429a      	cmp	r2, r3
 8004804:	d302      	bcc.n	800480c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004806:	4b22      	ldr	r3, [pc, #136]	; (8004890 <xTaskResumeAll+0x130>)
 8004808:	2201      	movs	r2, #1
 800480a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800480c:	4b1c      	ldr	r3, [pc, #112]	; (8004880 <xTaskResumeAll+0x120>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1cb      	bne.n	80047ac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800481a:	f000 fb55 	bl	8004ec8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800481e:	4b1d      	ldr	r3, [pc, #116]	; (8004894 <xTaskResumeAll+0x134>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d010      	beq.n	800484c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800482a:	f000 f847 	bl	80048bc <xTaskIncrementTick>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d002      	beq.n	800483a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004834:	4b16      	ldr	r3, [pc, #88]	; (8004890 <xTaskResumeAll+0x130>)
 8004836:	2201      	movs	r2, #1
 8004838:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	3b01      	subs	r3, #1
 800483e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1f1      	bne.n	800482a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004846:	4b13      	ldr	r3, [pc, #76]	; (8004894 <xTaskResumeAll+0x134>)
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800484c:	4b10      	ldr	r3, [pc, #64]	; (8004890 <xTaskResumeAll+0x130>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d009      	beq.n	8004868 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004854:	2301      	movs	r3, #1
 8004856:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004858:	4b0f      	ldr	r3, [pc, #60]	; (8004898 <xTaskResumeAll+0x138>)
 800485a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800485e:	601a      	str	r2, [r3, #0]
 8004860:	f3bf 8f4f 	dsb	sy
 8004864:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004868:	f001 f8dc 	bl	8005a24 <vPortExitCritical>

	return xAlreadyYielded;
 800486c:	68bb      	ldr	r3, [r7, #8]
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	20000ccc 	.word	0x20000ccc
 800487c:	20000ca4 	.word	0x20000ca4
 8004880:	20000c64 	.word	0x20000c64
 8004884:	20000cac 	.word	0x20000cac
 8004888:	200007d4 	.word	0x200007d4
 800488c:	200007d0 	.word	0x200007d0
 8004890:	20000cb8 	.word	0x20000cb8
 8004894:	20000cb4 	.word	0x20000cb4
 8004898:	e000ed04 	.word	0xe000ed04

0800489c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80048a2:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <xTaskGetTickCount+0x1c>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80048a8:	687b      	ldr	r3, [r7, #4]
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	20000ca8 	.word	0x20000ca8

080048bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80048c2:	2300      	movs	r3, #0
 80048c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048c6:	4b4f      	ldr	r3, [pc, #316]	; (8004a04 <xTaskIncrementTick+0x148>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f040 808f 	bne.w	80049ee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80048d0:	4b4d      	ldr	r3, [pc, #308]	; (8004a08 <xTaskIncrementTick+0x14c>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	3301      	adds	r3, #1
 80048d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80048d8:	4a4b      	ldr	r2, [pc, #300]	; (8004a08 <xTaskIncrementTick+0x14c>)
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d120      	bne.n	8004926 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80048e4:	4b49      	ldr	r3, [pc, #292]	; (8004a0c <xTaskIncrementTick+0x150>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <xTaskIncrementTick+0x48>
	__asm volatile
 80048ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f2:	f383 8811 	msr	BASEPRI, r3
 80048f6:	f3bf 8f6f 	isb	sy
 80048fa:	f3bf 8f4f 	dsb	sy
 80048fe:	603b      	str	r3, [r7, #0]
}
 8004900:	bf00      	nop
 8004902:	e7fe      	b.n	8004902 <xTaskIncrementTick+0x46>
 8004904:	4b41      	ldr	r3, [pc, #260]	; (8004a0c <xTaskIncrementTick+0x150>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	60fb      	str	r3, [r7, #12]
 800490a:	4b41      	ldr	r3, [pc, #260]	; (8004a10 <xTaskIncrementTick+0x154>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a3f      	ldr	r2, [pc, #252]	; (8004a0c <xTaskIncrementTick+0x150>)
 8004910:	6013      	str	r3, [r2, #0]
 8004912:	4a3f      	ldr	r2, [pc, #252]	; (8004a10 <xTaskIncrementTick+0x154>)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6013      	str	r3, [r2, #0]
 8004918:	4b3e      	ldr	r3, [pc, #248]	; (8004a14 <xTaskIncrementTick+0x158>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	3301      	adds	r3, #1
 800491e:	4a3d      	ldr	r2, [pc, #244]	; (8004a14 <xTaskIncrementTick+0x158>)
 8004920:	6013      	str	r3, [r2, #0]
 8004922:	f000 fad1 	bl	8004ec8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004926:	4b3c      	ldr	r3, [pc, #240]	; (8004a18 <xTaskIncrementTick+0x15c>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	429a      	cmp	r2, r3
 800492e:	d349      	bcc.n	80049c4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004930:	4b36      	ldr	r3, [pc, #216]	; (8004a0c <xTaskIncrementTick+0x150>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d104      	bne.n	8004944 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800493a:	4b37      	ldr	r3, [pc, #220]	; (8004a18 <xTaskIncrementTick+0x15c>)
 800493c:	f04f 32ff 	mov.w	r2, #4294967295
 8004940:	601a      	str	r2, [r3, #0]
					break;
 8004942:	e03f      	b.n	80049c4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004944:	4b31      	ldr	r3, [pc, #196]	; (8004a0c <xTaskIncrementTick+0x150>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004954:	693a      	ldr	r2, [r7, #16]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	429a      	cmp	r2, r3
 800495a:	d203      	bcs.n	8004964 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800495c:	4a2e      	ldr	r2, [pc, #184]	; (8004a18 <xTaskIncrementTick+0x15c>)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004962:	e02f      	b.n	80049c4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	3304      	adds	r3, #4
 8004968:	4618      	mov	r0, r3
 800496a:	f7fe ff99 	bl	80038a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004972:	2b00      	cmp	r3, #0
 8004974:	d004      	beq.n	8004980 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	3318      	adds	r3, #24
 800497a:	4618      	mov	r0, r3
 800497c:	f7fe ff90 	bl	80038a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004984:	4b25      	ldr	r3, [pc, #148]	; (8004a1c <xTaskIncrementTick+0x160>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	429a      	cmp	r2, r3
 800498a:	d903      	bls.n	8004994 <xTaskIncrementTick+0xd8>
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004990:	4a22      	ldr	r2, [pc, #136]	; (8004a1c <xTaskIncrementTick+0x160>)
 8004992:	6013      	str	r3, [r2, #0]
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004998:	4613      	mov	r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4413      	add	r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4a1f      	ldr	r2, [pc, #124]	; (8004a20 <xTaskIncrementTick+0x164>)
 80049a2:	441a      	add	r2, r3
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	3304      	adds	r3, #4
 80049a8:	4619      	mov	r1, r3
 80049aa:	4610      	mov	r0, r2
 80049ac:	f7fe ff1b 	bl	80037e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049b4:	4b1b      	ldr	r3, [pc, #108]	; (8004a24 <xTaskIncrementTick+0x168>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d3b8      	bcc.n	8004930 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80049be:	2301      	movs	r3, #1
 80049c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049c2:	e7b5      	b.n	8004930 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80049c4:	4b17      	ldr	r3, [pc, #92]	; (8004a24 <xTaskIncrementTick+0x168>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ca:	4915      	ldr	r1, [pc, #84]	; (8004a20 <xTaskIncrementTick+0x164>)
 80049cc:	4613      	mov	r3, r2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	4413      	add	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	440b      	add	r3, r1
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d901      	bls.n	80049e0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80049dc:	2301      	movs	r3, #1
 80049de:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80049e0:	4b11      	ldr	r3, [pc, #68]	; (8004a28 <xTaskIncrementTick+0x16c>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d007      	beq.n	80049f8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80049e8:	2301      	movs	r3, #1
 80049ea:	617b      	str	r3, [r7, #20]
 80049ec:	e004      	b.n	80049f8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80049ee:	4b0f      	ldr	r3, [pc, #60]	; (8004a2c <xTaskIncrementTick+0x170>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	3301      	adds	r3, #1
 80049f4:	4a0d      	ldr	r2, [pc, #52]	; (8004a2c <xTaskIncrementTick+0x170>)
 80049f6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80049f8:	697b      	ldr	r3, [r7, #20]
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3718      	adds	r7, #24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	20000ccc 	.word	0x20000ccc
 8004a08:	20000ca8 	.word	0x20000ca8
 8004a0c:	20000c5c 	.word	0x20000c5c
 8004a10:	20000c60 	.word	0x20000c60
 8004a14:	20000cbc 	.word	0x20000cbc
 8004a18:	20000cc4 	.word	0x20000cc4
 8004a1c:	20000cac 	.word	0x20000cac
 8004a20:	200007d4 	.word	0x200007d4
 8004a24:	200007d0 	.word	0x200007d0
 8004a28:	20000cb8 	.word	0x20000cb8
 8004a2c:	20000cb4 	.word	0x20000cb4

08004a30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a36:	4b28      	ldr	r3, [pc, #160]	; (8004ad8 <vTaskSwitchContext+0xa8>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d003      	beq.n	8004a46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a3e:	4b27      	ldr	r3, [pc, #156]	; (8004adc <vTaskSwitchContext+0xac>)
 8004a40:	2201      	movs	r2, #1
 8004a42:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a44:	e041      	b.n	8004aca <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004a46:	4b25      	ldr	r3, [pc, #148]	; (8004adc <vTaskSwitchContext+0xac>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a4c:	4b24      	ldr	r3, [pc, #144]	; (8004ae0 <vTaskSwitchContext+0xb0>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	60fb      	str	r3, [r7, #12]
 8004a52:	e010      	b.n	8004a76 <vTaskSwitchContext+0x46>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10a      	bne.n	8004a70 <vTaskSwitchContext+0x40>
	__asm volatile
 8004a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5e:	f383 8811 	msr	BASEPRI, r3
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	f3bf 8f4f 	dsb	sy
 8004a6a:	607b      	str	r3, [r7, #4]
}
 8004a6c:	bf00      	nop
 8004a6e:	e7fe      	b.n	8004a6e <vTaskSwitchContext+0x3e>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	3b01      	subs	r3, #1
 8004a74:	60fb      	str	r3, [r7, #12]
 8004a76:	491b      	ldr	r1, [pc, #108]	; (8004ae4 <vTaskSwitchContext+0xb4>)
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	4413      	add	r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	440b      	add	r3, r1
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d0e4      	beq.n	8004a54 <vTaskSwitchContext+0x24>
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	4413      	add	r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4a13      	ldr	r2, [pc, #76]	; (8004ae4 <vTaskSwitchContext+0xb4>)
 8004a96:	4413      	add	r3, r2
 8004a98:	60bb      	str	r3, [r7, #8]
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	605a      	str	r2, [r3, #4]
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	685a      	ldr	r2, [r3, #4]
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	3308      	adds	r3, #8
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d104      	bne.n	8004aba <vTaskSwitchContext+0x8a>
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	605a      	str	r2, [r3, #4]
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	4a09      	ldr	r2, [pc, #36]	; (8004ae8 <vTaskSwitchContext+0xb8>)
 8004ac2:	6013      	str	r3, [r2, #0]
 8004ac4:	4a06      	ldr	r2, [pc, #24]	; (8004ae0 <vTaskSwitchContext+0xb0>)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6013      	str	r3, [r2, #0]
}
 8004aca:	bf00      	nop
 8004acc:	3714      	adds	r7, #20
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	20000ccc 	.word	0x20000ccc
 8004adc:	20000cb8 	.word	0x20000cb8
 8004ae0:	20000cac 	.word	0x20000cac
 8004ae4:	200007d4 	.word	0x200007d4
 8004ae8:	200007d0 	.word	0x200007d0

08004aec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10a      	bne.n	8004b12 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b00:	f383 8811 	msr	BASEPRI, r3
 8004b04:	f3bf 8f6f 	isb	sy
 8004b08:	f3bf 8f4f 	dsb	sy
 8004b0c:	60fb      	str	r3, [r7, #12]
}
 8004b0e:	bf00      	nop
 8004b10:	e7fe      	b.n	8004b10 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b12:	4b07      	ldr	r3, [pc, #28]	; (8004b30 <vTaskPlaceOnEventList+0x44>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	3318      	adds	r3, #24
 8004b18:	4619      	mov	r1, r3
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7fe fe87 	bl	800382e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b20:	2101      	movs	r1, #1
 8004b22:	6838      	ldr	r0, [r7, #0]
 8004b24:	f000 fa7c 	bl	8005020 <prvAddCurrentTaskToDelayedList>
}
 8004b28:	bf00      	nop
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	200007d0 	.word	0x200007d0

08004b34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10a      	bne.n	8004b5c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4a:	f383 8811 	msr	BASEPRI, r3
 8004b4e:	f3bf 8f6f 	isb	sy
 8004b52:	f3bf 8f4f 	dsb	sy
 8004b56:	617b      	str	r3, [r7, #20]
}
 8004b58:	bf00      	nop
 8004b5a:	e7fe      	b.n	8004b5a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b5c:	4b0a      	ldr	r3, [pc, #40]	; (8004b88 <vTaskPlaceOnEventListRestricted+0x54>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	3318      	adds	r3, #24
 8004b62:	4619      	mov	r1, r3
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f7fe fe3e 	bl	80037e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d002      	beq.n	8004b76 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004b70:	f04f 33ff 	mov.w	r3, #4294967295
 8004b74:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004b76:	6879      	ldr	r1, [r7, #4]
 8004b78:	68b8      	ldr	r0, [r7, #8]
 8004b7a:	f000 fa51 	bl	8005020 <prvAddCurrentTaskToDelayedList>
	}
 8004b7e:	bf00      	nop
 8004b80:	3718      	adds	r7, #24
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	200007d0 	.word	0x200007d0

08004b8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d10a      	bne.n	8004bb8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba6:	f383 8811 	msr	BASEPRI, r3
 8004baa:	f3bf 8f6f 	isb	sy
 8004bae:	f3bf 8f4f 	dsb	sy
 8004bb2:	60fb      	str	r3, [r7, #12]
}
 8004bb4:	bf00      	nop
 8004bb6:	e7fe      	b.n	8004bb6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	3318      	adds	r3, #24
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7fe fe6f 	bl	80038a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bc2:	4b1e      	ldr	r3, [pc, #120]	; (8004c3c <xTaskRemoveFromEventList+0xb0>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d11d      	bne.n	8004c06 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	3304      	adds	r3, #4
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7fe fe66 	bl	80038a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bd8:	4b19      	ldr	r3, [pc, #100]	; (8004c40 <xTaskRemoveFromEventList+0xb4>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d903      	bls.n	8004be8 <xTaskRemoveFromEventList+0x5c>
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be4:	4a16      	ldr	r2, [pc, #88]	; (8004c40 <xTaskRemoveFromEventList+0xb4>)
 8004be6:	6013      	str	r3, [r2, #0]
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bec:	4613      	mov	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4413      	add	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4a13      	ldr	r2, [pc, #76]	; (8004c44 <xTaskRemoveFromEventList+0xb8>)
 8004bf6:	441a      	add	r2, r3
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	3304      	adds	r3, #4
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	4610      	mov	r0, r2
 8004c00:	f7fe fdf1 	bl	80037e6 <vListInsertEnd>
 8004c04:	e005      	b.n	8004c12 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	3318      	adds	r3, #24
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	480e      	ldr	r0, [pc, #56]	; (8004c48 <xTaskRemoveFromEventList+0xbc>)
 8004c0e:	f7fe fdea 	bl	80037e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c16:	4b0d      	ldr	r3, [pc, #52]	; (8004c4c <xTaskRemoveFromEventList+0xc0>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d905      	bls.n	8004c2c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004c20:	2301      	movs	r3, #1
 8004c22:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004c24:	4b0a      	ldr	r3, [pc, #40]	; (8004c50 <xTaskRemoveFromEventList+0xc4>)
 8004c26:	2201      	movs	r2, #1
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	e001      	b.n	8004c30 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004c30:	697b      	ldr	r3, [r7, #20]
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3718      	adds	r7, #24
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	20000ccc 	.word	0x20000ccc
 8004c40:	20000cac 	.word	0x20000cac
 8004c44:	200007d4 	.word	0x200007d4
 8004c48:	20000c64 	.word	0x20000c64
 8004c4c:	200007d0 	.word	0x200007d0
 8004c50:	20000cb8 	.word	0x20000cb8

08004c54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004c5c:	4b06      	ldr	r3, [pc, #24]	; (8004c78 <vTaskInternalSetTimeOutState+0x24>)
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004c64:	4b05      	ldr	r3, [pc, #20]	; (8004c7c <vTaskInternalSetTimeOutState+0x28>)
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	605a      	str	r2, [r3, #4]
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	20000cbc 	.word	0x20000cbc
 8004c7c:	20000ca8 	.word	0x20000ca8

08004c80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b088      	sub	sp, #32
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10a      	bne.n	8004ca6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c94:	f383 8811 	msr	BASEPRI, r3
 8004c98:	f3bf 8f6f 	isb	sy
 8004c9c:	f3bf 8f4f 	dsb	sy
 8004ca0:	613b      	str	r3, [r7, #16]
}
 8004ca2:	bf00      	nop
 8004ca4:	e7fe      	b.n	8004ca4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d10a      	bne.n	8004cc2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb0:	f383 8811 	msr	BASEPRI, r3
 8004cb4:	f3bf 8f6f 	isb	sy
 8004cb8:	f3bf 8f4f 	dsb	sy
 8004cbc:	60fb      	str	r3, [r7, #12]
}
 8004cbe:	bf00      	nop
 8004cc0:	e7fe      	b.n	8004cc0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004cc2:	f000 fe7f 	bl	80059c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004cc6:	4b1d      	ldr	r3, [pc, #116]	; (8004d3c <xTaskCheckForTimeOut+0xbc>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	69ba      	ldr	r2, [r7, #24]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cde:	d102      	bne.n	8004ce6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	61fb      	str	r3, [r7, #28]
 8004ce4:	e023      	b.n	8004d2e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	4b15      	ldr	r3, [pc, #84]	; (8004d40 <xTaskCheckForTimeOut+0xc0>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d007      	beq.n	8004d02 <xTaskCheckForTimeOut+0x82>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d302      	bcc.n	8004d02 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	61fb      	str	r3, [r7, #28]
 8004d00:	e015      	b.n	8004d2e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d20b      	bcs.n	8004d24 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	1ad2      	subs	r2, r2, r3
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f7ff ff9b 	bl	8004c54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	61fb      	str	r3, [r7, #28]
 8004d22:	e004      	b.n	8004d2e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	2200      	movs	r2, #0
 8004d28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004d2e:	f000 fe79 	bl	8005a24 <vPortExitCritical>

	return xReturn;
 8004d32:	69fb      	ldr	r3, [r7, #28]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3720      	adds	r7, #32
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	20000ca8 	.word	0x20000ca8
 8004d40:	20000cbc 	.word	0x20000cbc

08004d44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004d44:	b480      	push	{r7}
 8004d46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004d48:	4b03      	ldr	r3, [pc, #12]	; (8004d58 <vTaskMissedYield+0x14>)
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	601a      	str	r2, [r3, #0]
}
 8004d4e:	bf00      	nop
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr
 8004d58:	20000cb8 	.word	0x20000cb8

08004d5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004d64:	f000 f852 	bl	8004e0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d68:	4b06      	ldr	r3, [pc, #24]	; (8004d84 <prvIdleTask+0x28>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d9f9      	bls.n	8004d64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004d70:	4b05      	ldr	r3, [pc, #20]	; (8004d88 <prvIdleTask+0x2c>)
 8004d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d76:	601a      	str	r2, [r3, #0]
 8004d78:	f3bf 8f4f 	dsb	sy
 8004d7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004d80:	e7f0      	b.n	8004d64 <prvIdleTask+0x8>
 8004d82:	bf00      	nop
 8004d84:	200007d4 	.word	0x200007d4
 8004d88:	e000ed04 	.word	0xe000ed04

08004d8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d92:	2300      	movs	r3, #0
 8004d94:	607b      	str	r3, [r7, #4]
 8004d96:	e00c      	b.n	8004db2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4413      	add	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	4a12      	ldr	r2, [pc, #72]	; (8004dec <prvInitialiseTaskLists+0x60>)
 8004da4:	4413      	add	r3, r2
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7fe fcf0 	bl	800378c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	3301      	adds	r3, #1
 8004db0:	607b      	str	r3, [r7, #4]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2b37      	cmp	r3, #55	; 0x37
 8004db6:	d9ef      	bls.n	8004d98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004db8:	480d      	ldr	r0, [pc, #52]	; (8004df0 <prvInitialiseTaskLists+0x64>)
 8004dba:	f7fe fce7 	bl	800378c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004dbe:	480d      	ldr	r0, [pc, #52]	; (8004df4 <prvInitialiseTaskLists+0x68>)
 8004dc0:	f7fe fce4 	bl	800378c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004dc4:	480c      	ldr	r0, [pc, #48]	; (8004df8 <prvInitialiseTaskLists+0x6c>)
 8004dc6:	f7fe fce1 	bl	800378c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004dca:	480c      	ldr	r0, [pc, #48]	; (8004dfc <prvInitialiseTaskLists+0x70>)
 8004dcc:	f7fe fcde 	bl	800378c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004dd0:	480b      	ldr	r0, [pc, #44]	; (8004e00 <prvInitialiseTaskLists+0x74>)
 8004dd2:	f7fe fcdb 	bl	800378c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004dd6:	4b0b      	ldr	r3, [pc, #44]	; (8004e04 <prvInitialiseTaskLists+0x78>)
 8004dd8:	4a05      	ldr	r2, [pc, #20]	; (8004df0 <prvInitialiseTaskLists+0x64>)
 8004dda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ddc:	4b0a      	ldr	r3, [pc, #40]	; (8004e08 <prvInitialiseTaskLists+0x7c>)
 8004dde:	4a05      	ldr	r2, [pc, #20]	; (8004df4 <prvInitialiseTaskLists+0x68>)
 8004de0:	601a      	str	r2, [r3, #0]
}
 8004de2:	bf00      	nop
 8004de4:	3708      	adds	r7, #8
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	200007d4 	.word	0x200007d4
 8004df0:	20000c34 	.word	0x20000c34
 8004df4:	20000c48 	.word	0x20000c48
 8004df8:	20000c64 	.word	0x20000c64
 8004dfc:	20000c78 	.word	0x20000c78
 8004e00:	20000c90 	.word	0x20000c90
 8004e04:	20000c5c 	.word	0x20000c5c
 8004e08:	20000c60 	.word	0x20000c60

08004e0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e12:	e019      	b.n	8004e48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e14:	f000 fdd6 	bl	80059c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e18:	4b10      	ldr	r3, [pc, #64]	; (8004e5c <prvCheckTasksWaitingTermination+0x50>)
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	3304      	adds	r3, #4
 8004e24:	4618      	mov	r0, r3
 8004e26:	f7fe fd3b 	bl	80038a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e2a:	4b0d      	ldr	r3, [pc, #52]	; (8004e60 <prvCheckTasksWaitingTermination+0x54>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	4a0b      	ldr	r2, [pc, #44]	; (8004e60 <prvCheckTasksWaitingTermination+0x54>)
 8004e32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e34:	4b0b      	ldr	r3, [pc, #44]	; (8004e64 <prvCheckTasksWaitingTermination+0x58>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	4a0a      	ldr	r2, [pc, #40]	; (8004e64 <prvCheckTasksWaitingTermination+0x58>)
 8004e3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004e3e:	f000 fdf1 	bl	8005a24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f810 	bl	8004e68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e48:	4b06      	ldr	r3, [pc, #24]	; (8004e64 <prvCheckTasksWaitingTermination+0x58>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1e1      	bne.n	8004e14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004e50:	bf00      	nop
 8004e52:	bf00      	nop
 8004e54:	3708      	adds	r7, #8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	20000c78 	.word	0x20000c78
 8004e60:	20000ca4 	.word	0x20000ca4
 8004e64:	20000c8c 	.word	0x20000c8c

08004e68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d108      	bne.n	8004e8c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 ff8e 	bl	8005da0 <vPortFree>
				vPortFree( pxTCB );
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 ff8b 	bl	8005da0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004e8a:	e018      	b.n	8004ebe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d103      	bne.n	8004e9e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 ff82 	bl	8005da0 <vPortFree>
	}
 8004e9c:	e00f      	b.n	8004ebe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d00a      	beq.n	8004ebe <prvDeleteTCB+0x56>
	__asm volatile
 8004ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eac:	f383 8811 	msr	BASEPRI, r3
 8004eb0:	f3bf 8f6f 	isb	sy
 8004eb4:	f3bf 8f4f 	dsb	sy
 8004eb8:	60fb      	str	r3, [r7, #12]
}
 8004eba:	bf00      	nop
 8004ebc:	e7fe      	b.n	8004ebc <prvDeleteTCB+0x54>
	}
 8004ebe:	bf00      	nop
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
	...

08004ec8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ece:	4b0c      	ldr	r3, [pc, #48]	; (8004f00 <prvResetNextTaskUnblockTime+0x38>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d104      	bne.n	8004ee2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ed8:	4b0a      	ldr	r3, [pc, #40]	; (8004f04 <prvResetNextTaskUnblockTime+0x3c>)
 8004eda:	f04f 32ff 	mov.w	r2, #4294967295
 8004ede:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004ee0:	e008      	b.n	8004ef4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ee2:	4b07      	ldr	r3, [pc, #28]	; (8004f00 <prvResetNextTaskUnblockTime+0x38>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	4a04      	ldr	r2, [pc, #16]	; (8004f04 <prvResetNextTaskUnblockTime+0x3c>)
 8004ef2:	6013      	str	r3, [r2, #0]
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr
 8004f00:	20000c5c 	.word	0x20000c5c
 8004f04:	20000cc4 	.word	0x20000cc4

08004f08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f0e:	4b0b      	ldr	r3, [pc, #44]	; (8004f3c <xTaskGetSchedulerState+0x34>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d102      	bne.n	8004f1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f16:	2301      	movs	r3, #1
 8004f18:	607b      	str	r3, [r7, #4]
 8004f1a:	e008      	b.n	8004f2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f1c:	4b08      	ldr	r3, [pc, #32]	; (8004f40 <xTaskGetSchedulerState+0x38>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d102      	bne.n	8004f2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f24:	2302      	movs	r3, #2
 8004f26:	607b      	str	r3, [r7, #4]
 8004f28:	e001      	b.n	8004f2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f2e:	687b      	ldr	r3, [r7, #4]
	}
 8004f30:	4618      	mov	r0, r3
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	20000cb0 	.word	0x20000cb0
 8004f40:	20000ccc 	.word	0x20000ccc

08004f44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b086      	sub	sp, #24
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004f50:	2300      	movs	r3, #0
 8004f52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d056      	beq.n	8005008 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004f5a:	4b2e      	ldr	r3, [pc, #184]	; (8005014 <xTaskPriorityDisinherit+0xd0>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	693a      	ldr	r2, [r7, #16]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d00a      	beq.n	8004f7a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f68:	f383 8811 	msr	BASEPRI, r3
 8004f6c:	f3bf 8f6f 	isb	sy
 8004f70:	f3bf 8f4f 	dsb	sy
 8004f74:	60fb      	str	r3, [r7, #12]
}
 8004f76:	bf00      	nop
 8004f78:	e7fe      	b.n	8004f78 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10a      	bne.n	8004f98 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f86:	f383 8811 	msr	BASEPRI, r3
 8004f8a:	f3bf 8f6f 	isb	sy
 8004f8e:	f3bf 8f4f 	dsb	sy
 8004f92:	60bb      	str	r3, [r7, #8]
}
 8004f94:	bf00      	nop
 8004f96:	e7fe      	b.n	8004f96 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f9c:	1e5a      	subs	r2, r3, #1
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d02c      	beq.n	8005008 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d128      	bne.n	8005008 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	3304      	adds	r3, #4
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7fe fc70 	bl	80038a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fcc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fd8:	4b0f      	ldr	r3, [pc, #60]	; (8005018 <xTaskPriorityDisinherit+0xd4>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d903      	bls.n	8004fe8 <xTaskPriorityDisinherit+0xa4>
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe4:	4a0c      	ldr	r2, [pc, #48]	; (8005018 <xTaskPriorityDisinherit+0xd4>)
 8004fe6:	6013      	str	r3, [r2, #0]
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fec:	4613      	mov	r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	4413      	add	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4a09      	ldr	r2, [pc, #36]	; (800501c <xTaskPriorityDisinherit+0xd8>)
 8004ff6:	441a      	add	r2, r3
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	3304      	adds	r3, #4
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	4610      	mov	r0, r2
 8005000:	f7fe fbf1 	bl	80037e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005004:	2301      	movs	r3, #1
 8005006:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005008:	697b      	ldr	r3, [r7, #20]
	}
 800500a:	4618      	mov	r0, r3
 800500c:	3718      	adds	r7, #24
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	200007d0 	.word	0x200007d0
 8005018:	20000cac 	.word	0x20000cac
 800501c:	200007d4 	.word	0x200007d4

08005020 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800502a:	4b21      	ldr	r3, [pc, #132]	; (80050b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005030:	4b20      	ldr	r3, [pc, #128]	; (80050b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	3304      	adds	r3, #4
 8005036:	4618      	mov	r0, r3
 8005038:	f7fe fc32 	bl	80038a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005042:	d10a      	bne.n	800505a <prvAddCurrentTaskToDelayedList+0x3a>
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d007      	beq.n	800505a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800504a:	4b1a      	ldr	r3, [pc, #104]	; (80050b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	3304      	adds	r3, #4
 8005050:	4619      	mov	r1, r3
 8005052:	4819      	ldr	r0, [pc, #100]	; (80050b8 <prvAddCurrentTaskToDelayedList+0x98>)
 8005054:	f7fe fbc7 	bl	80037e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005058:	e026      	b.n	80050a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4413      	add	r3, r2
 8005060:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005062:	4b14      	ldr	r3, [pc, #80]	; (80050b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68ba      	ldr	r2, [r7, #8]
 8005068:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800506a:	68ba      	ldr	r2, [r7, #8]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	429a      	cmp	r2, r3
 8005070:	d209      	bcs.n	8005086 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005072:	4b12      	ldr	r3, [pc, #72]	; (80050bc <prvAddCurrentTaskToDelayedList+0x9c>)
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	4b0f      	ldr	r3, [pc, #60]	; (80050b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	3304      	adds	r3, #4
 800507c:	4619      	mov	r1, r3
 800507e:	4610      	mov	r0, r2
 8005080:	f7fe fbd5 	bl	800382e <vListInsert>
}
 8005084:	e010      	b.n	80050a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005086:	4b0e      	ldr	r3, [pc, #56]	; (80050c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	4b0a      	ldr	r3, [pc, #40]	; (80050b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	3304      	adds	r3, #4
 8005090:	4619      	mov	r1, r3
 8005092:	4610      	mov	r0, r2
 8005094:	f7fe fbcb 	bl	800382e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005098:	4b0a      	ldr	r3, [pc, #40]	; (80050c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68ba      	ldr	r2, [r7, #8]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d202      	bcs.n	80050a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80050a2:	4a08      	ldr	r2, [pc, #32]	; (80050c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	6013      	str	r3, [r2, #0]
}
 80050a8:	bf00      	nop
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	20000ca8 	.word	0x20000ca8
 80050b4:	200007d0 	.word	0x200007d0
 80050b8:	20000c90 	.word	0x20000c90
 80050bc:	20000c60 	.word	0x20000c60
 80050c0:	20000c5c 	.word	0x20000c5c
 80050c4:	20000cc4 	.word	0x20000cc4

080050c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b08a      	sub	sp, #40	; 0x28
 80050cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80050ce:	2300      	movs	r3, #0
 80050d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80050d2:	f000 fb07 	bl	80056e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80050d6:	4b1c      	ldr	r3, [pc, #112]	; (8005148 <xTimerCreateTimerTask+0x80>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d021      	beq.n	8005122 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80050de:	2300      	movs	r3, #0
 80050e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80050e2:	2300      	movs	r3, #0
 80050e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80050e6:	1d3a      	adds	r2, r7, #4
 80050e8:	f107 0108 	add.w	r1, r7, #8
 80050ec:	f107 030c 	add.w	r3, r7, #12
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7fe fb31 	bl	8003758 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80050f6:	6879      	ldr	r1, [r7, #4]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	9202      	str	r2, [sp, #8]
 80050fe:	9301      	str	r3, [sp, #4]
 8005100:	2302      	movs	r3, #2
 8005102:	9300      	str	r3, [sp, #0]
 8005104:	2300      	movs	r3, #0
 8005106:	460a      	mov	r2, r1
 8005108:	4910      	ldr	r1, [pc, #64]	; (800514c <xTimerCreateTimerTask+0x84>)
 800510a:	4811      	ldr	r0, [pc, #68]	; (8005150 <xTimerCreateTimerTask+0x88>)
 800510c:	f7ff f8de 	bl	80042cc <xTaskCreateStatic>
 8005110:	4603      	mov	r3, r0
 8005112:	4a10      	ldr	r2, [pc, #64]	; (8005154 <xTimerCreateTimerTask+0x8c>)
 8005114:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005116:	4b0f      	ldr	r3, [pc, #60]	; (8005154 <xTimerCreateTimerTask+0x8c>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d001      	beq.n	8005122 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800511e:	2301      	movs	r3, #1
 8005120:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10a      	bne.n	800513e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512c:	f383 8811 	msr	BASEPRI, r3
 8005130:	f3bf 8f6f 	isb	sy
 8005134:	f3bf 8f4f 	dsb	sy
 8005138:	613b      	str	r3, [r7, #16]
}
 800513a:	bf00      	nop
 800513c:	e7fe      	b.n	800513c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800513e:	697b      	ldr	r3, [r7, #20]
}
 8005140:	4618      	mov	r0, r3
 8005142:	3718      	adds	r7, #24
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	20000d00 	.word	0x20000d00
 800514c:	08006b90 	.word	0x08006b90
 8005150:	0800528d 	.word	0x0800528d
 8005154:	20000d04 	.word	0x20000d04

08005158 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b08a      	sub	sp, #40	; 0x28
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
 8005164:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005166:	2300      	movs	r3, #0
 8005168:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10a      	bne.n	8005186 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005174:	f383 8811 	msr	BASEPRI, r3
 8005178:	f3bf 8f6f 	isb	sy
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	623b      	str	r3, [r7, #32]
}
 8005182:	bf00      	nop
 8005184:	e7fe      	b.n	8005184 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005186:	4b1a      	ldr	r3, [pc, #104]	; (80051f0 <xTimerGenericCommand+0x98>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d02a      	beq.n	80051e4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	2b05      	cmp	r3, #5
 800519e:	dc18      	bgt.n	80051d2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80051a0:	f7ff feb2 	bl	8004f08 <xTaskGetSchedulerState>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d109      	bne.n	80051be <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80051aa:	4b11      	ldr	r3, [pc, #68]	; (80051f0 <xTimerGenericCommand+0x98>)
 80051ac:	6818      	ldr	r0, [r3, #0]
 80051ae:	f107 0110 	add.w	r1, r7, #16
 80051b2:	2300      	movs	r3, #0
 80051b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051b6:	f7fe fca1 	bl	8003afc <xQueueGenericSend>
 80051ba:	6278      	str	r0, [r7, #36]	; 0x24
 80051bc:	e012      	b.n	80051e4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80051be:	4b0c      	ldr	r3, [pc, #48]	; (80051f0 <xTimerGenericCommand+0x98>)
 80051c0:	6818      	ldr	r0, [r3, #0]
 80051c2:	f107 0110 	add.w	r1, r7, #16
 80051c6:	2300      	movs	r3, #0
 80051c8:	2200      	movs	r2, #0
 80051ca:	f7fe fc97 	bl	8003afc <xQueueGenericSend>
 80051ce:	6278      	str	r0, [r7, #36]	; 0x24
 80051d0:	e008      	b.n	80051e4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80051d2:	4b07      	ldr	r3, [pc, #28]	; (80051f0 <xTimerGenericCommand+0x98>)
 80051d4:	6818      	ldr	r0, [r3, #0]
 80051d6:	f107 0110 	add.w	r1, r7, #16
 80051da:	2300      	movs	r3, #0
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	f7fe fd8b 	bl	8003cf8 <xQueueGenericSendFromISR>
 80051e2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80051e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3728      	adds	r7, #40	; 0x28
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	20000d00 	.word	0x20000d00

080051f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b088      	sub	sp, #32
 80051f8:	af02      	add	r7, sp, #8
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051fe:	4b22      	ldr	r3, [pc, #136]	; (8005288 <prvProcessExpiredTimer+0x94>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	3304      	adds	r3, #4
 800520c:	4618      	mov	r0, r3
 800520e:	f7fe fb47 	bl	80038a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005218:	f003 0304 	and.w	r3, r3, #4
 800521c:	2b00      	cmp	r3, #0
 800521e:	d022      	beq.n	8005266 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	699a      	ldr	r2, [r3, #24]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	18d1      	adds	r1, r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	6978      	ldr	r0, [r7, #20]
 800522e:	f000 f8d1 	bl	80053d4 <prvInsertTimerInActiveList>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d01f      	beq.n	8005278 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005238:	2300      	movs	r3, #0
 800523a:	9300      	str	r3, [sp, #0]
 800523c:	2300      	movs	r3, #0
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	2100      	movs	r1, #0
 8005242:	6978      	ldr	r0, [r7, #20]
 8005244:	f7ff ff88 	bl	8005158 <xTimerGenericCommand>
 8005248:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d113      	bne.n	8005278 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005254:	f383 8811 	msr	BASEPRI, r3
 8005258:	f3bf 8f6f 	isb	sy
 800525c:	f3bf 8f4f 	dsb	sy
 8005260:	60fb      	str	r3, [r7, #12]
}
 8005262:	bf00      	nop
 8005264:	e7fe      	b.n	8005264 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800526c:	f023 0301 	bic.w	r3, r3, #1
 8005270:	b2da      	uxtb	r2, r3
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	6978      	ldr	r0, [r7, #20]
 800527e:	4798      	blx	r3
}
 8005280:	bf00      	nop
 8005282:	3718      	adds	r7, #24
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	20000cf8 	.word	0x20000cf8

0800528c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005294:	f107 0308 	add.w	r3, r7, #8
 8005298:	4618      	mov	r0, r3
 800529a:	f000 f857 	bl	800534c <prvGetNextExpireTime>
 800529e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	4619      	mov	r1, r3
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f000 f803 	bl	80052b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80052aa:	f000 f8d5 	bl	8005458 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052ae:	e7f1      	b.n	8005294 <prvTimerTask+0x8>

080052b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80052ba:	f7ff fa43 	bl	8004744 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80052be:	f107 0308 	add.w	r3, r7, #8
 80052c2:	4618      	mov	r0, r3
 80052c4:	f000 f866 	bl	8005394 <prvSampleTimeNow>
 80052c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d130      	bne.n	8005332 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10a      	bne.n	80052ec <prvProcessTimerOrBlockTask+0x3c>
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d806      	bhi.n	80052ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80052de:	f7ff fa3f 	bl	8004760 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80052e2:	68f9      	ldr	r1, [r7, #12]
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f7ff ff85 	bl	80051f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80052ea:	e024      	b.n	8005336 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d008      	beq.n	8005304 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80052f2:	4b13      	ldr	r3, [pc, #76]	; (8005340 <prvProcessTimerOrBlockTask+0x90>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d101      	bne.n	8005300 <prvProcessTimerOrBlockTask+0x50>
 80052fc:	2301      	movs	r3, #1
 80052fe:	e000      	b.n	8005302 <prvProcessTimerOrBlockTask+0x52>
 8005300:	2300      	movs	r3, #0
 8005302:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005304:	4b0f      	ldr	r3, [pc, #60]	; (8005344 <prvProcessTimerOrBlockTask+0x94>)
 8005306:	6818      	ldr	r0, [r3, #0]
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	4619      	mov	r1, r3
 8005312:	f7fe ffa7 	bl	8004264 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005316:	f7ff fa23 	bl	8004760 <xTaskResumeAll>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d10a      	bne.n	8005336 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005320:	4b09      	ldr	r3, [pc, #36]	; (8005348 <prvProcessTimerOrBlockTask+0x98>)
 8005322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005326:	601a      	str	r2, [r3, #0]
 8005328:	f3bf 8f4f 	dsb	sy
 800532c:	f3bf 8f6f 	isb	sy
}
 8005330:	e001      	b.n	8005336 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005332:	f7ff fa15 	bl	8004760 <xTaskResumeAll>
}
 8005336:	bf00      	nop
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	20000cfc 	.word	0x20000cfc
 8005344:	20000d00 	.word	0x20000d00
 8005348:	e000ed04 	.word	0xe000ed04

0800534c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005354:	4b0e      	ldr	r3, [pc, #56]	; (8005390 <prvGetNextExpireTime+0x44>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d101      	bne.n	8005362 <prvGetNextExpireTime+0x16>
 800535e:	2201      	movs	r2, #1
 8005360:	e000      	b.n	8005364 <prvGetNextExpireTime+0x18>
 8005362:	2200      	movs	r2, #0
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d105      	bne.n	800537c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005370:	4b07      	ldr	r3, [pc, #28]	; (8005390 <prvGetNextExpireTime+0x44>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	60fb      	str	r3, [r7, #12]
 800537a:	e001      	b.n	8005380 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800537c:	2300      	movs	r3, #0
 800537e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005380:	68fb      	ldr	r3, [r7, #12]
}
 8005382:	4618      	mov	r0, r3
 8005384:	3714      	adds	r7, #20
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	20000cf8 	.word	0x20000cf8

08005394 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800539c:	f7ff fa7e 	bl	800489c <xTaskGetTickCount>
 80053a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80053a2:	4b0b      	ldr	r3, [pc, #44]	; (80053d0 <prvSampleTimeNow+0x3c>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d205      	bcs.n	80053b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80053ac:	f000 f936 	bl	800561c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	601a      	str	r2, [r3, #0]
 80053b6:	e002      	b.n	80053be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80053be:	4a04      	ldr	r2, [pc, #16]	; (80053d0 <prvSampleTimeNow+0x3c>)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80053c4:	68fb      	ldr	r3, [r7, #12]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	20000d08 	.word	0x20000d08

080053d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]
 80053e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80053e2:	2300      	movs	r3, #0
 80053e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d812      	bhi.n	8005420 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	1ad2      	subs	r2, r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	429a      	cmp	r2, r3
 8005406:	d302      	bcc.n	800540e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005408:	2301      	movs	r3, #1
 800540a:	617b      	str	r3, [r7, #20]
 800540c:	e01b      	b.n	8005446 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800540e:	4b10      	ldr	r3, [pc, #64]	; (8005450 <prvInsertTimerInActiveList+0x7c>)
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	3304      	adds	r3, #4
 8005416:	4619      	mov	r1, r3
 8005418:	4610      	mov	r0, r2
 800541a:	f7fe fa08 	bl	800382e <vListInsert>
 800541e:	e012      	b.n	8005446 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	429a      	cmp	r2, r3
 8005426:	d206      	bcs.n	8005436 <prvInsertTimerInActiveList+0x62>
 8005428:	68ba      	ldr	r2, [r7, #8]
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	429a      	cmp	r2, r3
 800542e:	d302      	bcc.n	8005436 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005430:	2301      	movs	r3, #1
 8005432:	617b      	str	r3, [r7, #20]
 8005434:	e007      	b.n	8005446 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005436:	4b07      	ldr	r3, [pc, #28]	; (8005454 <prvInsertTimerInActiveList+0x80>)
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	3304      	adds	r3, #4
 800543e:	4619      	mov	r1, r3
 8005440:	4610      	mov	r0, r2
 8005442:	f7fe f9f4 	bl	800382e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005446:	697b      	ldr	r3, [r7, #20]
}
 8005448:	4618      	mov	r0, r3
 800544a:	3718      	adds	r7, #24
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	20000cfc 	.word	0x20000cfc
 8005454:	20000cf8 	.word	0x20000cf8

08005458 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b08e      	sub	sp, #56	; 0x38
 800545c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800545e:	e0ca      	b.n	80055f6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	da18      	bge.n	8005498 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005466:	1d3b      	adds	r3, r7, #4
 8005468:	3304      	adds	r3, #4
 800546a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800546c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10a      	bne.n	8005488 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005476:	f383 8811 	msr	BASEPRI, r3
 800547a:	f3bf 8f6f 	isb	sy
 800547e:	f3bf 8f4f 	dsb	sy
 8005482:	61fb      	str	r3, [r7, #28]
}
 8005484:	bf00      	nop
 8005486:	e7fe      	b.n	8005486 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800548e:	6850      	ldr	r0, [r2, #4]
 8005490:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005492:	6892      	ldr	r2, [r2, #8]
 8005494:	4611      	mov	r1, r2
 8005496:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	f2c0 80ab 	blt.w	80055f6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80054a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a6:	695b      	ldr	r3, [r3, #20]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d004      	beq.n	80054b6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ae:	3304      	adds	r3, #4
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7fe f9f5 	bl	80038a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80054b6:	463b      	mov	r3, r7
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7ff ff6b 	bl	8005394 <prvSampleTimeNow>
 80054be:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b09      	cmp	r3, #9
 80054c4:	f200 8096 	bhi.w	80055f4 <prvProcessReceivedCommands+0x19c>
 80054c8:	a201      	add	r2, pc, #4	; (adr r2, 80054d0 <prvProcessReceivedCommands+0x78>)
 80054ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ce:	bf00      	nop
 80054d0:	080054f9 	.word	0x080054f9
 80054d4:	080054f9 	.word	0x080054f9
 80054d8:	080054f9 	.word	0x080054f9
 80054dc:	0800556d 	.word	0x0800556d
 80054e0:	08005581 	.word	0x08005581
 80054e4:	080055cb 	.word	0x080055cb
 80054e8:	080054f9 	.word	0x080054f9
 80054ec:	080054f9 	.word	0x080054f9
 80054f0:	0800556d 	.word	0x0800556d
 80054f4:	08005581 	.word	0x08005581
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80054f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054fe:	f043 0301 	orr.w	r3, r3, #1
 8005502:	b2da      	uxtb	r2, r3
 8005504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005506:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	18d1      	adds	r1, r2, r3
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005516:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005518:	f7ff ff5c 	bl	80053d4 <prvInsertTimerInActiveList>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d069      	beq.n	80055f6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005528:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800552a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005530:	f003 0304 	and.w	r3, r3, #4
 8005534:	2b00      	cmp	r3, #0
 8005536:	d05e      	beq.n	80055f6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005538:	68ba      	ldr	r2, [r7, #8]
 800553a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	441a      	add	r2, r3
 8005540:	2300      	movs	r3, #0
 8005542:	9300      	str	r3, [sp, #0]
 8005544:	2300      	movs	r3, #0
 8005546:	2100      	movs	r1, #0
 8005548:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800554a:	f7ff fe05 	bl	8005158 <xTimerGenericCommand>
 800554e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005550:	6a3b      	ldr	r3, [r7, #32]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d14f      	bne.n	80055f6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555a:	f383 8811 	msr	BASEPRI, r3
 800555e:	f3bf 8f6f 	isb	sy
 8005562:	f3bf 8f4f 	dsb	sy
 8005566:	61bb      	str	r3, [r7, #24]
}
 8005568:	bf00      	nop
 800556a:	e7fe      	b.n	800556a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800556c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005572:	f023 0301 	bic.w	r3, r3, #1
 8005576:	b2da      	uxtb	r2, r3
 8005578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800557e:	e03a      	b.n	80055f6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005582:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005586:	f043 0301 	orr.w	r3, r3, #1
 800558a:	b2da      	uxtb	r2, r3
 800558c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005596:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d10a      	bne.n	80055b6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80055a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a4:	f383 8811 	msr	BASEPRI, r3
 80055a8:	f3bf 8f6f 	isb	sy
 80055ac:	f3bf 8f4f 	dsb	sy
 80055b0:	617b      	str	r3, [r7, #20]
}
 80055b2:	bf00      	nop
 80055b4:	e7fe      	b.n	80055b4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80055b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b8:	699a      	ldr	r2, [r3, #24]
 80055ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055bc:	18d1      	adds	r1, r2, r3
 80055be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055c4:	f7ff ff06 	bl	80053d4 <prvInsertTimerInActiveList>
					break;
 80055c8:	e015      	b.n	80055f6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80055ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055d0:	f003 0302 	and.w	r3, r3, #2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d103      	bne.n	80055e0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80055d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055da:	f000 fbe1 	bl	8005da0 <vPortFree>
 80055de:	e00a      	b.n	80055f6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055e6:	f023 0301 	bic.w	r3, r3, #1
 80055ea:	b2da      	uxtb	r2, r3
 80055ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80055f2:	e000      	b.n	80055f6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80055f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80055f6:	4b08      	ldr	r3, [pc, #32]	; (8005618 <prvProcessReceivedCommands+0x1c0>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	1d39      	adds	r1, r7, #4
 80055fc:	2200      	movs	r2, #0
 80055fe:	4618      	mov	r0, r3
 8005600:	f7fe fc16 	bl	8003e30 <xQueueReceive>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	f47f af2a 	bne.w	8005460 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800560c:	bf00      	nop
 800560e:	bf00      	nop
 8005610:	3730      	adds	r7, #48	; 0x30
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	20000d00 	.word	0x20000d00

0800561c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b088      	sub	sp, #32
 8005620:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005622:	e048      	b.n	80056b6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005624:	4b2d      	ldr	r3, [pc, #180]	; (80056dc <prvSwitchTimerLists+0xc0>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800562e:	4b2b      	ldr	r3, [pc, #172]	; (80056dc <prvSwitchTimerLists+0xc0>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	3304      	adds	r3, #4
 800563c:	4618      	mov	r0, r3
 800563e:	f7fe f92f 	bl	80038a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005650:	f003 0304 	and.w	r3, r3, #4
 8005654:	2b00      	cmp	r3, #0
 8005656:	d02e      	beq.n	80056b6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	4413      	add	r3, r2
 8005660:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	429a      	cmp	r2, r3
 8005668:	d90e      	bls.n	8005688 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005676:	4b19      	ldr	r3, [pc, #100]	; (80056dc <prvSwitchTimerLists+0xc0>)
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	3304      	adds	r3, #4
 800567e:	4619      	mov	r1, r3
 8005680:	4610      	mov	r0, r2
 8005682:	f7fe f8d4 	bl	800382e <vListInsert>
 8005686:	e016      	b.n	80056b6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005688:	2300      	movs	r3, #0
 800568a:	9300      	str	r3, [sp, #0]
 800568c:	2300      	movs	r3, #0
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	2100      	movs	r1, #0
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f7ff fd60 	bl	8005158 <xTimerGenericCommand>
 8005698:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d10a      	bne.n	80056b6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80056a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a4:	f383 8811 	msr	BASEPRI, r3
 80056a8:	f3bf 8f6f 	isb	sy
 80056ac:	f3bf 8f4f 	dsb	sy
 80056b0:	603b      	str	r3, [r7, #0]
}
 80056b2:	bf00      	nop
 80056b4:	e7fe      	b.n	80056b4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80056b6:	4b09      	ldr	r3, [pc, #36]	; (80056dc <prvSwitchTimerLists+0xc0>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1b1      	bne.n	8005624 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80056c0:	4b06      	ldr	r3, [pc, #24]	; (80056dc <prvSwitchTimerLists+0xc0>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80056c6:	4b06      	ldr	r3, [pc, #24]	; (80056e0 <prvSwitchTimerLists+0xc4>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a04      	ldr	r2, [pc, #16]	; (80056dc <prvSwitchTimerLists+0xc0>)
 80056cc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80056ce:	4a04      	ldr	r2, [pc, #16]	; (80056e0 <prvSwitchTimerLists+0xc4>)
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	6013      	str	r3, [r2, #0]
}
 80056d4:	bf00      	nop
 80056d6:	3718      	adds	r7, #24
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	20000cf8 	.word	0x20000cf8
 80056e0:	20000cfc 	.word	0x20000cfc

080056e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80056ea:	f000 f96b 	bl	80059c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80056ee:	4b15      	ldr	r3, [pc, #84]	; (8005744 <prvCheckForValidListAndQueue+0x60>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d120      	bne.n	8005738 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80056f6:	4814      	ldr	r0, [pc, #80]	; (8005748 <prvCheckForValidListAndQueue+0x64>)
 80056f8:	f7fe f848 	bl	800378c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80056fc:	4813      	ldr	r0, [pc, #76]	; (800574c <prvCheckForValidListAndQueue+0x68>)
 80056fe:	f7fe f845 	bl	800378c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005702:	4b13      	ldr	r3, [pc, #76]	; (8005750 <prvCheckForValidListAndQueue+0x6c>)
 8005704:	4a10      	ldr	r2, [pc, #64]	; (8005748 <prvCheckForValidListAndQueue+0x64>)
 8005706:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005708:	4b12      	ldr	r3, [pc, #72]	; (8005754 <prvCheckForValidListAndQueue+0x70>)
 800570a:	4a10      	ldr	r2, [pc, #64]	; (800574c <prvCheckForValidListAndQueue+0x68>)
 800570c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800570e:	2300      	movs	r3, #0
 8005710:	9300      	str	r3, [sp, #0]
 8005712:	4b11      	ldr	r3, [pc, #68]	; (8005758 <prvCheckForValidListAndQueue+0x74>)
 8005714:	4a11      	ldr	r2, [pc, #68]	; (800575c <prvCheckForValidListAndQueue+0x78>)
 8005716:	2110      	movs	r1, #16
 8005718:	200a      	movs	r0, #10
 800571a:	f7fe f953 	bl	80039c4 <xQueueGenericCreateStatic>
 800571e:	4603      	mov	r3, r0
 8005720:	4a08      	ldr	r2, [pc, #32]	; (8005744 <prvCheckForValidListAndQueue+0x60>)
 8005722:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005724:	4b07      	ldr	r3, [pc, #28]	; (8005744 <prvCheckForValidListAndQueue+0x60>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d005      	beq.n	8005738 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800572c:	4b05      	ldr	r3, [pc, #20]	; (8005744 <prvCheckForValidListAndQueue+0x60>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	490b      	ldr	r1, [pc, #44]	; (8005760 <prvCheckForValidListAndQueue+0x7c>)
 8005732:	4618      	mov	r0, r3
 8005734:	f7fe fd6c 	bl	8004210 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005738:	f000 f974 	bl	8005a24 <vPortExitCritical>
}
 800573c:	bf00      	nop
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	20000d00 	.word	0x20000d00
 8005748:	20000cd0 	.word	0x20000cd0
 800574c:	20000ce4 	.word	0x20000ce4
 8005750:	20000cf8 	.word	0x20000cf8
 8005754:	20000cfc 	.word	0x20000cfc
 8005758:	20000dac 	.word	0x20000dac
 800575c:	20000d0c 	.word	0x20000d0c
 8005760:	08006b98 	.word	0x08006b98

08005764 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	3b04      	subs	r3, #4
 8005774:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800577c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	3b04      	subs	r3, #4
 8005782:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	f023 0201 	bic.w	r2, r3, #1
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	3b04      	subs	r3, #4
 8005792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005794:	4a0c      	ldr	r2, [pc, #48]	; (80057c8 <pxPortInitialiseStack+0x64>)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	3b14      	subs	r3, #20
 800579e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	3b04      	subs	r3, #4
 80057aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f06f 0202 	mvn.w	r2, #2
 80057b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	3b20      	subs	r3, #32
 80057b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80057ba:	68fb      	ldr	r3, [r7, #12]
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3714      	adds	r7, #20
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr
 80057c8:	080057cd 	.word	0x080057cd

080057cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80057d2:	2300      	movs	r3, #0
 80057d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80057d6:	4b12      	ldr	r3, [pc, #72]	; (8005820 <prvTaskExitError+0x54>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057de:	d00a      	beq.n	80057f6 <prvTaskExitError+0x2a>
	__asm volatile
 80057e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e4:	f383 8811 	msr	BASEPRI, r3
 80057e8:	f3bf 8f6f 	isb	sy
 80057ec:	f3bf 8f4f 	dsb	sy
 80057f0:	60fb      	str	r3, [r7, #12]
}
 80057f2:	bf00      	nop
 80057f4:	e7fe      	b.n	80057f4 <prvTaskExitError+0x28>
	__asm volatile
 80057f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fa:	f383 8811 	msr	BASEPRI, r3
 80057fe:	f3bf 8f6f 	isb	sy
 8005802:	f3bf 8f4f 	dsb	sy
 8005806:	60bb      	str	r3, [r7, #8]
}
 8005808:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800580a:	bf00      	nop
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d0fc      	beq.n	800580c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005812:	bf00      	nop
 8005814:	bf00      	nop
 8005816:	3714      	adds	r7, #20
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr
 8005820:	2000000c 	.word	0x2000000c
	...

08005830 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005830:	4b07      	ldr	r3, [pc, #28]	; (8005850 <pxCurrentTCBConst2>)
 8005832:	6819      	ldr	r1, [r3, #0]
 8005834:	6808      	ldr	r0, [r1, #0]
 8005836:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800583a:	f380 8809 	msr	PSP, r0
 800583e:	f3bf 8f6f 	isb	sy
 8005842:	f04f 0000 	mov.w	r0, #0
 8005846:	f380 8811 	msr	BASEPRI, r0
 800584a:	4770      	bx	lr
 800584c:	f3af 8000 	nop.w

08005850 <pxCurrentTCBConst2>:
 8005850:	200007d0 	.word	0x200007d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005854:	bf00      	nop
 8005856:	bf00      	nop

08005858 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005858:	4808      	ldr	r0, [pc, #32]	; (800587c <prvPortStartFirstTask+0x24>)
 800585a:	6800      	ldr	r0, [r0, #0]
 800585c:	6800      	ldr	r0, [r0, #0]
 800585e:	f380 8808 	msr	MSP, r0
 8005862:	f04f 0000 	mov.w	r0, #0
 8005866:	f380 8814 	msr	CONTROL, r0
 800586a:	b662      	cpsie	i
 800586c:	b661      	cpsie	f
 800586e:	f3bf 8f4f 	dsb	sy
 8005872:	f3bf 8f6f 	isb	sy
 8005876:	df00      	svc	0
 8005878:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800587a:	bf00      	nop
 800587c:	e000ed08 	.word	0xe000ed08

08005880 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005886:	4b46      	ldr	r3, [pc, #280]	; (80059a0 <xPortStartScheduler+0x120>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a46      	ldr	r2, [pc, #280]	; (80059a4 <xPortStartScheduler+0x124>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d10a      	bne.n	80058a6 <xPortStartScheduler+0x26>
	__asm volatile
 8005890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005894:	f383 8811 	msr	BASEPRI, r3
 8005898:	f3bf 8f6f 	isb	sy
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	613b      	str	r3, [r7, #16]
}
 80058a2:	bf00      	nop
 80058a4:	e7fe      	b.n	80058a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80058a6:	4b3e      	ldr	r3, [pc, #248]	; (80059a0 <xPortStartScheduler+0x120>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a3f      	ldr	r2, [pc, #252]	; (80059a8 <xPortStartScheduler+0x128>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d10a      	bne.n	80058c6 <xPortStartScheduler+0x46>
	__asm volatile
 80058b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b4:	f383 8811 	msr	BASEPRI, r3
 80058b8:	f3bf 8f6f 	isb	sy
 80058bc:	f3bf 8f4f 	dsb	sy
 80058c0:	60fb      	str	r3, [r7, #12]
}
 80058c2:	bf00      	nop
 80058c4:	e7fe      	b.n	80058c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80058c6:	4b39      	ldr	r3, [pc, #228]	; (80059ac <xPortStartScheduler+0x12c>)
 80058c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	22ff      	movs	r2, #255	; 0xff
 80058d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80058e0:	78fb      	ldrb	r3, [r7, #3]
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	4b31      	ldr	r3, [pc, #196]	; (80059b0 <xPortStartScheduler+0x130>)
 80058ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80058ee:	4b31      	ldr	r3, [pc, #196]	; (80059b4 <xPortStartScheduler+0x134>)
 80058f0:	2207      	movs	r2, #7
 80058f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80058f4:	e009      	b.n	800590a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80058f6:	4b2f      	ldr	r3, [pc, #188]	; (80059b4 <xPortStartScheduler+0x134>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	3b01      	subs	r3, #1
 80058fc:	4a2d      	ldr	r2, [pc, #180]	; (80059b4 <xPortStartScheduler+0x134>)
 80058fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005900:	78fb      	ldrb	r3, [r7, #3]
 8005902:	b2db      	uxtb	r3, r3
 8005904:	005b      	lsls	r3, r3, #1
 8005906:	b2db      	uxtb	r3, r3
 8005908:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800590a:	78fb      	ldrb	r3, [r7, #3]
 800590c:	b2db      	uxtb	r3, r3
 800590e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005912:	2b80      	cmp	r3, #128	; 0x80
 8005914:	d0ef      	beq.n	80058f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005916:	4b27      	ldr	r3, [pc, #156]	; (80059b4 <xPortStartScheduler+0x134>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f1c3 0307 	rsb	r3, r3, #7
 800591e:	2b04      	cmp	r3, #4
 8005920:	d00a      	beq.n	8005938 <xPortStartScheduler+0xb8>
	__asm volatile
 8005922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005926:	f383 8811 	msr	BASEPRI, r3
 800592a:	f3bf 8f6f 	isb	sy
 800592e:	f3bf 8f4f 	dsb	sy
 8005932:	60bb      	str	r3, [r7, #8]
}
 8005934:	bf00      	nop
 8005936:	e7fe      	b.n	8005936 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005938:	4b1e      	ldr	r3, [pc, #120]	; (80059b4 <xPortStartScheduler+0x134>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	021b      	lsls	r3, r3, #8
 800593e:	4a1d      	ldr	r2, [pc, #116]	; (80059b4 <xPortStartScheduler+0x134>)
 8005940:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005942:	4b1c      	ldr	r3, [pc, #112]	; (80059b4 <xPortStartScheduler+0x134>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800594a:	4a1a      	ldr	r2, [pc, #104]	; (80059b4 <xPortStartScheduler+0x134>)
 800594c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	b2da      	uxtb	r2, r3
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005956:	4b18      	ldr	r3, [pc, #96]	; (80059b8 <xPortStartScheduler+0x138>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a17      	ldr	r2, [pc, #92]	; (80059b8 <xPortStartScheduler+0x138>)
 800595c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005960:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005962:	4b15      	ldr	r3, [pc, #84]	; (80059b8 <xPortStartScheduler+0x138>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a14      	ldr	r2, [pc, #80]	; (80059b8 <xPortStartScheduler+0x138>)
 8005968:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800596c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800596e:	f000 f8dd 	bl	8005b2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005972:	4b12      	ldr	r3, [pc, #72]	; (80059bc <xPortStartScheduler+0x13c>)
 8005974:	2200      	movs	r2, #0
 8005976:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005978:	f000 f8fc 	bl	8005b74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800597c:	4b10      	ldr	r3, [pc, #64]	; (80059c0 <xPortStartScheduler+0x140>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a0f      	ldr	r2, [pc, #60]	; (80059c0 <xPortStartScheduler+0x140>)
 8005982:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005986:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005988:	f7ff ff66 	bl	8005858 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800598c:	f7ff f850 	bl	8004a30 <vTaskSwitchContext>
	prvTaskExitError();
 8005990:	f7ff ff1c 	bl	80057cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3718      	adds	r7, #24
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	e000ed00 	.word	0xe000ed00
 80059a4:	410fc271 	.word	0x410fc271
 80059a8:	410fc270 	.word	0x410fc270
 80059ac:	e000e400 	.word	0xe000e400
 80059b0:	20000dfc 	.word	0x20000dfc
 80059b4:	20000e00 	.word	0x20000e00
 80059b8:	e000ed20 	.word	0xe000ed20
 80059bc:	2000000c 	.word	0x2000000c
 80059c0:	e000ef34 	.word	0xe000ef34

080059c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
	__asm volatile
 80059ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ce:	f383 8811 	msr	BASEPRI, r3
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	f3bf 8f4f 	dsb	sy
 80059da:	607b      	str	r3, [r7, #4]
}
 80059dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80059de:	4b0f      	ldr	r3, [pc, #60]	; (8005a1c <vPortEnterCritical+0x58>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	3301      	adds	r3, #1
 80059e4:	4a0d      	ldr	r2, [pc, #52]	; (8005a1c <vPortEnterCritical+0x58>)
 80059e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80059e8:	4b0c      	ldr	r3, [pc, #48]	; (8005a1c <vPortEnterCritical+0x58>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d10f      	bne.n	8005a10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80059f0:	4b0b      	ldr	r3, [pc, #44]	; (8005a20 <vPortEnterCritical+0x5c>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00a      	beq.n	8005a10 <vPortEnterCritical+0x4c>
	__asm volatile
 80059fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fe:	f383 8811 	msr	BASEPRI, r3
 8005a02:	f3bf 8f6f 	isb	sy
 8005a06:	f3bf 8f4f 	dsb	sy
 8005a0a:	603b      	str	r3, [r7, #0]
}
 8005a0c:	bf00      	nop
 8005a0e:	e7fe      	b.n	8005a0e <vPortEnterCritical+0x4a>
	}
}
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr
 8005a1c:	2000000c 	.word	0x2000000c
 8005a20:	e000ed04 	.word	0xe000ed04

08005a24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a2a:	4b12      	ldr	r3, [pc, #72]	; (8005a74 <vPortExitCritical+0x50>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d10a      	bne.n	8005a48 <vPortExitCritical+0x24>
	__asm volatile
 8005a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a36:	f383 8811 	msr	BASEPRI, r3
 8005a3a:	f3bf 8f6f 	isb	sy
 8005a3e:	f3bf 8f4f 	dsb	sy
 8005a42:	607b      	str	r3, [r7, #4]
}
 8005a44:	bf00      	nop
 8005a46:	e7fe      	b.n	8005a46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005a48:	4b0a      	ldr	r3, [pc, #40]	; (8005a74 <vPortExitCritical+0x50>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	4a09      	ldr	r2, [pc, #36]	; (8005a74 <vPortExitCritical+0x50>)
 8005a50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005a52:	4b08      	ldr	r3, [pc, #32]	; (8005a74 <vPortExitCritical+0x50>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d105      	bne.n	8005a66 <vPortExitCritical+0x42>
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	f383 8811 	msr	BASEPRI, r3
}
 8005a64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005a66:	bf00      	nop
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	2000000c 	.word	0x2000000c
	...

08005a80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005a80:	f3ef 8009 	mrs	r0, PSP
 8005a84:	f3bf 8f6f 	isb	sy
 8005a88:	4b15      	ldr	r3, [pc, #84]	; (8005ae0 <pxCurrentTCBConst>)
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	f01e 0f10 	tst.w	lr, #16
 8005a90:	bf08      	it	eq
 8005a92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005a96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a9a:	6010      	str	r0, [r2, #0]
 8005a9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005aa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005aa4:	f380 8811 	msr	BASEPRI, r0
 8005aa8:	f3bf 8f4f 	dsb	sy
 8005aac:	f3bf 8f6f 	isb	sy
 8005ab0:	f7fe ffbe 	bl	8004a30 <vTaskSwitchContext>
 8005ab4:	f04f 0000 	mov.w	r0, #0
 8005ab8:	f380 8811 	msr	BASEPRI, r0
 8005abc:	bc09      	pop	{r0, r3}
 8005abe:	6819      	ldr	r1, [r3, #0]
 8005ac0:	6808      	ldr	r0, [r1, #0]
 8005ac2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ac6:	f01e 0f10 	tst.w	lr, #16
 8005aca:	bf08      	it	eq
 8005acc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005ad0:	f380 8809 	msr	PSP, r0
 8005ad4:	f3bf 8f6f 	isb	sy
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	f3af 8000 	nop.w

08005ae0 <pxCurrentTCBConst>:
 8005ae0:	200007d0 	.word	0x200007d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005ae4:	bf00      	nop
 8005ae6:	bf00      	nop

08005ae8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
	__asm volatile
 8005aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af2:	f383 8811 	msr	BASEPRI, r3
 8005af6:	f3bf 8f6f 	isb	sy
 8005afa:	f3bf 8f4f 	dsb	sy
 8005afe:	607b      	str	r3, [r7, #4]
}
 8005b00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b02:	f7fe fedb 	bl	80048bc <xTaskIncrementTick>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d003      	beq.n	8005b14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b0c:	4b06      	ldr	r3, [pc, #24]	; (8005b28 <xPortSysTickHandler+0x40>)
 8005b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b12:	601a      	str	r2, [r3, #0]
 8005b14:	2300      	movs	r3, #0
 8005b16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	f383 8811 	msr	BASEPRI, r3
}
 8005b1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b20:	bf00      	nop
 8005b22:	3708      	adds	r7, #8
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	e000ed04 	.word	0xe000ed04

08005b2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b30:	4b0b      	ldr	r3, [pc, #44]	; (8005b60 <vPortSetupTimerInterrupt+0x34>)
 8005b32:	2200      	movs	r2, #0
 8005b34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b36:	4b0b      	ldr	r3, [pc, #44]	; (8005b64 <vPortSetupTimerInterrupt+0x38>)
 8005b38:	2200      	movs	r2, #0
 8005b3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b3c:	4b0a      	ldr	r3, [pc, #40]	; (8005b68 <vPortSetupTimerInterrupt+0x3c>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a0a      	ldr	r2, [pc, #40]	; (8005b6c <vPortSetupTimerInterrupt+0x40>)
 8005b42:	fba2 2303 	umull	r2, r3, r2, r3
 8005b46:	099b      	lsrs	r3, r3, #6
 8005b48:	4a09      	ldr	r2, [pc, #36]	; (8005b70 <vPortSetupTimerInterrupt+0x44>)
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b4e:	4b04      	ldr	r3, [pc, #16]	; (8005b60 <vPortSetupTimerInterrupt+0x34>)
 8005b50:	2207      	movs	r2, #7
 8005b52:	601a      	str	r2, [r3, #0]
}
 8005b54:	bf00      	nop
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	e000e010 	.word	0xe000e010
 8005b64:	e000e018 	.word	0xe000e018
 8005b68:	20000000 	.word	0x20000000
 8005b6c:	10624dd3 	.word	0x10624dd3
 8005b70:	e000e014 	.word	0xe000e014

08005b74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005b74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005b84 <vPortEnableVFP+0x10>
 8005b78:	6801      	ldr	r1, [r0, #0]
 8005b7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005b7e:	6001      	str	r1, [r0, #0]
 8005b80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005b82:	bf00      	nop
 8005b84:	e000ed88 	.word	0xe000ed88

08005b88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005b8e:	f3ef 8305 	mrs	r3, IPSR
 8005b92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2b0f      	cmp	r3, #15
 8005b98:	d914      	bls.n	8005bc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005b9a:	4a17      	ldr	r2, [pc, #92]	; (8005bf8 <vPortValidateInterruptPriority+0x70>)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005ba4:	4b15      	ldr	r3, [pc, #84]	; (8005bfc <vPortValidateInterruptPriority+0x74>)
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	7afa      	ldrb	r2, [r7, #11]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d20a      	bcs.n	8005bc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb2:	f383 8811 	msr	BASEPRI, r3
 8005bb6:	f3bf 8f6f 	isb	sy
 8005bba:	f3bf 8f4f 	dsb	sy
 8005bbe:	607b      	str	r3, [r7, #4]
}
 8005bc0:	bf00      	nop
 8005bc2:	e7fe      	b.n	8005bc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005bc4:	4b0e      	ldr	r3, [pc, #56]	; (8005c00 <vPortValidateInterruptPriority+0x78>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005bcc:	4b0d      	ldr	r3, [pc, #52]	; (8005c04 <vPortValidateInterruptPriority+0x7c>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d90a      	bls.n	8005bea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd8:	f383 8811 	msr	BASEPRI, r3
 8005bdc:	f3bf 8f6f 	isb	sy
 8005be0:	f3bf 8f4f 	dsb	sy
 8005be4:	603b      	str	r3, [r7, #0]
}
 8005be6:	bf00      	nop
 8005be8:	e7fe      	b.n	8005be8 <vPortValidateInterruptPriority+0x60>
	}
 8005bea:	bf00      	nop
 8005bec:	3714      	adds	r7, #20
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	e000e3f0 	.word	0xe000e3f0
 8005bfc:	20000dfc 	.word	0x20000dfc
 8005c00:	e000ed0c 	.word	0xe000ed0c
 8005c04:	20000e00 	.word	0x20000e00

08005c08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b08a      	sub	sp, #40	; 0x28
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c10:	2300      	movs	r3, #0
 8005c12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c14:	f7fe fd96 	bl	8004744 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c18:	4b5b      	ldr	r3, [pc, #364]	; (8005d88 <pvPortMalloc+0x180>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d101      	bne.n	8005c24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c20:	f000 f920 	bl	8005e64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c24:	4b59      	ldr	r3, [pc, #356]	; (8005d8c <pvPortMalloc+0x184>)
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	f040 8093 	bne.w	8005d58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d01d      	beq.n	8005c74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005c38:	2208      	movs	r2, #8
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f003 0307 	and.w	r3, r3, #7
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d014      	beq.n	8005c74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f023 0307 	bic.w	r3, r3, #7
 8005c50:	3308      	adds	r3, #8
 8005c52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f003 0307 	and.w	r3, r3, #7
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00a      	beq.n	8005c74 <pvPortMalloc+0x6c>
	__asm volatile
 8005c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c62:	f383 8811 	msr	BASEPRI, r3
 8005c66:	f3bf 8f6f 	isb	sy
 8005c6a:	f3bf 8f4f 	dsb	sy
 8005c6e:	617b      	str	r3, [r7, #20]
}
 8005c70:	bf00      	nop
 8005c72:	e7fe      	b.n	8005c72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d06e      	beq.n	8005d58 <pvPortMalloc+0x150>
 8005c7a:	4b45      	ldr	r3, [pc, #276]	; (8005d90 <pvPortMalloc+0x188>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d869      	bhi.n	8005d58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005c84:	4b43      	ldr	r3, [pc, #268]	; (8005d94 <pvPortMalloc+0x18c>)
 8005c86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005c88:	4b42      	ldr	r3, [pc, #264]	; (8005d94 <pvPortMalloc+0x18c>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c8e:	e004      	b.n	8005c9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d903      	bls.n	8005cac <pvPortMalloc+0xa4>
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1f1      	bne.n	8005c90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005cac:	4b36      	ldr	r3, [pc, #216]	; (8005d88 <pvPortMalloc+0x180>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d050      	beq.n	8005d58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005cb6:	6a3b      	ldr	r3, [r7, #32]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2208      	movs	r2, #8
 8005cbc:	4413      	add	r3, r2
 8005cbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	6a3b      	ldr	r3, [r7, #32]
 8005cc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cca:	685a      	ldr	r2, [r3, #4]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	1ad2      	subs	r2, r2, r3
 8005cd0:	2308      	movs	r3, #8
 8005cd2:	005b      	lsls	r3, r3, #1
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d91f      	bls.n	8005d18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4413      	add	r3, r2
 8005cde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	f003 0307 	and.w	r3, r3, #7
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00a      	beq.n	8005d00 <pvPortMalloc+0xf8>
	__asm volatile
 8005cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cee:	f383 8811 	msr	BASEPRI, r3
 8005cf2:	f3bf 8f6f 	isb	sy
 8005cf6:	f3bf 8f4f 	dsb	sy
 8005cfa:	613b      	str	r3, [r7, #16]
}
 8005cfc:	bf00      	nop
 8005cfe:	e7fe      	b.n	8005cfe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d02:	685a      	ldr	r2, [r3, #4]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	1ad2      	subs	r2, r2, r3
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d12:	69b8      	ldr	r0, [r7, #24]
 8005d14:	f000 f908 	bl	8005f28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d18:	4b1d      	ldr	r3, [pc, #116]	; (8005d90 <pvPortMalloc+0x188>)
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	4a1b      	ldr	r2, [pc, #108]	; (8005d90 <pvPortMalloc+0x188>)
 8005d24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d26:	4b1a      	ldr	r3, [pc, #104]	; (8005d90 <pvPortMalloc+0x188>)
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	4b1b      	ldr	r3, [pc, #108]	; (8005d98 <pvPortMalloc+0x190>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d203      	bcs.n	8005d3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d32:	4b17      	ldr	r3, [pc, #92]	; (8005d90 <pvPortMalloc+0x188>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a18      	ldr	r2, [pc, #96]	; (8005d98 <pvPortMalloc+0x190>)
 8005d38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	4b13      	ldr	r3, [pc, #76]	; (8005d8c <pvPortMalloc+0x184>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	431a      	orrs	r2, r3
 8005d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005d4e:	4b13      	ldr	r3, [pc, #76]	; (8005d9c <pvPortMalloc+0x194>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	3301      	adds	r3, #1
 8005d54:	4a11      	ldr	r2, [pc, #68]	; (8005d9c <pvPortMalloc+0x194>)
 8005d56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005d58:	f7fe fd02 	bl	8004760 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	f003 0307 	and.w	r3, r3, #7
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00a      	beq.n	8005d7c <pvPortMalloc+0x174>
	__asm volatile
 8005d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6a:	f383 8811 	msr	BASEPRI, r3
 8005d6e:	f3bf 8f6f 	isb	sy
 8005d72:	f3bf 8f4f 	dsb	sy
 8005d76:	60fb      	str	r3, [r7, #12]
}
 8005d78:	bf00      	nop
 8005d7a:	e7fe      	b.n	8005d7a <pvPortMalloc+0x172>
	return pvReturn;
 8005d7c:	69fb      	ldr	r3, [r7, #28]
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3728      	adds	r7, #40	; 0x28
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	20004a0c 	.word	0x20004a0c
 8005d8c:	20004a20 	.word	0x20004a20
 8005d90:	20004a10 	.word	0x20004a10
 8005d94:	20004a04 	.word	0x20004a04
 8005d98:	20004a14 	.word	0x20004a14
 8005d9c:	20004a18 	.word	0x20004a18

08005da0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d04d      	beq.n	8005e4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005db2:	2308      	movs	r3, #8
 8005db4:	425b      	negs	r3, r3
 8005db6:	697a      	ldr	r2, [r7, #20]
 8005db8:	4413      	add	r3, r2
 8005dba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	685a      	ldr	r2, [r3, #4]
 8005dc4:	4b24      	ldr	r3, [pc, #144]	; (8005e58 <vPortFree+0xb8>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4013      	ands	r3, r2
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d10a      	bne.n	8005de4 <vPortFree+0x44>
	__asm volatile
 8005dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd2:	f383 8811 	msr	BASEPRI, r3
 8005dd6:	f3bf 8f6f 	isb	sy
 8005dda:	f3bf 8f4f 	dsb	sy
 8005dde:	60fb      	str	r3, [r7, #12]
}
 8005de0:	bf00      	nop
 8005de2:	e7fe      	b.n	8005de2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00a      	beq.n	8005e02 <vPortFree+0x62>
	__asm volatile
 8005dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df0:	f383 8811 	msr	BASEPRI, r3
 8005df4:	f3bf 8f6f 	isb	sy
 8005df8:	f3bf 8f4f 	dsb	sy
 8005dfc:	60bb      	str	r3, [r7, #8]
}
 8005dfe:	bf00      	nop
 8005e00:	e7fe      	b.n	8005e00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	685a      	ldr	r2, [r3, #4]
 8005e06:	4b14      	ldr	r3, [pc, #80]	; (8005e58 <vPortFree+0xb8>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d01e      	beq.n	8005e4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d11a      	bne.n	8005e4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	685a      	ldr	r2, [r3, #4]
 8005e1c:	4b0e      	ldr	r3, [pc, #56]	; (8005e58 <vPortFree+0xb8>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	43db      	mvns	r3, r3
 8005e22:	401a      	ands	r2, r3
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e28:	f7fe fc8c 	bl	8004744 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	4b0a      	ldr	r3, [pc, #40]	; (8005e5c <vPortFree+0xbc>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4413      	add	r3, r2
 8005e36:	4a09      	ldr	r2, [pc, #36]	; (8005e5c <vPortFree+0xbc>)
 8005e38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e3a:	6938      	ldr	r0, [r7, #16]
 8005e3c:	f000 f874 	bl	8005f28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005e40:	4b07      	ldr	r3, [pc, #28]	; (8005e60 <vPortFree+0xc0>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	3301      	adds	r3, #1
 8005e46:	4a06      	ldr	r2, [pc, #24]	; (8005e60 <vPortFree+0xc0>)
 8005e48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005e4a:	f7fe fc89 	bl	8004760 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005e4e:	bf00      	nop
 8005e50:	3718      	adds	r7, #24
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	20004a20 	.word	0x20004a20
 8005e5c:	20004a10 	.word	0x20004a10
 8005e60:	20004a1c 	.word	0x20004a1c

08005e64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005e6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005e6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005e70:	4b27      	ldr	r3, [pc, #156]	; (8005f10 <prvHeapInit+0xac>)
 8005e72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f003 0307 	and.w	r3, r3, #7
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00c      	beq.n	8005e98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	3307      	adds	r3, #7
 8005e82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f023 0307 	bic.w	r3, r3, #7
 8005e8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005e8c:	68ba      	ldr	r2, [r7, #8]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	4a1f      	ldr	r2, [pc, #124]	; (8005f10 <prvHeapInit+0xac>)
 8005e94:	4413      	add	r3, r2
 8005e96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e9c:	4a1d      	ldr	r2, [pc, #116]	; (8005f14 <prvHeapInit+0xb0>)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005ea2:	4b1c      	ldr	r3, [pc, #112]	; (8005f14 <prvHeapInit+0xb0>)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	4413      	add	r3, r2
 8005eae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005eb0:	2208      	movs	r2, #8
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	1a9b      	subs	r3, r3, r2
 8005eb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f023 0307 	bic.w	r3, r3, #7
 8005ebe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	4a15      	ldr	r2, [pc, #84]	; (8005f18 <prvHeapInit+0xb4>)
 8005ec4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005ec6:	4b14      	ldr	r3, [pc, #80]	; (8005f18 <prvHeapInit+0xb4>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005ece:	4b12      	ldr	r3, [pc, #72]	; (8005f18 <prvHeapInit+0xb4>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	1ad2      	subs	r2, r2, r3
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ee4:	4b0c      	ldr	r3, [pc, #48]	; (8005f18 <prvHeapInit+0xb4>)
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	4a0a      	ldr	r2, [pc, #40]	; (8005f1c <prvHeapInit+0xb8>)
 8005ef2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	4a09      	ldr	r2, [pc, #36]	; (8005f20 <prvHeapInit+0xbc>)
 8005efa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005efc:	4b09      	ldr	r3, [pc, #36]	; (8005f24 <prvHeapInit+0xc0>)
 8005efe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005f02:	601a      	str	r2, [r3, #0]
}
 8005f04:	bf00      	nop
 8005f06:	3714      	adds	r7, #20
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr
 8005f10:	20000e04 	.word	0x20000e04
 8005f14:	20004a04 	.word	0x20004a04
 8005f18:	20004a0c 	.word	0x20004a0c
 8005f1c:	20004a14 	.word	0x20004a14
 8005f20:	20004a10 	.word	0x20004a10
 8005f24:	20004a20 	.word	0x20004a20

08005f28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f30:	4b28      	ldr	r3, [pc, #160]	; (8005fd4 <prvInsertBlockIntoFreeList+0xac>)
 8005f32:	60fb      	str	r3, [r7, #12]
 8005f34:	e002      	b.n	8005f3c <prvInsertBlockIntoFreeList+0x14>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	60fb      	str	r3, [r7, #12]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d8f7      	bhi.n	8005f36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	68ba      	ldr	r2, [r7, #8]
 8005f50:	4413      	add	r3, r2
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d108      	bne.n	8005f6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	441a      	add	r2, r3
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	441a      	add	r2, r3
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d118      	bne.n	8005fb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	4b15      	ldr	r3, [pc, #84]	; (8005fd8 <prvInsertBlockIntoFreeList+0xb0>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d00d      	beq.n	8005fa6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685a      	ldr	r2, [r3, #4]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	441a      	add	r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	601a      	str	r2, [r3, #0]
 8005fa4:	e008      	b.n	8005fb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005fa6:	4b0c      	ldr	r3, [pc, #48]	; (8005fd8 <prvInsertBlockIntoFreeList+0xb0>)
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	601a      	str	r2, [r3, #0]
 8005fae:	e003      	b.n	8005fb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d002      	beq.n	8005fc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fc6:	bf00      	nop
 8005fc8:	3714      	adds	r7, #20
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	20004a04 	.word	0x20004a04
 8005fd8:	20004a0c 	.word	0x20004a0c

08005fdc <memset>:
 8005fdc:	4402      	add	r2, r0
 8005fde:	4603      	mov	r3, r0
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d100      	bne.n	8005fe6 <memset+0xa>
 8005fe4:	4770      	bx	lr
 8005fe6:	f803 1b01 	strb.w	r1, [r3], #1
 8005fea:	e7f9      	b.n	8005fe0 <memset+0x4>

08005fec <__libc_init_array>:
 8005fec:	b570      	push	{r4, r5, r6, lr}
 8005fee:	4d0d      	ldr	r5, [pc, #52]	; (8006024 <__libc_init_array+0x38>)
 8005ff0:	4c0d      	ldr	r4, [pc, #52]	; (8006028 <__libc_init_array+0x3c>)
 8005ff2:	1b64      	subs	r4, r4, r5
 8005ff4:	10a4      	asrs	r4, r4, #2
 8005ff6:	2600      	movs	r6, #0
 8005ff8:	42a6      	cmp	r6, r4
 8005ffa:	d109      	bne.n	8006010 <__libc_init_array+0x24>
 8005ffc:	4d0b      	ldr	r5, [pc, #44]	; (800602c <__libc_init_array+0x40>)
 8005ffe:	4c0c      	ldr	r4, [pc, #48]	; (8006030 <__libc_init_array+0x44>)
 8006000:	f000 fda4 	bl	8006b4c <_init>
 8006004:	1b64      	subs	r4, r4, r5
 8006006:	10a4      	asrs	r4, r4, #2
 8006008:	2600      	movs	r6, #0
 800600a:	42a6      	cmp	r6, r4
 800600c:	d105      	bne.n	800601a <__libc_init_array+0x2e>
 800600e:	bd70      	pop	{r4, r5, r6, pc}
 8006010:	f855 3b04 	ldr.w	r3, [r5], #4
 8006014:	4798      	blx	r3
 8006016:	3601      	adds	r6, #1
 8006018:	e7ee      	b.n	8005ff8 <__libc_init_array+0xc>
 800601a:	f855 3b04 	ldr.w	r3, [r5], #4
 800601e:	4798      	blx	r3
 8006020:	3601      	adds	r6, #1
 8006022:	e7f2      	b.n	800600a <__libc_init_array+0x1e>
 8006024:	08007044 	.word	0x08007044
 8006028:	08007044 	.word	0x08007044
 800602c:	08007044 	.word	0x08007044
 8006030:	08007048 	.word	0x08007048

08006034 <memcpy>:
 8006034:	440a      	add	r2, r1
 8006036:	4291      	cmp	r1, r2
 8006038:	f100 33ff 	add.w	r3, r0, #4294967295
 800603c:	d100      	bne.n	8006040 <memcpy+0xc>
 800603e:	4770      	bx	lr
 8006040:	b510      	push	{r4, lr}
 8006042:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006046:	f803 4f01 	strb.w	r4, [r3, #1]!
 800604a:	4291      	cmp	r1, r2
 800604c:	d1f9      	bne.n	8006042 <memcpy+0xe>
 800604e:	bd10      	pop	{r4, pc}

08006050 <cosf>:
 8006050:	ee10 3a10 	vmov	r3, s0
 8006054:	b507      	push	{r0, r1, r2, lr}
 8006056:	4a1e      	ldr	r2, [pc, #120]	; (80060d0 <cosf+0x80>)
 8006058:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800605c:	4293      	cmp	r3, r2
 800605e:	dc06      	bgt.n	800606e <cosf+0x1e>
 8006060:	eddf 0a1c 	vldr	s1, [pc, #112]	; 80060d4 <cosf+0x84>
 8006064:	b003      	add	sp, #12
 8006066:	f85d eb04 	ldr.w	lr, [sp], #4
 800606a:	f000 b87b 	b.w	8006164 <__kernel_cosf>
 800606e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006072:	db04      	blt.n	800607e <cosf+0x2e>
 8006074:	ee30 0a40 	vsub.f32	s0, s0, s0
 8006078:	b003      	add	sp, #12
 800607a:	f85d fb04 	ldr.w	pc, [sp], #4
 800607e:	4668      	mov	r0, sp
 8006080:	f000 f916 	bl	80062b0 <__ieee754_rem_pio2f>
 8006084:	f000 0003 	and.w	r0, r0, #3
 8006088:	2801      	cmp	r0, #1
 800608a:	d009      	beq.n	80060a0 <cosf+0x50>
 800608c:	2802      	cmp	r0, #2
 800608e:	d010      	beq.n	80060b2 <cosf+0x62>
 8006090:	b9b0      	cbnz	r0, 80060c0 <cosf+0x70>
 8006092:	eddd 0a01 	vldr	s1, [sp, #4]
 8006096:	ed9d 0a00 	vldr	s0, [sp]
 800609a:	f000 f863 	bl	8006164 <__kernel_cosf>
 800609e:	e7eb      	b.n	8006078 <cosf+0x28>
 80060a0:	eddd 0a01 	vldr	s1, [sp, #4]
 80060a4:	ed9d 0a00 	vldr	s0, [sp]
 80060a8:	f000 f8ba 	bl	8006220 <__kernel_sinf>
 80060ac:	eeb1 0a40 	vneg.f32	s0, s0
 80060b0:	e7e2      	b.n	8006078 <cosf+0x28>
 80060b2:	eddd 0a01 	vldr	s1, [sp, #4]
 80060b6:	ed9d 0a00 	vldr	s0, [sp]
 80060ba:	f000 f853 	bl	8006164 <__kernel_cosf>
 80060be:	e7f5      	b.n	80060ac <cosf+0x5c>
 80060c0:	eddd 0a01 	vldr	s1, [sp, #4]
 80060c4:	ed9d 0a00 	vldr	s0, [sp]
 80060c8:	2001      	movs	r0, #1
 80060ca:	f000 f8a9 	bl	8006220 <__kernel_sinf>
 80060ce:	e7d3      	b.n	8006078 <cosf+0x28>
 80060d0:	3f490fd8 	.word	0x3f490fd8
 80060d4:	00000000 	.word	0x00000000

080060d8 <sinf>:
 80060d8:	ee10 3a10 	vmov	r3, s0
 80060dc:	b507      	push	{r0, r1, r2, lr}
 80060de:	4a1f      	ldr	r2, [pc, #124]	; (800615c <sinf+0x84>)
 80060e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060e4:	4293      	cmp	r3, r2
 80060e6:	dc07      	bgt.n	80060f8 <sinf+0x20>
 80060e8:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8006160 <sinf+0x88>
 80060ec:	2000      	movs	r0, #0
 80060ee:	b003      	add	sp, #12
 80060f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80060f4:	f000 b894 	b.w	8006220 <__kernel_sinf>
 80060f8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80060fc:	db04      	blt.n	8006108 <sinf+0x30>
 80060fe:	ee30 0a40 	vsub.f32	s0, s0, s0
 8006102:	b003      	add	sp, #12
 8006104:	f85d fb04 	ldr.w	pc, [sp], #4
 8006108:	4668      	mov	r0, sp
 800610a:	f000 f8d1 	bl	80062b0 <__ieee754_rem_pio2f>
 800610e:	f000 0003 	and.w	r0, r0, #3
 8006112:	2801      	cmp	r0, #1
 8006114:	d00a      	beq.n	800612c <sinf+0x54>
 8006116:	2802      	cmp	r0, #2
 8006118:	d00f      	beq.n	800613a <sinf+0x62>
 800611a:	b9c0      	cbnz	r0, 800614e <sinf+0x76>
 800611c:	eddd 0a01 	vldr	s1, [sp, #4]
 8006120:	ed9d 0a00 	vldr	s0, [sp]
 8006124:	2001      	movs	r0, #1
 8006126:	f000 f87b 	bl	8006220 <__kernel_sinf>
 800612a:	e7ea      	b.n	8006102 <sinf+0x2a>
 800612c:	eddd 0a01 	vldr	s1, [sp, #4]
 8006130:	ed9d 0a00 	vldr	s0, [sp]
 8006134:	f000 f816 	bl	8006164 <__kernel_cosf>
 8006138:	e7e3      	b.n	8006102 <sinf+0x2a>
 800613a:	eddd 0a01 	vldr	s1, [sp, #4]
 800613e:	ed9d 0a00 	vldr	s0, [sp]
 8006142:	2001      	movs	r0, #1
 8006144:	f000 f86c 	bl	8006220 <__kernel_sinf>
 8006148:	eeb1 0a40 	vneg.f32	s0, s0
 800614c:	e7d9      	b.n	8006102 <sinf+0x2a>
 800614e:	eddd 0a01 	vldr	s1, [sp, #4]
 8006152:	ed9d 0a00 	vldr	s0, [sp]
 8006156:	f000 f805 	bl	8006164 <__kernel_cosf>
 800615a:	e7f5      	b.n	8006148 <sinf+0x70>
 800615c:	3f490fd8 	.word	0x3f490fd8
 8006160:	00000000 	.word	0x00000000

08006164 <__kernel_cosf>:
 8006164:	ee10 3a10 	vmov	r3, s0
 8006168:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800616c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8006170:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006174:	da05      	bge.n	8006182 <__kernel_cosf+0x1e>
 8006176:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800617a:	ee17 2a90 	vmov	r2, s15
 800617e:	2a00      	cmp	r2, #0
 8006180:	d03b      	beq.n	80061fa <__kernel_cosf+0x96>
 8006182:	ee20 7a00 	vmul.f32	s14, s0, s0
 8006186:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8006200 <__kernel_cosf+0x9c>
 800618a:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8006204 <__kernel_cosf+0xa0>
 800618e:	4a1e      	ldr	r2, [pc, #120]	; (8006208 <__kernel_cosf+0xa4>)
 8006190:	eea7 6a27 	vfma.f32	s12, s14, s15
 8006194:	4293      	cmp	r3, r2
 8006196:	eddf 7a1d 	vldr	s15, [pc, #116]	; 800620c <__kernel_cosf+0xa8>
 800619a:	eee6 7a07 	vfma.f32	s15, s12, s14
 800619e:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8006210 <__kernel_cosf+0xac>
 80061a2:	eea7 6a87 	vfma.f32	s12, s15, s14
 80061a6:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8006214 <__kernel_cosf+0xb0>
 80061aa:	eee6 7a07 	vfma.f32	s15, s12, s14
 80061ae:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8006218 <__kernel_cosf+0xb4>
 80061b2:	eea7 6a87 	vfma.f32	s12, s15, s14
 80061b6:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80061ba:	ee26 6a07 	vmul.f32	s12, s12, s14
 80061be:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80061c2:	eee7 0a06 	vfma.f32	s1, s14, s12
 80061c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ca:	dc04      	bgt.n	80061d6 <__kernel_cosf+0x72>
 80061cc:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80061d0:	ee36 0ae7 	vsub.f32	s0, s13, s15
 80061d4:	4770      	bx	lr
 80061d6:	4a11      	ldr	r2, [pc, #68]	; (800621c <__kernel_cosf+0xb8>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	bfda      	itte	le
 80061dc:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80061e0:	ee07 3a10 	vmovle	s14, r3
 80061e4:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 80061e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80061ec:	ee36 0ac7 	vsub.f32	s0, s13, s14
 80061f0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80061f4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80061f8:	4770      	bx	lr
 80061fa:	eeb0 0a66 	vmov.f32	s0, s13
 80061fe:	4770      	bx	lr
 8006200:	ad47d74e 	.word	0xad47d74e
 8006204:	310f74f6 	.word	0x310f74f6
 8006208:	3e999999 	.word	0x3e999999
 800620c:	b493f27c 	.word	0xb493f27c
 8006210:	37d00d01 	.word	0x37d00d01
 8006214:	bab60b61 	.word	0xbab60b61
 8006218:	3d2aaaab 	.word	0x3d2aaaab
 800621c:	3f480000 	.word	0x3f480000

08006220 <__kernel_sinf>:
 8006220:	ee10 3a10 	vmov	r3, s0
 8006224:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006228:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800622c:	da04      	bge.n	8006238 <__kernel_sinf+0x18>
 800622e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006232:	ee17 3a90 	vmov	r3, s15
 8006236:	b35b      	cbz	r3, 8006290 <__kernel_sinf+0x70>
 8006238:	ee20 7a00 	vmul.f32	s14, s0, s0
 800623c:	eddf 7a15 	vldr	s15, [pc, #84]	; 8006294 <__kernel_sinf+0x74>
 8006240:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8006298 <__kernel_sinf+0x78>
 8006244:	eea7 6a27 	vfma.f32	s12, s14, s15
 8006248:	eddf 7a14 	vldr	s15, [pc, #80]	; 800629c <__kernel_sinf+0x7c>
 800624c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8006250:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80062a0 <__kernel_sinf+0x80>
 8006254:	eea7 6a87 	vfma.f32	s12, s15, s14
 8006258:	eddf 7a12 	vldr	s15, [pc, #72]	; 80062a4 <__kernel_sinf+0x84>
 800625c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8006260:	eee6 7a07 	vfma.f32	s15, s12, s14
 8006264:	b930      	cbnz	r0, 8006274 <__kernel_sinf+0x54>
 8006266:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80062a8 <__kernel_sinf+0x88>
 800626a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800626e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8006272:	4770      	bx	lr
 8006274:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8006278:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800627c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8006280:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8006284:	eddf 7a09 	vldr	s15, [pc, #36]	; 80062ac <__kernel_sinf+0x8c>
 8006288:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800628c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	2f2ec9d3 	.word	0x2f2ec9d3
 8006298:	b2d72f34 	.word	0xb2d72f34
 800629c:	3638ef1b 	.word	0x3638ef1b
 80062a0:	b9500d01 	.word	0xb9500d01
 80062a4:	3c088889 	.word	0x3c088889
 80062a8:	be2aaaab 	.word	0xbe2aaaab
 80062ac:	3e2aaaab 	.word	0x3e2aaaab

080062b0 <__ieee754_rem_pio2f>:
 80062b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062b2:	ee10 6a10 	vmov	r6, s0
 80062b6:	4b86      	ldr	r3, [pc, #536]	; (80064d0 <__ieee754_rem_pio2f+0x220>)
 80062b8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80062bc:	429d      	cmp	r5, r3
 80062be:	b087      	sub	sp, #28
 80062c0:	4604      	mov	r4, r0
 80062c2:	dc05      	bgt.n	80062d0 <__ieee754_rem_pio2f+0x20>
 80062c4:	2300      	movs	r3, #0
 80062c6:	ed80 0a00 	vstr	s0, [r0]
 80062ca:	6043      	str	r3, [r0, #4]
 80062cc:	2000      	movs	r0, #0
 80062ce:	e020      	b.n	8006312 <__ieee754_rem_pio2f+0x62>
 80062d0:	4b80      	ldr	r3, [pc, #512]	; (80064d4 <__ieee754_rem_pio2f+0x224>)
 80062d2:	429d      	cmp	r5, r3
 80062d4:	dc38      	bgt.n	8006348 <__ieee754_rem_pio2f+0x98>
 80062d6:	2e00      	cmp	r6, #0
 80062d8:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80064d8 <__ieee754_rem_pio2f+0x228>
 80062dc:	4b7f      	ldr	r3, [pc, #508]	; (80064dc <__ieee754_rem_pio2f+0x22c>)
 80062de:	f025 050f 	bic.w	r5, r5, #15
 80062e2:	dd18      	ble.n	8006316 <__ieee754_rem_pio2f+0x66>
 80062e4:	429d      	cmp	r5, r3
 80062e6:	ee70 7a47 	vsub.f32	s15, s0, s14
 80062ea:	bf09      	itett	eq
 80062ec:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 80064e0 <__ieee754_rem_pio2f+0x230>
 80062f0:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 80064e4 <__ieee754_rem_pio2f+0x234>
 80062f4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80062f8:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 80064e8 <__ieee754_rem_pio2f+0x238>
 80062fc:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8006300:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006304:	edc0 6a00 	vstr	s13, [r0]
 8006308:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800630c:	edc0 7a01 	vstr	s15, [r0, #4]
 8006310:	2001      	movs	r0, #1
 8006312:	b007      	add	sp, #28
 8006314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006316:	429d      	cmp	r5, r3
 8006318:	ee70 7a07 	vadd.f32	s15, s0, s14
 800631c:	bf09      	itett	eq
 800631e:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 80064e0 <__ieee754_rem_pio2f+0x230>
 8006322:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 80064e4 <__ieee754_rem_pio2f+0x234>
 8006326:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800632a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 80064e8 <__ieee754_rem_pio2f+0x238>
 800632e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8006332:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006336:	edc0 6a00 	vstr	s13, [r0]
 800633a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800633e:	edc0 7a01 	vstr	s15, [r0, #4]
 8006342:	f04f 30ff 	mov.w	r0, #4294967295
 8006346:	e7e4      	b.n	8006312 <__ieee754_rem_pio2f+0x62>
 8006348:	4b68      	ldr	r3, [pc, #416]	; (80064ec <__ieee754_rem_pio2f+0x23c>)
 800634a:	429d      	cmp	r5, r3
 800634c:	dc71      	bgt.n	8006432 <__ieee754_rem_pio2f+0x182>
 800634e:	f000 f8db 	bl	8006508 <fabsf>
 8006352:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80064f0 <__ieee754_rem_pio2f+0x240>
 8006356:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800635a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800635e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006362:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006366:	ee17 0a90 	vmov	r0, s15
 800636a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80064d8 <__ieee754_rem_pio2f+0x228>
 800636e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8006372:	281f      	cmp	r0, #31
 8006374:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80064e4 <__ieee754_rem_pio2f+0x234>
 8006378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800637c:	eeb1 6a47 	vneg.f32	s12, s14
 8006380:	ee70 6a67 	vsub.f32	s13, s0, s15
 8006384:	ee16 2a90 	vmov	r2, s13
 8006388:	dc1c      	bgt.n	80063c4 <__ieee754_rem_pio2f+0x114>
 800638a:	495a      	ldr	r1, [pc, #360]	; (80064f4 <__ieee754_rem_pio2f+0x244>)
 800638c:	1e47      	subs	r7, r0, #1
 800638e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8006392:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8006396:	428b      	cmp	r3, r1
 8006398:	d014      	beq.n	80063c4 <__ieee754_rem_pio2f+0x114>
 800639a:	6022      	str	r2, [r4, #0]
 800639c:	ed94 7a00 	vldr	s14, [r4]
 80063a0:	ee30 0a47 	vsub.f32	s0, s0, s14
 80063a4:	2e00      	cmp	r6, #0
 80063a6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80063aa:	ed84 0a01 	vstr	s0, [r4, #4]
 80063ae:	dab0      	bge.n	8006312 <__ieee754_rem_pio2f+0x62>
 80063b0:	eeb1 7a47 	vneg.f32	s14, s14
 80063b4:	eeb1 0a40 	vneg.f32	s0, s0
 80063b8:	ed84 7a00 	vstr	s14, [r4]
 80063bc:	ed84 0a01 	vstr	s0, [r4, #4]
 80063c0:	4240      	negs	r0, r0
 80063c2:	e7a6      	b.n	8006312 <__ieee754_rem_pio2f+0x62>
 80063c4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80063c8:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 80063cc:	2908      	cmp	r1, #8
 80063ce:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80063d2:	dde2      	ble.n	800639a <__ieee754_rem_pio2f+0xea>
 80063d4:	eddf 5a42 	vldr	s11, [pc, #264]	; 80064e0 <__ieee754_rem_pio2f+0x230>
 80063d8:	eef0 6a40 	vmov.f32	s13, s0
 80063dc:	eee6 6a25 	vfma.f32	s13, s12, s11
 80063e0:	ee70 7a66 	vsub.f32	s15, s0, s13
 80063e4:	eee6 7a25 	vfma.f32	s15, s12, s11
 80063e8:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80064e8 <__ieee754_rem_pio2f+0x238>
 80063ec:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80063f0:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80063f4:	ee15 2a90 	vmov	r2, s11
 80063f8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80063fc:	1a5b      	subs	r3, r3, r1
 80063fe:	2b19      	cmp	r3, #25
 8006400:	dc04      	bgt.n	800640c <__ieee754_rem_pio2f+0x15c>
 8006402:	edc4 5a00 	vstr	s11, [r4]
 8006406:	eeb0 0a66 	vmov.f32	s0, s13
 800640a:	e7c7      	b.n	800639c <__ieee754_rem_pio2f+0xec>
 800640c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80064f8 <__ieee754_rem_pio2f+0x248>
 8006410:	eeb0 0a66 	vmov.f32	s0, s13
 8006414:	eea6 0a25 	vfma.f32	s0, s12, s11
 8006418:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800641c:	eddf 6a37 	vldr	s13, [pc, #220]	; 80064fc <__ieee754_rem_pio2f+0x24c>
 8006420:	eee6 7a25 	vfma.f32	s15, s12, s11
 8006424:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8006428:	ee30 7a67 	vsub.f32	s14, s0, s15
 800642c:	ed84 7a00 	vstr	s14, [r4]
 8006430:	e7b4      	b.n	800639c <__ieee754_rem_pio2f+0xec>
 8006432:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8006436:	db06      	blt.n	8006446 <__ieee754_rem_pio2f+0x196>
 8006438:	ee70 7a40 	vsub.f32	s15, s0, s0
 800643c:	edc0 7a01 	vstr	s15, [r0, #4]
 8006440:	edc0 7a00 	vstr	s15, [r0]
 8006444:	e742      	b.n	80062cc <__ieee754_rem_pio2f+0x1c>
 8006446:	15ea      	asrs	r2, r5, #23
 8006448:	3a86      	subs	r2, #134	; 0x86
 800644a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800644e:	ee07 3a90 	vmov	s15, r3
 8006452:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006456:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8006500 <__ieee754_rem_pio2f+0x250>
 800645a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800645e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006462:	ed8d 7a03 	vstr	s14, [sp, #12]
 8006466:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800646a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800646e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006472:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006476:	ed8d 7a04 	vstr	s14, [sp, #16]
 800647a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800647e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006486:	edcd 7a05 	vstr	s15, [sp, #20]
 800648a:	d11e      	bne.n	80064ca <__ieee754_rem_pio2f+0x21a>
 800648c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8006490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006494:	bf14      	ite	ne
 8006496:	2302      	movne	r3, #2
 8006498:	2301      	moveq	r3, #1
 800649a:	491a      	ldr	r1, [pc, #104]	; (8006504 <__ieee754_rem_pio2f+0x254>)
 800649c:	9101      	str	r1, [sp, #4]
 800649e:	2102      	movs	r1, #2
 80064a0:	9100      	str	r1, [sp, #0]
 80064a2:	a803      	add	r0, sp, #12
 80064a4:	4621      	mov	r1, r4
 80064a6:	f000 f837 	bl	8006518 <__kernel_rem_pio2f>
 80064aa:	2e00      	cmp	r6, #0
 80064ac:	f6bf af31 	bge.w	8006312 <__ieee754_rem_pio2f+0x62>
 80064b0:	edd4 7a00 	vldr	s15, [r4]
 80064b4:	eef1 7a67 	vneg.f32	s15, s15
 80064b8:	edc4 7a00 	vstr	s15, [r4]
 80064bc:	edd4 7a01 	vldr	s15, [r4, #4]
 80064c0:	eef1 7a67 	vneg.f32	s15, s15
 80064c4:	edc4 7a01 	vstr	s15, [r4, #4]
 80064c8:	e77a      	b.n	80063c0 <__ieee754_rem_pio2f+0x110>
 80064ca:	2303      	movs	r3, #3
 80064cc:	e7e5      	b.n	800649a <__ieee754_rem_pio2f+0x1ea>
 80064ce:	bf00      	nop
 80064d0:	3f490fd8 	.word	0x3f490fd8
 80064d4:	4016cbe3 	.word	0x4016cbe3
 80064d8:	3fc90f80 	.word	0x3fc90f80
 80064dc:	3fc90fd0 	.word	0x3fc90fd0
 80064e0:	37354400 	.word	0x37354400
 80064e4:	37354443 	.word	0x37354443
 80064e8:	2e85a308 	.word	0x2e85a308
 80064ec:	43490f80 	.word	0x43490f80
 80064f0:	3f22f984 	.word	0x3f22f984
 80064f4:	08006c6c 	.word	0x08006c6c
 80064f8:	2e85a300 	.word	0x2e85a300
 80064fc:	248d3132 	.word	0x248d3132
 8006500:	43800000 	.word	0x43800000
 8006504:	08006cec 	.word	0x08006cec

08006508 <fabsf>:
 8006508:	ee10 3a10 	vmov	r3, s0
 800650c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006510:	ee00 3a10 	vmov	s0, r3
 8006514:	4770      	bx	lr
	...

08006518 <__kernel_rem_pio2f>:
 8006518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800651c:	ed2d 8b04 	vpush	{d8-d9}
 8006520:	b0d9      	sub	sp, #356	; 0x164
 8006522:	4688      	mov	r8, r1
 8006524:	9002      	str	r0, [sp, #8]
 8006526:	49b8      	ldr	r1, [pc, #736]	; (8006808 <__kernel_rem_pio2f+0x2f0>)
 8006528:	9866      	ldr	r0, [sp, #408]	; 0x198
 800652a:	9301      	str	r3, [sp, #4]
 800652c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8006530:	9901      	ldr	r1, [sp, #4]
 8006532:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8006534:	f101 3bff 	add.w	fp, r1, #4294967295
 8006538:	1d11      	adds	r1, r2, #4
 800653a:	db25      	blt.n	8006588 <__kernel_rem_pio2f+0x70>
 800653c:	1ed0      	subs	r0, r2, #3
 800653e:	bf48      	it	mi
 8006540:	1d10      	addmi	r0, r2, #4
 8006542:	10c0      	asrs	r0, r0, #3
 8006544:	1c45      	adds	r5, r0, #1
 8006546:	00e9      	lsls	r1, r5, #3
 8006548:	eba0 070b 	sub.w	r7, r0, fp
 800654c:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8006818 <__kernel_rem_pio2f+0x300>
 8006550:	9103      	str	r1, [sp, #12]
 8006552:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8006556:	eb0a 0c0b 	add.w	ip, sl, fp
 800655a:	ae1c      	add	r6, sp, #112	; 0x70
 800655c:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 8006560:	2400      	movs	r4, #0
 8006562:	4564      	cmp	r4, ip
 8006564:	dd12      	ble.n	800658c <__kernel_rem_pio2f+0x74>
 8006566:	9901      	ldr	r1, [sp, #4]
 8006568:	ac1c      	add	r4, sp, #112	; 0x70
 800656a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800656e:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8006572:	f04f 0c00 	mov.w	ip, #0
 8006576:	45d4      	cmp	ip, sl
 8006578:	dc27      	bgt.n	80065ca <__kernel_rem_pio2f+0xb2>
 800657a:	f8dd e008 	ldr.w	lr, [sp, #8]
 800657e:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8006818 <__kernel_rem_pio2f+0x300>
 8006582:	4627      	mov	r7, r4
 8006584:	2600      	movs	r6, #0
 8006586:	e016      	b.n	80065b6 <__kernel_rem_pio2f+0x9e>
 8006588:	2000      	movs	r0, #0
 800658a:	e7db      	b.n	8006544 <__kernel_rem_pio2f+0x2c>
 800658c:	42e7      	cmn	r7, r4
 800658e:	bf5d      	ittte	pl
 8006590:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 8006594:	ee07 1a90 	vmovpl	s15, r1
 8006598:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800659c:	eef0 7a47 	vmovmi.f32	s15, s14
 80065a0:	ece6 7a01 	vstmia	r6!, {s15}
 80065a4:	3401      	adds	r4, #1
 80065a6:	e7dc      	b.n	8006562 <__kernel_rem_pio2f+0x4a>
 80065a8:	ecfe 6a01 	vldmia	lr!, {s13}
 80065ac:	ed97 7a00 	vldr	s14, [r7]
 80065b0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80065b4:	3601      	adds	r6, #1
 80065b6:	455e      	cmp	r6, fp
 80065b8:	f1a7 0704 	sub.w	r7, r7, #4
 80065bc:	ddf4      	ble.n	80065a8 <__kernel_rem_pio2f+0x90>
 80065be:	ece9 7a01 	vstmia	r9!, {s15}
 80065c2:	f10c 0c01 	add.w	ip, ip, #1
 80065c6:	3404      	adds	r4, #4
 80065c8:	e7d5      	b.n	8006576 <__kernel_rem_pio2f+0x5e>
 80065ca:	a908      	add	r1, sp, #32
 80065cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80065d0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80065d4:	eddf 8a8f 	vldr	s17, [pc, #572]	; 8006814 <__kernel_rem_pio2f+0x2fc>
 80065d8:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 8006810 <__kernel_rem_pio2f+0x2f8>
 80065dc:	9105      	str	r1, [sp, #20]
 80065de:	9304      	str	r3, [sp, #16]
 80065e0:	4656      	mov	r6, sl
 80065e2:	00b3      	lsls	r3, r6, #2
 80065e4:	9306      	str	r3, [sp, #24]
 80065e6:	ab58      	add	r3, sp, #352	; 0x160
 80065e8:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80065ec:	ac08      	add	r4, sp, #32
 80065ee:	ab44      	add	r3, sp, #272	; 0x110
 80065f0:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80065f4:	46a4      	mov	ip, r4
 80065f6:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80065fa:	4637      	mov	r7, r6
 80065fc:	2f00      	cmp	r7, #0
 80065fe:	f1a0 0004 	sub.w	r0, r0, #4
 8006602:	dc4a      	bgt.n	800669a <__kernel_rem_pio2f+0x182>
 8006604:	4628      	mov	r0, r5
 8006606:	9207      	str	r2, [sp, #28]
 8006608:	f000 f9f8 	bl	80069fc <scalbnf>
 800660c:	eeb0 8a40 	vmov.f32	s16, s0
 8006610:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8006614:	ee28 0a00 	vmul.f32	s0, s16, s0
 8006618:	f000 fa56 	bl	8006ac8 <floorf>
 800661c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8006620:	eea0 8a67 	vfms.f32	s16, s0, s15
 8006624:	2d00      	cmp	r5, #0
 8006626:	9a07      	ldr	r2, [sp, #28]
 8006628:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800662c:	ee17 9a90 	vmov	r9, s15
 8006630:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006634:	ee38 8a67 	vsub.f32	s16, s16, s15
 8006638:	dd41      	ble.n	80066be <__kernel_rem_pio2f+0x1a6>
 800663a:	f106 3cff 	add.w	ip, r6, #4294967295
 800663e:	ab08      	add	r3, sp, #32
 8006640:	f1c5 0e08 	rsb	lr, r5, #8
 8006644:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8006648:	fa47 f00e 	asr.w	r0, r7, lr
 800664c:	4481      	add	r9, r0
 800664e:	fa00 f00e 	lsl.w	r0, r0, lr
 8006652:	1a3f      	subs	r7, r7, r0
 8006654:	f1c5 0007 	rsb	r0, r5, #7
 8006658:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800665c:	4107      	asrs	r7, r0
 800665e:	2f00      	cmp	r7, #0
 8006660:	dd3c      	ble.n	80066dc <__kernel_rem_pio2f+0x1c4>
 8006662:	f04f 0e00 	mov.w	lr, #0
 8006666:	f109 0901 	add.w	r9, r9, #1
 800666a:	4671      	mov	r1, lr
 800666c:	4576      	cmp	r6, lr
 800666e:	dc67      	bgt.n	8006740 <__kernel_rem_pio2f+0x228>
 8006670:	2d00      	cmp	r5, #0
 8006672:	dd03      	ble.n	800667c <__kernel_rem_pio2f+0x164>
 8006674:	2d01      	cmp	r5, #1
 8006676:	d074      	beq.n	8006762 <__kernel_rem_pio2f+0x24a>
 8006678:	2d02      	cmp	r5, #2
 800667a:	d07b      	beq.n	8006774 <__kernel_rem_pio2f+0x25c>
 800667c:	2f02      	cmp	r7, #2
 800667e:	d12d      	bne.n	80066dc <__kernel_rem_pio2f+0x1c4>
 8006680:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006684:	ee30 8a48 	vsub.f32	s16, s0, s16
 8006688:	b341      	cbz	r1, 80066dc <__kernel_rem_pio2f+0x1c4>
 800668a:	4628      	mov	r0, r5
 800668c:	9207      	str	r2, [sp, #28]
 800668e:	f000 f9b5 	bl	80069fc <scalbnf>
 8006692:	9a07      	ldr	r2, [sp, #28]
 8006694:	ee38 8a40 	vsub.f32	s16, s16, s0
 8006698:	e020      	b.n	80066dc <__kernel_rem_pio2f+0x1c4>
 800669a:	ee60 7a28 	vmul.f32	s15, s0, s17
 800669e:	3f01      	subs	r7, #1
 80066a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80066a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80066a8:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80066ac:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80066b0:	ecac 0a01 	vstmia	ip!, {s0}
 80066b4:	ed90 0a00 	vldr	s0, [r0]
 80066b8:	ee37 0a80 	vadd.f32	s0, s15, s0
 80066bc:	e79e      	b.n	80065fc <__kernel_rem_pio2f+0xe4>
 80066be:	d105      	bne.n	80066cc <__kernel_rem_pio2f+0x1b4>
 80066c0:	1e70      	subs	r0, r6, #1
 80066c2:	ab08      	add	r3, sp, #32
 80066c4:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 80066c8:	11ff      	asrs	r7, r7, #7
 80066ca:	e7c8      	b.n	800665e <__kernel_rem_pio2f+0x146>
 80066cc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80066d0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80066d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066d8:	da30      	bge.n	800673c <__kernel_rem_pio2f+0x224>
 80066da:	2700      	movs	r7, #0
 80066dc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80066e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066e4:	f040 809a 	bne.w	800681c <__kernel_rem_pio2f+0x304>
 80066e8:	1e74      	subs	r4, r6, #1
 80066ea:	46a4      	mov	ip, r4
 80066ec:	2100      	movs	r1, #0
 80066ee:	45d4      	cmp	ip, sl
 80066f0:	da47      	bge.n	8006782 <__kernel_rem_pio2f+0x26a>
 80066f2:	2900      	cmp	r1, #0
 80066f4:	d063      	beq.n	80067be <__kernel_rem_pio2f+0x2a6>
 80066f6:	ab08      	add	r3, sp, #32
 80066f8:	3d08      	subs	r5, #8
 80066fa:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d07f      	beq.n	8006802 <__kernel_rem_pio2f+0x2ea>
 8006702:	4628      	mov	r0, r5
 8006704:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006708:	f000 f978 	bl	80069fc <scalbnf>
 800670c:	1c63      	adds	r3, r4, #1
 800670e:	aa44      	add	r2, sp, #272	; 0x110
 8006710:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8006814 <__kernel_rem_pio2f+0x2fc>
 8006714:	0099      	lsls	r1, r3, #2
 8006716:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800671a:	4623      	mov	r3, r4
 800671c:	2b00      	cmp	r3, #0
 800671e:	f280 80ad 	bge.w	800687c <__kernel_rem_pio2f+0x364>
 8006722:	4623      	mov	r3, r4
 8006724:	2b00      	cmp	r3, #0
 8006726:	f2c0 80cb 	blt.w	80068c0 <__kernel_rem_pio2f+0x3a8>
 800672a:	aa44      	add	r2, sp, #272	; 0x110
 800672c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8006730:	4e36      	ldr	r6, [pc, #216]	; (800680c <__kernel_rem_pio2f+0x2f4>)
 8006732:	eddf 7a39 	vldr	s15, [pc, #228]	; 8006818 <__kernel_rem_pio2f+0x300>
 8006736:	2000      	movs	r0, #0
 8006738:	1ae2      	subs	r2, r4, r3
 800673a:	e0b6      	b.n	80068aa <__kernel_rem_pio2f+0x392>
 800673c:	2702      	movs	r7, #2
 800673e:	e790      	b.n	8006662 <__kernel_rem_pio2f+0x14a>
 8006740:	6820      	ldr	r0, [r4, #0]
 8006742:	b949      	cbnz	r1, 8006758 <__kernel_rem_pio2f+0x240>
 8006744:	b118      	cbz	r0, 800674e <__kernel_rem_pio2f+0x236>
 8006746:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800674a:	6020      	str	r0, [r4, #0]
 800674c:	2001      	movs	r0, #1
 800674e:	f10e 0e01 	add.w	lr, lr, #1
 8006752:	3404      	adds	r4, #4
 8006754:	4601      	mov	r1, r0
 8006756:	e789      	b.n	800666c <__kernel_rem_pio2f+0x154>
 8006758:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800675c:	6020      	str	r0, [r4, #0]
 800675e:	4608      	mov	r0, r1
 8006760:	e7f5      	b.n	800674e <__kernel_rem_pio2f+0x236>
 8006762:	1e74      	subs	r4, r6, #1
 8006764:	ab08      	add	r3, sp, #32
 8006766:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800676a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800676e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006772:	e783      	b.n	800667c <__kernel_rem_pio2f+0x164>
 8006774:	1e74      	subs	r4, r6, #1
 8006776:	ab08      	add	r3, sp, #32
 8006778:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800677c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8006780:	e7f5      	b.n	800676e <__kernel_rem_pio2f+0x256>
 8006782:	ab08      	add	r3, sp, #32
 8006784:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8006788:	f10c 3cff 	add.w	ip, ip, #4294967295
 800678c:	4301      	orrs	r1, r0
 800678e:	e7ae      	b.n	80066ee <__kernel_rem_pio2f+0x1d6>
 8006790:	3001      	adds	r0, #1
 8006792:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 8006796:	2f00      	cmp	r7, #0
 8006798:	d0fa      	beq.n	8006790 <__kernel_rem_pio2f+0x278>
 800679a:	9b06      	ldr	r3, [sp, #24]
 800679c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80067a0:	eb0d 0403 	add.w	r4, sp, r3
 80067a4:	9b01      	ldr	r3, [sp, #4]
 80067a6:	18f7      	adds	r7, r6, r3
 80067a8:	ab1c      	add	r3, sp, #112	; 0x70
 80067aa:	f106 0c01 	add.w	ip, r6, #1
 80067ae:	3c4c      	subs	r4, #76	; 0x4c
 80067b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80067b4:	4430      	add	r0, r6
 80067b6:	4560      	cmp	r0, ip
 80067b8:	da04      	bge.n	80067c4 <__kernel_rem_pio2f+0x2ac>
 80067ba:	4606      	mov	r6, r0
 80067bc:	e711      	b.n	80065e2 <__kernel_rem_pio2f+0xca>
 80067be:	9c05      	ldr	r4, [sp, #20]
 80067c0:	2001      	movs	r0, #1
 80067c2:	e7e6      	b.n	8006792 <__kernel_rem_pio2f+0x27a>
 80067c4:	9b04      	ldr	r3, [sp, #16]
 80067c6:	f8dd e008 	ldr.w	lr, [sp, #8]
 80067ca:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80067ce:	9306      	str	r3, [sp, #24]
 80067d0:	ee07 3a90 	vmov	s15, r3
 80067d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067d8:	2600      	movs	r6, #0
 80067da:	ece7 7a01 	vstmia	r7!, {s15}
 80067de:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8006818 <__kernel_rem_pio2f+0x300>
 80067e2:	46b9      	mov	r9, r7
 80067e4:	455e      	cmp	r6, fp
 80067e6:	dd04      	ble.n	80067f2 <__kernel_rem_pio2f+0x2da>
 80067e8:	ece4 7a01 	vstmia	r4!, {s15}
 80067ec:	f10c 0c01 	add.w	ip, ip, #1
 80067f0:	e7e1      	b.n	80067b6 <__kernel_rem_pio2f+0x29e>
 80067f2:	ecfe 6a01 	vldmia	lr!, {s13}
 80067f6:	ed39 7a01 	vldmdb	r9!, {s14}
 80067fa:	3601      	adds	r6, #1
 80067fc:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006800:	e7f0      	b.n	80067e4 <__kernel_rem_pio2f+0x2cc>
 8006802:	3c01      	subs	r4, #1
 8006804:	e777      	b.n	80066f6 <__kernel_rem_pio2f+0x1de>
 8006806:	bf00      	nop
 8006808:	08007030 	.word	0x08007030
 800680c:	08007004 	.word	0x08007004
 8006810:	43800000 	.word	0x43800000
 8006814:	3b800000 	.word	0x3b800000
 8006818:	00000000 	.word	0x00000000
 800681c:	9b03      	ldr	r3, [sp, #12]
 800681e:	eeb0 0a48 	vmov.f32	s0, s16
 8006822:	1a98      	subs	r0, r3, r2
 8006824:	f000 f8ea 	bl	80069fc <scalbnf>
 8006828:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8006810 <__kernel_rem_pio2f+0x2f8>
 800682c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8006830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006834:	db19      	blt.n	800686a <__kernel_rem_pio2f+0x352>
 8006836:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8006814 <__kernel_rem_pio2f+0x2fc>
 800683a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800683e:	aa08      	add	r2, sp, #32
 8006840:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006844:	1c74      	adds	r4, r6, #1
 8006846:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800684a:	3508      	adds	r5, #8
 800684c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8006850:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006854:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006858:	ee10 3a10 	vmov	r3, s0
 800685c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8006860:	ee17 3a90 	vmov	r3, s15
 8006864:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8006868:	e74b      	b.n	8006702 <__kernel_rem_pio2f+0x1ea>
 800686a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800686e:	aa08      	add	r2, sp, #32
 8006870:	ee10 3a10 	vmov	r3, s0
 8006874:	4634      	mov	r4, r6
 8006876:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800687a:	e742      	b.n	8006702 <__kernel_rem_pio2f+0x1ea>
 800687c:	a808      	add	r0, sp, #32
 800687e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8006882:	9001      	str	r0, [sp, #4]
 8006884:	ee07 0a90 	vmov	s15, r0
 8006888:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800688c:	3b01      	subs	r3, #1
 800688e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8006892:	ee20 0a07 	vmul.f32	s0, s0, s14
 8006896:	ed62 7a01 	vstmdb	r2!, {s15}
 800689a:	e73f      	b.n	800671c <__kernel_rem_pio2f+0x204>
 800689c:	ecf6 6a01 	vldmia	r6!, {s13}
 80068a0:	ecb5 7a01 	vldmia	r5!, {s14}
 80068a4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80068a8:	3001      	adds	r0, #1
 80068aa:	4550      	cmp	r0, sl
 80068ac:	dc01      	bgt.n	80068b2 <__kernel_rem_pio2f+0x39a>
 80068ae:	4290      	cmp	r0, r2
 80068b0:	ddf4      	ble.n	800689c <__kernel_rem_pio2f+0x384>
 80068b2:	a858      	add	r0, sp, #352	; 0x160
 80068b4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80068b8:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 80068bc:	3b01      	subs	r3, #1
 80068be:	e731      	b.n	8006724 <__kernel_rem_pio2f+0x20c>
 80068c0:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	dc09      	bgt.n	80068da <__kernel_rem_pio2f+0x3c2>
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	dc2b      	bgt.n	8006922 <__kernel_rem_pio2f+0x40a>
 80068ca:	d044      	beq.n	8006956 <__kernel_rem_pio2f+0x43e>
 80068cc:	f009 0007 	and.w	r0, r9, #7
 80068d0:	b059      	add	sp, #356	; 0x164
 80068d2:	ecbd 8b04 	vpop	{d8-d9}
 80068d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068da:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80068dc:	2b03      	cmp	r3, #3
 80068de:	d1f5      	bne.n	80068cc <__kernel_rem_pio2f+0x3b4>
 80068e0:	aa30      	add	r2, sp, #192	; 0xc0
 80068e2:	1f0b      	subs	r3, r1, #4
 80068e4:	4413      	add	r3, r2
 80068e6:	461a      	mov	r2, r3
 80068e8:	4620      	mov	r0, r4
 80068ea:	2800      	cmp	r0, #0
 80068ec:	f1a2 0204 	sub.w	r2, r2, #4
 80068f0:	dc52      	bgt.n	8006998 <__kernel_rem_pio2f+0x480>
 80068f2:	4622      	mov	r2, r4
 80068f4:	2a01      	cmp	r2, #1
 80068f6:	f1a3 0304 	sub.w	r3, r3, #4
 80068fa:	dc5d      	bgt.n	80069b8 <__kernel_rem_pio2f+0x4a0>
 80068fc:	ab30      	add	r3, sp, #192	; 0xc0
 80068fe:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8006818 <__kernel_rem_pio2f+0x300>
 8006902:	440b      	add	r3, r1
 8006904:	2c01      	cmp	r4, #1
 8006906:	dc67      	bgt.n	80069d8 <__kernel_rem_pio2f+0x4c0>
 8006908:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800690c:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8006910:	2f00      	cmp	r7, #0
 8006912:	d167      	bne.n	80069e4 <__kernel_rem_pio2f+0x4cc>
 8006914:	edc8 6a00 	vstr	s13, [r8]
 8006918:	ed88 7a01 	vstr	s14, [r8, #4]
 800691c:	edc8 7a02 	vstr	s15, [r8, #8]
 8006920:	e7d4      	b.n	80068cc <__kernel_rem_pio2f+0x3b4>
 8006922:	ab30      	add	r3, sp, #192	; 0xc0
 8006924:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8006818 <__kernel_rem_pio2f+0x300>
 8006928:	440b      	add	r3, r1
 800692a:	4622      	mov	r2, r4
 800692c:	2a00      	cmp	r2, #0
 800692e:	da24      	bge.n	800697a <__kernel_rem_pio2f+0x462>
 8006930:	b34f      	cbz	r7, 8006986 <__kernel_rem_pio2f+0x46e>
 8006932:	eef1 7a47 	vneg.f32	s15, s14
 8006936:	edc8 7a00 	vstr	s15, [r8]
 800693a:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800693e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006942:	aa31      	add	r2, sp, #196	; 0xc4
 8006944:	2301      	movs	r3, #1
 8006946:	429c      	cmp	r4, r3
 8006948:	da20      	bge.n	800698c <__kernel_rem_pio2f+0x474>
 800694a:	b10f      	cbz	r7, 8006950 <__kernel_rem_pio2f+0x438>
 800694c:	eef1 7a67 	vneg.f32	s15, s15
 8006950:	edc8 7a01 	vstr	s15, [r8, #4]
 8006954:	e7ba      	b.n	80068cc <__kernel_rem_pio2f+0x3b4>
 8006956:	ab30      	add	r3, sp, #192	; 0xc0
 8006958:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 8006818 <__kernel_rem_pio2f+0x300>
 800695c:	440b      	add	r3, r1
 800695e:	2c00      	cmp	r4, #0
 8006960:	da05      	bge.n	800696e <__kernel_rem_pio2f+0x456>
 8006962:	b10f      	cbz	r7, 8006968 <__kernel_rem_pio2f+0x450>
 8006964:	eef1 7a67 	vneg.f32	s15, s15
 8006968:	edc8 7a00 	vstr	s15, [r8]
 800696c:	e7ae      	b.n	80068cc <__kernel_rem_pio2f+0x3b4>
 800696e:	ed33 7a01 	vldmdb	r3!, {s14}
 8006972:	3c01      	subs	r4, #1
 8006974:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006978:	e7f1      	b.n	800695e <__kernel_rem_pio2f+0x446>
 800697a:	ed73 7a01 	vldmdb	r3!, {s15}
 800697e:	3a01      	subs	r2, #1
 8006980:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006984:	e7d2      	b.n	800692c <__kernel_rem_pio2f+0x414>
 8006986:	eef0 7a47 	vmov.f32	s15, s14
 800698a:	e7d4      	b.n	8006936 <__kernel_rem_pio2f+0x41e>
 800698c:	ecb2 7a01 	vldmia	r2!, {s14}
 8006990:	3301      	adds	r3, #1
 8006992:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006996:	e7d6      	b.n	8006946 <__kernel_rem_pio2f+0x42e>
 8006998:	edd2 7a00 	vldr	s15, [r2]
 800699c:	edd2 6a01 	vldr	s13, [r2, #4]
 80069a0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80069a4:	3801      	subs	r0, #1
 80069a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80069aa:	ed82 7a00 	vstr	s14, [r2]
 80069ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069b2:	edc2 7a01 	vstr	s15, [r2, #4]
 80069b6:	e798      	b.n	80068ea <__kernel_rem_pio2f+0x3d2>
 80069b8:	edd3 7a00 	vldr	s15, [r3]
 80069bc:	edd3 6a01 	vldr	s13, [r3, #4]
 80069c0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80069c4:	3a01      	subs	r2, #1
 80069c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80069ca:	ed83 7a00 	vstr	s14, [r3]
 80069ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069d2:	edc3 7a01 	vstr	s15, [r3, #4]
 80069d6:	e78d      	b.n	80068f4 <__kernel_rem_pio2f+0x3dc>
 80069d8:	ed33 7a01 	vldmdb	r3!, {s14}
 80069dc:	3c01      	subs	r4, #1
 80069de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80069e2:	e78f      	b.n	8006904 <__kernel_rem_pio2f+0x3ec>
 80069e4:	eef1 6a66 	vneg.f32	s13, s13
 80069e8:	eeb1 7a47 	vneg.f32	s14, s14
 80069ec:	edc8 6a00 	vstr	s13, [r8]
 80069f0:	ed88 7a01 	vstr	s14, [r8, #4]
 80069f4:	eef1 7a67 	vneg.f32	s15, s15
 80069f8:	e790      	b.n	800691c <__kernel_rem_pio2f+0x404>
 80069fa:	bf00      	nop

080069fc <scalbnf>:
 80069fc:	ee10 3a10 	vmov	r3, s0
 8006a00:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8006a04:	d02b      	beq.n	8006a5e <scalbnf+0x62>
 8006a06:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8006a0a:	d302      	bcc.n	8006a12 <scalbnf+0x16>
 8006a0c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006a10:	4770      	bx	lr
 8006a12:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8006a16:	d123      	bne.n	8006a60 <scalbnf+0x64>
 8006a18:	4b24      	ldr	r3, [pc, #144]	; (8006aac <scalbnf+0xb0>)
 8006a1a:	eddf 7a25 	vldr	s15, [pc, #148]	; 8006ab0 <scalbnf+0xb4>
 8006a1e:	4298      	cmp	r0, r3
 8006a20:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006a24:	db17      	blt.n	8006a56 <scalbnf+0x5a>
 8006a26:	ee10 3a10 	vmov	r3, s0
 8006a2a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006a2e:	3a19      	subs	r2, #25
 8006a30:	f24c 3150 	movw	r1, #50000	; 0xc350
 8006a34:	4288      	cmp	r0, r1
 8006a36:	dd15      	ble.n	8006a64 <scalbnf+0x68>
 8006a38:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8006ab4 <scalbnf+0xb8>
 8006a3c:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8006ab8 <scalbnf+0xbc>
 8006a40:	ee10 3a10 	vmov	r3, s0
 8006a44:	eeb0 7a67 	vmov.f32	s14, s15
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	bfb8      	it	lt
 8006a4c:	eef0 7a66 	vmovlt.f32	s15, s13
 8006a50:	ee27 0a87 	vmul.f32	s0, s15, s14
 8006a54:	4770      	bx	lr
 8006a56:	eddf 7a19 	vldr	s15, [pc, #100]	; 8006abc <scalbnf+0xc0>
 8006a5a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006a5e:	4770      	bx	lr
 8006a60:	0dd2      	lsrs	r2, r2, #23
 8006a62:	e7e5      	b.n	8006a30 <scalbnf+0x34>
 8006a64:	4410      	add	r0, r2
 8006a66:	28fe      	cmp	r0, #254	; 0xfe
 8006a68:	dce6      	bgt.n	8006a38 <scalbnf+0x3c>
 8006a6a:	2800      	cmp	r0, #0
 8006a6c:	dd06      	ble.n	8006a7c <scalbnf+0x80>
 8006a6e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006a72:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8006a76:	ee00 3a10 	vmov	s0, r3
 8006a7a:	4770      	bx	lr
 8006a7c:	f110 0f16 	cmn.w	r0, #22
 8006a80:	da09      	bge.n	8006a96 <scalbnf+0x9a>
 8006a82:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8006abc <scalbnf+0xc0>
 8006a86:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8006ac0 <scalbnf+0xc4>
 8006a8a:	ee10 3a10 	vmov	r3, s0
 8006a8e:	eeb0 7a67 	vmov.f32	s14, s15
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	e7d9      	b.n	8006a4a <scalbnf+0x4e>
 8006a96:	3019      	adds	r0, #25
 8006a98:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006a9c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8006aa0:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8006ac4 <scalbnf+0xc8>
 8006aa4:	ee07 3a90 	vmov	s15, r3
 8006aa8:	e7d7      	b.n	8006a5a <scalbnf+0x5e>
 8006aaa:	bf00      	nop
 8006aac:	ffff3cb0 	.word	0xffff3cb0
 8006ab0:	4c000000 	.word	0x4c000000
 8006ab4:	7149f2ca 	.word	0x7149f2ca
 8006ab8:	f149f2ca 	.word	0xf149f2ca
 8006abc:	0da24260 	.word	0x0da24260
 8006ac0:	8da24260 	.word	0x8da24260
 8006ac4:	33000000 	.word	0x33000000

08006ac8 <floorf>:
 8006ac8:	ee10 3a10 	vmov	r3, s0
 8006acc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006ad0:	3a7f      	subs	r2, #127	; 0x7f
 8006ad2:	2a16      	cmp	r2, #22
 8006ad4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006ad8:	dc2a      	bgt.n	8006b30 <floorf+0x68>
 8006ada:	2a00      	cmp	r2, #0
 8006adc:	da11      	bge.n	8006b02 <floorf+0x3a>
 8006ade:	eddf 7a18 	vldr	s15, [pc, #96]	; 8006b40 <floorf+0x78>
 8006ae2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006ae6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aee:	dd05      	ble.n	8006afc <floorf+0x34>
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	da23      	bge.n	8006b3c <floorf+0x74>
 8006af4:	4a13      	ldr	r2, [pc, #76]	; (8006b44 <floorf+0x7c>)
 8006af6:	2900      	cmp	r1, #0
 8006af8:	bf18      	it	ne
 8006afa:	4613      	movne	r3, r2
 8006afc:	ee00 3a10 	vmov	s0, r3
 8006b00:	4770      	bx	lr
 8006b02:	4911      	ldr	r1, [pc, #68]	; (8006b48 <floorf+0x80>)
 8006b04:	4111      	asrs	r1, r2
 8006b06:	420b      	tst	r3, r1
 8006b08:	d0fa      	beq.n	8006b00 <floorf+0x38>
 8006b0a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8006b40 <floorf+0x78>
 8006b0e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006b12:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b1a:	ddef      	ble.n	8006afc <floorf+0x34>
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	bfbe      	ittt	lt
 8006b20:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8006b24:	fa40 f202 	asrlt.w	r2, r0, r2
 8006b28:	189b      	addlt	r3, r3, r2
 8006b2a:	ea23 0301 	bic.w	r3, r3, r1
 8006b2e:	e7e5      	b.n	8006afc <floorf+0x34>
 8006b30:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8006b34:	d3e4      	bcc.n	8006b00 <floorf+0x38>
 8006b36:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006b3a:	4770      	bx	lr
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	e7dd      	b.n	8006afc <floorf+0x34>
 8006b40:	7149f2ca 	.word	0x7149f2ca
 8006b44:	bf800000 	.word	0xbf800000
 8006b48:	007fffff 	.word	0x007fffff

08006b4c <_init>:
 8006b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b4e:	bf00      	nop
 8006b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b52:	bc08      	pop	{r3}
 8006b54:	469e      	mov	lr, r3
 8006b56:	4770      	bx	lr

08006b58 <_fini>:
 8006b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b5a:	bf00      	nop
 8006b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b5e:	bc08      	pop	{r3}
 8006b60:	469e      	mov	lr, r3
 8006b62:	4770      	bx	lr
