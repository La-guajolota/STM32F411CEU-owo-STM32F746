
pwm_disco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c5c  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002e24  08002e24  00003e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e34  08002e34  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002e34  08002e34  00003e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e3c  08002e3c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e3c  08002e3c  00003e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e40  08002e40  00003e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002e44  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08002e50  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002e50  00004078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b9b  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000148a  00000000  00000000  0000cbd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  0000e068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000751  00000000  00000000  0000e9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000259e8  00000000  00000000  0000f131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000af9a  00000000  00000000  00034b19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec7df  00000000  00000000  0003fab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012c292  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027a0  00000000  00000000  0012c2d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0012ea78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08002e0c 	.word	0x08002e0c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08002e0c 	.word	0x08002e0c

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fe:	f000 fe4e 	bl	800119e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000502:	f000 f81f 	bl	8000544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000506:	f000 f8df 	bl	80006c8 <MX_GPIO_Init>
  MX_TIM2_Init();
 800050a:	f000 f883 	bl	8000614 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 800050e:	480c      	ldr	r0, [pc, #48]	@ (8000540 <main+0x48>)
 8000510:	f001 fdc8 	bl	80020a4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000514:	2100      	movs	r1, #0
 8000516:	480a      	ldr	r0, [pc, #40]	@ (8000540 <main+0x48>)
 8000518:	f001 fe8c 	bl	8002234 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	for (uint16_t i= 0; i < 1000; i++) {
 800051c:	2300      	movs	r3, #0
 800051e:	80fb      	strh	r3, [r7, #6]
 8000520:	e009      	b.n	8000536 <main+0x3e>
		//TIM2->CCR1 = period;
		__HAL_TIM_SetCompare(&htim2,TIM_CHANNEL_1,i);
 8000522:	4b07      	ldr	r3, [pc, #28]	@ (8000540 <main+0x48>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	88fa      	ldrh	r2, [r7, #6]
 8000528:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(20);
 800052a:	2014      	movs	r0, #20
 800052c:	f000 fe94 	bl	8001258 <HAL_Delay>
	for (uint16_t i= 0; i < 1000; i++) {
 8000530:	88fb      	ldrh	r3, [r7, #6]
 8000532:	3301      	adds	r3, #1
 8000534:	80fb      	strh	r3, [r7, #6]
 8000536:	88fb      	ldrh	r3, [r7, #6]
 8000538:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800053c:	d3f1      	bcc.n	8000522 <main+0x2a>
 800053e:	e7ed      	b.n	800051c <main+0x24>
 8000540:	20000028 	.word	0x20000028

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b094      	sub	sp, #80	@ 0x50
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 0320 	add.w	r3, r7, #32
 800054e:	2230      	movs	r2, #48	@ 0x30
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f002 fc2e 	bl	8002db4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	f107 030c 	add.w	r3, r7, #12
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000568:	4b28      	ldr	r3, [pc, #160]	@ (800060c <SystemClock_Config+0xc8>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800056c:	4a27      	ldr	r2, [pc, #156]	@ (800060c <SystemClock_Config+0xc8>)
 800056e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000572:	6413      	str	r3, [r2, #64]	@ 0x40
 8000574:	4b25      	ldr	r3, [pc, #148]	@ (800060c <SystemClock_Config+0xc8>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000578:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000580:	4b23      	ldr	r3, [pc, #140]	@ (8000610 <SystemClock_Config+0xcc>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000588:	4a21      	ldr	r2, [pc, #132]	@ (8000610 <SystemClock_Config+0xcc>)
 800058a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	4b1f      	ldr	r3, [pc, #124]	@ (8000610 <SystemClock_Config+0xcc>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800059c:	2302      	movs	r3, #2
 800059e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a0:	2301      	movs	r3, #1
 80005a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a4:	2310      	movs	r3, #16
 80005a6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a8:	2302      	movs	r3, #2
 80005aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ac:	2300      	movs	r3, #0
 80005ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 10;
 80005b0:	230a      	movs	r3, #10
 80005b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 80005b4:	23d2      	movs	r3, #210	@ 0xd2
 80005b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b8:	2302      	movs	r3, #2
 80005ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005bc:	2302      	movs	r3, #2
 80005be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c0:	f107 0320 	add.w	r3, r7, #32
 80005c4:	4618      	mov	r0, r3
 80005c6:	f001 f917 	bl	80017f8 <HAL_RCC_OscConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80005d0:	f000 fcfc 	bl	8000fcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d4:	230f      	movs	r3, #15
 80005d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d8:	2302      	movs	r3, #2
 80005da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005e0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	2105      	movs	r1, #5
 80005f2:	4618      	mov	r0, r3
 80005f4:	f001 fba4 	bl	8001d40 <HAL_RCC_ClockConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80005fe:	f000 fce5 	bl	8000fcc <Error_Handler>
  }
}
 8000602:	bf00      	nop
 8000604:	3750      	adds	r7, #80	@ 0x50
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40023800 	.word	0x40023800
 8000610:	40007000 	.word	0x40007000

08000614 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	@ 0x28
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800061a:	f107 031c 	add.w	r3, r7, #28
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000626:	463b      	mov	r3, r7
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]
 8000634:	615a      	str	r2, [r3, #20]
 8000636:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000638:	4b22      	ldr	r3, [pc, #136]	@ (80006c4 <MX_TIM2_Init+0xb0>)
 800063a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800063e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8000640:	4b20      	ldr	r3, [pc, #128]	@ (80006c4 <MX_TIM2_Init+0xb0>)
 8000642:	2253      	movs	r2, #83	@ 0x53
 8000644:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000646:	4b1f      	ldr	r3, [pc, #124]	@ (80006c4 <MX_TIM2_Init+0xb0>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800064c:	4b1d      	ldr	r3, [pc, #116]	@ (80006c4 <MX_TIM2_Init+0xb0>)
 800064e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000652:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000654:	4b1b      	ldr	r3, [pc, #108]	@ (80006c4 <MX_TIM2_Init+0xb0>)
 8000656:	2200      	movs	r2, #0
 8000658:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800065a:	4b1a      	ldr	r3, [pc, #104]	@ (80006c4 <MX_TIM2_Init+0xb0>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000660:	4818      	ldr	r0, [pc, #96]	@ (80006c4 <MX_TIM2_Init+0xb0>)
 8000662:	f001 fd8f 	bl	8002184 <HAL_TIM_PWM_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800066c:	f000 fcae 	bl	8000fcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000670:	2300      	movs	r3, #0
 8000672:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000674:	2300      	movs	r3, #0
 8000676:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000678:	f107 031c 	add.w	r3, r7, #28
 800067c:	4619      	mov	r1, r3
 800067e:	4811      	ldr	r0, [pc, #68]	@ (80006c4 <MX_TIM2_Init+0xb0>)
 8000680:	f002 fb0a 	bl	8002c98 <HAL_TIMEx_MasterConfigSynchronization>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800068a:	f000 fc9f 	bl	8000fcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800068e:	2360      	movs	r3, #96	@ 0x60
 8000690:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000696:	2300      	movs	r3, #0
 8000698:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800069e:	463b      	mov	r3, r7
 80006a0:	2200      	movs	r2, #0
 80006a2:	4619      	mov	r1, r3
 80006a4:	4807      	ldr	r0, [pc, #28]	@ (80006c4 <MX_TIM2_Init+0xb0>)
 80006a6:	f001 febf 	bl	8002428 <HAL_TIM_PWM_ConfigChannel>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80006b0:	f000 fc8c 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80006b4:	4803      	ldr	r0, [pc, #12]	@ (80006c4 <MX_TIM2_Init+0xb0>)
 80006b6:	f000 fcd1 	bl	800105c <HAL_TIM_MspPostInit>

}
 80006ba:	bf00      	nop
 80006bc:	3728      	adds	r7, #40	@ 0x28
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000028 	.word	0x20000028

080006c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b090      	sub	sp, #64	@ 0x40
 80006cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
 80006dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006de:	4bad      	ldr	r3, [pc, #692]	@ (8000994 <MX_GPIO_Init+0x2cc>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	4aac      	ldr	r2, [pc, #688]	@ (8000994 <MX_GPIO_Init+0x2cc>)
 80006e4:	f043 0310 	orr.w	r3, r3, #16
 80006e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ea:	4baa      	ldr	r3, [pc, #680]	@ (8000994 <MX_GPIO_Init+0x2cc>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	f003 0310 	and.w	r3, r3, #16
 80006f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80006f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006f6:	4ba7      	ldr	r3, [pc, #668]	@ (8000994 <MX_GPIO_Init+0x2cc>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	4aa6      	ldr	r2, [pc, #664]	@ (8000994 <MX_GPIO_Init+0x2cc>)
 80006fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000700:	6313      	str	r3, [r2, #48]	@ 0x30
 8000702:	4ba4      	ldr	r3, [pc, #656]	@ (8000994 <MX_GPIO_Init+0x2cc>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800070a:	627b      	str	r3, [r7, #36]	@ 0x24
 800070c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070e:	4ba1      	ldr	r3, [pc, #644]	@ (8000994 <MX_GPIO_Init+0x2cc>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	4aa0      	ldr	r2, [pc, #640]	@ (8000994 <MX_GPIO_Init+0x2cc>)
 8000714:	f043 0302 	orr.w	r3, r3, #2
 8000718:	6313      	str	r3, [r2, #48]	@ 0x30
 800071a:	4b9e      	ldr	r3, [pc, #632]	@ (8000994 <MX_GPIO_Init+0x2cc>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	f003 0302 	and.w	r3, r3, #2
 8000722:	623b      	str	r3, [r7, #32]
 8000724:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000726:	4b9b      	ldr	r3, [pc, #620]	@ (8000994 <MX_GPIO_Init+0x2cc>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	4a9a      	ldr	r2, [pc, #616]	@ (8000994 <MX_GPIO_Init+0x2cc>)
 800072c:	f043 0308 	orr.w	r3, r3, #8
 8000730:	6313      	str	r3, [r2, #48]	@ 0x30
 8000732:	4b98      	ldr	r3, [pc, #608]	@ (8000994 <MX_GPIO_Init+0x2cc>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	f003 0308 	and.w	r3, r3, #8
 800073a:	61fb      	str	r3, [r7, #28]
 800073c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	4b95      	ldr	r3, [pc, #596]	@ (8000994 <MX_GPIO_Init+0x2cc>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	4a94      	ldr	r2, [pc, #592]	@ (8000994 <MX_GPIO_Init+0x2cc>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	6313      	str	r3, [r2, #48]	@ 0x30
 800074a:	4b92      	ldr	r3, [pc, #584]	@ (8000994 <MX_GPIO_Init+0x2cc>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	61bb      	str	r3, [r7, #24]
 8000754:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	4b8f      	ldr	r3, [pc, #572]	@ (8000994 <MX_GPIO_Init+0x2cc>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	4a8e      	ldr	r2, [pc, #568]	@ (8000994 <MX_GPIO_Init+0x2cc>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	6313      	str	r3, [r2, #48]	@ 0x30
 8000762:	4b8c      	ldr	r3, [pc, #560]	@ (8000994 <MX_GPIO_Init+0x2cc>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	617b      	str	r3, [r7, #20]
 800076c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800076e:	4b89      	ldr	r3, [pc, #548]	@ (8000994 <MX_GPIO_Init+0x2cc>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a88      	ldr	r2, [pc, #544]	@ (8000994 <MX_GPIO_Init+0x2cc>)
 8000774:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
 800077a:	4b86      	ldr	r3, [pc, #536]	@ (8000994 <MX_GPIO_Init+0x2cc>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000786:	4b83      	ldr	r3, [pc, #524]	@ (8000994 <MX_GPIO_Init+0x2cc>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	4a82      	ldr	r2, [pc, #520]	@ (8000994 <MX_GPIO_Init+0x2cc>)
 800078c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000790:	6313      	str	r3, [r2, #48]	@ 0x30
 8000792:	4b80      	ldr	r3, [pc, #512]	@ (8000994 <MX_GPIO_Init+0x2cc>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800079e:	4b7d      	ldr	r3, [pc, #500]	@ (8000994 <MX_GPIO_Init+0x2cc>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	4a7c      	ldr	r2, [pc, #496]	@ (8000994 <MX_GPIO_Init+0x2cc>)
 80007a4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80007a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007aa:	4b7a      	ldr	r3, [pc, #488]	@ (8000994 <MX_GPIO_Init+0x2cc>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007b6:	4b77      	ldr	r3, [pc, #476]	@ (8000994 <MX_GPIO_Init+0x2cc>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	4a76      	ldr	r2, [pc, #472]	@ (8000994 <MX_GPIO_Init+0x2cc>)
 80007bc:	f043 0320 	orr.w	r3, r3, #32
 80007c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c2:	4b74      	ldr	r3, [pc, #464]	@ (8000994 <MX_GPIO_Init+0x2cc>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	f003 0320 	and.w	r3, r3, #32
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ce:	4b71      	ldr	r3, [pc, #452]	@ (8000994 <MX_GPIO_Init+0x2cc>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	4a70      	ldr	r2, [pc, #448]	@ (8000994 <MX_GPIO_Init+0x2cc>)
 80007d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007da:	4b6e      	ldr	r3, [pc, #440]	@ (8000994 <MX_GPIO_Init+0x2cc>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007e6:	2201      	movs	r2, #1
 80007e8:	2120      	movs	r1, #32
 80007ea:	486b      	ldr	r0, [pc, #428]	@ (8000998 <MX_GPIO_Init+0x2d0>)
 80007ec:	f000 ffea 	bl	80017c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	f241 010c 	movw	r1, #4108	@ 0x100c
 80007f6:	4869      	ldr	r0, [pc, #420]	@ (800099c <MX_GPIO_Init+0x2d4>)
 80007f8:	f000 ffe4 	bl	80017c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2108      	movs	r1, #8
 8000800:	4867      	ldr	r0, [pc, #412]	@ (80009a0 <MX_GPIO_Init+0x2d8>)
 8000802:	f000 ffdf 	bl	80017c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800080c:	4865      	ldr	r0, [pc, #404]	@ (80009a4 <MX_GPIO_Init+0x2dc>)
 800080e:	f000 ffd9 	bl	80017c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	21c8      	movs	r1, #200	@ 0xc8
 8000816:	4864      	ldr	r0, [pc, #400]	@ (80009a8 <MX_GPIO_Init+0x2e0>)
 8000818:	f000 ffd4 	bl	80017c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 800081c:	2310      	movs	r3, #16
 800081e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000820:	2302      	movs	r3, #2
 8000822:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2300      	movs	r3, #0
 800082a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800082c:	230e      	movs	r3, #14
 800082e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000830:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000834:	4619      	mov	r1, r3
 8000836:	485d      	ldr	r0, [pc, #372]	@ (80009ac <MX_GPIO_Init+0x2e4>)
 8000838:	f000 fe18 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800083c:	2308      	movs	r3, #8
 800083e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000840:	2300      	movs	r3, #0
 8000842:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800084c:	4619      	mov	r1, r3
 800084e:	4857      	ldr	r0, [pc, #348]	@ (80009ac <MX_GPIO_Init+0x2e4>)
 8000850:	f000 fe0c 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000854:	2304      	movs	r3, #4
 8000856:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000858:	2302      	movs	r3, #2
 800085a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000860:	2303      	movs	r3, #3
 8000862:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000864:	2309      	movs	r3, #9
 8000866:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800086c:	4619      	mov	r1, r3
 800086e:	484f      	ldr	r0, [pc, #316]	@ (80009ac <MX_GPIO_Init+0x2e4>)
 8000870:	f000 fdfc 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000874:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8000878:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087a:	2302      	movs	r3, #2
 800087c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000882:	2303      	movs	r3, #3
 8000884:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000886:	230b      	movs	r3, #11
 8000888:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800088a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800088e:	4619      	mov	r1, r3
 8000890:	4845      	ldr	r0, [pc, #276]	@ (80009a8 <MX_GPIO_Init+0x2e0>)
 8000892:	f000 fdeb 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000896:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800089a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089c:	2302      	movs	r3, #2
 800089e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a4:	2303      	movs	r3, #3
 80008a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008a8:	230c      	movs	r3, #12
 80008aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008b0:	4619      	mov	r1, r3
 80008b2:	483e      	ldr	r0, [pc, #248]	@ (80009ac <MX_GPIO_Init+0x2e4>)
 80008b4:	f000 fdda 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80008b8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80008bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008be:	2312      	movs	r3, #18
 80008c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008ca:	2304      	movs	r3, #4
 80008cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008d2:	4619      	mov	r1, r3
 80008d4:	4836      	ldr	r0, [pc, #216]	@ (80009b0 <MX_GPIO_Init+0x2e8>)
 80008d6:	f000 fdc9 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80008da:	f643 4323 	movw	r3, #15395	@ 0x3c23
 80008de:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e0:	2302      	movs	r3, #2
 80008e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e8:	2303      	movs	r3, #3
 80008ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80008ec:	230a      	movs	r3, #10
 80008ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008f4:	4619      	mov	r1, r3
 80008f6:	482e      	ldr	r0, [pc, #184]	@ (80009b0 <MX_GPIO_Init+0x2e8>)
 80008f8:	f000 fdb8 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80008fc:	2310      	movs	r3, #16
 80008fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000900:	2302      	movs	r3, #2
 8000902:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800090c:	2302      	movs	r3, #2
 800090e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000914:	4619      	mov	r1, r3
 8000916:	4826      	ldr	r0, [pc, #152]	@ (80009b0 <MX_GPIO_Init+0x2e8>)
 8000918:	f000 fda8 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800091c:	2380      	movs	r3, #128	@ 0x80
 800091e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000920:	2302      	movs	r3, #2
 8000922:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800092c:	2308      	movs	r3, #8
 800092e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000934:	4619      	mov	r1, r3
 8000936:	4818      	ldr	r0, [pc, #96]	@ (8000998 <MX_GPIO_Init+0x2d0>)
 8000938:	f000 fd98 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800093c:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000940:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094a:	2303      	movs	r3, #3
 800094c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800094e:	230c      	movs	r3, #12
 8000950:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000952:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000956:	4619      	mov	r1, r3
 8000958:	4816      	ldr	r0, [pc, #88]	@ (80009b4 <MX_GPIO_Init+0x2ec>)
 800095a:	f000 fd87 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800095e:	2360      	movs	r3, #96	@ 0x60
 8000960:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000962:	2302      	movs	r3, #2
 8000964:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800096e:	230d      	movs	r3, #13
 8000970:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000972:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000976:	4619      	mov	r1, r3
 8000978:	480c      	ldr	r0, [pc, #48]	@ (80009ac <MX_GPIO_Init+0x2e4>)
 800097a:	f000 fd77 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 800097e:	2380      	movs	r3, #128	@ 0x80
 8000980:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	2302      	movs	r3, #2
 8000984:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800098e:	2307      	movs	r3, #7
 8000990:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000992:	e011      	b.n	80009b8 <MX_GPIO_Init+0x2f0>
 8000994:	40023800 	.word	0x40023800
 8000998:	40020c00 	.word	0x40020c00
 800099c:	40022000 	.word	0x40022000
 80009a0:	40022800 	.word	0x40022800
 80009a4:	40021c00 	.word	0x40021c00
 80009a8:	40021800 	.word	0x40021800
 80009ac:	40021000 	.word	0x40021000
 80009b0:	40020400 	.word	0x40020400
 80009b4:	40020800 	.word	0x40020800
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009bc:	4619      	mov	r1, r3
 80009be:	48bc      	ldr	r0, [pc, #752]	@ (8000cb0 <MX_GPIO_Init+0x5e8>)
 80009c0:	f000 fd54 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80009c4:	2340      	movs	r3, #64	@ 0x40
 80009c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c8:	2302      	movs	r3, #2
 80009ca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d0:	2303      	movs	r3, #3
 80009d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80009d4:	230a      	movs	r3, #10
 80009d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009dc:	4619      	mov	r1, r3
 80009de:	48b4      	ldr	r0, [pc, #720]	@ (8000cb0 <MX_GPIO_Init+0x5e8>)
 80009e0:	f000 fd44 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80009e4:	f248 1333 	movw	r3, #33075	@ 0x8133
 80009e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	2302      	movs	r3, #2
 80009ec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f2:	2303      	movs	r3, #3
 80009f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009f6:	230c      	movs	r3, #12
 80009f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009fe:	4619      	mov	r1, r3
 8000a00:	48ac      	ldr	r0, [pc, #688]	@ (8000cb4 <MX_GPIO_Init+0x5ec>)
 8000a02:	f000 fd33 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000a06:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8000a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a14:	2300      	movs	r3, #0
 8000a16:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a18:	230e      	movs	r3, #14
 8000a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000a1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a20:	4619      	mov	r1, r3
 8000a22:	48a5      	ldr	r0, [pc, #660]	@ (8000cb8 <MX_GPIO_Init+0x5f0>)
 8000a24:	f000 fd22 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000a28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	489e      	ldr	r0, [pc, #632]	@ (8000cb8 <MX_GPIO_Init+0x5f0>)
 8000a3e:	f000 fd15 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000a42:	2340      	movs	r3, #64	@ 0x40
 8000a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a46:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a4a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a54:	4619      	mov	r1, r3
 8000a56:	4899      	ldr	r0, [pc, #612]	@ (8000cbc <MX_GPIO_Init+0x5f4>)
 8000a58:	f000 fd08 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000a5c:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a6e:	230c      	movs	r3, #12
 8000a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a72:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a76:	4619      	mov	r1, r3
 8000a78:	4890      	ldr	r0, [pc, #576]	@ (8000cbc <MX_GPIO_Init+0x5f4>)
 8000a7a:	f000 fcf7 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000a7e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	2302      	movs	r3, #2
 8000a86:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a90:	230a      	movs	r3, #10
 8000a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4889      	ldr	r0, [pc, #548]	@ (8000cc0 <MX_GPIO_Init+0x5f8>)
 8000a9c:	f000 fce6 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000aa0:	23f0      	movs	r3, #240	@ 0xf0
 8000aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	2300      	movs	r3, #0
 8000aae:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000ab0:	230a      	movs	r3, #10
 8000ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ab4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4882      	ldr	r0, [pc, #520]	@ (8000cc4 <MX_GPIO_Init+0x5fc>)
 8000abc:	f000 fcd6 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000ac0:	23f7      	movs	r3, #247	@ 0xf7
 8000ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2300      	movs	r3, #0
 8000ace:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ad0:	230e      	movs	r3, #14
 8000ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000ad4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ad8:	4619      	mov	r1, r3
 8000ada:	487b      	ldr	r0, [pc, #492]	@ (8000cc8 <MX_GPIO_Init+0x600>)
 8000adc:	f000 fcc6 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000ae0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	2300      	movs	r3, #0
 8000af0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000af2:	2309      	movs	r3, #9
 8000af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000af6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000afa:	4619      	mov	r1, r3
 8000afc:	486d      	ldr	r0, [pc, #436]	@ (8000cb4 <MX_GPIO_Init+0x5ec>)
 8000afe:	f000 fcb5 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000b02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2300      	movs	r3, #0
 8000b12:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000b14:	230a      	movs	r3, #10
 8000b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000b18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4865      	ldr	r0, [pc, #404]	@ (8000cb4 <MX_GPIO_Init+0x5ec>)
 8000b20:	f000 fca4 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000b24:	2320      	movs	r3, #32
 8000b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4860      	ldr	r0, [pc, #384]	@ (8000cbc <MX_GPIO_Init+0x5f4>)
 8000b3c:	f000 fc96 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000b40:	2308      	movs	r3, #8
 8000b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	2302      	movs	r3, #2
 8000b46:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b50:	230d      	movs	r3, #13
 8000b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000b54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4858      	ldr	r0, [pc, #352]	@ (8000cbc <MX_GPIO_Init+0x5f4>)
 8000b5c:	f000 fc86 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000b60:	f241 030c 	movw	r3, #4108	@ 0x100c
 8000b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b66:	2301      	movs	r3, #1
 8000b68:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b72:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b76:	4619      	mov	r1, r3
 8000b78:	4852      	ldr	r0, [pc, #328]	@ (8000cc4 <MX_GPIO_Init+0x5fc>)
 8000b7a:	f000 fc77 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000b7e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b84:	2300      	movs	r3, #0
 8000b86:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000b8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b90:	4619      	mov	r1, r3
 8000b92:	484e      	ldr	r0, [pc, #312]	@ (8000ccc <MX_GPIO_Init+0x604>)
 8000b94:	f000 fc6a 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000b98:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000baa:	230c      	movs	r3, #12
 8000bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4846      	ldr	r0, [pc, #280]	@ (8000cd0 <MX_GPIO_Init+0x608>)
 8000bb6:	f000 fc59 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000bba:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8000bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bcc:	230e      	movs	r3, #14
 8000bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000bd0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	483b      	ldr	r0, [pc, #236]	@ (8000cc4 <MX_GPIO_Init+0x5fc>)
 8000bd8:	f000 fc48 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000bdc:	2308      	movs	r3, #8
 8000bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2300      	movs	r3, #0
 8000bea:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000bec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4835      	ldr	r0, [pc, #212]	@ (8000cc8 <MX_GPIO_Init+0x600>)
 8000bf4:	f000 fc3a 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000bf8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c0a:	230d      	movs	r3, #13
 8000c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000c0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c12:	4619      	mov	r1, r3
 8000c14:	4827      	ldr	r0, [pc, #156]	@ (8000cb4 <MX_GPIO_Init+0x5ec>)
 8000c16:	f000 fc29 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000c1a:	2310      	movs	r3, #16
 8000c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4823      	ldr	r0, [pc, #140]	@ (8000cbc <MX_GPIO_Init+0x5f4>)
 8000c2e:	f000 fc1d 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000c32:	2304      	movs	r3, #4
 8000c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000c42:	230c      	movs	r3, #12
 8000c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000c46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	481b      	ldr	r0, [pc, #108]	@ (8000cbc <MX_GPIO_Init+0x5f4>)
 8000c4e:	f000 fc0d 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000c52:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c64:	4619      	mov	r1, r3
 8000c66:	481b      	ldr	r0, [pc, #108]	@ (8000cd4 <MX_GPIO_Init+0x60c>)
 8000c68:	f000 fc00 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c70:	2302      	movs	r3, #2
 8000c72:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c7c:	2305      	movs	r3, #5
 8000c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8000c80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c84:	4619      	mov	r1, r3
 8000c86:	480f      	ldr	r0, [pc, #60]	@ (8000cc4 <MX_GPIO_Init+0x5fc>)
 8000c88:	f000 fbf0 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000c8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c92:	2301      	movs	r3, #1
 8000c94:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c9e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	480b      	ldr	r0, [pc, #44]	@ (8000cd4 <MX_GPIO_Init+0x60c>)
 8000ca6:	f000 fbe1 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000caa:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8000cae:	e013      	b.n	8000cd8 <MX_GPIO_Init+0x610>
 8000cb0:	40020400 	.word	0x40020400
 8000cb4:	40021800 	.word	0x40021800
 8000cb8:	40022400 	.word	0x40022400
 8000cbc:	40020c00 	.word	0x40020c00
 8000cc0:	40020000 	.word	0x40020000
 8000cc4:	40022000 	.word	0x40022000
 8000cc8:	40022800 	.word	0x40022800
 8000ccc:	40020800 	.word	0x40020800
 8000cd0:	40021400 	.word	0x40021400
 8000cd4:	40021c00 	.word	0x40021c00
 8000cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ce6:	230d      	movs	r3, #13
 8000ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000cea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cee:	4619      	mov	r1, r3
 8000cf0:	48ae      	ldr	r0, [pc, #696]	@ (8000fac <MX_GPIO_Init+0x8e4>)
 8000cf2:	f000 fbbb 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000d06:	2302      	movs	r3, #2
 8000d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000d0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d0e:	4619      	mov	r1, r3
 8000d10:	48a7      	ldr	r0, [pc, #668]	@ (8000fb0 <MX_GPIO_Init+0x8e8>)
 8000d12:	f000 fbab 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000d16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d24:	2300      	movs	r3, #0
 8000d26:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d28:	2307      	movs	r3, #7
 8000d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000d2c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d30:	4619      	mov	r1, r3
 8000d32:	48a0      	ldr	r0, [pc, #640]	@ (8000fb4 <MX_GPIO_Init+0x8ec>)
 8000d34:	f000 fb9a 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000d38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000d4e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d52:	4619      	mov	r1, r3
 8000d54:	4897      	ldr	r0, [pc, #604]	@ (8000fb4 <MX_GPIO_Init+0x8ec>)
 8000d56:	f000 fb89 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000d5a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d60:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000d64:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000d6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d6e:	4619      	mov	r1, r3
 8000d70:	488f      	ldr	r0, [pc, #572]	@ (8000fb0 <MX_GPIO_Init+0x8e8>)
 8000d72:	f000 fb7b 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000d76:	23c0      	movs	r3, #192	@ 0xc0
 8000d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d82:	2303      	movs	r3, #3
 8000d84:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000d86:	2308      	movs	r3, #8
 8000d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4889      	ldr	r0, [pc, #548]	@ (8000fb8 <MX_GPIO_Init+0x8f0>)
 8000d92:	f000 fb6b 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000d96:	2310      	movs	r3, #16
 8000d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da2:	2303      	movs	r3, #3
 8000da4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000da6:	230a      	movs	r3, #10
 8000da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000daa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dae:	4619      	mov	r1, r3
 8000db0:	487e      	ldr	r0, [pc, #504]	@ (8000fac <MX_GPIO_Init+0x8e4>)
 8000db2:	f000 fb5b 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000db6:	2328      	movs	r3, #40	@ 0x28
 8000db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000dc6:	230c      	movs	r3, #12
 8000dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000dca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4876      	ldr	r0, [pc, #472]	@ (8000fac <MX_GPIO_Init+0x8e4>)
 8000dd2:	f000 fb4b 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000dd6:	23c8      	movs	r3, #200	@ 0xc8
 8000dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	2300      	movs	r3, #0
 8000de4:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000de6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dea:	4619      	mov	r1, r3
 8000dec:	4873      	ldr	r0, [pc, #460]	@ (8000fbc <MX_GPIO_Init+0x8f4>)
 8000dee:	f000 fb3d 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000df2:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8000df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e04:	4619      	mov	r1, r3
 8000e06:	486e      	ldr	r0, [pc, #440]	@ (8000fc0 <MX_GPIO_Init+0x8f8>)
 8000e08:	f000 fb30 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000e0c:	2308      	movs	r3, #8
 8000e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	2302      	movs	r3, #2
 8000e12:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e1c:	230c      	movs	r3, #12
 8000e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000e20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e24:	4619      	mov	r1, r3
 8000e26:	4864      	ldr	r0, [pc, #400]	@ (8000fb8 <MX_GPIO_Init+0x8f0>)
 8000e28:	f000 fb20 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000e2c:	2305      	movs	r3, #5
 8000e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e30:	2302      	movs	r3, #2
 8000e32:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000e3c:	230a      	movs	r3, #10
 8000e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e44:	4619      	mov	r1, r3
 8000e46:	485c      	ldr	r0, [pc, #368]	@ (8000fb8 <MX_GPIO_Init+0x8f0>)
 8000e48:	f000 fb10 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e4c:	2332      	movs	r3, #50	@ 0x32
 8000e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e5c:	230b      	movs	r3, #11
 8000e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e64:	4619      	mov	r1, r3
 8000e66:	4854      	ldr	r0, [pc, #336]	@ (8000fb8 <MX_GPIO_Init+0x8f0>)
 8000e68:	f000 fb00 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e6c:	2304      	movs	r3, #4
 8000e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e7c:	2309      	movs	r3, #9
 8000e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e84:	4619      	mov	r1, r3
 8000e86:	484f      	ldr	r0, [pc, #316]	@ (8000fc4 <MX_GPIO_Init+0x8fc>)
 8000e88:	f000 faf0 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000e8c:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e92:	2302      	movs	r3, #2
 8000e94:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e9e:	2309      	movs	r3, #9
 8000ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ea2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4847      	ldr	r0, [pc, #284]	@ (8000fc8 <MX_GPIO_Init+0x900>)
 8000eaa:	f000 fadf 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000eae:	2304      	movs	r3, #4
 8000eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000eba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	483e      	ldr	r0, [pc, #248]	@ (8000fbc <MX_GPIO_Init+0x8f4>)
 8000ec2:	f000 fad3 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000ec6:	2386      	movs	r3, #134	@ 0x86
 8000ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ed6:	230b      	movs	r3, #11
 8000ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eda:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4834      	ldr	r0, [pc, #208]	@ (8000fb4 <MX_GPIO_Init+0x8ec>)
 8000ee2:	f000 fac3 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eea:	2303      	movs	r3, #3
 8000eec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000ef2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	482e      	ldr	r0, [pc, #184]	@ (8000fb4 <MX_GPIO_Init+0x8ec>)
 8000efa:	f000 fab7 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000efe:	2350      	movs	r3, #80	@ 0x50
 8000f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000f0e:	230d      	movs	r3, #13
 8000f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f12:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f16:	4619      	mov	r1, r3
 8000f18:	4826      	ldr	r0, [pc, #152]	@ (8000fb4 <MX_GPIO_Init+0x8ec>)
 8000f1a:	f000 faa7 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000f1e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f24:	2312      	movs	r3, #18
 8000f26:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f30:	2304      	movs	r3, #4
 8000f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f38:	4619      	mov	r1, r3
 8000f3a:	481c      	ldr	r0, [pc, #112]	@ (8000fac <MX_GPIO_Init+0x8e4>)
 8000f3c:	f000 fa96 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000f40:	2328      	movs	r3, #40	@ 0x28
 8000f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f44:	2302      	movs	r3, #2
 8000f46:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000f50:	230a      	movs	r3, #10
 8000f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4816      	ldr	r0, [pc, #88]	@ (8000fb4 <MX_GPIO_Init+0x8ec>)
 8000f5c:	f000 fa86 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000f60:	2340      	movs	r3, #64	@ 0x40
 8000f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f64:	2302      	movs	r3, #2
 8000f66:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000f70:	2309      	movs	r3, #9
 8000f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000f74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f78:	4619      	mov	r1, r3
 8000f7a:	480c      	ldr	r0, [pc, #48]	@ (8000fac <MX_GPIO_Init+0x8e4>)
 8000f7c:	f000 fa76 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000f80:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f92:	2305      	movs	r3, #5
 8000f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4809      	ldr	r0, [pc, #36]	@ (8000fc4 <MX_GPIO_Init+0x8fc>)
 8000f9e:	f000 fa65 	bl	800146c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fa2:	bf00      	nop
 8000fa4:	3740      	adds	r7, #64	@ 0x40
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40021c00 	.word	0x40021c00
 8000fb0:	40022000 	.word	0x40022000
 8000fb4:	40020000 	.word	0x40020000
 8000fb8:	40020800 	.word	0x40020800
 8000fbc:	40021800 	.word	0x40021800
 8000fc0:	40021400 	.word	0x40021400
 8000fc4:	40020400 	.word	0x40020400
 8000fc8:	40020c00 	.word	0x40020c00

08000fcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd0:	b672      	cpsid	i
}
 8000fd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <Error_Handler+0x8>

08000fd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000fde:	4b0f      	ldr	r3, [pc, #60]	@ (800101c <HAL_MspInit+0x44>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe2:	4a0e      	ldr	r2, [pc, #56]	@ (800101c <HAL_MspInit+0x44>)
 8000fe4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fe8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fea:	4b0c      	ldr	r3, [pc, #48]	@ (800101c <HAL_MspInit+0x44>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff6:	4b09      	ldr	r3, [pc, #36]	@ (800101c <HAL_MspInit+0x44>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ffa:	4a08      	ldr	r2, [pc, #32]	@ (800101c <HAL_MspInit+0x44>)
 8000ffc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001000:	6453      	str	r3, [r2, #68]	@ 0x44
 8001002:	4b06      	ldr	r3, [pc, #24]	@ (800101c <HAL_MspInit+0x44>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001006:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800100a:	603b      	str	r3, [r7, #0]
 800100c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	40023800 	.word	0x40023800

08001020 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001030:	d10b      	bne.n	800104a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001032:	4b09      	ldr	r3, [pc, #36]	@ (8001058 <HAL_TIM_PWM_MspInit+0x38>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001036:	4a08      	ldr	r2, [pc, #32]	@ (8001058 <HAL_TIM_PWM_MspInit+0x38>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	6413      	str	r3, [r2, #64]	@ 0x40
 800103e:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <HAL_TIM_PWM_MspInit+0x38>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800104a:	bf00      	nop
 800104c:	3714      	adds	r7, #20
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	40023800 	.word	0x40023800

0800105c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800107c:	d11c      	bne.n	80010b8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	4b10      	ldr	r3, [pc, #64]	@ (80010c0 <HAL_TIM_MspPostInit+0x64>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001082:	4a0f      	ldr	r2, [pc, #60]	@ (80010c0 <HAL_TIM_MspPostInit+0x64>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	6313      	str	r3, [r2, #48]	@ 0x30
 800108a:	4b0d      	ldr	r3, [pc, #52]	@ (80010c0 <HAL_TIM_MspPostInit+0x64>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001096:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800109a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109c:	2302      	movs	r3, #2
 800109e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80010a4:	2301      	movs	r3, #1
 80010a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010a8:	2301      	movs	r3, #1
 80010aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	4619      	mov	r1, r3
 80010b2:	4804      	ldr	r0, [pc, #16]	@ (80010c4 <HAL_TIM_MspPostInit+0x68>)
 80010b4:	f000 f9da 	bl	800146c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80010b8:	bf00      	nop
 80010ba:	3720      	adds	r7, #32
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40020000 	.word	0x40020000

080010c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010cc:	bf00      	nop
 80010ce:	e7fd      	b.n	80010cc <NMI_Handler+0x4>

080010d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d4:	bf00      	nop
 80010d6:	e7fd      	b.n	80010d4 <HardFault_Handler+0x4>

080010d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010dc:	bf00      	nop
 80010de:	e7fd      	b.n	80010dc <MemManage_Handler+0x4>

080010e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010e4:	bf00      	nop
 80010e6:	e7fd      	b.n	80010e4 <BusFault_Handler+0x4>

080010e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <UsageFault_Handler+0x4>

080010f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800111e:	f000 f87b 	bl	8001218 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800112c:	4b06      	ldr	r3, [pc, #24]	@ (8001148 <SystemInit+0x20>)
 800112e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001132:	4a05      	ldr	r2, [pc, #20]	@ (8001148 <SystemInit+0x20>)
 8001134:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001138:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800114c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001184 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001150:	480d      	ldr	r0, [pc, #52]	@ (8001188 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001152:	490e      	ldr	r1, [pc, #56]	@ (800118c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001154:	4a0e      	ldr	r2, [pc, #56]	@ (8001190 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001156:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001158:	e002      	b.n	8001160 <LoopCopyDataInit>

0800115a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800115a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800115c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800115e:	3304      	adds	r3, #4

08001160 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001160:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001162:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001164:	d3f9      	bcc.n	800115a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001166:	4a0b      	ldr	r2, [pc, #44]	@ (8001194 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001168:	4c0b      	ldr	r4, [pc, #44]	@ (8001198 <LoopFillZerobss+0x26>)
  movs r3, #0
 800116a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800116c:	e001      	b.n	8001172 <LoopFillZerobss>

0800116e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800116e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001170:	3204      	adds	r2, #4

08001172 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001172:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001174:	d3fb      	bcc.n	800116e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001176:	f7ff ffd7 	bl	8001128 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800117a:	f001 fe23 	bl	8002dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800117e:	f7ff f9bb 	bl	80004f8 <main>
  bx  lr    
 8001182:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001184:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001188:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800118c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001190:	08002e44 	.word	0x08002e44
  ldr r2, =_sbss
 8001194:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001198:	20000078 	.word	0x20000078

0800119c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800119c:	e7fe      	b.n	800119c <ADC_IRQHandler>

0800119e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a2:	2003      	movs	r0, #3
 80011a4:	f000 f92e 	bl	8001404 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011a8:	2000      	movs	r0, #0
 80011aa:	f000 f805 	bl	80011b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011ae:	f7ff ff13 	bl	8000fd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011b2:	2300      	movs	r3, #0
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011c0:	4b12      	ldr	r3, [pc, #72]	@ (800120c <HAL_InitTick+0x54>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4b12      	ldr	r3, [pc, #72]	@ (8001210 <HAL_InitTick+0x58>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	4619      	mov	r1, r3
 80011ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80011d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 f93b 	bl	8001452 <HAL_SYSTICK_Config>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e00e      	b.n	8001204 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b0f      	cmp	r3, #15
 80011ea:	d80a      	bhi.n	8001202 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ec:	2200      	movs	r2, #0
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295
 80011f4:	f000 f911 	bl	800141a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f8:	4a06      	ldr	r2, [pc, #24]	@ (8001214 <HAL_InitTick+0x5c>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011fe:	2300      	movs	r3, #0
 8001200:	e000      	b.n	8001204 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
}
 8001204:	4618      	mov	r0, r3
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000000 	.word	0x20000000
 8001210:	20000008 	.word	0x20000008
 8001214:	20000004 	.word	0x20000004

08001218 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800121c:	4b06      	ldr	r3, [pc, #24]	@ (8001238 <HAL_IncTick+0x20>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	461a      	mov	r2, r3
 8001222:	4b06      	ldr	r3, [pc, #24]	@ (800123c <HAL_IncTick+0x24>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4413      	add	r3, r2
 8001228:	4a04      	ldr	r2, [pc, #16]	@ (800123c <HAL_IncTick+0x24>)
 800122a:	6013      	str	r3, [r2, #0]
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	20000008 	.word	0x20000008
 800123c:	20000074 	.word	0x20000074

08001240 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return uwTick;
 8001244:	4b03      	ldr	r3, [pc, #12]	@ (8001254 <HAL_GetTick+0x14>)
 8001246:	681b      	ldr	r3, [r3, #0]
}
 8001248:	4618      	mov	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	20000074 	.word	0x20000074

08001258 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001260:	f7ff ffee 	bl	8001240 <HAL_GetTick>
 8001264:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001270:	d005      	beq.n	800127e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001272:	4b0a      	ldr	r3, [pc, #40]	@ (800129c <HAL_Delay+0x44>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	461a      	mov	r2, r3
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4413      	add	r3, r2
 800127c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800127e:	bf00      	nop
 8001280:	f7ff ffde 	bl	8001240 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	429a      	cmp	r2, r3
 800128e:	d8f7      	bhi.n	8001280 <HAL_Delay+0x28>
  {
  }
}
 8001290:	bf00      	nop
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000008 	.word	0x20000008

080012a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b0:	4b0b      	ldr	r3, [pc, #44]	@ (80012e0 <__NVIC_SetPriorityGrouping+0x40>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012bc:	4013      	ands	r3, r2
 80012be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012c8:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <__NVIC_SetPriorityGrouping+0x44>)
 80012ca:	4313      	orrs	r3, r2
 80012cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ce:	4a04      	ldr	r2, [pc, #16]	@ (80012e0 <__NVIC_SetPriorityGrouping+0x40>)
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	60d3      	str	r3, [r2, #12]
}
 80012d4:	bf00      	nop
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	e000ed00 	.word	0xe000ed00
 80012e4:	05fa0000 	.word	0x05fa0000

080012e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012ec:	4b04      	ldr	r3, [pc, #16]	@ (8001300 <__NVIC_GetPriorityGrouping+0x18>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	0a1b      	lsrs	r3, r3, #8
 80012f2:	f003 0307 	and.w	r3, r3, #7
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	6039      	str	r1, [r7, #0]
 800130e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001314:	2b00      	cmp	r3, #0
 8001316:	db0a      	blt.n	800132e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	b2da      	uxtb	r2, r3
 800131c:	490c      	ldr	r1, [pc, #48]	@ (8001350 <__NVIC_SetPriority+0x4c>)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	0112      	lsls	r2, r2, #4
 8001324:	b2d2      	uxtb	r2, r2
 8001326:	440b      	add	r3, r1
 8001328:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800132c:	e00a      	b.n	8001344 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4908      	ldr	r1, [pc, #32]	@ (8001354 <__NVIC_SetPriority+0x50>)
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	f003 030f 	and.w	r3, r3, #15
 800133a:	3b04      	subs	r3, #4
 800133c:	0112      	lsls	r2, r2, #4
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	440b      	add	r3, r1
 8001342:	761a      	strb	r2, [r3, #24]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000e100 	.word	0xe000e100
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001358:	b480      	push	{r7}
 800135a:	b089      	sub	sp, #36	@ 0x24
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f1c3 0307 	rsb	r3, r3, #7
 8001372:	2b04      	cmp	r3, #4
 8001374:	bf28      	it	cs
 8001376:	2304      	movcs	r3, #4
 8001378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3304      	adds	r3, #4
 800137e:	2b06      	cmp	r3, #6
 8001380:	d902      	bls.n	8001388 <NVIC_EncodePriority+0x30>
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	3b03      	subs	r3, #3
 8001386:	e000      	b.n	800138a <NVIC_EncodePriority+0x32>
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800138c:	f04f 32ff 	mov.w	r2, #4294967295
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43da      	mvns	r2, r3
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	401a      	ands	r2, r3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a0:	f04f 31ff 	mov.w	r1, #4294967295
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	fa01 f303 	lsl.w	r3, r1, r3
 80013aa:	43d9      	mvns	r1, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	4313      	orrs	r3, r2
         );
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3724      	adds	r7, #36	@ 0x24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
	...

080013c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013d0:	d301      	bcc.n	80013d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013d2:	2301      	movs	r3, #1
 80013d4:	e00f      	b.n	80013f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001400 <SysTick_Config+0x40>)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3b01      	subs	r3, #1
 80013dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013de:	210f      	movs	r1, #15
 80013e0:	f04f 30ff 	mov.w	r0, #4294967295
 80013e4:	f7ff ff8e 	bl	8001304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e8:	4b05      	ldr	r3, [pc, #20]	@ (8001400 <SysTick_Config+0x40>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ee:	4b04      	ldr	r3, [pc, #16]	@ (8001400 <SysTick_Config+0x40>)
 80013f0:	2207      	movs	r2, #7
 80013f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	e000e010 	.word	0xe000e010

08001404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff ff47 	bl	80012a0 <__NVIC_SetPriorityGrouping>
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800141a:	b580      	push	{r7, lr}
 800141c:	b086      	sub	sp, #24
 800141e:	af00      	add	r7, sp, #0
 8001420:	4603      	mov	r3, r0
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	607a      	str	r2, [r7, #4]
 8001426:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800142c:	f7ff ff5c 	bl	80012e8 <__NVIC_GetPriorityGrouping>
 8001430:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	68b9      	ldr	r1, [r7, #8]
 8001436:	6978      	ldr	r0, [r7, #20]
 8001438:	f7ff ff8e 	bl	8001358 <NVIC_EncodePriority>
 800143c:	4602      	mov	r2, r0
 800143e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001442:	4611      	mov	r1, r2
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff5d 	bl	8001304 <__NVIC_SetPriority>
}
 800144a:	bf00      	nop
 800144c:	3718      	adds	r7, #24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff ffb0 	bl	80013c0 <SysTick_Config>
 8001460:	4603      	mov	r3, r0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800146c:	b480      	push	{r7}
 800146e:	b089      	sub	sp, #36	@ 0x24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001482:	2300      	movs	r3, #0
 8001484:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001486:	2300      	movs	r3, #0
 8001488:	61fb      	str	r3, [r7, #28]
 800148a:	e175      	b.n	8001778 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800148c:	2201      	movs	r2, #1
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	697a      	ldr	r2, [r7, #20]
 800149c:	4013      	ands	r3, r2
 800149e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	f040 8164 	bne.w	8001772 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f003 0303 	and.w	r3, r3, #3
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d005      	beq.n	80014c2 <HAL_GPIO_Init+0x56>
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f003 0303 	and.w	r3, r3, #3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d130      	bne.n	8001524 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	2203      	movs	r2, #3
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43db      	mvns	r3, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4013      	ands	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	68da      	ldr	r2, [r3, #12]
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014f8:	2201      	movs	r2, #1
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	43db      	mvns	r3, r3
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4013      	ands	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	091b      	lsrs	r3, r3, #4
 800150e:	f003 0201 	and.w	r2, r3, #1
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4313      	orrs	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 0303 	and.w	r3, r3, #3
 800152c:	2b03      	cmp	r3, #3
 800152e:	d017      	beq.n	8001560 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	2203      	movs	r2, #3
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	689a      	ldr	r2, [r3, #8]
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4313      	orrs	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f003 0303 	and.w	r3, r3, #3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d123      	bne.n	80015b4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	08da      	lsrs	r2, r3, #3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3208      	adds	r2, #8
 8001574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001578:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	f003 0307 	and.w	r3, r3, #7
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	220f      	movs	r2, #15
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	691a      	ldr	r2, [r3, #16]
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	08da      	lsrs	r2, r3, #3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	3208      	adds	r2, #8
 80015ae:	69b9      	ldr	r1, [r7, #24]
 80015b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	2203      	movs	r2, #3
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43db      	mvns	r3, r3
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4013      	ands	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f003 0203 	and.w	r2, r3, #3
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4313      	orrs	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f000 80be 	beq.w	8001772 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f6:	4b66      	ldr	r3, [pc, #408]	@ (8001790 <HAL_GPIO_Init+0x324>)
 80015f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fa:	4a65      	ldr	r2, [pc, #404]	@ (8001790 <HAL_GPIO_Init+0x324>)
 80015fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001600:	6453      	str	r3, [r2, #68]	@ 0x44
 8001602:	4b63      	ldr	r3, [pc, #396]	@ (8001790 <HAL_GPIO_Init+0x324>)
 8001604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001606:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800160e:	4a61      	ldr	r2, [pc, #388]	@ (8001794 <HAL_GPIO_Init+0x328>)
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	089b      	lsrs	r3, r3, #2
 8001614:	3302      	adds	r3, #2
 8001616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800161a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	f003 0303 	and.w	r3, r3, #3
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	220f      	movs	r2, #15
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43db      	mvns	r3, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4013      	ands	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a58      	ldr	r2, [pc, #352]	@ (8001798 <HAL_GPIO_Init+0x32c>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d037      	beq.n	80016aa <HAL_GPIO_Init+0x23e>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a57      	ldr	r2, [pc, #348]	@ (800179c <HAL_GPIO_Init+0x330>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d031      	beq.n	80016a6 <HAL_GPIO_Init+0x23a>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a56      	ldr	r2, [pc, #344]	@ (80017a0 <HAL_GPIO_Init+0x334>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d02b      	beq.n	80016a2 <HAL_GPIO_Init+0x236>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a55      	ldr	r2, [pc, #340]	@ (80017a4 <HAL_GPIO_Init+0x338>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d025      	beq.n	800169e <HAL_GPIO_Init+0x232>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a54      	ldr	r2, [pc, #336]	@ (80017a8 <HAL_GPIO_Init+0x33c>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d01f      	beq.n	800169a <HAL_GPIO_Init+0x22e>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a53      	ldr	r2, [pc, #332]	@ (80017ac <HAL_GPIO_Init+0x340>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d019      	beq.n	8001696 <HAL_GPIO_Init+0x22a>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a52      	ldr	r2, [pc, #328]	@ (80017b0 <HAL_GPIO_Init+0x344>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d013      	beq.n	8001692 <HAL_GPIO_Init+0x226>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a51      	ldr	r2, [pc, #324]	@ (80017b4 <HAL_GPIO_Init+0x348>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d00d      	beq.n	800168e <HAL_GPIO_Init+0x222>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a50      	ldr	r2, [pc, #320]	@ (80017b8 <HAL_GPIO_Init+0x34c>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d007      	beq.n	800168a <HAL_GPIO_Init+0x21e>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a4f      	ldr	r2, [pc, #316]	@ (80017bc <HAL_GPIO_Init+0x350>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d101      	bne.n	8001686 <HAL_GPIO_Init+0x21a>
 8001682:	2309      	movs	r3, #9
 8001684:	e012      	b.n	80016ac <HAL_GPIO_Init+0x240>
 8001686:	230a      	movs	r3, #10
 8001688:	e010      	b.n	80016ac <HAL_GPIO_Init+0x240>
 800168a:	2308      	movs	r3, #8
 800168c:	e00e      	b.n	80016ac <HAL_GPIO_Init+0x240>
 800168e:	2307      	movs	r3, #7
 8001690:	e00c      	b.n	80016ac <HAL_GPIO_Init+0x240>
 8001692:	2306      	movs	r3, #6
 8001694:	e00a      	b.n	80016ac <HAL_GPIO_Init+0x240>
 8001696:	2305      	movs	r3, #5
 8001698:	e008      	b.n	80016ac <HAL_GPIO_Init+0x240>
 800169a:	2304      	movs	r3, #4
 800169c:	e006      	b.n	80016ac <HAL_GPIO_Init+0x240>
 800169e:	2303      	movs	r3, #3
 80016a0:	e004      	b.n	80016ac <HAL_GPIO_Init+0x240>
 80016a2:	2302      	movs	r3, #2
 80016a4:	e002      	b.n	80016ac <HAL_GPIO_Init+0x240>
 80016a6:	2301      	movs	r3, #1
 80016a8:	e000      	b.n	80016ac <HAL_GPIO_Init+0x240>
 80016aa:	2300      	movs	r3, #0
 80016ac:	69fa      	ldr	r2, [r7, #28]
 80016ae:	f002 0203 	and.w	r2, r2, #3
 80016b2:	0092      	lsls	r2, r2, #2
 80016b4:	4093      	lsls	r3, r2
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80016bc:	4935      	ldr	r1, [pc, #212]	@ (8001794 <HAL_GPIO_Init+0x328>)
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	089b      	lsrs	r3, r3, #2
 80016c2:	3302      	adds	r3, #2
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ca:	4b3d      	ldr	r3, [pc, #244]	@ (80017c0 <HAL_GPIO_Init+0x354>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4013      	ands	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016ee:	4a34      	ldr	r2, [pc, #208]	@ (80017c0 <HAL_GPIO_Init+0x354>)
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016f4:	4b32      	ldr	r3, [pc, #200]	@ (80017c0 <HAL_GPIO_Init+0x354>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	43db      	mvns	r3, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d003      	beq.n	8001718 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	4313      	orrs	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001718:	4a29      	ldr	r2, [pc, #164]	@ (80017c0 <HAL_GPIO_Init+0x354>)
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800171e:	4b28      	ldr	r3, [pc, #160]	@ (80017c0 <HAL_GPIO_Init+0x354>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	43db      	mvns	r3, r3
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	4013      	ands	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	4313      	orrs	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001742:	4a1f      	ldr	r2, [pc, #124]	@ (80017c0 <HAL_GPIO_Init+0x354>)
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001748:	4b1d      	ldr	r3, [pc, #116]	@ (80017c0 <HAL_GPIO_Init+0x354>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	43db      	mvns	r3, r3
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4013      	ands	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d003      	beq.n	800176c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	4313      	orrs	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800176c:	4a14      	ldr	r2, [pc, #80]	@ (80017c0 <HAL_GPIO_Init+0x354>)
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	3301      	adds	r3, #1
 8001776:	61fb      	str	r3, [r7, #28]
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	2b0f      	cmp	r3, #15
 800177c:	f67f ae86 	bls.w	800148c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001780:	bf00      	nop
 8001782:	bf00      	nop
 8001784:	3724      	adds	r7, #36	@ 0x24
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	40023800 	.word	0x40023800
 8001794:	40013800 	.word	0x40013800
 8001798:	40020000 	.word	0x40020000
 800179c:	40020400 	.word	0x40020400
 80017a0:	40020800 	.word	0x40020800
 80017a4:	40020c00 	.word	0x40020c00
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40021400 	.word	0x40021400
 80017b0:	40021800 	.word	0x40021800
 80017b4:	40021c00 	.word	0x40021c00
 80017b8:	40022000 	.word	0x40022000
 80017bc:	40022400 	.word	0x40022400
 80017c0:	40013c00 	.word	0x40013c00

080017c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	460b      	mov	r3, r1
 80017ce:	807b      	strh	r3, [r7, #2]
 80017d0:	4613      	mov	r3, r2
 80017d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017d4:	787b      	ldrb	r3, [r7, #1]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017da:	887a      	ldrh	r2, [r7, #2]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80017e0:	e003      	b.n	80017ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80017e2:	887b      	ldrh	r3, [r7, #2]
 80017e4:	041a      	lsls	r2, r3, #16
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	619a      	str	r2, [r3, #24]
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
	...

080017f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001800:	2300      	movs	r3, #0
 8001802:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e291      	b.n	8001d32 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 8087 	beq.w	800192a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800181c:	4b96      	ldr	r3, [pc, #600]	@ (8001a78 <HAL_RCC_OscConfig+0x280>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f003 030c 	and.w	r3, r3, #12
 8001824:	2b04      	cmp	r3, #4
 8001826:	d00c      	beq.n	8001842 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001828:	4b93      	ldr	r3, [pc, #588]	@ (8001a78 <HAL_RCC_OscConfig+0x280>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f003 030c 	and.w	r3, r3, #12
 8001830:	2b08      	cmp	r3, #8
 8001832:	d112      	bne.n	800185a <HAL_RCC_OscConfig+0x62>
 8001834:	4b90      	ldr	r3, [pc, #576]	@ (8001a78 <HAL_RCC_OscConfig+0x280>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800183c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001840:	d10b      	bne.n	800185a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001842:	4b8d      	ldr	r3, [pc, #564]	@ (8001a78 <HAL_RCC_OscConfig+0x280>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d06c      	beq.n	8001928 <HAL_RCC_OscConfig+0x130>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d168      	bne.n	8001928 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e26b      	b.n	8001d32 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001862:	d106      	bne.n	8001872 <HAL_RCC_OscConfig+0x7a>
 8001864:	4b84      	ldr	r3, [pc, #528]	@ (8001a78 <HAL_RCC_OscConfig+0x280>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a83      	ldr	r2, [pc, #524]	@ (8001a78 <HAL_RCC_OscConfig+0x280>)
 800186a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	e02e      	b.n	80018d0 <HAL_RCC_OscConfig+0xd8>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d10c      	bne.n	8001894 <HAL_RCC_OscConfig+0x9c>
 800187a:	4b7f      	ldr	r3, [pc, #508]	@ (8001a78 <HAL_RCC_OscConfig+0x280>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a7e      	ldr	r2, [pc, #504]	@ (8001a78 <HAL_RCC_OscConfig+0x280>)
 8001880:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	4b7c      	ldr	r3, [pc, #496]	@ (8001a78 <HAL_RCC_OscConfig+0x280>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a7b      	ldr	r2, [pc, #492]	@ (8001a78 <HAL_RCC_OscConfig+0x280>)
 800188c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001890:	6013      	str	r3, [r2, #0]
 8001892:	e01d      	b.n	80018d0 <HAL_RCC_OscConfig+0xd8>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800189c:	d10c      	bne.n	80018b8 <HAL_RCC_OscConfig+0xc0>
 800189e:	4b76      	ldr	r3, [pc, #472]	@ (8001a78 <HAL_RCC_OscConfig+0x280>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a75      	ldr	r2, [pc, #468]	@ (8001a78 <HAL_RCC_OscConfig+0x280>)
 80018a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	4b73      	ldr	r3, [pc, #460]	@ (8001a78 <HAL_RCC_OscConfig+0x280>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a72      	ldr	r2, [pc, #456]	@ (8001a78 <HAL_RCC_OscConfig+0x280>)
 80018b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	e00b      	b.n	80018d0 <HAL_RCC_OscConfig+0xd8>
 80018b8:	4b6f      	ldr	r3, [pc, #444]	@ (8001a78 <HAL_RCC_OscConfig+0x280>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a6e      	ldr	r2, [pc, #440]	@ (8001a78 <HAL_RCC_OscConfig+0x280>)
 80018be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018c2:	6013      	str	r3, [r2, #0]
 80018c4:	4b6c      	ldr	r3, [pc, #432]	@ (8001a78 <HAL_RCC_OscConfig+0x280>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a6b      	ldr	r2, [pc, #428]	@ (8001a78 <HAL_RCC_OscConfig+0x280>)
 80018ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d013      	beq.n	8001900 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d8:	f7ff fcb2 	bl	8001240 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e0:	f7ff fcae 	bl	8001240 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b64      	cmp	r3, #100	@ 0x64
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e21f      	b.n	8001d32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f2:	4b61      	ldr	r3, [pc, #388]	@ (8001a78 <HAL_RCC_OscConfig+0x280>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0f0      	beq.n	80018e0 <HAL_RCC_OscConfig+0xe8>
 80018fe:	e014      	b.n	800192a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001900:	f7ff fc9e 	bl	8001240 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001908:	f7ff fc9a 	bl	8001240 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b64      	cmp	r3, #100	@ 0x64
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e20b      	b.n	8001d32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800191a:	4b57      	ldr	r3, [pc, #348]	@ (8001a78 <HAL_RCC_OscConfig+0x280>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f0      	bne.n	8001908 <HAL_RCC_OscConfig+0x110>
 8001926:	e000      	b.n	800192a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d069      	beq.n	8001a0a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001936:	4b50      	ldr	r3, [pc, #320]	@ (8001a78 <HAL_RCC_OscConfig+0x280>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f003 030c 	and.w	r3, r3, #12
 800193e:	2b00      	cmp	r3, #0
 8001940:	d00b      	beq.n	800195a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001942:	4b4d      	ldr	r3, [pc, #308]	@ (8001a78 <HAL_RCC_OscConfig+0x280>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f003 030c 	and.w	r3, r3, #12
 800194a:	2b08      	cmp	r3, #8
 800194c:	d11c      	bne.n	8001988 <HAL_RCC_OscConfig+0x190>
 800194e:	4b4a      	ldr	r3, [pc, #296]	@ (8001a78 <HAL_RCC_OscConfig+0x280>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d116      	bne.n	8001988 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800195a:	4b47      	ldr	r3, [pc, #284]	@ (8001a78 <HAL_RCC_OscConfig+0x280>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d005      	beq.n	8001972 <HAL_RCC_OscConfig+0x17a>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d001      	beq.n	8001972 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e1df      	b.n	8001d32 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001972:	4b41      	ldr	r3, [pc, #260]	@ (8001a78 <HAL_RCC_OscConfig+0x280>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	493d      	ldr	r1, [pc, #244]	@ (8001a78 <HAL_RCC_OscConfig+0x280>)
 8001982:	4313      	orrs	r3, r2
 8001984:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001986:	e040      	b.n	8001a0a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d023      	beq.n	80019d8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001990:	4b39      	ldr	r3, [pc, #228]	@ (8001a78 <HAL_RCC_OscConfig+0x280>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a38      	ldr	r2, [pc, #224]	@ (8001a78 <HAL_RCC_OscConfig+0x280>)
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199c:	f7ff fc50 	bl	8001240 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a4:	f7ff fc4c 	bl	8001240 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e1bd      	b.n	8001d32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b6:	4b30      	ldr	r3, [pc, #192]	@ (8001a78 <HAL_RCC_OscConfig+0x280>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0f0      	beq.n	80019a4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001a78 <HAL_RCC_OscConfig+0x280>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	4929      	ldr	r1, [pc, #164]	@ (8001a78 <HAL_RCC_OscConfig+0x280>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	600b      	str	r3, [r1, #0]
 80019d6:	e018      	b.n	8001a0a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019d8:	4b27      	ldr	r3, [pc, #156]	@ (8001a78 <HAL_RCC_OscConfig+0x280>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a26      	ldr	r2, [pc, #152]	@ (8001a78 <HAL_RCC_OscConfig+0x280>)
 80019de:	f023 0301 	bic.w	r3, r3, #1
 80019e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e4:	f7ff fc2c 	bl	8001240 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ec:	f7ff fc28 	bl	8001240 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e199      	b.n	8001d32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001a78 <HAL_RCC_OscConfig+0x280>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f0      	bne.n	80019ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0308 	and.w	r3, r3, #8
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d038      	beq.n	8001a88 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d019      	beq.n	8001a52 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a1e:	4b16      	ldr	r3, [pc, #88]	@ (8001a78 <HAL_RCC_OscConfig+0x280>)
 8001a20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a22:	4a15      	ldr	r2, [pc, #84]	@ (8001a78 <HAL_RCC_OscConfig+0x280>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a2a:	f7ff fc09 	bl	8001240 <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a32:	f7ff fc05 	bl	8001240 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e176      	b.n	8001d32 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a44:	4b0c      	ldr	r3, [pc, #48]	@ (8001a78 <HAL_RCC_OscConfig+0x280>)
 8001a46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0f0      	beq.n	8001a32 <HAL_RCC_OscConfig+0x23a>
 8001a50:	e01a      	b.n	8001a88 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a52:	4b09      	ldr	r3, [pc, #36]	@ (8001a78 <HAL_RCC_OscConfig+0x280>)
 8001a54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a56:	4a08      	ldr	r2, [pc, #32]	@ (8001a78 <HAL_RCC_OscConfig+0x280>)
 8001a58:	f023 0301 	bic.w	r3, r3, #1
 8001a5c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5e:	f7ff fbef 	bl	8001240 <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a64:	e00a      	b.n	8001a7c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a66:	f7ff fbeb 	bl	8001240 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d903      	bls.n	8001a7c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e15c      	b.n	8001d32 <HAL_RCC_OscConfig+0x53a>
 8001a78:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a7c:	4b91      	ldr	r3, [pc, #580]	@ (8001cc4 <HAL_RCC_OscConfig+0x4cc>)
 8001a7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1ee      	bne.n	8001a66 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f000 80a4 	beq.w	8001bde <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a96:	4b8b      	ldr	r3, [pc, #556]	@ (8001cc4 <HAL_RCC_OscConfig+0x4cc>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d10d      	bne.n	8001abe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aa2:	4b88      	ldr	r3, [pc, #544]	@ (8001cc4 <HAL_RCC_OscConfig+0x4cc>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa6:	4a87      	ldr	r2, [pc, #540]	@ (8001cc4 <HAL_RCC_OscConfig+0x4cc>)
 8001aa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aac:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aae:	4b85      	ldr	r3, [pc, #532]	@ (8001cc4 <HAL_RCC_OscConfig+0x4cc>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aba:	2301      	movs	r3, #1
 8001abc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001abe:	4b82      	ldr	r3, [pc, #520]	@ (8001cc8 <HAL_RCC_OscConfig+0x4d0>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d118      	bne.n	8001afc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001aca:	4b7f      	ldr	r3, [pc, #508]	@ (8001cc8 <HAL_RCC_OscConfig+0x4d0>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a7e      	ldr	r2, [pc, #504]	@ (8001cc8 <HAL_RCC_OscConfig+0x4d0>)
 8001ad0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ad4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ad6:	f7ff fbb3 	bl	8001240 <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001adc:	e008      	b.n	8001af0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ade:	f7ff fbaf 	bl	8001240 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b64      	cmp	r3, #100	@ 0x64
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e120      	b.n	8001d32 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001af0:	4b75      	ldr	r3, [pc, #468]	@ (8001cc8 <HAL_RCC_OscConfig+0x4d0>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0f0      	beq.n	8001ade <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d106      	bne.n	8001b12 <HAL_RCC_OscConfig+0x31a>
 8001b04:	4b6f      	ldr	r3, [pc, #444]	@ (8001cc4 <HAL_RCC_OscConfig+0x4cc>)
 8001b06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b08:	4a6e      	ldr	r2, [pc, #440]	@ (8001cc4 <HAL_RCC_OscConfig+0x4cc>)
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b10:	e02d      	b.n	8001b6e <HAL_RCC_OscConfig+0x376>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d10c      	bne.n	8001b34 <HAL_RCC_OscConfig+0x33c>
 8001b1a:	4b6a      	ldr	r3, [pc, #424]	@ (8001cc4 <HAL_RCC_OscConfig+0x4cc>)
 8001b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b1e:	4a69      	ldr	r2, [pc, #420]	@ (8001cc4 <HAL_RCC_OscConfig+0x4cc>)
 8001b20:	f023 0301 	bic.w	r3, r3, #1
 8001b24:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b26:	4b67      	ldr	r3, [pc, #412]	@ (8001cc4 <HAL_RCC_OscConfig+0x4cc>)
 8001b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b2a:	4a66      	ldr	r2, [pc, #408]	@ (8001cc4 <HAL_RCC_OscConfig+0x4cc>)
 8001b2c:	f023 0304 	bic.w	r3, r3, #4
 8001b30:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b32:	e01c      	b.n	8001b6e <HAL_RCC_OscConfig+0x376>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	2b05      	cmp	r3, #5
 8001b3a:	d10c      	bne.n	8001b56 <HAL_RCC_OscConfig+0x35e>
 8001b3c:	4b61      	ldr	r3, [pc, #388]	@ (8001cc4 <HAL_RCC_OscConfig+0x4cc>)
 8001b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b40:	4a60      	ldr	r2, [pc, #384]	@ (8001cc4 <HAL_RCC_OscConfig+0x4cc>)
 8001b42:	f043 0304 	orr.w	r3, r3, #4
 8001b46:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b48:	4b5e      	ldr	r3, [pc, #376]	@ (8001cc4 <HAL_RCC_OscConfig+0x4cc>)
 8001b4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b4c:	4a5d      	ldr	r2, [pc, #372]	@ (8001cc4 <HAL_RCC_OscConfig+0x4cc>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b54:	e00b      	b.n	8001b6e <HAL_RCC_OscConfig+0x376>
 8001b56:	4b5b      	ldr	r3, [pc, #364]	@ (8001cc4 <HAL_RCC_OscConfig+0x4cc>)
 8001b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b5a:	4a5a      	ldr	r2, [pc, #360]	@ (8001cc4 <HAL_RCC_OscConfig+0x4cc>)
 8001b5c:	f023 0301 	bic.w	r3, r3, #1
 8001b60:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b62:	4b58      	ldr	r3, [pc, #352]	@ (8001cc4 <HAL_RCC_OscConfig+0x4cc>)
 8001b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b66:	4a57      	ldr	r2, [pc, #348]	@ (8001cc4 <HAL_RCC_OscConfig+0x4cc>)
 8001b68:	f023 0304 	bic.w	r3, r3, #4
 8001b6c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d015      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b76:	f7ff fb63 	bl	8001240 <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b7c:	e00a      	b.n	8001b94 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b7e:	f7ff fb5f 	bl	8001240 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e0ce      	b.n	8001d32 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b94:	4b4b      	ldr	r3, [pc, #300]	@ (8001cc4 <HAL_RCC_OscConfig+0x4cc>)
 8001b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0ee      	beq.n	8001b7e <HAL_RCC_OscConfig+0x386>
 8001ba0:	e014      	b.n	8001bcc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba2:	f7ff fb4d 	bl	8001240 <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba8:	e00a      	b.n	8001bc0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001baa:	f7ff fb49 	bl	8001240 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e0b8      	b.n	8001d32 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc0:	4b40      	ldr	r3, [pc, #256]	@ (8001cc4 <HAL_RCC_OscConfig+0x4cc>)
 8001bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1ee      	bne.n	8001baa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bcc:	7dfb      	ldrb	r3, [r7, #23]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d105      	bne.n	8001bde <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bd2:	4b3c      	ldr	r3, [pc, #240]	@ (8001cc4 <HAL_RCC_OscConfig+0x4cc>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd6:	4a3b      	ldr	r2, [pc, #236]	@ (8001cc4 <HAL_RCC_OscConfig+0x4cc>)
 8001bd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bdc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 80a4 	beq.w	8001d30 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001be8:	4b36      	ldr	r3, [pc, #216]	@ (8001cc4 <HAL_RCC_OscConfig+0x4cc>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 030c 	and.w	r3, r3, #12
 8001bf0:	2b08      	cmp	r3, #8
 8001bf2:	d06b      	beq.n	8001ccc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d149      	bne.n	8001c90 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bfc:	4b31      	ldr	r3, [pc, #196]	@ (8001cc4 <HAL_RCC_OscConfig+0x4cc>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a30      	ldr	r2, [pc, #192]	@ (8001cc4 <HAL_RCC_OscConfig+0x4cc>)
 8001c02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c08:	f7ff fb1a 	bl	8001240 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c10:	f7ff fb16 	bl	8001240 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e087      	b.n	8001d32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c22:	4b28      	ldr	r3, [pc, #160]	@ (8001cc4 <HAL_RCC_OscConfig+0x4cc>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1f0      	bne.n	8001c10 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69da      	ldr	r2, [r3, #28]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	431a      	orrs	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3c:	019b      	lsls	r3, r3, #6
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c44:	085b      	lsrs	r3, r3, #1
 8001c46:	3b01      	subs	r3, #1
 8001c48:	041b      	lsls	r3, r3, #16
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c50:	061b      	lsls	r3, r3, #24
 8001c52:	4313      	orrs	r3, r2
 8001c54:	4a1b      	ldr	r2, [pc, #108]	@ (8001cc4 <HAL_RCC_OscConfig+0x4cc>)
 8001c56:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001c5a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c5c:	4b19      	ldr	r3, [pc, #100]	@ (8001cc4 <HAL_RCC_OscConfig+0x4cc>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a18      	ldr	r2, [pc, #96]	@ (8001cc4 <HAL_RCC_OscConfig+0x4cc>)
 8001c62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c68:	f7ff faea 	bl	8001240 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c70:	f7ff fae6 	bl	8001240 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e057      	b.n	8001d32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c82:	4b10      	ldr	r3, [pc, #64]	@ (8001cc4 <HAL_RCC_OscConfig+0x4cc>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d0f0      	beq.n	8001c70 <HAL_RCC_OscConfig+0x478>
 8001c8e:	e04f      	b.n	8001d30 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c90:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc4 <HAL_RCC_OscConfig+0x4cc>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a0b      	ldr	r2, [pc, #44]	@ (8001cc4 <HAL_RCC_OscConfig+0x4cc>)
 8001c96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9c:	f7ff fad0 	bl	8001240 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca4:	f7ff facc 	bl	8001240 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e03d      	b.n	8001d32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cb6:	4b03      	ldr	r3, [pc, #12]	@ (8001cc4 <HAL_RCC_OscConfig+0x4cc>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f0      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x4ac>
 8001cc2:	e035      	b.n	8001d30 <HAL_RCC_OscConfig+0x538>
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d3c <HAL_RCC_OscConfig+0x544>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d028      	beq.n	8001d2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d121      	bne.n	8001d2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d11a      	bne.n	8001d2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d02:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d111      	bne.n	8001d2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d12:	085b      	lsrs	r3, r3, #1
 8001d14:	3b01      	subs	r3, #1
 8001d16:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d107      	bne.n	8001d2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d26:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d001      	beq.n	8001d30 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e000      	b.n	8001d32 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40023800 	.word	0x40023800

08001d40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d101      	bne.n	8001d58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e0d0      	b.n	8001efa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d58:	4b6a      	ldr	r3, [pc, #424]	@ (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 030f 	and.w	r3, r3, #15
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d910      	bls.n	8001d88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d66:	4b67      	ldr	r3, [pc, #412]	@ (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f023 020f 	bic.w	r2, r3, #15
 8001d6e:	4965      	ldr	r1, [pc, #404]	@ (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d76:	4b63      	ldr	r3, [pc, #396]	@ (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d001      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e0b8      	b.n	8001efa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d020      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d005      	beq.n	8001dac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001da0:	4b59      	ldr	r3, [pc, #356]	@ (8001f08 <HAL_RCC_ClockConfig+0x1c8>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	4a58      	ldr	r2, [pc, #352]	@ (8001f08 <HAL_RCC_ClockConfig+0x1c8>)
 8001da6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001daa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0308 	and.w	r3, r3, #8
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d005      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001db8:	4b53      	ldr	r3, [pc, #332]	@ (8001f08 <HAL_RCC_ClockConfig+0x1c8>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	4a52      	ldr	r2, [pc, #328]	@ (8001f08 <HAL_RCC_ClockConfig+0x1c8>)
 8001dbe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001dc2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dc4:	4b50      	ldr	r3, [pc, #320]	@ (8001f08 <HAL_RCC_ClockConfig+0x1c8>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	494d      	ldr	r1, [pc, #308]	@ (8001f08 <HAL_RCC_ClockConfig+0x1c8>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d040      	beq.n	8001e64 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d107      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dea:	4b47      	ldr	r3, [pc, #284]	@ (8001f08 <HAL_RCC_ClockConfig+0x1c8>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d115      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e07f      	b.n	8001efa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d107      	bne.n	8001e12 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e02:	4b41      	ldr	r3, [pc, #260]	@ (8001f08 <HAL_RCC_ClockConfig+0x1c8>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d109      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e073      	b.n	8001efa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e12:	4b3d      	ldr	r3, [pc, #244]	@ (8001f08 <HAL_RCC_ClockConfig+0x1c8>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e06b      	b.n	8001efa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e22:	4b39      	ldr	r3, [pc, #228]	@ (8001f08 <HAL_RCC_ClockConfig+0x1c8>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f023 0203 	bic.w	r2, r3, #3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	4936      	ldr	r1, [pc, #216]	@ (8001f08 <HAL_RCC_ClockConfig+0x1c8>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e34:	f7ff fa04 	bl	8001240 <HAL_GetTick>
 8001e38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e3a:	e00a      	b.n	8001e52 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e3c:	f7ff fa00 	bl	8001240 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e053      	b.n	8001efa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e52:	4b2d      	ldr	r3, [pc, #180]	@ (8001f08 <HAL_RCC_ClockConfig+0x1c8>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f003 020c 	and.w	r2, r3, #12
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d1eb      	bne.n	8001e3c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e64:	4b27      	ldr	r3, [pc, #156]	@ (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 030f 	and.w	r3, r3, #15
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d210      	bcs.n	8001e94 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e72:	4b24      	ldr	r3, [pc, #144]	@ (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f023 020f 	bic.w	r2, r3, #15
 8001e7a:	4922      	ldr	r1, [pc, #136]	@ (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e82:	4b20      	ldr	r3, [pc, #128]	@ (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 030f 	and.w	r3, r3, #15
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d001      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e032      	b.n	8001efa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d008      	beq.n	8001eb2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ea0:	4b19      	ldr	r3, [pc, #100]	@ (8001f08 <HAL_RCC_ClockConfig+0x1c8>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	4916      	ldr	r1, [pc, #88]	@ (8001f08 <HAL_RCC_ClockConfig+0x1c8>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0308 	and.w	r3, r3, #8
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d009      	beq.n	8001ed2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ebe:	4b12      	ldr	r3, [pc, #72]	@ (8001f08 <HAL_RCC_ClockConfig+0x1c8>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	490e      	ldr	r1, [pc, #56]	@ (8001f08 <HAL_RCC_ClockConfig+0x1c8>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ed2:	f000 f821 	bl	8001f18 <HAL_RCC_GetSysClockFreq>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8001f08 <HAL_RCC_ClockConfig+0x1c8>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	091b      	lsrs	r3, r3, #4
 8001ede:	f003 030f 	and.w	r3, r3, #15
 8001ee2:	490a      	ldr	r1, [pc, #40]	@ (8001f0c <HAL_RCC_ClockConfig+0x1cc>)
 8001ee4:	5ccb      	ldrb	r3, [r1, r3]
 8001ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eea:	4a09      	ldr	r2, [pc, #36]	@ (8001f10 <HAL_RCC_ClockConfig+0x1d0>)
 8001eec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001eee:	4b09      	ldr	r3, [pc, #36]	@ (8001f14 <HAL_RCC_ClockConfig+0x1d4>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff f960 	bl	80011b8 <HAL_InitTick>

  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40023c00 	.word	0x40023c00
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	08002e24 	.word	0x08002e24
 8001f10:	20000000 	.word	0x20000000
 8001f14:	20000004 	.word	0x20000004

08001f18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f1c:	b090      	sub	sp, #64	@ 0x40
 8001f1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001f20:	2300      	movs	r3, #0
 8001f22:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f24:	2300      	movs	r3, #0
 8001f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f28:	2300      	movs	r3, #0
 8001f2a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f30:	4b59      	ldr	r3, [pc, #356]	@ (8002098 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f003 030c 	and.w	r3, r3, #12
 8001f38:	2b08      	cmp	r3, #8
 8001f3a:	d00d      	beq.n	8001f58 <HAL_RCC_GetSysClockFreq+0x40>
 8001f3c:	2b08      	cmp	r3, #8
 8001f3e:	f200 80a1 	bhi.w	8002084 <HAL_RCC_GetSysClockFreq+0x16c>
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d002      	beq.n	8001f4c <HAL_RCC_GetSysClockFreq+0x34>
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	d003      	beq.n	8001f52 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f4a:	e09b      	b.n	8002084 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f4c:	4b53      	ldr	r3, [pc, #332]	@ (800209c <HAL_RCC_GetSysClockFreq+0x184>)
 8001f4e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f50:	e09b      	b.n	800208a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f52:	4b53      	ldr	r3, [pc, #332]	@ (80020a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f54:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f56:	e098      	b.n	800208a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f58:	4b4f      	ldr	r3, [pc, #316]	@ (8002098 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f60:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001f62:	4b4d      	ldr	r3, [pc, #308]	@ (8002098 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d028      	beq.n	8001fc0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f6e:	4b4a      	ldr	r3, [pc, #296]	@ (8002098 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	099b      	lsrs	r3, r3, #6
 8001f74:	2200      	movs	r2, #0
 8001f76:	623b      	str	r3, [r7, #32]
 8001f78:	627a      	str	r2, [r7, #36]	@ 0x24
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
 8001f7c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001f80:	2100      	movs	r1, #0
 8001f82:	4b47      	ldr	r3, [pc, #284]	@ (80020a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f84:	fb03 f201 	mul.w	r2, r3, r1
 8001f88:	2300      	movs	r3, #0
 8001f8a:	fb00 f303 	mul.w	r3, r0, r3
 8001f8e:	4413      	add	r3, r2
 8001f90:	4a43      	ldr	r2, [pc, #268]	@ (80020a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f92:	fba0 1202 	umull	r1, r2, r0, r2
 8001f96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001f98:	460a      	mov	r2, r1
 8001f9a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001f9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f9e:	4413      	add	r3, r2
 8001fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	61bb      	str	r3, [r7, #24]
 8001fa8:	61fa      	str	r2, [r7, #28]
 8001faa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001fb2:	f7fe f929 	bl	8000208 <__aeabi_uldivmod>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	4613      	mov	r3, r2
 8001fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001fbe:	e053      	b.n	8002068 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fc0:	4b35      	ldr	r3, [pc, #212]	@ (8002098 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	099b      	lsrs	r3, r3, #6
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	617a      	str	r2, [r7, #20]
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001fd2:	f04f 0b00 	mov.w	fp, #0
 8001fd6:	4652      	mov	r2, sl
 8001fd8:	465b      	mov	r3, fp
 8001fda:	f04f 0000 	mov.w	r0, #0
 8001fde:	f04f 0100 	mov.w	r1, #0
 8001fe2:	0159      	lsls	r1, r3, #5
 8001fe4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fe8:	0150      	lsls	r0, r2, #5
 8001fea:	4602      	mov	r2, r0
 8001fec:	460b      	mov	r3, r1
 8001fee:	ebb2 080a 	subs.w	r8, r2, sl
 8001ff2:	eb63 090b 	sbc.w	r9, r3, fp
 8001ff6:	f04f 0200 	mov.w	r2, #0
 8001ffa:	f04f 0300 	mov.w	r3, #0
 8001ffe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002002:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002006:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800200a:	ebb2 0408 	subs.w	r4, r2, r8
 800200e:	eb63 0509 	sbc.w	r5, r3, r9
 8002012:	f04f 0200 	mov.w	r2, #0
 8002016:	f04f 0300 	mov.w	r3, #0
 800201a:	00eb      	lsls	r3, r5, #3
 800201c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002020:	00e2      	lsls	r2, r4, #3
 8002022:	4614      	mov	r4, r2
 8002024:	461d      	mov	r5, r3
 8002026:	eb14 030a 	adds.w	r3, r4, sl
 800202a:	603b      	str	r3, [r7, #0]
 800202c:	eb45 030b 	adc.w	r3, r5, fp
 8002030:	607b      	str	r3, [r7, #4]
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	f04f 0300 	mov.w	r3, #0
 800203a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800203e:	4629      	mov	r1, r5
 8002040:	028b      	lsls	r3, r1, #10
 8002042:	4621      	mov	r1, r4
 8002044:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002048:	4621      	mov	r1, r4
 800204a:	028a      	lsls	r2, r1, #10
 800204c:	4610      	mov	r0, r2
 800204e:	4619      	mov	r1, r3
 8002050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002052:	2200      	movs	r2, #0
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	60fa      	str	r2, [r7, #12]
 8002058:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800205c:	f7fe f8d4 	bl	8000208 <__aeabi_uldivmod>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	4613      	mov	r3, r2
 8002066:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002068:	4b0b      	ldr	r3, [pc, #44]	@ (8002098 <HAL_RCC_GetSysClockFreq+0x180>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	0c1b      	lsrs	r3, r3, #16
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	3301      	adds	r3, #1
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002078:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800207a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800207c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002080:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002082:	e002      	b.n	800208a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002084:	4b05      	ldr	r3, [pc, #20]	@ (800209c <HAL_RCC_GetSysClockFreq+0x184>)
 8002086:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002088:	bf00      	nop
    }
  }
  return sysclockfreq;
 800208a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800208c:	4618      	mov	r0, r3
 800208e:	3740      	adds	r7, #64	@ 0x40
 8002090:	46bd      	mov	sp, r7
 8002092:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002096:	bf00      	nop
 8002098:	40023800 	.word	0x40023800
 800209c:	00f42400 	.word	0x00f42400
 80020a0:	017d7840 	.word	0x017d7840

080020a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d001      	beq.n	80020bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e04c      	b.n	8002156 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2202      	movs	r2, #2
 80020c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a26      	ldr	r2, [pc, #152]	@ (8002164 <HAL_TIM_Base_Start+0xc0>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d022      	beq.n	8002114 <HAL_TIM_Base_Start+0x70>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020d6:	d01d      	beq.n	8002114 <HAL_TIM_Base_Start+0x70>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a22      	ldr	r2, [pc, #136]	@ (8002168 <HAL_TIM_Base_Start+0xc4>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d018      	beq.n	8002114 <HAL_TIM_Base_Start+0x70>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a21      	ldr	r2, [pc, #132]	@ (800216c <HAL_TIM_Base_Start+0xc8>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d013      	beq.n	8002114 <HAL_TIM_Base_Start+0x70>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a1f      	ldr	r2, [pc, #124]	@ (8002170 <HAL_TIM_Base_Start+0xcc>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d00e      	beq.n	8002114 <HAL_TIM_Base_Start+0x70>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a1e      	ldr	r2, [pc, #120]	@ (8002174 <HAL_TIM_Base_Start+0xd0>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d009      	beq.n	8002114 <HAL_TIM_Base_Start+0x70>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a1c      	ldr	r2, [pc, #112]	@ (8002178 <HAL_TIM_Base_Start+0xd4>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d004      	beq.n	8002114 <HAL_TIM_Base_Start+0x70>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a1b      	ldr	r2, [pc, #108]	@ (800217c <HAL_TIM_Base_Start+0xd8>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d115      	bne.n	8002140 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689a      	ldr	r2, [r3, #8]
 800211a:	4b19      	ldr	r3, [pc, #100]	@ (8002180 <HAL_TIM_Base_Start+0xdc>)
 800211c:	4013      	ands	r3, r2
 800211e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2b06      	cmp	r3, #6
 8002124:	d015      	beq.n	8002152 <HAL_TIM_Base_Start+0xae>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800212c:	d011      	beq.n	8002152 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f042 0201 	orr.w	r2, r2, #1
 800213c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800213e:	e008      	b.n	8002152 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f042 0201 	orr.w	r2, r2, #1
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	e000      	b.n	8002154 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002152:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	40010000 	.word	0x40010000
 8002168:	40000400 	.word	0x40000400
 800216c:	40000800 	.word	0x40000800
 8002170:	40000c00 	.word	0x40000c00
 8002174:	40010400 	.word	0x40010400
 8002178:	40014000 	.word	0x40014000
 800217c:	40001800 	.word	0x40001800
 8002180:	00010007 	.word	0x00010007

08002184 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e049      	b.n	800222a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d106      	bne.n	80021b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7fe ff38 	bl	8001020 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2202      	movs	r2, #2
 80021b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3304      	adds	r3, #4
 80021c0:	4619      	mov	r1, r3
 80021c2:	4610      	mov	r0, r2
 80021c4:	f000 fa44 	bl	8002650 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
	...

08002234 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d109      	bne.n	8002258 <HAL_TIM_PWM_Start+0x24>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2b01      	cmp	r3, #1
 800224e:	bf14      	ite	ne
 8002250:	2301      	movne	r3, #1
 8002252:	2300      	moveq	r3, #0
 8002254:	b2db      	uxtb	r3, r3
 8002256:	e03c      	b.n	80022d2 <HAL_TIM_PWM_Start+0x9e>
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	2b04      	cmp	r3, #4
 800225c:	d109      	bne.n	8002272 <HAL_TIM_PWM_Start+0x3e>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b01      	cmp	r3, #1
 8002268:	bf14      	ite	ne
 800226a:	2301      	movne	r3, #1
 800226c:	2300      	moveq	r3, #0
 800226e:	b2db      	uxtb	r3, r3
 8002270:	e02f      	b.n	80022d2 <HAL_TIM_PWM_Start+0x9e>
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	2b08      	cmp	r3, #8
 8002276:	d109      	bne.n	800228c <HAL_TIM_PWM_Start+0x58>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800227e:	b2db      	uxtb	r3, r3
 8002280:	2b01      	cmp	r3, #1
 8002282:	bf14      	ite	ne
 8002284:	2301      	movne	r3, #1
 8002286:	2300      	moveq	r3, #0
 8002288:	b2db      	uxtb	r3, r3
 800228a:	e022      	b.n	80022d2 <HAL_TIM_PWM_Start+0x9e>
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	2b0c      	cmp	r3, #12
 8002290:	d109      	bne.n	80022a6 <HAL_TIM_PWM_Start+0x72>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b01      	cmp	r3, #1
 800229c:	bf14      	ite	ne
 800229e:	2301      	movne	r3, #1
 80022a0:	2300      	moveq	r3, #0
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	e015      	b.n	80022d2 <HAL_TIM_PWM_Start+0x9e>
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	2b10      	cmp	r3, #16
 80022aa:	d109      	bne.n	80022c0 <HAL_TIM_PWM_Start+0x8c>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	bf14      	ite	ne
 80022b8:	2301      	movne	r3, #1
 80022ba:	2300      	moveq	r3, #0
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	e008      	b.n	80022d2 <HAL_TIM_PWM_Start+0x9e>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	bf14      	ite	ne
 80022cc:	2301      	movne	r3, #1
 80022ce:	2300      	moveq	r3, #0
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e092      	b.n	8002400 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d104      	bne.n	80022ea <HAL_TIM_PWM_Start+0xb6>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2202      	movs	r2, #2
 80022e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022e8:	e023      	b.n	8002332 <HAL_TIM_PWM_Start+0xfe>
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	2b04      	cmp	r3, #4
 80022ee:	d104      	bne.n	80022fa <HAL_TIM_PWM_Start+0xc6>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2202      	movs	r2, #2
 80022f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022f8:	e01b      	b.n	8002332 <HAL_TIM_PWM_Start+0xfe>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	2b08      	cmp	r3, #8
 80022fe:	d104      	bne.n	800230a <HAL_TIM_PWM_Start+0xd6>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2202      	movs	r2, #2
 8002304:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002308:	e013      	b.n	8002332 <HAL_TIM_PWM_Start+0xfe>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	2b0c      	cmp	r3, #12
 800230e:	d104      	bne.n	800231a <HAL_TIM_PWM_Start+0xe6>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2202      	movs	r2, #2
 8002314:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002318:	e00b      	b.n	8002332 <HAL_TIM_PWM_Start+0xfe>
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	2b10      	cmp	r3, #16
 800231e:	d104      	bne.n	800232a <HAL_TIM_PWM_Start+0xf6>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2202      	movs	r2, #2
 8002324:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002328:	e003      	b.n	8002332 <HAL_TIM_PWM_Start+0xfe>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2202      	movs	r2, #2
 800232e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2201      	movs	r2, #1
 8002338:	6839      	ldr	r1, [r7, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f000 fc86 	bl	8002c4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a30      	ldr	r2, [pc, #192]	@ (8002408 <HAL_TIM_PWM_Start+0x1d4>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d004      	beq.n	8002354 <HAL_TIM_PWM_Start+0x120>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a2f      	ldr	r2, [pc, #188]	@ (800240c <HAL_TIM_PWM_Start+0x1d8>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d101      	bne.n	8002358 <HAL_TIM_PWM_Start+0x124>
 8002354:	2301      	movs	r3, #1
 8002356:	e000      	b.n	800235a <HAL_TIM_PWM_Start+0x126>
 8002358:	2300      	movs	r3, #0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d007      	beq.n	800236e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800236c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a25      	ldr	r2, [pc, #148]	@ (8002408 <HAL_TIM_PWM_Start+0x1d4>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d022      	beq.n	80023be <HAL_TIM_PWM_Start+0x18a>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002380:	d01d      	beq.n	80023be <HAL_TIM_PWM_Start+0x18a>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a22      	ldr	r2, [pc, #136]	@ (8002410 <HAL_TIM_PWM_Start+0x1dc>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d018      	beq.n	80023be <HAL_TIM_PWM_Start+0x18a>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a20      	ldr	r2, [pc, #128]	@ (8002414 <HAL_TIM_PWM_Start+0x1e0>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d013      	beq.n	80023be <HAL_TIM_PWM_Start+0x18a>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a1f      	ldr	r2, [pc, #124]	@ (8002418 <HAL_TIM_PWM_Start+0x1e4>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d00e      	beq.n	80023be <HAL_TIM_PWM_Start+0x18a>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a19      	ldr	r2, [pc, #100]	@ (800240c <HAL_TIM_PWM_Start+0x1d8>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d009      	beq.n	80023be <HAL_TIM_PWM_Start+0x18a>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a1b      	ldr	r2, [pc, #108]	@ (800241c <HAL_TIM_PWM_Start+0x1e8>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d004      	beq.n	80023be <HAL_TIM_PWM_Start+0x18a>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a19      	ldr	r2, [pc, #100]	@ (8002420 <HAL_TIM_PWM_Start+0x1ec>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d115      	bne.n	80023ea <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	4b17      	ldr	r3, [pc, #92]	@ (8002424 <HAL_TIM_PWM_Start+0x1f0>)
 80023c6:	4013      	ands	r3, r2
 80023c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2b06      	cmp	r3, #6
 80023ce:	d015      	beq.n	80023fc <HAL_TIM_PWM_Start+0x1c8>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023d6:	d011      	beq.n	80023fc <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f042 0201 	orr.w	r2, r2, #1
 80023e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023e8:	e008      	b.n	80023fc <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f042 0201 	orr.w	r2, r2, #1
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	e000      	b.n	80023fe <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40010000 	.word	0x40010000
 800240c:	40010400 	.word	0x40010400
 8002410:	40000400 	.word	0x40000400
 8002414:	40000800 	.word	0x40000800
 8002418:	40000c00 	.word	0x40000c00
 800241c:	40014000 	.word	0x40014000
 8002420:	40001800 	.word	0x40001800
 8002424:	00010007 	.word	0x00010007

08002428 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002434:	2300      	movs	r3, #0
 8002436:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800243e:	2b01      	cmp	r3, #1
 8002440:	d101      	bne.n	8002446 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002442:	2302      	movs	r3, #2
 8002444:	e0ff      	b.n	8002646 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2b14      	cmp	r3, #20
 8002452:	f200 80f0 	bhi.w	8002636 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002456:	a201      	add	r2, pc, #4	@ (adr r2, 800245c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800245c:	080024b1 	.word	0x080024b1
 8002460:	08002637 	.word	0x08002637
 8002464:	08002637 	.word	0x08002637
 8002468:	08002637 	.word	0x08002637
 800246c:	080024f1 	.word	0x080024f1
 8002470:	08002637 	.word	0x08002637
 8002474:	08002637 	.word	0x08002637
 8002478:	08002637 	.word	0x08002637
 800247c:	08002533 	.word	0x08002533
 8002480:	08002637 	.word	0x08002637
 8002484:	08002637 	.word	0x08002637
 8002488:	08002637 	.word	0x08002637
 800248c:	08002573 	.word	0x08002573
 8002490:	08002637 	.word	0x08002637
 8002494:	08002637 	.word	0x08002637
 8002498:	08002637 	.word	0x08002637
 800249c:	080025b5 	.word	0x080025b5
 80024a0:	08002637 	.word	0x08002637
 80024a4:	08002637 	.word	0x08002637
 80024a8:	08002637 	.word	0x08002637
 80024ac:	080025f5 	.word	0x080025f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68b9      	ldr	r1, [r7, #8]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f000 f96a 	bl	8002790 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	699a      	ldr	r2, [r3, #24]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f042 0208 	orr.w	r2, r2, #8
 80024ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	699a      	ldr	r2, [r3, #24]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0204 	bic.w	r2, r2, #4
 80024da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6999      	ldr	r1, [r3, #24]
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	691a      	ldr	r2, [r3, #16]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	619a      	str	r2, [r3, #24]
      break;
 80024ee:	e0a5      	b.n	800263c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68b9      	ldr	r1, [r7, #8]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 f9bc 	bl	8002874 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	699a      	ldr	r2, [r3, #24]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800250a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	699a      	ldr	r2, [r3, #24]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800251a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6999      	ldr	r1, [r3, #24]
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	021a      	lsls	r2, r3, #8
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	430a      	orrs	r2, r1
 800252e:	619a      	str	r2, [r3, #24]
      break;
 8002530:	e084      	b.n	800263c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68b9      	ldr	r1, [r7, #8]
 8002538:	4618      	mov	r0, r3
 800253a:	f000 fa13 	bl	8002964 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	69da      	ldr	r2, [r3, #28]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f042 0208 	orr.w	r2, r2, #8
 800254c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	69da      	ldr	r2, [r3, #28]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0204 	bic.w	r2, r2, #4
 800255c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	69d9      	ldr	r1, [r3, #28]
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	691a      	ldr	r2, [r3, #16]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	61da      	str	r2, [r3, #28]
      break;
 8002570:	e064      	b.n	800263c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68b9      	ldr	r1, [r7, #8]
 8002578:	4618      	mov	r0, r3
 800257a:	f000 fa69 	bl	8002a50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	69da      	ldr	r2, [r3, #28]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800258c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	69da      	ldr	r2, [r3, #28]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800259c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	69d9      	ldr	r1, [r3, #28]
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	021a      	lsls	r2, r3, #8
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	61da      	str	r2, [r3, #28]
      break;
 80025b2:	e043      	b.n	800263c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68b9      	ldr	r1, [r7, #8]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 faa0 	bl	8002b00 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 0208 	orr.w	r2, r2, #8
 80025ce:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 0204 	bic.w	r2, r2, #4
 80025de:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	691a      	ldr	r2, [r3, #16]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80025f2:	e023      	b.n	800263c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68b9      	ldr	r1, [r7, #8]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f000 fad2 	bl	8002ba4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800260e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800261e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	021a      	lsls	r2, r3, #8
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	430a      	orrs	r2, r1
 8002632:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002634:	e002      	b.n	800263c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	75fb      	strb	r3, [r7, #23]
      break;
 800263a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002644:	7dfb      	ldrb	r3, [r7, #23]
}
 8002646:	4618      	mov	r0, r3
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop

08002650 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a40      	ldr	r2, [pc, #256]	@ (8002764 <TIM_Base_SetConfig+0x114>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d013      	beq.n	8002690 <TIM_Base_SetConfig+0x40>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800266e:	d00f      	beq.n	8002690 <TIM_Base_SetConfig+0x40>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a3d      	ldr	r2, [pc, #244]	@ (8002768 <TIM_Base_SetConfig+0x118>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d00b      	beq.n	8002690 <TIM_Base_SetConfig+0x40>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a3c      	ldr	r2, [pc, #240]	@ (800276c <TIM_Base_SetConfig+0x11c>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d007      	beq.n	8002690 <TIM_Base_SetConfig+0x40>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a3b      	ldr	r2, [pc, #236]	@ (8002770 <TIM_Base_SetConfig+0x120>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d003      	beq.n	8002690 <TIM_Base_SetConfig+0x40>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a3a      	ldr	r2, [pc, #232]	@ (8002774 <TIM_Base_SetConfig+0x124>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d108      	bne.n	80026a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002696:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	4313      	orrs	r3, r2
 80026a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a2f      	ldr	r2, [pc, #188]	@ (8002764 <TIM_Base_SetConfig+0x114>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d02b      	beq.n	8002702 <TIM_Base_SetConfig+0xb2>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026b0:	d027      	beq.n	8002702 <TIM_Base_SetConfig+0xb2>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a2c      	ldr	r2, [pc, #176]	@ (8002768 <TIM_Base_SetConfig+0x118>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d023      	beq.n	8002702 <TIM_Base_SetConfig+0xb2>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a2b      	ldr	r2, [pc, #172]	@ (800276c <TIM_Base_SetConfig+0x11c>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d01f      	beq.n	8002702 <TIM_Base_SetConfig+0xb2>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a2a      	ldr	r2, [pc, #168]	@ (8002770 <TIM_Base_SetConfig+0x120>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d01b      	beq.n	8002702 <TIM_Base_SetConfig+0xb2>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a29      	ldr	r2, [pc, #164]	@ (8002774 <TIM_Base_SetConfig+0x124>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d017      	beq.n	8002702 <TIM_Base_SetConfig+0xb2>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a28      	ldr	r2, [pc, #160]	@ (8002778 <TIM_Base_SetConfig+0x128>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d013      	beq.n	8002702 <TIM_Base_SetConfig+0xb2>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a27      	ldr	r2, [pc, #156]	@ (800277c <TIM_Base_SetConfig+0x12c>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d00f      	beq.n	8002702 <TIM_Base_SetConfig+0xb2>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a26      	ldr	r2, [pc, #152]	@ (8002780 <TIM_Base_SetConfig+0x130>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d00b      	beq.n	8002702 <TIM_Base_SetConfig+0xb2>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a25      	ldr	r2, [pc, #148]	@ (8002784 <TIM_Base_SetConfig+0x134>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d007      	beq.n	8002702 <TIM_Base_SetConfig+0xb2>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a24      	ldr	r2, [pc, #144]	@ (8002788 <TIM_Base_SetConfig+0x138>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d003      	beq.n	8002702 <TIM_Base_SetConfig+0xb2>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a23      	ldr	r2, [pc, #140]	@ (800278c <TIM_Base_SetConfig+0x13c>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d108      	bne.n	8002714 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002708:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	4313      	orrs	r3, r2
 8002712:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	4313      	orrs	r3, r2
 8002720:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a0a      	ldr	r2, [pc, #40]	@ (8002764 <TIM_Base_SetConfig+0x114>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d003      	beq.n	8002748 <TIM_Base_SetConfig+0xf8>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a0c      	ldr	r2, [pc, #48]	@ (8002774 <TIM_Base_SetConfig+0x124>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d103      	bne.n	8002750 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	691a      	ldr	r2, [r3, #16]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	615a      	str	r2, [r3, #20]
}
 8002756:	bf00      	nop
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	40010000 	.word	0x40010000
 8002768:	40000400 	.word	0x40000400
 800276c:	40000800 	.word	0x40000800
 8002770:	40000c00 	.word	0x40000c00
 8002774:	40010400 	.word	0x40010400
 8002778:	40014000 	.word	0x40014000
 800277c:	40014400 	.word	0x40014400
 8002780:	40014800 	.word	0x40014800
 8002784:	40001800 	.word	0x40001800
 8002788:	40001c00 	.word	0x40001c00
 800278c:	40002000 	.word	0x40002000

08002790 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002790:	b480      	push	{r7}
 8002792:	b087      	sub	sp, #28
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	f023 0201 	bic.w	r2, r3, #1
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	4b2b      	ldr	r3, [pc, #172]	@ (8002868 <TIM_OC1_SetConfig+0xd8>)
 80027bc:	4013      	ands	r3, r2
 80027be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f023 0303 	bic.w	r3, r3, #3
 80027c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f023 0302 	bic.w	r3, r3, #2
 80027d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a21      	ldr	r2, [pc, #132]	@ (800286c <TIM_OC1_SetConfig+0xdc>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d003      	beq.n	80027f4 <TIM_OC1_SetConfig+0x64>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a20      	ldr	r2, [pc, #128]	@ (8002870 <TIM_OC1_SetConfig+0xe0>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d10c      	bne.n	800280e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	f023 0308 	bic.w	r3, r3, #8
 80027fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	4313      	orrs	r3, r2
 8002804:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	f023 0304 	bic.w	r3, r3, #4
 800280c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a16      	ldr	r2, [pc, #88]	@ (800286c <TIM_OC1_SetConfig+0xdc>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d003      	beq.n	800281e <TIM_OC1_SetConfig+0x8e>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a15      	ldr	r2, [pc, #84]	@ (8002870 <TIM_OC1_SetConfig+0xe0>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d111      	bne.n	8002842 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002824:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800282c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	4313      	orrs	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	4313      	orrs	r3, r2
 8002840:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	621a      	str	r2, [r3, #32]
}
 800285c:	bf00      	nop
 800285e:	371c      	adds	r7, #28
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	fffeff8f 	.word	0xfffeff8f
 800286c:	40010000 	.word	0x40010000
 8002870:	40010400 	.word	0x40010400

08002874 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002874:	b480      	push	{r7}
 8002876:	b087      	sub	sp, #28
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	f023 0210 	bic.w	r2, r3, #16
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	4b2e      	ldr	r3, [pc, #184]	@ (8002958 <TIM_OC2_SetConfig+0xe4>)
 80028a0:	4013      	ands	r3, r2
 80028a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	021b      	lsls	r3, r3, #8
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	f023 0320 	bic.w	r3, r3, #32
 80028be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a23      	ldr	r2, [pc, #140]	@ (800295c <TIM_OC2_SetConfig+0xe8>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d003      	beq.n	80028dc <TIM_OC2_SetConfig+0x68>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a22      	ldr	r2, [pc, #136]	@ (8002960 <TIM_OC2_SetConfig+0xec>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d10d      	bne.n	80028f8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	011b      	lsls	r3, r3, #4
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80028f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a18      	ldr	r2, [pc, #96]	@ (800295c <TIM_OC2_SetConfig+0xe8>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d003      	beq.n	8002908 <TIM_OC2_SetConfig+0x94>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a17      	ldr	r2, [pc, #92]	@ (8002960 <TIM_OC2_SetConfig+0xec>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d113      	bne.n	8002930 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800290e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002916:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	695b      	ldr	r3, [r3, #20]
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4313      	orrs	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	4313      	orrs	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	621a      	str	r2, [r3, #32]
}
 800294a:	bf00      	nop
 800294c:	371c      	adds	r7, #28
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	feff8fff 	.word	0xfeff8fff
 800295c:	40010000 	.word	0x40010000
 8002960:	40010400 	.word	0x40010400

08002964 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002964:	b480      	push	{r7}
 8002966:	b087      	sub	sp, #28
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	4b2d      	ldr	r3, [pc, #180]	@ (8002a44 <TIM_OC3_SetConfig+0xe0>)
 8002990:	4013      	ands	r3, r2
 8002992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f023 0303 	bic.w	r3, r3, #3
 800299a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80029ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	021b      	lsls	r3, r3, #8
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a22      	ldr	r2, [pc, #136]	@ (8002a48 <TIM_OC3_SetConfig+0xe4>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d003      	beq.n	80029ca <TIM_OC3_SetConfig+0x66>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a21      	ldr	r2, [pc, #132]	@ (8002a4c <TIM_OC3_SetConfig+0xe8>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d10d      	bne.n	80029e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80029d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	021b      	lsls	r3, r3, #8
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	4313      	orrs	r3, r2
 80029dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80029e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a17      	ldr	r2, [pc, #92]	@ (8002a48 <TIM_OC3_SetConfig+0xe4>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d003      	beq.n	80029f6 <TIM_OC3_SetConfig+0x92>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a16      	ldr	r2, [pc, #88]	@ (8002a4c <TIM_OC3_SetConfig+0xe8>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d113      	bne.n	8002a1e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80029fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002a04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	011b      	lsls	r3, r3, #4
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	011b      	lsls	r3, r3, #4
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685a      	ldr	r2, [r3, #4]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	621a      	str	r2, [r3, #32]
}
 8002a38:	bf00      	nop
 8002a3a:	371c      	adds	r7, #28
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	fffeff8f 	.word	0xfffeff8f
 8002a48:	40010000 	.word	0x40010000
 8002a4c:	40010400 	.word	0x40010400

08002a50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b087      	sub	sp, #28
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	4b1e      	ldr	r3, [pc, #120]	@ (8002af4 <TIM_OC4_SetConfig+0xa4>)
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	021b      	lsls	r3, r3, #8
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002a9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	031b      	lsls	r3, r3, #12
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a13      	ldr	r2, [pc, #76]	@ (8002af8 <TIM_OC4_SetConfig+0xa8>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d003      	beq.n	8002ab8 <TIM_OC4_SetConfig+0x68>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a12      	ldr	r2, [pc, #72]	@ (8002afc <TIM_OC4_SetConfig+0xac>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d109      	bne.n	8002acc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002abe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	019b      	lsls	r3, r3, #6
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	621a      	str	r2, [r3, #32]
}
 8002ae6:	bf00      	nop
 8002ae8:	371c      	adds	r7, #28
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	feff8fff 	.word	0xfeff8fff
 8002af8:	40010000 	.word	0x40010000
 8002afc:	40010400 	.word	0x40010400

08002b00 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b087      	sub	sp, #28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	4b1b      	ldr	r3, [pc, #108]	@ (8002b98 <TIM_OC5_SetConfig+0x98>)
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002b40:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	041b      	lsls	r3, r3, #16
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a12      	ldr	r2, [pc, #72]	@ (8002b9c <TIM_OC5_SetConfig+0x9c>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d003      	beq.n	8002b5e <TIM_OC5_SetConfig+0x5e>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a11      	ldr	r2, [pc, #68]	@ (8002ba0 <TIM_OC5_SetConfig+0xa0>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d109      	bne.n	8002b72 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b64:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	021b      	lsls	r3, r3, #8
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	621a      	str	r2, [r3, #32]
}
 8002b8c:	bf00      	nop
 8002b8e:	371c      	adds	r7, #28
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	fffeff8f 	.word	0xfffeff8f
 8002b9c:	40010000 	.word	0x40010000
 8002ba0:	40010400 	.word	0x40010400

08002ba4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b087      	sub	sp, #28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
 8002bb2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	4b1c      	ldr	r3, [pc, #112]	@ (8002c40 <TIM_OC6_SetConfig+0x9c>)
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	021b      	lsls	r3, r3, #8
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002be6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	051b      	lsls	r3, r3, #20
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a13      	ldr	r2, [pc, #76]	@ (8002c44 <TIM_OC6_SetConfig+0xa0>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d003      	beq.n	8002c04 <TIM_OC6_SetConfig+0x60>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a12      	ldr	r2, [pc, #72]	@ (8002c48 <TIM_OC6_SetConfig+0xa4>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d109      	bne.n	8002c18 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c0a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	029b      	lsls	r3, r3, #10
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	621a      	str	r2, [r3, #32]
}
 8002c32:	bf00      	nop
 8002c34:	371c      	adds	r7, #28
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	feff8fff 	.word	0xfeff8fff
 8002c44:	40010000 	.word	0x40010000
 8002c48:	40010400 	.word	0x40010400

08002c4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b087      	sub	sp, #28
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	f003 031f 	and.w	r3, r3, #31
 8002c5e:	2201      	movs	r2, #1
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6a1a      	ldr	r2, [r3, #32]
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	401a      	ands	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6a1a      	ldr	r2, [r3, #32]
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	f003 031f 	and.w	r3, r3, #31
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	fa01 f303 	lsl.w	r3, r1, r3
 8002c84:	431a      	orrs	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	621a      	str	r2, [r3, #32]
}
 8002c8a:	bf00      	nop
 8002c8c:	371c      	adds	r7, #28
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
	...

08002c98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d101      	bne.n	8002cb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cac:	2302      	movs	r3, #2
 8002cae:	e06d      	b.n	8002d8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2202      	movs	r2, #2
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a30      	ldr	r2, [pc, #192]	@ (8002d98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d004      	beq.n	8002ce4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a2f      	ldr	r2, [pc, #188]	@ (8002d9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d108      	bne.n	8002cf6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002cea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cfc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a20      	ldr	r2, [pc, #128]	@ (8002d98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d022      	beq.n	8002d60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d22:	d01d      	beq.n	8002d60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a1d      	ldr	r2, [pc, #116]	@ (8002da0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d018      	beq.n	8002d60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a1c      	ldr	r2, [pc, #112]	@ (8002da4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d013      	beq.n	8002d60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a1a      	ldr	r2, [pc, #104]	@ (8002da8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d00e      	beq.n	8002d60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a15      	ldr	r2, [pc, #84]	@ (8002d9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d009      	beq.n	8002d60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a16      	ldr	r2, [pc, #88]	@ (8002dac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d004      	beq.n	8002d60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a15      	ldr	r2, [pc, #84]	@ (8002db0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d10c      	bne.n	8002d7a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68ba      	ldr	r2, [r7, #8]
 8002d78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	40010000 	.word	0x40010000
 8002d9c:	40010400 	.word	0x40010400
 8002da0:	40000400 	.word	0x40000400
 8002da4:	40000800 	.word	0x40000800
 8002da8:	40000c00 	.word	0x40000c00
 8002dac:	40014000 	.word	0x40014000
 8002db0:	40001800 	.word	0x40001800

08002db4 <memset>:
 8002db4:	4402      	add	r2, r0
 8002db6:	4603      	mov	r3, r0
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d100      	bne.n	8002dbe <memset+0xa>
 8002dbc:	4770      	bx	lr
 8002dbe:	f803 1b01 	strb.w	r1, [r3], #1
 8002dc2:	e7f9      	b.n	8002db8 <memset+0x4>

08002dc4 <__libc_init_array>:
 8002dc4:	b570      	push	{r4, r5, r6, lr}
 8002dc6:	4d0d      	ldr	r5, [pc, #52]	@ (8002dfc <__libc_init_array+0x38>)
 8002dc8:	4c0d      	ldr	r4, [pc, #52]	@ (8002e00 <__libc_init_array+0x3c>)
 8002dca:	1b64      	subs	r4, r4, r5
 8002dcc:	10a4      	asrs	r4, r4, #2
 8002dce:	2600      	movs	r6, #0
 8002dd0:	42a6      	cmp	r6, r4
 8002dd2:	d109      	bne.n	8002de8 <__libc_init_array+0x24>
 8002dd4:	4d0b      	ldr	r5, [pc, #44]	@ (8002e04 <__libc_init_array+0x40>)
 8002dd6:	4c0c      	ldr	r4, [pc, #48]	@ (8002e08 <__libc_init_array+0x44>)
 8002dd8:	f000 f818 	bl	8002e0c <_init>
 8002ddc:	1b64      	subs	r4, r4, r5
 8002dde:	10a4      	asrs	r4, r4, #2
 8002de0:	2600      	movs	r6, #0
 8002de2:	42a6      	cmp	r6, r4
 8002de4:	d105      	bne.n	8002df2 <__libc_init_array+0x2e>
 8002de6:	bd70      	pop	{r4, r5, r6, pc}
 8002de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dec:	4798      	blx	r3
 8002dee:	3601      	adds	r6, #1
 8002df0:	e7ee      	b.n	8002dd0 <__libc_init_array+0xc>
 8002df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002df6:	4798      	blx	r3
 8002df8:	3601      	adds	r6, #1
 8002dfa:	e7f2      	b.n	8002de2 <__libc_init_array+0x1e>
 8002dfc:	08002e3c 	.word	0x08002e3c
 8002e00:	08002e3c 	.word	0x08002e3c
 8002e04:	08002e3c 	.word	0x08002e3c
 8002e08:	08002e40 	.word	0x08002e40

08002e0c <_init>:
 8002e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e0e:	bf00      	nop
 8002e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e12:	bc08      	pop	{r3}
 8002e14:	469e      	mov	lr, r3
 8002e16:	4770      	bx	lr

08002e18 <_fini>:
 8002e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e1a:	bf00      	nop
 8002e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e1e:	bc08      	pop	{r3}
 8002e20:	469e      	mov	lr, r3
 8002e22:	4770      	bx	lr
