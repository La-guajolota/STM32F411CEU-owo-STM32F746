
Factor_Potencia.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007650  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d4  080077f0  080077f0  000177f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bc4  08007bc4  00020214  2**0
                  CONTENTS
  4 .ARM          00000008  08007bc4  08007bc4  00017bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bcc  08007bcc  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bcc  08007bcc  00017bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bd0  08007bd0  00017bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  08007bd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  20000214  08007de8  00020214  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004e4  08007de8  000204e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000efe9  00000000  00000000  00020287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022bb  00000000  00000000  0002f270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e70  00000000  00000000  00031530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b47  00000000  00000000  000323a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000189aa  00000000  00000000  00032ee7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010f44  00000000  00000000  0004b891  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c737  00000000  00000000  0005c7d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004fcc  00000000  00000000  000f8f0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000fded8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000214 	.word	0x20000214
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080077d8 	.word	0x080077d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000218 	.word	0x20000218
 80001dc:	080077d8 	.word	0x080077d8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	0000      	movs	r0, r0
	...

08000f58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f5c:	b092      	sub	sp, #72	; 0x48
 8000f5e:	af0c      	add	r7, sp, #48	; 0x30
	/* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f60:	f000 fd64 	bl	8001a2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f64:	f000 f976 	bl	8001254 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f68:	f000 fad2 	bl	8001510 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f6c:	f000 fab0 	bl	80014d0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f70:	f000 f9d8 	bl	8001324 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000f74:	f000 fa82 	bl	800147c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000f78:	f000 fa34 	bl	80013e4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2); //INICIALIZAMOS TIMER TRIGER DEL ADC
 8000f7c:	48a4      	ldr	r0, [pc, #656]	; (8001210 <main+0x2b8>)
 8000f7e:	f002 fd91 	bl	8003aa4 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1,adc_buffer,2); // Comienza el ADC Y HABILITA DMA
 8000f82:	2202      	movs	r2, #2
 8000f84:	49a3      	ldr	r1, [pc, #652]	; (8001214 <main+0x2bc>)
 8000f86:	48a4      	ldr	r0, [pc, #656]	; (8001218 <main+0x2c0>)
 8000f88:	f000 ff16 	bl	8001db8 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (end_pf_cal) {
 8000f8c:	4ba3      	ldr	r3, [pc, #652]	; (800121c <main+0x2c4>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d060      	beq.n	8001056 <main+0xfe>
		  sprintf(msg,"PF:%.2f PA:%.1f phi:%.1f Vrms:%.1f Irms:%.1f V:%.1f I:%.1f \r\n",PF,PA,phi,Vrms,Irms,V,I);
 8000f94:	4ba2      	ldr	r3, [pc, #648]	; (8001220 <main+0x2c8>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fadd 	bl	8000558 <__aeabi_f2d>
 8000f9e:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8000fa2:	4ba0      	ldr	r3, [pc, #640]	; (8001224 <main+0x2cc>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fad6 	bl	8000558 <__aeabi_f2d>
 8000fac:	4680      	mov	r8, r0
 8000fae:	4689      	mov	r9, r1
 8000fb0:	4b9d      	ldr	r3, [pc, #628]	; (8001228 <main+0x2d0>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff facf 	bl	8000558 <__aeabi_f2d>
 8000fba:	4682      	mov	sl, r0
 8000fbc:	468b      	mov	fp, r1
 8000fbe:	4b9b      	ldr	r3, [pc, #620]	; (800122c <main+0x2d4>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fac8 	bl	8000558 <__aeabi_f2d>
 8000fc8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000fcc:	4b98      	ldr	r3, [pc, #608]	; (8001230 <main+0x2d8>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fac1 	bl	8000558 <__aeabi_f2d>
 8000fd6:	e9c7 0100 	strd	r0, r1, [r7]
 8000fda:	4b96      	ldr	r3, [pc, #600]	; (8001234 <main+0x2dc>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff faba 	bl	8000558 <__aeabi_f2d>
 8000fe4:	4604      	mov	r4, r0
 8000fe6:	460d      	mov	r5, r1
 8000fe8:	4b93      	ldr	r3, [pc, #588]	; (8001238 <main+0x2e0>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fab3 	bl	8000558 <__aeabi_f2d>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8000ffa:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8000ffe:	ed97 7b00 	vldr	d7, [r7]
 8001002:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001006:	ed97 7b02 	vldr	d7, [r7, #8]
 800100a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800100e:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8001012:	e9cd 8900 	strd	r8, r9, [sp]
 8001016:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800101a:	4988      	ldr	r1, [pc, #544]	; (800123c <main+0x2e4>)
 800101c:	4888      	ldr	r0, [pc, #544]	; (8001240 <main+0x2e8>)
 800101e:	f004 f92b 	bl	8005278 <siprintf>
		  //sprintf(msg2,"Vrms:%.1f V:%.1f I:%.1f \r\n",Vrms,V,I);
		  HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8001022:	4887      	ldr	r0, [pc, #540]	; (8001240 <main+0x2e8>)
 8001024:	f7ff f92c 	bl	8000280 <strlen>
 8001028:	4603      	mov	r3, r0
 800102a:	b29a      	uxth	r2, r3
 800102c:	f04f 33ff 	mov.w	r3, #4294967295
 8001030:	4983      	ldr	r1, [pc, #524]	; (8001240 <main+0x2e8>)
 8001032:	4884      	ldr	r0, [pc, #528]	; (8001244 <main+0x2ec>)
 8001034:	f003 f83c 	bl	80040b0 <HAL_UART_Transmit>

		  PA = 0;
 8001038:	4b7a      	ldr	r3, [pc, #488]	; (8001224 <main+0x2cc>)
 800103a:	f04f 0200 	mov.w	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
		  Vrms = 0;
 8001040:	4b7a      	ldr	r3, [pc, #488]	; (800122c <main+0x2d4>)
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
		  Irms = 0;
 8001048:	4b79      	ldr	r3, [pc, #484]	; (8001230 <main+0x2d8>)
 800104a:	f04f 0200 	mov.w	r2, #0
 800104e:	601a      	str	r2, [r3, #0]

		  end_pf_cal = false;
 8001050:	4b72      	ldr	r3, [pc, #456]	; (800121c <main+0x2c4>)
 8001052:	2200      	movs	r2, #0
 8001054:	701a      	strb	r2, [r3, #0]
	}

	 if (EOC_adc){ //por interrupcion del adc_dma
 8001056:	4b7c      	ldr	r3, [pc, #496]	; (8001248 <main+0x2f0>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d07c      	beq.n	8001158 <main+0x200>
		//hacemos convercion de datos
		V = V_pendiente*adc_buffer[0]-Vp_max;
 800105e:	4b6d      	ldr	r3, [pc, #436]	; (8001214 <main+0x2bc>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fa56 	bl	8000514 <__aeabi_ui2d>
 8001068:	a363      	add	r3, pc, #396	; (adr r3, 80011f8 <main+0x2a0>)
 800106a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106e:	f7ff facb 	bl	8000608 <__aeabi_dmul>
 8001072:	4602      	mov	r2, r0
 8001074:	460b      	mov	r3, r1
 8001076:	4610      	mov	r0, r2
 8001078:	4619      	mov	r1, r3
 800107a:	a361      	add	r3, pc, #388	; (adr r3, 8001200 <main+0x2a8>)
 800107c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001080:	f7ff f90a 	bl	8000298 <__aeabi_dsub>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	4610      	mov	r0, r2
 800108a:	4619      	mov	r1, r3
 800108c:	f7ff fd94 	bl	8000bb8 <__aeabi_d2f>
 8001090:	4603      	mov	r3, r0
 8001092:	4a68      	ldr	r2, [pc, #416]	; (8001234 <main+0x2dc>)
 8001094:	6013      	str	r3, [r2, #0]
		I = I_pediente*adc_buffer[1]-Ip_max;
 8001096:	4b5f      	ldr	r3, [pc, #380]	; (8001214 <main+0x2bc>)
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fa3a 	bl	8000514 <__aeabi_ui2d>
 80010a0:	a355      	add	r3, pc, #340	; (adr r3, 80011f8 <main+0x2a0>)
 80010a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a6:	f7ff faaf 	bl	8000608 <__aeabi_dmul>
 80010aa:	4602      	mov	r2, r0
 80010ac:	460b      	mov	r3, r1
 80010ae:	4610      	mov	r0, r2
 80010b0:	4619      	mov	r1, r3
 80010b2:	a353      	add	r3, pc, #332	; (adr r3, 8001200 <main+0x2a8>)
 80010b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b8:	f7ff f8ee 	bl	8000298 <__aeabi_dsub>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	4610      	mov	r0, r2
 80010c2:	4619      	mov	r1, r3
 80010c4:	f7ff fd78 	bl	8000bb8 <__aeabi_d2f>
 80010c8:	4603      	mov	r3, r0
 80010ca:	4a5b      	ldr	r2, [pc, #364]	; (8001238 <main+0x2e0>)
 80010cc:	6013      	str	r3, [r2, #0]

		//Implementamos las integrales discretas
		PA += (V*I)/N;
 80010ce:	4b59      	ldr	r3, [pc, #356]	; (8001234 <main+0x2dc>)
 80010d0:	ed93 7a00 	vldr	s14, [r3]
 80010d4:	4b58      	ldr	r3, [pc, #352]	; (8001238 <main+0x2e0>)
 80010d6:	edd3 7a00 	vldr	s15, [r3]
 80010da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010de:	eddf 6a5b 	vldr	s13, [pc, #364]	; 800124c <main+0x2f4>
 80010e2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010e6:	4b4f      	ldr	r3, [pc, #316]	; (8001224 <main+0x2cc>)
 80010e8:	edd3 7a00 	vldr	s15, [r3]
 80010ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010f0:	4b4c      	ldr	r3, [pc, #304]	; (8001224 <main+0x2cc>)
 80010f2:	edc3 7a00 	vstr	s15, [r3]
		Vrms += (V*V)/N;
 80010f6:	4b4f      	ldr	r3, [pc, #316]	; (8001234 <main+0x2dc>)
 80010f8:	ed93 7a00 	vldr	s14, [r3]
 80010fc:	4b4d      	ldr	r3, [pc, #308]	; (8001234 <main+0x2dc>)
 80010fe:	edd3 7a00 	vldr	s15, [r3]
 8001102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001106:	eddf 6a51 	vldr	s13, [pc, #324]	; 800124c <main+0x2f4>
 800110a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800110e:	4b47      	ldr	r3, [pc, #284]	; (800122c <main+0x2d4>)
 8001110:	edd3 7a00 	vldr	s15, [r3]
 8001114:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001118:	4b44      	ldr	r3, [pc, #272]	; (800122c <main+0x2d4>)
 800111a:	edc3 7a00 	vstr	s15, [r3]
		Irms += (I*I)/N;
 800111e:	4b46      	ldr	r3, [pc, #280]	; (8001238 <main+0x2e0>)
 8001120:	ed93 7a00 	vldr	s14, [r3]
 8001124:	4b44      	ldr	r3, [pc, #272]	; (8001238 <main+0x2e0>)
 8001126:	edd3 7a00 	vldr	s15, [r3]
 800112a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800112e:	eddf 6a47 	vldr	s13, [pc, #284]	; 800124c <main+0x2f4>
 8001132:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001136:	4b3e      	ldr	r3, [pc, #248]	; (8001230 <main+0x2d8>)
 8001138:	edd3 7a00 	vldr	s15, [r3]
 800113c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001140:	4b3b      	ldr	r3, [pc, #236]	; (8001230 <main+0x2d8>)
 8001142:	edc3 7a00 	vstr	s15, [r3]

		samples++;
 8001146:	4b42      	ldr	r3, [pc, #264]	; (8001250 <main+0x2f8>)
 8001148:	881b      	ldrh	r3, [r3, #0]
 800114a:	3301      	adds	r3, #1
 800114c:	b29a      	uxth	r2, r3
 800114e:	4b40      	ldr	r3, [pc, #256]	; (8001250 <main+0x2f8>)
 8001150:	801a      	strh	r2, [r3, #0]
		EOC_adc = false;
 8001152:	4b3d      	ldr	r3, [pc, #244]	; (8001248 <main+0x2f0>)
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]
	}

	if (samples >= N) {
 8001158:	4b3d      	ldr	r3, [pc, #244]	; (8001250 <main+0x2f8>)
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	2bc7      	cmp	r3, #199	; 0xc7
 800115e:	f67f af15 	bls.w	8000f8c <main+0x34>
		//Terminamos de calcular
		Vrms = sqrtf(Vrms);
 8001162:	4b32      	ldr	r3, [pc, #200]	; (800122c <main+0x2d4>)
 8001164:	edd3 7a00 	vldr	s15, [r3]
 8001168:	eeb0 0a67 	vmov.f32	s0, s15
 800116c:	f006 fa0c 	bl	8007588 <sqrtf>
 8001170:	eef0 7a40 	vmov.f32	s15, s0
 8001174:	4b2d      	ldr	r3, [pc, #180]	; (800122c <main+0x2d4>)
 8001176:	edc3 7a00 	vstr	s15, [r3]
		Irms = sqrtf(Irms);
 800117a:	4b2d      	ldr	r3, [pc, #180]	; (8001230 <main+0x2d8>)
 800117c:	edd3 7a00 	vldr	s15, [r3]
 8001180:	eeb0 0a67 	vmov.f32	s0, s15
 8001184:	f006 fa00 	bl	8007588 <sqrtf>
 8001188:	eef0 7a40 	vmov.f32	s15, s0
 800118c:	4b28      	ldr	r3, [pc, #160]	; (8001230 <main+0x2d8>)
 800118e:	edc3 7a00 	vstr	s15, [r3]
		PF = PA/(Vrms*Irms);
 8001192:	4b24      	ldr	r3, [pc, #144]	; (8001224 <main+0x2cc>)
 8001194:	edd3 6a00 	vldr	s13, [r3]
 8001198:	4b24      	ldr	r3, [pc, #144]	; (800122c <main+0x2d4>)
 800119a:	ed93 7a00 	vldr	s14, [r3]
 800119e:	4b24      	ldr	r3, [pc, #144]	; (8001230 <main+0x2d8>)
 80011a0:	edd3 7a00 	vldr	s15, [r3]
 80011a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ac:	4b1c      	ldr	r3, [pc, #112]	; (8001220 <main+0x2c8>)
 80011ae:	edc3 7a00 	vstr	s15, [r3]

		phi = (360.0/w)*acosf(PF);
 80011b2:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <main+0x2c8>)
 80011b4:	edd3 7a00 	vldr	s15, [r3]
 80011b8:	eeb0 0a67 	vmov.f32	s0, s15
 80011bc:	f006 f9b8 	bl	8007530 <acosf>
 80011c0:	ee10 3a10 	vmov	r3, s0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff f9c7 	bl	8000558 <__aeabi_f2d>
 80011ca:	a30f      	add	r3, pc, #60	; (adr r3, 8001208 <main+0x2b0>)
 80011cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d0:	f7ff fa1a 	bl	8000608 <__aeabi_dmul>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4610      	mov	r0, r2
 80011da:	4619      	mov	r1, r3
 80011dc:	f7ff fcec 	bl	8000bb8 <__aeabi_d2f>
 80011e0:	4603      	mov	r3, r0
 80011e2:	4a11      	ldr	r2, [pc, #68]	; (8001228 <main+0x2d0>)
 80011e4:	6013      	str	r3, [r2, #0]

		//Seteamos
		samples = 0;
 80011e6:	4b1a      	ldr	r3, [pc, #104]	; (8001250 <main+0x2f8>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	801a      	strh	r2, [r3, #0]
		end_pf_cal = true;
 80011ec:	4b0b      	ldr	r3, [pc, #44]	; (800121c <main+0x2c4>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	701a      	strb	r2, [r3, #0]
	  if (end_pf_cal) {
 80011f2:	e6cb      	b.n	8000f8c <main+0x34>
 80011f4:	f3af 8000 	nop.w
 80011f8:	a1a9b9da 	.word	0xa1a9b9da
 80011fc:	3f9a9b9d 	.word	0x3f9a9b9d
 8001200:	66666666 	.word	0x66666666
 8001204:	400a6666 	.word	0x400a6666
 8001208:	b6774c14 	.word	0xb6774c14
 800120c:	404ca5d7 	.word	0x404ca5d7
 8001210:	200002d8 	.word	0x200002d8
 8001214:	20000388 	.word	0x20000388
 8001218:	20000230 	.word	0x20000230
 800121c:	20000384 	.word	0x20000384
 8001220:	2000037c 	.word	0x2000037c
 8001224:	20000370 	.word	0x20000370
 8001228:	20000380 	.word	0x20000380
 800122c:	20000374 	.word	0x20000374
 8001230:	20000378 	.word	0x20000378
 8001234:	20000368 	.word	0x20000368
 8001238:	2000036c 	.word	0x2000036c
 800123c:	080077f0 	.word	0x080077f0
 8001240:	20000000 	.word	0x20000000
 8001244:	20000320 	.word	0x20000320
 8001248:	20000385 	.word	0x20000385
 800124c:	43480000 	.word	0x43480000
 8001250:	20000386 	.word	0x20000386

08001254 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b094      	sub	sp, #80	; 0x50
 8001258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800125a:	f107 0320 	add.w	r3, r7, #32
 800125e:	2230      	movs	r2, #48	; 0x30
 8001260:	2100      	movs	r1, #0
 8001262:	4618      	mov	r0, r3
 8001264:	f004 f86b 	bl	800533e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001278:	2300      	movs	r3, #0
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	4b27      	ldr	r3, [pc, #156]	; (800131c <SystemClock_Config+0xc8>)
 800127e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001280:	4a26      	ldr	r2, [pc, #152]	; (800131c <SystemClock_Config+0xc8>)
 8001282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001286:	6413      	str	r3, [r2, #64]	; 0x40
 8001288:	4b24      	ldr	r3, [pc, #144]	; (800131c <SystemClock_Config+0xc8>)
 800128a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001294:	2300      	movs	r3, #0
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	4b21      	ldr	r3, [pc, #132]	; (8001320 <SystemClock_Config+0xcc>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a20      	ldr	r2, [pc, #128]	; (8001320 <SystemClock_Config+0xcc>)
 800129e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012a2:	6013      	str	r3, [r2, #0]
 80012a4:	4b1e      	ldr	r3, [pc, #120]	; (8001320 <SystemClock_Config+0xcc>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012b0:	2301      	movs	r3, #1
 80012b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ba:	2302      	movs	r3, #2
 80012bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80012c4:	2319      	movs	r3, #25
 80012c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 128;
 80012c8:	2380      	movs	r3, #128	; 0x80
 80012ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012cc:	2302      	movs	r3, #2
 80012ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012d0:	2304      	movs	r3, #4
 80012d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d4:	f107 0320 	add.w	r3, r7, #32
 80012d8:	4618      	mov	r0, r3
 80012da:	f001 ff3b 	bl	8003154 <HAL_RCC_OscConfig>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012e4:	f000 f94c 	bl	8001580 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012e8:	230f      	movs	r3, #15
 80012ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ec:	2302      	movs	r3, #2
 80012ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80012f0:	2390      	movs	r3, #144	; 0x90
 80012f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f002 f99e 	bl	8003644 <HAL_RCC_ClockConfig>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800130e:	f000 f937 	bl	8001580 <Error_Handler>
  }
}
 8001312:	bf00      	nop
 8001314:	3750      	adds	r7, #80	; 0x50
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40023800 	.word	0x40023800
 8001320:	40007000 	.word	0x40007000

08001324 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800132a:	463b      	mov	r3, r7
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001336:	4b29      	ldr	r3, [pc, #164]	; (80013dc <MX_ADC1_Init+0xb8>)
 8001338:	4a29      	ldr	r2, [pc, #164]	; (80013e0 <MX_ADC1_Init+0xbc>)
 800133a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800133c:	4b27      	ldr	r3, [pc, #156]	; (80013dc <MX_ADC1_Init+0xb8>)
 800133e:	2200      	movs	r2, #0
 8001340:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001342:	4b26      	ldr	r3, [pc, #152]	; (80013dc <MX_ADC1_Init+0xb8>)
 8001344:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001348:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800134a:	4b24      	ldr	r3, [pc, #144]	; (80013dc <MX_ADC1_Init+0xb8>)
 800134c:	2201      	movs	r2, #1
 800134e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001350:	4b22      	ldr	r3, [pc, #136]	; (80013dc <MX_ADC1_Init+0xb8>)
 8001352:	2200      	movs	r2, #0
 8001354:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001356:	4b21      	ldr	r3, [pc, #132]	; (80013dc <MX_ADC1_Init+0xb8>)
 8001358:	2200      	movs	r2, #0
 800135a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800135e:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <MX_ADC1_Init+0xb8>)
 8001360:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001364:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001366:	4b1d      	ldr	r3, [pc, #116]	; (80013dc <MX_ADC1_Init+0xb8>)
 8001368:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800136c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800136e:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <MX_ADC1_Init+0xb8>)
 8001370:	2200      	movs	r2, #0
 8001372:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001374:	4b19      	ldr	r3, [pc, #100]	; (80013dc <MX_ADC1_Init+0xb8>)
 8001376:	2202      	movs	r2, #2
 8001378:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800137a:	4b18      	ldr	r3, [pc, #96]	; (80013dc <MX_ADC1_Init+0xb8>)
 800137c:	2201      	movs	r2, #1
 800137e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001382:	4b16      	ldr	r3, [pc, #88]	; (80013dc <MX_ADC1_Init+0xb8>)
 8001384:	2200      	movs	r2, #0
 8001386:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001388:	4814      	ldr	r0, [pc, #80]	; (80013dc <MX_ADC1_Init+0xb8>)
 800138a:	f000 fbc1 	bl	8001b10 <HAL_ADC_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001394:	f000 f8f4 	bl	8001580 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001398:	2300      	movs	r3, #0
 800139a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800139c:	2301      	movs	r3, #1
 800139e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a4:	463b      	mov	r3, r7
 80013a6:	4619      	mov	r1, r3
 80013a8:	480c      	ldr	r0, [pc, #48]	; (80013dc <MX_ADC1_Init+0xb8>)
 80013aa:	f000 fe13 	bl	8001fd4 <HAL_ADC_ConfigChannel>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80013b4:	f000 f8e4 	bl	8001580 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013b8:	2301      	movs	r3, #1
 80013ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80013bc:	2302      	movs	r3, #2
 80013be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c0:	463b      	mov	r3, r7
 80013c2:	4619      	mov	r1, r3
 80013c4:	4805      	ldr	r0, [pc, #20]	; (80013dc <MX_ADC1_Init+0xb8>)
 80013c6:	f000 fe05 	bl	8001fd4 <HAL_ADC_ConfigChannel>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80013d0:	f000 f8d6 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013d4:	bf00      	nop
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000230 	.word	0x20000230
 80013e0:	40012000 	.word	0x40012000

080013e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ea:	f107 0308 	add.w	r3, r7, #8
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f8:	463b      	mov	r3, r7
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001400:	4b1d      	ldr	r3, [pc, #116]	; (8001478 <MX_TIM2_Init+0x94>)
 8001402:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001406:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001408:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <MX_TIM2_Init+0x94>)
 800140a:	2200      	movs	r2, #0
 800140c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800140e:	4b1a      	ldr	r3, [pc, #104]	; (8001478 <MX_TIM2_Init+0x94>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1340-1;
 8001414:	4b18      	ldr	r3, [pc, #96]	; (8001478 <MX_TIM2_Init+0x94>)
 8001416:	f240 523b 	movw	r2, #1339	; 0x53b
 800141a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800141c:	4b16      	ldr	r3, [pc, #88]	; (8001478 <MX_TIM2_Init+0x94>)
 800141e:	2200      	movs	r2, #0
 8001420:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001422:	4b15      	ldr	r3, [pc, #84]	; (8001478 <MX_TIM2_Init+0x94>)
 8001424:	2280      	movs	r2, #128	; 0x80
 8001426:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001428:	4813      	ldr	r0, [pc, #76]	; (8001478 <MX_TIM2_Init+0x94>)
 800142a:	f002 faeb 	bl	8003a04 <HAL_TIM_Base_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001434:	f000 f8a4 	bl	8001580 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001438:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800143c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800143e:	f107 0308 	add.w	r3, r7, #8
 8001442:	4619      	mov	r1, r3
 8001444:	480c      	ldr	r0, [pc, #48]	; (8001478 <MX_TIM2_Init+0x94>)
 8001446:	f002 fb87 	bl	8003b58 <HAL_TIM_ConfigClockSource>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001450:	f000 f896 	bl	8001580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001454:	2320      	movs	r3, #32
 8001456:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001458:	2300      	movs	r3, #0
 800145a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800145c:	463b      	mov	r3, r7
 800145e:	4619      	mov	r1, r3
 8001460:	4805      	ldr	r0, [pc, #20]	; (8001478 <MX_TIM2_Init+0x94>)
 8001462:	f002 fd67 	bl	8003f34 <HAL_TIMEx_MasterConfigSynchronization>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800146c:	f000 f888 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001470:	bf00      	nop
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	200002d8 	.word	0x200002d8

0800147c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001480:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <MX_USART1_UART_Init+0x48>)
 8001482:	4a11      	ldr	r2, [pc, #68]	; (80014c8 <MX_USART1_UART_Init+0x4c>)
 8001484:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 8001486:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <MX_USART1_UART_Init+0x48>)
 8001488:	4a10      	ldr	r2, [pc, #64]	; (80014cc <MX_USART1_UART_Init+0x50>)
 800148a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800148c:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <MX_USART1_UART_Init+0x48>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001492:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <MX_USART1_UART_Init+0x48>)
 8001494:	2200      	movs	r2, #0
 8001496:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001498:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <MX_USART1_UART_Init+0x48>)
 800149a:	2200      	movs	r2, #0
 800149c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800149e:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <MX_USART1_UART_Init+0x48>)
 80014a0:	220c      	movs	r2, #12
 80014a2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014a4:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <MX_USART1_UART_Init+0x48>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <MX_USART1_UART_Init+0x48>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014b0:	4804      	ldr	r0, [pc, #16]	; (80014c4 <MX_USART1_UART_Init+0x48>)
 80014b2:	f002 fdad 	bl	8004010 <HAL_UART_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 80014bc:	f000 f860 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000320 	.word	0x20000320
 80014c8:	40011000 	.word	0x40011000
 80014cc:	000f4240 	.word	0x000f4240

080014d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	607b      	str	r3, [r7, #4]
 80014da:	4b0c      	ldr	r3, [pc, #48]	; (800150c <MX_DMA_Init+0x3c>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	4a0b      	ldr	r2, [pc, #44]	; (800150c <MX_DMA_Init+0x3c>)
 80014e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014e4:	6313      	str	r3, [r2, #48]	; 0x30
 80014e6:	4b09      	ldr	r3, [pc, #36]	; (800150c <MX_DMA_Init+0x3c>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2100      	movs	r1, #0
 80014f6:	2038      	movs	r0, #56	; 0x38
 80014f8:	f001 f901 	bl	80026fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80014fc:	2038      	movs	r0, #56	; 0x38
 80014fe:	f001 f91a 	bl	8002736 <HAL_NVIC_EnableIRQ>

}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40023800 	.word	0x40023800

08001510 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	607b      	str	r3, [r7, #4]
 800151a:	4b10      	ldr	r3, [pc, #64]	; (800155c <MX_GPIO_Init+0x4c>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a0f      	ldr	r2, [pc, #60]	; (800155c <MX_GPIO_Init+0x4c>)
 8001520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b0d      	ldr	r3, [pc, #52]	; (800155c <MX_GPIO_Init+0x4c>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	603b      	str	r3, [r7, #0]
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <MX_GPIO_Init+0x4c>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a08      	ldr	r2, [pc, #32]	; (800155c <MX_GPIO_Init+0x4c>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b06      	ldr	r3, [pc, #24]	; (800155c <MX_GPIO_Init+0x4c>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	603b      	str	r3, [r7, #0]
 800154c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	40023800 	.word	0x40023800

08001560 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	// Conversion Complete & DMA Transfer Complete As Well
	 EOC_adc = true;//levantamos la bandera
 8001568:	4b04      	ldr	r3, [pc, #16]	; (800157c <HAL_ADC_ConvCpltCallback+0x1c>)
 800156a:	2201      	movs	r2, #1
 800156c:	701a      	strb	r2, [r3, #0]
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	20000385 	.word	0x20000385

08001580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001584:	b672      	cpsid	i
}
 8001586:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001588:	e7fe      	b.n	8001588 <Error_Handler+0x8>
	...

0800158c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	607b      	str	r3, [r7, #4]
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <HAL_MspInit+0x4c>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159a:	4a0f      	ldr	r2, [pc, #60]	; (80015d8 <HAL_MspInit+0x4c>)
 800159c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a0:	6453      	str	r3, [r2, #68]	; 0x44
 80015a2:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <HAL_MspInit+0x4c>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	603b      	str	r3, [r7, #0]
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <HAL_MspInit+0x4c>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	4a08      	ldr	r2, [pc, #32]	; (80015d8 <HAL_MspInit+0x4c>)
 80015b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015bc:	6413      	str	r3, [r2, #64]	; 0x40
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <HAL_MspInit+0x4c>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c6:	603b      	str	r3, [r7, #0]
 80015c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	40023800 	.word	0x40023800

080015dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08a      	sub	sp, #40	; 0x28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a33      	ldr	r2, [pc, #204]	; (80016c8 <HAL_ADC_MspInit+0xec>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d15f      	bne.n	80016be <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	613b      	str	r3, [r7, #16]
 8001602:	4b32      	ldr	r3, [pc, #200]	; (80016cc <HAL_ADC_MspInit+0xf0>)
 8001604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001606:	4a31      	ldr	r2, [pc, #196]	; (80016cc <HAL_ADC_MspInit+0xf0>)
 8001608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800160c:	6453      	str	r3, [r2, #68]	; 0x44
 800160e:	4b2f      	ldr	r3, [pc, #188]	; (80016cc <HAL_ADC_MspInit+0xf0>)
 8001610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	4b2b      	ldr	r3, [pc, #172]	; (80016cc <HAL_ADC_MspInit+0xf0>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a2a      	ldr	r2, [pc, #168]	; (80016cc <HAL_ADC_MspInit+0xf0>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b28      	ldr	r3, [pc, #160]	; (80016cc <HAL_ADC_MspInit+0xf0>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = voltaje_Pin|corriente_Pin;
 8001636:	2303      	movs	r3, #3
 8001638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800163a:	2303      	movs	r3, #3
 800163c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001642:	f107 0314 	add.w	r3, r7, #20
 8001646:	4619      	mov	r1, r3
 8001648:	4821      	ldr	r0, [pc, #132]	; (80016d0 <HAL_ADC_MspInit+0xf4>)
 800164a:	f001 fbff 	bl	8002e4c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800164e:	4b21      	ldr	r3, [pc, #132]	; (80016d4 <HAL_ADC_MspInit+0xf8>)
 8001650:	4a21      	ldr	r2, [pc, #132]	; (80016d8 <HAL_ADC_MspInit+0xfc>)
 8001652:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001654:	4b1f      	ldr	r3, [pc, #124]	; (80016d4 <HAL_ADC_MspInit+0xf8>)
 8001656:	2200      	movs	r2, #0
 8001658:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800165a:	4b1e      	ldr	r3, [pc, #120]	; (80016d4 <HAL_ADC_MspInit+0xf8>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001660:	4b1c      	ldr	r3, [pc, #112]	; (80016d4 <HAL_ADC_MspInit+0xf8>)
 8001662:	2200      	movs	r2, #0
 8001664:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001666:	4b1b      	ldr	r3, [pc, #108]	; (80016d4 <HAL_ADC_MspInit+0xf8>)
 8001668:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800166c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800166e:	4b19      	ldr	r3, [pc, #100]	; (80016d4 <HAL_ADC_MspInit+0xf8>)
 8001670:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001674:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001676:	4b17      	ldr	r3, [pc, #92]	; (80016d4 <HAL_ADC_MspInit+0xf8>)
 8001678:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800167c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800167e:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <HAL_ADC_MspInit+0xf8>)
 8001680:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001684:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001686:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <HAL_ADC_MspInit+0xf8>)
 8001688:	2200      	movs	r2, #0
 800168a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <HAL_ADC_MspInit+0xf8>)
 800168e:	2200      	movs	r2, #0
 8001690:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001692:	4810      	ldr	r0, [pc, #64]	; (80016d4 <HAL_ADC_MspInit+0xf8>)
 8001694:	f001 f86a 	bl	800276c <HAL_DMA_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800169e:	f7ff ff6f 	bl	8001580 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a0b      	ldr	r2, [pc, #44]	; (80016d4 <HAL_ADC_MspInit+0xf8>)
 80016a6:	639a      	str	r2, [r3, #56]	; 0x38
 80016a8:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <HAL_ADC_MspInit+0xf8>)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2100      	movs	r1, #0
 80016b2:	2012      	movs	r0, #18
 80016b4:	f001 f823 	bl	80026fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80016b8:	2012      	movs	r0, #18
 80016ba:	f001 f83c 	bl	8002736 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016be:	bf00      	nop
 80016c0:	3728      	adds	r7, #40	; 0x28
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40012000 	.word	0x40012000
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40020000 	.word	0x40020000
 80016d4:	20000278 	.word	0x20000278
 80016d8:	40026410 	.word	0x40026410

080016dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016ec:	d10d      	bne.n	800170a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	4b09      	ldr	r3, [pc, #36]	; (8001718 <HAL_TIM_Base_MspInit+0x3c>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	4a08      	ldr	r2, [pc, #32]	; (8001718 <HAL_TIM_Base_MspInit+0x3c>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	6413      	str	r3, [r2, #64]	; 0x40
 80016fe:	4b06      	ldr	r3, [pc, #24]	; (8001718 <HAL_TIM_Base_MspInit+0x3c>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800170a:	bf00      	nop
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	40023800 	.word	0x40023800

0800171c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08a      	sub	sp, #40	; 0x28
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a19      	ldr	r2, [pc, #100]	; (80017a0 <HAL_UART_MspInit+0x84>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d12c      	bne.n	8001798 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <HAL_UART_MspInit+0x88>)
 8001744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001746:	4a17      	ldr	r2, [pc, #92]	; (80017a4 <HAL_UART_MspInit+0x88>)
 8001748:	f043 0310 	orr.w	r3, r3, #16
 800174c:	6453      	str	r3, [r2, #68]	; 0x44
 800174e:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <HAL_UART_MspInit+0x88>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	f003 0310 	and.w	r3, r3, #16
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <HAL_UART_MspInit+0x88>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	4a10      	ldr	r2, [pc, #64]	; (80017a4 <HAL_UART_MspInit+0x88>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6313      	str	r3, [r2, #48]	; 0x30
 800176a:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <HAL_UART_MspInit+0x88>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001776:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800177a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177c:	2302      	movs	r3, #2
 800177e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001784:	2303      	movs	r3, #3
 8001786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001788:	2307      	movs	r3, #7
 800178a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	4619      	mov	r1, r3
 8001792:	4805      	ldr	r0, [pc, #20]	; (80017a8 <HAL_UART_MspInit+0x8c>)
 8001794:	f001 fb5a 	bl	8002e4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001798:	bf00      	nop
 800179a:	3728      	adds	r7, #40	; 0x28
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40011000 	.word	0x40011000
 80017a4:	40023800 	.word	0x40023800
 80017a8:	40020000 	.word	0x40020000

080017ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017b0:	e7fe      	b.n	80017b0 <NMI_Handler+0x4>

080017b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017b6:	e7fe      	b.n	80017b6 <HardFault_Handler+0x4>

080017b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017bc:	e7fe      	b.n	80017bc <MemManage_Handler+0x4>

080017be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017c2:	e7fe      	b.n	80017c2 <BusFault_Handler+0x4>

080017c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <UsageFault_Handler+0x4>

080017ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017f8:	f000 f96a 	bl	8001ad0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017fc:	bf00      	nop
 80017fe:	bd80      	pop	{r7, pc}

08001800 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001804:	4802      	ldr	r0, [pc, #8]	; (8001810 <ADC_IRQHandler+0x10>)
 8001806:	f000 f9c6 	bl	8001b96 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20000230 	.word	0x20000230

08001814 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001818:	4802      	ldr	r0, [pc, #8]	; (8001824 <DMA2_Stream0_IRQHandler+0x10>)
 800181a:	f001 f8ad 	bl	8002978 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000278 	.word	0x20000278

08001828 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  return 1;
 800182c:	2301      	movs	r3, #1
}
 800182e:	4618      	mov	r0, r3
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <_kill>:

int _kill(int pid, int sig)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001842:	f003 fdcf 	bl	80053e4 <__errno>
 8001846:	4603      	mov	r3, r0
 8001848:	2216      	movs	r2, #22
 800184a:	601a      	str	r2, [r3, #0]
  return -1;
 800184c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001850:	4618      	mov	r0, r3
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <_exit>:

void _exit (int status)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001860:	f04f 31ff 	mov.w	r1, #4294967295
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7ff ffe7 	bl	8001838 <_kill>
  while (1) {}    /* Make sure we hang here */
 800186a:	e7fe      	b.n	800186a <_exit+0x12>

0800186c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	e00a      	b.n	8001894 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800187e:	f3af 8000 	nop.w
 8001882:	4601      	mov	r1, r0
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	1c5a      	adds	r2, r3, #1
 8001888:	60ba      	str	r2, [r7, #8]
 800188a:	b2ca      	uxtb	r2, r1
 800188c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	3301      	adds	r3, #1
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	429a      	cmp	r2, r3
 800189a:	dbf0      	blt.n	800187e <_read+0x12>
  }

  return len;
 800189c:	687b      	ldr	r3, [r7, #4]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b086      	sub	sp, #24
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	60f8      	str	r0, [r7, #12]
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	e009      	b.n	80018cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	1c5a      	adds	r2, r3, #1
 80018bc:	60ba      	str	r2, [r7, #8]
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	3301      	adds	r3, #1
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	dbf1      	blt.n	80018b8 <_write+0x12>
  }
  return len;
 80018d4:	687b      	ldr	r3, [r7, #4]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <_close>:

int _close(int file)
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
 80018fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001906:	605a      	str	r2, [r3, #4]
  return 0;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <_isatty>:

int _isatty(int file)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800191e:	2301      	movs	r3, #1
}
 8001920:	4618      	mov	r0, r3
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
	...

08001948 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001950:	4a14      	ldr	r2, [pc, #80]	; (80019a4 <_sbrk+0x5c>)
 8001952:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <_sbrk+0x60>)
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800195c:	4b13      	ldr	r3, [pc, #76]	; (80019ac <_sbrk+0x64>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d102      	bne.n	800196a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001964:	4b11      	ldr	r3, [pc, #68]	; (80019ac <_sbrk+0x64>)
 8001966:	4a12      	ldr	r2, [pc, #72]	; (80019b0 <_sbrk+0x68>)
 8001968:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800196a:	4b10      	ldr	r3, [pc, #64]	; (80019ac <_sbrk+0x64>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4413      	add	r3, r2
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	429a      	cmp	r2, r3
 8001976:	d207      	bcs.n	8001988 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001978:	f003 fd34 	bl	80053e4 <__errno>
 800197c:	4603      	mov	r3, r0
 800197e:	220c      	movs	r2, #12
 8001980:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001982:	f04f 33ff 	mov.w	r3, #4294967295
 8001986:	e009      	b.n	800199c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <_sbrk+0x64>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800198e:	4b07      	ldr	r3, [pc, #28]	; (80019ac <_sbrk+0x64>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	4a05      	ldr	r2, [pc, #20]	; (80019ac <_sbrk+0x64>)
 8001998:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800199a:	68fb      	ldr	r3, [r7, #12]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20020000 	.word	0x20020000
 80019a8:	00000400 	.word	0x00000400
 80019ac:	20000390 	.word	0x20000390
 80019b0:	200004e8 	.word	0x200004e8

080019b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019b8:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <SystemInit+0x20>)
 80019ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019be:	4a05      	ldr	r2, [pc, #20]	; (80019d4 <SystemInit+0x20>)
 80019c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a10 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019dc:	f7ff ffea 	bl	80019b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019e0:	480c      	ldr	r0, [pc, #48]	; (8001a14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019e2:	490d      	ldr	r1, [pc, #52]	; (8001a18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019e4:	4a0d      	ldr	r2, [pc, #52]	; (8001a1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019e8:	e002      	b.n	80019f0 <LoopCopyDataInit>

080019ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ee:	3304      	adds	r3, #4

080019f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f4:	d3f9      	bcc.n	80019ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019f6:	4a0a      	ldr	r2, [pc, #40]	; (8001a20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019f8:	4c0a      	ldr	r4, [pc, #40]	; (8001a24 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019fc:	e001      	b.n	8001a02 <LoopFillZerobss>

080019fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a00:	3204      	adds	r2, #4

08001a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a04:	d3fb      	bcc.n	80019fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a06:	f003 fcf3 	bl	80053f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a0a:	f7ff faa5 	bl	8000f58 <main>
  bx  lr    
 8001a0e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a18:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8001a1c:	08007bd4 	.word	0x08007bd4
  ldr r2, =_sbss
 8001a20:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8001a24:	200004e4 	.word	0x200004e4

08001a28 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a28:	e7fe      	b.n	8001a28 <DMA1_Stream0_IRQHandler>
	...

08001a2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a30:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <HAL_Init+0x40>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a0d      	ldr	r2, [pc, #52]	; (8001a6c <HAL_Init+0x40>)
 8001a36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <HAL_Init+0x40>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a0a      	ldr	r2, [pc, #40]	; (8001a6c <HAL_Init+0x40>)
 8001a42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a48:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <HAL_Init+0x40>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a07      	ldr	r2, [pc, #28]	; (8001a6c <HAL_Init+0x40>)
 8001a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a54:	2003      	movs	r0, #3
 8001a56:	f000 fe47 	bl	80026e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a5a:	200f      	movs	r0, #15
 8001a5c:	f000 f808 	bl	8001a70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a60:	f7ff fd94 	bl	800158c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40023c00 	.word	0x40023c00

08001a70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a78:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <HAL_InitTick+0x54>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <HAL_InitTick+0x58>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	4619      	mov	r1, r3
 8001a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f000 fe5f 	bl	8002752 <HAL_SYSTICK_Config>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e00e      	b.n	8001abc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b0f      	cmp	r3, #15
 8001aa2:	d80a      	bhi.n	8001aba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aac:	f000 fe27 	bl	80026fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ab0:	4a06      	ldr	r2, [pc, #24]	; (8001acc <HAL_InitTick+0x5c>)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	e000      	b.n	8001abc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20000040 	.word	0x20000040
 8001ac8:	20000048 	.word	0x20000048
 8001acc:	20000044 	.word	0x20000044

08001ad0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ad4:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <HAL_IncTick+0x20>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <HAL_IncTick+0x24>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4413      	add	r3, r2
 8001ae0:	4a04      	ldr	r2, [pc, #16]	; (8001af4 <HAL_IncTick+0x24>)
 8001ae2:	6013      	str	r3, [r2, #0]
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	20000048 	.word	0x20000048
 8001af4:	20000394 	.word	0x20000394

08001af8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  return uwTick;
 8001afc:	4b03      	ldr	r3, [pc, #12]	; (8001b0c <HAL_GetTick+0x14>)
 8001afe:	681b      	ldr	r3, [r3, #0]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	20000394 	.word	0x20000394

08001b10 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e033      	b.n	8001b8e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d109      	bne.n	8001b42 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff fd54 	bl	80015dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	f003 0310 	and.w	r3, r3, #16
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d118      	bne.n	8001b80 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b56:	f023 0302 	bic.w	r3, r3, #2
 8001b5a:	f043 0202 	orr.w	r2, r3, #2
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 fb68 	bl	8002238 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	f023 0303 	bic.w	r3, r3, #3
 8001b76:	f043 0201 	orr.w	r2, r3, #1
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	641a      	str	r2, [r3, #64]	; 0x40
 8001b7e:	e001      	b.n	8001b84 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b086      	sub	sp, #24
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	f003 0320 	and.w	r3, r3, #32
 8001bc4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d049      	beq.n	8001c60 <HAL_ADC_IRQHandler+0xca>
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d046      	beq.n	8001c60 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	f003 0310 	and.w	r3, r3, #16
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d105      	bne.n	8001bea <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d12b      	bne.n	8001c50 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d127      	bne.n	8001c50 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c06:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d006      	beq.n	8001c1c <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d119      	bne.n	8001c50 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 0220 	bic.w	r2, r2, #32
 8001c2a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c30:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d105      	bne.n	8001c50 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c48:	f043 0201 	orr.w	r2, r3, #1
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff fc85 	bl	8001560 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f06f 0212 	mvn.w	r2, #18
 8001c5e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f003 0304 	and.w	r3, r3, #4
 8001c66:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c6e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d057      	beq.n	8001d26 <HAL_ADC_IRQHandler+0x190>
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d054      	beq.n	8001d26 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c80:	f003 0310 	and.w	r3, r3, #16
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d105      	bne.n	8001c94 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d139      	bne.n	8001d16 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d006      	beq.n	8001cbe <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d12b      	bne.n	8001d16 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d124      	bne.n	8001d16 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d11d      	bne.n	8001d16 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d119      	bne.n	8001d16 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	685a      	ldr	r2, [r3, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cf0:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d105      	bne.n	8001d16 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	f043 0201 	orr.w	r2, r3, #1
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 fc0c 	bl	8002534 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f06f 020c 	mvn.w	r2, #12
 8001d24:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d34:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d017      	beq.n	8001d6c <HAL_ADC_IRQHandler+0x1d6>
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d014      	beq.n	8001d6c <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d10d      	bne.n	8001d6c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f925 	bl	8001fac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f06f 0201 	mvn.w	r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f003 0320 	and.w	r3, r3, #32
 8001d72:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d7a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d015      	beq.n	8001dae <HAL_ADC_IRQHandler+0x218>
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d012      	beq.n	8001dae <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8c:	f043 0202 	orr.w	r2, r3, #2
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f06f 0220 	mvn.w	r2, #32
 8001d9c:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f90e 	bl	8001fc0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f06f 0220 	mvn.w	r2, #32
 8001dac:	601a      	str	r2, [r3, #0]
  }
}
 8001dae:	bf00      	nop
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d101      	bne.n	8001dd6 <HAL_ADC_Start_DMA+0x1e>
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	e0ce      	b.n	8001f74 <HAL_ADC_Start_DMA+0x1bc>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d018      	beq.n	8001e1e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f042 0201 	orr.w	r2, r2, #1
 8001dfa:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001dfc:	4b5f      	ldr	r3, [pc, #380]	; (8001f7c <HAL_ADC_Start_DMA+0x1c4>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a5f      	ldr	r2, [pc, #380]	; (8001f80 <HAL_ADC_Start_DMA+0x1c8>)
 8001e02:	fba2 2303 	umull	r2, r3, r2, r3
 8001e06:	0c9a      	lsrs	r2, r3, #18
 8001e08:	4613      	mov	r3, r2
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	4413      	add	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001e10:	e002      	b.n	8001e18 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	3b01      	subs	r3, #1
 8001e16:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f9      	bne.n	8001e12 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e2c:	d107      	bne.n	8001e3e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e3c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	f040 8086 	bne.w	8001f5a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e56:	f023 0301 	bic.w	r3, r3, #1
 8001e5a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d007      	beq.n	8001e80 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e74:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e78:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e8c:	d106      	bne.n	8001e9c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e92:	f023 0206 	bic.w	r2, r3, #6
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	645a      	str	r2, [r3, #68]	; 0x44
 8001e9a:	e002      	b.n	8001ea2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001eaa:	4b36      	ldr	r3, [pc, #216]	; (8001f84 <HAL_ADC_Start_DMA+0x1cc>)
 8001eac:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb2:	4a35      	ldr	r2, [pc, #212]	; (8001f88 <HAL_ADC_Start_DMA+0x1d0>)
 8001eb4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eba:	4a34      	ldr	r2, [pc, #208]	; (8001f8c <HAL_ADC_Start_DMA+0x1d4>)
 8001ebc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec2:	4a33      	ldr	r2, [pc, #204]	; (8001f90 <HAL_ADC_Start_DMA+0x1d8>)
 8001ec4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001ece:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001ede:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689a      	ldr	r2, [r3, #8]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001eee:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	334c      	adds	r3, #76	; 0x4c
 8001efa:	4619      	mov	r1, r3
 8001efc:	68ba      	ldr	r2, [r7, #8]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f000 fce2 	bl	80028c8 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 031f 	and.w	r3, r3, #31
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d10f      	bne.n	8001f30 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d129      	bne.n	8001f72 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f2c:	609a      	str	r2, [r3, #8]
 8001f2e:	e020      	b.n	8001f72 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a17      	ldr	r2, [pc, #92]	; (8001f94 <HAL_ADC_Start_DMA+0x1dc>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d11b      	bne.n	8001f72 <HAL_ADC_Start_DMA+0x1ba>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d114      	bne.n	8001f72 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	689a      	ldr	r2, [r3, #8]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	e00b      	b.n	8001f72 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	f043 0210 	orr.w	r2, r3, #16
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6a:	f043 0201 	orr.w	r2, r3, #1
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	20000040 	.word	0x20000040
 8001f80:	431bde83 	.word	0x431bde83
 8001f84:	40012300 	.word	0x40012300
 8001f88:	08002431 	.word	0x08002431
 8001f8c:	080024eb 	.word	0x080024eb
 8001f90:	08002507 	.word	0x08002507
 8001f94:	40012000 	.word	0x40012000

08001f98 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d101      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x1c>
 8001fec:	2302      	movs	r3, #2
 8001fee:	e113      	b.n	8002218 <HAL_ADC_ConfigChannel+0x244>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b09      	cmp	r3, #9
 8001ffe:	d925      	bls.n	800204c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68d9      	ldr	r1, [r3, #12]
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	b29b      	uxth	r3, r3
 800200c:	461a      	mov	r2, r3
 800200e:	4613      	mov	r3, r2
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	4413      	add	r3, r2
 8002014:	3b1e      	subs	r3, #30
 8002016:	2207      	movs	r2, #7
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43da      	mvns	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	400a      	ands	r2, r1
 8002024:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68d9      	ldr	r1, [r3, #12]
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	b29b      	uxth	r3, r3
 8002036:	4618      	mov	r0, r3
 8002038:	4603      	mov	r3, r0
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	4403      	add	r3, r0
 800203e:	3b1e      	subs	r3, #30
 8002040:	409a      	lsls	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	430a      	orrs	r2, r1
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	e022      	b.n	8002092 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6919      	ldr	r1, [r3, #16]
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	b29b      	uxth	r3, r3
 8002058:	461a      	mov	r2, r3
 800205a:	4613      	mov	r3, r2
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	4413      	add	r3, r2
 8002060:	2207      	movs	r2, #7
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43da      	mvns	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	400a      	ands	r2, r1
 800206e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6919      	ldr	r1, [r3, #16]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	b29b      	uxth	r3, r3
 8002080:	4618      	mov	r0, r3
 8002082:	4603      	mov	r3, r0
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	4403      	add	r3, r0
 8002088:	409a      	lsls	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b06      	cmp	r3, #6
 8002098:	d824      	bhi.n	80020e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	4613      	mov	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	3b05      	subs	r3, #5
 80020ac:	221f      	movs	r2, #31
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43da      	mvns	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	400a      	ands	r2, r1
 80020ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	4618      	mov	r0, r3
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	3b05      	subs	r3, #5
 80020d6:	fa00 f203 	lsl.w	r2, r0, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	430a      	orrs	r2, r1
 80020e0:	635a      	str	r2, [r3, #52]	; 0x34
 80020e2:	e04c      	b.n	800217e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	2b0c      	cmp	r3, #12
 80020ea:	d824      	bhi.n	8002136 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	4613      	mov	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	3b23      	subs	r3, #35	; 0x23
 80020fe:	221f      	movs	r2, #31
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43da      	mvns	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	400a      	ands	r2, r1
 800210c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	b29b      	uxth	r3, r3
 800211a:	4618      	mov	r0, r3
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	4613      	mov	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	3b23      	subs	r3, #35	; 0x23
 8002128:	fa00 f203 	lsl.w	r2, r0, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	430a      	orrs	r2, r1
 8002132:	631a      	str	r2, [r3, #48]	; 0x30
 8002134:	e023      	b.n	800217e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	4613      	mov	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	3b41      	subs	r3, #65	; 0x41
 8002148:	221f      	movs	r2, #31
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43da      	mvns	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	400a      	ands	r2, r1
 8002156:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	b29b      	uxth	r3, r3
 8002164:	4618      	mov	r0, r3
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	4613      	mov	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	3b41      	subs	r3, #65	; 0x41
 8002172:	fa00 f203 	lsl.w	r2, r0, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	430a      	orrs	r2, r1
 800217c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800217e:	4b29      	ldr	r3, [pc, #164]	; (8002224 <HAL_ADC_ConfigChannel+0x250>)
 8002180:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a28      	ldr	r2, [pc, #160]	; (8002228 <HAL_ADC_ConfigChannel+0x254>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d10f      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x1d8>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2b12      	cmp	r3, #18
 8002192:	d10b      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a1d      	ldr	r2, [pc, #116]	; (8002228 <HAL_ADC_ConfigChannel+0x254>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d12b      	bne.n	800220e <HAL_ADC_ConfigChannel+0x23a>
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a1c      	ldr	r2, [pc, #112]	; (800222c <HAL_ADC_ConfigChannel+0x258>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d003      	beq.n	80021c8 <HAL_ADC_ConfigChannel+0x1f4>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b11      	cmp	r3, #17
 80021c6:	d122      	bne.n	800220e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a11      	ldr	r2, [pc, #68]	; (800222c <HAL_ADC_ConfigChannel+0x258>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d111      	bne.n	800220e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021ea:	4b11      	ldr	r3, [pc, #68]	; (8002230 <HAL_ADC_ConfigChannel+0x25c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a11      	ldr	r2, [pc, #68]	; (8002234 <HAL_ADC_ConfigChannel+0x260>)
 80021f0:	fba2 2303 	umull	r2, r3, r2, r3
 80021f4:	0c9a      	lsrs	r2, r3, #18
 80021f6:	4613      	mov	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002200:	e002      	b.n	8002208 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	3b01      	subs	r3, #1
 8002206:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f9      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	40012300 	.word	0x40012300
 8002228:	40012000 	.word	0x40012000
 800222c:	10000012 	.word	0x10000012
 8002230:	20000040 	.word	0x20000040
 8002234:	431bde83 	.word	0x431bde83

08002238 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002240:	4b79      	ldr	r3, [pc, #484]	; (8002428 <ADC_Init+0x1f0>)
 8002242:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	431a      	orrs	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800226c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6859      	ldr	r1, [r3, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	021a      	lsls	r2, r3, #8
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002290:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6859      	ldr	r1, [r3, #4]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689a      	ldr	r2, [r3, #8]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6899      	ldr	r1, [r3, #8]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68da      	ldr	r2, [r3, #12]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ca:	4a58      	ldr	r2, [pc, #352]	; (800242c <ADC_Init+0x1f4>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d022      	beq.n	8002316 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689a      	ldr	r2, [r3, #8]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6899      	ldr	r1, [r3, #8]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002300:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6899      	ldr	r1, [r3, #8]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	e00f      	b.n	8002336 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002324:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002334:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 0202 	bic.w	r2, r2, #2
 8002344:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6899      	ldr	r1, [r3, #8]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	7e1b      	ldrb	r3, [r3, #24]
 8002350:	005a      	lsls	r2, r3, #1
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d01b      	beq.n	800239c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002372:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002382:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6859      	ldr	r1, [r3, #4]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238e:	3b01      	subs	r3, #1
 8002390:	035a      	lsls	r2, r3, #13
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	430a      	orrs	r2, r1
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	e007      	b.n	80023ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023aa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80023ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	051a      	lsls	r2, r3, #20
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	430a      	orrs	r2, r1
 80023d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80023e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6899      	ldr	r1, [r3, #8]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023ee:	025a      	lsls	r2, r3, #9
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002406:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6899      	ldr	r1, [r3, #8]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	029a      	lsls	r2, r3, #10
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	430a      	orrs	r2, r1
 800241a:	609a      	str	r2, [r3, #8]
}
 800241c:	bf00      	nop
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	40012300 	.word	0x40012300
 800242c:	0f000001 	.word	0x0f000001

08002430 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002446:	2b00      	cmp	r3, #0
 8002448:	d13c      	bne.n	80024c4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d12b      	bne.n	80024bc <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002468:	2b00      	cmp	r3, #0
 800246a:	d127      	bne.n	80024bc <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002472:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002476:	2b00      	cmp	r3, #0
 8002478:	d006      	beq.n	8002488 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002484:	2b00      	cmp	r3, #0
 8002486:	d119      	bne.n	80024bc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 0220 	bic.w	r2, r2, #32
 8002496:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d105      	bne.n	80024bc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b4:	f043 0201 	orr.w	r2, r3, #1
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f7ff f84f 	bl	8001560 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80024c2:	e00e      	b.n	80024e2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c8:	f003 0310 	and.w	r3, r3, #16
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d003      	beq.n	80024d8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f7ff fd75 	bl	8001fc0 <HAL_ADC_ErrorCallback>
}
 80024d6:	e004      	b.n	80024e2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	4798      	blx	r3
}
 80024e2:	bf00      	nop
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b084      	sub	sp, #16
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f7ff fd4d 	bl	8001f98 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024fe:	bf00      	nop
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b084      	sub	sp, #16
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002512:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2240      	movs	r2, #64	; 0x40
 8002518:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251e:	f043 0204 	orr.w	r2, r3, #4
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f7ff fd4a 	bl	8001fc0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800252c:	bf00      	nop
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002558:	4b0c      	ldr	r3, [pc, #48]	; (800258c <__NVIC_SetPriorityGrouping+0x44>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800255e:	68ba      	ldr	r2, [r7, #8]
 8002560:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002564:	4013      	ands	r3, r2
 8002566:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002570:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002578:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800257a:	4a04      	ldr	r2, [pc, #16]	; (800258c <__NVIC_SetPriorityGrouping+0x44>)
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	60d3      	str	r3, [r2, #12]
}
 8002580:	bf00      	nop
 8002582:	3714      	adds	r7, #20
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	e000ed00 	.word	0xe000ed00

08002590 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002594:	4b04      	ldr	r3, [pc, #16]	; (80025a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	0a1b      	lsrs	r3, r3, #8
 800259a:	f003 0307 	and.w	r3, r3, #7
}
 800259e:	4618      	mov	r0, r3
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	e000ed00 	.word	0xe000ed00

080025ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	db0b      	blt.n	80025d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025be:	79fb      	ldrb	r3, [r7, #7]
 80025c0:	f003 021f 	and.w	r2, r3, #31
 80025c4:	4907      	ldr	r1, [pc, #28]	; (80025e4 <__NVIC_EnableIRQ+0x38>)
 80025c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ca:	095b      	lsrs	r3, r3, #5
 80025cc:	2001      	movs	r0, #1
 80025ce:	fa00 f202 	lsl.w	r2, r0, r2
 80025d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	e000e100 	.word	0xe000e100

080025e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	6039      	str	r1, [r7, #0]
 80025f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	db0a      	blt.n	8002612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	b2da      	uxtb	r2, r3
 8002600:	490c      	ldr	r1, [pc, #48]	; (8002634 <__NVIC_SetPriority+0x4c>)
 8002602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002606:	0112      	lsls	r2, r2, #4
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	440b      	add	r3, r1
 800260c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002610:	e00a      	b.n	8002628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	b2da      	uxtb	r2, r3
 8002616:	4908      	ldr	r1, [pc, #32]	; (8002638 <__NVIC_SetPriority+0x50>)
 8002618:	79fb      	ldrb	r3, [r7, #7]
 800261a:	f003 030f 	and.w	r3, r3, #15
 800261e:	3b04      	subs	r3, #4
 8002620:	0112      	lsls	r2, r2, #4
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	440b      	add	r3, r1
 8002626:	761a      	strb	r2, [r3, #24]
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	e000e100 	.word	0xe000e100
 8002638:	e000ed00 	.word	0xe000ed00

0800263c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800263c:	b480      	push	{r7}
 800263e:	b089      	sub	sp, #36	; 0x24
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f1c3 0307 	rsb	r3, r3, #7
 8002656:	2b04      	cmp	r3, #4
 8002658:	bf28      	it	cs
 800265a:	2304      	movcs	r3, #4
 800265c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	3304      	adds	r3, #4
 8002662:	2b06      	cmp	r3, #6
 8002664:	d902      	bls.n	800266c <NVIC_EncodePriority+0x30>
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	3b03      	subs	r3, #3
 800266a:	e000      	b.n	800266e <NVIC_EncodePriority+0x32>
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002670:	f04f 32ff 	mov.w	r2, #4294967295
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	43da      	mvns	r2, r3
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	401a      	ands	r2, r3
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002684:	f04f 31ff 	mov.w	r1, #4294967295
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	fa01 f303 	lsl.w	r3, r1, r3
 800268e:	43d9      	mvns	r1, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002694:	4313      	orrs	r3, r2
         );
}
 8002696:	4618      	mov	r0, r3
 8002698:	3724      	adds	r7, #36	; 0x24
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
	...

080026a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026b4:	d301      	bcc.n	80026ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026b6:	2301      	movs	r3, #1
 80026b8:	e00f      	b.n	80026da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ba:	4a0a      	ldr	r2, [pc, #40]	; (80026e4 <SysTick_Config+0x40>)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	3b01      	subs	r3, #1
 80026c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026c2:	210f      	movs	r1, #15
 80026c4:	f04f 30ff 	mov.w	r0, #4294967295
 80026c8:	f7ff ff8e 	bl	80025e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026cc:	4b05      	ldr	r3, [pc, #20]	; (80026e4 <SysTick_Config+0x40>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026d2:	4b04      	ldr	r3, [pc, #16]	; (80026e4 <SysTick_Config+0x40>)
 80026d4:	2207      	movs	r2, #7
 80026d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	e000e010 	.word	0xe000e010

080026e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f7ff ff29 	bl	8002548 <__NVIC_SetPriorityGrouping>
}
 80026f6:	bf00      	nop
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026fe:	b580      	push	{r7, lr}
 8002700:	b086      	sub	sp, #24
 8002702:	af00      	add	r7, sp, #0
 8002704:	4603      	mov	r3, r0
 8002706:	60b9      	str	r1, [r7, #8]
 8002708:	607a      	str	r2, [r7, #4]
 800270a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800270c:	2300      	movs	r3, #0
 800270e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002710:	f7ff ff3e 	bl	8002590 <__NVIC_GetPriorityGrouping>
 8002714:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	68b9      	ldr	r1, [r7, #8]
 800271a:	6978      	ldr	r0, [r7, #20]
 800271c:	f7ff ff8e 	bl	800263c <NVIC_EncodePriority>
 8002720:	4602      	mov	r2, r0
 8002722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002726:	4611      	mov	r1, r2
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff ff5d 	bl	80025e8 <__NVIC_SetPriority>
}
 800272e:	bf00      	nop
 8002730:	3718      	adds	r7, #24
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b082      	sub	sp, #8
 800273a:	af00      	add	r7, sp, #0
 800273c:	4603      	mov	r3, r0
 800273e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff ff31 	bl	80025ac <__NVIC_EnableIRQ>
}
 800274a:	bf00      	nop
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b082      	sub	sp, #8
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7ff ffa2 	bl	80026a4 <SysTick_Config>
 8002760:	4603      	mov	r3, r0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002774:	2300      	movs	r3, #0
 8002776:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002778:	f7ff f9be 	bl	8001af8 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d101      	bne.n	8002788 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e099      	b.n	80028bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2202      	movs	r2, #2
 800278c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0201 	bic.w	r2, r2, #1
 80027a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027a8:	e00f      	b.n	80027ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027aa:	f7ff f9a5 	bl	8001af8 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b05      	cmp	r3, #5
 80027b6:	d908      	bls.n	80027ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2220      	movs	r2, #32
 80027bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2203      	movs	r2, #3
 80027c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e078      	b.n	80028bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1e8      	bne.n	80027aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	4b38      	ldr	r3, [pc, #224]	; (80028c4 <HAL_DMA_Init+0x158>)
 80027e4:	4013      	ands	r3, r2
 80027e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002802:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800280e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	4313      	orrs	r3, r2
 800281a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	2b04      	cmp	r3, #4
 8002822:	d107      	bne.n	8002834 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282c:	4313      	orrs	r3, r2
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	4313      	orrs	r3, r2
 8002832:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	f023 0307 	bic.w	r3, r3, #7
 800284a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	697a      	ldr	r2, [r7, #20]
 8002852:	4313      	orrs	r3, r2
 8002854:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	2b04      	cmp	r3, #4
 800285c:	d117      	bne.n	800288e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	4313      	orrs	r3, r2
 8002866:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00e      	beq.n	800288e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 fa6f 	bl	8002d54 <DMA_CheckFifoParam>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d008      	beq.n	800288e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2240      	movs	r2, #64	; 0x40
 8002880:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800288a:	2301      	movs	r3, #1
 800288c:	e016      	b.n	80028bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 fa26 	bl	8002ce8 <DMA_CalcBaseAndBitshift>
 800289c:	4603      	mov	r3, r0
 800289e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a4:	223f      	movs	r2, #63	; 0x3f
 80028a6:	409a      	lsls	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	f010803f 	.word	0xf010803f

080028c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
 80028d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d101      	bne.n	80028ee <HAL_DMA_Start_IT+0x26>
 80028ea:	2302      	movs	r3, #2
 80028ec:	e040      	b.n	8002970 <HAL_DMA_Start_IT+0xa8>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d12f      	bne.n	8002962 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2202      	movs	r2, #2
 8002906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	68b9      	ldr	r1, [r7, #8]
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 f9b8 	bl	8002c8c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002920:	223f      	movs	r2, #63	; 0x3f
 8002922:	409a      	lsls	r2, r3
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0216 	orr.w	r2, r2, #22
 8002936:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293c:	2b00      	cmp	r3, #0
 800293e:	d007      	beq.n	8002950 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0208 	orr.w	r2, r2, #8
 800294e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f042 0201 	orr.w	r2, r2, #1
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	e005      	b.n	800296e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800296a:	2302      	movs	r3, #2
 800296c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800296e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3718      	adds	r7, #24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002980:	2300      	movs	r3, #0
 8002982:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002984:	4b8e      	ldr	r3, [pc, #568]	; (8002bc0 <HAL_DMA_IRQHandler+0x248>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a8e      	ldr	r2, [pc, #568]	; (8002bc4 <HAL_DMA_IRQHandler+0x24c>)
 800298a:	fba2 2303 	umull	r2, r3, r2, r3
 800298e:	0a9b      	lsrs	r3, r3, #10
 8002990:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002996:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a2:	2208      	movs	r2, #8
 80029a4:	409a      	lsls	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	4013      	ands	r3, r2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d01a      	beq.n	80029e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d013      	beq.n	80029e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 0204 	bic.w	r2, r2, #4
 80029ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d0:	2208      	movs	r2, #8
 80029d2:	409a      	lsls	r2, r3
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029dc:	f043 0201 	orr.w	r2, r3, #1
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e8:	2201      	movs	r2, #1
 80029ea:	409a      	lsls	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	4013      	ands	r3, r2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d012      	beq.n	8002a1a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00b      	beq.n	8002a1a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a06:	2201      	movs	r2, #1
 8002a08:	409a      	lsls	r2, r3
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a12:	f043 0202 	orr.w	r2, r3, #2
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1e:	2204      	movs	r2, #4
 8002a20:	409a      	lsls	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	4013      	ands	r3, r2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d012      	beq.n	8002a50 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00b      	beq.n	8002a50 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3c:	2204      	movs	r2, #4
 8002a3e:	409a      	lsls	r2, r3
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a48:	f043 0204 	orr.w	r2, r3, #4
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a54:	2210      	movs	r2, #16
 8002a56:	409a      	lsls	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d043      	beq.n	8002ae8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0308 	and.w	r3, r3, #8
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d03c      	beq.n	8002ae8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a72:	2210      	movs	r2, #16
 8002a74:	409a      	lsls	r2, r3
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d018      	beq.n	8002aba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d108      	bne.n	8002aa8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d024      	beq.n	8002ae8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	4798      	blx	r3
 8002aa6:	e01f      	b.n	8002ae8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d01b      	beq.n	8002ae8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	4798      	blx	r3
 8002ab8:	e016      	b.n	8002ae8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d107      	bne.n	8002ad8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 0208 	bic.w	r2, r2, #8
 8002ad6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d003      	beq.n	8002ae8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aec:	2220      	movs	r2, #32
 8002aee:	409a      	lsls	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 808f 	beq.w	8002c18 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0310 	and.w	r3, r3, #16
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f000 8087 	beq.w	8002c18 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0e:	2220      	movs	r2, #32
 8002b10:	409a      	lsls	r2, r3
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b05      	cmp	r3, #5
 8002b20:	d136      	bne.n	8002b90 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 0216 	bic.w	r2, r2, #22
 8002b30:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	695a      	ldr	r2, [r3, #20]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b40:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d103      	bne.n	8002b52 <HAL_DMA_IRQHandler+0x1da>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d007      	beq.n	8002b62 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 0208 	bic.w	r2, r2, #8
 8002b60:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b66:	223f      	movs	r2, #63	; 0x3f
 8002b68:	409a      	lsls	r2, r3
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d07e      	beq.n	8002c84 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	4798      	blx	r3
        }
        return;
 8002b8e:	e079      	b.n	8002c84 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d01d      	beq.n	8002bda <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10d      	bne.n	8002bc8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d031      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	4798      	blx	r3
 8002bbc:	e02c      	b.n	8002c18 <HAL_DMA_IRQHandler+0x2a0>
 8002bbe:	bf00      	nop
 8002bc0:	20000040 	.word	0x20000040
 8002bc4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d023      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	4798      	blx	r3
 8002bd8:	e01e      	b.n	8002c18 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10f      	bne.n	8002c08 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 0210 	bic.w	r2, r2, #16
 8002bf6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d003      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d032      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d022      	beq.n	8002c72 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2205      	movs	r2, #5
 8002c30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 0201 	bic.w	r2, r2, #1
 8002c42:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	3301      	adds	r3, #1
 8002c48:	60bb      	str	r3, [r7, #8]
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d307      	bcc.n	8002c60 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1f2      	bne.n	8002c44 <HAL_DMA_IRQHandler+0x2cc>
 8002c5e:	e000      	b.n	8002c62 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c60:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d005      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	4798      	blx	r3
 8002c82:	e000      	b.n	8002c86 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c84:	bf00      	nop
    }
  }
}
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
 8002c98:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ca8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	2b40      	cmp	r3, #64	; 0x40
 8002cb8:	d108      	bne.n	8002ccc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002cca:	e007      	b.n	8002cdc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68ba      	ldr	r2, [r7, #8]
 8002cd2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	60da      	str	r2, [r3, #12]
}
 8002cdc:	bf00      	nop
 8002cde:	3714      	adds	r7, #20
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	3b10      	subs	r3, #16
 8002cf8:	4a14      	ldr	r2, [pc, #80]	; (8002d4c <DMA_CalcBaseAndBitshift+0x64>)
 8002cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfe:	091b      	lsrs	r3, r3, #4
 8002d00:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d02:	4a13      	ldr	r2, [pc, #76]	; (8002d50 <DMA_CalcBaseAndBitshift+0x68>)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4413      	add	r3, r2
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2b03      	cmp	r3, #3
 8002d14:	d909      	bls.n	8002d2a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d1e:	f023 0303 	bic.w	r3, r3, #3
 8002d22:	1d1a      	adds	r2, r3, #4
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	659a      	str	r2, [r3, #88]	; 0x58
 8002d28:	e007      	b.n	8002d3a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d32:	f023 0303 	bic.w	r3, r3, #3
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	aaaaaaab 	.word	0xaaaaaaab
 8002d50:	08007848 	.word	0x08007848

08002d54 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d64:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d11f      	bne.n	8002dae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	2b03      	cmp	r3, #3
 8002d72:	d856      	bhi.n	8002e22 <DMA_CheckFifoParam+0xce>
 8002d74:	a201      	add	r2, pc, #4	; (adr r2, 8002d7c <DMA_CheckFifoParam+0x28>)
 8002d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7a:	bf00      	nop
 8002d7c:	08002d8d 	.word	0x08002d8d
 8002d80:	08002d9f 	.word	0x08002d9f
 8002d84:	08002d8d 	.word	0x08002d8d
 8002d88:	08002e23 	.word	0x08002e23
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d046      	beq.n	8002e26 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d9c:	e043      	b.n	8002e26 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002da6:	d140      	bne.n	8002e2a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dac:	e03d      	b.n	8002e2a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002db6:	d121      	bne.n	8002dfc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	2b03      	cmp	r3, #3
 8002dbc:	d837      	bhi.n	8002e2e <DMA_CheckFifoParam+0xda>
 8002dbe:	a201      	add	r2, pc, #4	; (adr r2, 8002dc4 <DMA_CheckFifoParam+0x70>)
 8002dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc4:	08002dd5 	.word	0x08002dd5
 8002dc8:	08002ddb 	.word	0x08002ddb
 8002dcc:	08002dd5 	.word	0x08002dd5
 8002dd0:	08002ded 	.word	0x08002ded
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	73fb      	strb	r3, [r7, #15]
      break;
 8002dd8:	e030      	b.n	8002e3c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d025      	beq.n	8002e32 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dea:	e022      	b.n	8002e32 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002df4:	d11f      	bne.n	8002e36 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002dfa:	e01c      	b.n	8002e36 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d903      	bls.n	8002e0a <DMA_CheckFifoParam+0xb6>
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2b03      	cmp	r3, #3
 8002e06:	d003      	beq.n	8002e10 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e08:	e018      	b.n	8002e3c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	73fb      	strb	r3, [r7, #15]
      break;
 8002e0e:	e015      	b.n	8002e3c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00e      	beq.n	8002e3a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e20:	e00b      	b.n	8002e3a <DMA_CheckFifoParam+0xe6>
      break;
 8002e22:	bf00      	nop
 8002e24:	e00a      	b.n	8002e3c <DMA_CheckFifoParam+0xe8>
      break;
 8002e26:	bf00      	nop
 8002e28:	e008      	b.n	8002e3c <DMA_CheckFifoParam+0xe8>
      break;
 8002e2a:	bf00      	nop
 8002e2c:	e006      	b.n	8002e3c <DMA_CheckFifoParam+0xe8>
      break;
 8002e2e:	bf00      	nop
 8002e30:	e004      	b.n	8002e3c <DMA_CheckFifoParam+0xe8>
      break;
 8002e32:	bf00      	nop
 8002e34:	e002      	b.n	8002e3c <DMA_CheckFifoParam+0xe8>
      break;   
 8002e36:	bf00      	nop
 8002e38:	e000      	b.n	8002e3c <DMA_CheckFifoParam+0xe8>
      break;
 8002e3a:	bf00      	nop
    }
  } 
  
  return status; 
 8002e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3714      	adds	r7, #20
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop

08002e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b089      	sub	sp, #36	; 0x24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e56:	2300      	movs	r3, #0
 8002e58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e62:	2300      	movs	r3, #0
 8002e64:	61fb      	str	r3, [r7, #28]
 8002e66:	e159      	b.n	800311c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e68:	2201      	movs	r2, #1
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	f040 8148 	bne.w	8003116 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f003 0303 	and.w	r3, r3, #3
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d005      	beq.n	8002e9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d130      	bne.n	8002f00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	2203      	movs	r2, #3
 8002eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002eae:	43db      	mvns	r3, r3
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	68da      	ldr	r2, [r3, #12]
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	43db      	mvns	r3, r3
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	091b      	lsrs	r3, r3, #4
 8002eea:	f003 0201 	and.w	r2, r3, #1
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f003 0303 	and.w	r3, r3, #3
 8002f08:	2b03      	cmp	r3, #3
 8002f0a:	d017      	beq.n	8002f3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	2203      	movs	r2, #3
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	43db      	mvns	r3, r3
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	4013      	ands	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f003 0303 	and.w	r3, r3, #3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d123      	bne.n	8002f90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	08da      	lsrs	r2, r3, #3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3208      	adds	r2, #8
 8002f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	f003 0307 	and.w	r3, r3, #7
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	220f      	movs	r2, #15
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	43db      	mvns	r3, r3
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	691a      	ldr	r2, [r3, #16]
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	f003 0307 	and.w	r3, r3, #7
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	08da      	lsrs	r2, r3, #3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	3208      	adds	r2, #8
 8002f8a:	69b9      	ldr	r1, [r7, #24]
 8002f8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	2203      	movs	r2, #3
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f003 0203 	and.w	r2, r3, #3
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f000 80a2 	beq.w	8003116 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60fb      	str	r3, [r7, #12]
 8002fd6:	4b57      	ldr	r3, [pc, #348]	; (8003134 <HAL_GPIO_Init+0x2e8>)
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fda:	4a56      	ldr	r2, [pc, #344]	; (8003134 <HAL_GPIO_Init+0x2e8>)
 8002fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8002fe2:	4b54      	ldr	r3, [pc, #336]	; (8003134 <HAL_GPIO_Init+0x2e8>)
 8002fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fee:	4a52      	ldr	r2, [pc, #328]	; (8003138 <HAL_GPIO_Init+0x2ec>)
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	089b      	lsrs	r3, r3, #2
 8002ff4:	3302      	adds	r3, #2
 8002ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	220f      	movs	r2, #15
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
 800300a:	43db      	mvns	r3, r3
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	4013      	ands	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a49      	ldr	r2, [pc, #292]	; (800313c <HAL_GPIO_Init+0x2f0>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d019      	beq.n	800304e <HAL_GPIO_Init+0x202>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a48      	ldr	r2, [pc, #288]	; (8003140 <HAL_GPIO_Init+0x2f4>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d013      	beq.n	800304a <HAL_GPIO_Init+0x1fe>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a47      	ldr	r2, [pc, #284]	; (8003144 <HAL_GPIO_Init+0x2f8>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d00d      	beq.n	8003046 <HAL_GPIO_Init+0x1fa>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a46      	ldr	r2, [pc, #280]	; (8003148 <HAL_GPIO_Init+0x2fc>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d007      	beq.n	8003042 <HAL_GPIO_Init+0x1f6>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a45      	ldr	r2, [pc, #276]	; (800314c <HAL_GPIO_Init+0x300>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d101      	bne.n	800303e <HAL_GPIO_Init+0x1f2>
 800303a:	2304      	movs	r3, #4
 800303c:	e008      	b.n	8003050 <HAL_GPIO_Init+0x204>
 800303e:	2307      	movs	r3, #7
 8003040:	e006      	b.n	8003050 <HAL_GPIO_Init+0x204>
 8003042:	2303      	movs	r3, #3
 8003044:	e004      	b.n	8003050 <HAL_GPIO_Init+0x204>
 8003046:	2302      	movs	r3, #2
 8003048:	e002      	b.n	8003050 <HAL_GPIO_Init+0x204>
 800304a:	2301      	movs	r3, #1
 800304c:	e000      	b.n	8003050 <HAL_GPIO_Init+0x204>
 800304e:	2300      	movs	r3, #0
 8003050:	69fa      	ldr	r2, [r7, #28]
 8003052:	f002 0203 	and.w	r2, r2, #3
 8003056:	0092      	lsls	r2, r2, #2
 8003058:	4093      	lsls	r3, r2
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	4313      	orrs	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003060:	4935      	ldr	r1, [pc, #212]	; (8003138 <HAL_GPIO_Init+0x2ec>)
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	089b      	lsrs	r3, r3, #2
 8003066:	3302      	adds	r3, #2
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800306e:	4b38      	ldr	r3, [pc, #224]	; (8003150 <HAL_GPIO_Init+0x304>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	43db      	mvns	r3, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4013      	ands	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	4313      	orrs	r3, r2
 8003090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003092:	4a2f      	ldr	r2, [pc, #188]	; (8003150 <HAL_GPIO_Init+0x304>)
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003098:	4b2d      	ldr	r3, [pc, #180]	; (8003150 <HAL_GPIO_Init+0x304>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	43db      	mvns	r3, r3
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4013      	ands	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030bc:	4a24      	ldr	r2, [pc, #144]	; (8003150 <HAL_GPIO_Init+0x304>)
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030c2:	4b23      	ldr	r3, [pc, #140]	; (8003150 <HAL_GPIO_Init+0x304>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	43db      	mvns	r3, r3
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	4013      	ands	r3, r2
 80030d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030e6:	4a1a      	ldr	r2, [pc, #104]	; (8003150 <HAL_GPIO_Init+0x304>)
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030ec:	4b18      	ldr	r3, [pc, #96]	; (8003150 <HAL_GPIO_Init+0x304>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	43db      	mvns	r3, r3
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	4013      	ands	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	4313      	orrs	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003110:	4a0f      	ldr	r2, [pc, #60]	; (8003150 <HAL_GPIO_Init+0x304>)
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	3301      	adds	r3, #1
 800311a:	61fb      	str	r3, [r7, #28]
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	2b0f      	cmp	r3, #15
 8003120:	f67f aea2 	bls.w	8002e68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003124:	bf00      	nop
 8003126:	bf00      	nop
 8003128:	3724      	adds	r7, #36	; 0x24
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	40023800 	.word	0x40023800
 8003138:	40013800 	.word	0x40013800
 800313c:	40020000 	.word	0x40020000
 8003140:	40020400 	.word	0x40020400
 8003144:	40020800 	.word	0x40020800
 8003148:	40020c00 	.word	0x40020c00
 800314c:	40021000 	.word	0x40021000
 8003150:	40013c00 	.word	0x40013c00

08003154 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e267      	b.n	8003636 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d075      	beq.n	800325e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003172:	4b88      	ldr	r3, [pc, #544]	; (8003394 <HAL_RCC_OscConfig+0x240>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 030c 	and.w	r3, r3, #12
 800317a:	2b04      	cmp	r3, #4
 800317c:	d00c      	beq.n	8003198 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800317e:	4b85      	ldr	r3, [pc, #532]	; (8003394 <HAL_RCC_OscConfig+0x240>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003186:	2b08      	cmp	r3, #8
 8003188:	d112      	bne.n	80031b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800318a:	4b82      	ldr	r3, [pc, #520]	; (8003394 <HAL_RCC_OscConfig+0x240>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003192:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003196:	d10b      	bne.n	80031b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003198:	4b7e      	ldr	r3, [pc, #504]	; (8003394 <HAL_RCC_OscConfig+0x240>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d05b      	beq.n	800325c <HAL_RCC_OscConfig+0x108>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d157      	bne.n	800325c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e242      	b.n	8003636 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031b8:	d106      	bne.n	80031c8 <HAL_RCC_OscConfig+0x74>
 80031ba:	4b76      	ldr	r3, [pc, #472]	; (8003394 <HAL_RCC_OscConfig+0x240>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a75      	ldr	r2, [pc, #468]	; (8003394 <HAL_RCC_OscConfig+0x240>)
 80031c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	e01d      	b.n	8003204 <HAL_RCC_OscConfig+0xb0>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031d0:	d10c      	bne.n	80031ec <HAL_RCC_OscConfig+0x98>
 80031d2:	4b70      	ldr	r3, [pc, #448]	; (8003394 <HAL_RCC_OscConfig+0x240>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a6f      	ldr	r2, [pc, #444]	; (8003394 <HAL_RCC_OscConfig+0x240>)
 80031d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031dc:	6013      	str	r3, [r2, #0]
 80031de:	4b6d      	ldr	r3, [pc, #436]	; (8003394 <HAL_RCC_OscConfig+0x240>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a6c      	ldr	r2, [pc, #432]	; (8003394 <HAL_RCC_OscConfig+0x240>)
 80031e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e8:	6013      	str	r3, [r2, #0]
 80031ea:	e00b      	b.n	8003204 <HAL_RCC_OscConfig+0xb0>
 80031ec:	4b69      	ldr	r3, [pc, #420]	; (8003394 <HAL_RCC_OscConfig+0x240>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a68      	ldr	r2, [pc, #416]	; (8003394 <HAL_RCC_OscConfig+0x240>)
 80031f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031f6:	6013      	str	r3, [r2, #0]
 80031f8:	4b66      	ldr	r3, [pc, #408]	; (8003394 <HAL_RCC_OscConfig+0x240>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a65      	ldr	r2, [pc, #404]	; (8003394 <HAL_RCC_OscConfig+0x240>)
 80031fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003202:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d013      	beq.n	8003234 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320c:	f7fe fc74 	bl	8001af8 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003214:	f7fe fc70 	bl	8001af8 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b64      	cmp	r3, #100	; 0x64
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e207      	b.n	8003636 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003226:	4b5b      	ldr	r3, [pc, #364]	; (8003394 <HAL_RCC_OscConfig+0x240>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d0f0      	beq.n	8003214 <HAL_RCC_OscConfig+0xc0>
 8003232:	e014      	b.n	800325e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003234:	f7fe fc60 	bl	8001af8 <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800323c:	f7fe fc5c 	bl	8001af8 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b64      	cmp	r3, #100	; 0x64
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e1f3      	b.n	8003636 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800324e:	4b51      	ldr	r3, [pc, #324]	; (8003394 <HAL_RCC_OscConfig+0x240>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1f0      	bne.n	800323c <HAL_RCC_OscConfig+0xe8>
 800325a:	e000      	b.n	800325e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800325c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d063      	beq.n	8003332 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800326a:	4b4a      	ldr	r3, [pc, #296]	; (8003394 <HAL_RCC_OscConfig+0x240>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 030c 	and.w	r3, r3, #12
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00b      	beq.n	800328e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003276:	4b47      	ldr	r3, [pc, #284]	; (8003394 <HAL_RCC_OscConfig+0x240>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800327e:	2b08      	cmp	r3, #8
 8003280:	d11c      	bne.n	80032bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003282:	4b44      	ldr	r3, [pc, #272]	; (8003394 <HAL_RCC_OscConfig+0x240>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d116      	bne.n	80032bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800328e:	4b41      	ldr	r3, [pc, #260]	; (8003394 <HAL_RCC_OscConfig+0x240>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d005      	beq.n	80032a6 <HAL_RCC_OscConfig+0x152>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d001      	beq.n	80032a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e1c7      	b.n	8003636 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a6:	4b3b      	ldr	r3, [pc, #236]	; (8003394 <HAL_RCC_OscConfig+0x240>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	4937      	ldr	r1, [pc, #220]	; (8003394 <HAL_RCC_OscConfig+0x240>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ba:	e03a      	b.n	8003332 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d020      	beq.n	8003306 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032c4:	4b34      	ldr	r3, [pc, #208]	; (8003398 <HAL_RCC_OscConfig+0x244>)
 80032c6:	2201      	movs	r2, #1
 80032c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ca:	f7fe fc15 	bl	8001af8 <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d0:	e008      	b.n	80032e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032d2:	f7fe fc11 	bl	8001af8 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e1a8      	b.n	8003636 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e4:	4b2b      	ldr	r3, [pc, #172]	; (8003394 <HAL_RCC_OscConfig+0x240>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0f0      	beq.n	80032d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f0:	4b28      	ldr	r3, [pc, #160]	; (8003394 <HAL_RCC_OscConfig+0x240>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	4925      	ldr	r1, [pc, #148]	; (8003394 <HAL_RCC_OscConfig+0x240>)
 8003300:	4313      	orrs	r3, r2
 8003302:	600b      	str	r3, [r1, #0]
 8003304:	e015      	b.n	8003332 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003306:	4b24      	ldr	r3, [pc, #144]	; (8003398 <HAL_RCC_OscConfig+0x244>)
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330c:	f7fe fbf4 	bl	8001af8 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003314:	f7fe fbf0 	bl	8001af8 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e187      	b.n	8003636 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003326:	4b1b      	ldr	r3, [pc, #108]	; (8003394 <HAL_RCC_OscConfig+0x240>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1f0      	bne.n	8003314 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0308 	and.w	r3, r3, #8
 800333a:	2b00      	cmp	r3, #0
 800333c:	d036      	beq.n	80033ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d016      	beq.n	8003374 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003346:	4b15      	ldr	r3, [pc, #84]	; (800339c <HAL_RCC_OscConfig+0x248>)
 8003348:	2201      	movs	r2, #1
 800334a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334c:	f7fe fbd4 	bl	8001af8 <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003354:	f7fe fbd0 	bl	8001af8 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e167      	b.n	8003636 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003366:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <HAL_RCC_OscConfig+0x240>)
 8003368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0f0      	beq.n	8003354 <HAL_RCC_OscConfig+0x200>
 8003372:	e01b      	b.n	80033ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003374:	4b09      	ldr	r3, [pc, #36]	; (800339c <HAL_RCC_OscConfig+0x248>)
 8003376:	2200      	movs	r2, #0
 8003378:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800337a:	f7fe fbbd 	bl	8001af8 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003380:	e00e      	b.n	80033a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003382:	f7fe fbb9 	bl	8001af8 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d907      	bls.n	80033a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e150      	b.n	8003636 <HAL_RCC_OscConfig+0x4e2>
 8003394:	40023800 	.word	0x40023800
 8003398:	42470000 	.word	0x42470000
 800339c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033a0:	4b88      	ldr	r3, [pc, #544]	; (80035c4 <HAL_RCC_OscConfig+0x470>)
 80033a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1ea      	bne.n	8003382 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0304 	and.w	r3, r3, #4
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 8097 	beq.w	80034e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ba:	2300      	movs	r3, #0
 80033bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033be:	4b81      	ldr	r3, [pc, #516]	; (80035c4 <HAL_RCC_OscConfig+0x470>)
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10f      	bne.n	80033ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ca:	2300      	movs	r3, #0
 80033cc:	60bb      	str	r3, [r7, #8]
 80033ce:	4b7d      	ldr	r3, [pc, #500]	; (80035c4 <HAL_RCC_OscConfig+0x470>)
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	4a7c      	ldr	r2, [pc, #496]	; (80035c4 <HAL_RCC_OscConfig+0x470>)
 80033d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d8:	6413      	str	r3, [r2, #64]	; 0x40
 80033da:	4b7a      	ldr	r3, [pc, #488]	; (80035c4 <HAL_RCC_OscConfig+0x470>)
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e2:	60bb      	str	r3, [r7, #8]
 80033e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033e6:	2301      	movs	r3, #1
 80033e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ea:	4b77      	ldr	r3, [pc, #476]	; (80035c8 <HAL_RCC_OscConfig+0x474>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d118      	bne.n	8003428 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033f6:	4b74      	ldr	r3, [pc, #464]	; (80035c8 <HAL_RCC_OscConfig+0x474>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a73      	ldr	r2, [pc, #460]	; (80035c8 <HAL_RCC_OscConfig+0x474>)
 80033fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003400:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003402:	f7fe fb79 	bl	8001af8 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800340a:	f7fe fb75 	bl	8001af8 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e10c      	b.n	8003636 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800341c:	4b6a      	ldr	r3, [pc, #424]	; (80035c8 <HAL_RCC_OscConfig+0x474>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0f0      	beq.n	800340a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d106      	bne.n	800343e <HAL_RCC_OscConfig+0x2ea>
 8003430:	4b64      	ldr	r3, [pc, #400]	; (80035c4 <HAL_RCC_OscConfig+0x470>)
 8003432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003434:	4a63      	ldr	r2, [pc, #396]	; (80035c4 <HAL_RCC_OscConfig+0x470>)
 8003436:	f043 0301 	orr.w	r3, r3, #1
 800343a:	6713      	str	r3, [r2, #112]	; 0x70
 800343c:	e01c      	b.n	8003478 <HAL_RCC_OscConfig+0x324>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	2b05      	cmp	r3, #5
 8003444:	d10c      	bne.n	8003460 <HAL_RCC_OscConfig+0x30c>
 8003446:	4b5f      	ldr	r3, [pc, #380]	; (80035c4 <HAL_RCC_OscConfig+0x470>)
 8003448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344a:	4a5e      	ldr	r2, [pc, #376]	; (80035c4 <HAL_RCC_OscConfig+0x470>)
 800344c:	f043 0304 	orr.w	r3, r3, #4
 8003450:	6713      	str	r3, [r2, #112]	; 0x70
 8003452:	4b5c      	ldr	r3, [pc, #368]	; (80035c4 <HAL_RCC_OscConfig+0x470>)
 8003454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003456:	4a5b      	ldr	r2, [pc, #364]	; (80035c4 <HAL_RCC_OscConfig+0x470>)
 8003458:	f043 0301 	orr.w	r3, r3, #1
 800345c:	6713      	str	r3, [r2, #112]	; 0x70
 800345e:	e00b      	b.n	8003478 <HAL_RCC_OscConfig+0x324>
 8003460:	4b58      	ldr	r3, [pc, #352]	; (80035c4 <HAL_RCC_OscConfig+0x470>)
 8003462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003464:	4a57      	ldr	r2, [pc, #348]	; (80035c4 <HAL_RCC_OscConfig+0x470>)
 8003466:	f023 0301 	bic.w	r3, r3, #1
 800346a:	6713      	str	r3, [r2, #112]	; 0x70
 800346c:	4b55      	ldr	r3, [pc, #340]	; (80035c4 <HAL_RCC_OscConfig+0x470>)
 800346e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003470:	4a54      	ldr	r2, [pc, #336]	; (80035c4 <HAL_RCC_OscConfig+0x470>)
 8003472:	f023 0304 	bic.w	r3, r3, #4
 8003476:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d015      	beq.n	80034ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003480:	f7fe fb3a 	bl	8001af8 <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003486:	e00a      	b.n	800349e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003488:	f7fe fb36 	bl	8001af8 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	f241 3288 	movw	r2, #5000	; 0x1388
 8003496:	4293      	cmp	r3, r2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e0cb      	b.n	8003636 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800349e:	4b49      	ldr	r3, [pc, #292]	; (80035c4 <HAL_RCC_OscConfig+0x470>)
 80034a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0ee      	beq.n	8003488 <HAL_RCC_OscConfig+0x334>
 80034aa:	e014      	b.n	80034d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ac:	f7fe fb24 	bl	8001af8 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034b2:	e00a      	b.n	80034ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034b4:	f7fe fb20 	bl	8001af8 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e0b5      	b.n	8003636 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ca:	4b3e      	ldr	r3, [pc, #248]	; (80035c4 <HAL_RCC_OscConfig+0x470>)
 80034cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1ee      	bne.n	80034b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034d6:	7dfb      	ldrb	r3, [r7, #23]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d105      	bne.n	80034e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034dc:	4b39      	ldr	r3, [pc, #228]	; (80035c4 <HAL_RCC_OscConfig+0x470>)
 80034de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e0:	4a38      	ldr	r2, [pc, #224]	; (80035c4 <HAL_RCC_OscConfig+0x470>)
 80034e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 80a1 	beq.w	8003634 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034f2:	4b34      	ldr	r3, [pc, #208]	; (80035c4 <HAL_RCC_OscConfig+0x470>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 030c 	and.w	r3, r3, #12
 80034fa:	2b08      	cmp	r3, #8
 80034fc:	d05c      	beq.n	80035b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	2b02      	cmp	r3, #2
 8003504:	d141      	bne.n	800358a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003506:	4b31      	ldr	r3, [pc, #196]	; (80035cc <HAL_RCC_OscConfig+0x478>)
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350c:	f7fe faf4 	bl	8001af8 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003514:	f7fe faf0 	bl	8001af8 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e087      	b.n	8003636 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003526:	4b27      	ldr	r3, [pc, #156]	; (80035c4 <HAL_RCC_OscConfig+0x470>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1f0      	bne.n	8003514 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	69da      	ldr	r2, [r3, #28]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	431a      	orrs	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003540:	019b      	lsls	r3, r3, #6
 8003542:	431a      	orrs	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003548:	085b      	lsrs	r3, r3, #1
 800354a:	3b01      	subs	r3, #1
 800354c:	041b      	lsls	r3, r3, #16
 800354e:	431a      	orrs	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003554:	061b      	lsls	r3, r3, #24
 8003556:	491b      	ldr	r1, [pc, #108]	; (80035c4 <HAL_RCC_OscConfig+0x470>)
 8003558:	4313      	orrs	r3, r2
 800355a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800355c:	4b1b      	ldr	r3, [pc, #108]	; (80035cc <HAL_RCC_OscConfig+0x478>)
 800355e:	2201      	movs	r2, #1
 8003560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003562:	f7fe fac9 	bl	8001af8 <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003568:	e008      	b.n	800357c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800356a:	f7fe fac5 	bl	8001af8 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e05c      	b.n	8003636 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800357c:	4b11      	ldr	r3, [pc, #68]	; (80035c4 <HAL_RCC_OscConfig+0x470>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d0f0      	beq.n	800356a <HAL_RCC_OscConfig+0x416>
 8003588:	e054      	b.n	8003634 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800358a:	4b10      	ldr	r3, [pc, #64]	; (80035cc <HAL_RCC_OscConfig+0x478>)
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003590:	f7fe fab2 	bl	8001af8 <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003598:	f7fe faae 	bl	8001af8 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e045      	b.n	8003636 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035aa:	4b06      	ldr	r3, [pc, #24]	; (80035c4 <HAL_RCC_OscConfig+0x470>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1f0      	bne.n	8003598 <HAL_RCC_OscConfig+0x444>
 80035b6:	e03d      	b.n	8003634 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d107      	bne.n	80035d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e038      	b.n	8003636 <HAL_RCC_OscConfig+0x4e2>
 80035c4:	40023800 	.word	0x40023800
 80035c8:	40007000 	.word	0x40007000
 80035cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035d0:	4b1b      	ldr	r3, [pc, #108]	; (8003640 <HAL_RCC_OscConfig+0x4ec>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d028      	beq.n	8003630 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d121      	bne.n	8003630 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d11a      	bne.n	8003630 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003600:	4013      	ands	r3, r2
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003606:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003608:	4293      	cmp	r3, r2
 800360a:	d111      	bne.n	8003630 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003616:	085b      	lsrs	r3, r3, #1
 8003618:	3b01      	subs	r3, #1
 800361a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800361c:	429a      	cmp	r2, r3
 800361e:	d107      	bne.n	8003630 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800362c:	429a      	cmp	r2, r3
 800362e:	d001      	beq.n	8003634 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e000      	b.n	8003636 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3718      	adds	r7, #24
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	40023800 	.word	0x40023800

08003644 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e0cc      	b.n	80037f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003658:	4b68      	ldr	r3, [pc, #416]	; (80037fc <HAL_RCC_ClockConfig+0x1b8>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	429a      	cmp	r2, r3
 8003664:	d90c      	bls.n	8003680 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003666:	4b65      	ldr	r3, [pc, #404]	; (80037fc <HAL_RCC_ClockConfig+0x1b8>)
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	b2d2      	uxtb	r2, r2
 800366c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800366e:	4b63      	ldr	r3, [pc, #396]	; (80037fc <HAL_RCC_ClockConfig+0x1b8>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0307 	and.w	r3, r3, #7
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	429a      	cmp	r2, r3
 800367a:	d001      	beq.n	8003680 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e0b8      	b.n	80037f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d020      	beq.n	80036ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0304 	and.w	r3, r3, #4
 8003694:	2b00      	cmp	r3, #0
 8003696:	d005      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003698:	4b59      	ldr	r3, [pc, #356]	; (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	4a58      	ldr	r2, [pc, #352]	; (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 800369e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0308 	and.w	r3, r3, #8
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d005      	beq.n	80036bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036b0:	4b53      	ldr	r3, [pc, #332]	; (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	4a52      	ldr	r2, [pc, #328]	; (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 80036b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036bc:	4b50      	ldr	r3, [pc, #320]	; (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	494d      	ldr	r1, [pc, #308]	; (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d044      	beq.n	8003764 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d107      	bne.n	80036f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036e2:	4b47      	ldr	r3, [pc, #284]	; (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d119      	bne.n	8003722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e07f      	b.n	80037f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d003      	beq.n	8003702 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036fe:	2b03      	cmp	r3, #3
 8003700:	d107      	bne.n	8003712 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003702:	4b3f      	ldr	r3, [pc, #252]	; (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d109      	bne.n	8003722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e06f      	b.n	80037f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003712:	4b3b      	ldr	r3, [pc, #236]	; (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e067      	b.n	80037f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003722:	4b37      	ldr	r3, [pc, #220]	; (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f023 0203 	bic.w	r2, r3, #3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	4934      	ldr	r1, [pc, #208]	; (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 8003730:	4313      	orrs	r3, r2
 8003732:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003734:	f7fe f9e0 	bl	8001af8 <HAL_GetTick>
 8003738:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800373a:	e00a      	b.n	8003752 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800373c:	f7fe f9dc 	bl	8001af8 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	f241 3288 	movw	r2, #5000	; 0x1388
 800374a:	4293      	cmp	r3, r2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e04f      	b.n	80037f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003752:	4b2b      	ldr	r3, [pc, #172]	; (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 020c 	and.w	r2, r3, #12
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	429a      	cmp	r2, r3
 8003762:	d1eb      	bne.n	800373c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003764:	4b25      	ldr	r3, [pc, #148]	; (80037fc <HAL_RCC_ClockConfig+0x1b8>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0307 	and.w	r3, r3, #7
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	429a      	cmp	r2, r3
 8003770:	d20c      	bcs.n	800378c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003772:	4b22      	ldr	r3, [pc, #136]	; (80037fc <HAL_RCC_ClockConfig+0x1b8>)
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	b2d2      	uxtb	r2, r2
 8003778:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800377a:	4b20      	ldr	r3, [pc, #128]	; (80037fc <HAL_RCC_ClockConfig+0x1b8>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0307 	and.w	r3, r3, #7
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	429a      	cmp	r2, r3
 8003786:	d001      	beq.n	800378c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e032      	b.n	80037f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0304 	and.w	r3, r3, #4
 8003794:	2b00      	cmp	r3, #0
 8003796:	d008      	beq.n	80037aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003798:	4b19      	ldr	r3, [pc, #100]	; (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	4916      	ldr	r1, [pc, #88]	; (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0308 	and.w	r3, r3, #8
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d009      	beq.n	80037ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037b6:	4b12      	ldr	r3, [pc, #72]	; (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	490e      	ldr	r1, [pc, #56]	; (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037ca:	f000 f821 	bl	8003810 <HAL_RCC_GetSysClockFreq>
 80037ce:	4602      	mov	r2, r0
 80037d0:	4b0b      	ldr	r3, [pc, #44]	; (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	091b      	lsrs	r3, r3, #4
 80037d6:	f003 030f 	and.w	r3, r3, #15
 80037da:	490a      	ldr	r1, [pc, #40]	; (8003804 <HAL_RCC_ClockConfig+0x1c0>)
 80037dc:	5ccb      	ldrb	r3, [r1, r3]
 80037de:	fa22 f303 	lsr.w	r3, r2, r3
 80037e2:	4a09      	ldr	r2, [pc, #36]	; (8003808 <HAL_RCC_ClockConfig+0x1c4>)
 80037e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037e6:	4b09      	ldr	r3, [pc, #36]	; (800380c <HAL_RCC_ClockConfig+0x1c8>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7fe f940 	bl	8001a70 <HAL_InitTick>

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	40023c00 	.word	0x40023c00
 8003800:	40023800 	.word	0x40023800
 8003804:	08007830 	.word	0x08007830
 8003808:	20000040 	.word	0x20000040
 800380c:	20000044 	.word	0x20000044

08003810 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003810:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003814:	b090      	sub	sp, #64	; 0x40
 8003816:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003818:	2300      	movs	r3, #0
 800381a:	637b      	str	r3, [r7, #52]	; 0x34
 800381c:	2300      	movs	r3, #0
 800381e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003820:	2300      	movs	r3, #0
 8003822:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003824:	2300      	movs	r3, #0
 8003826:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003828:	4b59      	ldr	r3, [pc, #356]	; (8003990 <HAL_RCC_GetSysClockFreq+0x180>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f003 030c 	and.w	r3, r3, #12
 8003830:	2b08      	cmp	r3, #8
 8003832:	d00d      	beq.n	8003850 <HAL_RCC_GetSysClockFreq+0x40>
 8003834:	2b08      	cmp	r3, #8
 8003836:	f200 80a1 	bhi.w	800397c <HAL_RCC_GetSysClockFreq+0x16c>
 800383a:	2b00      	cmp	r3, #0
 800383c:	d002      	beq.n	8003844 <HAL_RCC_GetSysClockFreq+0x34>
 800383e:	2b04      	cmp	r3, #4
 8003840:	d003      	beq.n	800384a <HAL_RCC_GetSysClockFreq+0x3a>
 8003842:	e09b      	b.n	800397c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003844:	4b53      	ldr	r3, [pc, #332]	; (8003994 <HAL_RCC_GetSysClockFreq+0x184>)
 8003846:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003848:	e09b      	b.n	8003982 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800384a:	4b53      	ldr	r3, [pc, #332]	; (8003998 <HAL_RCC_GetSysClockFreq+0x188>)
 800384c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800384e:	e098      	b.n	8003982 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003850:	4b4f      	ldr	r3, [pc, #316]	; (8003990 <HAL_RCC_GetSysClockFreq+0x180>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003858:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800385a:	4b4d      	ldr	r3, [pc, #308]	; (8003990 <HAL_RCC_GetSysClockFreq+0x180>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d028      	beq.n	80038b8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003866:	4b4a      	ldr	r3, [pc, #296]	; (8003990 <HAL_RCC_GetSysClockFreq+0x180>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	099b      	lsrs	r3, r3, #6
 800386c:	2200      	movs	r2, #0
 800386e:	623b      	str	r3, [r7, #32]
 8003870:	627a      	str	r2, [r7, #36]	; 0x24
 8003872:	6a3b      	ldr	r3, [r7, #32]
 8003874:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003878:	2100      	movs	r1, #0
 800387a:	4b47      	ldr	r3, [pc, #284]	; (8003998 <HAL_RCC_GetSysClockFreq+0x188>)
 800387c:	fb03 f201 	mul.w	r2, r3, r1
 8003880:	2300      	movs	r3, #0
 8003882:	fb00 f303 	mul.w	r3, r0, r3
 8003886:	4413      	add	r3, r2
 8003888:	4a43      	ldr	r2, [pc, #268]	; (8003998 <HAL_RCC_GetSysClockFreq+0x188>)
 800388a:	fba0 1202 	umull	r1, r2, r0, r2
 800388e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003890:	460a      	mov	r2, r1
 8003892:	62ba      	str	r2, [r7, #40]	; 0x28
 8003894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003896:	4413      	add	r3, r2
 8003898:	62fb      	str	r3, [r7, #44]	; 0x2c
 800389a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800389c:	2200      	movs	r2, #0
 800389e:	61bb      	str	r3, [r7, #24]
 80038a0:	61fa      	str	r2, [r7, #28]
 80038a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80038aa:	f7fd f9d5 	bl	8000c58 <__aeabi_uldivmod>
 80038ae:	4602      	mov	r2, r0
 80038b0:	460b      	mov	r3, r1
 80038b2:	4613      	mov	r3, r2
 80038b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038b6:	e053      	b.n	8003960 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038b8:	4b35      	ldr	r3, [pc, #212]	; (8003990 <HAL_RCC_GetSysClockFreq+0x180>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	099b      	lsrs	r3, r3, #6
 80038be:	2200      	movs	r2, #0
 80038c0:	613b      	str	r3, [r7, #16]
 80038c2:	617a      	str	r2, [r7, #20]
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80038ca:	f04f 0b00 	mov.w	fp, #0
 80038ce:	4652      	mov	r2, sl
 80038d0:	465b      	mov	r3, fp
 80038d2:	f04f 0000 	mov.w	r0, #0
 80038d6:	f04f 0100 	mov.w	r1, #0
 80038da:	0159      	lsls	r1, r3, #5
 80038dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038e0:	0150      	lsls	r0, r2, #5
 80038e2:	4602      	mov	r2, r0
 80038e4:	460b      	mov	r3, r1
 80038e6:	ebb2 080a 	subs.w	r8, r2, sl
 80038ea:	eb63 090b 	sbc.w	r9, r3, fp
 80038ee:	f04f 0200 	mov.w	r2, #0
 80038f2:	f04f 0300 	mov.w	r3, #0
 80038f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80038fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80038fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003902:	ebb2 0408 	subs.w	r4, r2, r8
 8003906:	eb63 0509 	sbc.w	r5, r3, r9
 800390a:	f04f 0200 	mov.w	r2, #0
 800390e:	f04f 0300 	mov.w	r3, #0
 8003912:	00eb      	lsls	r3, r5, #3
 8003914:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003918:	00e2      	lsls	r2, r4, #3
 800391a:	4614      	mov	r4, r2
 800391c:	461d      	mov	r5, r3
 800391e:	eb14 030a 	adds.w	r3, r4, sl
 8003922:	603b      	str	r3, [r7, #0]
 8003924:	eb45 030b 	adc.w	r3, r5, fp
 8003928:	607b      	str	r3, [r7, #4]
 800392a:	f04f 0200 	mov.w	r2, #0
 800392e:	f04f 0300 	mov.w	r3, #0
 8003932:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003936:	4629      	mov	r1, r5
 8003938:	028b      	lsls	r3, r1, #10
 800393a:	4621      	mov	r1, r4
 800393c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003940:	4621      	mov	r1, r4
 8003942:	028a      	lsls	r2, r1, #10
 8003944:	4610      	mov	r0, r2
 8003946:	4619      	mov	r1, r3
 8003948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800394a:	2200      	movs	r2, #0
 800394c:	60bb      	str	r3, [r7, #8]
 800394e:	60fa      	str	r2, [r7, #12]
 8003950:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003954:	f7fd f980 	bl	8000c58 <__aeabi_uldivmod>
 8003958:	4602      	mov	r2, r0
 800395a:	460b      	mov	r3, r1
 800395c:	4613      	mov	r3, r2
 800395e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003960:	4b0b      	ldr	r3, [pc, #44]	; (8003990 <HAL_RCC_GetSysClockFreq+0x180>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	0c1b      	lsrs	r3, r3, #16
 8003966:	f003 0303 	and.w	r3, r3, #3
 800396a:	3301      	adds	r3, #1
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003970:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003974:	fbb2 f3f3 	udiv	r3, r2, r3
 8003978:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800397a:	e002      	b.n	8003982 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800397c:	4b05      	ldr	r3, [pc, #20]	; (8003994 <HAL_RCC_GetSysClockFreq+0x184>)
 800397e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003980:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003984:	4618      	mov	r0, r3
 8003986:	3740      	adds	r7, #64	; 0x40
 8003988:	46bd      	mov	sp, r7
 800398a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800398e:	bf00      	nop
 8003990:	40023800 	.word	0x40023800
 8003994:	00f42400 	.word	0x00f42400
 8003998:	017d7840 	.word	0x017d7840

0800399c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039a0:	4b03      	ldr	r3, [pc, #12]	; (80039b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80039a2:	681b      	ldr	r3, [r3, #0]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	20000040 	.word	0x20000040

080039b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039b8:	f7ff fff0 	bl	800399c <HAL_RCC_GetHCLKFreq>
 80039bc:	4602      	mov	r2, r0
 80039be:	4b05      	ldr	r3, [pc, #20]	; (80039d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	0a9b      	lsrs	r3, r3, #10
 80039c4:	f003 0307 	and.w	r3, r3, #7
 80039c8:	4903      	ldr	r1, [pc, #12]	; (80039d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039ca:	5ccb      	ldrb	r3, [r1, r3]
 80039cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40023800 	.word	0x40023800
 80039d8:	08007840 	.word	0x08007840

080039dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039e0:	f7ff ffdc 	bl	800399c <HAL_RCC_GetHCLKFreq>
 80039e4:	4602      	mov	r2, r0
 80039e6:	4b05      	ldr	r3, [pc, #20]	; (80039fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	0b5b      	lsrs	r3, r3, #13
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	4903      	ldr	r1, [pc, #12]	; (8003a00 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039f2:	5ccb      	ldrb	r3, [r1, r3]
 80039f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	40023800 	.word	0x40023800
 8003a00:	08007840 	.word	0x08007840

08003a04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e041      	b.n	8003a9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d106      	bne.n	8003a30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7fd fe56 	bl	80016dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2202      	movs	r2, #2
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3304      	adds	r3, #4
 8003a40:	4619      	mov	r1, r3
 8003a42:	4610      	mov	r0, r2
 8003a44:	f000 f950 	bl	8003ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
	...

08003aa4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d001      	beq.n	8003abc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e03c      	b.n	8003b36 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a1e      	ldr	r2, [pc, #120]	; (8003b44 <HAL_TIM_Base_Start+0xa0>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d018      	beq.n	8003b00 <HAL_TIM_Base_Start+0x5c>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad6:	d013      	beq.n	8003b00 <HAL_TIM_Base_Start+0x5c>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a1a      	ldr	r2, [pc, #104]	; (8003b48 <HAL_TIM_Base_Start+0xa4>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d00e      	beq.n	8003b00 <HAL_TIM_Base_Start+0x5c>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a19      	ldr	r2, [pc, #100]	; (8003b4c <HAL_TIM_Base_Start+0xa8>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d009      	beq.n	8003b00 <HAL_TIM_Base_Start+0x5c>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a17      	ldr	r2, [pc, #92]	; (8003b50 <HAL_TIM_Base_Start+0xac>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d004      	beq.n	8003b00 <HAL_TIM_Base_Start+0x5c>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a16      	ldr	r2, [pc, #88]	; (8003b54 <HAL_TIM_Base_Start+0xb0>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d111      	bne.n	8003b24 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 0307 	and.w	r3, r3, #7
 8003b0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2b06      	cmp	r3, #6
 8003b10:	d010      	beq.n	8003b34 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f042 0201 	orr.w	r2, r2, #1
 8003b20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b22:	e007      	b.n	8003b34 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f042 0201 	orr.w	r2, r2, #1
 8003b32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3714      	adds	r7, #20
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	40010000 	.word	0x40010000
 8003b48:	40000400 	.word	0x40000400
 8003b4c:	40000800 	.word	0x40000800
 8003b50:	40000c00 	.word	0x40000c00
 8003b54:	40014000 	.word	0x40014000

08003b58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b62:	2300      	movs	r3, #0
 8003b64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d101      	bne.n	8003b74 <HAL_TIM_ConfigClockSource+0x1c>
 8003b70:	2302      	movs	r3, #2
 8003b72:	e0b4      	b.n	8003cde <HAL_TIM_ConfigClockSource+0x186>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bac:	d03e      	beq.n	8003c2c <HAL_TIM_ConfigClockSource+0xd4>
 8003bae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bb2:	f200 8087 	bhi.w	8003cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bba:	f000 8086 	beq.w	8003cca <HAL_TIM_ConfigClockSource+0x172>
 8003bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc2:	d87f      	bhi.n	8003cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc4:	2b70      	cmp	r3, #112	; 0x70
 8003bc6:	d01a      	beq.n	8003bfe <HAL_TIM_ConfigClockSource+0xa6>
 8003bc8:	2b70      	cmp	r3, #112	; 0x70
 8003bca:	d87b      	bhi.n	8003cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bcc:	2b60      	cmp	r3, #96	; 0x60
 8003bce:	d050      	beq.n	8003c72 <HAL_TIM_ConfigClockSource+0x11a>
 8003bd0:	2b60      	cmp	r3, #96	; 0x60
 8003bd2:	d877      	bhi.n	8003cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd4:	2b50      	cmp	r3, #80	; 0x50
 8003bd6:	d03c      	beq.n	8003c52 <HAL_TIM_ConfigClockSource+0xfa>
 8003bd8:	2b50      	cmp	r3, #80	; 0x50
 8003bda:	d873      	bhi.n	8003cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bdc:	2b40      	cmp	r3, #64	; 0x40
 8003bde:	d058      	beq.n	8003c92 <HAL_TIM_ConfigClockSource+0x13a>
 8003be0:	2b40      	cmp	r3, #64	; 0x40
 8003be2:	d86f      	bhi.n	8003cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003be4:	2b30      	cmp	r3, #48	; 0x30
 8003be6:	d064      	beq.n	8003cb2 <HAL_TIM_ConfigClockSource+0x15a>
 8003be8:	2b30      	cmp	r3, #48	; 0x30
 8003bea:	d86b      	bhi.n	8003cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bec:	2b20      	cmp	r3, #32
 8003bee:	d060      	beq.n	8003cb2 <HAL_TIM_ConfigClockSource+0x15a>
 8003bf0:	2b20      	cmp	r3, #32
 8003bf2:	d867      	bhi.n	8003cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d05c      	beq.n	8003cb2 <HAL_TIM_ConfigClockSource+0x15a>
 8003bf8:	2b10      	cmp	r3, #16
 8003bfa:	d05a      	beq.n	8003cb2 <HAL_TIM_ConfigClockSource+0x15a>
 8003bfc:	e062      	b.n	8003cc4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c0e:	f000 f971 	bl	8003ef4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	609a      	str	r2, [r3, #8]
      break;
 8003c2a:	e04f      	b.n	8003ccc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c3c:	f000 f95a 	bl	8003ef4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689a      	ldr	r2, [r3, #8]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c4e:	609a      	str	r2, [r3, #8]
      break;
 8003c50:	e03c      	b.n	8003ccc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c5e:	461a      	mov	r2, r3
 8003c60:	f000 f8ce 	bl	8003e00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2150      	movs	r1, #80	; 0x50
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f000 f927 	bl	8003ebe <TIM_ITRx_SetConfig>
      break;
 8003c70:	e02c      	b.n	8003ccc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c7e:	461a      	mov	r2, r3
 8003c80:	f000 f8ed 	bl	8003e5e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2160      	movs	r1, #96	; 0x60
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 f917 	bl	8003ebe <TIM_ITRx_SetConfig>
      break;
 8003c90:	e01c      	b.n	8003ccc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	f000 f8ae 	bl	8003e00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2140      	movs	r1, #64	; 0x40
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 f907 	bl	8003ebe <TIM_ITRx_SetConfig>
      break;
 8003cb0:	e00c      	b.n	8003ccc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4619      	mov	r1, r3
 8003cbc:	4610      	mov	r0, r2
 8003cbe:	f000 f8fe 	bl	8003ebe <TIM_ITRx_SetConfig>
      break;
 8003cc2:	e003      	b.n	8003ccc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	73fb      	strb	r3, [r7, #15]
      break;
 8003cc8:	e000      	b.n	8003ccc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003cca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
	...

08003ce8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a3a      	ldr	r2, [pc, #232]	; (8003de4 <TIM_Base_SetConfig+0xfc>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d00f      	beq.n	8003d20 <TIM_Base_SetConfig+0x38>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d06:	d00b      	beq.n	8003d20 <TIM_Base_SetConfig+0x38>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a37      	ldr	r2, [pc, #220]	; (8003de8 <TIM_Base_SetConfig+0x100>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d007      	beq.n	8003d20 <TIM_Base_SetConfig+0x38>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a36      	ldr	r2, [pc, #216]	; (8003dec <TIM_Base_SetConfig+0x104>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d003      	beq.n	8003d20 <TIM_Base_SetConfig+0x38>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a35      	ldr	r2, [pc, #212]	; (8003df0 <TIM_Base_SetConfig+0x108>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d108      	bne.n	8003d32 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a2b      	ldr	r2, [pc, #172]	; (8003de4 <TIM_Base_SetConfig+0xfc>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d01b      	beq.n	8003d72 <TIM_Base_SetConfig+0x8a>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d40:	d017      	beq.n	8003d72 <TIM_Base_SetConfig+0x8a>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a28      	ldr	r2, [pc, #160]	; (8003de8 <TIM_Base_SetConfig+0x100>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d013      	beq.n	8003d72 <TIM_Base_SetConfig+0x8a>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a27      	ldr	r2, [pc, #156]	; (8003dec <TIM_Base_SetConfig+0x104>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d00f      	beq.n	8003d72 <TIM_Base_SetConfig+0x8a>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a26      	ldr	r2, [pc, #152]	; (8003df0 <TIM_Base_SetConfig+0x108>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d00b      	beq.n	8003d72 <TIM_Base_SetConfig+0x8a>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a25      	ldr	r2, [pc, #148]	; (8003df4 <TIM_Base_SetConfig+0x10c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d007      	beq.n	8003d72 <TIM_Base_SetConfig+0x8a>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a24      	ldr	r2, [pc, #144]	; (8003df8 <TIM_Base_SetConfig+0x110>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d003      	beq.n	8003d72 <TIM_Base_SetConfig+0x8a>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a23      	ldr	r2, [pc, #140]	; (8003dfc <TIM_Base_SetConfig+0x114>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d108      	bne.n	8003d84 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a0e      	ldr	r2, [pc, #56]	; (8003de4 <TIM_Base_SetConfig+0xfc>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d103      	bne.n	8003db8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	691a      	ldr	r2, [r3, #16]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d105      	bne.n	8003dd6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	f023 0201 	bic.w	r2, r3, #1
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	611a      	str	r2, [r3, #16]
  }
}
 8003dd6:	bf00      	nop
 8003dd8:	3714      	adds	r7, #20
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	40010000 	.word	0x40010000
 8003de8:	40000400 	.word	0x40000400
 8003dec:	40000800 	.word	0x40000800
 8003df0:	40000c00 	.word	0x40000c00
 8003df4:	40014000 	.word	0x40014000
 8003df8:	40014400 	.word	0x40014400
 8003dfc:	40014800 	.word	0x40014800

08003e00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b087      	sub	sp, #28
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	f023 0201 	bic.w	r2, r3, #1
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	011b      	lsls	r3, r3, #4
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f023 030a 	bic.w	r3, r3, #10
 8003e3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	621a      	str	r2, [r3, #32]
}
 8003e52:	bf00      	nop
 8003e54:	371c      	adds	r7, #28
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b087      	sub	sp, #28
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	60f8      	str	r0, [r7, #12]
 8003e66:	60b9      	str	r1, [r7, #8]
 8003e68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	f023 0210 	bic.w	r2, r3, #16
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	031b      	lsls	r3, r3, #12
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e9a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	011b      	lsls	r3, r3, #4
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	621a      	str	r2, [r3, #32]
}
 8003eb2:	bf00      	nop
 8003eb4:	371c      	adds	r7, #28
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b085      	sub	sp, #20
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
 8003ec6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ed4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	f043 0307 	orr.w	r3, r3, #7
 8003ee0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	609a      	str	r2, [r3, #8]
}
 8003ee8:	bf00      	nop
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b087      	sub	sp, #28
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
 8003f00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	021a      	lsls	r2, r3, #8
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	431a      	orrs	r2, r3
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	609a      	str	r2, [r3, #8]
}
 8003f28:	bf00      	nop
 8003f2a:	371c      	adds	r7, #28
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d101      	bne.n	8003f4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f48:	2302      	movs	r3, #2
 8003f4a:	e050      	b.n	8003fee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2202      	movs	r2, #2
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a1c      	ldr	r2, [pc, #112]	; (8003ffc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d018      	beq.n	8003fc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f98:	d013      	beq.n	8003fc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a18      	ldr	r2, [pc, #96]	; (8004000 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d00e      	beq.n	8003fc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a16      	ldr	r2, [pc, #88]	; (8004004 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d009      	beq.n	8003fc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a15      	ldr	r2, [pc, #84]	; (8004008 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d004      	beq.n	8003fc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a13      	ldr	r2, [pc, #76]	; (800400c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d10c      	bne.n	8003fdc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	40010000 	.word	0x40010000
 8004000:	40000400 	.word	0x40000400
 8004004:	40000800 	.word	0x40000800
 8004008:	40000c00 	.word	0x40000c00
 800400c:	40014000 	.word	0x40014000

08004010 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e042      	b.n	80040a8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d106      	bne.n	800403c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7fd fb70 	bl	800171c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2224      	movs	r2, #36	; 0x24
 8004040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68da      	ldr	r2, [r3, #12]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004052:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 f973 	bl	8004340 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	691a      	ldr	r2, [r3, #16]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004068:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	695a      	ldr	r2, [r3, #20]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004078:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68da      	ldr	r2, [r3, #12]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004088:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2220      	movs	r2, #32
 8004094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2220      	movs	r2, #32
 800409c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3708      	adds	r7, #8
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b08a      	sub	sp, #40	; 0x28
 80040b4:	af02      	add	r7, sp, #8
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	603b      	str	r3, [r7, #0]
 80040bc:	4613      	mov	r3, r2
 80040be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040c0:	2300      	movs	r3, #0
 80040c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b20      	cmp	r3, #32
 80040ce:	d175      	bne.n	80041bc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d002      	beq.n	80040dc <HAL_UART_Transmit+0x2c>
 80040d6:	88fb      	ldrh	r3, [r7, #6]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d101      	bne.n	80040e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e06e      	b.n	80041be <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2221      	movs	r2, #33	; 0x21
 80040ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040ee:	f7fd fd03 	bl	8001af8 <HAL_GetTick>
 80040f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	88fa      	ldrh	r2, [r7, #6]
 80040f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	88fa      	ldrh	r2, [r7, #6]
 80040fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004108:	d108      	bne.n	800411c <HAL_UART_Transmit+0x6c>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d104      	bne.n	800411c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004112:	2300      	movs	r3, #0
 8004114:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	61bb      	str	r3, [r7, #24]
 800411a:	e003      	b.n	8004124 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004120:	2300      	movs	r3, #0
 8004122:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004124:	e02e      	b.n	8004184 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	2200      	movs	r2, #0
 800412e:	2180      	movs	r1, #128	; 0x80
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f000 f848 	bl	80041c6 <UART_WaitOnFlagUntilTimeout>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d005      	beq.n	8004148 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2220      	movs	r2, #32
 8004140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e03a      	b.n	80041be <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10b      	bne.n	8004166 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	881b      	ldrh	r3, [r3, #0]
 8004152:	461a      	mov	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800415c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	3302      	adds	r3, #2
 8004162:	61bb      	str	r3, [r7, #24]
 8004164:	e007      	b.n	8004176 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	781a      	ldrb	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	3301      	adds	r3, #1
 8004174:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800417a:	b29b      	uxth	r3, r3
 800417c:	3b01      	subs	r3, #1
 800417e:	b29a      	uxth	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004188:	b29b      	uxth	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1cb      	bne.n	8004126 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	9300      	str	r3, [sp, #0]
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	2200      	movs	r2, #0
 8004196:	2140      	movs	r1, #64	; 0x40
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 f814 	bl	80041c6 <UART_WaitOnFlagUntilTimeout>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d005      	beq.n	80041b0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2220      	movs	r2, #32
 80041a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e006      	b.n	80041be <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2220      	movs	r2, #32
 80041b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80041b8:	2300      	movs	r3, #0
 80041ba:	e000      	b.n	80041be <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80041bc:	2302      	movs	r3, #2
  }
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3720      	adds	r7, #32
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b086      	sub	sp, #24
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	60f8      	str	r0, [r7, #12]
 80041ce:	60b9      	str	r1, [r7, #8]
 80041d0:	603b      	str	r3, [r7, #0]
 80041d2:	4613      	mov	r3, r2
 80041d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041d6:	e03b      	b.n	8004250 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041d8:	6a3b      	ldr	r3, [r7, #32]
 80041da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041de:	d037      	beq.n	8004250 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041e0:	f7fd fc8a 	bl	8001af8 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	6a3a      	ldr	r2, [r7, #32]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d302      	bcc.n	80041f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80041f0:	6a3b      	ldr	r3, [r7, #32]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e03a      	b.n	8004270 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f003 0304 	and.w	r3, r3, #4
 8004204:	2b00      	cmp	r3, #0
 8004206:	d023      	beq.n	8004250 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	2b80      	cmp	r3, #128	; 0x80
 800420c:	d020      	beq.n	8004250 <UART_WaitOnFlagUntilTimeout+0x8a>
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	2b40      	cmp	r3, #64	; 0x40
 8004212:	d01d      	beq.n	8004250 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0308 	and.w	r3, r3, #8
 800421e:	2b08      	cmp	r3, #8
 8004220:	d116      	bne.n	8004250 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004222:	2300      	movs	r3, #0
 8004224:	617b      	str	r3, [r7, #20]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	617b      	str	r3, [r7, #20]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	617b      	str	r3, [r7, #20]
 8004236:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f000 f81d 	bl	8004278 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2208      	movs	r2, #8
 8004242:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e00f      	b.n	8004270 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	4013      	ands	r3, r2
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	429a      	cmp	r2, r3
 800425e:	bf0c      	ite	eq
 8004260:	2301      	moveq	r3, #1
 8004262:	2300      	movne	r3, #0
 8004264:	b2db      	uxtb	r3, r3
 8004266:	461a      	mov	r2, r3
 8004268:	79fb      	ldrb	r3, [r7, #7]
 800426a:	429a      	cmp	r2, r3
 800426c:	d0b4      	beq.n	80041d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3718      	adds	r7, #24
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004278:	b480      	push	{r7}
 800427a:	b095      	sub	sp, #84	; 0x54
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	330c      	adds	r3, #12
 8004286:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800428a:	e853 3f00 	ldrex	r3, [r3]
 800428e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004292:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004296:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	330c      	adds	r3, #12
 800429e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042a0:	643a      	str	r2, [r7, #64]	; 0x40
 80042a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80042a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042a8:	e841 2300 	strex	r3, r2, [r1]
 80042ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1e5      	bne.n	8004280 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	3314      	adds	r3, #20
 80042ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042bc:	6a3b      	ldr	r3, [r7, #32]
 80042be:	e853 3f00 	ldrex	r3, [r3]
 80042c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	f023 0301 	bic.w	r3, r3, #1
 80042ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	3314      	adds	r3, #20
 80042d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042dc:	e841 2300 	strex	r3, r2, [r1]
 80042e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1e5      	bne.n	80042b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d119      	bne.n	8004324 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	330c      	adds	r3, #12
 80042f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	e853 3f00 	ldrex	r3, [r3]
 80042fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	f023 0310 	bic.w	r3, r3, #16
 8004306:	647b      	str	r3, [r7, #68]	; 0x44
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	330c      	adds	r3, #12
 800430e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004310:	61ba      	str	r2, [r7, #24]
 8004312:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004314:	6979      	ldr	r1, [r7, #20]
 8004316:	69ba      	ldr	r2, [r7, #24]
 8004318:	e841 2300 	strex	r3, r2, [r1]
 800431c:	613b      	str	r3, [r7, #16]
   return(result);
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1e5      	bne.n	80042f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2220      	movs	r2, #32
 8004328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004332:	bf00      	nop
 8004334:	3754      	adds	r7, #84	; 0x54
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
	...

08004340 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004344:	b0c0      	sub	sp, #256	; 0x100
 8004346:	af00      	add	r7, sp, #0
 8004348:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800434c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800435c:	68d9      	ldr	r1, [r3, #12]
 800435e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	ea40 0301 	orr.w	r3, r0, r1
 8004368:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800436a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	431a      	orrs	r2, r3
 8004378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	431a      	orrs	r2, r3
 8004380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	4313      	orrs	r3, r2
 8004388:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800438c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004398:	f021 010c 	bic.w	r1, r1, #12
 800439c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80043a6:	430b      	orrs	r3, r1
 80043a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80043b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ba:	6999      	ldr	r1, [r3, #24]
 80043bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	ea40 0301 	orr.w	r3, r0, r1
 80043c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	4b8f      	ldr	r3, [pc, #572]	; (800460c <UART_SetConfig+0x2cc>)
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d005      	beq.n	80043e0 <UART_SetConfig+0xa0>
 80043d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	4b8d      	ldr	r3, [pc, #564]	; (8004610 <UART_SetConfig+0x2d0>)
 80043dc:	429a      	cmp	r2, r3
 80043de:	d104      	bne.n	80043ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80043e0:	f7ff fafc 	bl	80039dc <HAL_RCC_GetPCLK2Freq>
 80043e4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80043e8:	e003      	b.n	80043f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043ea:	f7ff fae3 	bl	80039b4 <HAL_RCC_GetPCLK1Freq>
 80043ee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f6:	69db      	ldr	r3, [r3, #28]
 80043f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043fc:	f040 810c 	bne.w	8004618 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004400:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004404:	2200      	movs	r2, #0
 8004406:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800440a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800440e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004412:	4622      	mov	r2, r4
 8004414:	462b      	mov	r3, r5
 8004416:	1891      	adds	r1, r2, r2
 8004418:	65b9      	str	r1, [r7, #88]	; 0x58
 800441a:	415b      	adcs	r3, r3
 800441c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800441e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004422:	4621      	mov	r1, r4
 8004424:	eb12 0801 	adds.w	r8, r2, r1
 8004428:	4629      	mov	r1, r5
 800442a:	eb43 0901 	adc.w	r9, r3, r1
 800442e:	f04f 0200 	mov.w	r2, #0
 8004432:	f04f 0300 	mov.w	r3, #0
 8004436:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800443a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800443e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004442:	4690      	mov	r8, r2
 8004444:	4699      	mov	r9, r3
 8004446:	4623      	mov	r3, r4
 8004448:	eb18 0303 	adds.w	r3, r8, r3
 800444c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004450:	462b      	mov	r3, r5
 8004452:	eb49 0303 	adc.w	r3, r9, r3
 8004456:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800445a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004466:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800446a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800446e:	460b      	mov	r3, r1
 8004470:	18db      	adds	r3, r3, r3
 8004472:	653b      	str	r3, [r7, #80]	; 0x50
 8004474:	4613      	mov	r3, r2
 8004476:	eb42 0303 	adc.w	r3, r2, r3
 800447a:	657b      	str	r3, [r7, #84]	; 0x54
 800447c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004480:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004484:	f7fc fbe8 	bl	8000c58 <__aeabi_uldivmod>
 8004488:	4602      	mov	r2, r0
 800448a:	460b      	mov	r3, r1
 800448c:	4b61      	ldr	r3, [pc, #388]	; (8004614 <UART_SetConfig+0x2d4>)
 800448e:	fba3 2302 	umull	r2, r3, r3, r2
 8004492:	095b      	lsrs	r3, r3, #5
 8004494:	011c      	lsls	r4, r3, #4
 8004496:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800449a:	2200      	movs	r2, #0
 800449c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80044a0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80044a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80044a8:	4642      	mov	r2, r8
 80044aa:	464b      	mov	r3, r9
 80044ac:	1891      	adds	r1, r2, r2
 80044ae:	64b9      	str	r1, [r7, #72]	; 0x48
 80044b0:	415b      	adcs	r3, r3
 80044b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80044b8:	4641      	mov	r1, r8
 80044ba:	eb12 0a01 	adds.w	sl, r2, r1
 80044be:	4649      	mov	r1, r9
 80044c0:	eb43 0b01 	adc.w	fp, r3, r1
 80044c4:	f04f 0200 	mov.w	r2, #0
 80044c8:	f04f 0300 	mov.w	r3, #0
 80044cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80044d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80044d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044d8:	4692      	mov	sl, r2
 80044da:	469b      	mov	fp, r3
 80044dc:	4643      	mov	r3, r8
 80044de:	eb1a 0303 	adds.w	r3, sl, r3
 80044e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044e6:	464b      	mov	r3, r9
 80044e8:	eb4b 0303 	adc.w	r3, fp, r3
 80044ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80044f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044fc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004500:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004504:	460b      	mov	r3, r1
 8004506:	18db      	adds	r3, r3, r3
 8004508:	643b      	str	r3, [r7, #64]	; 0x40
 800450a:	4613      	mov	r3, r2
 800450c:	eb42 0303 	adc.w	r3, r2, r3
 8004510:	647b      	str	r3, [r7, #68]	; 0x44
 8004512:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004516:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800451a:	f7fc fb9d 	bl	8000c58 <__aeabi_uldivmod>
 800451e:	4602      	mov	r2, r0
 8004520:	460b      	mov	r3, r1
 8004522:	4611      	mov	r1, r2
 8004524:	4b3b      	ldr	r3, [pc, #236]	; (8004614 <UART_SetConfig+0x2d4>)
 8004526:	fba3 2301 	umull	r2, r3, r3, r1
 800452a:	095b      	lsrs	r3, r3, #5
 800452c:	2264      	movs	r2, #100	; 0x64
 800452e:	fb02 f303 	mul.w	r3, r2, r3
 8004532:	1acb      	subs	r3, r1, r3
 8004534:	00db      	lsls	r3, r3, #3
 8004536:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800453a:	4b36      	ldr	r3, [pc, #216]	; (8004614 <UART_SetConfig+0x2d4>)
 800453c:	fba3 2302 	umull	r2, r3, r3, r2
 8004540:	095b      	lsrs	r3, r3, #5
 8004542:	005b      	lsls	r3, r3, #1
 8004544:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004548:	441c      	add	r4, r3
 800454a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800454e:	2200      	movs	r2, #0
 8004550:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004554:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004558:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800455c:	4642      	mov	r2, r8
 800455e:	464b      	mov	r3, r9
 8004560:	1891      	adds	r1, r2, r2
 8004562:	63b9      	str	r1, [r7, #56]	; 0x38
 8004564:	415b      	adcs	r3, r3
 8004566:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004568:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800456c:	4641      	mov	r1, r8
 800456e:	1851      	adds	r1, r2, r1
 8004570:	6339      	str	r1, [r7, #48]	; 0x30
 8004572:	4649      	mov	r1, r9
 8004574:	414b      	adcs	r3, r1
 8004576:	637b      	str	r3, [r7, #52]	; 0x34
 8004578:	f04f 0200 	mov.w	r2, #0
 800457c:	f04f 0300 	mov.w	r3, #0
 8004580:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004584:	4659      	mov	r1, fp
 8004586:	00cb      	lsls	r3, r1, #3
 8004588:	4651      	mov	r1, sl
 800458a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800458e:	4651      	mov	r1, sl
 8004590:	00ca      	lsls	r2, r1, #3
 8004592:	4610      	mov	r0, r2
 8004594:	4619      	mov	r1, r3
 8004596:	4603      	mov	r3, r0
 8004598:	4642      	mov	r2, r8
 800459a:	189b      	adds	r3, r3, r2
 800459c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045a0:	464b      	mov	r3, r9
 80045a2:	460a      	mov	r2, r1
 80045a4:	eb42 0303 	adc.w	r3, r2, r3
 80045a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80045b8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80045bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80045c0:	460b      	mov	r3, r1
 80045c2:	18db      	adds	r3, r3, r3
 80045c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80045c6:	4613      	mov	r3, r2
 80045c8:	eb42 0303 	adc.w	r3, r2, r3
 80045cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80045d6:	f7fc fb3f 	bl	8000c58 <__aeabi_uldivmod>
 80045da:	4602      	mov	r2, r0
 80045dc:	460b      	mov	r3, r1
 80045de:	4b0d      	ldr	r3, [pc, #52]	; (8004614 <UART_SetConfig+0x2d4>)
 80045e0:	fba3 1302 	umull	r1, r3, r3, r2
 80045e4:	095b      	lsrs	r3, r3, #5
 80045e6:	2164      	movs	r1, #100	; 0x64
 80045e8:	fb01 f303 	mul.w	r3, r1, r3
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	3332      	adds	r3, #50	; 0x32
 80045f2:	4a08      	ldr	r2, [pc, #32]	; (8004614 <UART_SetConfig+0x2d4>)
 80045f4:	fba2 2303 	umull	r2, r3, r2, r3
 80045f8:	095b      	lsrs	r3, r3, #5
 80045fa:	f003 0207 	and.w	r2, r3, #7
 80045fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4422      	add	r2, r4
 8004606:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004608:	e106      	b.n	8004818 <UART_SetConfig+0x4d8>
 800460a:	bf00      	nop
 800460c:	40011000 	.word	0x40011000
 8004610:	40011400 	.word	0x40011400
 8004614:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004618:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800461c:	2200      	movs	r2, #0
 800461e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004622:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004626:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800462a:	4642      	mov	r2, r8
 800462c:	464b      	mov	r3, r9
 800462e:	1891      	adds	r1, r2, r2
 8004630:	6239      	str	r1, [r7, #32]
 8004632:	415b      	adcs	r3, r3
 8004634:	627b      	str	r3, [r7, #36]	; 0x24
 8004636:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800463a:	4641      	mov	r1, r8
 800463c:	1854      	adds	r4, r2, r1
 800463e:	4649      	mov	r1, r9
 8004640:	eb43 0501 	adc.w	r5, r3, r1
 8004644:	f04f 0200 	mov.w	r2, #0
 8004648:	f04f 0300 	mov.w	r3, #0
 800464c:	00eb      	lsls	r3, r5, #3
 800464e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004652:	00e2      	lsls	r2, r4, #3
 8004654:	4614      	mov	r4, r2
 8004656:	461d      	mov	r5, r3
 8004658:	4643      	mov	r3, r8
 800465a:	18e3      	adds	r3, r4, r3
 800465c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004660:	464b      	mov	r3, r9
 8004662:	eb45 0303 	adc.w	r3, r5, r3
 8004666:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800466a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004676:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800467a:	f04f 0200 	mov.w	r2, #0
 800467e:	f04f 0300 	mov.w	r3, #0
 8004682:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004686:	4629      	mov	r1, r5
 8004688:	008b      	lsls	r3, r1, #2
 800468a:	4621      	mov	r1, r4
 800468c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004690:	4621      	mov	r1, r4
 8004692:	008a      	lsls	r2, r1, #2
 8004694:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004698:	f7fc fade 	bl	8000c58 <__aeabi_uldivmod>
 800469c:	4602      	mov	r2, r0
 800469e:	460b      	mov	r3, r1
 80046a0:	4b60      	ldr	r3, [pc, #384]	; (8004824 <UART_SetConfig+0x4e4>)
 80046a2:	fba3 2302 	umull	r2, r3, r3, r2
 80046a6:	095b      	lsrs	r3, r3, #5
 80046a8:	011c      	lsls	r4, r3, #4
 80046aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046ae:	2200      	movs	r2, #0
 80046b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80046b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80046b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80046bc:	4642      	mov	r2, r8
 80046be:	464b      	mov	r3, r9
 80046c0:	1891      	adds	r1, r2, r2
 80046c2:	61b9      	str	r1, [r7, #24]
 80046c4:	415b      	adcs	r3, r3
 80046c6:	61fb      	str	r3, [r7, #28]
 80046c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046cc:	4641      	mov	r1, r8
 80046ce:	1851      	adds	r1, r2, r1
 80046d0:	6139      	str	r1, [r7, #16]
 80046d2:	4649      	mov	r1, r9
 80046d4:	414b      	adcs	r3, r1
 80046d6:	617b      	str	r3, [r7, #20]
 80046d8:	f04f 0200 	mov.w	r2, #0
 80046dc:	f04f 0300 	mov.w	r3, #0
 80046e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046e4:	4659      	mov	r1, fp
 80046e6:	00cb      	lsls	r3, r1, #3
 80046e8:	4651      	mov	r1, sl
 80046ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046ee:	4651      	mov	r1, sl
 80046f0:	00ca      	lsls	r2, r1, #3
 80046f2:	4610      	mov	r0, r2
 80046f4:	4619      	mov	r1, r3
 80046f6:	4603      	mov	r3, r0
 80046f8:	4642      	mov	r2, r8
 80046fa:	189b      	adds	r3, r3, r2
 80046fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004700:	464b      	mov	r3, r9
 8004702:	460a      	mov	r2, r1
 8004704:	eb42 0303 	adc.w	r3, r2, r3
 8004708:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800470c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	67bb      	str	r3, [r7, #120]	; 0x78
 8004716:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004718:	f04f 0200 	mov.w	r2, #0
 800471c:	f04f 0300 	mov.w	r3, #0
 8004720:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004724:	4649      	mov	r1, r9
 8004726:	008b      	lsls	r3, r1, #2
 8004728:	4641      	mov	r1, r8
 800472a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800472e:	4641      	mov	r1, r8
 8004730:	008a      	lsls	r2, r1, #2
 8004732:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004736:	f7fc fa8f 	bl	8000c58 <__aeabi_uldivmod>
 800473a:	4602      	mov	r2, r0
 800473c:	460b      	mov	r3, r1
 800473e:	4611      	mov	r1, r2
 8004740:	4b38      	ldr	r3, [pc, #224]	; (8004824 <UART_SetConfig+0x4e4>)
 8004742:	fba3 2301 	umull	r2, r3, r3, r1
 8004746:	095b      	lsrs	r3, r3, #5
 8004748:	2264      	movs	r2, #100	; 0x64
 800474a:	fb02 f303 	mul.w	r3, r2, r3
 800474e:	1acb      	subs	r3, r1, r3
 8004750:	011b      	lsls	r3, r3, #4
 8004752:	3332      	adds	r3, #50	; 0x32
 8004754:	4a33      	ldr	r2, [pc, #204]	; (8004824 <UART_SetConfig+0x4e4>)
 8004756:	fba2 2303 	umull	r2, r3, r2, r3
 800475a:	095b      	lsrs	r3, r3, #5
 800475c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004760:	441c      	add	r4, r3
 8004762:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004766:	2200      	movs	r2, #0
 8004768:	673b      	str	r3, [r7, #112]	; 0x70
 800476a:	677a      	str	r2, [r7, #116]	; 0x74
 800476c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004770:	4642      	mov	r2, r8
 8004772:	464b      	mov	r3, r9
 8004774:	1891      	adds	r1, r2, r2
 8004776:	60b9      	str	r1, [r7, #8]
 8004778:	415b      	adcs	r3, r3
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004780:	4641      	mov	r1, r8
 8004782:	1851      	adds	r1, r2, r1
 8004784:	6039      	str	r1, [r7, #0]
 8004786:	4649      	mov	r1, r9
 8004788:	414b      	adcs	r3, r1
 800478a:	607b      	str	r3, [r7, #4]
 800478c:	f04f 0200 	mov.w	r2, #0
 8004790:	f04f 0300 	mov.w	r3, #0
 8004794:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004798:	4659      	mov	r1, fp
 800479a:	00cb      	lsls	r3, r1, #3
 800479c:	4651      	mov	r1, sl
 800479e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047a2:	4651      	mov	r1, sl
 80047a4:	00ca      	lsls	r2, r1, #3
 80047a6:	4610      	mov	r0, r2
 80047a8:	4619      	mov	r1, r3
 80047aa:	4603      	mov	r3, r0
 80047ac:	4642      	mov	r2, r8
 80047ae:	189b      	adds	r3, r3, r2
 80047b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80047b2:	464b      	mov	r3, r9
 80047b4:	460a      	mov	r2, r1
 80047b6:	eb42 0303 	adc.w	r3, r2, r3
 80047ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	663b      	str	r3, [r7, #96]	; 0x60
 80047c6:	667a      	str	r2, [r7, #100]	; 0x64
 80047c8:	f04f 0200 	mov.w	r2, #0
 80047cc:	f04f 0300 	mov.w	r3, #0
 80047d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80047d4:	4649      	mov	r1, r9
 80047d6:	008b      	lsls	r3, r1, #2
 80047d8:	4641      	mov	r1, r8
 80047da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047de:	4641      	mov	r1, r8
 80047e0:	008a      	lsls	r2, r1, #2
 80047e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80047e6:	f7fc fa37 	bl	8000c58 <__aeabi_uldivmod>
 80047ea:	4602      	mov	r2, r0
 80047ec:	460b      	mov	r3, r1
 80047ee:	4b0d      	ldr	r3, [pc, #52]	; (8004824 <UART_SetConfig+0x4e4>)
 80047f0:	fba3 1302 	umull	r1, r3, r3, r2
 80047f4:	095b      	lsrs	r3, r3, #5
 80047f6:	2164      	movs	r1, #100	; 0x64
 80047f8:	fb01 f303 	mul.w	r3, r1, r3
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	011b      	lsls	r3, r3, #4
 8004800:	3332      	adds	r3, #50	; 0x32
 8004802:	4a08      	ldr	r2, [pc, #32]	; (8004824 <UART_SetConfig+0x4e4>)
 8004804:	fba2 2303 	umull	r2, r3, r2, r3
 8004808:	095b      	lsrs	r3, r3, #5
 800480a:	f003 020f 	and.w	r2, r3, #15
 800480e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4422      	add	r2, r4
 8004816:	609a      	str	r2, [r3, #8]
}
 8004818:	bf00      	nop
 800481a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800481e:	46bd      	mov	sp, r7
 8004820:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004824:	51eb851f 	.word	0x51eb851f

08004828 <__cvt>:
 8004828:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800482c:	ec55 4b10 	vmov	r4, r5, d0
 8004830:	2d00      	cmp	r5, #0
 8004832:	460e      	mov	r6, r1
 8004834:	4619      	mov	r1, r3
 8004836:	462b      	mov	r3, r5
 8004838:	bfbb      	ittet	lt
 800483a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800483e:	461d      	movlt	r5, r3
 8004840:	2300      	movge	r3, #0
 8004842:	232d      	movlt	r3, #45	; 0x2d
 8004844:	700b      	strb	r3, [r1, #0]
 8004846:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004848:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800484c:	4691      	mov	r9, r2
 800484e:	f023 0820 	bic.w	r8, r3, #32
 8004852:	bfbc      	itt	lt
 8004854:	4622      	movlt	r2, r4
 8004856:	4614      	movlt	r4, r2
 8004858:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800485c:	d005      	beq.n	800486a <__cvt+0x42>
 800485e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004862:	d100      	bne.n	8004866 <__cvt+0x3e>
 8004864:	3601      	adds	r6, #1
 8004866:	2102      	movs	r1, #2
 8004868:	e000      	b.n	800486c <__cvt+0x44>
 800486a:	2103      	movs	r1, #3
 800486c:	ab03      	add	r3, sp, #12
 800486e:	9301      	str	r3, [sp, #4]
 8004870:	ab02      	add	r3, sp, #8
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	ec45 4b10 	vmov	d0, r4, r5
 8004878:	4653      	mov	r3, sl
 800487a:	4632      	mov	r2, r6
 800487c:	f000 fe68 	bl	8005550 <_dtoa_r>
 8004880:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004884:	4607      	mov	r7, r0
 8004886:	d102      	bne.n	800488e <__cvt+0x66>
 8004888:	f019 0f01 	tst.w	r9, #1
 800488c:	d022      	beq.n	80048d4 <__cvt+0xac>
 800488e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004892:	eb07 0906 	add.w	r9, r7, r6
 8004896:	d110      	bne.n	80048ba <__cvt+0x92>
 8004898:	783b      	ldrb	r3, [r7, #0]
 800489a:	2b30      	cmp	r3, #48	; 0x30
 800489c:	d10a      	bne.n	80048b4 <__cvt+0x8c>
 800489e:	2200      	movs	r2, #0
 80048a0:	2300      	movs	r3, #0
 80048a2:	4620      	mov	r0, r4
 80048a4:	4629      	mov	r1, r5
 80048a6:	f7fc f917 	bl	8000ad8 <__aeabi_dcmpeq>
 80048aa:	b918      	cbnz	r0, 80048b4 <__cvt+0x8c>
 80048ac:	f1c6 0601 	rsb	r6, r6, #1
 80048b0:	f8ca 6000 	str.w	r6, [sl]
 80048b4:	f8da 3000 	ldr.w	r3, [sl]
 80048b8:	4499      	add	r9, r3
 80048ba:	2200      	movs	r2, #0
 80048bc:	2300      	movs	r3, #0
 80048be:	4620      	mov	r0, r4
 80048c0:	4629      	mov	r1, r5
 80048c2:	f7fc f909 	bl	8000ad8 <__aeabi_dcmpeq>
 80048c6:	b108      	cbz	r0, 80048cc <__cvt+0xa4>
 80048c8:	f8cd 900c 	str.w	r9, [sp, #12]
 80048cc:	2230      	movs	r2, #48	; 0x30
 80048ce:	9b03      	ldr	r3, [sp, #12]
 80048d0:	454b      	cmp	r3, r9
 80048d2:	d307      	bcc.n	80048e4 <__cvt+0xbc>
 80048d4:	9b03      	ldr	r3, [sp, #12]
 80048d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80048d8:	1bdb      	subs	r3, r3, r7
 80048da:	4638      	mov	r0, r7
 80048dc:	6013      	str	r3, [r2, #0]
 80048de:	b004      	add	sp, #16
 80048e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048e4:	1c59      	adds	r1, r3, #1
 80048e6:	9103      	str	r1, [sp, #12]
 80048e8:	701a      	strb	r2, [r3, #0]
 80048ea:	e7f0      	b.n	80048ce <__cvt+0xa6>

080048ec <__exponent>:
 80048ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048ee:	4603      	mov	r3, r0
 80048f0:	2900      	cmp	r1, #0
 80048f2:	bfb8      	it	lt
 80048f4:	4249      	neglt	r1, r1
 80048f6:	f803 2b02 	strb.w	r2, [r3], #2
 80048fa:	bfb4      	ite	lt
 80048fc:	222d      	movlt	r2, #45	; 0x2d
 80048fe:	222b      	movge	r2, #43	; 0x2b
 8004900:	2909      	cmp	r1, #9
 8004902:	7042      	strb	r2, [r0, #1]
 8004904:	dd2a      	ble.n	800495c <__exponent+0x70>
 8004906:	f10d 0207 	add.w	r2, sp, #7
 800490a:	4617      	mov	r7, r2
 800490c:	260a      	movs	r6, #10
 800490e:	4694      	mov	ip, r2
 8004910:	fb91 f5f6 	sdiv	r5, r1, r6
 8004914:	fb06 1415 	mls	r4, r6, r5, r1
 8004918:	3430      	adds	r4, #48	; 0x30
 800491a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800491e:	460c      	mov	r4, r1
 8004920:	2c63      	cmp	r4, #99	; 0x63
 8004922:	f102 32ff 	add.w	r2, r2, #4294967295
 8004926:	4629      	mov	r1, r5
 8004928:	dcf1      	bgt.n	800490e <__exponent+0x22>
 800492a:	3130      	adds	r1, #48	; 0x30
 800492c:	f1ac 0402 	sub.w	r4, ip, #2
 8004930:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004934:	1c41      	adds	r1, r0, #1
 8004936:	4622      	mov	r2, r4
 8004938:	42ba      	cmp	r2, r7
 800493a:	d30a      	bcc.n	8004952 <__exponent+0x66>
 800493c:	f10d 0209 	add.w	r2, sp, #9
 8004940:	eba2 020c 	sub.w	r2, r2, ip
 8004944:	42bc      	cmp	r4, r7
 8004946:	bf88      	it	hi
 8004948:	2200      	movhi	r2, #0
 800494a:	4413      	add	r3, r2
 800494c:	1a18      	subs	r0, r3, r0
 800494e:	b003      	add	sp, #12
 8004950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004952:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004956:	f801 5f01 	strb.w	r5, [r1, #1]!
 800495a:	e7ed      	b.n	8004938 <__exponent+0x4c>
 800495c:	2330      	movs	r3, #48	; 0x30
 800495e:	3130      	adds	r1, #48	; 0x30
 8004960:	7083      	strb	r3, [r0, #2]
 8004962:	70c1      	strb	r1, [r0, #3]
 8004964:	1d03      	adds	r3, r0, #4
 8004966:	e7f1      	b.n	800494c <__exponent+0x60>

08004968 <_printf_float>:
 8004968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800496c:	ed2d 8b02 	vpush	{d8}
 8004970:	b08d      	sub	sp, #52	; 0x34
 8004972:	460c      	mov	r4, r1
 8004974:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004978:	4616      	mov	r6, r2
 800497a:	461f      	mov	r7, r3
 800497c:	4605      	mov	r5, r0
 800497e:	f000 fce7 	bl	8005350 <_localeconv_r>
 8004982:	f8d0 a000 	ldr.w	sl, [r0]
 8004986:	4650      	mov	r0, sl
 8004988:	f7fb fc7a 	bl	8000280 <strlen>
 800498c:	2300      	movs	r3, #0
 800498e:	930a      	str	r3, [sp, #40]	; 0x28
 8004990:	6823      	ldr	r3, [r4, #0]
 8004992:	9305      	str	r3, [sp, #20]
 8004994:	f8d8 3000 	ldr.w	r3, [r8]
 8004998:	f894 b018 	ldrb.w	fp, [r4, #24]
 800499c:	3307      	adds	r3, #7
 800499e:	f023 0307 	bic.w	r3, r3, #7
 80049a2:	f103 0208 	add.w	r2, r3, #8
 80049a6:	f8c8 2000 	str.w	r2, [r8]
 80049aa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80049ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80049b2:	9307      	str	r3, [sp, #28]
 80049b4:	f8cd 8018 	str.w	r8, [sp, #24]
 80049b8:	ee08 0a10 	vmov	s16, r0
 80049bc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80049c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80049c4:	4b9e      	ldr	r3, [pc, #632]	; (8004c40 <_printf_float+0x2d8>)
 80049c6:	f04f 32ff 	mov.w	r2, #4294967295
 80049ca:	f7fc f8b7 	bl	8000b3c <__aeabi_dcmpun>
 80049ce:	bb88      	cbnz	r0, 8004a34 <_printf_float+0xcc>
 80049d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80049d4:	4b9a      	ldr	r3, [pc, #616]	; (8004c40 <_printf_float+0x2d8>)
 80049d6:	f04f 32ff 	mov.w	r2, #4294967295
 80049da:	f7fc f891 	bl	8000b00 <__aeabi_dcmple>
 80049de:	bb48      	cbnz	r0, 8004a34 <_printf_float+0xcc>
 80049e0:	2200      	movs	r2, #0
 80049e2:	2300      	movs	r3, #0
 80049e4:	4640      	mov	r0, r8
 80049e6:	4649      	mov	r1, r9
 80049e8:	f7fc f880 	bl	8000aec <__aeabi_dcmplt>
 80049ec:	b110      	cbz	r0, 80049f4 <_printf_float+0x8c>
 80049ee:	232d      	movs	r3, #45	; 0x2d
 80049f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049f4:	4a93      	ldr	r2, [pc, #588]	; (8004c44 <_printf_float+0x2dc>)
 80049f6:	4b94      	ldr	r3, [pc, #592]	; (8004c48 <_printf_float+0x2e0>)
 80049f8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80049fc:	bf94      	ite	ls
 80049fe:	4690      	movls	r8, r2
 8004a00:	4698      	movhi	r8, r3
 8004a02:	2303      	movs	r3, #3
 8004a04:	6123      	str	r3, [r4, #16]
 8004a06:	9b05      	ldr	r3, [sp, #20]
 8004a08:	f023 0304 	bic.w	r3, r3, #4
 8004a0c:	6023      	str	r3, [r4, #0]
 8004a0e:	f04f 0900 	mov.w	r9, #0
 8004a12:	9700      	str	r7, [sp, #0]
 8004a14:	4633      	mov	r3, r6
 8004a16:	aa0b      	add	r2, sp, #44	; 0x2c
 8004a18:	4621      	mov	r1, r4
 8004a1a:	4628      	mov	r0, r5
 8004a1c:	f000 f9da 	bl	8004dd4 <_printf_common>
 8004a20:	3001      	adds	r0, #1
 8004a22:	f040 8090 	bne.w	8004b46 <_printf_float+0x1de>
 8004a26:	f04f 30ff 	mov.w	r0, #4294967295
 8004a2a:	b00d      	add	sp, #52	; 0x34
 8004a2c:	ecbd 8b02 	vpop	{d8}
 8004a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a34:	4642      	mov	r2, r8
 8004a36:	464b      	mov	r3, r9
 8004a38:	4640      	mov	r0, r8
 8004a3a:	4649      	mov	r1, r9
 8004a3c:	f7fc f87e 	bl	8000b3c <__aeabi_dcmpun>
 8004a40:	b140      	cbz	r0, 8004a54 <_printf_float+0xec>
 8004a42:	464b      	mov	r3, r9
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	bfbc      	itt	lt
 8004a48:	232d      	movlt	r3, #45	; 0x2d
 8004a4a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004a4e:	4a7f      	ldr	r2, [pc, #508]	; (8004c4c <_printf_float+0x2e4>)
 8004a50:	4b7f      	ldr	r3, [pc, #508]	; (8004c50 <_printf_float+0x2e8>)
 8004a52:	e7d1      	b.n	80049f8 <_printf_float+0x90>
 8004a54:	6863      	ldr	r3, [r4, #4]
 8004a56:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004a5a:	9206      	str	r2, [sp, #24]
 8004a5c:	1c5a      	adds	r2, r3, #1
 8004a5e:	d13f      	bne.n	8004ae0 <_printf_float+0x178>
 8004a60:	2306      	movs	r3, #6
 8004a62:	6063      	str	r3, [r4, #4]
 8004a64:	9b05      	ldr	r3, [sp, #20]
 8004a66:	6861      	ldr	r1, [r4, #4]
 8004a68:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	9303      	str	r3, [sp, #12]
 8004a70:	ab0a      	add	r3, sp, #40	; 0x28
 8004a72:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004a76:	ab09      	add	r3, sp, #36	; 0x24
 8004a78:	ec49 8b10 	vmov	d0, r8, r9
 8004a7c:	9300      	str	r3, [sp, #0]
 8004a7e:	6022      	str	r2, [r4, #0]
 8004a80:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004a84:	4628      	mov	r0, r5
 8004a86:	f7ff fecf 	bl	8004828 <__cvt>
 8004a8a:	9b06      	ldr	r3, [sp, #24]
 8004a8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004a8e:	2b47      	cmp	r3, #71	; 0x47
 8004a90:	4680      	mov	r8, r0
 8004a92:	d108      	bne.n	8004aa6 <_printf_float+0x13e>
 8004a94:	1cc8      	adds	r0, r1, #3
 8004a96:	db02      	blt.n	8004a9e <_printf_float+0x136>
 8004a98:	6863      	ldr	r3, [r4, #4]
 8004a9a:	4299      	cmp	r1, r3
 8004a9c:	dd41      	ble.n	8004b22 <_printf_float+0x1ba>
 8004a9e:	f1ab 0302 	sub.w	r3, fp, #2
 8004aa2:	fa5f fb83 	uxtb.w	fp, r3
 8004aa6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004aaa:	d820      	bhi.n	8004aee <_printf_float+0x186>
 8004aac:	3901      	subs	r1, #1
 8004aae:	465a      	mov	r2, fp
 8004ab0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004ab4:	9109      	str	r1, [sp, #36]	; 0x24
 8004ab6:	f7ff ff19 	bl	80048ec <__exponent>
 8004aba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004abc:	1813      	adds	r3, r2, r0
 8004abe:	2a01      	cmp	r2, #1
 8004ac0:	4681      	mov	r9, r0
 8004ac2:	6123      	str	r3, [r4, #16]
 8004ac4:	dc02      	bgt.n	8004acc <_printf_float+0x164>
 8004ac6:	6822      	ldr	r2, [r4, #0]
 8004ac8:	07d2      	lsls	r2, r2, #31
 8004aca:	d501      	bpl.n	8004ad0 <_printf_float+0x168>
 8004acc:	3301      	adds	r3, #1
 8004ace:	6123      	str	r3, [r4, #16]
 8004ad0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d09c      	beq.n	8004a12 <_printf_float+0xaa>
 8004ad8:	232d      	movs	r3, #45	; 0x2d
 8004ada:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ade:	e798      	b.n	8004a12 <_printf_float+0xaa>
 8004ae0:	9a06      	ldr	r2, [sp, #24]
 8004ae2:	2a47      	cmp	r2, #71	; 0x47
 8004ae4:	d1be      	bne.n	8004a64 <_printf_float+0xfc>
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1bc      	bne.n	8004a64 <_printf_float+0xfc>
 8004aea:	2301      	movs	r3, #1
 8004aec:	e7b9      	b.n	8004a62 <_printf_float+0xfa>
 8004aee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004af2:	d118      	bne.n	8004b26 <_printf_float+0x1be>
 8004af4:	2900      	cmp	r1, #0
 8004af6:	6863      	ldr	r3, [r4, #4]
 8004af8:	dd0b      	ble.n	8004b12 <_printf_float+0x1aa>
 8004afa:	6121      	str	r1, [r4, #16]
 8004afc:	b913      	cbnz	r3, 8004b04 <_printf_float+0x19c>
 8004afe:	6822      	ldr	r2, [r4, #0]
 8004b00:	07d0      	lsls	r0, r2, #31
 8004b02:	d502      	bpl.n	8004b0a <_printf_float+0x1a2>
 8004b04:	3301      	adds	r3, #1
 8004b06:	440b      	add	r3, r1
 8004b08:	6123      	str	r3, [r4, #16]
 8004b0a:	65a1      	str	r1, [r4, #88]	; 0x58
 8004b0c:	f04f 0900 	mov.w	r9, #0
 8004b10:	e7de      	b.n	8004ad0 <_printf_float+0x168>
 8004b12:	b913      	cbnz	r3, 8004b1a <_printf_float+0x1b2>
 8004b14:	6822      	ldr	r2, [r4, #0]
 8004b16:	07d2      	lsls	r2, r2, #31
 8004b18:	d501      	bpl.n	8004b1e <_printf_float+0x1b6>
 8004b1a:	3302      	adds	r3, #2
 8004b1c:	e7f4      	b.n	8004b08 <_printf_float+0x1a0>
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e7f2      	b.n	8004b08 <_printf_float+0x1a0>
 8004b22:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004b26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b28:	4299      	cmp	r1, r3
 8004b2a:	db05      	blt.n	8004b38 <_printf_float+0x1d0>
 8004b2c:	6823      	ldr	r3, [r4, #0]
 8004b2e:	6121      	str	r1, [r4, #16]
 8004b30:	07d8      	lsls	r0, r3, #31
 8004b32:	d5ea      	bpl.n	8004b0a <_printf_float+0x1a2>
 8004b34:	1c4b      	adds	r3, r1, #1
 8004b36:	e7e7      	b.n	8004b08 <_printf_float+0x1a0>
 8004b38:	2900      	cmp	r1, #0
 8004b3a:	bfd4      	ite	le
 8004b3c:	f1c1 0202 	rsble	r2, r1, #2
 8004b40:	2201      	movgt	r2, #1
 8004b42:	4413      	add	r3, r2
 8004b44:	e7e0      	b.n	8004b08 <_printf_float+0x1a0>
 8004b46:	6823      	ldr	r3, [r4, #0]
 8004b48:	055a      	lsls	r2, r3, #21
 8004b4a:	d407      	bmi.n	8004b5c <_printf_float+0x1f4>
 8004b4c:	6923      	ldr	r3, [r4, #16]
 8004b4e:	4642      	mov	r2, r8
 8004b50:	4631      	mov	r1, r6
 8004b52:	4628      	mov	r0, r5
 8004b54:	47b8      	blx	r7
 8004b56:	3001      	adds	r0, #1
 8004b58:	d12c      	bne.n	8004bb4 <_printf_float+0x24c>
 8004b5a:	e764      	b.n	8004a26 <_printf_float+0xbe>
 8004b5c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004b60:	f240 80e0 	bls.w	8004d24 <_printf_float+0x3bc>
 8004b64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b68:	2200      	movs	r2, #0
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	f7fb ffb4 	bl	8000ad8 <__aeabi_dcmpeq>
 8004b70:	2800      	cmp	r0, #0
 8004b72:	d034      	beq.n	8004bde <_printf_float+0x276>
 8004b74:	4a37      	ldr	r2, [pc, #220]	; (8004c54 <_printf_float+0x2ec>)
 8004b76:	2301      	movs	r3, #1
 8004b78:	4631      	mov	r1, r6
 8004b7a:	4628      	mov	r0, r5
 8004b7c:	47b8      	blx	r7
 8004b7e:	3001      	adds	r0, #1
 8004b80:	f43f af51 	beq.w	8004a26 <_printf_float+0xbe>
 8004b84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	db02      	blt.n	8004b92 <_printf_float+0x22a>
 8004b8c:	6823      	ldr	r3, [r4, #0]
 8004b8e:	07d8      	lsls	r0, r3, #31
 8004b90:	d510      	bpl.n	8004bb4 <_printf_float+0x24c>
 8004b92:	ee18 3a10 	vmov	r3, s16
 8004b96:	4652      	mov	r2, sl
 8004b98:	4631      	mov	r1, r6
 8004b9a:	4628      	mov	r0, r5
 8004b9c:	47b8      	blx	r7
 8004b9e:	3001      	adds	r0, #1
 8004ba0:	f43f af41 	beq.w	8004a26 <_printf_float+0xbe>
 8004ba4:	f04f 0800 	mov.w	r8, #0
 8004ba8:	f104 091a 	add.w	r9, r4, #26
 8004bac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	4543      	cmp	r3, r8
 8004bb2:	dc09      	bgt.n	8004bc8 <_printf_float+0x260>
 8004bb4:	6823      	ldr	r3, [r4, #0]
 8004bb6:	079b      	lsls	r3, r3, #30
 8004bb8:	f100 8107 	bmi.w	8004dca <_printf_float+0x462>
 8004bbc:	68e0      	ldr	r0, [r4, #12]
 8004bbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004bc0:	4298      	cmp	r0, r3
 8004bc2:	bfb8      	it	lt
 8004bc4:	4618      	movlt	r0, r3
 8004bc6:	e730      	b.n	8004a2a <_printf_float+0xc2>
 8004bc8:	2301      	movs	r3, #1
 8004bca:	464a      	mov	r2, r9
 8004bcc:	4631      	mov	r1, r6
 8004bce:	4628      	mov	r0, r5
 8004bd0:	47b8      	blx	r7
 8004bd2:	3001      	adds	r0, #1
 8004bd4:	f43f af27 	beq.w	8004a26 <_printf_float+0xbe>
 8004bd8:	f108 0801 	add.w	r8, r8, #1
 8004bdc:	e7e6      	b.n	8004bac <_printf_float+0x244>
 8004bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	dc39      	bgt.n	8004c58 <_printf_float+0x2f0>
 8004be4:	4a1b      	ldr	r2, [pc, #108]	; (8004c54 <_printf_float+0x2ec>)
 8004be6:	2301      	movs	r3, #1
 8004be8:	4631      	mov	r1, r6
 8004bea:	4628      	mov	r0, r5
 8004bec:	47b8      	blx	r7
 8004bee:	3001      	adds	r0, #1
 8004bf0:	f43f af19 	beq.w	8004a26 <_printf_float+0xbe>
 8004bf4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	d102      	bne.n	8004c02 <_printf_float+0x29a>
 8004bfc:	6823      	ldr	r3, [r4, #0]
 8004bfe:	07d9      	lsls	r1, r3, #31
 8004c00:	d5d8      	bpl.n	8004bb4 <_printf_float+0x24c>
 8004c02:	ee18 3a10 	vmov	r3, s16
 8004c06:	4652      	mov	r2, sl
 8004c08:	4631      	mov	r1, r6
 8004c0a:	4628      	mov	r0, r5
 8004c0c:	47b8      	blx	r7
 8004c0e:	3001      	adds	r0, #1
 8004c10:	f43f af09 	beq.w	8004a26 <_printf_float+0xbe>
 8004c14:	f04f 0900 	mov.w	r9, #0
 8004c18:	f104 0a1a 	add.w	sl, r4, #26
 8004c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c1e:	425b      	negs	r3, r3
 8004c20:	454b      	cmp	r3, r9
 8004c22:	dc01      	bgt.n	8004c28 <_printf_float+0x2c0>
 8004c24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c26:	e792      	b.n	8004b4e <_printf_float+0x1e6>
 8004c28:	2301      	movs	r3, #1
 8004c2a:	4652      	mov	r2, sl
 8004c2c:	4631      	mov	r1, r6
 8004c2e:	4628      	mov	r0, r5
 8004c30:	47b8      	blx	r7
 8004c32:	3001      	adds	r0, #1
 8004c34:	f43f aef7 	beq.w	8004a26 <_printf_float+0xbe>
 8004c38:	f109 0901 	add.w	r9, r9, #1
 8004c3c:	e7ee      	b.n	8004c1c <_printf_float+0x2b4>
 8004c3e:	bf00      	nop
 8004c40:	7fefffff 	.word	0x7fefffff
 8004c44:	08007850 	.word	0x08007850
 8004c48:	08007854 	.word	0x08007854
 8004c4c:	08007858 	.word	0x08007858
 8004c50:	0800785c 	.word	0x0800785c
 8004c54:	08007860 	.word	0x08007860
 8004c58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	bfa8      	it	ge
 8004c60:	461a      	movge	r2, r3
 8004c62:	2a00      	cmp	r2, #0
 8004c64:	4691      	mov	r9, r2
 8004c66:	dc37      	bgt.n	8004cd8 <_printf_float+0x370>
 8004c68:	f04f 0b00 	mov.w	fp, #0
 8004c6c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c70:	f104 021a 	add.w	r2, r4, #26
 8004c74:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c76:	9305      	str	r3, [sp, #20]
 8004c78:	eba3 0309 	sub.w	r3, r3, r9
 8004c7c:	455b      	cmp	r3, fp
 8004c7e:	dc33      	bgt.n	8004ce8 <_printf_float+0x380>
 8004c80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c84:	429a      	cmp	r2, r3
 8004c86:	db3b      	blt.n	8004d00 <_printf_float+0x398>
 8004c88:	6823      	ldr	r3, [r4, #0]
 8004c8a:	07da      	lsls	r2, r3, #31
 8004c8c:	d438      	bmi.n	8004d00 <_printf_float+0x398>
 8004c8e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004c92:	eba2 0903 	sub.w	r9, r2, r3
 8004c96:	9b05      	ldr	r3, [sp, #20]
 8004c98:	1ad2      	subs	r2, r2, r3
 8004c9a:	4591      	cmp	r9, r2
 8004c9c:	bfa8      	it	ge
 8004c9e:	4691      	movge	r9, r2
 8004ca0:	f1b9 0f00 	cmp.w	r9, #0
 8004ca4:	dc35      	bgt.n	8004d12 <_printf_float+0x3aa>
 8004ca6:	f04f 0800 	mov.w	r8, #0
 8004caa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004cae:	f104 0a1a 	add.w	sl, r4, #26
 8004cb2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cb6:	1a9b      	subs	r3, r3, r2
 8004cb8:	eba3 0309 	sub.w	r3, r3, r9
 8004cbc:	4543      	cmp	r3, r8
 8004cbe:	f77f af79 	ble.w	8004bb4 <_printf_float+0x24c>
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	4652      	mov	r2, sl
 8004cc6:	4631      	mov	r1, r6
 8004cc8:	4628      	mov	r0, r5
 8004cca:	47b8      	blx	r7
 8004ccc:	3001      	adds	r0, #1
 8004cce:	f43f aeaa 	beq.w	8004a26 <_printf_float+0xbe>
 8004cd2:	f108 0801 	add.w	r8, r8, #1
 8004cd6:	e7ec      	b.n	8004cb2 <_printf_float+0x34a>
 8004cd8:	4613      	mov	r3, r2
 8004cda:	4631      	mov	r1, r6
 8004cdc:	4642      	mov	r2, r8
 8004cde:	4628      	mov	r0, r5
 8004ce0:	47b8      	blx	r7
 8004ce2:	3001      	adds	r0, #1
 8004ce4:	d1c0      	bne.n	8004c68 <_printf_float+0x300>
 8004ce6:	e69e      	b.n	8004a26 <_printf_float+0xbe>
 8004ce8:	2301      	movs	r3, #1
 8004cea:	4631      	mov	r1, r6
 8004cec:	4628      	mov	r0, r5
 8004cee:	9205      	str	r2, [sp, #20]
 8004cf0:	47b8      	blx	r7
 8004cf2:	3001      	adds	r0, #1
 8004cf4:	f43f ae97 	beq.w	8004a26 <_printf_float+0xbe>
 8004cf8:	9a05      	ldr	r2, [sp, #20]
 8004cfa:	f10b 0b01 	add.w	fp, fp, #1
 8004cfe:	e7b9      	b.n	8004c74 <_printf_float+0x30c>
 8004d00:	ee18 3a10 	vmov	r3, s16
 8004d04:	4652      	mov	r2, sl
 8004d06:	4631      	mov	r1, r6
 8004d08:	4628      	mov	r0, r5
 8004d0a:	47b8      	blx	r7
 8004d0c:	3001      	adds	r0, #1
 8004d0e:	d1be      	bne.n	8004c8e <_printf_float+0x326>
 8004d10:	e689      	b.n	8004a26 <_printf_float+0xbe>
 8004d12:	9a05      	ldr	r2, [sp, #20]
 8004d14:	464b      	mov	r3, r9
 8004d16:	4442      	add	r2, r8
 8004d18:	4631      	mov	r1, r6
 8004d1a:	4628      	mov	r0, r5
 8004d1c:	47b8      	blx	r7
 8004d1e:	3001      	adds	r0, #1
 8004d20:	d1c1      	bne.n	8004ca6 <_printf_float+0x33e>
 8004d22:	e680      	b.n	8004a26 <_printf_float+0xbe>
 8004d24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d26:	2a01      	cmp	r2, #1
 8004d28:	dc01      	bgt.n	8004d2e <_printf_float+0x3c6>
 8004d2a:	07db      	lsls	r3, r3, #31
 8004d2c:	d53a      	bpl.n	8004da4 <_printf_float+0x43c>
 8004d2e:	2301      	movs	r3, #1
 8004d30:	4642      	mov	r2, r8
 8004d32:	4631      	mov	r1, r6
 8004d34:	4628      	mov	r0, r5
 8004d36:	47b8      	blx	r7
 8004d38:	3001      	adds	r0, #1
 8004d3a:	f43f ae74 	beq.w	8004a26 <_printf_float+0xbe>
 8004d3e:	ee18 3a10 	vmov	r3, s16
 8004d42:	4652      	mov	r2, sl
 8004d44:	4631      	mov	r1, r6
 8004d46:	4628      	mov	r0, r5
 8004d48:	47b8      	blx	r7
 8004d4a:	3001      	adds	r0, #1
 8004d4c:	f43f ae6b 	beq.w	8004a26 <_printf_float+0xbe>
 8004d50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d54:	2200      	movs	r2, #0
 8004d56:	2300      	movs	r3, #0
 8004d58:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004d5c:	f7fb febc 	bl	8000ad8 <__aeabi_dcmpeq>
 8004d60:	b9d8      	cbnz	r0, 8004d9a <_printf_float+0x432>
 8004d62:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004d66:	f108 0201 	add.w	r2, r8, #1
 8004d6a:	4631      	mov	r1, r6
 8004d6c:	4628      	mov	r0, r5
 8004d6e:	47b8      	blx	r7
 8004d70:	3001      	adds	r0, #1
 8004d72:	d10e      	bne.n	8004d92 <_printf_float+0x42a>
 8004d74:	e657      	b.n	8004a26 <_printf_float+0xbe>
 8004d76:	2301      	movs	r3, #1
 8004d78:	4652      	mov	r2, sl
 8004d7a:	4631      	mov	r1, r6
 8004d7c:	4628      	mov	r0, r5
 8004d7e:	47b8      	blx	r7
 8004d80:	3001      	adds	r0, #1
 8004d82:	f43f ae50 	beq.w	8004a26 <_printf_float+0xbe>
 8004d86:	f108 0801 	add.w	r8, r8, #1
 8004d8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	4543      	cmp	r3, r8
 8004d90:	dcf1      	bgt.n	8004d76 <_printf_float+0x40e>
 8004d92:	464b      	mov	r3, r9
 8004d94:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004d98:	e6da      	b.n	8004b50 <_printf_float+0x1e8>
 8004d9a:	f04f 0800 	mov.w	r8, #0
 8004d9e:	f104 0a1a 	add.w	sl, r4, #26
 8004da2:	e7f2      	b.n	8004d8a <_printf_float+0x422>
 8004da4:	2301      	movs	r3, #1
 8004da6:	4642      	mov	r2, r8
 8004da8:	e7df      	b.n	8004d6a <_printf_float+0x402>
 8004daa:	2301      	movs	r3, #1
 8004dac:	464a      	mov	r2, r9
 8004dae:	4631      	mov	r1, r6
 8004db0:	4628      	mov	r0, r5
 8004db2:	47b8      	blx	r7
 8004db4:	3001      	adds	r0, #1
 8004db6:	f43f ae36 	beq.w	8004a26 <_printf_float+0xbe>
 8004dba:	f108 0801 	add.w	r8, r8, #1
 8004dbe:	68e3      	ldr	r3, [r4, #12]
 8004dc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004dc2:	1a5b      	subs	r3, r3, r1
 8004dc4:	4543      	cmp	r3, r8
 8004dc6:	dcf0      	bgt.n	8004daa <_printf_float+0x442>
 8004dc8:	e6f8      	b.n	8004bbc <_printf_float+0x254>
 8004dca:	f04f 0800 	mov.w	r8, #0
 8004dce:	f104 0919 	add.w	r9, r4, #25
 8004dd2:	e7f4      	b.n	8004dbe <_printf_float+0x456>

08004dd4 <_printf_common>:
 8004dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dd8:	4616      	mov	r6, r2
 8004dda:	4699      	mov	r9, r3
 8004ddc:	688a      	ldr	r2, [r1, #8]
 8004dde:	690b      	ldr	r3, [r1, #16]
 8004de0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004de4:	4293      	cmp	r3, r2
 8004de6:	bfb8      	it	lt
 8004de8:	4613      	movlt	r3, r2
 8004dea:	6033      	str	r3, [r6, #0]
 8004dec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004df0:	4607      	mov	r7, r0
 8004df2:	460c      	mov	r4, r1
 8004df4:	b10a      	cbz	r2, 8004dfa <_printf_common+0x26>
 8004df6:	3301      	adds	r3, #1
 8004df8:	6033      	str	r3, [r6, #0]
 8004dfa:	6823      	ldr	r3, [r4, #0]
 8004dfc:	0699      	lsls	r1, r3, #26
 8004dfe:	bf42      	ittt	mi
 8004e00:	6833      	ldrmi	r3, [r6, #0]
 8004e02:	3302      	addmi	r3, #2
 8004e04:	6033      	strmi	r3, [r6, #0]
 8004e06:	6825      	ldr	r5, [r4, #0]
 8004e08:	f015 0506 	ands.w	r5, r5, #6
 8004e0c:	d106      	bne.n	8004e1c <_printf_common+0x48>
 8004e0e:	f104 0a19 	add.w	sl, r4, #25
 8004e12:	68e3      	ldr	r3, [r4, #12]
 8004e14:	6832      	ldr	r2, [r6, #0]
 8004e16:	1a9b      	subs	r3, r3, r2
 8004e18:	42ab      	cmp	r3, r5
 8004e1a:	dc26      	bgt.n	8004e6a <_printf_common+0x96>
 8004e1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e20:	1e13      	subs	r3, r2, #0
 8004e22:	6822      	ldr	r2, [r4, #0]
 8004e24:	bf18      	it	ne
 8004e26:	2301      	movne	r3, #1
 8004e28:	0692      	lsls	r2, r2, #26
 8004e2a:	d42b      	bmi.n	8004e84 <_printf_common+0xb0>
 8004e2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e30:	4649      	mov	r1, r9
 8004e32:	4638      	mov	r0, r7
 8004e34:	47c0      	blx	r8
 8004e36:	3001      	adds	r0, #1
 8004e38:	d01e      	beq.n	8004e78 <_printf_common+0xa4>
 8004e3a:	6823      	ldr	r3, [r4, #0]
 8004e3c:	6922      	ldr	r2, [r4, #16]
 8004e3e:	f003 0306 	and.w	r3, r3, #6
 8004e42:	2b04      	cmp	r3, #4
 8004e44:	bf02      	ittt	eq
 8004e46:	68e5      	ldreq	r5, [r4, #12]
 8004e48:	6833      	ldreq	r3, [r6, #0]
 8004e4a:	1aed      	subeq	r5, r5, r3
 8004e4c:	68a3      	ldr	r3, [r4, #8]
 8004e4e:	bf0c      	ite	eq
 8004e50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e54:	2500      	movne	r5, #0
 8004e56:	4293      	cmp	r3, r2
 8004e58:	bfc4      	itt	gt
 8004e5a:	1a9b      	subgt	r3, r3, r2
 8004e5c:	18ed      	addgt	r5, r5, r3
 8004e5e:	2600      	movs	r6, #0
 8004e60:	341a      	adds	r4, #26
 8004e62:	42b5      	cmp	r5, r6
 8004e64:	d11a      	bne.n	8004e9c <_printf_common+0xc8>
 8004e66:	2000      	movs	r0, #0
 8004e68:	e008      	b.n	8004e7c <_printf_common+0xa8>
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	4652      	mov	r2, sl
 8004e6e:	4649      	mov	r1, r9
 8004e70:	4638      	mov	r0, r7
 8004e72:	47c0      	blx	r8
 8004e74:	3001      	adds	r0, #1
 8004e76:	d103      	bne.n	8004e80 <_printf_common+0xac>
 8004e78:	f04f 30ff 	mov.w	r0, #4294967295
 8004e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e80:	3501      	adds	r5, #1
 8004e82:	e7c6      	b.n	8004e12 <_printf_common+0x3e>
 8004e84:	18e1      	adds	r1, r4, r3
 8004e86:	1c5a      	adds	r2, r3, #1
 8004e88:	2030      	movs	r0, #48	; 0x30
 8004e8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e8e:	4422      	add	r2, r4
 8004e90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e98:	3302      	adds	r3, #2
 8004e9a:	e7c7      	b.n	8004e2c <_printf_common+0x58>
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	4622      	mov	r2, r4
 8004ea0:	4649      	mov	r1, r9
 8004ea2:	4638      	mov	r0, r7
 8004ea4:	47c0      	blx	r8
 8004ea6:	3001      	adds	r0, #1
 8004ea8:	d0e6      	beq.n	8004e78 <_printf_common+0xa4>
 8004eaa:	3601      	adds	r6, #1
 8004eac:	e7d9      	b.n	8004e62 <_printf_common+0x8e>
	...

08004eb0 <_printf_i>:
 8004eb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004eb4:	7e0f      	ldrb	r7, [r1, #24]
 8004eb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004eb8:	2f78      	cmp	r7, #120	; 0x78
 8004eba:	4691      	mov	r9, r2
 8004ebc:	4680      	mov	r8, r0
 8004ebe:	460c      	mov	r4, r1
 8004ec0:	469a      	mov	sl, r3
 8004ec2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004ec6:	d807      	bhi.n	8004ed8 <_printf_i+0x28>
 8004ec8:	2f62      	cmp	r7, #98	; 0x62
 8004eca:	d80a      	bhi.n	8004ee2 <_printf_i+0x32>
 8004ecc:	2f00      	cmp	r7, #0
 8004ece:	f000 80d4 	beq.w	800507a <_printf_i+0x1ca>
 8004ed2:	2f58      	cmp	r7, #88	; 0x58
 8004ed4:	f000 80c0 	beq.w	8005058 <_printf_i+0x1a8>
 8004ed8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004edc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ee0:	e03a      	b.n	8004f58 <_printf_i+0xa8>
 8004ee2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ee6:	2b15      	cmp	r3, #21
 8004ee8:	d8f6      	bhi.n	8004ed8 <_printf_i+0x28>
 8004eea:	a101      	add	r1, pc, #4	; (adr r1, 8004ef0 <_printf_i+0x40>)
 8004eec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ef0:	08004f49 	.word	0x08004f49
 8004ef4:	08004f5d 	.word	0x08004f5d
 8004ef8:	08004ed9 	.word	0x08004ed9
 8004efc:	08004ed9 	.word	0x08004ed9
 8004f00:	08004ed9 	.word	0x08004ed9
 8004f04:	08004ed9 	.word	0x08004ed9
 8004f08:	08004f5d 	.word	0x08004f5d
 8004f0c:	08004ed9 	.word	0x08004ed9
 8004f10:	08004ed9 	.word	0x08004ed9
 8004f14:	08004ed9 	.word	0x08004ed9
 8004f18:	08004ed9 	.word	0x08004ed9
 8004f1c:	08005061 	.word	0x08005061
 8004f20:	08004f89 	.word	0x08004f89
 8004f24:	0800501b 	.word	0x0800501b
 8004f28:	08004ed9 	.word	0x08004ed9
 8004f2c:	08004ed9 	.word	0x08004ed9
 8004f30:	08005083 	.word	0x08005083
 8004f34:	08004ed9 	.word	0x08004ed9
 8004f38:	08004f89 	.word	0x08004f89
 8004f3c:	08004ed9 	.word	0x08004ed9
 8004f40:	08004ed9 	.word	0x08004ed9
 8004f44:	08005023 	.word	0x08005023
 8004f48:	682b      	ldr	r3, [r5, #0]
 8004f4a:	1d1a      	adds	r2, r3, #4
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	602a      	str	r2, [r5, #0]
 8004f50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e09f      	b.n	800509c <_printf_i+0x1ec>
 8004f5c:	6820      	ldr	r0, [r4, #0]
 8004f5e:	682b      	ldr	r3, [r5, #0]
 8004f60:	0607      	lsls	r7, r0, #24
 8004f62:	f103 0104 	add.w	r1, r3, #4
 8004f66:	6029      	str	r1, [r5, #0]
 8004f68:	d501      	bpl.n	8004f6e <_printf_i+0xbe>
 8004f6a:	681e      	ldr	r6, [r3, #0]
 8004f6c:	e003      	b.n	8004f76 <_printf_i+0xc6>
 8004f6e:	0646      	lsls	r6, r0, #25
 8004f70:	d5fb      	bpl.n	8004f6a <_printf_i+0xba>
 8004f72:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004f76:	2e00      	cmp	r6, #0
 8004f78:	da03      	bge.n	8004f82 <_printf_i+0xd2>
 8004f7a:	232d      	movs	r3, #45	; 0x2d
 8004f7c:	4276      	negs	r6, r6
 8004f7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f82:	485a      	ldr	r0, [pc, #360]	; (80050ec <_printf_i+0x23c>)
 8004f84:	230a      	movs	r3, #10
 8004f86:	e012      	b.n	8004fae <_printf_i+0xfe>
 8004f88:	682b      	ldr	r3, [r5, #0]
 8004f8a:	6820      	ldr	r0, [r4, #0]
 8004f8c:	1d19      	adds	r1, r3, #4
 8004f8e:	6029      	str	r1, [r5, #0]
 8004f90:	0605      	lsls	r5, r0, #24
 8004f92:	d501      	bpl.n	8004f98 <_printf_i+0xe8>
 8004f94:	681e      	ldr	r6, [r3, #0]
 8004f96:	e002      	b.n	8004f9e <_printf_i+0xee>
 8004f98:	0641      	lsls	r1, r0, #25
 8004f9a:	d5fb      	bpl.n	8004f94 <_printf_i+0xe4>
 8004f9c:	881e      	ldrh	r6, [r3, #0]
 8004f9e:	4853      	ldr	r0, [pc, #332]	; (80050ec <_printf_i+0x23c>)
 8004fa0:	2f6f      	cmp	r7, #111	; 0x6f
 8004fa2:	bf0c      	ite	eq
 8004fa4:	2308      	moveq	r3, #8
 8004fa6:	230a      	movne	r3, #10
 8004fa8:	2100      	movs	r1, #0
 8004faa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004fae:	6865      	ldr	r5, [r4, #4]
 8004fb0:	60a5      	str	r5, [r4, #8]
 8004fb2:	2d00      	cmp	r5, #0
 8004fb4:	bfa2      	ittt	ge
 8004fb6:	6821      	ldrge	r1, [r4, #0]
 8004fb8:	f021 0104 	bicge.w	r1, r1, #4
 8004fbc:	6021      	strge	r1, [r4, #0]
 8004fbe:	b90e      	cbnz	r6, 8004fc4 <_printf_i+0x114>
 8004fc0:	2d00      	cmp	r5, #0
 8004fc2:	d04b      	beq.n	800505c <_printf_i+0x1ac>
 8004fc4:	4615      	mov	r5, r2
 8004fc6:	fbb6 f1f3 	udiv	r1, r6, r3
 8004fca:	fb03 6711 	mls	r7, r3, r1, r6
 8004fce:	5dc7      	ldrb	r7, [r0, r7]
 8004fd0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004fd4:	4637      	mov	r7, r6
 8004fd6:	42bb      	cmp	r3, r7
 8004fd8:	460e      	mov	r6, r1
 8004fda:	d9f4      	bls.n	8004fc6 <_printf_i+0x116>
 8004fdc:	2b08      	cmp	r3, #8
 8004fde:	d10b      	bne.n	8004ff8 <_printf_i+0x148>
 8004fe0:	6823      	ldr	r3, [r4, #0]
 8004fe2:	07de      	lsls	r6, r3, #31
 8004fe4:	d508      	bpl.n	8004ff8 <_printf_i+0x148>
 8004fe6:	6923      	ldr	r3, [r4, #16]
 8004fe8:	6861      	ldr	r1, [r4, #4]
 8004fea:	4299      	cmp	r1, r3
 8004fec:	bfde      	ittt	le
 8004fee:	2330      	movle	r3, #48	; 0x30
 8004ff0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ff4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ff8:	1b52      	subs	r2, r2, r5
 8004ffa:	6122      	str	r2, [r4, #16]
 8004ffc:	f8cd a000 	str.w	sl, [sp]
 8005000:	464b      	mov	r3, r9
 8005002:	aa03      	add	r2, sp, #12
 8005004:	4621      	mov	r1, r4
 8005006:	4640      	mov	r0, r8
 8005008:	f7ff fee4 	bl	8004dd4 <_printf_common>
 800500c:	3001      	adds	r0, #1
 800500e:	d14a      	bne.n	80050a6 <_printf_i+0x1f6>
 8005010:	f04f 30ff 	mov.w	r0, #4294967295
 8005014:	b004      	add	sp, #16
 8005016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800501a:	6823      	ldr	r3, [r4, #0]
 800501c:	f043 0320 	orr.w	r3, r3, #32
 8005020:	6023      	str	r3, [r4, #0]
 8005022:	4833      	ldr	r0, [pc, #204]	; (80050f0 <_printf_i+0x240>)
 8005024:	2778      	movs	r7, #120	; 0x78
 8005026:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800502a:	6823      	ldr	r3, [r4, #0]
 800502c:	6829      	ldr	r1, [r5, #0]
 800502e:	061f      	lsls	r7, r3, #24
 8005030:	f851 6b04 	ldr.w	r6, [r1], #4
 8005034:	d402      	bmi.n	800503c <_printf_i+0x18c>
 8005036:	065f      	lsls	r7, r3, #25
 8005038:	bf48      	it	mi
 800503a:	b2b6      	uxthmi	r6, r6
 800503c:	07df      	lsls	r7, r3, #31
 800503e:	bf48      	it	mi
 8005040:	f043 0320 	orrmi.w	r3, r3, #32
 8005044:	6029      	str	r1, [r5, #0]
 8005046:	bf48      	it	mi
 8005048:	6023      	strmi	r3, [r4, #0]
 800504a:	b91e      	cbnz	r6, 8005054 <_printf_i+0x1a4>
 800504c:	6823      	ldr	r3, [r4, #0]
 800504e:	f023 0320 	bic.w	r3, r3, #32
 8005052:	6023      	str	r3, [r4, #0]
 8005054:	2310      	movs	r3, #16
 8005056:	e7a7      	b.n	8004fa8 <_printf_i+0xf8>
 8005058:	4824      	ldr	r0, [pc, #144]	; (80050ec <_printf_i+0x23c>)
 800505a:	e7e4      	b.n	8005026 <_printf_i+0x176>
 800505c:	4615      	mov	r5, r2
 800505e:	e7bd      	b.n	8004fdc <_printf_i+0x12c>
 8005060:	682b      	ldr	r3, [r5, #0]
 8005062:	6826      	ldr	r6, [r4, #0]
 8005064:	6961      	ldr	r1, [r4, #20]
 8005066:	1d18      	adds	r0, r3, #4
 8005068:	6028      	str	r0, [r5, #0]
 800506a:	0635      	lsls	r5, r6, #24
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	d501      	bpl.n	8005074 <_printf_i+0x1c4>
 8005070:	6019      	str	r1, [r3, #0]
 8005072:	e002      	b.n	800507a <_printf_i+0x1ca>
 8005074:	0670      	lsls	r0, r6, #25
 8005076:	d5fb      	bpl.n	8005070 <_printf_i+0x1c0>
 8005078:	8019      	strh	r1, [r3, #0]
 800507a:	2300      	movs	r3, #0
 800507c:	6123      	str	r3, [r4, #16]
 800507e:	4615      	mov	r5, r2
 8005080:	e7bc      	b.n	8004ffc <_printf_i+0x14c>
 8005082:	682b      	ldr	r3, [r5, #0]
 8005084:	1d1a      	adds	r2, r3, #4
 8005086:	602a      	str	r2, [r5, #0]
 8005088:	681d      	ldr	r5, [r3, #0]
 800508a:	6862      	ldr	r2, [r4, #4]
 800508c:	2100      	movs	r1, #0
 800508e:	4628      	mov	r0, r5
 8005090:	f7fb f8a6 	bl	80001e0 <memchr>
 8005094:	b108      	cbz	r0, 800509a <_printf_i+0x1ea>
 8005096:	1b40      	subs	r0, r0, r5
 8005098:	6060      	str	r0, [r4, #4]
 800509a:	6863      	ldr	r3, [r4, #4]
 800509c:	6123      	str	r3, [r4, #16]
 800509e:	2300      	movs	r3, #0
 80050a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050a4:	e7aa      	b.n	8004ffc <_printf_i+0x14c>
 80050a6:	6923      	ldr	r3, [r4, #16]
 80050a8:	462a      	mov	r2, r5
 80050aa:	4649      	mov	r1, r9
 80050ac:	4640      	mov	r0, r8
 80050ae:	47d0      	blx	sl
 80050b0:	3001      	adds	r0, #1
 80050b2:	d0ad      	beq.n	8005010 <_printf_i+0x160>
 80050b4:	6823      	ldr	r3, [r4, #0]
 80050b6:	079b      	lsls	r3, r3, #30
 80050b8:	d413      	bmi.n	80050e2 <_printf_i+0x232>
 80050ba:	68e0      	ldr	r0, [r4, #12]
 80050bc:	9b03      	ldr	r3, [sp, #12]
 80050be:	4298      	cmp	r0, r3
 80050c0:	bfb8      	it	lt
 80050c2:	4618      	movlt	r0, r3
 80050c4:	e7a6      	b.n	8005014 <_printf_i+0x164>
 80050c6:	2301      	movs	r3, #1
 80050c8:	4632      	mov	r2, r6
 80050ca:	4649      	mov	r1, r9
 80050cc:	4640      	mov	r0, r8
 80050ce:	47d0      	blx	sl
 80050d0:	3001      	adds	r0, #1
 80050d2:	d09d      	beq.n	8005010 <_printf_i+0x160>
 80050d4:	3501      	adds	r5, #1
 80050d6:	68e3      	ldr	r3, [r4, #12]
 80050d8:	9903      	ldr	r1, [sp, #12]
 80050da:	1a5b      	subs	r3, r3, r1
 80050dc:	42ab      	cmp	r3, r5
 80050de:	dcf2      	bgt.n	80050c6 <_printf_i+0x216>
 80050e0:	e7eb      	b.n	80050ba <_printf_i+0x20a>
 80050e2:	2500      	movs	r5, #0
 80050e4:	f104 0619 	add.w	r6, r4, #25
 80050e8:	e7f5      	b.n	80050d6 <_printf_i+0x226>
 80050ea:	bf00      	nop
 80050ec:	08007862 	.word	0x08007862
 80050f0:	08007873 	.word	0x08007873

080050f4 <std>:
 80050f4:	2300      	movs	r3, #0
 80050f6:	b510      	push	{r4, lr}
 80050f8:	4604      	mov	r4, r0
 80050fa:	e9c0 3300 	strd	r3, r3, [r0]
 80050fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005102:	6083      	str	r3, [r0, #8]
 8005104:	8181      	strh	r1, [r0, #12]
 8005106:	6643      	str	r3, [r0, #100]	; 0x64
 8005108:	81c2      	strh	r2, [r0, #14]
 800510a:	6183      	str	r3, [r0, #24]
 800510c:	4619      	mov	r1, r3
 800510e:	2208      	movs	r2, #8
 8005110:	305c      	adds	r0, #92	; 0x5c
 8005112:	f000 f914 	bl	800533e <memset>
 8005116:	4b0d      	ldr	r3, [pc, #52]	; (800514c <std+0x58>)
 8005118:	6263      	str	r3, [r4, #36]	; 0x24
 800511a:	4b0d      	ldr	r3, [pc, #52]	; (8005150 <std+0x5c>)
 800511c:	62a3      	str	r3, [r4, #40]	; 0x28
 800511e:	4b0d      	ldr	r3, [pc, #52]	; (8005154 <std+0x60>)
 8005120:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005122:	4b0d      	ldr	r3, [pc, #52]	; (8005158 <std+0x64>)
 8005124:	6323      	str	r3, [r4, #48]	; 0x30
 8005126:	4b0d      	ldr	r3, [pc, #52]	; (800515c <std+0x68>)
 8005128:	6224      	str	r4, [r4, #32]
 800512a:	429c      	cmp	r4, r3
 800512c:	d006      	beq.n	800513c <std+0x48>
 800512e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005132:	4294      	cmp	r4, r2
 8005134:	d002      	beq.n	800513c <std+0x48>
 8005136:	33d0      	adds	r3, #208	; 0xd0
 8005138:	429c      	cmp	r4, r3
 800513a:	d105      	bne.n	8005148 <std+0x54>
 800513c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005144:	f000 b978 	b.w	8005438 <__retarget_lock_init_recursive>
 8005148:	bd10      	pop	{r4, pc}
 800514a:	bf00      	nop
 800514c:	080052b9 	.word	0x080052b9
 8005150:	080052db 	.word	0x080052db
 8005154:	08005313 	.word	0x08005313
 8005158:	08005337 	.word	0x08005337
 800515c:	20000398 	.word	0x20000398

08005160 <stdio_exit_handler>:
 8005160:	4a02      	ldr	r2, [pc, #8]	; (800516c <stdio_exit_handler+0xc>)
 8005162:	4903      	ldr	r1, [pc, #12]	; (8005170 <stdio_exit_handler+0x10>)
 8005164:	4803      	ldr	r0, [pc, #12]	; (8005174 <stdio_exit_handler+0x14>)
 8005166:	f000 b869 	b.w	800523c <_fwalk_sglue>
 800516a:	bf00      	nop
 800516c:	2000004c 	.word	0x2000004c
 8005170:	08006de9 	.word	0x08006de9
 8005174:	20000058 	.word	0x20000058

08005178 <cleanup_stdio>:
 8005178:	6841      	ldr	r1, [r0, #4]
 800517a:	4b0c      	ldr	r3, [pc, #48]	; (80051ac <cleanup_stdio+0x34>)
 800517c:	4299      	cmp	r1, r3
 800517e:	b510      	push	{r4, lr}
 8005180:	4604      	mov	r4, r0
 8005182:	d001      	beq.n	8005188 <cleanup_stdio+0x10>
 8005184:	f001 fe30 	bl	8006de8 <_fflush_r>
 8005188:	68a1      	ldr	r1, [r4, #8]
 800518a:	4b09      	ldr	r3, [pc, #36]	; (80051b0 <cleanup_stdio+0x38>)
 800518c:	4299      	cmp	r1, r3
 800518e:	d002      	beq.n	8005196 <cleanup_stdio+0x1e>
 8005190:	4620      	mov	r0, r4
 8005192:	f001 fe29 	bl	8006de8 <_fflush_r>
 8005196:	68e1      	ldr	r1, [r4, #12]
 8005198:	4b06      	ldr	r3, [pc, #24]	; (80051b4 <cleanup_stdio+0x3c>)
 800519a:	4299      	cmp	r1, r3
 800519c:	d004      	beq.n	80051a8 <cleanup_stdio+0x30>
 800519e:	4620      	mov	r0, r4
 80051a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051a4:	f001 be20 	b.w	8006de8 <_fflush_r>
 80051a8:	bd10      	pop	{r4, pc}
 80051aa:	bf00      	nop
 80051ac:	20000398 	.word	0x20000398
 80051b0:	20000400 	.word	0x20000400
 80051b4:	20000468 	.word	0x20000468

080051b8 <global_stdio_init.part.0>:
 80051b8:	b510      	push	{r4, lr}
 80051ba:	4b0b      	ldr	r3, [pc, #44]	; (80051e8 <global_stdio_init.part.0+0x30>)
 80051bc:	4c0b      	ldr	r4, [pc, #44]	; (80051ec <global_stdio_init.part.0+0x34>)
 80051be:	4a0c      	ldr	r2, [pc, #48]	; (80051f0 <global_stdio_init.part.0+0x38>)
 80051c0:	601a      	str	r2, [r3, #0]
 80051c2:	4620      	mov	r0, r4
 80051c4:	2200      	movs	r2, #0
 80051c6:	2104      	movs	r1, #4
 80051c8:	f7ff ff94 	bl	80050f4 <std>
 80051cc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80051d0:	2201      	movs	r2, #1
 80051d2:	2109      	movs	r1, #9
 80051d4:	f7ff ff8e 	bl	80050f4 <std>
 80051d8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80051dc:	2202      	movs	r2, #2
 80051de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051e2:	2112      	movs	r1, #18
 80051e4:	f7ff bf86 	b.w	80050f4 <std>
 80051e8:	200004d0 	.word	0x200004d0
 80051ec:	20000398 	.word	0x20000398
 80051f0:	08005161 	.word	0x08005161

080051f4 <__sfp_lock_acquire>:
 80051f4:	4801      	ldr	r0, [pc, #4]	; (80051fc <__sfp_lock_acquire+0x8>)
 80051f6:	f000 b920 	b.w	800543a <__retarget_lock_acquire_recursive>
 80051fa:	bf00      	nop
 80051fc:	200004d9 	.word	0x200004d9

08005200 <__sfp_lock_release>:
 8005200:	4801      	ldr	r0, [pc, #4]	; (8005208 <__sfp_lock_release+0x8>)
 8005202:	f000 b91b 	b.w	800543c <__retarget_lock_release_recursive>
 8005206:	bf00      	nop
 8005208:	200004d9 	.word	0x200004d9

0800520c <__sinit>:
 800520c:	b510      	push	{r4, lr}
 800520e:	4604      	mov	r4, r0
 8005210:	f7ff fff0 	bl	80051f4 <__sfp_lock_acquire>
 8005214:	6a23      	ldr	r3, [r4, #32]
 8005216:	b11b      	cbz	r3, 8005220 <__sinit+0x14>
 8005218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800521c:	f7ff bff0 	b.w	8005200 <__sfp_lock_release>
 8005220:	4b04      	ldr	r3, [pc, #16]	; (8005234 <__sinit+0x28>)
 8005222:	6223      	str	r3, [r4, #32]
 8005224:	4b04      	ldr	r3, [pc, #16]	; (8005238 <__sinit+0x2c>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1f5      	bne.n	8005218 <__sinit+0xc>
 800522c:	f7ff ffc4 	bl	80051b8 <global_stdio_init.part.0>
 8005230:	e7f2      	b.n	8005218 <__sinit+0xc>
 8005232:	bf00      	nop
 8005234:	08005179 	.word	0x08005179
 8005238:	200004d0 	.word	0x200004d0

0800523c <_fwalk_sglue>:
 800523c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005240:	4607      	mov	r7, r0
 8005242:	4688      	mov	r8, r1
 8005244:	4614      	mov	r4, r2
 8005246:	2600      	movs	r6, #0
 8005248:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800524c:	f1b9 0901 	subs.w	r9, r9, #1
 8005250:	d505      	bpl.n	800525e <_fwalk_sglue+0x22>
 8005252:	6824      	ldr	r4, [r4, #0]
 8005254:	2c00      	cmp	r4, #0
 8005256:	d1f7      	bne.n	8005248 <_fwalk_sglue+0xc>
 8005258:	4630      	mov	r0, r6
 800525a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800525e:	89ab      	ldrh	r3, [r5, #12]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d907      	bls.n	8005274 <_fwalk_sglue+0x38>
 8005264:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005268:	3301      	adds	r3, #1
 800526a:	d003      	beq.n	8005274 <_fwalk_sglue+0x38>
 800526c:	4629      	mov	r1, r5
 800526e:	4638      	mov	r0, r7
 8005270:	47c0      	blx	r8
 8005272:	4306      	orrs	r6, r0
 8005274:	3568      	adds	r5, #104	; 0x68
 8005276:	e7e9      	b.n	800524c <_fwalk_sglue+0x10>

08005278 <siprintf>:
 8005278:	b40e      	push	{r1, r2, r3}
 800527a:	b500      	push	{lr}
 800527c:	b09c      	sub	sp, #112	; 0x70
 800527e:	ab1d      	add	r3, sp, #116	; 0x74
 8005280:	9002      	str	r0, [sp, #8]
 8005282:	9006      	str	r0, [sp, #24]
 8005284:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005288:	4809      	ldr	r0, [pc, #36]	; (80052b0 <siprintf+0x38>)
 800528a:	9107      	str	r1, [sp, #28]
 800528c:	9104      	str	r1, [sp, #16]
 800528e:	4909      	ldr	r1, [pc, #36]	; (80052b4 <siprintf+0x3c>)
 8005290:	f853 2b04 	ldr.w	r2, [r3], #4
 8005294:	9105      	str	r1, [sp, #20]
 8005296:	6800      	ldr	r0, [r0, #0]
 8005298:	9301      	str	r3, [sp, #4]
 800529a:	a902      	add	r1, sp, #8
 800529c:	f001 fc20 	bl	8006ae0 <_svfiprintf_r>
 80052a0:	9b02      	ldr	r3, [sp, #8]
 80052a2:	2200      	movs	r2, #0
 80052a4:	701a      	strb	r2, [r3, #0]
 80052a6:	b01c      	add	sp, #112	; 0x70
 80052a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80052ac:	b003      	add	sp, #12
 80052ae:	4770      	bx	lr
 80052b0:	200000a4 	.word	0x200000a4
 80052b4:	ffff0208 	.word	0xffff0208

080052b8 <__sread>:
 80052b8:	b510      	push	{r4, lr}
 80052ba:	460c      	mov	r4, r1
 80052bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052c0:	f000 f86c 	bl	800539c <_read_r>
 80052c4:	2800      	cmp	r0, #0
 80052c6:	bfab      	itete	ge
 80052c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80052ca:	89a3      	ldrhlt	r3, [r4, #12]
 80052cc:	181b      	addge	r3, r3, r0
 80052ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80052d2:	bfac      	ite	ge
 80052d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80052d6:	81a3      	strhlt	r3, [r4, #12]
 80052d8:	bd10      	pop	{r4, pc}

080052da <__swrite>:
 80052da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052de:	461f      	mov	r7, r3
 80052e0:	898b      	ldrh	r3, [r1, #12]
 80052e2:	05db      	lsls	r3, r3, #23
 80052e4:	4605      	mov	r5, r0
 80052e6:	460c      	mov	r4, r1
 80052e8:	4616      	mov	r6, r2
 80052ea:	d505      	bpl.n	80052f8 <__swrite+0x1e>
 80052ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052f0:	2302      	movs	r3, #2
 80052f2:	2200      	movs	r2, #0
 80052f4:	f000 f840 	bl	8005378 <_lseek_r>
 80052f8:	89a3      	ldrh	r3, [r4, #12]
 80052fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005302:	81a3      	strh	r3, [r4, #12]
 8005304:	4632      	mov	r2, r6
 8005306:	463b      	mov	r3, r7
 8005308:	4628      	mov	r0, r5
 800530a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800530e:	f000 b857 	b.w	80053c0 <_write_r>

08005312 <__sseek>:
 8005312:	b510      	push	{r4, lr}
 8005314:	460c      	mov	r4, r1
 8005316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800531a:	f000 f82d 	bl	8005378 <_lseek_r>
 800531e:	1c43      	adds	r3, r0, #1
 8005320:	89a3      	ldrh	r3, [r4, #12]
 8005322:	bf15      	itete	ne
 8005324:	6560      	strne	r0, [r4, #84]	; 0x54
 8005326:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800532a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800532e:	81a3      	strheq	r3, [r4, #12]
 8005330:	bf18      	it	ne
 8005332:	81a3      	strhne	r3, [r4, #12]
 8005334:	bd10      	pop	{r4, pc}

08005336 <__sclose>:
 8005336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800533a:	f000 b80d 	b.w	8005358 <_close_r>

0800533e <memset>:
 800533e:	4402      	add	r2, r0
 8005340:	4603      	mov	r3, r0
 8005342:	4293      	cmp	r3, r2
 8005344:	d100      	bne.n	8005348 <memset+0xa>
 8005346:	4770      	bx	lr
 8005348:	f803 1b01 	strb.w	r1, [r3], #1
 800534c:	e7f9      	b.n	8005342 <memset+0x4>
	...

08005350 <_localeconv_r>:
 8005350:	4800      	ldr	r0, [pc, #0]	; (8005354 <_localeconv_r+0x4>)
 8005352:	4770      	bx	lr
 8005354:	20000198 	.word	0x20000198

08005358 <_close_r>:
 8005358:	b538      	push	{r3, r4, r5, lr}
 800535a:	4d06      	ldr	r5, [pc, #24]	; (8005374 <_close_r+0x1c>)
 800535c:	2300      	movs	r3, #0
 800535e:	4604      	mov	r4, r0
 8005360:	4608      	mov	r0, r1
 8005362:	602b      	str	r3, [r5, #0]
 8005364:	f7fc fabb 	bl	80018de <_close>
 8005368:	1c43      	adds	r3, r0, #1
 800536a:	d102      	bne.n	8005372 <_close_r+0x1a>
 800536c:	682b      	ldr	r3, [r5, #0]
 800536e:	b103      	cbz	r3, 8005372 <_close_r+0x1a>
 8005370:	6023      	str	r3, [r4, #0]
 8005372:	bd38      	pop	{r3, r4, r5, pc}
 8005374:	200004d4 	.word	0x200004d4

08005378 <_lseek_r>:
 8005378:	b538      	push	{r3, r4, r5, lr}
 800537a:	4d07      	ldr	r5, [pc, #28]	; (8005398 <_lseek_r+0x20>)
 800537c:	4604      	mov	r4, r0
 800537e:	4608      	mov	r0, r1
 8005380:	4611      	mov	r1, r2
 8005382:	2200      	movs	r2, #0
 8005384:	602a      	str	r2, [r5, #0]
 8005386:	461a      	mov	r2, r3
 8005388:	f7fc fad0 	bl	800192c <_lseek>
 800538c:	1c43      	adds	r3, r0, #1
 800538e:	d102      	bne.n	8005396 <_lseek_r+0x1e>
 8005390:	682b      	ldr	r3, [r5, #0]
 8005392:	b103      	cbz	r3, 8005396 <_lseek_r+0x1e>
 8005394:	6023      	str	r3, [r4, #0]
 8005396:	bd38      	pop	{r3, r4, r5, pc}
 8005398:	200004d4 	.word	0x200004d4

0800539c <_read_r>:
 800539c:	b538      	push	{r3, r4, r5, lr}
 800539e:	4d07      	ldr	r5, [pc, #28]	; (80053bc <_read_r+0x20>)
 80053a0:	4604      	mov	r4, r0
 80053a2:	4608      	mov	r0, r1
 80053a4:	4611      	mov	r1, r2
 80053a6:	2200      	movs	r2, #0
 80053a8:	602a      	str	r2, [r5, #0]
 80053aa:	461a      	mov	r2, r3
 80053ac:	f7fc fa5e 	bl	800186c <_read>
 80053b0:	1c43      	adds	r3, r0, #1
 80053b2:	d102      	bne.n	80053ba <_read_r+0x1e>
 80053b4:	682b      	ldr	r3, [r5, #0]
 80053b6:	b103      	cbz	r3, 80053ba <_read_r+0x1e>
 80053b8:	6023      	str	r3, [r4, #0]
 80053ba:	bd38      	pop	{r3, r4, r5, pc}
 80053bc:	200004d4 	.word	0x200004d4

080053c0 <_write_r>:
 80053c0:	b538      	push	{r3, r4, r5, lr}
 80053c2:	4d07      	ldr	r5, [pc, #28]	; (80053e0 <_write_r+0x20>)
 80053c4:	4604      	mov	r4, r0
 80053c6:	4608      	mov	r0, r1
 80053c8:	4611      	mov	r1, r2
 80053ca:	2200      	movs	r2, #0
 80053cc:	602a      	str	r2, [r5, #0]
 80053ce:	461a      	mov	r2, r3
 80053d0:	f7fc fa69 	bl	80018a6 <_write>
 80053d4:	1c43      	adds	r3, r0, #1
 80053d6:	d102      	bne.n	80053de <_write_r+0x1e>
 80053d8:	682b      	ldr	r3, [r5, #0]
 80053da:	b103      	cbz	r3, 80053de <_write_r+0x1e>
 80053dc:	6023      	str	r3, [r4, #0]
 80053de:	bd38      	pop	{r3, r4, r5, pc}
 80053e0:	200004d4 	.word	0x200004d4

080053e4 <__errno>:
 80053e4:	4b01      	ldr	r3, [pc, #4]	; (80053ec <__errno+0x8>)
 80053e6:	6818      	ldr	r0, [r3, #0]
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	200000a4 	.word	0x200000a4

080053f0 <__libc_init_array>:
 80053f0:	b570      	push	{r4, r5, r6, lr}
 80053f2:	4d0d      	ldr	r5, [pc, #52]	; (8005428 <__libc_init_array+0x38>)
 80053f4:	4c0d      	ldr	r4, [pc, #52]	; (800542c <__libc_init_array+0x3c>)
 80053f6:	1b64      	subs	r4, r4, r5
 80053f8:	10a4      	asrs	r4, r4, #2
 80053fa:	2600      	movs	r6, #0
 80053fc:	42a6      	cmp	r6, r4
 80053fe:	d109      	bne.n	8005414 <__libc_init_array+0x24>
 8005400:	4d0b      	ldr	r5, [pc, #44]	; (8005430 <__libc_init_array+0x40>)
 8005402:	4c0c      	ldr	r4, [pc, #48]	; (8005434 <__libc_init_array+0x44>)
 8005404:	f002 f9e8 	bl	80077d8 <_init>
 8005408:	1b64      	subs	r4, r4, r5
 800540a:	10a4      	asrs	r4, r4, #2
 800540c:	2600      	movs	r6, #0
 800540e:	42a6      	cmp	r6, r4
 8005410:	d105      	bne.n	800541e <__libc_init_array+0x2e>
 8005412:	bd70      	pop	{r4, r5, r6, pc}
 8005414:	f855 3b04 	ldr.w	r3, [r5], #4
 8005418:	4798      	blx	r3
 800541a:	3601      	adds	r6, #1
 800541c:	e7ee      	b.n	80053fc <__libc_init_array+0xc>
 800541e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005422:	4798      	blx	r3
 8005424:	3601      	adds	r6, #1
 8005426:	e7f2      	b.n	800540e <__libc_init_array+0x1e>
 8005428:	08007bcc 	.word	0x08007bcc
 800542c:	08007bcc 	.word	0x08007bcc
 8005430:	08007bcc 	.word	0x08007bcc
 8005434:	08007bd0 	.word	0x08007bd0

08005438 <__retarget_lock_init_recursive>:
 8005438:	4770      	bx	lr

0800543a <__retarget_lock_acquire_recursive>:
 800543a:	4770      	bx	lr

0800543c <__retarget_lock_release_recursive>:
 800543c:	4770      	bx	lr

0800543e <quorem>:
 800543e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005442:	6903      	ldr	r3, [r0, #16]
 8005444:	690c      	ldr	r4, [r1, #16]
 8005446:	42a3      	cmp	r3, r4
 8005448:	4607      	mov	r7, r0
 800544a:	db7e      	blt.n	800554a <quorem+0x10c>
 800544c:	3c01      	subs	r4, #1
 800544e:	f101 0814 	add.w	r8, r1, #20
 8005452:	f100 0514 	add.w	r5, r0, #20
 8005456:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800545a:	9301      	str	r3, [sp, #4]
 800545c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005460:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005464:	3301      	adds	r3, #1
 8005466:	429a      	cmp	r2, r3
 8005468:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800546c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005470:	fbb2 f6f3 	udiv	r6, r2, r3
 8005474:	d331      	bcc.n	80054da <quorem+0x9c>
 8005476:	f04f 0e00 	mov.w	lr, #0
 800547a:	4640      	mov	r0, r8
 800547c:	46ac      	mov	ip, r5
 800547e:	46f2      	mov	sl, lr
 8005480:	f850 2b04 	ldr.w	r2, [r0], #4
 8005484:	b293      	uxth	r3, r2
 8005486:	fb06 e303 	mla	r3, r6, r3, lr
 800548a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800548e:	0c1a      	lsrs	r2, r3, #16
 8005490:	b29b      	uxth	r3, r3
 8005492:	ebaa 0303 	sub.w	r3, sl, r3
 8005496:	f8dc a000 	ldr.w	sl, [ip]
 800549a:	fa13 f38a 	uxtah	r3, r3, sl
 800549e:	fb06 220e 	mla	r2, r6, lr, r2
 80054a2:	9300      	str	r3, [sp, #0]
 80054a4:	9b00      	ldr	r3, [sp, #0]
 80054a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80054aa:	b292      	uxth	r2, r2
 80054ac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80054b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80054b4:	f8bd 3000 	ldrh.w	r3, [sp]
 80054b8:	4581      	cmp	r9, r0
 80054ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80054be:	f84c 3b04 	str.w	r3, [ip], #4
 80054c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80054c6:	d2db      	bcs.n	8005480 <quorem+0x42>
 80054c8:	f855 300b 	ldr.w	r3, [r5, fp]
 80054cc:	b92b      	cbnz	r3, 80054da <quorem+0x9c>
 80054ce:	9b01      	ldr	r3, [sp, #4]
 80054d0:	3b04      	subs	r3, #4
 80054d2:	429d      	cmp	r5, r3
 80054d4:	461a      	mov	r2, r3
 80054d6:	d32c      	bcc.n	8005532 <quorem+0xf4>
 80054d8:	613c      	str	r4, [r7, #16]
 80054da:	4638      	mov	r0, r7
 80054dc:	f001 f9a6 	bl	800682c <__mcmp>
 80054e0:	2800      	cmp	r0, #0
 80054e2:	db22      	blt.n	800552a <quorem+0xec>
 80054e4:	3601      	adds	r6, #1
 80054e6:	4629      	mov	r1, r5
 80054e8:	2000      	movs	r0, #0
 80054ea:	f858 2b04 	ldr.w	r2, [r8], #4
 80054ee:	f8d1 c000 	ldr.w	ip, [r1]
 80054f2:	b293      	uxth	r3, r2
 80054f4:	1ac3      	subs	r3, r0, r3
 80054f6:	0c12      	lsrs	r2, r2, #16
 80054f8:	fa13 f38c 	uxtah	r3, r3, ip
 80054fc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005500:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005504:	b29b      	uxth	r3, r3
 8005506:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800550a:	45c1      	cmp	r9, r8
 800550c:	f841 3b04 	str.w	r3, [r1], #4
 8005510:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005514:	d2e9      	bcs.n	80054ea <quorem+0xac>
 8005516:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800551a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800551e:	b922      	cbnz	r2, 800552a <quorem+0xec>
 8005520:	3b04      	subs	r3, #4
 8005522:	429d      	cmp	r5, r3
 8005524:	461a      	mov	r2, r3
 8005526:	d30a      	bcc.n	800553e <quorem+0x100>
 8005528:	613c      	str	r4, [r7, #16]
 800552a:	4630      	mov	r0, r6
 800552c:	b003      	add	sp, #12
 800552e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005532:	6812      	ldr	r2, [r2, #0]
 8005534:	3b04      	subs	r3, #4
 8005536:	2a00      	cmp	r2, #0
 8005538:	d1ce      	bne.n	80054d8 <quorem+0x9a>
 800553a:	3c01      	subs	r4, #1
 800553c:	e7c9      	b.n	80054d2 <quorem+0x94>
 800553e:	6812      	ldr	r2, [r2, #0]
 8005540:	3b04      	subs	r3, #4
 8005542:	2a00      	cmp	r2, #0
 8005544:	d1f0      	bne.n	8005528 <quorem+0xea>
 8005546:	3c01      	subs	r4, #1
 8005548:	e7eb      	b.n	8005522 <quorem+0xe4>
 800554a:	2000      	movs	r0, #0
 800554c:	e7ee      	b.n	800552c <quorem+0xee>
	...

08005550 <_dtoa_r>:
 8005550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005554:	ed2d 8b04 	vpush	{d8-d9}
 8005558:	69c5      	ldr	r5, [r0, #28]
 800555a:	b093      	sub	sp, #76	; 0x4c
 800555c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005560:	ec57 6b10 	vmov	r6, r7, d0
 8005564:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005568:	9107      	str	r1, [sp, #28]
 800556a:	4604      	mov	r4, r0
 800556c:	920a      	str	r2, [sp, #40]	; 0x28
 800556e:	930d      	str	r3, [sp, #52]	; 0x34
 8005570:	b975      	cbnz	r5, 8005590 <_dtoa_r+0x40>
 8005572:	2010      	movs	r0, #16
 8005574:	f000 fe2a 	bl	80061cc <malloc>
 8005578:	4602      	mov	r2, r0
 800557a:	61e0      	str	r0, [r4, #28]
 800557c:	b920      	cbnz	r0, 8005588 <_dtoa_r+0x38>
 800557e:	4bae      	ldr	r3, [pc, #696]	; (8005838 <_dtoa_r+0x2e8>)
 8005580:	21ef      	movs	r1, #239	; 0xef
 8005582:	48ae      	ldr	r0, [pc, #696]	; (800583c <_dtoa_r+0x2ec>)
 8005584:	f001 fc90 	bl	8006ea8 <__assert_func>
 8005588:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800558c:	6005      	str	r5, [r0, #0]
 800558e:	60c5      	str	r5, [r0, #12]
 8005590:	69e3      	ldr	r3, [r4, #28]
 8005592:	6819      	ldr	r1, [r3, #0]
 8005594:	b151      	cbz	r1, 80055ac <_dtoa_r+0x5c>
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	604a      	str	r2, [r1, #4]
 800559a:	2301      	movs	r3, #1
 800559c:	4093      	lsls	r3, r2
 800559e:	608b      	str	r3, [r1, #8]
 80055a0:	4620      	mov	r0, r4
 80055a2:	f000 ff07 	bl	80063b4 <_Bfree>
 80055a6:	69e3      	ldr	r3, [r4, #28]
 80055a8:	2200      	movs	r2, #0
 80055aa:	601a      	str	r2, [r3, #0]
 80055ac:	1e3b      	subs	r3, r7, #0
 80055ae:	bfbb      	ittet	lt
 80055b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80055b4:	9303      	strlt	r3, [sp, #12]
 80055b6:	2300      	movge	r3, #0
 80055b8:	2201      	movlt	r2, #1
 80055ba:	bfac      	ite	ge
 80055bc:	f8c8 3000 	strge.w	r3, [r8]
 80055c0:	f8c8 2000 	strlt.w	r2, [r8]
 80055c4:	4b9e      	ldr	r3, [pc, #632]	; (8005840 <_dtoa_r+0x2f0>)
 80055c6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80055ca:	ea33 0308 	bics.w	r3, r3, r8
 80055ce:	d11b      	bne.n	8005608 <_dtoa_r+0xb8>
 80055d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80055d2:	f242 730f 	movw	r3, #9999	; 0x270f
 80055d6:	6013      	str	r3, [r2, #0]
 80055d8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80055dc:	4333      	orrs	r3, r6
 80055de:	f000 8593 	beq.w	8006108 <_dtoa_r+0xbb8>
 80055e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055e4:	b963      	cbnz	r3, 8005600 <_dtoa_r+0xb0>
 80055e6:	4b97      	ldr	r3, [pc, #604]	; (8005844 <_dtoa_r+0x2f4>)
 80055e8:	e027      	b.n	800563a <_dtoa_r+0xea>
 80055ea:	4b97      	ldr	r3, [pc, #604]	; (8005848 <_dtoa_r+0x2f8>)
 80055ec:	9300      	str	r3, [sp, #0]
 80055ee:	3308      	adds	r3, #8
 80055f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80055f2:	6013      	str	r3, [r2, #0]
 80055f4:	9800      	ldr	r0, [sp, #0]
 80055f6:	b013      	add	sp, #76	; 0x4c
 80055f8:	ecbd 8b04 	vpop	{d8-d9}
 80055fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005600:	4b90      	ldr	r3, [pc, #576]	; (8005844 <_dtoa_r+0x2f4>)
 8005602:	9300      	str	r3, [sp, #0]
 8005604:	3303      	adds	r3, #3
 8005606:	e7f3      	b.n	80055f0 <_dtoa_r+0xa0>
 8005608:	ed9d 7b02 	vldr	d7, [sp, #8]
 800560c:	2200      	movs	r2, #0
 800560e:	ec51 0b17 	vmov	r0, r1, d7
 8005612:	eeb0 8a47 	vmov.f32	s16, s14
 8005616:	eef0 8a67 	vmov.f32	s17, s15
 800561a:	2300      	movs	r3, #0
 800561c:	f7fb fa5c 	bl	8000ad8 <__aeabi_dcmpeq>
 8005620:	4681      	mov	r9, r0
 8005622:	b160      	cbz	r0, 800563e <_dtoa_r+0xee>
 8005624:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005626:	2301      	movs	r3, #1
 8005628:	6013      	str	r3, [r2, #0]
 800562a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 8568 	beq.w	8006102 <_dtoa_r+0xbb2>
 8005632:	4b86      	ldr	r3, [pc, #536]	; (800584c <_dtoa_r+0x2fc>)
 8005634:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005636:	6013      	str	r3, [r2, #0]
 8005638:	3b01      	subs	r3, #1
 800563a:	9300      	str	r3, [sp, #0]
 800563c:	e7da      	b.n	80055f4 <_dtoa_r+0xa4>
 800563e:	aa10      	add	r2, sp, #64	; 0x40
 8005640:	a911      	add	r1, sp, #68	; 0x44
 8005642:	4620      	mov	r0, r4
 8005644:	eeb0 0a48 	vmov.f32	s0, s16
 8005648:	eef0 0a68 	vmov.f32	s1, s17
 800564c:	f001 f994 	bl	8006978 <__d2b>
 8005650:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005654:	4682      	mov	sl, r0
 8005656:	2d00      	cmp	r5, #0
 8005658:	d07f      	beq.n	800575a <_dtoa_r+0x20a>
 800565a:	ee18 3a90 	vmov	r3, s17
 800565e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005662:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005666:	ec51 0b18 	vmov	r0, r1, d8
 800566a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800566e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005672:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005676:	4619      	mov	r1, r3
 8005678:	2200      	movs	r2, #0
 800567a:	4b75      	ldr	r3, [pc, #468]	; (8005850 <_dtoa_r+0x300>)
 800567c:	f7fa fe0c 	bl	8000298 <__aeabi_dsub>
 8005680:	a367      	add	r3, pc, #412	; (adr r3, 8005820 <_dtoa_r+0x2d0>)
 8005682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005686:	f7fa ffbf 	bl	8000608 <__aeabi_dmul>
 800568a:	a367      	add	r3, pc, #412	; (adr r3, 8005828 <_dtoa_r+0x2d8>)
 800568c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005690:	f7fa fe04 	bl	800029c <__adddf3>
 8005694:	4606      	mov	r6, r0
 8005696:	4628      	mov	r0, r5
 8005698:	460f      	mov	r7, r1
 800569a:	f7fa ff4b 	bl	8000534 <__aeabi_i2d>
 800569e:	a364      	add	r3, pc, #400	; (adr r3, 8005830 <_dtoa_r+0x2e0>)
 80056a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a4:	f7fa ffb0 	bl	8000608 <__aeabi_dmul>
 80056a8:	4602      	mov	r2, r0
 80056aa:	460b      	mov	r3, r1
 80056ac:	4630      	mov	r0, r6
 80056ae:	4639      	mov	r1, r7
 80056b0:	f7fa fdf4 	bl	800029c <__adddf3>
 80056b4:	4606      	mov	r6, r0
 80056b6:	460f      	mov	r7, r1
 80056b8:	f7fb fa56 	bl	8000b68 <__aeabi_d2iz>
 80056bc:	2200      	movs	r2, #0
 80056be:	4683      	mov	fp, r0
 80056c0:	2300      	movs	r3, #0
 80056c2:	4630      	mov	r0, r6
 80056c4:	4639      	mov	r1, r7
 80056c6:	f7fb fa11 	bl	8000aec <__aeabi_dcmplt>
 80056ca:	b148      	cbz	r0, 80056e0 <_dtoa_r+0x190>
 80056cc:	4658      	mov	r0, fp
 80056ce:	f7fa ff31 	bl	8000534 <__aeabi_i2d>
 80056d2:	4632      	mov	r2, r6
 80056d4:	463b      	mov	r3, r7
 80056d6:	f7fb f9ff 	bl	8000ad8 <__aeabi_dcmpeq>
 80056da:	b908      	cbnz	r0, 80056e0 <_dtoa_r+0x190>
 80056dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80056e0:	f1bb 0f16 	cmp.w	fp, #22
 80056e4:	d857      	bhi.n	8005796 <_dtoa_r+0x246>
 80056e6:	4b5b      	ldr	r3, [pc, #364]	; (8005854 <_dtoa_r+0x304>)
 80056e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80056ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f0:	ec51 0b18 	vmov	r0, r1, d8
 80056f4:	f7fb f9fa 	bl	8000aec <__aeabi_dcmplt>
 80056f8:	2800      	cmp	r0, #0
 80056fa:	d04e      	beq.n	800579a <_dtoa_r+0x24a>
 80056fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005700:	2300      	movs	r3, #0
 8005702:	930c      	str	r3, [sp, #48]	; 0x30
 8005704:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005706:	1b5b      	subs	r3, r3, r5
 8005708:	1e5a      	subs	r2, r3, #1
 800570a:	bf45      	ittet	mi
 800570c:	f1c3 0301 	rsbmi	r3, r3, #1
 8005710:	9305      	strmi	r3, [sp, #20]
 8005712:	2300      	movpl	r3, #0
 8005714:	2300      	movmi	r3, #0
 8005716:	9206      	str	r2, [sp, #24]
 8005718:	bf54      	ite	pl
 800571a:	9305      	strpl	r3, [sp, #20]
 800571c:	9306      	strmi	r3, [sp, #24]
 800571e:	f1bb 0f00 	cmp.w	fp, #0
 8005722:	db3c      	blt.n	800579e <_dtoa_r+0x24e>
 8005724:	9b06      	ldr	r3, [sp, #24]
 8005726:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800572a:	445b      	add	r3, fp
 800572c:	9306      	str	r3, [sp, #24]
 800572e:	2300      	movs	r3, #0
 8005730:	9308      	str	r3, [sp, #32]
 8005732:	9b07      	ldr	r3, [sp, #28]
 8005734:	2b09      	cmp	r3, #9
 8005736:	d868      	bhi.n	800580a <_dtoa_r+0x2ba>
 8005738:	2b05      	cmp	r3, #5
 800573a:	bfc4      	itt	gt
 800573c:	3b04      	subgt	r3, #4
 800573e:	9307      	strgt	r3, [sp, #28]
 8005740:	9b07      	ldr	r3, [sp, #28]
 8005742:	f1a3 0302 	sub.w	r3, r3, #2
 8005746:	bfcc      	ite	gt
 8005748:	2500      	movgt	r5, #0
 800574a:	2501      	movle	r5, #1
 800574c:	2b03      	cmp	r3, #3
 800574e:	f200 8085 	bhi.w	800585c <_dtoa_r+0x30c>
 8005752:	e8df f003 	tbb	[pc, r3]
 8005756:	3b2e      	.short	0x3b2e
 8005758:	5839      	.short	0x5839
 800575a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800575e:	441d      	add	r5, r3
 8005760:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005764:	2b20      	cmp	r3, #32
 8005766:	bfc1      	itttt	gt
 8005768:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800576c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005770:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005774:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005778:	bfd6      	itet	le
 800577a:	f1c3 0320 	rsble	r3, r3, #32
 800577e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005782:	fa06 f003 	lslle.w	r0, r6, r3
 8005786:	f7fa fec5 	bl	8000514 <__aeabi_ui2d>
 800578a:	2201      	movs	r2, #1
 800578c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005790:	3d01      	subs	r5, #1
 8005792:	920e      	str	r2, [sp, #56]	; 0x38
 8005794:	e76f      	b.n	8005676 <_dtoa_r+0x126>
 8005796:	2301      	movs	r3, #1
 8005798:	e7b3      	b.n	8005702 <_dtoa_r+0x1b2>
 800579a:	900c      	str	r0, [sp, #48]	; 0x30
 800579c:	e7b2      	b.n	8005704 <_dtoa_r+0x1b4>
 800579e:	9b05      	ldr	r3, [sp, #20]
 80057a0:	eba3 030b 	sub.w	r3, r3, fp
 80057a4:	9305      	str	r3, [sp, #20]
 80057a6:	f1cb 0300 	rsb	r3, fp, #0
 80057aa:	9308      	str	r3, [sp, #32]
 80057ac:	2300      	movs	r3, #0
 80057ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80057b0:	e7bf      	b.n	8005732 <_dtoa_r+0x1e2>
 80057b2:	2300      	movs	r3, #0
 80057b4:	9309      	str	r3, [sp, #36]	; 0x24
 80057b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	dc52      	bgt.n	8005862 <_dtoa_r+0x312>
 80057bc:	2301      	movs	r3, #1
 80057be:	9301      	str	r3, [sp, #4]
 80057c0:	9304      	str	r3, [sp, #16]
 80057c2:	461a      	mov	r2, r3
 80057c4:	920a      	str	r2, [sp, #40]	; 0x28
 80057c6:	e00b      	b.n	80057e0 <_dtoa_r+0x290>
 80057c8:	2301      	movs	r3, #1
 80057ca:	e7f3      	b.n	80057b4 <_dtoa_r+0x264>
 80057cc:	2300      	movs	r3, #0
 80057ce:	9309      	str	r3, [sp, #36]	; 0x24
 80057d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057d2:	445b      	add	r3, fp
 80057d4:	9301      	str	r3, [sp, #4]
 80057d6:	3301      	adds	r3, #1
 80057d8:	2b01      	cmp	r3, #1
 80057da:	9304      	str	r3, [sp, #16]
 80057dc:	bfb8      	it	lt
 80057de:	2301      	movlt	r3, #1
 80057e0:	69e0      	ldr	r0, [r4, #28]
 80057e2:	2100      	movs	r1, #0
 80057e4:	2204      	movs	r2, #4
 80057e6:	f102 0614 	add.w	r6, r2, #20
 80057ea:	429e      	cmp	r6, r3
 80057ec:	d93d      	bls.n	800586a <_dtoa_r+0x31a>
 80057ee:	6041      	str	r1, [r0, #4]
 80057f0:	4620      	mov	r0, r4
 80057f2:	f000 fd9f 	bl	8006334 <_Balloc>
 80057f6:	9000      	str	r0, [sp, #0]
 80057f8:	2800      	cmp	r0, #0
 80057fa:	d139      	bne.n	8005870 <_dtoa_r+0x320>
 80057fc:	4b16      	ldr	r3, [pc, #88]	; (8005858 <_dtoa_r+0x308>)
 80057fe:	4602      	mov	r2, r0
 8005800:	f240 11af 	movw	r1, #431	; 0x1af
 8005804:	e6bd      	b.n	8005582 <_dtoa_r+0x32>
 8005806:	2301      	movs	r3, #1
 8005808:	e7e1      	b.n	80057ce <_dtoa_r+0x27e>
 800580a:	2501      	movs	r5, #1
 800580c:	2300      	movs	r3, #0
 800580e:	9307      	str	r3, [sp, #28]
 8005810:	9509      	str	r5, [sp, #36]	; 0x24
 8005812:	f04f 33ff 	mov.w	r3, #4294967295
 8005816:	9301      	str	r3, [sp, #4]
 8005818:	9304      	str	r3, [sp, #16]
 800581a:	2200      	movs	r2, #0
 800581c:	2312      	movs	r3, #18
 800581e:	e7d1      	b.n	80057c4 <_dtoa_r+0x274>
 8005820:	636f4361 	.word	0x636f4361
 8005824:	3fd287a7 	.word	0x3fd287a7
 8005828:	8b60c8b3 	.word	0x8b60c8b3
 800582c:	3fc68a28 	.word	0x3fc68a28
 8005830:	509f79fb 	.word	0x509f79fb
 8005834:	3fd34413 	.word	0x3fd34413
 8005838:	08007891 	.word	0x08007891
 800583c:	080078a8 	.word	0x080078a8
 8005840:	7ff00000 	.word	0x7ff00000
 8005844:	0800788d 	.word	0x0800788d
 8005848:	08007884 	.word	0x08007884
 800584c:	08007861 	.word	0x08007861
 8005850:	3ff80000 	.word	0x3ff80000
 8005854:	08007998 	.word	0x08007998
 8005858:	08007900 	.word	0x08007900
 800585c:	2301      	movs	r3, #1
 800585e:	9309      	str	r3, [sp, #36]	; 0x24
 8005860:	e7d7      	b.n	8005812 <_dtoa_r+0x2c2>
 8005862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005864:	9301      	str	r3, [sp, #4]
 8005866:	9304      	str	r3, [sp, #16]
 8005868:	e7ba      	b.n	80057e0 <_dtoa_r+0x290>
 800586a:	3101      	adds	r1, #1
 800586c:	0052      	lsls	r2, r2, #1
 800586e:	e7ba      	b.n	80057e6 <_dtoa_r+0x296>
 8005870:	69e3      	ldr	r3, [r4, #28]
 8005872:	9a00      	ldr	r2, [sp, #0]
 8005874:	601a      	str	r2, [r3, #0]
 8005876:	9b04      	ldr	r3, [sp, #16]
 8005878:	2b0e      	cmp	r3, #14
 800587a:	f200 80a8 	bhi.w	80059ce <_dtoa_r+0x47e>
 800587e:	2d00      	cmp	r5, #0
 8005880:	f000 80a5 	beq.w	80059ce <_dtoa_r+0x47e>
 8005884:	f1bb 0f00 	cmp.w	fp, #0
 8005888:	dd38      	ble.n	80058fc <_dtoa_r+0x3ac>
 800588a:	4bc0      	ldr	r3, [pc, #768]	; (8005b8c <_dtoa_r+0x63c>)
 800588c:	f00b 020f 	and.w	r2, fp, #15
 8005890:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005894:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005898:	e9d3 6700 	ldrd	r6, r7, [r3]
 800589c:	ea4f 182b 	mov.w	r8, fp, asr #4
 80058a0:	d019      	beq.n	80058d6 <_dtoa_r+0x386>
 80058a2:	4bbb      	ldr	r3, [pc, #748]	; (8005b90 <_dtoa_r+0x640>)
 80058a4:	ec51 0b18 	vmov	r0, r1, d8
 80058a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80058ac:	f7fa ffd6 	bl	800085c <__aeabi_ddiv>
 80058b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058b4:	f008 080f 	and.w	r8, r8, #15
 80058b8:	2503      	movs	r5, #3
 80058ba:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005b90 <_dtoa_r+0x640>
 80058be:	f1b8 0f00 	cmp.w	r8, #0
 80058c2:	d10a      	bne.n	80058da <_dtoa_r+0x38a>
 80058c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058c8:	4632      	mov	r2, r6
 80058ca:	463b      	mov	r3, r7
 80058cc:	f7fa ffc6 	bl	800085c <__aeabi_ddiv>
 80058d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058d4:	e02b      	b.n	800592e <_dtoa_r+0x3de>
 80058d6:	2502      	movs	r5, #2
 80058d8:	e7ef      	b.n	80058ba <_dtoa_r+0x36a>
 80058da:	f018 0f01 	tst.w	r8, #1
 80058de:	d008      	beq.n	80058f2 <_dtoa_r+0x3a2>
 80058e0:	4630      	mov	r0, r6
 80058e2:	4639      	mov	r1, r7
 80058e4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80058e8:	f7fa fe8e 	bl	8000608 <__aeabi_dmul>
 80058ec:	3501      	adds	r5, #1
 80058ee:	4606      	mov	r6, r0
 80058f0:	460f      	mov	r7, r1
 80058f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80058f6:	f109 0908 	add.w	r9, r9, #8
 80058fa:	e7e0      	b.n	80058be <_dtoa_r+0x36e>
 80058fc:	f000 809f 	beq.w	8005a3e <_dtoa_r+0x4ee>
 8005900:	f1cb 0600 	rsb	r6, fp, #0
 8005904:	4ba1      	ldr	r3, [pc, #644]	; (8005b8c <_dtoa_r+0x63c>)
 8005906:	4fa2      	ldr	r7, [pc, #648]	; (8005b90 <_dtoa_r+0x640>)
 8005908:	f006 020f 	and.w	r2, r6, #15
 800590c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005914:	ec51 0b18 	vmov	r0, r1, d8
 8005918:	f7fa fe76 	bl	8000608 <__aeabi_dmul>
 800591c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005920:	1136      	asrs	r6, r6, #4
 8005922:	2300      	movs	r3, #0
 8005924:	2502      	movs	r5, #2
 8005926:	2e00      	cmp	r6, #0
 8005928:	d17e      	bne.n	8005a28 <_dtoa_r+0x4d8>
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1d0      	bne.n	80058d0 <_dtoa_r+0x380>
 800592e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005930:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005934:	2b00      	cmp	r3, #0
 8005936:	f000 8084 	beq.w	8005a42 <_dtoa_r+0x4f2>
 800593a:	4b96      	ldr	r3, [pc, #600]	; (8005b94 <_dtoa_r+0x644>)
 800593c:	2200      	movs	r2, #0
 800593e:	4640      	mov	r0, r8
 8005940:	4649      	mov	r1, r9
 8005942:	f7fb f8d3 	bl	8000aec <__aeabi_dcmplt>
 8005946:	2800      	cmp	r0, #0
 8005948:	d07b      	beq.n	8005a42 <_dtoa_r+0x4f2>
 800594a:	9b04      	ldr	r3, [sp, #16]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d078      	beq.n	8005a42 <_dtoa_r+0x4f2>
 8005950:	9b01      	ldr	r3, [sp, #4]
 8005952:	2b00      	cmp	r3, #0
 8005954:	dd39      	ble.n	80059ca <_dtoa_r+0x47a>
 8005956:	4b90      	ldr	r3, [pc, #576]	; (8005b98 <_dtoa_r+0x648>)
 8005958:	2200      	movs	r2, #0
 800595a:	4640      	mov	r0, r8
 800595c:	4649      	mov	r1, r9
 800595e:	f7fa fe53 	bl	8000608 <__aeabi_dmul>
 8005962:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005966:	9e01      	ldr	r6, [sp, #4]
 8005968:	f10b 37ff 	add.w	r7, fp, #4294967295
 800596c:	3501      	adds	r5, #1
 800596e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005972:	4628      	mov	r0, r5
 8005974:	f7fa fdde 	bl	8000534 <__aeabi_i2d>
 8005978:	4642      	mov	r2, r8
 800597a:	464b      	mov	r3, r9
 800597c:	f7fa fe44 	bl	8000608 <__aeabi_dmul>
 8005980:	4b86      	ldr	r3, [pc, #536]	; (8005b9c <_dtoa_r+0x64c>)
 8005982:	2200      	movs	r2, #0
 8005984:	f7fa fc8a 	bl	800029c <__adddf3>
 8005988:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800598c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005990:	9303      	str	r3, [sp, #12]
 8005992:	2e00      	cmp	r6, #0
 8005994:	d158      	bne.n	8005a48 <_dtoa_r+0x4f8>
 8005996:	4b82      	ldr	r3, [pc, #520]	; (8005ba0 <_dtoa_r+0x650>)
 8005998:	2200      	movs	r2, #0
 800599a:	4640      	mov	r0, r8
 800599c:	4649      	mov	r1, r9
 800599e:	f7fa fc7b 	bl	8000298 <__aeabi_dsub>
 80059a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80059a6:	4680      	mov	r8, r0
 80059a8:	4689      	mov	r9, r1
 80059aa:	f7fb f8bd 	bl	8000b28 <__aeabi_dcmpgt>
 80059ae:	2800      	cmp	r0, #0
 80059b0:	f040 8296 	bne.w	8005ee0 <_dtoa_r+0x990>
 80059b4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80059b8:	4640      	mov	r0, r8
 80059ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80059be:	4649      	mov	r1, r9
 80059c0:	f7fb f894 	bl	8000aec <__aeabi_dcmplt>
 80059c4:	2800      	cmp	r0, #0
 80059c6:	f040 8289 	bne.w	8005edc <_dtoa_r+0x98c>
 80059ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 80059ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	f2c0 814e 	blt.w	8005c72 <_dtoa_r+0x722>
 80059d6:	f1bb 0f0e 	cmp.w	fp, #14
 80059da:	f300 814a 	bgt.w	8005c72 <_dtoa_r+0x722>
 80059de:	4b6b      	ldr	r3, [pc, #428]	; (8005b8c <_dtoa_r+0x63c>)
 80059e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80059e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80059e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	f280 80dc 	bge.w	8005ba8 <_dtoa_r+0x658>
 80059f0:	9b04      	ldr	r3, [sp, #16]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f300 80d8 	bgt.w	8005ba8 <_dtoa_r+0x658>
 80059f8:	f040 826f 	bne.w	8005eda <_dtoa_r+0x98a>
 80059fc:	4b68      	ldr	r3, [pc, #416]	; (8005ba0 <_dtoa_r+0x650>)
 80059fe:	2200      	movs	r2, #0
 8005a00:	4640      	mov	r0, r8
 8005a02:	4649      	mov	r1, r9
 8005a04:	f7fa fe00 	bl	8000608 <__aeabi_dmul>
 8005a08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a0c:	f7fb f882 	bl	8000b14 <__aeabi_dcmpge>
 8005a10:	9e04      	ldr	r6, [sp, #16]
 8005a12:	4637      	mov	r7, r6
 8005a14:	2800      	cmp	r0, #0
 8005a16:	f040 8245 	bne.w	8005ea4 <_dtoa_r+0x954>
 8005a1a:	9d00      	ldr	r5, [sp, #0]
 8005a1c:	2331      	movs	r3, #49	; 0x31
 8005a1e:	f805 3b01 	strb.w	r3, [r5], #1
 8005a22:	f10b 0b01 	add.w	fp, fp, #1
 8005a26:	e241      	b.n	8005eac <_dtoa_r+0x95c>
 8005a28:	07f2      	lsls	r2, r6, #31
 8005a2a:	d505      	bpl.n	8005a38 <_dtoa_r+0x4e8>
 8005a2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a30:	f7fa fdea 	bl	8000608 <__aeabi_dmul>
 8005a34:	3501      	adds	r5, #1
 8005a36:	2301      	movs	r3, #1
 8005a38:	1076      	asrs	r6, r6, #1
 8005a3a:	3708      	adds	r7, #8
 8005a3c:	e773      	b.n	8005926 <_dtoa_r+0x3d6>
 8005a3e:	2502      	movs	r5, #2
 8005a40:	e775      	b.n	800592e <_dtoa_r+0x3de>
 8005a42:	9e04      	ldr	r6, [sp, #16]
 8005a44:	465f      	mov	r7, fp
 8005a46:	e792      	b.n	800596e <_dtoa_r+0x41e>
 8005a48:	9900      	ldr	r1, [sp, #0]
 8005a4a:	4b50      	ldr	r3, [pc, #320]	; (8005b8c <_dtoa_r+0x63c>)
 8005a4c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005a50:	4431      	add	r1, r6
 8005a52:	9102      	str	r1, [sp, #8]
 8005a54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a56:	eeb0 9a47 	vmov.f32	s18, s14
 8005a5a:	eef0 9a67 	vmov.f32	s19, s15
 8005a5e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005a62:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005a66:	2900      	cmp	r1, #0
 8005a68:	d044      	beq.n	8005af4 <_dtoa_r+0x5a4>
 8005a6a:	494e      	ldr	r1, [pc, #312]	; (8005ba4 <_dtoa_r+0x654>)
 8005a6c:	2000      	movs	r0, #0
 8005a6e:	f7fa fef5 	bl	800085c <__aeabi_ddiv>
 8005a72:	ec53 2b19 	vmov	r2, r3, d9
 8005a76:	f7fa fc0f 	bl	8000298 <__aeabi_dsub>
 8005a7a:	9d00      	ldr	r5, [sp, #0]
 8005a7c:	ec41 0b19 	vmov	d9, r0, r1
 8005a80:	4649      	mov	r1, r9
 8005a82:	4640      	mov	r0, r8
 8005a84:	f7fb f870 	bl	8000b68 <__aeabi_d2iz>
 8005a88:	4606      	mov	r6, r0
 8005a8a:	f7fa fd53 	bl	8000534 <__aeabi_i2d>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	460b      	mov	r3, r1
 8005a92:	4640      	mov	r0, r8
 8005a94:	4649      	mov	r1, r9
 8005a96:	f7fa fbff 	bl	8000298 <__aeabi_dsub>
 8005a9a:	3630      	adds	r6, #48	; 0x30
 8005a9c:	f805 6b01 	strb.w	r6, [r5], #1
 8005aa0:	ec53 2b19 	vmov	r2, r3, d9
 8005aa4:	4680      	mov	r8, r0
 8005aa6:	4689      	mov	r9, r1
 8005aa8:	f7fb f820 	bl	8000aec <__aeabi_dcmplt>
 8005aac:	2800      	cmp	r0, #0
 8005aae:	d164      	bne.n	8005b7a <_dtoa_r+0x62a>
 8005ab0:	4642      	mov	r2, r8
 8005ab2:	464b      	mov	r3, r9
 8005ab4:	4937      	ldr	r1, [pc, #220]	; (8005b94 <_dtoa_r+0x644>)
 8005ab6:	2000      	movs	r0, #0
 8005ab8:	f7fa fbee 	bl	8000298 <__aeabi_dsub>
 8005abc:	ec53 2b19 	vmov	r2, r3, d9
 8005ac0:	f7fb f814 	bl	8000aec <__aeabi_dcmplt>
 8005ac4:	2800      	cmp	r0, #0
 8005ac6:	f040 80b6 	bne.w	8005c36 <_dtoa_r+0x6e6>
 8005aca:	9b02      	ldr	r3, [sp, #8]
 8005acc:	429d      	cmp	r5, r3
 8005ace:	f43f af7c 	beq.w	80059ca <_dtoa_r+0x47a>
 8005ad2:	4b31      	ldr	r3, [pc, #196]	; (8005b98 <_dtoa_r+0x648>)
 8005ad4:	ec51 0b19 	vmov	r0, r1, d9
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f7fa fd95 	bl	8000608 <__aeabi_dmul>
 8005ade:	4b2e      	ldr	r3, [pc, #184]	; (8005b98 <_dtoa_r+0x648>)
 8005ae0:	ec41 0b19 	vmov	d9, r0, r1
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	4640      	mov	r0, r8
 8005ae8:	4649      	mov	r1, r9
 8005aea:	f7fa fd8d 	bl	8000608 <__aeabi_dmul>
 8005aee:	4680      	mov	r8, r0
 8005af0:	4689      	mov	r9, r1
 8005af2:	e7c5      	b.n	8005a80 <_dtoa_r+0x530>
 8005af4:	ec51 0b17 	vmov	r0, r1, d7
 8005af8:	f7fa fd86 	bl	8000608 <__aeabi_dmul>
 8005afc:	9b02      	ldr	r3, [sp, #8]
 8005afe:	9d00      	ldr	r5, [sp, #0]
 8005b00:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b02:	ec41 0b19 	vmov	d9, r0, r1
 8005b06:	4649      	mov	r1, r9
 8005b08:	4640      	mov	r0, r8
 8005b0a:	f7fb f82d 	bl	8000b68 <__aeabi_d2iz>
 8005b0e:	4606      	mov	r6, r0
 8005b10:	f7fa fd10 	bl	8000534 <__aeabi_i2d>
 8005b14:	3630      	adds	r6, #48	; 0x30
 8005b16:	4602      	mov	r2, r0
 8005b18:	460b      	mov	r3, r1
 8005b1a:	4640      	mov	r0, r8
 8005b1c:	4649      	mov	r1, r9
 8005b1e:	f7fa fbbb 	bl	8000298 <__aeabi_dsub>
 8005b22:	f805 6b01 	strb.w	r6, [r5], #1
 8005b26:	9b02      	ldr	r3, [sp, #8]
 8005b28:	429d      	cmp	r5, r3
 8005b2a:	4680      	mov	r8, r0
 8005b2c:	4689      	mov	r9, r1
 8005b2e:	f04f 0200 	mov.w	r2, #0
 8005b32:	d124      	bne.n	8005b7e <_dtoa_r+0x62e>
 8005b34:	4b1b      	ldr	r3, [pc, #108]	; (8005ba4 <_dtoa_r+0x654>)
 8005b36:	ec51 0b19 	vmov	r0, r1, d9
 8005b3a:	f7fa fbaf 	bl	800029c <__adddf3>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	460b      	mov	r3, r1
 8005b42:	4640      	mov	r0, r8
 8005b44:	4649      	mov	r1, r9
 8005b46:	f7fa ffef 	bl	8000b28 <__aeabi_dcmpgt>
 8005b4a:	2800      	cmp	r0, #0
 8005b4c:	d173      	bne.n	8005c36 <_dtoa_r+0x6e6>
 8005b4e:	ec53 2b19 	vmov	r2, r3, d9
 8005b52:	4914      	ldr	r1, [pc, #80]	; (8005ba4 <_dtoa_r+0x654>)
 8005b54:	2000      	movs	r0, #0
 8005b56:	f7fa fb9f 	bl	8000298 <__aeabi_dsub>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	4640      	mov	r0, r8
 8005b60:	4649      	mov	r1, r9
 8005b62:	f7fa ffc3 	bl	8000aec <__aeabi_dcmplt>
 8005b66:	2800      	cmp	r0, #0
 8005b68:	f43f af2f 	beq.w	80059ca <_dtoa_r+0x47a>
 8005b6c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005b6e:	1e6b      	subs	r3, r5, #1
 8005b70:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b72:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005b76:	2b30      	cmp	r3, #48	; 0x30
 8005b78:	d0f8      	beq.n	8005b6c <_dtoa_r+0x61c>
 8005b7a:	46bb      	mov	fp, r7
 8005b7c:	e04a      	b.n	8005c14 <_dtoa_r+0x6c4>
 8005b7e:	4b06      	ldr	r3, [pc, #24]	; (8005b98 <_dtoa_r+0x648>)
 8005b80:	f7fa fd42 	bl	8000608 <__aeabi_dmul>
 8005b84:	4680      	mov	r8, r0
 8005b86:	4689      	mov	r9, r1
 8005b88:	e7bd      	b.n	8005b06 <_dtoa_r+0x5b6>
 8005b8a:	bf00      	nop
 8005b8c:	08007998 	.word	0x08007998
 8005b90:	08007970 	.word	0x08007970
 8005b94:	3ff00000 	.word	0x3ff00000
 8005b98:	40240000 	.word	0x40240000
 8005b9c:	401c0000 	.word	0x401c0000
 8005ba0:	40140000 	.word	0x40140000
 8005ba4:	3fe00000 	.word	0x3fe00000
 8005ba8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005bac:	9d00      	ldr	r5, [sp, #0]
 8005bae:	4642      	mov	r2, r8
 8005bb0:	464b      	mov	r3, r9
 8005bb2:	4630      	mov	r0, r6
 8005bb4:	4639      	mov	r1, r7
 8005bb6:	f7fa fe51 	bl	800085c <__aeabi_ddiv>
 8005bba:	f7fa ffd5 	bl	8000b68 <__aeabi_d2iz>
 8005bbe:	9001      	str	r0, [sp, #4]
 8005bc0:	f7fa fcb8 	bl	8000534 <__aeabi_i2d>
 8005bc4:	4642      	mov	r2, r8
 8005bc6:	464b      	mov	r3, r9
 8005bc8:	f7fa fd1e 	bl	8000608 <__aeabi_dmul>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	460b      	mov	r3, r1
 8005bd0:	4630      	mov	r0, r6
 8005bd2:	4639      	mov	r1, r7
 8005bd4:	f7fa fb60 	bl	8000298 <__aeabi_dsub>
 8005bd8:	9e01      	ldr	r6, [sp, #4]
 8005bda:	9f04      	ldr	r7, [sp, #16]
 8005bdc:	3630      	adds	r6, #48	; 0x30
 8005bde:	f805 6b01 	strb.w	r6, [r5], #1
 8005be2:	9e00      	ldr	r6, [sp, #0]
 8005be4:	1bae      	subs	r6, r5, r6
 8005be6:	42b7      	cmp	r7, r6
 8005be8:	4602      	mov	r2, r0
 8005bea:	460b      	mov	r3, r1
 8005bec:	d134      	bne.n	8005c58 <_dtoa_r+0x708>
 8005bee:	f7fa fb55 	bl	800029c <__adddf3>
 8005bf2:	4642      	mov	r2, r8
 8005bf4:	464b      	mov	r3, r9
 8005bf6:	4606      	mov	r6, r0
 8005bf8:	460f      	mov	r7, r1
 8005bfa:	f7fa ff95 	bl	8000b28 <__aeabi_dcmpgt>
 8005bfe:	b9c8      	cbnz	r0, 8005c34 <_dtoa_r+0x6e4>
 8005c00:	4642      	mov	r2, r8
 8005c02:	464b      	mov	r3, r9
 8005c04:	4630      	mov	r0, r6
 8005c06:	4639      	mov	r1, r7
 8005c08:	f7fa ff66 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c0c:	b110      	cbz	r0, 8005c14 <_dtoa_r+0x6c4>
 8005c0e:	9b01      	ldr	r3, [sp, #4]
 8005c10:	07db      	lsls	r3, r3, #31
 8005c12:	d40f      	bmi.n	8005c34 <_dtoa_r+0x6e4>
 8005c14:	4651      	mov	r1, sl
 8005c16:	4620      	mov	r0, r4
 8005c18:	f000 fbcc 	bl	80063b4 <_Bfree>
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c20:	702b      	strb	r3, [r5, #0]
 8005c22:	f10b 0301 	add.w	r3, fp, #1
 8005c26:	6013      	str	r3, [r2, #0]
 8005c28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f43f ace2 	beq.w	80055f4 <_dtoa_r+0xa4>
 8005c30:	601d      	str	r5, [r3, #0]
 8005c32:	e4df      	b.n	80055f4 <_dtoa_r+0xa4>
 8005c34:	465f      	mov	r7, fp
 8005c36:	462b      	mov	r3, r5
 8005c38:	461d      	mov	r5, r3
 8005c3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005c3e:	2a39      	cmp	r2, #57	; 0x39
 8005c40:	d106      	bne.n	8005c50 <_dtoa_r+0x700>
 8005c42:	9a00      	ldr	r2, [sp, #0]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d1f7      	bne.n	8005c38 <_dtoa_r+0x6e8>
 8005c48:	9900      	ldr	r1, [sp, #0]
 8005c4a:	2230      	movs	r2, #48	; 0x30
 8005c4c:	3701      	adds	r7, #1
 8005c4e:	700a      	strb	r2, [r1, #0]
 8005c50:	781a      	ldrb	r2, [r3, #0]
 8005c52:	3201      	adds	r2, #1
 8005c54:	701a      	strb	r2, [r3, #0]
 8005c56:	e790      	b.n	8005b7a <_dtoa_r+0x62a>
 8005c58:	4ba3      	ldr	r3, [pc, #652]	; (8005ee8 <_dtoa_r+0x998>)
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f7fa fcd4 	bl	8000608 <__aeabi_dmul>
 8005c60:	2200      	movs	r2, #0
 8005c62:	2300      	movs	r3, #0
 8005c64:	4606      	mov	r6, r0
 8005c66:	460f      	mov	r7, r1
 8005c68:	f7fa ff36 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c6c:	2800      	cmp	r0, #0
 8005c6e:	d09e      	beq.n	8005bae <_dtoa_r+0x65e>
 8005c70:	e7d0      	b.n	8005c14 <_dtoa_r+0x6c4>
 8005c72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c74:	2a00      	cmp	r2, #0
 8005c76:	f000 80ca 	beq.w	8005e0e <_dtoa_r+0x8be>
 8005c7a:	9a07      	ldr	r2, [sp, #28]
 8005c7c:	2a01      	cmp	r2, #1
 8005c7e:	f300 80ad 	bgt.w	8005ddc <_dtoa_r+0x88c>
 8005c82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c84:	2a00      	cmp	r2, #0
 8005c86:	f000 80a5 	beq.w	8005dd4 <_dtoa_r+0x884>
 8005c8a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005c8e:	9e08      	ldr	r6, [sp, #32]
 8005c90:	9d05      	ldr	r5, [sp, #20]
 8005c92:	9a05      	ldr	r2, [sp, #20]
 8005c94:	441a      	add	r2, r3
 8005c96:	9205      	str	r2, [sp, #20]
 8005c98:	9a06      	ldr	r2, [sp, #24]
 8005c9a:	2101      	movs	r1, #1
 8005c9c:	441a      	add	r2, r3
 8005c9e:	4620      	mov	r0, r4
 8005ca0:	9206      	str	r2, [sp, #24]
 8005ca2:	f000 fc3d 	bl	8006520 <__i2b>
 8005ca6:	4607      	mov	r7, r0
 8005ca8:	b165      	cbz	r5, 8005cc4 <_dtoa_r+0x774>
 8005caa:	9b06      	ldr	r3, [sp, #24]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	dd09      	ble.n	8005cc4 <_dtoa_r+0x774>
 8005cb0:	42ab      	cmp	r3, r5
 8005cb2:	9a05      	ldr	r2, [sp, #20]
 8005cb4:	bfa8      	it	ge
 8005cb6:	462b      	movge	r3, r5
 8005cb8:	1ad2      	subs	r2, r2, r3
 8005cba:	9205      	str	r2, [sp, #20]
 8005cbc:	9a06      	ldr	r2, [sp, #24]
 8005cbe:	1aed      	subs	r5, r5, r3
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	9306      	str	r3, [sp, #24]
 8005cc4:	9b08      	ldr	r3, [sp, #32]
 8005cc6:	b1f3      	cbz	r3, 8005d06 <_dtoa_r+0x7b6>
 8005cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f000 80a3 	beq.w	8005e16 <_dtoa_r+0x8c6>
 8005cd0:	2e00      	cmp	r6, #0
 8005cd2:	dd10      	ble.n	8005cf6 <_dtoa_r+0x7a6>
 8005cd4:	4639      	mov	r1, r7
 8005cd6:	4632      	mov	r2, r6
 8005cd8:	4620      	mov	r0, r4
 8005cda:	f000 fce1 	bl	80066a0 <__pow5mult>
 8005cde:	4652      	mov	r2, sl
 8005ce0:	4601      	mov	r1, r0
 8005ce2:	4607      	mov	r7, r0
 8005ce4:	4620      	mov	r0, r4
 8005ce6:	f000 fc31 	bl	800654c <__multiply>
 8005cea:	4651      	mov	r1, sl
 8005cec:	4680      	mov	r8, r0
 8005cee:	4620      	mov	r0, r4
 8005cf0:	f000 fb60 	bl	80063b4 <_Bfree>
 8005cf4:	46c2      	mov	sl, r8
 8005cf6:	9b08      	ldr	r3, [sp, #32]
 8005cf8:	1b9a      	subs	r2, r3, r6
 8005cfa:	d004      	beq.n	8005d06 <_dtoa_r+0x7b6>
 8005cfc:	4651      	mov	r1, sl
 8005cfe:	4620      	mov	r0, r4
 8005d00:	f000 fcce 	bl	80066a0 <__pow5mult>
 8005d04:	4682      	mov	sl, r0
 8005d06:	2101      	movs	r1, #1
 8005d08:	4620      	mov	r0, r4
 8005d0a:	f000 fc09 	bl	8006520 <__i2b>
 8005d0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	4606      	mov	r6, r0
 8005d14:	f340 8081 	ble.w	8005e1a <_dtoa_r+0x8ca>
 8005d18:	461a      	mov	r2, r3
 8005d1a:	4601      	mov	r1, r0
 8005d1c:	4620      	mov	r0, r4
 8005d1e:	f000 fcbf 	bl	80066a0 <__pow5mult>
 8005d22:	9b07      	ldr	r3, [sp, #28]
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	4606      	mov	r6, r0
 8005d28:	dd7a      	ble.n	8005e20 <_dtoa_r+0x8d0>
 8005d2a:	f04f 0800 	mov.w	r8, #0
 8005d2e:	6933      	ldr	r3, [r6, #16]
 8005d30:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005d34:	6918      	ldr	r0, [r3, #16]
 8005d36:	f000 fba5 	bl	8006484 <__hi0bits>
 8005d3a:	f1c0 0020 	rsb	r0, r0, #32
 8005d3e:	9b06      	ldr	r3, [sp, #24]
 8005d40:	4418      	add	r0, r3
 8005d42:	f010 001f 	ands.w	r0, r0, #31
 8005d46:	f000 8094 	beq.w	8005e72 <_dtoa_r+0x922>
 8005d4a:	f1c0 0320 	rsb	r3, r0, #32
 8005d4e:	2b04      	cmp	r3, #4
 8005d50:	f340 8085 	ble.w	8005e5e <_dtoa_r+0x90e>
 8005d54:	9b05      	ldr	r3, [sp, #20]
 8005d56:	f1c0 001c 	rsb	r0, r0, #28
 8005d5a:	4403      	add	r3, r0
 8005d5c:	9305      	str	r3, [sp, #20]
 8005d5e:	9b06      	ldr	r3, [sp, #24]
 8005d60:	4403      	add	r3, r0
 8005d62:	4405      	add	r5, r0
 8005d64:	9306      	str	r3, [sp, #24]
 8005d66:	9b05      	ldr	r3, [sp, #20]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	dd05      	ble.n	8005d78 <_dtoa_r+0x828>
 8005d6c:	4651      	mov	r1, sl
 8005d6e:	461a      	mov	r2, r3
 8005d70:	4620      	mov	r0, r4
 8005d72:	f000 fcef 	bl	8006754 <__lshift>
 8005d76:	4682      	mov	sl, r0
 8005d78:	9b06      	ldr	r3, [sp, #24]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	dd05      	ble.n	8005d8a <_dtoa_r+0x83a>
 8005d7e:	4631      	mov	r1, r6
 8005d80:	461a      	mov	r2, r3
 8005d82:	4620      	mov	r0, r4
 8005d84:	f000 fce6 	bl	8006754 <__lshift>
 8005d88:	4606      	mov	r6, r0
 8005d8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d072      	beq.n	8005e76 <_dtoa_r+0x926>
 8005d90:	4631      	mov	r1, r6
 8005d92:	4650      	mov	r0, sl
 8005d94:	f000 fd4a 	bl	800682c <__mcmp>
 8005d98:	2800      	cmp	r0, #0
 8005d9a:	da6c      	bge.n	8005e76 <_dtoa_r+0x926>
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	4651      	mov	r1, sl
 8005da0:	220a      	movs	r2, #10
 8005da2:	4620      	mov	r0, r4
 8005da4:	f000 fb28 	bl	80063f8 <__multadd>
 8005da8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005daa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005dae:	4682      	mov	sl, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f000 81b0 	beq.w	8006116 <_dtoa_r+0xbc6>
 8005db6:	2300      	movs	r3, #0
 8005db8:	4639      	mov	r1, r7
 8005dba:	220a      	movs	r2, #10
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	f000 fb1b 	bl	80063f8 <__multadd>
 8005dc2:	9b01      	ldr	r3, [sp, #4]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	4607      	mov	r7, r0
 8005dc8:	f300 8096 	bgt.w	8005ef8 <_dtoa_r+0x9a8>
 8005dcc:	9b07      	ldr	r3, [sp, #28]
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	dc59      	bgt.n	8005e86 <_dtoa_r+0x936>
 8005dd2:	e091      	b.n	8005ef8 <_dtoa_r+0x9a8>
 8005dd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005dd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005dda:	e758      	b.n	8005c8e <_dtoa_r+0x73e>
 8005ddc:	9b04      	ldr	r3, [sp, #16]
 8005dde:	1e5e      	subs	r6, r3, #1
 8005de0:	9b08      	ldr	r3, [sp, #32]
 8005de2:	42b3      	cmp	r3, r6
 8005de4:	bfbf      	itttt	lt
 8005de6:	9b08      	ldrlt	r3, [sp, #32]
 8005de8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8005dea:	9608      	strlt	r6, [sp, #32]
 8005dec:	1af3      	sublt	r3, r6, r3
 8005dee:	bfb4      	ite	lt
 8005df0:	18d2      	addlt	r2, r2, r3
 8005df2:	1b9e      	subge	r6, r3, r6
 8005df4:	9b04      	ldr	r3, [sp, #16]
 8005df6:	bfbc      	itt	lt
 8005df8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8005dfa:	2600      	movlt	r6, #0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	bfb7      	itett	lt
 8005e00:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8005e04:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005e08:	1a9d      	sublt	r5, r3, r2
 8005e0a:	2300      	movlt	r3, #0
 8005e0c:	e741      	b.n	8005c92 <_dtoa_r+0x742>
 8005e0e:	9e08      	ldr	r6, [sp, #32]
 8005e10:	9d05      	ldr	r5, [sp, #20]
 8005e12:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005e14:	e748      	b.n	8005ca8 <_dtoa_r+0x758>
 8005e16:	9a08      	ldr	r2, [sp, #32]
 8005e18:	e770      	b.n	8005cfc <_dtoa_r+0x7ac>
 8005e1a:	9b07      	ldr	r3, [sp, #28]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	dc19      	bgt.n	8005e54 <_dtoa_r+0x904>
 8005e20:	9b02      	ldr	r3, [sp, #8]
 8005e22:	b9bb      	cbnz	r3, 8005e54 <_dtoa_r+0x904>
 8005e24:	9b03      	ldr	r3, [sp, #12]
 8005e26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e2a:	b99b      	cbnz	r3, 8005e54 <_dtoa_r+0x904>
 8005e2c:	9b03      	ldr	r3, [sp, #12]
 8005e2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e32:	0d1b      	lsrs	r3, r3, #20
 8005e34:	051b      	lsls	r3, r3, #20
 8005e36:	b183      	cbz	r3, 8005e5a <_dtoa_r+0x90a>
 8005e38:	9b05      	ldr	r3, [sp, #20]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	9305      	str	r3, [sp, #20]
 8005e3e:	9b06      	ldr	r3, [sp, #24]
 8005e40:	3301      	adds	r3, #1
 8005e42:	9306      	str	r3, [sp, #24]
 8005e44:	f04f 0801 	mov.w	r8, #1
 8005e48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	f47f af6f 	bne.w	8005d2e <_dtoa_r+0x7de>
 8005e50:	2001      	movs	r0, #1
 8005e52:	e774      	b.n	8005d3e <_dtoa_r+0x7ee>
 8005e54:	f04f 0800 	mov.w	r8, #0
 8005e58:	e7f6      	b.n	8005e48 <_dtoa_r+0x8f8>
 8005e5a:	4698      	mov	r8, r3
 8005e5c:	e7f4      	b.n	8005e48 <_dtoa_r+0x8f8>
 8005e5e:	d082      	beq.n	8005d66 <_dtoa_r+0x816>
 8005e60:	9a05      	ldr	r2, [sp, #20]
 8005e62:	331c      	adds	r3, #28
 8005e64:	441a      	add	r2, r3
 8005e66:	9205      	str	r2, [sp, #20]
 8005e68:	9a06      	ldr	r2, [sp, #24]
 8005e6a:	441a      	add	r2, r3
 8005e6c:	441d      	add	r5, r3
 8005e6e:	9206      	str	r2, [sp, #24]
 8005e70:	e779      	b.n	8005d66 <_dtoa_r+0x816>
 8005e72:	4603      	mov	r3, r0
 8005e74:	e7f4      	b.n	8005e60 <_dtoa_r+0x910>
 8005e76:	9b04      	ldr	r3, [sp, #16]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	dc37      	bgt.n	8005eec <_dtoa_r+0x99c>
 8005e7c:	9b07      	ldr	r3, [sp, #28]
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	dd34      	ble.n	8005eec <_dtoa_r+0x99c>
 8005e82:	9b04      	ldr	r3, [sp, #16]
 8005e84:	9301      	str	r3, [sp, #4]
 8005e86:	9b01      	ldr	r3, [sp, #4]
 8005e88:	b963      	cbnz	r3, 8005ea4 <_dtoa_r+0x954>
 8005e8a:	4631      	mov	r1, r6
 8005e8c:	2205      	movs	r2, #5
 8005e8e:	4620      	mov	r0, r4
 8005e90:	f000 fab2 	bl	80063f8 <__multadd>
 8005e94:	4601      	mov	r1, r0
 8005e96:	4606      	mov	r6, r0
 8005e98:	4650      	mov	r0, sl
 8005e9a:	f000 fcc7 	bl	800682c <__mcmp>
 8005e9e:	2800      	cmp	r0, #0
 8005ea0:	f73f adbb 	bgt.w	8005a1a <_dtoa_r+0x4ca>
 8005ea4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ea6:	9d00      	ldr	r5, [sp, #0]
 8005ea8:	ea6f 0b03 	mvn.w	fp, r3
 8005eac:	f04f 0800 	mov.w	r8, #0
 8005eb0:	4631      	mov	r1, r6
 8005eb2:	4620      	mov	r0, r4
 8005eb4:	f000 fa7e 	bl	80063b4 <_Bfree>
 8005eb8:	2f00      	cmp	r7, #0
 8005eba:	f43f aeab 	beq.w	8005c14 <_dtoa_r+0x6c4>
 8005ebe:	f1b8 0f00 	cmp.w	r8, #0
 8005ec2:	d005      	beq.n	8005ed0 <_dtoa_r+0x980>
 8005ec4:	45b8      	cmp	r8, r7
 8005ec6:	d003      	beq.n	8005ed0 <_dtoa_r+0x980>
 8005ec8:	4641      	mov	r1, r8
 8005eca:	4620      	mov	r0, r4
 8005ecc:	f000 fa72 	bl	80063b4 <_Bfree>
 8005ed0:	4639      	mov	r1, r7
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	f000 fa6e 	bl	80063b4 <_Bfree>
 8005ed8:	e69c      	b.n	8005c14 <_dtoa_r+0x6c4>
 8005eda:	2600      	movs	r6, #0
 8005edc:	4637      	mov	r7, r6
 8005ede:	e7e1      	b.n	8005ea4 <_dtoa_r+0x954>
 8005ee0:	46bb      	mov	fp, r7
 8005ee2:	4637      	mov	r7, r6
 8005ee4:	e599      	b.n	8005a1a <_dtoa_r+0x4ca>
 8005ee6:	bf00      	nop
 8005ee8:	40240000 	.word	0x40240000
 8005eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f000 80c8 	beq.w	8006084 <_dtoa_r+0xb34>
 8005ef4:	9b04      	ldr	r3, [sp, #16]
 8005ef6:	9301      	str	r3, [sp, #4]
 8005ef8:	2d00      	cmp	r5, #0
 8005efa:	dd05      	ble.n	8005f08 <_dtoa_r+0x9b8>
 8005efc:	4639      	mov	r1, r7
 8005efe:	462a      	mov	r2, r5
 8005f00:	4620      	mov	r0, r4
 8005f02:	f000 fc27 	bl	8006754 <__lshift>
 8005f06:	4607      	mov	r7, r0
 8005f08:	f1b8 0f00 	cmp.w	r8, #0
 8005f0c:	d05b      	beq.n	8005fc6 <_dtoa_r+0xa76>
 8005f0e:	6879      	ldr	r1, [r7, #4]
 8005f10:	4620      	mov	r0, r4
 8005f12:	f000 fa0f 	bl	8006334 <_Balloc>
 8005f16:	4605      	mov	r5, r0
 8005f18:	b928      	cbnz	r0, 8005f26 <_dtoa_r+0x9d6>
 8005f1a:	4b83      	ldr	r3, [pc, #524]	; (8006128 <_dtoa_r+0xbd8>)
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005f22:	f7ff bb2e 	b.w	8005582 <_dtoa_r+0x32>
 8005f26:	693a      	ldr	r2, [r7, #16]
 8005f28:	3202      	adds	r2, #2
 8005f2a:	0092      	lsls	r2, r2, #2
 8005f2c:	f107 010c 	add.w	r1, r7, #12
 8005f30:	300c      	adds	r0, #12
 8005f32:	f000 ffab 	bl	8006e8c <memcpy>
 8005f36:	2201      	movs	r2, #1
 8005f38:	4629      	mov	r1, r5
 8005f3a:	4620      	mov	r0, r4
 8005f3c:	f000 fc0a 	bl	8006754 <__lshift>
 8005f40:	9b00      	ldr	r3, [sp, #0]
 8005f42:	3301      	adds	r3, #1
 8005f44:	9304      	str	r3, [sp, #16]
 8005f46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	9308      	str	r3, [sp, #32]
 8005f4e:	9b02      	ldr	r3, [sp, #8]
 8005f50:	f003 0301 	and.w	r3, r3, #1
 8005f54:	46b8      	mov	r8, r7
 8005f56:	9306      	str	r3, [sp, #24]
 8005f58:	4607      	mov	r7, r0
 8005f5a:	9b04      	ldr	r3, [sp, #16]
 8005f5c:	4631      	mov	r1, r6
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	4650      	mov	r0, sl
 8005f62:	9301      	str	r3, [sp, #4]
 8005f64:	f7ff fa6b 	bl	800543e <quorem>
 8005f68:	4641      	mov	r1, r8
 8005f6a:	9002      	str	r0, [sp, #8]
 8005f6c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005f70:	4650      	mov	r0, sl
 8005f72:	f000 fc5b 	bl	800682c <__mcmp>
 8005f76:	463a      	mov	r2, r7
 8005f78:	9005      	str	r0, [sp, #20]
 8005f7a:	4631      	mov	r1, r6
 8005f7c:	4620      	mov	r0, r4
 8005f7e:	f000 fc71 	bl	8006864 <__mdiff>
 8005f82:	68c2      	ldr	r2, [r0, #12]
 8005f84:	4605      	mov	r5, r0
 8005f86:	bb02      	cbnz	r2, 8005fca <_dtoa_r+0xa7a>
 8005f88:	4601      	mov	r1, r0
 8005f8a:	4650      	mov	r0, sl
 8005f8c:	f000 fc4e 	bl	800682c <__mcmp>
 8005f90:	4602      	mov	r2, r0
 8005f92:	4629      	mov	r1, r5
 8005f94:	4620      	mov	r0, r4
 8005f96:	9209      	str	r2, [sp, #36]	; 0x24
 8005f98:	f000 fa0c 	bl	80063b4 <_Bfree>
 8005f9c:	9b07      	ldr	r3, [sp, #28]
 8005f9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fa0:	9d04      	ldr	r5, [sp, #16]
 8005fa2:	ea43 0102 	orr.w	r1, r3, r2
 8005fa6:	9b06      	ldr	r3, [sp, #24]
 8005fa8:	4319      	orrs	r1, r3
 8005faa:	d110      	bne.n	8005fce <_dtoa_r+0xa7e>
 8005fac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005fb0:	d029      	beq.n	8006006 <_dtoa_r+0xab6>
 8005fb2:	9b05      	ldr	r3, [sp, #20]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	dd02      	ble.n	8005fbe <_dtoa_r+0xa6e>
 8005fb8:	9b02      	ldr	r3, [sp, #8]
 8005fba:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005fbe:	9b01      	ldr	r3, [sp, #4]
 8005fc0:	f883 9000 	strb.w	r9, [r3]
 8005fc4:	e774      	b.n	8005eb0 <_dtoa_r+0x960>
 8005fc6:	4638      	mov	r0, r7
 8005fc8:	e7ba      	b.n	8005f40 <_dtoa_r+0x9f0>
 8005fca:	2201      	movs	r2, #1
 8005fcc:	e7e1      	b.n	8005f92 <_dtoa_r+0xa42>
 8005fce:	9b05      	ldr	r3, [sp, #20]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	db04      	blt.n	8005fde <_dtoa_r+0xa8e>
 8005fd4:	9907      	ldr	r1, [sp, #28]
 8005fd6:	430b      	orrs	r3, r1
 8005fd8:	9906      	ldr	r1, [sp, #24]
 8005fda:	430b      	orrs	r3, r1
 8005fdc:	d120      	bne.n	8006020 <_dtoa_r+0xad0>
 8005fde:	2a00      	cmp	r2, #0
 8005fe0:	dded      	ble.n	8005fbe <_dtoa_r+0xa6e>
 8005fe2:	4651      	mov	r1, sl
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	4620      	mov	r0, r4
 8005fe8:	f000 fbb4 	bl	8006754 <__lshift>
 8005fec:	4631      	mov	r1, r6
 8005fee:	4682      	mov	sl, r0
 8005ff0:	f000 fc1c 	bl	800682c <__mcmp>
 8005ff4:	2800      	cmp	r0, #0
 8005ff6:	dc03      	bgt.n	8006000 <_dtoa_r+0xab0>
 8005ff8:	d1e1      	bne.n	8005fbe <_dtoa_r+0xa6e>
 8005ffa:	f019 0f01 	tst.w	r9, #1
 8005ffe:	d0de      	beq.n	8005fbe <_dtoa_r+0xa6e>
 8006000:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006004:	d1d8      	bne.n	8005fb8 <_dtoa_r+0xa68>
 8006006:	9a01      	ldr	r2, [sp, #4]
 8006008:	2339      	movs	r3, #57	; 0x39
 800600a:	7013      	strb	r3, [r2, #0]
 800600c:	462b      	mov	r3, r5
 800600e:	461d      	mov	r5, r3
 8006010:	3b01      	subs	r3, #1
 8006012:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006016:	2a39      	cmp	r2, #57	; 0x39
 8006018:	d06c      	beq.n	80060f4 <_dtoa_r+0xba4>
 800601a:	3201      	adds	r2, #1
 800601c:	701a      	strb	r2, [r3, #0]
 800601e:	e747      	b.n	8005eb0 <_dtoa_r+0x960>
 8006020:	2a00      	cmp	r2, #0
 8006022:	dd07      	ble.n	8006034 <_dtoa_r+0xae4>
 8006024:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006028:	d0ed      	beq.n	8006006 <_dtoa_r+0xab6>
 800602a:	9a01      	ldr	r2, [sp, #4]
 800602c:	f109 0301 	add.w	r3, r9, #1
 8006030:	7013      	strb	r3, [r2, #0]
 8006032:	e73d      	b.n	8005eb0 <_dtoa_r+0x960>
 8006034:	9b04      	ldr	r3, [sp, #16]
 8006036:	9a08      	ldr	r2, [sp, #32]
 8006038:	f803 9c01 	strb.w	r9, [r3, #-1]
 800603c:	4293      	cmp	r3, r2
 800603e:	d043      	beq.n	80060c8 <_dtoa_r+0xb78>
 8006040:	4651      	mov	r1, sl
 8006042:	2300      	movs	r3, #0
 8006044:	220a      	movs	r2, #10
 8006046:	4620      	mov	r0, r4
 8006048:	f000 f9d6 	bl	80063f8 <__multadd>
 800604c:	45b8      	cmp	r8, r7
 800604e:	4682      	mov	sl, r0
 8006050:	f04f 0300 	mov.w	r3, #0
 8006054:	f04f 020a 	mov.w	r2, #10
 8006058:	4641      	mov	r1, r8
 800605a:	4620      	mov	r0, r4
 800605c:	d107      	bne.n	800606e <_dtoa_r+0xb1e>
 800605e:	f000 f9cb 	bl	80063f8 <__multadd>
 8006062:	4680      	mov	r8, r0
 8006064:	4607      	mov	r7, r0
 8006066:	9b04      	ldr	r3, [sp, #16]
 8006068:	3301      	adds	r3, #1
 800606a:	9304      	str	r3, [sp, #16]
 800606c:	e775      	b.n	8005f5a <_dtoa_r+0xa0a>
 800606e:	f000 f9c3 	bl	80063f8 <__multadd>
 8006072:	4639      	mov	r1, r7
 8006074:	4680      	mov	r8, r0
 8006076:	2300      	movs	r3, #0
 8006078:	220a      	movs	r2, #10
 800607a:	4620      	mov	r0, r4
 800607c:	f000 f9bc 	bl	80063f8 <__multadd>
 8006080:	4607      	mov	r7, r0
 8006082:	e7f0      	b.n	8006066 <_dtoa_r+0xb16>
 8006084:	9b04      	ldr	r3, [sp, #16]
 8006086:	9301      	str	r3, [sp, #4]
 8006088:	9d00      	ldr	r5, [sp, #0]
 800608a:	4631      	mov	r1, r6
 800608c:	4650      	mov	r0, sl
 800608e:	f7ff f9d6 	bl	800543e <quorem>
 8006092:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006096:	9b00      	ldr	r3, [sp, #0]
 8006098:	f805 9b01 	strb.w	r9, [r5], #1
 800609c:	1aea      	subs	r2, r5, r3
 800609e:	9b01      	ldr	r3, [sp, #4]
 80060a0:	4293      	cmp	r3, r2
 80060a2:	dd07      	ble.n	80060b4 <_dtoa_r+0xb64>
 80060a4:	4651      	mov	r1, sl
 80060a6:	2300      	movs	r3, #0
 80060a8:	220a      	movs	r2, #10
 80060aa:	4620      	mov	r0, r4
 80060ac:	f000 f9a4 	bl	80063f8 <__multadd>
 80060b0:	4682      	mov	sl, r0
 80060b2:	e7ea      	b.n	800608a <_dtoa_r+0xb3a>
 80060b4:	9b01      	ldr	r3, [sp, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	bfc8      	it	gt
 80060ba:	461d      	movgt	r5, r3
 80060bc:	9b00      	ldr	r3, [sp, #0]
 80060be:	bfd8      	it	le
 80060c0:	2501      	movle	r5, #1
 80060c2:	441d      	add	r5, r3
 80060c4:	f04f 0800 	mov.w	r8, #0
 80060c8:	4651      	mov	r1, sl
 80060ca:	2201      	movs	r2, #1
 80060cc:	4620      	mov	r0, r4
 80060ce:	f000 fb41 	bl	8006754 <__lshift>
 80060d2:	4631      	mov	r1, r6
 80060d4:	4682      	mov	sl, r0
 80060d6:	f000 fba9 	bl	800682c <__mcmp>
 80060da:	2800      	cmp	r0, #0
 80060dc:	dc96      	bgt.n	800600c <_dtoa_r+0xabc>
 80060de:	d102      	bne.n	80060e6 <_dtoa_r+0xb96>
 80060e0:	f019 0f01 	tst.w	r9, #1
 80060e4:	d192      	bne.n	800600c <_dtoa_r+0xabc>
 80060e6:	462b      	mov	r3, r5
 80060e8:	461d      	mov	r5, r3
 80060ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80060ee:	2a30      	cmp	r2, #48	; 0x30
 80060f0:	d0fa      	beq.n	80060e8 <_dtoa_r+0xb98>
 80060f2:	e6dd      	b.n	8005eb0 <_dtoa_r+0x960>
 80060f4:	9a00      	ldr	r2, [sp, #0]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d189      	bne.n	800600e <_dtoa_r+0xabe>
 80060fa:	f10b 0b01 	add.w	fp, fp, #1
 80060fe:	2331      	movs	r3, #49	; 0x31
 8006100:	e796      	b.n	8006030 <_dtoa_r+0xae0>
 8006102:	4b0a      	ldr	r3, [pc, #40]	; (800612c <_dtoa_r+0xbdc>)
 8006104:	f7ff ba99 	b.w	800563a <_dtoa_r+0xea>
 8006108:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800610a:	2b00      	cmp	r3, #0
 800610c:	f47f aa6d 	bne.w	80055ea <_dtoa_r+0x9a>
 8006110:	4b07      	ldr	r3, [pc, #28]	; (8006130 <_dtoa_r+0xbe0>)
 8006112:	f7ff ba92 	b.w	800563a <_dtoa_r+0xea>
 8006116:	9b01      	ldr	r3, [sp, #4]
 8006118:	2b00      	cmp	r3, #0
 800611a:	dcb5      	bgt.n	8006088 <_dtoa_r+0xb38>
 800611c:	9b07      	ldr	r3, [sp, #28]
 800611e:	2b02      	cmp	r3, #2
 8006120:	f73f aeb1 	bgt.w	8005e86 <_dtoa_r+0x936>
 8006124:	e7b0      	b.n	8006088 <_dtoa_r+0xb38>
 8006126:	bf00      	nop
 8006128:	08007900 	.word	0x08007900
 800612c:	08007860 	.word	0x08007860
 8006130:	08007884 	.word	0x08007884

08006134 <_free_r>:
 8006134:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006136:	2900      	cmp	r1, #0
 8006138:	d044      	beq.n	80061c4 <_free_r+0x90>
 800613a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800613e:	9001      	str	r0, [sp, #4]
 8006140:	2b00      	cmp	r3, #0
 8006142:	f1a1 0404 	sub.w	r4, r1, #4
 8006146:	bfb8      	it	lt
 8006148:	18e4      	addlt	r4, r4, r3
 800614a:	f000 f8e7 	bl	800631c <__malloc_lock>
 800614e:	4a1e      	ldr	r2, [pc, #120]	; (80061c8 <_free_r+0x94>)
 8006150:	9801      	ldr	r0, [sp, #4]
 8006152:	6813      	ldr	r3, [r2, #0]
 8006154:	b933      	cbnz	r3, 8006164 <_free_r+0x30>
 8006156:	6063      	str	r3, [r4, #4]
 8006158:	6014      	str	r4, [r2, #0]
 800615a:	b003      	add	sp, #12
 800615c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006160:	f000 b8e2 	b.w	8006328 <__malloc_unlock>
 8006164:	42a3      	cmp	r3, r4
 8006166:	d908      	bls.n	800617a <_free_r+0x46>
 8006168:	6825      	ldr	r5, [r4, #0]
 800616a:	1961      	adds	r1, r4, r5
 800616c:	428b      	cmp	r3, r1
 800616e:	bf01      	itttt	eq
 8006170:	6819      	ldreq	r1, [r3, #0]
 8006172:	685b      	ldreq	r3, [r3, #4]
 8006174:	1949      	addeq	r1, r1, r5
 8006176:	6021      	streq	r1, [r4, #0]
 8006178:	e7ed      	b.n	8006156 <_free_r+0x22>
 800617a:	461a      	mov	r2, r3
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	b10b      	cbz	r3, 8006184 <_free_r+0x50>
 8006180:	42a3      	cmp	r3, r4
 8006182:	d9fa      	bls.n	800617a <_free_r+0x46>
 8006184:	6811      	ldr	r1, [r2, #0]
 8006186:	1855      	adds	r5, r2, r1
 8006188:	42a5      	cmp	r5, r4
 800618a:	d10b      	bne.n	80061a4 <_free_r+0x70>
 800618c:	6824      	ldr	r4, [r4, #0]
 800618e:	4421      	add	r1, r4
 8006190:	1854      	adds	r4, r2, r1
 8006192:	42a3      	cmp	r3, r4
 8006194:	6011      	str	r1, [r2, #0]
 8006196:	d1e0      	bne.n	800615a <_free_r+0x26>
 8006198:	681c      	ldr	r4, [r3, #0]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	6053      	str	r3, [r2, #4]
 800619e:	440c      	add	r4, r1
 80061a0:	6014      	str	r4, [r2, #0]
 80061a2:	e7da      	b.n	800615a <_free_r+0x26>
 80061a4:	d902      	bls.n	80061ac <_free_r+0x78>
 80061a6:	230c      	movs	r3, #12
 80061a8:	6003      	str	r3, [r0, #0]
 80061aa:	e7d6      	b.n	800615a <_free_r+0x26>
 80061ac:	6825      	ldr	r5, [r4, #0]
 80061ae:	1961      	adds	r1, r4, r5
 80061b0:	428b      	cmp	r3, r1
 80061b2:	bf04      	itt	eq
 80061b4:	6819      	ldreq	r1, [r3, #0]
 80061b6:	685b      	ldreq	r3, [r3, #4]
 80061b8:	6063      	str	r3, [r4, #4]
 80061ba:	bf04      	itt	eq
 80061bc:	1949      	addeq	r1, r1, r5
 80061be:	6021      	streq	r1, [r4, #0]
 80061c0:	6054      	str	r4, [r2, #4]
 80061c2:	e7ca      	b.n	800615a <_free_r+0x26>
 80061c4:	b003      	add	sp, #12
 80061c6:	bd30      	pop	{r4, r5, pc}
 80061c8:	200004dc 	.word	0x200004dc

080061cc <malloc>:
 80061cc:	4b02      	ldr	r3, [pc, #8]	; (80061d8 <malloc+0xc>)
 80061ce:	4601      	mov	r1, r0
 80061d0:	6818      	ldr	r0, [r3, #0]
 80061d2:	f000 b823 	b.w	800621c <_malloc_r>
 80061d6:	bf00      	nop
 80061d8:	200000a4 	.word	0x200000a4

080061dc <sbrk_aligned>:
 80061dc:	b570      	push	{r4, r5, r6, lr}
 80061de:	4e0e      	ldr	r6, [pc, #56]	; (8006218 <sbrk_aligned+0x3c>)
 80061e0:	460c      	mov	r4, r1
 80061e2:	6831      	ldr	r1, [r6, #0]
 80061e4:	4605      	mov	r5, r0
 80061e6:	b911      	cbnz	r1, 80061ee <sbrk_aligned+0x12>
 80061e8:	f000 fe40 	bl	8006e6c <_sbrk_r>
 80061ec:	6030      	str	r0, [r6, #0]
 80061ee:	4621      	mov	r1, r4
 80061f0:	4628      	mov	r0, r5
 80061f2:	f000 fe3b 	bl	8006e6c <_sbrk_r>
 80061f6:	1c43      	adds	r3, r0, #1
 80061f8:	d00a      	beq.n	8006210 <sbrk_aligned+0x34>
 80061fa:	1cc4      	adds	r4, r0, #3
 80061fc:	f024 0403 	bic.w	r4, r4, #3
 8006200:	42a0      	cmp	r0, r4
 8006202:	d007      	beq.n	8006214 <sbrk_aligned+0x38>
 8006204:	1a21      	subs	r1, r4, r0
 8006206:	4628      	mov	r0, r5
 8006208:	f000 fe30 	bl	8006e6c <_sbrk_r>
 800620c:	3001      	adds	r0, #1
 800620e:	d101      	bne.n	8006214 <sbrk_aligned+0x38>
 8006210:	f04f 34ff 	mov.w	r4, #4294967295
 8006214:	4620      	mov	r0, r4
 8006216:	bd70      	pop	{r4, r5, r6, pc}
 8006218:	200004e0 	.word	0x200004e0

0800621c <_malloc_r>:
 800621c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006220:	1ccd      	adds	r5, r1, #3
 8006222:	f025 0503 	bic.w	r5, r5, #3
 8006226:	3508      	adds	r5, #8
 8006228:	2d0c      	cmp	r5, #12
 800622a:	bf38      	it	cc
 800622c:	250c      	movcc	r5, #12
 800622e:	2d00      	cmp	r5, #0
 8006230:	4607      	mov	r7, r0
 8006232:	db01      	blt.n	8006238 <_malloc_r+0x1c>
 8006234:	42a9      	cmp	r1, r5
 8006236:	d905      	bls.n	8006244 <_malloc_r+0x28>
 8006238:	230c      	movs	r3, #12
 800623a:	603b      	str	r3, [r7, #0]
 800623c:	2600      	movs	r6, #0
 800623e:	4630      	mov	r0, r6
 8006240:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006244:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006318 <_malloc_r+0xfc>
 8006248:	f000 f868 	bl	800631c <__malloc_lock>
 800624c:	f8d8 3000 	ldr.w	r3, [r8]
 8006250:	461c      	mov	r4, r3
 8006252:	bb5c      	cbnz	r4, 80062ac <_malloc_r+0x90>
 8006254:	4629      	mov	r1, r5
 8006256:	4638      	mov	r0, r7
 8006258:	f7ff ffc0 	bl	80061dc <sbrk_aligned>
 800625c:	1c43      	adds	r3, r0, #1
 800625e:	4604      	mov	r4, r0
 8006260:	d155      	bne.n	800630e <_malloc_r+0xf2>
 8006262:	f8d8 4000 	ldr.w	r4, [r8]
 8006266:	4626      	mov	r6, r4
 8006268:	2e00      	cmp	r6, #0
 800626a:	d145      	bne.n	80062f8 <_malloc_r+0xdc>
 800626c:	2c00      	cmp	r4, #0
 800626e:	d048      	beq.n	8006302 <_malloc_r+0xe6>
 8006270:	6823      	ldr	r3, [r4, #0]
 8006272:	4631      	mov	r1, r6
 8006274:	4638      	mov	r0, r7
 8006276:	eb04 0903 	add.w	r9, r4, r3
 800627a:	f000 fdf7 	bl	8006e6c <_sbrk_r>
 800627e:	4581      	cmp	r9, r0
 8006280:	d13f      	bne.n	8006302 <_malloc_r+0xe6>
 8006282:	6821      	ldr	r1, [r4, #0]
 8006284:	1a6d      	subs	r5, r5, r1
 8006286:	4629      	mov	r1, r5
 8006288:	4638      	mov	r0, r7
 800628a:	f7ff ffa7 	bl	80061dc <sbrk_aligned>
 800628e:	3001      	adds	r0, #1
 8006290:	d037      	beq.n	8006302 <_malloc_r+0xe6>
 8006292:	6823      	ldr	r3, [r4, #0]
 8006294:	442b      	add	r3, r5
 8006296:	6023      	str	r3, [r4, #0]
 8006298:	f8d8 3000 	ldr.w	r3, [r8]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d038      	beq.n	8006312 <_malloc_r+0xf6>
 80062a0:	685a      	ldr	r2, [r3, #4]
 80062a2:	42a2      	cmp	r2, r4
 80062a4:	d12b      	bne.n	80062fe <_malloc_r+0xe2>
 80062a6:	2200      	movs	r2, #0
 80062a8:	605a      	str	r2, [r3, #4]
 80062aa:	e00f      	b.n	80062cc <_malloc_r+0xb0>
 80062ac:	6822      	ldr	r2, [r4, #0]
 80062ae:	1b52      	subs	r2, r2, r5
 80062b0:	d41f      	bmi.n	80062f2 <_malloc_r+0xd6>
 80062b2:	2a0b      	cmp	r2, #11
 80062b4:	d917      	bls.n	80062e6 <_malloc_r+0xca>
 80062b6:	1961      	adds	r1, r4, r5
 80062b8:	42a3      	cmp	r3, r4
 80062ba:	6025      	str	r5, [r4, #0]
 80062bc:	bf18      	it	ne
 80062be:	6059      	strne	r1, [r3, #4]
 80062c0:	6863      	ldr	r3, [r4, #4]
 80062c2:	bf08      	it	eq
 80062c4:	f8c8 1000 	streq.w	r1, [r8]
 80062c8:	5162      	str	r2, [r4, r5]
 80062ca:	604b      	str	r3, [r1, #4]
 80062cc:	4638      	mov	r0, r7
 80062ce:	f104 060b 	add.w	r6, r4, #11
 80062d2:	f000 f829 	bl	8006328 <__malloc_unlock>
 80062d6:	f026 0607 	bic.w	r6, r6, #7
 80062da:	1d23      	adds	r3, r4, #4
 80062dc:	1af2      	subs	r2, r6, r3
 80062de:	d0ae      	beq.n	800623e <_malloc_r+0x22>
 80062e0:	1b9b      	subs	r3, r3, r6
 80062e2:	50a3      	str	r3, [r4, r2]
 80062e4:	e7ab      	b.n	800623e <_malloc_r+0x22>
 80062e6:	42a3      	cmp	r3, r4
 80062e8:	6862      	ldr	r2, [r4, #4]
 80062ea:	d1dd      	bne.n	80062a8 <_malloc_r+0x8c>
 80062ec:	f8c8 2000 	str.w	r2, [r8]
 80062f0:	e7ec      	b.n	80062cc <_malloc_r+0xb0>
 80062f2:	4623      	mov	r3, r4
 80062f4:	6864      	ldr	r4, [r4, #4]
 80062f6:	e7ac      	b.n	8006252 <_malloc_r+0x36>
 80062f8:	4634      	mov	r4, r6
 80062fa:	6876      	ldr	r6, [r6, #4]
 80062fc:	e7b4      	b.n	8006268 <_malloc_r+0x4c>
 80062fe:	4613      	mov	r3, r2
 8006300:	e7cc      	b.n	800629c <_malloc_r+0x80>
 8006302:	230c      	movs	r3, #12
 8006304:	603b      	str	r3, [r7, #0]
 8006306:	4638      	mov	r0, r7
 8006308:	f000 f80e 	bl	8006328 <__malloc_unlock>
 800630c:	e797      	b.n	800623e <_malloc_r+0x22>
 800630e:	6025      	str	r5, [r4, #0]
 8006310:	e7dc      	b.n	80062cc <_malloc_r+0xb0>
 8006312:	605b      	str	r3, [r3, #4]
 8006314:	deff      	udf	#255	; 0xff
 8006316:	bf00      	nop
 8006318:	200004dc 	.word	0x200004dc

0800631c <__malloc_lock>:
 800631c:	4801      	ldr	r0, [pc, #4]	; (8006324 <__malloc_lock+0x8>)
 800631e:	f7ff b88c 	b.w	800543a <__retarget_lock_acquire_recursive>
 8006322:	bf00      	nop
 8006324:	200004d8 	.word	0x200004d8

08006328 <__malloc_unlock>:
 8006328:	4801      	ldr	r0, [pc, #4]	; (8006330 <__malloc_unlock+0x8>)
 800632a:	f7ff b887 	b.w	800543c <__retarget_lock_release_recursive>
 800632e:	bf00      	nop
 8006330:	200004d8 	.word	0x200004d8

08006334 <_Balloc>:
 8006334:	b570      	push	{r4, r5, r6, lr}
 8006336:	69c6      	ldr	r6, [r0, #28]
 8006338:	4604      	mov	r4, r0
 800633a:	460d      	mov	r5, r1
 800633c:	b976      	cbnz	r6, 800635c <_Balloc+0x28>
 800633e:	2010      	movs	r0, #16
 8006340:	f7ff ff44 	bl	80061cc <malloc>
 8006344:	4602      	mov	r2, r0
 8006346:	61e0      	str	r0, [r4, #28]
 8006348:	b920      	cbnz	r0, 8006354 <_Balloc+0x20>
 800634a:	4b18      	ldr	r3, [pc, #96]	; (80063ac <_Balloc+0x78>)
 800634c:	4818      	ldr	r0, [pc, #96]	; (80063b0 <_Balloc+0x7c>)
 800634e:	216b      	movs	r1, #107	; 0x6b
 8006350:	f000 fdaa 	bl	8006ea8 <__assert_func>
 8006354:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006358:	6006      	str	r6, [r0, #0]
 800635a:	60c6      	str	r6, [r0, #12]
 800635c:	69e6      	ldr	r6, [r4, #28]
 800635e:	68f3      	ldr	r3, [r6, #12]
 8006360:	b183      	cbz	r3, 8006384 <_Balloc+0x50>
 8006362:	69e3      	ldr	r3, [r4, #28]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800636a:	b9b8      	cbnz	r0, 800639c <_Balloc+0x68>
 800636c:	2101      	movs	r1, #1
 800636e:	fa01 f605 	lsl.w	r6, r1, r5
 8006372:	1d72      	adds	r2, r6, #5
 8006374:	0092      	lsls	r2, r2, #2
 8006376:	4620      	mov	r0, r4
 8006378:	f000 fdb4 	bl	8006ee4 <_calloc_r>
 800637c:	b160      	cbz	r0, 8006398 <_Balloc+0x64>
 800637e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006382:	e00e      	b.n	80063a2 <_Balloc+0x6e>
 8006384:	2221      	movs	r2, #33	; 0x21
 8006386:	2104      	movs	r1, #4
 8006388:	4620      	mov	r0, r4
 800638a:	f000 fdab 	bl	8006ee4 <_calloc_r>
 800638e:	69e3      	ldr	r3, [r4, #28]
 8006390:	60f0      	str	r0, [r6, #12]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d1e4      	bne.n	8006362 <_Balloc+0x2e>
 8006398:	2000      	movs	r0, #0
 800639a:	bd70      	pop	{r4, r5, r6, pc}
 800639c:	6802      	ldr	r2, [r0, #0]
 800639e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80063a2:	2300      	movs	r3, #0
 80063a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80063a8:	e7f7      	b.n	800639a <_Balloc+0x66>
 80063aa:	bf00      	nop
 80063ac:	08007891 	.word	0x08007891
 80063b0:	08007911 	.word	0x08007911

080063b4 <_Bfree>:
 80063b4:	b570      	push	{r4, r5, r6, lr}
 80063b6:	69c6      	ldr	r6, [r0, #28]
 80063b8:	4605      	mov	r5, r0
 80063ba:	460c      	mov	r4, r1
 80063bc:	b976      	cbnz	r6, 80063dc <_Bfree+0x28>
 80063be:	2010      	movs	r0, #16
 80063c0:	f7ff ff04 	bl	80061cc <malloc>
 80063c4:	4602      	mov	r2, r0
 80063c6:	61e8      	str	r0, [r5, #28]
 80063c8:	b920      	cbnz	r0, 80063d4 <_Bfree+0x20>
 80063ca:	4b09      	ldr	r3, [pc, #36]	; (80063f0 <_Bfree+0x3c>)
 80063cc:	4809      	ldr	r0, [pc, #36]	; (80063f4 <_Bfree+0x40>)
 80063ce:	218f      	movs	r1, #143	; 0x8f
 80063d0:	f000 fd6a 	bl	8006ea8 <__assert_func>
 80063d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80063d8:	6006      	str	r6, [r0, #0]
 80063da:	60c6      	str	r6, [r0, #12]
 80063dc:	b13c      	cbz	r4, 80063ee <_Bfree+0x3a>
 80063de:	69eb      	ldr	r3, [r5, #28]
 80063e0:	6862      	ldr	r2, [r4, #4]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80063e8:	6021      	str	r1, [r4, #0]
 80063ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80063ee:	bd70      	pop	{r4, r5, r6, pc}
 80063f0:	08007891 	.word	0x08007891
 80063f4:	08007911 	.word	0x08007911

080063f8 <__multadd>:
 80063f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063fc:	690d      	ldr	r5, [r1, #16]
 80063fe:	4607      	mov	r7, r0
 8006400:	460c      	mov	r4, r1
 8006402:	461e      	mov	r6, r3
 8006404:	f101 0c14 	add.w	ip, r1, #20
 8006408:	2000      	movs	r0, #0
 800640a:	f8dc 3000 	ldr.w	r3, [ip]
 800640e:	b299      	uxth	r1, r3
 8006410:	fb02 6101 	mla	r1, r2, r1, r6
 8006414:	0c1e      	lsrs	r6, r3, #16
 8006416:	0c0b      	lsrs	r3, r1, #16
 8006418:	fb02 3306 	mla	r3, r2, r6, r3
 800641c:	b289      	uxth	r1, r1
 800641e:	3001      	adds	r0, #1
 8006420:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006424:	4285      	cmp	r5, r0
 8006426:	f84c 1b04 	str.w	r1, [ip], #4
 800642a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800642e:	dcec      	bgt.n	800640a <__multadd+0x12>
 8006430:	b30e      	cbz	r6, 8006476 <__multadd+0x7e>
 8006432:	68a3      	ldr	r3, [r4, #8]
 8006434:	42ab      	cmp	r3, r5
 8006436:	dc19      	bgt.n	800646c <__multadd+0x74>
 8006438:	6861      	ldr	r1, [r4, #4]
 800643a:	4638      	mov	r0, r7
 800643c:	3101      	adds	r1, #1
 800643e:	f7ff ff79 	bl	8006334 <_Balloc>
 8006442:	4680      	mov	r8, r0
 8006444:	b928      	cbnz	r0, 8006452 <__multadd+0x5a>
 8006446:	4602      	mov	r2, r0
 8006448:	4b0c      	ldr	r3, [pc, #48]	; (800647c <__multadd+0x84>)
 800644a:	480d      	ldr	r0, [pc, #52]	; (8006480 <__multadd+0x88>)
 800644c:	21ba      	movs	r1, #186	; 0xba
 800644e:	f000 fd2b 	bl	8006ea8 <__assert_func>
 8006452:	6922      	ldr	r2, [r4, #16]
 8006454:	3202      	adds	r2, #2
 8006456:	f104 010c 	add.w	r1, r4, #12
 800645a:	0092      	lsls	r2, r2, #2
 800645c:	300c      	adds	r0, #12
 800645e:	f000 fd15 	bl	8006e8c <memcpy>
 8006462:	4621      	mov	r1, r4
 8006464:	4638      	mov	r0, r7
 8006466:	f7ff ffa5 	bl	80063b4 <_Bfree>
 800646a:	4644      	mov	r4, r8
 800646c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006470:	3501      	adds	r5, #1
 8006472:	615e      	str	r6, [r3, #20]
 8006474:	6125      	str	r5, [r4, #16]
 8006476:	4620      	mov	r0, r4
 8006478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800647c:	08007900 	.word	0x08007900
 8006480:	08007911 	.word	0x08007911

08006484 <__hi0bits>:
 8006484:	0c03      	lsrs	r3, r0, #16
 8006486:	041b      	lsls	r3, r3, #16
 8006488:	b9d3      	cbnz	r3, 80064c0 <__hi0bits+0x3c>
 800648a:	0400      	lsls	r0, r0, #16
 800648c:	2310      	movs	r3, #16
 800648e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006492:	bf04      	itt	eq
 8006494:	0200      	lsleq	r0, r0, #8
 8006496:	3308      	addeq	r3, #8
 8006498:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800649c:	bf04      	itt	eq
 800649e:	0100      	lsleq	r0, r0, #4
 80064a0:	3304      	addeq	r3, #4
 80064a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80064a6:	bf04      	itt	eq
 80064a8:	0080      	lsleq	r0, r0, #2
 80064aa:	3302      	addeq	r3, #2
 80064ac:	2800      	cmp	r0, #0
 80064ae:	db05      	blt.n	80064bc <__hi0bits+0x38>
 80064b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80064b4:	f103 0301 	add.w	r3, r3, #1
 80064b8:	bf08      	it	eq
 80064ba:	2320      	moveq	r3, #32
 80064bc:	4618      	mov	r0, r3
 80064be:	4770      	bx	lr
 80064c0:	2300      	movs	r3, #0
 80064c2:	e7e4      	b.n	800648e <__hi0bits+0xa>

080064c4 <__lo0bits>:
 80064c4:	6803      	ldr	r3, [r0, #0]
 80064c6:	f013 0207 	ands.w	r2, r3, #7
 80064ca:	d00c      	beq.n	80064e6 <__lo0bits+0x22>
 80064cc:	07d9      	lsls	r1, r3, #31
 80064ce:	d422      	bmi.n	8006516 <__lo0bits+0x52>
 80064d0:	079a      	lsls	r2, r3, #30
 80064d2:	bf49      	itett	mi
 80064d4:	085b      	lsrmi	r3, r3, #1
 80064d6:	089b      	lsrpl	r3, r3, #2
 80064d8:	6003      	strmi	r3, [r0, #0]
 80064da:	2201      	movmi	r2, #1
 80064dc:	bf5c      	itt	pl
 80064de:	6003      	strpl	r3, [r0, #0]
 80064e0:	2202      	movpl	r2, #2
 80064e2:	4610      	mov	r0, r2
 80064e4:	4770      	bx	lr
 80064e6:	b299      	uxth	r1, r3
 80064e8:	b909      	cbnz	r1, 80064ee <__lo0bits+0x2a>
 80064ea:	0c1b      	lsrs	r3, r3, #16
 80064ec:	2210      	movs	r2, #16
 80064ee:	b2d9      	uxtb	r1, r3
 80064f0:	b909      	cbnz	r1, 80064f6 <__lo0bits+0x32>
 80064f2:	3208      	adds	r2, #8
 80064f4:	0a1b      	lsrs	r3, r3, #8
 80064f6:	0719      	lsls	r1, r3, #28
 80064f8:	bf04      	itt	eq
 80064fa:	091b      	lsreq	r3, r3, #4
 80064fc:	3204      	addeq	r2, #4
 80064fe:	0799      	lsls	r1, r3, #30
 8006500:	bf04      	itt	eq
 8006502:	089b      	lsreq	r3, r3, #2
 8006504:	3202      	addeq	r2, #2
 8006506:	07d9      	lsls	r1, r3, #31
 8006508:	d403      	bmi.n	8006512 <__lo0bits+0x4e>
 800650a:	085b      	lsrs	r3, r3, #1
 800650c:	f102 0201 	add.w	r2, r2, #1
 8006510:	d003      	beq.n	800651a <__lo0bits+0x56>
 8006512:	6003      	str	r3, [r0, #0]
 8006514:	e7e5      	b.n	80064e2 <__lo0bits+0x1e>
 8006516:	2200      	movs	r2, #0
 8006518:	e7e3      	b.n	80064e2 <__lo0bits+0x1e>
 800651a:	2220      	movs	r2, #32
 800651c:	e7e1      	b.n	80064e2 <__lo0bits+0x1e>
	...

08006520 <__i2b>:
 8006520:	b510      	push	{r4, lr}
 8006522:	460c      	mov	r4, r1
 8006524:	2101      	movs	r1, #1
 8006526:	f7ff ff05 	bl	8006334 <_Balloc>
 800652a:	4602      	mov	r2, r0
 800652c:	b928      	cbnz	r0, 800653a <__i2b+0x1a>
 800652e:	4b05      	ldr	r3, [pc, #20]	; (8006544 <__i2b+0x24>)
 8006530:	4805      	ldr	r0, [pc, #20]	; (8006548 <__i2b+0x28>)
 8006532:	f240 1145 	movw	r1, #325	; 0x145
 8006536:	f000 fcb7 	bl	8006ea8 <__assert_func>
 800653a:	2301      	movs	r3, #1
 800653c:	6144      	str	r4, [r0, #20]
 800653e:	6103      	str	r3, [r0, #16]
 8006540:	bd10      	pop	{r4, pc}
 8006542:	bf00      	nop
 8006544:	08007900 	.word	0x08007900
 8006548:	08007911 	.word	0x08007911

0800654c <__multiply>:
 800654c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006550:	4691      	mov	r9, r2
 8006552:	690a      	ldr	r2, [r1, #16]
 8006554:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006558:	429a      	cmp	r2, r3
 800655a:	bfb8      	it	lt
 800655c:	460b      	movlt	r3, r1
 800655e:	460c      	mov	r4, r1
 8006560:	bfbc      	itt	lt
 8006562:	464c      	movlt	r4, r9
 8006564:	4699      	movlt	r9, r3
 8006566:	6927      	ldr	r7, [r4, #16]
 8006568:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800656c:	68a3      	ldr	r3, [r4, #8]
 800656e:	6861      	ldr	r1, [r4, #4]
 8006570:	eb07 060a 	add.w	r6, r7, sl
 8006574:	42b3      	cmp	r3, r6
 8006576:	b085      	sub	sp, #20
 8006578:	bfb8      	it	lt
 800657a:	3101      	addlt	r1, #1
 800657c:	f7ff feda 	bl	8006334 <_Balloc>
 8006580:	b930      	cbnz	r0, 8006590 <__multiply+0x44>
 8006582:	4602      	mov	r2, r0
 8006584:	4b44      	ldr	r3, [pc, #272]	; (8006698 <__multiply+0x14c>)
 8006586:	4845      	ldr	r0, [pc, #276]	; (800669c <__multiply+0x150>)
 8006588:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800658c:	f000 fc8c 	bl	8006ea8 <__assert_func>
 8006590:	f100 0514 	add.w	r5, r0, #20
 8006594:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006598:	462b      	mov	r3, r5
 800659a:	2200      	movs	r2, #0
 800659c:	4543      	cmp	r3, r8
 800659e:	d321      	bcc.n	80065e4 <__multiply+0x98>
 80065a0:	f104 0314 	add.w	r3, r4, #20
 80065a4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80065a8:	f109 0314 	add.w	r3, r9, #20
 80065ac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80065b0:	9202      	str	r2, [sp, #8]
 80065b2:	1b3a      	subs	r2, r7, r4
 80065b4:	3a15      	subs	r2, #21
 80065b6:	f022 0203 	bic.w	r2, r2, #3
 80065ba:	3204      	adds	r2, #4
 80065bc:	f104 0115 	add.w	r1, r4, #21
 80065c0:	428f      	cmp	r7, r1
 80065c2:	bf38      	it	cc
 80065c4:	2204      	movcc	r2, #4
 80065c6:	9201      	str	r2, [sp, #4]
 80065c8:	9a02      	ldr	r2, [sp, #8]
 80065ca:	9303      	str	r3, [sp, #12]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d80c      	bhi.n	80065ea <__multiply+0x9e>
 80065d0:	2e00      	cmp	r6, #0
 80065d2:	dd03      	ble.n	80065dc <__multiply+0x90>
 80065d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d05b      	beq.n	8006694 <__multiply+0x148>
 80065dc:	6106      	str	r6, [r0, #16]
 80065de:	b005      	add	sp, #20
 80065e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065e4:	f843 2b04 	str.w	r2, [r3], #4
 80065e8:	e7d8      	b.n	800659c <__multiply+0x50>
 80065ea:	f8b3 a000 	ldrh.w	sl, [r3]
 80065ee:	f1ba 0f00 	cmp.w	sl, #0
 80065f2:	d024      	beq.n	800663e <__multiply+0xf2>
 80065f4:	f104 0e14 	add.w	lr, r4, #20
 80065f8:	46a9      	mov	r9, r5
 80065fa:	f04f 0c00 	mov.w	ip, #0
 80065fe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006602:	f8d9 1000 	ldr.w	r1, [r9]
 8006606:	fa1f fb82 	uxth.w	fp, r2
 800660a:	b289      	uxth	r1, r1
 800660c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006610:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006614:	f8d9 2000 	ldr.w	r2, [r9]
 8006618:	4461      	add	r1, ip
 800661a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800661e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006622:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006626:	b289      	uxth	r1, r1
 8006628:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800662c:	4577      	cmp	r7, lr
 800662e:	f849 1b04 	str.w	r1, [r9], #4
 8006632:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006636:	d8e2      	bhi.n	80065fe <__multiply+0xb2>
 8006638:	9a01      	ldr	r2, [sp, #4]
 800663a:	f845 c002 	str.w	ip, [r5, r2]
 800663e:	9a03      	ldr	r2, [sp, #12]
 8006640:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006644:	3304      	adds	r3, #4
 8006646:	f1b9 0f00 	cmp.w	r9, #0
 800664a:	d021      	beq.n	8006690 <__multiply+0x144>
 800664c:	6829      	ldr	r1, [r5, #0]
 800664e:	f104 0c14 	add.w	ip, r4, #20
 8006652:	46ae      	mov	lr, r5
 8006654:	f04f 0a00 	mov.w	sl, #0
 8006658:	f8bc b000 	ldrh.w	fp, [ip]
 800665c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006660:	fb09 220b 	mla	r2, r9, fp, r2
 8006664:	4452      	add	r2, sl
 8006666:	b289      	uxth	r1, r1
 8006668:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800666c:	f84e 1b04 	str.w	r1, [lr], #4
 8006670:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006674:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006678:	f8be 1000 	ldrh.w	r1, [lr]
 800667c:	fb09 110a 	mla	r1, r9, sl, r1
 8006680:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006684:	4567      	cmp	r7, ip
 8006686:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800668a:	d8e5      	bhi.n	8006658 <__multiply+0x10c>
 800668c:	9a01      	ldr	r2, [sp, #4]
 800668e:	50a9      	str	r1, [r5, r2]
 8006690:	3504      	adds	r5, #4
 8006692:	e799      	b.n	80065c8 <__multiply+0x7c>
 8006694:	3e01      	subs	r6, #1
 8006696:	e79b      	b.n	80065d0 <__multiply+0x84>
 8006698:	08007900 	.word	0x08007900
 800669c:	08007911 	.word	0x08007911

080066a0 <__pow5mult>:
 80066a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066a4:	4615      	mov	r5, r2
 80066a6:	f012 0203 	ands.w	r2, r2, #3
 80066aa:	4606      	mov	r6, r0
 80066ac:	460f      	mov	r7, r1
 80066ae:	d007      	beq.n	80066c0 <__pow5mult+0x20>
 80066b0:	4c25      	ldr	r4, [pc, #148]	; (8006748 <__pow5mult+0xa8>)
 80066b2:	3a01      	subs	r2, #1
 80066b4:	2300      	movs	r3, #0
 80066b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80066ba:	f7ff fe9d 	bl	80063f8 <__multadd>
 80066be:	4607      	mov	r7, r0
 80066c0:	10ad      	asrs	r5, r5, #2
 80066c2:	d03d      	beq.n	8006740 <__pow5mult+0xa0>
 80066c4:	69f4      	ldr	r4, [r6, #28]
 80066c6:	b97c      	cbnz	r4, 80066e8 <__pow5mult+0x48>
 80066c8:	2010      	movs	r0, #16
 80066ca:	f7ff fd7f 	bl	80061cc <malloc>
 80066ce:	4602      	mov	r2, r0
 80066d0:	61f0      	str	r0, [r6, #28]
 80066d2:	b928      	cbnz	r0, 80066e0 <__pow5mult+0x40>
 80066d4:	4b1d      	ldr	r3, [pc, #116]	; (800674c <__pow5mult+0xac>)
 80066d6:	481e      	ldr	r0, [pc, #120]	; (8006750 <__pow5mult+0xb0>)
 80066d8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80066dc:	f000 fbe4 	bl	8006ea8 <__assert_func>
 80066e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80066e4:	6004      	str	r4, [r0, #0]
 80066e6:	60c4      	str	r4, [r0, #12]
 80066e8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80066ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80066f0:	b94c      	cbnz	r4, 8006706 <__pow5mult+0x66>
 80066f2:	f240 2171 	movw	r1, #625	; 0x271
 80066f6:	4630      	mov	r0, r6
 80066f8:	f7ff ff12 	bl	8006520 <__i2b>
 80066fc:	2300      	movs	r3, #0
 80066fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8006702:	4604      	mov	r4, r0
 8006704:	6003      	str	r3, [r0, #0]
 8006706:	f04f 0900 	mov.w	r9, #0
 800670a:	07eb      	lsls	r3, r5, #31
 800670c:	d50a      	bpl.n	8006724 <__pow5mult+0x84>
 800670e:	4639      	mov	r1, r7
 8006710:	4622      	mov	r2, r4
 8006712:	4630      	mov	r0, r6
 8006714:	f7ff ff1a 	bl	800654c <__multiply>
 8006718:	4639      	mov	r1, r7
 800671a:	4680      	mov	r8, r0
 800671c:	4630      	mov	r0, r6
 800671e:	f7ff fe49 	bl	80063b4 <_Bfree>
 8006722:	4647      	mov	r7, r8
 8006724:	106d      	asrs	r5, r5, #1
 8006726:	d00b      	beq.n	8006740 <__pow5mult+0xa0>
 8006728:	6820      	ldr	r0, [r4, #0]
 800672a:	b938      	cbnz	r0, 800673c <__pow5mult+0x9c>
 800672c:	4622      	mov	r2, r4
 800672e:	4621      	mov	r1, r4
 8006730:	4630      	mov	r0, r6
 8006732:	f7ff ff0b 	bl	800654c <__multiply>
 8006736:	6020      	str	r0, [r4, #0]
 8006738:	f8c0 9000 	str.w	r9, [r0]
 800673c:	4604      	mov	r4, r0
 800673e:	e7e4      	b.n	800670a <__pow5mult+0x6a>
 8006740:	4638      	mov	r0, r7
 8006742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006746:	bf00      	nop
 8006748:	08007a60 	.word	0x08007a60
 800674c:	08007891 	.word	0x08007891
 8006750:	08007911 	.word	0x08007911

08006754 <__lshift>:
 8006754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006758:	460c      	mov	r4, r1
 800675a:	6849      	ldr	r1, [r1, #4]
 800675c:	6923      	ldr	r3, [r4, #16]
 800675e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006762:	68a3      	ldr	r3, [r4, #8]
 8006764:	4607      	mov	r7, r0
 8006766:	4691      	mov	r9, r2
 8006768:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800676c:	f108 0601 	add.w	r6, r8, #1
 8006770:	42b3      	cmp	r3, r6
 8006772:	db0b      	blt.n	800678c <__lshift+0x38>
 8006774:	4638      	mov	r0, r7
 8006776:	f7ff fddd 	bl	8006334 <_Balloc>
 800677a:	4605      	mov	r5, r0
 800677c:	b948      	cbnz	r0, 8006792 <__lshift+0x3e>
 800677e:	4602      	mov	r2, r0
 8006780:	4b28      	ldr	r3, [pc, #160]	; (8006824 <__lshift+0xd0>)
 8006782:	4829      	ldr	r0, [pc, #164]	; (8006828 <__lshift+0xd4>)
 8006784:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006788:	f000 fb8e 	bl	8006ea8 <__assert_func>
 800678c:	3101      	adds	r1, #1
 800678e:	005b      	lsls	r3, r3, #1
 8006790:	e7ee      	b.n	8006770 <__lshift+0x1c>
 8006792:	2300      	movs	r3, #0
 8006794:	f100 0114 	add.w	r1, r0, #20
 8006798:	f100 0210 	add.w	r2, r0, #16
 800679c:	4618      	mov	r0, r3
 800679e:	4553      	cmp	r3, sl
 80067a0:	db33      	blt.n	800680a <__lshift+0xb6>
 80067a2:	6920      	ldr	r0, [r4, #16]
 80067a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80067a8:	f104 0314 	add.w	r3, r4, #20
 80067ac:	f019 091f 	ands.w	r9, r9, #31
 80067b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80067b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80067b8:	d02b      	beq.n	8006812 <__lshift+0xbe>
 80067ba:	f1c9 0e20 	rsb	lr, r9, #32
 80067be:	468a      	mov	sl, r1
 80067c0:	2200      	movs	r2, #0
 80067c2:	6818      	ldr	r0, [r3, #0]
 80067c4:	fa00 f009 	lsl.w	r0, r0, r9
 80067c8:	4310      	orrs	r0, r2
 80067ca:	f84a 0b04 	str.w	r0, [sl], #4
 80067ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80067d2:	459c      	cmp	ip, r3
 80067d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80067d8:	d8f3      	bhi.n	80067c2 <__lshift+0x6e>
 80067da:	ebac 0304 	sub.w	r3, ip, r4
 80067de:	3b15      	subs	r3, #21
 80067e0:	f023 0303 	bic.w	r3, r3, #3
 80067e4:	3304      	adds	r3, #4
 80067e6:	f104 0015 	add.w	r0, r4, #21
 80067ea:	4584      	cmp	ip, r0
 80067ec:	bf38      	it	cc
 80067ee:	2304      	movcc	r3, #4
 80067f0:	50ca      	str	r2, [r1, r3]
 80067f2:	b10a      	cbz	r2, 80067f8 <__lshift+0xa4>
 80067f4:	f108 0602 	add.w	r6, r8, #2
 80067f8:	3e01      	subs	r6, #1
 80067fa:	4638      	mov	r0, r7
 80067fc:	612e      	str	r6, [r5, #16]
 80067fe:	4621      	mov	r1, r4
 8006800:	f7ff fdd8 	bl	80063b4 <_Bfree>
 8006804:	4628      	mov	r0, r5
 8006806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800680a:	f842 0f04 	str.w	r0, [r2, #4]!
 800680e:	3301      	adds	r3, #1
 8006810:	e7c5      	b.n	800679e <__lshift+0x4a>
 8006812:	3904      	subs	r1, #4
 8006814:	f853 2b04 	ldr.w	r2, [r3], #4
 8006818:	f841 2f04 	str.w	r2, [r1, #4]!
 800681c:	459c      	cmp	ip, r3
 800681e:	d8f9      	bhi.n	8006814 <__lshift+0xc0>
 8006820:	e7ea      	b.n	80067f8 <__lshift+0xa4>
 8006822:	bf00      	nop
 8006824:	08007900 	.word	0x08007900
 8006828:	08007911 	.word	0x08007911

0800682c <__mcmp>:
 800682c:	b530      	push	{r4, r5, lr}
 800682e:	6902      	ldr	r2, [r0, #16]
 8006830:	690c      	ldr	r4, [r1, #16]
 8006832:	1b12      	subs	r2, r2, r4
 8006834:	d10e      	bne.n	8006854 <__mcmp+0x28>
 8006836:	f100 0314 	add.w	r3, r0, #20
 800683a:	3114      	adds	r1, #20
 800683c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006840:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006844:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006848:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800684c:	42a5      	cmp	r5, r4
 800684e:	d003      	beq.n	8006858 <__mcmp+0x2c>
 8006850:	d305      	bcc.n	800685e <__mcmp+0x32>
 8006852:	2201      	movs	r2, #1
 8006854:	4610      	mov	r0, r2
 8006856:	bd30      	pop	{r4, r5, pc}
 8006858:	4283      	cmp	r3, r0
 800685a:	d3f3      	bcc.n	8006844 <__mcmp+0x18>
 800685c:	e7fa      	b.n	8006854 <__mcmp+0x28>
 800685e:	f04f 32ff 	mov.w	r2, #4294967295
 8006862:	e7f7      	b.n	8006854 <__mcmp+0x28>

08006864 <__mdiff>:
 8006864:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006868:	460c      	mov	r4, r1
 800686a:	4606      	mov	r6, r0
 800686c:	4611      	mov	r1, r2
 800686e:	4620      	mov	r0, r4
 8006870:	4690      	mov	r8, r2
 8006872:	f7ff ffdb 	bl	800682c <__mcmp>
 8006876:	1e05      	subs	r5, r0, #0
 8006878:	d110      	bne.n	800689c <__mdiff+0x38>
 800687a:	4629      	mov	r1, r5
 800687c:	4630      	mov	r0, r6
 800687e:	f7ff fd59 	bl	8006334 <_Balloc>
 8006882:	b930      	cbnz	r0, 8006892 <__mdiff+0x2e>
 8006884:	4b3a      	ldr	r3, [pc, #232]	; (8006970 <__mdiff+0x10c>)
 8006886:	4602      	mov	r2, r0
 8006888:	f240 2137 	movw	r1, #567	; 0x237
 800688c:	4839      	ldr	r0, [pc, #228]	; (8006974 <__mdiff+0x110>)
 800688e:	f000 fb0b 	bl	8006ea8 <__assert_func>
 8006892:	2301      	movs	r3, #1
 8006894:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006898:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800689c:	bfa4      	itt	ge
 800689e:	4643      	movge	r3, r8
 80068a0:	46a0      	movge	r8, r4
 80068a2:	4630      	mov	r0, r6
 80068a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80068a8:	bfa6      	itte	ge
 80068aa:	461c      	movge	r4, r3
 80068ac:	2500      	movge	r5, #0
 80068ae:	2501      	movlt	r5, #1
 80068b0:	f7ff fd40 	bl	8006334 <_Balloc>
 80068b4:	b920      	cbnz	r0, 80068c0 <__mdiff+0x5c>
 80068b6:	4b2e      	ldr	r3, [pc, #184]	; (8006970 <__mdiff+0x10c>)
 80068b8:	4602      	mov	r2, r0
 80068ba:	f240 2145 	movw	r1, #581	; 0x245
 80068be:	e7e5      	b.n	800688c <__mdiff+0x28>
 80068c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80068c4:	6926      	ldr	r6, [r4, #16]
 80068c6:	60c5      	str	r5, [r0, #12]
 80068c8:	f104 0914 	add.w	r9, r4, #20
 80068cc:	f108 0514 	add.w	r5, r8, #20
 80068d0:	f100 0e14 	add.w	lr, r0, #20
 80068d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80068d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80068dc:	f108 0210 	add.w	r2, r8, #16
 80068e0:	46f2      	mov	sl, lr
 80068e2:	2100      	movs	r1, #0
 80068e4:	f859 3b04 	ldr.w	r3, [r9], #4
 80068e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80068ec:	fa11 f88b 	uxtah	r8, r1, fp
 80068f0:	b299      	uxth	r1, r3
 80068f2:	0c1b      	lsrs	r3, r3, #16
 80068f4:	eba8 0801 	sub.w	r8, r8, r1
 80068f8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80068fc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006900:	fa1f f888 	uxth.w	r8, r8
 8006904:	1419      	asrs	r1, r3, #16
 8006906:	454e      	cmp	r6, r9
 8006908:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800690c:	f84a 3b04 	str.w	r3, [sl], #4
 8006910:	d8e8      	bhi.n	80068e4 <__mdiff+0x80>
 8006912:	1b33      	subs	r3, r6, r4
 8006914:	3b15      	subs	r3, #21
 8006916:	f023 0303 	bic.w	r3, r3, #3
 800691a:	3304      	adds	r3, #4
 800691c:	3415      	adds	r4, #21
 800691e:	42a6      	cmp	r6, r4
 8006920:	bf38      	it	cc
 8006922:	2304      	movcc	r3, #4
 8006924:	441d      	add	r5, r3
 8006926:	4473      	add	r3, lr
 8006928:	469e      	mov	lr, r3
 800692a:	462e      	mov	r6, r5
 800692c:	4566      	cmp	r6, ip
 800692e:	d30e      	bcc.n	800694e <__mdiff+0xea>
 8006930:	f10c 0203 	add.w	r2, ip, #3
 8006934:	1b52      	subs	r2, r2, r5
 8006936:	f022 0203 	bic.w	r2, r2, #3
 800693a:	3d03      	subs	r5, #3
 800693c:	45ac      	cmp	ip, r5
 800693e:	bf38      	it	cc
 8006940:	2200      	movcc	r2, #0
 8006942:	4413      	add	r3, r2
 8006944:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006948:	b17a      	cbz	r2, 800696a <__mdiff+0x106>
 800694a:	6107      	str	r7, [r0, #16]
 800694c:	e7a4      	b.n	8006898 <__mdiff+0x34>
 800694e:	f856 8b04 	ldr.w	r8, [r6], #4
 8006952:	fa11 f288 	uxtah	r2, r1, r8
 8006956:	1414      	asrs	r4, r2, #16
 8006958:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800695c:	b292      	uxth	r2, r2
 800695e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006962:	f84e 2b04 	str.w	r2, [lr], #4
 8006966:	1421      	asrs	r1, r4, #16
 8006968:	e7e0      	b.n	800692c <__mdiff+0xc8>
 800696a:	3f01      	subs	r7, #1
 800696c:	e7ea      	b.n	8006944 <__mdiff+0xe0>
 800696e:	bf00      	nop
 8006970:	08007900 	.word	0x08007900
 8006974:	08007911 	.word	0x08007911

08006978 <__d2b>:
 8006978:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800697c:	460f      	mov	r7, r1
 800697e:	2101      	movs	r1, #1
 8006980:	ec59 8b10 	vmov	r8, r9, d0
 8006984:	4616      	mov	r6, r2
 8006986:	f7ff fcd5 	bl	8006334 <_Balloc>
 800698a:	4604      	mov	r4, r0
 800698c:	b930      	cbnz	r0, 800699c <__d2b+0x24>
 800698e:	4602      	mov	r2, r0
 8006990:	4b24      	ldr	r3, [pc, #144]	; (8006a24 <__d2b+0xac>)
 8006992:	4825      	ldr	r0, [pc, #148]	; (8006a28 <__d2b+0xb0>)
 8006994:	f240 310f 	movw	r1, #783	; 0x30f
 8006998:	f000 fa86 	bl	8006ea8 <__assert_func>
 800699c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80069a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80069a4:	bb2d      	cbnz	r5, 80069f2 <__d2b+0x7a>
 80069a6:	9301      	str	r3, [sp, #4]
 80069a8:	f1b8 0300 	subs.w	r3, r8, #0
 80069ac:	d026      	beq.n	80069fc <__d2b+0x84>
 80069ae:	4668      	mov	r0, sp
 80069b0:	9300      	str	r3, [sp, #0]
 80069b2:	f7ff fd87 	bl	80064c4 <__lo0bits>
 80069b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80069ba:	b1e8      	cbz	r0, 80069f8 <__d2b+0x80>
 80069bc:	f1c0 0320 	rsb	r3, r0, #32
 80069c0:	fa02 f303 	lsl.w	r3, r2, r3
 80069c4:	430b      	orrs	r3, r1
 80069c6:	40c2      	lsrs	r2, r0
 80069c8:	6163      	str	r3, [r4, #20]
 80069ca:	9201      	str	r2, [sp, #4]
 80069cc:	9b01      	ldr	r3, [sp, #4]
 80069ce:	61a3      	str	r3, [r4, #24]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	bf14      	ite	ne
 80069d4:	2202      	movne	r2, #2
 80069d6:	2201      	moveq	r2, #1
 80069d8:	6122      	str	r2, [r4, #16]
 80069da:	b1bd      	cbz	r5, 8006a0c <__d2b+0x94>
 80069dc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80069e0:	4405      	add	r5, r0
 80069e2:	603d      	str	r5, [r7, #0]
 80069e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80069e8:	6030      	str	r0, [r6, #0]
 80069ea:	4620      	mov	r0, r4
 80069ec:	b003      	add	sp, #12
 80069ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80069f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069f6:	e7d6      	b.n	80069a6 <__d2b+0x2e>
 80069f8:	6161      	str	r1, [r4, #20]
 80069fa:	e7e7      	b.n	80069cc <__d2b+0x54>
 80069fc:	a801      	add	r0, sp, #4
 80069fe:	f7ff fd61 	bl	80064c4 <__lo0bits>
 8006a02:	9b01      	ldr	r3, [sp, #4]
 8006a04:	6163      	str	r3, [r4, #20]
 8006a06:	3020      	adds	r0, #32
 8006a08:	2201      	movs	r2, #1
 8006a0a:	e7e5      	b.n	80069d8 <__d2b+0x60>
 8006a0c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006a10:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006a14:	6038      	str	r0, [r7, #0]
 8006a16:	6918      	ldr	r0, [r3, #16]
 8006a18:	f7ff fd34 	bl	8006484 <__hi0bits>
 8006a1c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006a20:	e7e2      	b.n	80069e8 <__d2b+0x70>
 8006a22:	bf00      	nop
 8006a24:	08007900 	.word	0x08007900
 8006a28:	08007911 	.word	0x08007911

08006a2c <__ssputs_r>:
 8006a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a30:	688e      	ldr	r6, [r1, #8]
 8006a32:	461f      	mov	r7, r3
 8006a34:	42be      	cmp	r6, r7
 8006a36:	680b      	ldr	r3, [r1, #0]
 8006a38:	4682      	mov	sl, r0
 8006a3a:	460c      	mov	r4, r1
 8006a3c:	4690      	mov	r8, r2
 8006a3e:	d82c      	bhi.n	8006a9a <__ssputs_r+0x6e>
 8006a40:	898a      	ldrh	r2, [r1, #12]
 8006a42:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a46:	d026      	beq.n	8006a96 <__ssputs_r+0x6a>
 8006a48:	6965      	ldr	r5, [r4, #20]
 8006a4a:	6909      	ldr	r1, [r1, #16]
 8006a4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a50:	eba3 0901 	sub.w	r9, r3, r1
 8006a54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a58:	1c7b      	adds	r3, r7, #1
 8006a5a:	444b      	add	r3, r9
 8006a5c:	106d      	asrs	r5, r5, #1
 8006a5e:	429d      	cmp	r5, r3
 8006a60:	bf38      	it	cc
 8006a62:	461d      	movcc	r5, r3
 8006a64:	0553      	lsls	r3, r2, #21
 8006a66:	d527      	bpl.n	8006ab8 <__ssputs_r+0x8c>
 8006a68:	4629      	mov	r1, r5
 8006a6a:	f7ff fbd7 	bl	800621c <_malloc_r>
 8006a6e:	4606      	mov	r6, r0
 8006a70:	b360      	cbz	r0, 8006acc <__ssputs_r+0xa0>
 8006a72:	6921      	ldr	r1, [r4, #16]
 8006a74:	464a      	mov	r2, r9
 8006a76:	f000 fa09 	bl	8006e8c <memcpy>
 8006a7a:	89a3      	ldrh	r3, [r4, #12]
 8006a7c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a84:	81a3      	strh	r3, [r4, #12]
 8006a86:	6126      	str	r6, [r4, #16]
 8006a88:	6165      	str	r5, [r4, #20]
 8006a8a:	444e      	add	r6, r9
 8006a8c:	eba5 0509 	sub.w	r5, r5, r9
 8006a90:	6026      	str	r6, [r4, #0]
 8006a92:	60a5      	str	r5, [r4, #8]
 8006a94:	463e      	mov	r6, r7
 8006a96:	42be      	cmp	r6, r7
 8006a98:	d900      	bls.n	8006a9c <__ssputs_r+0x70>
 8006a9a:	463e      	mov	r6, r7
 8006a9c:	6820      	ldr	r0, [r4, #0]
 8006a9e:	4632      	mov	r2, r6
 8006aa0:	4641      	mov	r1, r8
 8006aa2:	f000 f9c9 	bl	8006e38 <memmove>
 8006aa6:	68a3      	ldr	r3, [r4, #8]
 8006aa8:	1b9b      	subs	r3, r3, r6
 8006aaa:	60a3      	str	r3, [r4, #8]
 8006aac:	6823      	ldr	r3, [r4, #0]
 8006aae:	4433      	add	r3, r6
 8006ab0:	6023      	str	r3, [r4, #0]
 8006ab2:	2000      	movs	r0, #0
 8006ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ab8:	462a      	mov	r2, r5
 8006aba:	f000 fa3b 	bl	8006f34 <_realloc_r>
 8006abe:	4606      	mov	r6, r0
 8006ac0:	2800      	cmp	r0, #0
 8006ac2:	d1e0      	bne.n	8006a86 <__ssputs_r+0x5a>
 8006ac4:	6921      	ldr	r1, [r4, #16]
 8006ac6:	4650      	mov	r0, sl
 8006ac8:	f7ff fb34 	bl	8006134 <_free_r>
 8006acc:	230c      	movs	r3, #12
 8006ace:	f8ca 3000 	str.w	r3, [sl]
 8006ad2:	89a3      	ldrh	r3, [r4, #12]
 8006ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ad8:	81a3      	strh	r3, [r4, #12]
 8006ada:	f04f 30ff 	mov.w	r0, #4294967295
 8006ade:	e7e9      	b.n	8006ab4 <__ssputs_r+0x88>

08006ae0 <_svfiprintf_r>:
 8006ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ae4:	4698      	mov	r8, r3
 8006ae6:	898b      	ldrh	r3, [r1, #12]
 8006ae8:	061b      	lsls	r3, r3, #24
 8006aea:	b09d      	sub	sp, #116	; 0x74
 8006aec:	4607      	mov	r7, r0
 8006aee:	460d      	mov	r5, r1
 8006af0:	4614      	mov	r4, r2
 8006af2:	d50e      	bpl.n	8006b12 <_svfiprintf_r+0x32>
 8006af4:	690b      	ldr	r3, [r1, #16]
 8006af6:	b963      	cbnz	r3, 8006b12 <_svfiprintf_r+0x32>
 8006af8:	2140      	movs	r1, #64	; 0x40
 8006afa:	f7ff fb8f 	bl	800621c <_malloc_r>
 8006afe:	6028      	str	r0, [r5, #0]
 8006b00:	6128      	str	r0, [r5, #16]
 8006b02:	b920      	cbnz	r0, 8006b0e <_svfiprintf_r+0x2e>
 8006b04:	230c      	movs	r3, #12
 8006b06:	603b      	str	r3, [r7, #0]
 8006b08:	f04f 30ff 	mov.w	r0, #4294967295
 8006b0c:	e0d0      	b.n	8006cb0 <_svfiprintf_r+0x1d0>
 8006b0e:	2340      	movs	r3, #64	; 0x40
 8006b10:	616b      	str	r3, [r5, #20]
 8006b12:	2300      	movs	r3, #0
 8006b14:	9309      	str	r3, [sp, #36]	; 0x24
 8006b16:	2320      	movs	r3, #32
 8006b18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b20:	2330      	movs	r3, #48	; 0x30
 8006b22:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006cc8 <_svfiprintf_r+0x1e8>
 8006b26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b2a:	f04f 0901 	mov.w	r9, #1
 8006b2e:	4623      	mov	r3, r4
 8006b30:	469a      	mov	sl, r3
 8006b32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b36:	b10a      	cbz	r2, 8006b3c <_svfiprintf_r+0x5c>
 8006b38:	2a25      	cmp	r2, #37	; 0x25
 8006b3a:	d1f9      	bne.n	8006b30 <_svfiprintf_r+0x50>
 8006b3c:	ebba 0b04 	subs.w	fp, sl, r4
 8006b40:	d00b      	beq.n	8006b5a <_svfiprintf_r+0x7a>
 8006b42:	465b      	mov	r3, fp
 8006b44:	4622      	mov	r2, r4
 8006b46:	4629      	mov	r1, r5
 8006b48:	4638      	mov	r0, r7
 8006b4a:	f7ff ff6f 	bl	8006a2c <__ssputs_r>
 8006b4e:	3001      	adds	r0, #1
 8006b50:	f000 80a9 	beq.w	8006ca6 <_svfiprintf_r+0x1c6>
 8006b54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b56:	445a      	add	r2, fp
 8006b58:	9209      	str	r2, [sp, #36]	; 0x24
 8006b5a:	f89a 3000 	ldrb.w	r3, [sl]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	f000 80a1 	beq.w	8006ca6 <_svfiprintf_r+0x1c6>
 8006b64:	2300      	movs	r3, #0
 8006b66:	f04f 32ff 	mov.w	r2, #4294967295
 8006b6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b6e:	f10a 0a01 	add.w	sl, sl, #1
 8006b72:	9304      	str	r3, [sp, #16]
 8006b74:	9307      	str	r3, [sp, #28]
 8006b76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b7a:	931a      	str	r3, [sp, #104]	; 0x68
 8006b7c:	4654      	mov	r4, sl
 8006b7e:	2205      	movs	r2, #5
 8006b80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b84:	4850      	ldr	r0, [pc, #320]	; (8006cc8 <_svfiprintf_r+0x1e8>)
 8006b86:	f7f9 fb2b 	bl	80001e0 <memchr>
 8006b8a:	9a04      	ldr	r2, [sp, #16]
 8006b8c:	b9d8      	cbnz	r0, 8006bc6 <_svfiprintf_r+0xe6>
 8006b8e:	06d0      	lsls	r0, r2, #27
 8006b90:	bf44      	itt	mi
 8006b92:	2320      	movmi	r3, #32
 8006b94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b98:	0711      	lsls	r1, r2, #28
 8006b9a:	bf44      	itt	mi
 8006b9c:	232b      	movmi	r3, #43	; 0x2b
 8006b9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ba2:	f89a 3000 	ldrb.w	r3, [sl]
 8006ba6:	2b2a      	cmp	r3, #42	; 0x2a
 8006ba8:	d015      	beq.n	8006bd6 <_svfiprintf_r+0xf6>
 8006baa:	9a07      	ldr	r2, [sp, #28]
 8006bac:	4654      	mov	r4, sl
 8006bae:	2000      	movs	r0, #0
 8006bb0:	f04f 0c0a 	mov.w	ip, #10
 8006bb4:	4621      	mov	r1, r4
 8006bb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bba:	3b30      	subs	r3, #48	; 0x30
 8006bbc:	2b09      	cmp	r3, #9
 8006bbe:	d94d      	bls.n	8006c5c <_svfiprintf_r+0x17c>
 8006bc0:	b1b0      	cbz	r0, 8006bf0 <_svfiprintf_r+0x110>
 8006bc2:	9207      	str	r2, [sp, #28]
 8006bc4:	e014      	b.n	8006bf0 <_svfiprintf_r+0x110>
 8006bc6:	eba0 0308 	sub.w	r3, r0, r8
 8006bca:	fa09 f303 	lsl.w	r3, r9, r3
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	9304      	str	r3, [sp, #16]
 8006bd2:	46a2      	mov	sl, r4
 8006bd4:	e7d2      	b.n	8006b7c <_svfiprintf_r+0x9c>
 8006bd6:	9b03      	ldr	r3, [sp, #12]
 8006bd8:	1d19      	adds	r1, r3, #4
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	9103      	str	r1, [sp, #12]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	bfbb      	ittet	lt
 8006be2:	425b      	neglt	r3, r3
 8006be4:	f042 0202 	orrlt.w	r2, r2, #2
 8006be8:	9307      	strge	r3, [sp, #28]
 8006bea:	9307      	strlt	r3, [sp, #28]
 8006bec:	bfb8      	it	lt
 8006bee:	9204      	strlt	r2, [sp, #16]
 8006bf0:	7823      	ldrb	r3, [r4, #0]
 8006bf2:	2b2e      	cmp	r3, #46	; 0x2e
 8006bf4:	d10c      	bne.n	8006c10 <_svfiprintf_r+0x130>
 8006bf6:	7863      	ldrb	r3, [r4, #1]
 8006bf8:	2b2a      	cmp	r3, #42	; 0x2a
 8006bfa:	d134      	bne.n	8006c66 <_svfiprintf_r+0x186>
 8006bfc:	9b03      	ldr	r3, [sp, #12]
 8006bfe:	1d1a      	adds	r2, r3, #4
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	9203      	str	r2, [sp, #12]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	bfb8      	it	lt
 8006c08:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c0c:	3402      	adds	r4, #2
 8006c0e:	9305      	str	r3, [sp, #20]
 8006c10:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006cd8 <_svfiprintf_r+0x1f8>
 8006c14:	7821      	ldrb	r1, [r4, #0]
 8006c16:	2203      	movs	r2, #3
 8006c18:	4650      	mov	r0, sl
 8006c1a:	f7f9 fae1 	bl	80001e0 <memchr>
 8006c1e:	b138      	cbz	r0, 8006c30 <_svfiprintf_r+0x150>
 8006c20:	9b04      	ldr	r3, [sp, #16]
 8006c22:	eba0 000a 	sub.w	r0, r0, sl
 8006c26:	2240      	movs	r2, #64	; 0x40
 8006c28:	4082      	lsls	r2, r0
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	3401      	adds	r4, #1
 8006c2e:	9304      	str	r3, [sp, #16]
 8006c30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c34:	4825      	ldr	r0, [pc, #148]	; (8006ccc <_svfiprintf_r+0x1ec>)
 8006c36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c3a:	2206      	movs	r2, #6
 8006c3c:	f7f9 fad0 	bl	80001e0 <memchr>
 8006c40:	2800      	cmp	r0, #0
 8006c42:	d038      	beq.n	8006cb6 <_svfiprintf_r+0x1d6>
 8006c44:	4b22      	ldr	r3, [pc, #136]	; (8006cd0 <_svfiprintf_r+0x1f0>)
 8006c46:	bb1b      	cbnz	r3, 8006c90 <_svfiprintf_r+0x1b0>
 8006c48:	9b03      	ldr	r3, [sp, #12]
 8006c4a:	3307      	adds	r3, #7
 8006c4c:	f023 0307 	bic.w	r3, r3, #7
 8006c50:	3308      	adds	r3, #8
 8006c52:	9303      	str	r3, [sp, #12]
 8006c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c56:	4433      	add	r3, r6
 8006c58:	9309      	str	r3, [sp, #36]	; 0x24
 8006c5a:	e768      	b.n	8006b2e <_svfiprintf_r+0x4e>
 8006c5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c60:	460c      	mov	r4, r1
 8006c62:	2001      	movs	r0, #1
 8006c64:	e7a6      	b.n	8006bb4 <_svfiprintf_r+0xd4>
 8006c66:	2300      	movs	r3, #0
 8006c68:	3401      	adds	r4, #1
 8006c6a:	9305      	str	r3, [sp, #20]
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	f04f 0c0a 	mov.w	ip, #10
 8006c72:	4620      	mov	r0, r4
 8006c74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c78:	3a30      	subs	r2, #48	; 0x30
 8006c7a:	2a09      	cmp	r2, #9
 8006c7c:	d903      	bls.n	8006c86 <_svfiprintf_r+0x1a6>
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d0c6      	beq.n	8006c10 <_svfiprintf_r+0x130>
 8006c82:	9105      	str	r1, [sp, #20]
 8006c84:	e7c4      	b.n	8006c10 <_svfiprintf_r+0x130>
 8006c86:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c8a:	4604      	mov	r4, r0
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e7f0      	b.n	8006c72 <_svfiprintf_r+0x192>
 8006c90:	ab03      	add	r3, sp, #12
 8006c92:	9300      	str	r3, [sp, #0]
 8006c94:	462a      	mov	r2, r5
 8006c96:	4b0f      	ldr	r3, [pc, #60]	; (8006cd4 <_svfiprintf_r+0x1f4>)
 8006c98:	a904      	add	r1, sp, #16
 8006c9a:	4638      	mov	r0, r7
 8006c9c:	f7fd fe64 	bl	8004968 <_printf_float>
 8006ca0:	1c42      	adds	r2, r0, #1
 8006ca2:	4606      	mov	r6, r0
 8006ca4:	d1d6      	bne.n	8006c54 <_svfiprintf_r+0x174>
 8006ca6:	89ab      	ldrh	r3, [r5, #12]
 8006ca8:	065b      	lsls	r3, r3, #25
 8006caa:	f53f af2d 	bmi.w	8006b08 <_svfiprintf_r+0x28>
 8006cae:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cb0:	b01d      	add	sp, #116	; 0x74
 8006cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cb6:	ab03      	add	r3, sp, #12
 8006cb8:	9300      	str	r3, [sp, #0]
 8006cba:	462a      	mov	r2, r5
 8006cbc:	4b05      	ldr	r3, [pc, #20]	; (8006cd4 <_svfiprintf_r+0x1f4>)
 8006cbe:	a904      	add	r1, sp, #16
 8006cc0:	4638      	mov	r0, r7
 8006cc2:	f7fe f8f5 	bl	8004eb0 <_printf_i>
 8006cc6:	e7eb      	b.n	8006ca0 <_svfiprintf_r+0x1c0>
 8006cc8:	08007a6c 	.word	0x08007a6c
 8006ccc:	08007a76 	.word	0x08007a76
 8006cd0:	08004969 	.word	0x08004969
 8006cd4:	08006a2d 	.word	0x08006a2d
 8006cd8:	08007a72 	.word	0x08007a72

08006cdc <__sflush_r>:
 8006cdc:	898a      	ldrh	r2, [r1, #12]
 8006cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ce2:	4605      	mov	r5, r0
 8006ce4:	0710      	lsls	r0, r2, #28
 8006ce6:	460c      	mov	r4, r1
 8006ce8:	d458      	bmi.n	8006d9c <__sflush_r+0xc0>
 8006cea:	684b      	ldr	r3, [r1, #4]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	dc05      	bgt.n	8006cfc <__sflush_r+0x20>
 8006cf0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	dc02      	bgt.n	8006cfc <__sflush_r+0x20>
 8006cf6:	2000      	movs	r0, #0
 8006cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cfe:	2e00      	cmp	r6, #0
 8006d00:	d0f9      	beq.n	8006cf6 <__sflush_r+0x1a>
 8006d02:	2300      	movs	r3, #0
 8006d04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d08:	682f      	ldr	r7, [r5, #0]
 8006d0a:	6a21      	ldr	r1, [r4, #32]
 8006d0c:	602b      	str	r3, [r5, #0]
 8006d0e:	d032      	beq.n	8006d76 <__sflush_r+0x9a>
 8006d10:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d12:	89a3      	ldrh	r3, [r4, #12]
 8006d14:	075a      	lsls	r2, r3, #29
 8006d16:	d505      	bpl.n	8006d24 <__sflush_r+0x48>
 8006d18:	6863      	ldr	r3, [r4, #4]
 8006d1a:	1ac0      	subs	r0, r0, r3
 8006d1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d1e:	b10b      	cbz	r3, 8006d24 <__sflush_r+0x48>
 8006d20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d22:	1ac0      	subs	r0, r0, r3
 8006d24:	2300      	movs	r3, #0
 8006d26:	4602      	mov	r2, r0
 8006d28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d2a:	6a21      	ldr	r1, [r4, #32]
 8006d2c:	4628      	mov	r0, r5
 8006d2e:	47b0      	blx	r6
 8006d30:	1c43      	adds	r3, r0, #1
 8006d32:	89a3      	ldrh	r3, [r4, #12]
 8006d34:	d106      	bne.n	8006d44 <__sflush_r+0x68>
 8006d36:	6829      	ldr	r1, [r5, #0]
 8006d38:	291d      	cmp	r1, #29
 8006d3a:	d82b      	bhi.n	8006d94 <__sflush_r+0xb8>
 8006d3c:	4a29      	ldr	r2, [pc, #164]	; (8006de4 <__sflush_r+0x108>)
 8006d3e:	410a      	asrs	r2, r1
 8006d40:	07d6      	lsls	r6, r2, #31
 8006d42:	d427      	bmi.n	8006d94 <__sflush_r+0xb8>
 8006d44:	2200      	movs	r2, #0
 8006d46:	6062      	str	r2, [r4, #4]
 8006d48:	04d9      	lsls	r1, r3, #19
 8006d4a:	6922      	ldr	r2, [r4, #16]
 8006d4c:	6022      	str	r2, [r4, #0]
 8006d4e:	d504      	bpl.n	8006d5a <__sflush_r+0x7e>
 8006d50:	1c42      	adds	r2, r0, #1
 8006d52:	d101      	bne.n	8006d58 <__sflush_r+0x7c>
 8006d54:	682b      	ldr	r3, [r5, #0]
 8006d56:	b903      	cbnz	r3, 8006d5a <__sflush_r+0x7e>
 8006d58:	6560      	str	r0, [r4, #84]	; 0x54
 8006d5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d5c:	602f      	str	r7, [r5, #0]
 8006d5e:	2900      	cmp	r1, #0
 8006d60:	d0c9      	beq.n	8006cf6 <__sflush_r+0x1a>
 8006d62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d66:	4299      	cmp	r1, r3
 8006d68:	d002      	beq.n	8006d70 <__sflush_r+0x94>
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	f7ff f9e2 	bl	8006134 <_free_r>
 8006d70:	2000      	movs	r0, #0
 8006d72:	6360      	str	r0, [r4, #52]	; 0x34
 8006d74:	e7c0      	b.n	8006cf8 <__sflush_r+0x1c>
 8006d76:	2301      	movs	r3, #1
 8006d78:	4628      	mov	r0, r5
 8006d7a:	47b0      	blx	r6
 8006d7c:	1c41      	adds	r1, r0, #1
 8006d7e:	d1c8      	bne.n	8006d12 <__sflush_r+0x36>
 8006d80:	682b      	ldr	r3, [r5, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d0c5      	beq.n	8006d12 <__sflush_r+0x36>
 8006d86:	2b1d      	cmp	r3, #29
 8006d88:	d001      	beq.n	8006d8e <__sflush_r+0xb2>
 8006d8a:	2b16      	cmp	r3, #22
 8006d8c:	d101      	bne.n	8006d92 <__sflush_r+0xb6>
 8006d8e:	602f      	str	r7, [r5, #0]
 8006d90:	e7b1      	b.n	8006cf6 <__sflush_r+0x1a>
 8006d92:	89a3      	ldrh	r3, [r4, #12]
 8006d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d98:	81a3      	strh	r3, [r4, #12]
 8006d9a:	e7ad      	b.n	8006cf8 <__sflush_r+0x1c>
 8006d9c:	690f      	ldr	r7, [r1, #16]
 8006d9e:	2f00      	cmp	r7, #0
 8006da0:	d0a9      	beq.n	8006cf6 <__sflush_r+0x1a>
 8006da2:	0793      	lsls	r3, r2, #30
 8006da4:	680e      	ldr	r6, [r1, #0]
 8006da6:	bf08      	it	eq
 8006da8:	694b      	ldreq	r3, [r1, #20]
 8006daa:	600f      	str	r7, [r1, #0]
 8006dac:	bf18      	it	ne
 8006dae:	2300      	movne	r3, #0
 8006db0:	eba6 0807 	sub.w	r8, r6, r7
 8006db4:	608b      	str	r3, [r1, #8]
 8006db6:	f1b8 0f00 	cmp.w	r8, #0
 8006dba:	dd9c      	ble.n	8006cf6 <__sflush_r+0x1a>
 8006dbc:	6a21      	ldr	r1, [r4, #32]
 8006dbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006dc0:	4643      	mov	r3, r8
 8006dc2:	463a      	mov	r2, r7
 8006dc4:	4628      	mov	r0, r5
 8006dc6:	47b0      	blx	r6
 8006dc8:	2800      	cmp	r0, #0
 8006dca:	dc06      	bgt.n	8006dda <__sflush_r+0xfe>
 8006dcc:	89a3      	ldrh	r3, [r4, #12]
 8006dce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dd2:	81a3      	strh	r3, [r4, #12]
 8006dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd8:	e78e      	b.n	8006cf8 <__sflush_r+0x1c>
 8006dda:	4407      	add	r7, r0
 8006ddc:	eba8 0800 	sub.w	r8, r8, r0
 8006de0:	e7e9      	b.n	8006db6 <__sflush_r+0xda>
 8006de2:	bf00      	nop
 8006de4:	dfbffffe 	.word	0xdfbffffe

08006de8 <_fflush_r>:
 8006de8:	b538      	push	{r3, r4, r5, lr}
 8006dea:	690b      	ldr	r3, [r1, #16]
 8006dec:	4605      	mov	r5, r0
 8006dee:	460c      	mov	r4, r1
 8006df0:	b913      	cbnz	r3, 8006df8 <_fflush_r+0x10>
 8006df2:	2500      	movs	r5, #0
 8006df4:	4628      	mov	r0, r5
 8006df6:	bd38      	pop	{r3, r4, r5, pc}
 8006df8:	b118      	cbz	r0, 8006e02 <_fflush_r+0x1a>
 8006dfa:	6a03      	ldr	r3, [r0, #32]
 8006dfc:	b90b      	cbnz	r3, 8006e02 <_fflush_r+0x1a>
 8006dfe:	f7fe fa05 	bl	800520c <__sinit>
 8006e02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d0f3      	beq.n	8006df2 <_fflush_r+0xa>
 8006e0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e0c:	07d0      	lsls	r0, r2, #31
 8006e0e:	d404      	bmi.n	8006e1a <_fflush_r+0x32>
 8006e10:	0599      	lsls	r1, r3, #22
 8006e12:	d402      	bmi.n	8006e1a <_fflush_r+0x32>
 8006e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e16:	f7fe fb10 	bl	800543a <__retarget_lock_acquire_recursive>
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	4621      	mov	r1, r4
 8006e1e:	f7ff ff5d 	bl	8006cdc <__sflush_r>
 8006e22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e24:	07da      	lsls	r2, r3, #31
 8006e26:	4605      	mov	r5, r0
 8006e28:	d4e4      	bmi.n	8006df4 <_fflush_r+0xc>
 8006e2a:	89a3      	ldrh	r3, [r4, #12]
 8006e2c:	059b      	lsls	r3, r3, #22
 8006e2e:	d4e1      	bmi.n	8006df4 <_fflush_r+0xc>
 8006e30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e32:	f7fe fb03 	bl	800543c <__retarget_lock_release_recursive>
 8006e36:	e7dd      	b.n	8006df4 <_fflush_r+0xc>

08006e38 <memmove>:
 8006e38:	4288      	cmp	r0, r1
 8006e3a:	b510      	push	{r4, lr}
 8006e3c:	eb01 0402 	add.w	r4, r1, r2
 8006e40:	d902      	bls.n	8006e48 <memmove+0x10>
 8006e42:	4284      	cmp	r4, r0
 8006e44:	4623      	mov	r3, r4
 8006e46:	d807      	bhi.n	8006e58 <memmove+0x20>
 8006e48:	1e43      	subs	r3, r0, #1
 8006e4a:	42a1      	cmp	r1, r4
 8006e4c:	d008      	beq.n	8006e60 <memmove+0x28>
 8006e4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e56:	e7f8      	b.n	8006e4a <memmove+0x12>
 8006e58:	4402      	add	r2, r0
 8006e5a:	4601      	mov	r1, r0
 8006e5c:	428a      	cmp	r2, r1
 8006e5e:	d100      	bne.n	8006e62 <memmove+0x2a>
 8006e60:	bd10      	pop	{r4, pc}
 8006e62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e6a:	e7f7      	b.n	8006e5c <memmove+0x24>

08006e6c <_sbrk_r>:
 8006e6c:	b538      	push	{r3, r4, r5, lr}
 8006e6e:	4d06      	ldr	r5, [pc, #24]	; (8006e88 <_sbrk_r+0x1c>)
 8006e70:	2300      	movs	r3, #0
 8006e72:	4604      	mov	r4, r0
 8006e74:	4608      	mov	r0, r1
 8006e76:	602b      	str	r3, [r5, #0]
 8006e78:	f7fa fd66 	bl	8001948 <_sbrk>
 8006e7c:	1c43      	adds	r3, r0, #1
 8006e7e:	d102      	bne.n	8006e86 <_sbrk_r+0x1a>
 8006e80:	682b      	ldr	r3, [r5, #0]
 8006e82:	b103      	cbz	r3, 8006e86 <_sbrk_r+0x1a>
 8006e84:	6023      	str	r3, [r4, #0]
 8006e86:	bd38      	pop	{r3, r4, r5, pc}
 8006e88:	200004d4 	.word	0x200004d4

08006e8c <memcpy>:
 8006e8c:	440a      	add	r2, r1
 8006e8e:	4291      	cmp	r1, r2
 8006e90:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e94:	d100      	bne.n	8006e98 <memcpy+0xc>
 8006e96:	4770      	bx	lr
 8006e98:	b510      	push	{r4, lr}
 8006e9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ea2:	4291      	cmp	r1, r2
 8006ea4:	d1f9      	bne.n	8006e9a <memcpy+0xe>
 8006ea6:	bd10      	pop	{r4, pc}

08006ea8 <__assert_func>:
 8006ea8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006eaa:	4614      	mov	r4, r2
 8006eac:	461a      	mov	r2, r3
 8006eae:	4b09      	ldr	r3, [pc, #36]	; (8006ed4 <__assert_func+0x2c>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4605      	mov	r5, r0
 8006eb4:	68d8      	ldr	r0, [r3, #12]
 8006eb6:	b14c      	cbz	r4, 8006ecc <__assert_func+0x24>
 8006eb8:	4b07      	ldr	r3, [pc, #28]	; (8006ed8 <__assert_func+0x30>)
 8006eba:	9100      	str	r1, [sp, #0]
 8006ebc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006ec0:	4906      	ldr	r1, [pc, #24]	; (8006edc <__assert_func+0x34>)
 8006ec2:	462b      	mov	r3, r5
 8006ec4:	f000 f872 	bl	8006fac <fiprintf>
 8006ec8:	f000 f882 	bl	8006fd0 <abort>
 8006ecc:	4b04      	ldr	r3, [pc, #16]	; (8006ee0 <__assert_func+0x38>)
 8006ece:	461c      	mov	r4, r3
 8006ed0:	e7f3      	b.n	8006eba <__assert_func+0x12>
 8006ed2:	bf00      	nop
 8006ed4:	200000a4 	.word	0x200000a4
 8006ed8:	08007a87 	.word	0x08007a87
 8006edc:	08007a94 	.word	0x08007a94
 8006ee0:	08007ac2 	.word	0x08007ac2

08006ee4 <_calloc_r>:
 8006ee4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ee6:	fba1 2402 	umull	r2, r4, r1, r2
 8006eea:	b94c      	cbnz	r4, 8006f00 <_calloc_r+0x1c>
 8006eec:	4611      	mov	r1, r2
 8006eee:	9201      	str	r2, [sp, #4]
 8006ef0:	f7ff f994 	bl	800621c <_malloc_r>
 8006ef4:	9a01      	ldr	r2, [sp, #4]
 8006ef6:	4605      	mov	r5, r0
 8006ef8:	b930      	cbnz	r0, 8006f08 <_calloc_r+0x24>
 8006efa:	4628      	mov	r0, r5
 8006efc:	b003      	add	sp, #12
 8006efe:	bd30      	pop	{r4, r5, pc}
 8006f00:	220c      	movs	r2, #12
 8006f02:	6002      	str	r2, [r0, #0]
 8006f04:	2500      	movs	r5, #0
 8006f06:	e7f8      	b.n	8006efa <_calloc_r+0x16>
 8006f08:	4621      	mov	r1, r4
 8006f0a:	f7fe fa18 	bl	800533e <memset>
 8006f0e:	e7f4      	b.n	8006efa <_calloc_r+0x16>

08006f10 <__ascii_mbtowc>:
 8006f10:	b082      	sub	sp, #8
 8006f12:	b901      	cbnz	r1, 8006f16 <__ascii_mbtowc+0x6>
 8006f14:	a901      	add	r1, sp, #4
 8006f16:	b142      	cbz	r2, 8006f2a <__ascii_mbtowc+0x1a>
 8006f18:	b14b      	cbz	r3, 8006f2e <__ascii_mbtowc+0x1e>
 8006f1a:	7813      	ldrb	r3, [r2, #0]
 8006f1c:	600b      	str	r3, [r1, #0]
 8006f1e:	7812      	ldrb	r2, [r2, #0]
 8006f20:	1e10      	subs	r0, r2, #0
 8006f22:	bf18      	it	ne
 8006f24:	2001      	movne	r0, #1
 8006f26:	b002      	add	sp, #8
 8006f28:	4770      	bx	lr
 8006f2a:	4610      	mov	r0, r2
 8006f2c:	e7fb      	b.n	8006f26 <__ascii_mbtowc+0x16>
 8006f2e:	f06f 0001 	mvn.w	r0, #1
 8006f32:	e7f8      	b.n	8006f26 <__ascii_mbtowc+0x16>

08006f34 <_realloc_r>:
 8006f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f38:	4680      	mov	r8, r0
 8006f3a:	4614      	mov	r4, r2
 8006f3c:	460e      	mov	r6, r1
 8006f3e:	b921      	cbnz	r1, 8006f4a <_realloc_r+0x16>
 8006f40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f44:	4611      	mov	r1, r2
 8006f46:	f7ff b969 	b.w	800621c <_malloc_r>
 8006f4a:	b92a      	cbnz	r2, 8006f58 <_realloc_r+0x24>
 8006f4c:	f7ff f8f2 	bl	8006134 <_free_r>
 8006f50:	4625      	mov	r5, r4
 8006f52:	4628      	mov	r0, r5
 8006f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f58:	f000 f841 	bl	8006fde <_malloc_usable_size_r>
 8006f5c:	4284      	cmp	r4, r0
 8006f5e:	4607      	mov	r7, r0
 8006f60:	d802      	bhi.n	8006f68 <_realloc_r+0x34>
 8006f62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006f66:	d812      	bhi.n	8006f8e <_realloc_r+0x5a>
 8006f68:	4621      	mov	r1, r4
 8006f6a:	4640      	mov	r0, r8
 8006f6c:	f7ff f956 	bl	800621c <_malloc_r>
 8006f70:	4605      	mov	r5, r0
 8006f72:	2800      	cmp	r0, #0
 8006f74:	d0ed      	beq.n	8006f52 <_realloc_r+0x1e>
 8006f76:	42bc      	cmp	r4, r7
 8006f78:	4622      	mov	r2, r4
 8006f7a:	4631      	mov	r1, r6
 8006f7c:	bf28      	it	cs
 8006f7e:	463a      	movcs	r2, r7
 8006f80:	f7ff ff84 	bl	8006e8c <memcpy>
 8006f84:	4631      	mov	r1, r6
 8006f86:	4640      	mov	r0, r8
 8006f88:	f7ff f8d4 	bl	8006134 <_free_r>
 8006f8c:	e7e1      	b.n	8006f52 <_realloc_r+0x1e>
 8006f8e:	4635      	mov	r5, r6
 8006f90:	e7df      	b.n	8006f52 <_realloc_r+0x1e>

08006f92 <__ascii_wctomb>:
 8006f92:	b149      	cbz	r1, 8006fa8 <__ascii_wctomb+0x16>
 8006f94:	2aff      	cmp	r2, #255	; 0xff
 8006f96:	bf85      	ittet	hi
 8006f98:	238a      	movhi	r3, #138	; 0x8a
 8006f9a:	6003      	strhi	r3, [r0, #0]
 8006f9c:	700a      	strbls	r2, [r1, #0]
 8006f9e:	f04f 30ff 	movhi.w	r0, #4294967295
 8006fa2:	bf98      	it	ls
 8006fa4:	2001      	movls	r0, #1
 8006fa6:	4770      	bx	lr
 8006fa8:	4608      	mov	r0, r1
 8006faa:	4770      	bx	lr

08006fac <fiprintf>:
 8006fac:	b40e      	push	{r1, r2, r3}
 8006fae:	b503      	push	{r0, r1, lr}
 8006fb0:	4601      	mov	r1, r0
 8006fb2:	ab03      	add	r3, sp, #12
 8006fb4:	4805      	ldr	r0, [pc, #20]	; (8006fcc <fiprintf+0x20>)
 8006fb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fba:	6800      	ldr	r0, [r0, #0]
 8006fbc:	9301      	str	r3, [sp, #4]
 8006fbe:	f000 f83f 	bl	8007040 <_vfiprintf_r>
 8006fc2:	b002      	add	sp, #8
 8006fc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fc8:	b003      	add	sp, #12
 8006fca:	4770      	bx	lr
 8006fcc:	200000a4 	.word	0x200000a4

08006fd0 <abort>:
 8006fd0:	b508      	push	{r3, lr}
 8006fd2:	2006      	movs	r0, #6
 8006fd4:	f000 fa0c 	bl	80073f0 <raise>
 8006fd8:	2001      	movs	r0, #1
 8006fda:	f7fa fc3d 	bl	8001858 <_exit>

08006fde <_malloc_usable_size_r>:
 8006fde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fe2:	1f18      	subs	r0, r3, #4
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	bfbc      	itt	lt
 8006fe8:	580b      	ldrlt	r3, [r1, r0]
 8006fea:	18c0      	addlt	r0, r0, r3
 8006fec:	4770      	bx	lr

08006fee <__sfputc_r>:
 8006fee:	6893      	ldr	r3, [r2, #8]
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	b410      	push	{r4}
 8006ff6:	6093      	str	r3, [r2, #8]
 8006ff8:	da08      	bge.n	800700c <__sfputc_r+0x1e>
 8006ffa:	6994      	ldr	r4, [r2, #24]
 8006ffc:	42a3      	cmp	r3, r4
 8006ffe:	db01      	blt.n	8007004 <__sfputc_r+0x16>
 8007000:	290a      	cmp	r1, #10
 8007002:	d103      	bne.n	800700c <__sfputc_r+0x1e>
 8007004:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007008:	f000 b934 	b.w	8007274 <__swbuf_r>
 800700c:	6813      	ldr	r3, [r2, #0]
 800700e:	1c58      	adds	r0, r3, #1
 8007010:	6010      	str	r0, [r2, #0]
 8007012:	7019      	strb	r1, [r3, #0]
 8007014:	4608      	mov	r0, r1
 8007016:	f85d 4b04 	ldr.w	r4, [sp], #4
 800701a:	4770      	bx	lr

0800701c <__sfputs_r>:
 800701c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800701e:	4606      	mov	r6, r0
 8007020:	460f      	mov	r7, r1
 8007022:	4614      	mov	r4, r2
 8007024:	18d5      	adds	r5, r2, r3
 8007026:	42ac      	cmp	r4, r5
 8007028:	d101      	bne.n	800702e <__sfputs_r+0x12>
 800702a:	2000      	movs	r0, #0
 800702c:	e007      	b.n	800703e <__sfputs_r+0x22>
 800702e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007032:	463a      	mov	r2, r7
 8007034:	4630      	mov	r0, r6
 8007036:	f7ff ffda 	bl	8006fee <__sfputc_r>
 800703a:	1c43      	adds	r3, r0, #1
 800703c:	d1f3      	bne.n	8007026 <__sfputs_r+0xa>
 800703e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007040 <_vfiprintf_r>:
 8007040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007044:	460d      	mov	r5, r1
 8007046:	b09d      	sub	sp, #116	; 0x74
 8007048:	4614      	mov	r4, r2
 800704a:	4698      	mov	r8, r3
 800704c:	4606      	mov	r6, r0
 800704e:	b118      	cbz	r0, 8007058 <_vfiprintf_r+0x18>
 8007050:	6a03      	ldr	r3, [r0, #32]
 8007052:	b90b      	cbnz	r3, 8007058 <_vfiprintf_r+0x18>
 8007054:	f7fe f8da 	bl	800520c <__sinit>
 8007058:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800705a:	07d9      	lsls	r1, r3, #31
 800705c:	d405      	bmi.n	800706a <_vfiprintf_r+0x2a>
 800705e:	89ab      	ldrh	r3, [r5, #12]
 8007060:	059a      	lsls	r2, r3, #22
 8007062:	d402      	bmi.n	800706a <_vfiprintf_r+0x2a>
 8007064:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007066:	f7fe f9e8 	bl	800543a <__retarget_lock_acquire_recursive>
 800706a:	89ab      	ldrh	r3, [r5, #12]
 800706c:	071b      	lsls	r3, r3, #28
 800706e:	d501      	bpl.n	8007074 <_vfiprintf_r+0x34>
 8007070:	692b      	ldr	r3, [r5, #16]
 8007072:	b99b      	cbnz	r3, 800709c <_vfiprintf_r+0x5c>
 8007074:	4629      	mov	r1, r5
 8007076:	4630      	mov	r0, r6
 8007078:	f000 f93a 	bl	80072f0 <__swsetup_r>
 800707c:	b170      	cbz	r0, 800709c <_vfiprintf_r+0x5c>
 800707e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007080:	07dc      	lsls	r4, r3, #31
 8007082:	d504      	bpl.n	800708e <_vfiprintf_r+0x4e>
 8007084:	f04f 30ff 	mov.w	r0, #4294967295
 8007088:	b01d      	add	sp, #116	; 0x74
 800708a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800708e:	89ab      	ldrh	r3, [r5, #12]
 8007090:	0598      	lsls	r0, r3, #22
 8007092:	d4f7      	bmi.n	8007084 <_vfiprintf_r+0x44>
 8007094:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007096:	f7fe f9d1 	bl	800543c <__retarget_lock_release_recursive>
 800709a:	e7f3      	b.n	8007084 <_vfiprintf_r+0x44>
 800709c:	2300      	movs	r3, #0
 800709e:	9309      	str	r3, [sp, #36]	; 0x24
 80070a0:	2320      	movs	r3, #32
 80070a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80070aa:	2330      	movs	r3, #48	; 0x30
 80070ac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007260 <_vfiprintf_r+0x220>
 80070b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070b4:	f04f 0901 	mov.w	r9, #1
 80070b8:	4623      	mov	r3, r4
 80070ba:	469a      	mov	sl, r3
 80070bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070c0:	b10a      	cbz	r2, 80070c6 <_vfiprintf_r+0x86>
 80070c2:	2a25      	cmp	r2, #37	; 0x25
 80070c4:	d1f9      	bne.n	80070ba <_vfiprintf_r+0x7a>
 80070c6:	ebba 0b04 	subs.w	fp, sl, r4
 80070ca:	d00b      	beq.n	80070e4 <_vfiprintf_r+0xa4>
 80070cc:	465b      	mov	r3, fp
 80070ce:	4622      	mov	r2, r4
 80070d0:	4629      	mov	r1, r5
 80070d2:	4630      	mov	r0, r6
 80070d4:	f7ff ffa2 	bl	800701c <__sfputs_r>
 80070d8:	3001      	adds	r0, #1
 80070da:	f000 80a9 	beq.w	8007230 <_vfiprintf_r+0x1f0>
 80070de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070e0:	445a      	add	r2, fp
 80070e2:	9209      	str	r2, [sp, #36]	; 0x24
 80070e4:	f89a 3000 	ldrb.w	r3, [sl]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f000 80a1 	beq.w	8007230 <_vfiprintf_r+0x1f0>
 80070ee:	2300      	movs	r3, #0
 80070f0:	f04f 32ff 	mov.w	r2, #4294967295
 80070f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070f8:	f10a 0a01 	add.w	sl, sl, #1
 80070fc:	9304      	str	r3, [sp, #16]
 80070fe:	9307      	str	r3, [sp, #28]
 8007100:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007104:	931a      	str	r3, [sp, #104]	; 0x68
 8007106:	4654      	mov	r4, sl
 8007108:	2205      	movs	r2, #5
 800710a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800710e:	4854      	ldr	r0, [pc, #336]	; (8007260 <_vfiprintf_r+0x220>)
 8007110:	f7f9 f866 	bl	80001e0 <memchr>
 8007114:	9a04      	ldr	r2, [sp, #16]
 8007116:	b9d8      	cbnz	r0, 8007150 <_vfiprintf_r+0x110>
 8007118:	06d1      	lsls	r1, r2, #27
 800711a:	bf44      	itt	mi
 800711c:	2320      	movmi	r3, #32
 800711e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007122:	0713      	lsls	r3, r2, #28
 8007124:	bf44      	itt	mi
 8007126:	232b      	movmi	r3, #43	; 0x2b
 8007128:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800712c:	f89a 3000 	ldrb.w	r3, [sl]
 8007130:	2b2a      	cmp	r3, #42	; 0x2a
 8007132:	d015      	beq.n	8007160 <_vfiprintf_r+0x120>
 8007134:	9a07      	ldr	r2, [sp, #28]
 8007136:	4654      	mov	r4, sl
 8007138:	2000      	movs	r0, #0
 800713a:	f04f 0c0a 	mov.w	ip, #10
 800713e:	4621      	mov	r1, r4
 8007140:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007144:	3b30      	subs	r3, #48	; 0x30
 8007146:	2b09      	cmp	r3, #9
 8007148:	d94d      	bls.n	80071e6 <_vfiprintf_r+0x1a6>
 800714a:	b1b0      	cbz	r0, 800717a <_vfiprintf_r+0x13a>
 800714c:	9207      	str	r2, [sp, #28]
 800714e:	e014      	b.n	800717a <_vfiprintf_r+0x13a>
 8007150:	eba0 0308 	sub.w	r3, r0, r8
 8007154:	fa09 f303 	lsl.w	r3, r9, r3
 8007158:	4313      	orrs	r3, r2
 800715a:	9304      	str	r3, [sp, #16]
 800715c:	46a2      	mov	sl, r4
 800715e:	e7d2      	b.n	8007106 <_vfiprintf_r+0xc6>
 8007160:	9b03      	ldr	r3, [sp, #12]
 8007162:	1d19      	adds	r1, r3, #4
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	9103      	str	r1, [sp, #12]
 8007168:	2b00      	cmp	r3, #0
 800716a:	bfbb      	ittet	lt
 800716c:	425b      	neglt	r3, r3
 800716e:	f042 0202 	orrlt.w	r2, r2, #2
 8007172:	9307      	strge	r3, [sp, #28]
 8007174:	9307      	strlt	r3, [sp, #28]
 8007176:	bfb8      	it	lt
 8007178:	9204      	strlt	r2, [sp, #16]
 800717a:	7823      	ldrb	r3, [r4, #0]
 800717c:	2b2e      	cmp	r3, #46	; 0x2e
 800717e:	d10c      	bne.n	800719a <_vfiprintf_r+0x15a>
 8007180:	7863      	ldrb	r3, [r4, #1]
 8007182:	2b2a      	cmp	r3, #42	; 0x2a
 8007184:	d134      	bne.n	80071f0 <_vfiprintf_r+0x1b0>
 8007186:	9b03      	ldr	r3, [sp, #12]
 8007188:	1d1a      	adds	r2, r3, #4
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	9203      	str	r2, [sp, #12]
 800718e:	2b00      	cmp	r3, #0
 8007190:	bfb8      	it	lt
 8007192:	f04f 33ff 	movlt.w	r3, #4294967295
 8007196:	3402      	adds	r4, #2
 8007198:	9305      	str	r3, [sp, #20]
 800719a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007270 <_vfiprintf_r+0x230>
 800719e:	7821      	ldrb	r1, [r4, #0]
 80071a0:	2203      	movs	r2, #3
 80071a2:	4650      	mov	r0, sl
 80071a4:	f7f9 f81c 	bl	80001e0 <memchr>
 80071a8:	b138      	cbz	r0, 80071ba <_vfiprintf_r+0x17a>
 80071aa:	9b04      	ldr	r3, [sp, #16]
 80071ac:	eba0 000a 	sub.w	r0, r0, sl
 80071b0:	2240      	movs	r2, #64	; 0x40
 80071b2:	4082      	lsls	r2, r0
 80071b4:	4313      	orrs	r3, r2
 80071b6:	3401      	adds	r4, #1
 80071b8:	9304      	str	r3, [sp, #16]
 80071ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071be:	4829      	ldr	r0, [pc, #164]	; (8007264 <_vfiprintf_r+0x224>)
 80071c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071c4:	2206      	movs	r2, #6
 80071c6:	f7f9 f80b 	bl	80001e0 <memchr>
 80071ca:	2800      	cmp	r0, #0
 80071cc:	d03f      	beq.n	800724e <_vfiprintf_r+0x20e>
 80071ce:	4b26      	ldr	r3, [pc, #152]	; (8007268 <_vfiprintf_r+0x228>)
 80071d0:	bb1b      	cbnz	r3, 800721a <_vfiprintf_r+0x1da>
 80071d2:	9b03      	ldr	r3, [sp, #12]
 80071d4:	3307      	adds	r3, #7
 80071d6:	f023 0307 	bic.w	r3, r3, #7
 80071da:	3308      	adds	r3, #8
 80071dc:	9303      	str	r3, [sp, #12]
 80071de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071e0:	443b      	add	r3, r7
 80071e2:	9309      	str	r3, [sp, #36]	; 0x24
 80071e4:	e768      	b.n	80070b8 <_vfiprintf_r+0x78>
 80071e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80071ea:	460c      	mov	r4, r1
 80071ec:	2001      	movs	r0, #1
 80071ee:	e7a6      	b.n	800713e <_vfiprintf_r+0xfe>
 80071f0:	2300      	movs	r3, #0
 80071f2:	3401      	adds	r4, #1
 80071f4:	9305      	str	r3, [sp, #20]
 80071f6:	4619      	mov	r1, r3
 80071f8:	f04f 0c0a 	mov.w	ip, #10
 80071fc:	4620      	mov	r0, r4
 80071fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007202:	3a30      	subs	r2, #48	; 0x30
 8007204:	2a09      	cmp	r2, #9
 8007206:	d903      	bls.n	8007210 <_vfiprintf_r+0x1d0>
 8007208:	2b00      	cmp	r3, #0
 800720a:	d0c6      	beq.n	800719a <_vfiprintf_r+0x15a>
 800720c:	9105      	str	r1, [sp, #20]
 800720e:	e7c4      	b.n	800719a <_vfiprintf_r+0x15a>
 8007210:	fb0c 2101 	mla	r1, ip, r1, r2
 8007214:	4604      	mov	r4, r0
 8007216:	2301      	movs	r3, #1
 8007218:	e7f0      	b.n	80071fc <_vfiprintf_r+0x1bc>
 800721a:	ab03      	add	r3, sp, #12
 800721c:	9300      	str	r3, [sp, #0]
 800721e:	462a      	mov	r2, r5
 8007220:	4b12      	ldr	r3, [pc, #72]	; (800726c <_vfiprintf_r+0x22c>)
 8007222:	a904      	add	r1, sp, #16
 8007224:	4630      	mov	r0, r6
 8007226:	f7fd fb9f 	bl	8004968 <_printf_float>
 800722a:	4607      	mov	r7, r0
 800722c:	1c78      	adds	r0, r7, #1
 800722e:	d1d6      	bne.n	80071de <_vfiprintf_r+0x19e>
 8007230:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007232:	07d9      	lsls	r1, r3, #31
 8007234:	d405      	bmi.n	8007242 <_vfiprintf_r+0x202>
 8007236:	89ab      	ldrh	r3, [r5, #12]
 8007238:	059a      	lsls	r2, r3, #22
 800723a:	d402      	bmi.n	8007242 <_vfiprintf_r+0x202>
 800723c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800723e:	f7fe f8fd 	bl	800543c <__retarget_lock_release_recursive>
 8007242:	89ab      	ldrh	r3, [r5, #12]
 8007244:	065b      	lsls	r3, r3, #25
 8007246:	f53f af1d 	bmi.w	8007084 <_vfiprintf_r+0x44>
 800724a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800724c:	e71c      	b.n	8007088 <_vfiprintf_r+0x48>
 800724e:	ab03      	add	r3, sp, #12
 8007250:	9300      	str	r3, [sp, #0]
 8007252:	462a      	mov	r2, r5
 8007254:	4b05      	ldr	r3, [pc, #20]	; (800726c <_vfiprintf_r+0x22c>)
 8007256:	a904      	add	r1, sp, #16
 8007258:	4630      	mov	r0, r6
 800725a:	f7fd fe29 	bl	8004eb0 <_printf_i>
 800725e:	e7e4      	b.n	800722a <_vfiprintf_r+0x1ea>
 8007260:	08007a6c 	.word	0x08007a6c
 8007264:	08007a76 	.word	0x08007a76
 8007268:	08004969 	.word	0x08004969
 800726c:	0800701d 	.word	0x0800701d
 8007270:	08007a72 	.word	0x08007a72

08007274 <__swbuf_r>:
 8007274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007276:	460e      	mov	r6, r1
 8007278:	4614      	mov	r4, r2
 800727a:	4605      	mov	r5, r0
 800727c:	b118      	cbz	r0, 8007286 <__swbuf_r+0x12>
 800727e:	6a03      	ldr	r3, [r0, #32]
 8007280:	b90b      	cbnz	r3, 8007286 <__swbuf_r+0x12>
 8007282:	f7fd ffc3 	bl	800520c <__sinit>
 8007286:	69a3      	ldr	r3, [r4, #24]
 8007288:	60a3      	str	r3, [r4, #8]
 800728a:	89a3      	ldrh	r3, [r4, #12]
 800728c:	071a      	lsls	r2, r3, #28
 800728e:	d525      	bpl.n	80072dc <__swbuf_r+0x68>
 8007290:	6923      	ldr	r3, [r4, #16]
 8007292:	b31b      	cbz	r3, 80072dc <__swbuf_r+0x68>
 8007294:	6823      	ldr	r3, [r4, #0]
 8007296:	6922      	ldr	r2, [r4, #16]
 8007298:	1a98      	subs	r0, r3, r2
 800729a:	6963      	ldr	r3, [r4, #20]
 800729c:	b2f6      	uxtb	r6, r6
 800729e:	4283      	cmp	r3, r0
 80072a0:	4637      	mov	r7, r6
 80072a2:	dc04      	bgt.n	80072ae <__swbuf_r+0x3a>
 80072a4:	4621      	mov	r1, r4
 80072a6:	4628      	mov	r0, r5
 80072a8:	f7ff fd9e 	bl	8006de8 <_fflush_r>
 80072ac:	b9e0      	cbnz	r0, 80072e8 <__swbuf_r+0x74>
 80072ae:	68a3      	ldr	r3, [r4, #8]
 80072b0:	3b01      	subs	r3, #1
 80072b2:	60a3      	str	r3, [r4, #8]
 80072b4:	6823      	ldr	r3, [r4, #0]
 80072b6:	1c5a      	adds	r2, r3, #1
 80072b8:	6022      	str	r2, [r4, #0]
 80072ba:	701e      	strb	r6, [r3, #0]
 80072bc:	6962      	ldr	r2, [r4, #20]
 80072be:	1c43      	adds	r3, r0, #1
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d004      	beq.n	80072ce <__swbuf_r+0x5a>
 80072c4:	89a3      	ldrh	r3, [r4, #12]
 80072c6:	07db      	lsls	r3, r3, #31
 80072c8:	d506      	bpl.n	80072d8 <__swbuf_r+0x64>
 80072ca:	2e0a      	cmp	r6, #10
 80072cc:	d104      	bne.n	80072d8 <__swbuf_r+0x64>
 80072ce:	4621      	mov	r1, r4
 80072d0:	4628      	mov	r0, r5
 80072d2:	f7ff fd89 	bl	8006de8 <_fflush_r>
 80072d6:	b938      	cbnz	r0, 80072e8 <__swbuf_r+0x74>
 80072d8:	4638      	mov	r0, r7
 80072da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072dc:	4621      	mov	r1, r4
 80072de:	4628      	mov	r0, r5
 80072e0:	f000 f806 	bl	80072f0 <__swsetup_r>
 80072e4:	2800      	cmp	r0, #0
 80072e6:	d0d5      	beq.n	8007294 <__swbuf_r+0x20>
 80072e8:	f04f 37ff 	mov.w	r7, #4294967295
 80072ec:	e7f4      	b.n	80072d8 <__swbuf_r+0x64>
	...

080072f0 <__swsetup_r>:
 80072f0:	b538      	push	{r3, r4, r5, lr}
 80072f2:	4b2a      	ldr	r3, [pc, #168]	; (800739c <__swsetup_r+0xac>)
 80072f4:	4605      	mov	r5, r0
 80072f6:	6818      	ldr	r0, [r3, #0]
 80072f8:	460c      	mov	r4, r1
 80072fa:	b118      	cbz	r0, 8007304 <__swsetup_r+0x14>
 80072fc:	6a03      	ldr	r3, [r0, #32]
 80072fe:	b90b      	cbnz	r3, 8007304 <__swsetup_r+0x14>
 8007300:	f7fd ff84 	bl	800520c <__sinit>
 8007304:	89a3      	ldrh	r3, [r4, #12]
 8007306:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800730a:	0718      	lsls	r0, r3, #28
 800730c:	d422      	bmi.n	8007354 <__swsetup_r+0x64>
 800730e:	06d9      	lsls	r1, r3, #27
 8007310:	d407      	bmi.n	8007322 <__swsetup_r+0x32>
 8007312:	2309      	movs	r3, #9
 8007314:	602b      	str	r3, [r5, #0]
 8007316:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800731a:	81a3      	strh	r3, [r4, #12]
 800731c:	f04f 30ff 	mov.w	r0, #4294967295
 8007320:	e034      	b.n	800738c <__swsetup_r+0x9c>
 8007322:	0758      	lsls	r0, r3, #29
 8007324:	d512      	bpl.n	800734c <__swsetup_r+0x5c>
 8007326:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007328:	b141      	cbz	r1, 800733c <__swsetup_r+0x4c>
 800732a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800732e:	4299      	cmp	r1, r3
 8007330:	d002      	beq.n	8007338 <__swsetup_r+0x48>
 8007332:	4628      	mov	r0, r5
 8007334:	f7fe fefe 	bl	8006134 <_free_r>
 8007338:	2300      	movs	r3, #0
 800733a:	6363      	str	r3, [r4, #52]	; 0x34
 800733c:	89a3      	ldrh	r3, [r4, #12]
 800733e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007342:	81a3      	strh	r3, [r4, #12]
 8007344:	2300      	movs	r3, #0
 8007346:	6063      	str	r3, [r4, #4]
 8007348:	6923      	ldr	r3, [r4, #16]
 800734a:	6023      	str	r3, [r4, #0]
 800734c:	89a3      	ldrh	r3, [r4, #12]
 800734e:	f043 0308 	orr.w	r3, r3, #8
 8007352:	81a3      	strh	r3, [r4, #12]
 8007354:	6923      	ldr	r3, [r4, #16]
 8007356:	b94b      	cbnz	r3, 800736c <__swsetup_r+0x7c>
 8007358:	89a3      	ldrh	r3, [r4, #12]
 800735a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800735e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007362:	d003      	beq.n	800736c <__swsetup_r+0x7c>
 8007364:	4621      	mov	r1, r4
 8007366:	4628      	mov	r0, r5
 8007368:	f000 f884 	bl	8007474 <__smakebuf_r>
 800736c:	89a0      	ldrh	r0, [r4, #12]
 800736e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007372:	f010 0301 	ands.w	r3, r0, #1
 8007376:	d00a      	beq.n	800738e <__swsetup_r+0x9e>
 8007378:	2300      	movs	r3, #0
 800737a:	60a3      	str	r3, [r4, #8]
 800737c:	6963      	ldr	r3, [r4, #20]
 800737e:	425b      	negs	r3, r3
 8007380:	61a3      	str	r3, [r4, #24]
 8007382:	6923      	ldr	r3, [r4, #16]
 8007384:	b943      	cbnz	r3, 8007398 <__swsetup_r+0xa8>
 8007386:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800738a:	d1c4      	bne.n	8007316 <__swsetup_r+0x26>
 800738c:	bd38      	pop	{r3, r4, r5, pc}
 800738e:	0781      	lsls	r1, r0, #30
 8007390:	bf58      	it	pl
 8007392:	6963      	ldrpl	r3, [r4, #20]
 8007394:	60a3      	str	r3, [r4, #8]
 8007396:	e7f4      	b.n	8007382 <__swsetup_r+0x92>
 8007398:	2000      	movs	r0, #0
 800739a:	e7f7      	b.n	800738c <__swsetup_r+0x9c>
 800739c:	200000a4 	.word	0x200000a4

080073a0 <_raise_r>:
 80073a0:	291f      	cmp	r1, #31
 80073a2:	b538      	push	{r3, r4, r5, lr}
 80073a4:	4604      	mov	r4, r0
 80073a6:	460d      	mov	r5, r1
 80073a8:	d904      	bls.n	80073b4 <_raise_r+0x14>
 80073aa:	2316      	movs	r3, #22
 80073ac:	6003      	str	r3, [r0, #0]
 80073ae:	f04f 30ff 	mov.w	r0, #4294967295
 80073b2:	bd38      	pop	{r3, r4, r5, pc}
 80073b4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80073b6:	b112      	cbz	r2, 80073be <_raise_r+0x1e>
 80073b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80073bc:	b94b      	cbnz	r3, 80073d2 <_raise_r+0x32>
 80073be:	4620      	mov	r0, r4
 80073c0:	f000 f830 	bl	8007424 <_getpid_r>
 80073c4:	462a      	mov	r2, r5
 80073c6:	4601      	mov	r1, r0
 80073c8:	4620      	mov	r0, r4
 80073ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073ce:	f000 b817 	b.w	8007400 <_kill_r>
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d00a      	beq.n	80073ec <_raise_r+0x4c>
 80073d6:	1c59      	adds	r1, r3, #1
 80073d8:	d103      	bne.n	80073e2 <_raise_r+0x42>
 80073da:	2316      	movs	r3, #22
 80073dc:	6003      	str	r3, [r0, #0]
 80073de:	2001      	movs	r0, #1
 80073e0:	e7e7      	b.n	80073b2 <_raise_r+0x12>
 80073e2:	2400      	movs	r4, #0
 80073e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80073e8:	4628      	mov	r0, r5
 80073ea:	4798      	blx	r3
 80073ec:	2000      	movs	r0, #0
 80073ee:	e7e0      	b.n	80073b2 <_raise_r+0x12>

080073f0 <raise>:
 80073f0:	4b02      	ldr	r3, [pc, #8]	; (80073fc <raise+0xc>)
 80073f2:	4601      	mov	r1, r0
 80073f4:	6818      	ldr	r0, [r3, #0]
 80073f6:	f7ff bfd3 	b.w	80073a0 <_raise_r>
 80073fa:	bf00      	nop
 80073fc:	200000a4 	.word	0x200000a4

08007400 <_kill_r>:
 8007400:	b538      	push	{r3, r4, r5, lr}
 8007402:	4d07      	ldr	r5, [pc, #28]	; (8007420 <_kill_r+0x20>)
 8007404:	2300      	movs	r3, #0
 8007406:	4604      	mov	r4, r0
 8007408:	4608      	mov	r0, r1
 800740a:	4611      	mov	r1, r2
 800740c:	602b      	str	r3, [r5, #0]
 800740e:	f7fa fa13 	bl	8001838 <_kill>
 8007412:	1c43      	adds	r3, r0, #1
 8007414:	d102      	bne.n	800741c <_kill_r+0x1c>
 8007416:	682b      	ldr	r3, [r5, #0]
 8007418:	b103      	cbz	r3, 800741c <_kill_r+0x1c>
 800741a:	6023      	str	r3, [r4, #0]
 800741c:	bd38      	pop	{r3, r4, r5, pc}
 800741e:	bf00      	nop
 8007420:	200004d4 	.word	0x200004d4

08007424 <_getpid_r>:
 8007424:	f7fa ba00 	b.w	8001828 <_getpid>

08007428 <__swhatbuf_r>:
 8007428:	b570      	push	{r4, r5, r6, lr}
 800742a:	460c      	mov	r4, r1
 800742c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007430:	2900      	cmp	r1, #0
 8007432:	b096      	sub	sp, #88	; 0x58
 8007434:	4615      	mov	r5, r2
 8007436:	461e      	mov	r6, r3
 8007438:	da0d      	bge.n	8007456 <__swhatbuf_r+0x2e>
 800743a:	89a3      	ldrh	r3, [r4, #12]
 800743c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007440:	f04f 0100 	mov.w	r1, #0
 8007444:	bf0c      	ite	eq
 8007446:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800744a:	2340      	movne	r3, #64	; 0x40
 800744c:	2000      	movs	r0, #0
 800744e:	6031      	str	r1, [r6, #0]
 8007450:	602b      	str	r3, [r5, #0]
 8007452:	b016      	add	sp, #88	; 0x58
 8007454:	bd70      	pop	{r4, r5, r6, pc}
 8007456:	466a      	mov	r2, sp
 8007458:	f000 f848 	bl	80074ec <_fstat_r>
 800745c:	2800      	cmp	r0, #0
 800745e:	dbec      	blt.n	800743a <__swhatbuf_r+0x12>
 8007460:	9901      	ldr	r1, [sp, #4]
 8007462:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007466:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800746a:	4259      	negs	r1, r3
 800746c:	4159      	adcs	r1, r3
 800746e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007472:	e7eb      	b.n	800744c <__swhatbuf_r+0x24>

08007474 <__smakebuf_r>:
 8007474:	898b      	ldrh	r3, [r1, #12]
 8007476:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007478:	079d      	lsls	r5, r3, #30
 800747a:	4606      	mov	r6, r0
 800747c:	460c      	mov	r4, r1
 800747e:	d507      	bpl.n	8007490 <__smakebuf_r+0x1c>
 8007480:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007484:	6023      	str	r3, [r4, #0]
 8007486:	6123      	str	r3, [r4, #16]
 8007488:	2301      	movs	r3, #1
 800748a:	6163      	str	r3, [r4, #20]
 800748c:	b002      	add	sp, #8
 800748e:	bd70      	pop	{r4, r5, r6, pc}
 8007490:	ab01      	add	r3, sp, #4
 8007492:	466a      	mov	r2, sp
 8007494:	f7ff ffc8 	bl	8007428 <__swhatbuf_r>
 8007498:	9900      	ldr	r1, [sp, #0]
 800749a:	4605      	mov	r5, r0
 800749c:	4630      	mov	r0, r6
 800749e:	f7fe febd 	bl	800621c <_malloc_r>
 80074a2:	b948      	cbnz	r0, 80074b8 <__smakebuf_r+0x44>
 80074a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074a8:	059a      	lsls	r2, r3, #22
 80074aa:	d4ef      	bmi.n	800748c <__smakebuf_r+0x18>
 80074ac:	f023 0303 	bic.w	r3, r3, #3
 80074b0:	f043 0302 	orr.w	r3, r3, #2
 80074b4:	81a3      	strh	r3, [r4, #12]
 80074b6:	e7e3      	b.n	8007480 <__smakebuf_r+0xc>
 80074b8:	89a3      	ldrh	r3, [r4, #12]
 80074ba:	6020      	str	r0, [r4, #0]
 80074bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074c0:	81a3      	strh	r3, [r4, #12]
 80074c2:	9b00      	ldr	r3, [sp, #0]
 80074c4:	6163      	str	r3, [r4, #20]
 80074c6:	9b01      	ldr	r3, [sp, #4]
 80074c8:	6120      	str	r0, [r4, #16]
 80074ca:	b15b      	cbz	r3, 80074e4 <__smakebuf_r+0x70>
 80074cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074d0:	4630      	mov	r0, r6
 80074d2:	f000 f81d 	bl	8007510 <_isatty_r>
 80074d6:	b128      	cbz	r0, 80074e4 <__smakebuf_r+0x70>
 80074d8:	89a3      	ldrh	r3, [r4, #12]
 80074da:	f023 0303 	bic.w	r3, r3, #3
 80074de:	f043 0301 	orr.w	r3, r3, #1
 80074e2:	81a3      	strh	r3, [r4, #12]
 80074e4:	89a3      	ldrh	r3, [r4, #12]
 80074e6:	431d      	orrs	r5, r3
 80074e8:	81a5      	strh	r5, [r4, #12]
 80074ea:	e7cf      	b.n	800748c <__smakebuf_r+0x18>

080074ec <_fstat_r>:
 80074ec:	b538      	push	{r3, r4, r5, lr}
 80074ee:	4d07      	ldr	r5, [pc, #28]	; (800750c <_fstat_r+0x20>)
 80074f0:	2300      	movs	r3, #0
 80074f2:	4604      	mov	r4, r0
 80074f4:	4608      	mov	r0, r1
 80074f6:	4611      	mov	r1, r2
 80074f8:	602b      	str	r3, [r5, #0]
 80074fa:	f7fa f9fc 	bl	80018f6 <_fstat>
 80074fe:	1c43      	adds	r3, r0, #1
 8007500:	d102      	bne.n	8007508 <_fstat_r+0x1c>
 8007502:	682b      	ldr	r3, [r5, #0]
 8007504:	b103      	cbz	r3, 8007508 <_fstat_r+0x1c>
 8007506:	6023      	str	r3, [r4, #0]
 8007508:	bd38      	pop	{r3, r4, r5, pc}
 800750a:	bf00      	nop
 800750c:	200004d4 	.word	0x200004d4

08007510 <_isatty_r>:
 8007510:	b538      	push	{r3, r4, r5, lr}
 8007512:	4d06      	ldr	r5, [pc, #24]	; (800752c <_isatty_r+0x1c>)
 8007514:	2300      	movs	r3, #0
 8007516:	4604      	mov	r4, r0
 8007518:	4608      	mov	r0, r1
 800751a:	602b      	str	r3, [r5, #0]
 800751c:	f7fa f9fb 	bl	8001916 <_isatty>
 8007520:	1c43      	adds	r3, r0, #1
 8007522:	d102      	bne.n	800752a <_isatty_r+0x1a>
 8007524:	682b      	ldr	r3, [r5, #0]
 8007526:	b103      	cbz	r3, 800752a <_isatty_r+0x1a>
 8007528:	6023      	str	r3, [r4, #0]
 800752a:	bd38      	pop	{r3, r4, r5, pc}
 800752c:	200004d4 	.word	0x200004d4

08007530 <acosf>:
 8007530:	b508      	push	{r3, lr}
 8007532:	ed2d 8b02 	vpush	{d8}
 8007536:	eeb0 8a40 	vmov.f32	s16, s0
 800753a:	f000 f855 	bl	80075e8 <__ieee754_acosf>
 800753e:	eeb4 8a48 	vcmp.f32	s16, s16
 8007542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007546:	eef0 8a40 	vmov.f32	s17, s0
 800754a:	d615      	bvs.n	8007578 <acosf+0x48>
 800754c:	eeb0 0a48 	vmov.f32	s0, s16
 8007550:	f000 f838 	bl	80075c4 <fabsf>
 8007554:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007558:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800755c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007560:	dd0a      	ble.n	8007578 <acosf+0x48>
 8007562:	f7fd ff3f 	bl	80053e4 <__errno>
 8007566:	ecbd 8b02 	vpop	{d8}
 800756a:	2321      	movs	r3, #33	; 0x21
 800756c:	6003      	str	r3, [r0, #0]
 800756e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007572:	4804      	ldr	r0, [pc, #16]	; (8007584 <acosf+0x54>)
 8007574:	f000 b82e 	b.w	80075d4 <nanf>
 8007578:	eeb0 0a68 	vmov.f32	s0, s17
 800757c:	ecbd 8b02 	vpop	{d8}
 8007580:	bd08      	pop	{r3, pc}
 8007582:	bf00      	nop
 8007584:	08007ac2 	.word	0x08007ac2

08007588 <sqrtf>:
 8007588:	b508      	push	{r3, lr}
 800758a:	ed2d 8b02 	vpush	{d8}
 800758e:	eeb0 8a40 	vmov.f32	s16, s0
 8007592:	f000 f825 	bl	80075e0 <__ieee754_sqrtf>
 8007596:	eeb4 8a48 	vcmp.f32	s16, s16
 800759a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800759e:	d60c      	bvs.n	80075ba <sqrtf+0x32>
 80075a0:	eddf 8a07 	vldr	s17, [pc, #28]	; 80075c0 <sqrtf+0x38>
 80075a4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80075a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ac:	d505      	bpl.n	80075ba <sqrtf+0x32>
 80075ae:	f7fd ff19 	bl	80053e4 <__errno>
 80075b2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80075b6:	2321      	movs	r3, #33	; 0x21
 80075b8:	6003      	str	r3, [r0, #0]
 80075ba:	ecbd 8b02 	vpop	{d8}
 80075be:	bd08      	pop	{r3, pc}
 80075c0:	00000000 	.word	0x00000000

080075c4 <fabsf>:
 80075c4:	ee10 3a10 	vmov	r3, s0
 80075c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80075cc:	ee00 3a10 	vmov	s0, r3
 80075d0:	4770      	bx	lr
	...

080075d4 <nanf>:
 80075d4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80075dc <nanf+0x8>
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	7fc00000 	.word	0x7fc00000

080075e0 <__ieee754_sqrtf>:
 80075e0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80075e4:	4770      	bx	lr
	...

080075e8 <__ieee754_acosf>:
 80075e8:	b508      	push	{r3, lr}
 80075ea:	ee10 3a10 	vmov	r3, s0
 80075ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80075f2:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80075f6:	ed2d 8b0c 	vpush	{d8-d13}
 80075fa:	d10a      	bne.n	8007612 <__ieee754_acosf+0x2a>
 80075fc:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8007794 <__ieee754_acosf+0x1ac>
 8007600:	eddf 7a65 	vldr	s15, [pc, #404]	; 8007798 <__ieee754_acosf+0x1b0>
 8007604:	2b00      	cmp	r3, #0
 8007606:	bfd8      	it	le
 8007608:	eeb0 0a67 	vmovle.f32	s0, s15
 800760c:	ecbd 8b0c 	vpop	{d8-d13}
 8007610:	bd08      	pop	{r3, pc}
 8007612:	dd04      	ble.n	800761e <__ieee754_acosf+0x36>
 8007614:	ee30 8a40 	vsub.f32	s16, s0, s0
 8007618:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800761c:	e7f6      	b.n	800760c <__ieee754_acosf+0x24>
 800761e:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 8007622:	da3c      	bge.n	800769e <__ieee754_acosf+0xb6>
 8007624:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 8007628:	f340 80b1 	ble.w	800778e <__ieee754_acosf+0x1a6>
 800762c:	ee60 7a00 	vmul.f32	s15, s0, s0
 8007630:	eddf 6a5a 	vldr	s13, [pc, #360]	; 800779c <__ieee754_acosf+0x1b4>
 8007634:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80077a0 <__ieee754_acosf+0x1b8>
 8007638:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 80077a4 <__ieee754_acosf+0x1bc>
 800763c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8007640:	eddf 6a59 	vldr	s13, [pc, #356]	; 80077a8 <__ieee754_acosf+0x1c0>
 8007644:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007648:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80077ac <__ieee754_acosf+0x1c4>
 800764c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007650:	eddf 6a57 	vldr	s13, [pc, #348]	; 80077b0 <__ieee754_acosf+0x1c8>
 8007654:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007658:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80077b4 <__ieee754_acosf+0x1cc>
 800765c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007660:	eddf 6a55 	vldr	s13, [pc, #340]	; 80077b8 <__ieee754_acosf+0x1d0>
 8007664:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8007668:	eddf 6a54 	vldr	s13, [pc, #336]	; 80077bc <__ieee754_acosf+0x1d4>
 800766c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007670:	ed9f 6a53 	vldr	s12, [pc, #332]	; 80077c0 <__ieee754_acosf+0x1d8>
 8007674:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8007678:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800767c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007680:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007684:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007688:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80077c4 <__ieee754_acosf+0x1dc>
 800768c:	eea0 7a67 	vfms.f32	s14, s0, s15
 8007690:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80077c8 <__ieee754_acosf+0x1e0>
 8007694:	ee30 7a47 	vsub.f32	s14, s0, s14
 8007698:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800769c:	e7b6      	b.n	800760c <__ieee754_acosf+0x24>
 800769e:	2b00      	cmp	r3, #0
 80076a0:	eddf da3e 	vldr	s27, [pc, #248]	; 800779c <__ieee754_acosf+0x1b4>
 80076a4:	eddf ca3e 	vldr	s25, [pc, #248]	; 80077a0 <__ieee754_acosf+0x1b8>
 80076a8:	ed9f ca3f 	vldr	s24, [pc, #252]	; 80077a8 <__ieee754_acosf+0x1c0>
 80076ac:	eddf ba3f 	vldr	s23, [pc, #252]	; 80077ac <__ieee754_acosf+0x1c4>
 80076b0:	ed9f ba3f 	vldr	s22, [pc, #252]	; 80077b0 <__ieee754_acosf+0x1c8>
 80076b4:	eddf 8a3f 	vldr	s17, [pc, #252]	; 80077b4 <__ieee754_acosf+0x1cc>
 80076b8:	ed9f da3f 	vldr	s26, [pc, #252]	; 80077b8 <__ieee754_acosf+0x1d0>
 80076bc:	eddf aa39 	vldr	s21, [pc, #228]	; 80077a4 <__ieee754_acosf+0x1bc>
 80076c0:	ed9f aa3e 	vldr	s20, [pc, #248]	; 80077bc <__ieee754_acosf+0x1d4>
 80076c4:	eddf 9a3e 	vldr	s19, [pc, #248]	; 80077c0 <__ieee754_acosf+0x1d8>
 80076c8:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80076cc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80076d0:	da28      	bge.n	8007724 <__ieee754_acosf+0x13c>
 80076d2:	ee30 0a09 	vadd.f32	s0, s0, s18
 80076d6:	ee20 0a27 	vmul.f32	s0, s0, s15
 80076da:	eee0 ca2d 	vfma.f32	s25, s0, s27
 80076de:	eee0 aa0d 	vfma.f32	s21, s0, s26
 80076e2:	eeac ca80 	vfma.f32	s24, s25, s0
 80076e6:	eeaa aa80 	vfma.f32	s20, s21, s0
 80076ea:	eeec ba00 	vfma.f32	s23, s24, s0
 80076ee:	eeea 9a00 	vfma.f32	s19, s20, s0
 80076f2:	eeab ba80 	vfma.f32	s22, s23, s0
 80076f6:	eea9 9a80 	vfma.f32	s18, s19, s0
 80076fa:	eeeb 8a00 	vfma.f32	s17, s22, s0
 80076fe:	ee68 8a80 	vmul.f32	s17, s17, s0
 8007702:	f7ff ff6d 	bl	80075e0 <__ieee754_sqrtf>
 8007706:	ee88 7a89 	vdiv.f32	s14, s17, s18
 800770a:	eddf 7a30 	vldr	s15, [pc, #192]	; 80077cc <__ieee754_acosf+0x1e4>
 800770e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007712:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007716:	ee77 7a80 	vadd.f32	s15, s15, s0
 800771a:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 80077d0 <__ieee754_acosf+0x1e8>
 800771e:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8007722:	e773      	b.n	800760c <__ieee754_acosf+0x24>
 8007724:	ee39 8a40 	vsub.f32	s16, s18, s0
 8007728:	ee28 8a27 	vmul.f32	s16, s16, s15
 800772c:	eeb0 0a48 	vmov.f32	s0, s16
 8007730:	f7ff ff56 	bl	80075e0 <__ieee754_sqrtf>
 8007734:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8007738:	eee8 aa0d 	vfma.f32	s21, s16, s26
 800773c:	eeac ca88 	vfma.f32	s24, s25, s16
 8007740:	eeaa aa88 	vfma.f32	s20, s21, s16
 8007744:	eeec ba08 	vfma.f32	s23, s24, s16
 8007748:	ee10 3a10 	vmov	r3, s0
 800774c:	eeab ba88 	vfma.f32	s22, s23, s16
 8007750:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007754:	f023 030f 	bic.w	r3, r3, #15
 8007758:	eeea 9a08 	vfma.f32	s19, s20, s16
 800775c:	ee07 3a90 	vmov	s15, r3
 8007760:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8007764:	eeb0 6a48 	vmov.f32	s12, s16
 8007768:	eea7 6ae7 	vfms.f32	s12, s15, s15
 800776c:	eea9 9a88 	vfma.f32	s18, s19, s16
 8007770:	ee70 6a27 	vadd.f32	s13, s0, s15
 8007774:	ee68 8a88 	vmul.f32	s17, s17, s16
 8007778:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800777c:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8007780:	eea0 7a26 	vfma.f32	s14, s0, s13
 8007784:	ee37 0a87 	vadd.f32	s0, s15, s14
 8007788:	ee30 0a00 	vadd.f32	s0, s0, s0
 800778c:	e73e      	b.n	800760c <__ieee754_acosf+0x24>
 800778e:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80077d4 <__ieee754_acosf+0x1ec>
 8007792:	e73b      	b.n	800760c <__ieee754_acosf+0x24>
 8007794:	00000000 	.word	0x00000000
 8007798:	40490fdb 	.word	0x40490fdb
 800779c:	3811ef08 	.word	0x3811ef08
 80077a0:	3a4f7f04 	.word	0x3a4f7f04
 80077a4:	bf303361 	.word	0xbf303361
 80077a8:	bd241146 	.word	0xbd241146
 80077ac:	3e4e0aa8 	.word	0x3e4e0aa8
 80077b0:	bea6b090 	.word	0xbea6b090
 80077b4:	3e2aaaab 	.word	0x3e2aaaab
 80077b8:	3d9dc62e 	.word	0x3d9dc62e
 80077bc:	4001572d 	.word	0x4001572d
 80077c0:	c019d139 	.word	0xc019d139
 80077c4:	33a22168 	.word	0x33a22168
 80077c8:	3fc90fda 	.word	0x3fc90fda
 80077cc:	b3a22168 	.word	0xb3a22168
 80077d0:	40490fda 	.word	0x40490fda
 80077d4:	3fc90fdb 	.word	0x3fc90fdb

080077d8 <_init>:
 80077d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077da:	bf00      	nop
 80077dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077de:	bc08      	pop	{r3}
 80077e0:	469e      	mov	lr, r3
 80077e2:	4770      	bx	lr

080077e4 <_fini>:
 80077e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077e6:	bf00      	nop
 80077e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ea:	bc08      	pop	{r3}
 80077ec:	469e      	mov	lr, r3
 80077ee:	4770      	bx	lr
