
MCP2515.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a14  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004bdc  08004bdc  00005bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c0c  08004c0c  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004c0c  08004c0c  00005c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c14  08004c14  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c14  08004c14  00005c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c18  08004c18  00005c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004c1c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  2000000c  08004c28  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08004c28  00006148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bfe7  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b43  00000000  00000000  00012023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a0  00000000  00000000  00013b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000765  00000000  00000000  00014508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002674a  00000000  00000000  00014c6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd82  00000000  00000000  0003b3b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea63f  00000000  00000000  00048139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00132778  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026e0  00000000  00000000  001327bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  00134e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004bc4 	.word	0x08004bc4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08004bc4 	.word	0x08004bc4

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* CAN 통신 초기화  */
int CANSPI_Initialize(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b088      	sub	sp, #32
 80004fc:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;

  /* Rx Mask values 초기화 */
  RXM0reg.RXM0SIDH = 0x00;
 80004fe:	2300      	movs	r3, #0
 8000500:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 8000502:	2300      	movs	r3, #0
 8000504:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 8000506:	2300      	movs	r3, #0
 8000508:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 800050a:	2300      	movs	r3, #0
 800050c:	71fb      	strb	r3, [r7, #7]

  RXM1reg.RXM1SIDH = 0x00;
 800050e:	2300      	movs	r3, #0
 8000510:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 8000512:	2300      	movs	r3, #0
 8000514:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 8000516:	2300      	movs	r3, #0
 8000518:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 800051a:	2300      	movs	r3, #0
 800051c:	70fb      	strb	r3, [r7, #3]

  /* Rx Filter values 초기화 */
  RXF0reg.RXF0SIDH = 0x00;
 800051e:	2300      	movs	r3, #0
 8000520:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 8000522:	2300      	movs	r3, #0
 8000524:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 8000526:	2300      	movs	r3, #0
 8000528:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 800052a:	2300      	movs	r3, #0
 800052c:	77fb      	strb	r3, [r7, #31]

  RXF1reg.RXF1SIDH = 0x00;
 800052e:	2300      	movs	r3, #0
 8000530:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 8000532:	2308      	movs	r3, #8
 8000534:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 8000536:	2300      	movs	r3, #0
 8000538:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 800053a:	2300      	movs	r3, #0
 800053c:	76fb      	strb	r3, [r7, #27]

  RXF2reg.RXF2SIDH = 0x00;
 800053e:	2300      	movs	r3, #0
 8000540:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 8000542:	2300      	movs	r3, #0
 8000544:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 8000546:	2300      	movs	r3, #0
 8000548:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 800054a:	2300      	movs	r3, #0
 800054c:	75fb      	strb	r3, [r7, #23]

  RXF3reg.RXF3SIDH = 0x00;
 800054e:	2300      	movs	r3, #0
 8000550:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 8000552:	2300      	movs	r3, #0
 8000554:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 8000556:	2300      	movs	r3, #0
 8000558:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 800055a:	2300      	movs	r3, #0
 800055c:	74fb      	strb	r3, [r7, #19]

  RXF4reg.RXF4SIDH = 0x00;
 800055e:	2300      	movs	r3, #0
 8000560:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 8000562:	2300      	movs	r3, #0
 8000564:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 8000566:	2300      	movs	r3, #0
 8000568:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 800056a:	2300      	movs	r3, #0
 800056c:	73fb      	strb	r3, [r7, #15]

  RXF5reg.RXF5SIDH = 0x00;
 800056e:	2300      	movs	r3, #0
 8000570:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 8000572:	2308      	movs	r3, #8
 8000574:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 8000576:	2300      	movs	r3, #0
 8000578:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 800057a:	2300      	movs	r3, #0
 800057c:	72fb      	strb	r3, [r7, #11]

  /* MCP2515 초기화, SPI 통신 상태 확인 */
  if(!MCP2515_Initialize())
 800057e:	f000 fa13 	bl	80009a8 <MCP2515_Initialize>
 8000582:	4603      	mov	r3, r0
 8000584:	f083 0301 	eor.w	r3, r3, #1
 8000588:	b2db      	uxtb	r3, r3
 800058a:	2b00      	cmp	r3, #0
 800058c:	d002      	beq.n	8000594 <CANSPI_Initialize+0x9c>
    return -1;
 800058e:	f04f 33ff 	mov.w	r3, #4294967295
 8000592:	e060      	b.n	8000656 <CANSPI_Initialize+0x15e>

  /* Configuration 모드로 설정 */
  if(!MCP2515_SetConfigMode())
 8000594:	f000 fa2a 	bl	80009ec <MCP2515_SetConfigMode>
 8000598:	4603      	mov	r3, r0
 800059a:	f083 0301 	eor.w	r3, r3, #1
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d002      	beq.n	80005aa <CANSPI_Initialize+0xb2>
    return -2;
 80005a4:	f06f 0301 	mvn.w	r3, #1
 80005a8:	e055      	b.n	8000656 <CANSPI_Initialize+0x15e>

  /* Filter & Mask 값 설정 */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	461a      	mov	r2, r3
 80005ae:	2123      	movs	r1, #35	@ 0x23
 80005b0:	2020      	movs	r0, #32
 80005b2:	f000 fabf 	bl	8000b34 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 80005b6:	463b      	mov	r3, r7
 80005b8:	461a      	mov	r2, r3
 80005ba:	2127      	movs	r1, #39	@ 0x27
 80005bc:	2024      	movs	r0, #36	@ 0x24
 80005be:	f000 fab9 	bl	8000b34 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 80005c2:	f107 031c 	add.w	r3, r7, #28
 80005c6:	461a      	mov	r2, r3
 80005c8:	2103      	movs	r1, #3
 80005ca:	2000      	movs	r0, #0
 80005cc:	f000 fab2 	bl	8000b34 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 80005d0:	f107 0318 	add.w	r3, r7, #24
 80005d4:	461a      	mov	r2, r3
 80005d6:	2107      	movs	r1, #7
 80005d8:	2004      	movs	r0, #4
 80005da:	f000 faab 	bl	8000b34 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 80005de:	f107 0314 	add.w	r3, r7, #20
 80005e2:	461a      	mov	r2, r3
 80005e4:	210b      	movs	r1, #11
 80005e6:	2008      	movs	r0, #8
 80005e8:	f000 faa4 	bl	8000b34 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 80005ec:	f107 0310 	add.w	r3, r7, #16
 80005f0:	461a      	mov	r2, r3
 80005f2:	2113      	movs	r1, #19
 80005f4:	2010      	movs	r0, #16
 80005f6:	f000 fa9d 	bl	8000b34 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 80005fa:	f107 030c 	add.w	r3, r7, #12
 80005fe:	461a      	mov	r2, r3
 8000600:	2117      	movs	r1, #23
 8000602:	2014      	movs	r0, #20
 8000604:	f000 fa96 	bl	8000b34 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 8000608:	f107 0308 	add.w	r3, r7, #8
 800060c:	461a      	mov	r2, r3
 800060e:	211b      	movs	r1, #27
 8000610:	2018      	movs	r0, #24
 8000612:	f000 fa8f 	bl	8000b34 <MCP2515_WriteByteSequence>

  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 8000616:	2104      	movs	r1, #4
 8000618:	2060      	movs	r0, #96	@ 0x60
 800061a:	f000 fa67 	bl	8000aec <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 800061e:	2101      	movs	r1, #1
 8000620:	2070      	movs	r0, #112	@ 0x70
 8000622:	f000 fa63 	bl	8000aec <MCP2515_WriteByte>
   * 8tq = 2us = 500kbps
   *
   */

  /* 00(SJW 1tq) 000000 */
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 8000626:	2100      	movs	r1, #0
 8000628:	202a      	movs	r0, #42	@ 0x2a
 800062a:	f000 fa5f 	bl	8000aec <MCP2515_WriteByte>

  /* 11 100(5tq) 101(6tq) */
  // 10 010(3tq) 000(1tq)
  MCP2515_WriteByte(MCP2515_CNF2, 0x90);
 800062e:	2190      	movs	r1, #144	@ 0x90
 8000630:	2029      	movs	r0, #41	@ 0x29
 8000632:	f000 fa5b 	bl	8000aec <MCP2515_WriteByte>

  /* 10 000 011(4tq) */
  // 10 000 010(3tq)
  MCP2515_WriteByte(MCP2515_CNF3, 0x82);
 8000636:	2182      	movs	r1, #130	@ 0x82
 8000638:	2028      	movs	r0, #40	@ 0x28
 800063a:	f000 fa57 	bl	8000aec <MCP2515_WriteByte>

  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 800063e:	f000 f9f3 	bl	8000a28 <MCP2515_SetNormalMode>
 8000642:	4603      	mov	r3, r0
 8000644:	f083 0301 	eor.w	r3, r3, #1
 8000648:	b2db      	uxtb	r3, r3
 800064a:	2b00      	cmp	r3, #0
 800064c:	d002      	beq.n	8000654 <CANSPI_Initialize+0x15c>
    return -3;
 800064e:	f06f 0302 	mvn.w	r3, #2
 8000652:	e000      	b.n	8000656 <CANSPI_Initialize+0x15e>

  return 1;
 8000654:	2301      	movs	r3, #1
}
 8000656:	4618      	mov	r0, r3
 8000658:	3720      	adds	r7, #32
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
	...

08000660 <CANSPI_Transmit>:

/* CAN 메시지 전송 */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	73fb      	strb	r3, [r7, #15]

  idReg.tempSIDH = 0;
 800066c:	4b36      	ldr	r3, [pc, #216]	@ (8000748 <CANSPI_Transmit+0xe8>)
 800066e:	2200      	movs	r2, #0
 8000670:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 8000672:	4b35      	ldr	r3, [pc, #212]	@ (8000748 <CANSPI_Transmit+0xe8>)
 8000674:	2200      	movs	r2, #0
 8000676:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 8000678:	4b33      	ldr	r3, [pc, #204]	@ (8000748 <CANSPI_Transmit+0xe8>)
 800067a:	2200      	movs	r2, #0
 800067c:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 800067e:	4b32      	ldr	r3, [pc, #200]	@ (8000748 <CANSPI_Transmit+0xe8>)
 8000680:	2200      	movs	r2, #0
 8000682:	70da      	strb	r2, [r3, #3]

  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 8000684:	f000 fac4 	bl	8000c10 <MCP2515_ReadStatus>
 8000688:	4603      	mov	r3, r0
 800068a:	461a      	mov	r2, r3
 800068c:	4b2f      	ldr	r3, [pc, #188]	@ (800074c <CANSPI_Transmit+0xec>)
 800068e:	701a      	strb	r2, [r3, #0]

  /* 현재 Transmission 이 Pending 되지 않은 버퍼를 찾아서 전송한다. */
  if (ctrlStatus.TXB0REQ != 1)
 8000690:	4b2e      	ldr	r3, [pc, #184]	@ (800074c <CANSPI_Transmit+0xec>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	f003 0304 	and.w	r3, r3, #4
 8000698:	b2db      	uxtb	r3, r3
 800069a:	2b00      	cmp	r3, #0
 800069c:	d115      	bne.n	80006ca <CANSPI_Transmit+0x6a>
  {
    /* ID Type에 맞게 변환 */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6858      	ldr	r0, [r3, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	4a28      	ldr	r2, [pc, #160]	@ (8000748 <CANSPI_Transmit+0xe8>)
 80006a8:	4619      	mov	r1, r3
 80006aa:	f000 f928 	bl	80008fe <convertCANid2Reg>

    /* Tx Buffer에 전송할 데이터 Loading */
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	7a1a      	ldrb	r2, [r3, #8]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	3309      	adds	r3, #9
 80006b6:	4924      	ldr	r1, [pc, #144]	@ (8000748 <CANSPI_Transmit+0xe8>)
 80006b8:	2040      	movs	r0, #64	@ 0x40
 80006ba:	f000 fa65 	bl	8000b88 <MCP2515_LoadTxSequence>

    /* Tx Buffer의 데이터 전송요청 */
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 80006be:	2081      	movs	r0, #129	@ 0x81
 80006c0:	f000 fa8c 	bl	8000bdc <MCP2515_RequestToSend>

    returnValue = 1;
 80006c4:	2301      	movs	r3, #1
 80006c6:	73fb      	strb	r3, [r7, #15]
 80006c8:	e038      	b.n	800073c <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 80006ca:	4b20      	ldr	r3, [pc, #128]	@ (800074c <CANSPI_Transmit+0xec>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	f003 0310 	and.w	r3, r3, #16
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d115      	bne.n	8000704 <CANSPI_Transmit+0xa4>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	6858      	ldr	r0, [r3, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	4a19      	ldr	r2, [pc, #100]	@ (8000748 <CANSPI_Transmit+0xe8>)
 80006e2:	4619      	mov	r1, r3
 80006e4:	f000 f90b 	bl	80008fe <convertCANid2Reg>

    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	7a1a      	ldrb	r2, [r3, #8]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	3309      	adds	r3, #9
 80006f0:	4915      	ldr	r1, [pc, #84]	@ (8000748 <CANSPI_Transmit+0xe8>)
 80006f2:	2042      	movs	r0, #66	@ 0x42
 80006f4:	f000 fa48 	bl	8000b88 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 80006f8:	2082      	movs	r0, #130	@ 0x82
 80006fa:	f000 fa6f 	bl	8000bdc <MCP2515_RequestToSend>

    returnValue = 1;
 80006fe:	2301      	movs	r3, #1
 8000700:	73fb      	strb	r3, [r7, #15]
 8000702:	e01b      	b.n	800073c <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 8000704:	4b11      	ldr	r3, [pc, #68]	@ (800074c <CANSPI_Transmit+0xec>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800070c:	b2db      	uxtb	r3, r3
 800070e:	2b00      	cmp	r3, #0
 8000710:	d114      	bne.n	800073c <CANSPI_Transmit+0xdc>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6858      	ldr	r0, [r3, #4]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	4a0b      	ldr	r2, [pc, #44]	@ (8000748 <CANSPI_Transmit+0xe8>)
 800071c:	4619      	mov	r1, r3
 800071e:	f000 f8ee 	bl	80008fe <convertCANid2Reg>

    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	7a1a      	ldrb	r2, [r3, #8]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	3309      	adds	r3, #9
 800072a:	4907      	ldr	r1, [pc, #28]	@ (8000748 <CANSPI_Transmit+0xe8>)
 800072c:	2044      	movs	r0, #68	@ 0x44
 800072e:	f000 fa2b 	bl	8000b88 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 8000732:	2084      	movs	r0, #132	@ 0x84
 8000734:	f000 fa52 	bl	8000bdc <MCP2515_RequestToSend>

    returnValue = 1;
 8000738:	2301      	movs	r3, #1
 800073a:	73fb      	strb	r3, [r7, #15]
  }

  return (returnValue);
 800073c:	7bfb      	ldrb	r3, [r7, #15]
}
 800073e:	4618      	mov	r0, r3
 8000740:	3710      	adds	r7, #16
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	2000002c 	.word	0x2000002c
 800074c:	20000028 	.word	0x20000028

08000750 <CANSPI_Receive>:

/* CAN 메시지 수신 */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;

  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 800075c:	f000 fa74 	bl	8000c48 <MCP2515_GetRxStatus>
 8000760:	4603      	mov	r3, r0
 8000762:	733b      	strb	r3, [r7, #12]

  /* 버퍼에 수신된 메시지가 있는지 확인 */
  if (rxStatus.rxBuffer != 0)
 8000764:	7b3b      	ldrb	r3, [r7, #12]
 8000766:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800076a:	b2db      	uxtb	r3, r3
 800076c:	2b00      	cmp	r3, #0
 800076e:	d066      	beq.n	800083e <CANSPI_Receive+0xee>
  {
    /* 어떤 버퍼에 메시지가 있는지 확인 후 처리 */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 8000770:	7b3b      	ldrb	r3, [r7, #12]
 8000772:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000776:	b2db      	uxtb	r3, r3
 8000778:	2b40      	cmp	r3, #64	@ 0x40
 800077a:	bf0c      	ite	eq
 800077c:	2301      	moveq	r3, #1
 800077e:	2300      	movne	r3, #0
 8000780:	b2da      	uxtb	r2, r3
 8000782:	7b3b      	ldrb	r3, [r7, #12]
 8000784:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000788:	b2db      	uxtb	r3, r3
 800078a:	2bc0      	cmp	r3, #192	@ 0xc0
 800078c:	bf0c      	ite	eq
 800078e:	2301      	moveq	r3, #1
 8000790:	2300      	movne	r3, #0
 8000792:	b2db      	uxtb	r3, r3
 8000794:	4313      	orrs	r3, r2
 8000796:	b2db      	uxtb	r3, r3
 8000798:	2b00      	cmp	r3, #0
 800079a:	d007      	beq.n	80007ac <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 800079c:	f107 0310 	add.w	r3, r7, #16
 80007a0:	220d      	movs	r2, #13
 80007a2:	4619      	mov	r1, r3
 80007a4:	2090      	movs	r0, #144	@ 0x90
 80007a6:	f000 f97f 	bl	8000aa8 <MCP2515_ReadRxSequence>
 80007aa:	e00c      	b.n	80007c6 <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 80007ac:	7b3b      	ldrb	r3, [r7, #12]
 80007ae:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	2b80      	cmp	r3, #128	@ 0x80
 80007b6:	d106      	bne.n	80007c6 <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80007b8:	f107 0310 	add.w	r3, r7, #16
 80007bc:	220d      	movs	r2, #13
 80007be:	4619      	mov	r1, r3
 80007c0:	2094      	movs	r0, #148	@ 0x94
 80007c2:	f000 f971 	bl	8000aa8 <MCP2515_ReadRxSequence>
    }

    /* Extended 타입 */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 80007c6:	7b3b      	ldrb	r3, [r7, #12]
 80007c8:	f003 0318 	and.w	r3, r3, #24
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	2b10      	cmp	r3, #16
 80007d0:	d10c      	bne.n	80007ec <CANSPI_Receive+0x9c>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2202      	movs	r2, #2
 80007d6:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 80007d8:	7cb8      	ldrb	r0, [r7, #18]
 80007da:	7cf9      	ldrb	r1, [r7, #19]
 80007dc:	7c3a      	ldrb	r2, [r7, #16]
 80007de:	7c7b      	ldrb	r3, [r7, #17]
 80007e0:	f000 f832 	bl	8000848 <convertReg2ExtendedCANid>
 80007e4:	4602      	mov	r2, r0
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	e00b      	b.n	8000804 <CANSPI_Receive+0xb4>
    }
    else
    {
      /* Standard 타입 */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2201      	movs	r2, #1
 80007f0:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 80007f2:	7c3b      	ldrb	r3, [r7, #16]
 80007f4:	7c7a      	ldrb	r2, [r7, #17]
 80007f6:	4611      	mov	r1, r2
 80007f8:	4618      	mov	r0, r3
 80007fa:	f000 f863 	bl	80008c4 <convertReg2StandardCANid>
 80007fe:	4602      	mov	r2, r0
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	605a      	str	r2, [r3, #4]
    }

    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 8000804:	7d3a      	ldrb	r2, [r7, #20]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 800080a:	7d7a      	ldrb	r2, [r7, #21]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 8000810:	7dba      	ldrb	r2, [r7, #22]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 8000816:	7dfa      	ldrb	r2, [r7, #23]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 800081c:	7e3a      	ldrb	r2, [r7, #24]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 8000822:	7e7a      	ldrb	r2, [r7, #25]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 8000828:	7eba      	ldrb	r2, [r7, #26]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 800082e:	7efa      	ldrb	r2, [r7, #27]
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 8000834:	7f3a      	ldrb	r2, [r7, #28]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	741a      	strb	r2, [r3, #16]

    returnValue = 1;
 800083a:	2301      	movs	r3, #1
 800083c:	77fb      	strb	r3, [r7, #31]
  }

  return (returnValue);
 800083e:	7ffb      	ldrb	r3, [r7, #31]
}
 8000840:	4618      	mov	r0, r3
 8000842:	3720      	adds	r7, #32
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* Register 저장값을 Extended ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 8000848:	b490      	push	{r4, r7}
 800084a:	b086      	sub	sp, #24
 800084c:	af00      	add	r7, sp, #0
 800084e:	4604      	mov	r4, r0
 8000850:	4608      	mov	r0, r1
 8000852:	4611      	mov	r1, r2
 8000854:	461a      	mov	r2, r3
 8000856:	4623      	mov	r3, r4
 8000858:	71fb      	strb	r3, [r7, #7]
 800085a:	4603      	mov	r3, r0
 800085c:	71bb      	strb	r3, [r7, #6]
 800085e:	460b      	mov	r3, r1
 8000860:	717b      	strb	r3, [r7, #5]
 8000862:	4613      	mov	r3, r2
 8000864:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;

  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 800086e:	793b      	ldrb	r3, [r7, #4]
 8000870:	f003 0303 	and.w	r3, r3, #3
 8000874:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 8000876:	793b      	ldrb	r3, [r7, #4]
 8000878:	095b      	lsrs	r3, r3, #5
 800087a:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 800087c:	797b      	ldrb	r3, [r7, #5]
 800087e:	00db      	lsls	r3, r3, #3
 8000880:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 8000882:	7bbb      	ldrb	r3, [r7, #14]
 8000884:	693a      	ldr	r2, [r7, #16]
 8000886:	4413      	add	r3, r2
 8000888:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 800088a:	693b      	ldr	r3, [r7, #16]
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 8000890:	7bfb      	ldrb	r3, [r7, #15]
 8000892:	693a      	ldr	r2, [r7, #16]
 8000894:	4413      	add	r3, r2
 8000896:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 8000898:	693b      	ldr	r3, [r7, #16]
 800089a:	021b      	lsls	r3, r3, #8
 800089c:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	693a      	ldr	r2, [r7, #16]
 80008a2:	4413      	add	r3, r2
 80008a4:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 80008a6:	693b      	ldr	r3, [r7, #16]
 80008a8:	021b      	lsls	r3, r3, #8
 80008aa:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 80008ac:	79bb      	ldrb	r3, [r7, #6]
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	4413      	add	r3, r2
 80008b2:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;
 80008b4:	693b      	ldr	r3, [r7, #16]
 80008b6:	617b      	str	r3, [r7, #20]
  return (returnValue);
 80008b8:	697b      	ldr	r3, [r7, #20]
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3718      	adds	r7, #24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc90      	pop	{r4, r7}
 80008c2:	4770      	bx	lr

080008c4 <convertReg2StandardCANid>:

/* Register 저장값을 Standard ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	460a      	mov	r2, r1
 80008ce:	71fb      	strb	r3, [r7, #7]
 80008d0:	4613      	mov	r3, r2
 80008d2:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;

  ConvertedID = (tempRXBn_SIDH << 3);
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	00db      	lsls	r3, r3, #3
 80008dc:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 80008de:	79bb      	ldrb	r3, [r7, #6]
 80008e0:	095b      	lsrs	r3, r3, #5
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	461a      	mov	r2, r3
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	4413      	add	r3, r2
 80008ea:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	60fb      	str	r3, [r7, #12]

  return (returnValue);
 80008f0:	68fb      	ldr	r3, [r7, #12]
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3714      	adds	r7, #20
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <convertCANid2Reg>:

/* CAN ID를 Register에 저장하기 위한 변환 함수 */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg)
{
 80008fe:	b480      	push	{r7}
 8000900:	b087      	sub	sp, #28
 8000902:	af00      	add	r7, sp, #0
 8000904:	60f8      	str	r0, [r7, #12]
 8000906:	460b      	mov	r3, r1
 8000908:	607a      	str	r2, [r7, #4]
 800090a:	72fb      	strb	r3, [r7, #11]
  uint8_t wipSIDL = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	75fb      	strb	r3, [r7, #23]

  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B)
 8000910:	7afb      	ldrb	r3, [r7, #11]
 8000912:	2b02      	cmp	r3, #2
 8000914:	d12e      	bne.n	8000974 <convertCANid2Reg+0x76>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	b2da      	uxtb	r2, r3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	0a1b      	lsrs	r3, r3, #8
 8000922:	60fb      	str	r3, [r7, #12]

    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	b2da      	uxtb	r2, r3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	0a1b      	lsrs	r3, r3, #8
 8000930:	60fb      	str	r3, [r7, #12]

    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	b2db      	uxtb	r3, r3
 8000936:	f003 0303 	and.w	r3, r3, #3
 800093a:	75fb      	strb	r3, [r7, #23]
    tempPassedInID = tempPassedInID << 3;
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	00db      	lsls	r3, r3, #3
 8000940:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	b2db      	uxtb	r3, r3
 8000946:	f023 031f 	bic.w	r3, r3, #31
 800094a:	b2da      	uxtb	r2, r3
 800094c:	7dfb      	ldrb	r3, [r7, #23]
 800094e:	4413      	add	r3, r2
 8000950:	75fb      	strb	r3, [r7, #23]
    wipSIDL = wipSIDL + 0x08;
 8000952:	7dfb      	ldrb	r3, [r7, #23]
 8000954:	3308      	adds	r3, #8
 8000956:	75fb      	strb	r3, [r7, #23]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 8000958:	7dfb      	ldrb	r3, [r7, #23]
 800095a:	f023 0314 	bic.w	r3, r3, #20
 800095e:	b2da      	uxtb	r2, r3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	705a      	strb	r2, [r3, #1]

    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	0a1b      	lsrs	r3, r3, #8
 8000968:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	b2da      	uxtb	r2, r3
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 8000972:	e013      	b.n	800099c <convertCANid2Reg+0x9e>
    passedIdReg->tempEID8 = 0;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2200      	movs	r2, #0
 8000978:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2200      	movs	r2, #0
 800097e:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	015b      	lsls	r3, r3, #5
 8000984:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	b2da      	uxtb	r2, r3
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	0a1b      	lsrs	r3, r3, #8
 8000992:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	b2da      	uxtb	r2, r3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	701a      	strb	r2, [r3, #0]
}
 800099c:	bf00      	nop
 800099e:	371c      	adds	r7, #28
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* MCP2515 초기화 */
bool MCP2515_Initialize(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();
 80009ae:	2201      	movs	r2, #1
 80009b0:	2108      	movs	r1, #8
 80009b2:	480c      	ldr	r0, [pc, #48]	@ (80009e4 <MCP2515_Initialize+0x3c>)
 80009b4:	f001 fc02 	bl	80021bc <HAL_GPIO_WritePin>

  uint8_t loop = 10;
 80009b8:	230a      	movs	r3, #10
 80009ba:	71fb      	strb	r3, [r7, #7]

  do {
    /* SPI Ready 확인 */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 80009bc:	480a      	ldr	r0, [pc, #40]	@ (80009e8 <MCP2515_Initialize+0x40>)
 80009be:	f003 f9ed 	bl	8003d9c <HAL_SPI_GetState>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d101      	bne.n	80009cc <MCP2515_Initialize+0x24>
      return true;
 80009c8:	2301      	movs	r3, #1
 80009ca:	e006      	b.n	80009da <MCP2515_Initialize+0x32>

    loop--;
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	3b01      	subs	r3, #1
 80009d0:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d1f1      	bne.n	80009bc <MCP2515_Initialize+0x14>

  return false;
 80009d8:	2300      	movs	r3, #0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40022000 	.word	0x40022000
 80009e8:	20000030 	.word	0x20000030

080009ec <MCP2515_SetConfigMode>:

/* MCP2515 를 설정모드로 전환 */
bool MCP2515_SetConfigMode(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
  /* CANCTRL Register Configuration 모드 설정 */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 80009f2:	2180      	movs	r1, #128	@ 0x80
 80009f4:	200f      	movs	r0, #15
 80009f6:	f000 f879 	bl	8000aec <MCP2515_WriteByte>

  uint8_t loop = 10;
 80009fa:	230a      	movs	r3, #10
 80009fc:	71fb      	strb	r3, [r7, #7]

  do {
    /* 모드전환 확인 */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 80009fe:	200e      	movs	r0, #14
 8000a00:	f000 f830 	bl	8000a64 <MCP2515_ReadByte>
 8000a04:	4603      	mov	r3, r0
 8000a06:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000a0a:	2b80      	cmp	r3, #128	@ 0x80
 8000a0c:	d101      	bne.n	8000a12 <MCP2515_SetConfigMode+0x26>
      return true;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e006      	b.n	8000a20 <MCP2515_SetConfigMode+0x34>

    loop--;
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	3b01      	subs	r3, #1
 8000a16:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d1ef      	bne.n	80009fe <MCP2515_SetConfigMode+0x12>

  return false;
 8000a1e:	2300      	movs	r3, #0
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <MCP2515_SetNormalMode>:

/* MCP2515 를 Normal모드로 전환 */
bool MCP2515_SetNormalMode(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
  /* CANCTRL Register Normal 모드 설정 */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 8000a2e:	2100      	movs	r1, #0
 8000a30:	200f      	movs	r0, #15
 8000a32:	f000 f85b 	bl	8000aec <MCP2515_WriteByte>

  uint8_t loop = 10;
 8000a36:	230a      	movs	r3, #10
 8000a38:	71fb      	strb	r3, [r7, #7]

  do {
    /* 모드전환 확인 */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 8000a3a:	200e      	movs	r0, #14
 8000a3c:	f000 f812 	bl	8000a64 <MCP2515_ReadByte>
 8000a40:	4603      	mov	r3, r0
 8000a42:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d101      	bne.n	8000a4e <MCP2515_SetNormalMode+0x26>
      return true;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	e006      	b.n	8000a5c <MCP2515_SetNormalMode+0x34>

    loop--;
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	3b01      	subs	r3, #1
 8000a52:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d1ef      	bne.n	8000a3a <MCP2515_SetNormalMode+0x12>

  return false;
 8000a5a:	2300      	movs	r3, #0
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* 1바이트 읽기 */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;

  MCP2515_CS_LOW();
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2108      	movs	r1, #8
 8000a72:	480c      	ldr	r0, [pc, #48]	@ (8000aa4 <MCP2515_ReadByte+0x40>)
 8000a74:	f001 fba2 	bl	80021bc <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ);
 8000a78:	2003      	movs	r0, #3
 8000a7a:	f000 f901 	bl	8000c80 <SPI_Tx>
  SPI_Tx(address);
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	4618      	mov	r0, r3
 8000a82:	f000 f8fd 	bl	8000c80 <SPI_Tx>
  retVal = SPI_Rx();
 8000a86:	f000 f921 	bl	8000ccc <SPI_Rx>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	73fb      	strb	r3, [r7, #15]

  MCP2515_CS_HIGH();
 8000a8e:	2201      	movs	r2, #1
 8000a90:	2108      	movs	r1, #8
 8000a92:	4804      	ldr	r0, [pc, #16]	@ (8000aa4 <MCP2515_ReadByte+0x40>)
 8000a94:	f001 fb92 	bl	80021bc <HAL_GPIO_WritePin>

  return retVal;
 8000a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40022000 	.word	0x40022000

08000aa8 <MCP2515_ReadRxSequence>:

/* Sequential Bytes 읽기 */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	6039      	str	r1, [r7, #0]
 8000ab2:	71fb      	strb	r3, [r7, #7]
 8000ab4:	4613      	mov	r3, r2
 8000ab6:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2108      	movs	r1, #8
 8000abc:	480a      	ldr	r0, [pc, #40]	@ (8000ae8 <MCP2515_ReadRxSequence+0x40>)
 8000abe:	f001 fb7d 	bl	80021bc <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f000 f8db 	bl	8000c80 <SPI_Tx>
  SPI_RxBuffer(data, length);
 8000aca:	79bb      	ldrb	r3, [r7, #6]
 8000acc:	4619      	mov	r1, r3
 8000ace:	6838      	ldr	r0, [r7, #0]
 8000ad0:	f000 f90c 	bl	8000cec <SPI_RxBuffer>

  MCP2515_CS_HIGH();
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	2108      	movs	r1, #8
 8000ad8:	4803      	ldr	r0, [pc, #12]	@ (8000ae8 <MCP2515_ReadRxSequence+0x40>)
 8000ada:	f001 fb6f 	bl	80021bc <HAL_GPIO_WritePin>
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40022000 	.word	0x40022000

08000aec <MCP2515_WriteByte>:

/* 1바이트 쓰기 */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	460a      	mov	r2, r1
 8000af6:	71fb      	strb	r3, [r7, #7]
 8000af8:	4613      	mov	r3, r2
 8000afa:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8000afc:	2200      	movs	r2, #0
 8000afe:	2108      	movs	r1, #8
 8000b00:	480b      	ldr	r0, [pc, #44]	@ (8000b30 <MCP2515_WriteByte+0x44>)
 8000b02:	f001 fb5b 	bl	80021bc <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 8000b06:	2002      	movs	r0, #2
 8000b08:	f000 f8ba 	bl	8000c80 <SPI_Tx>
  SPI_Tx(address);
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f000 f8b6 	bl	8000c80 <SPI_Tx>
  SPI_Tx(data);
 8000b14:	79bb      	ldrb	r3, [r7, #6]
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 f8b2 	bl	8000c80 <SPI_Tx>

  MCP2515_CS_HIGH();
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	2108      	movs	r1, #8
 8000b20:	4803      	ldr	r0, [pc, #12]	@ (8000b30 <MCP2515_WriteByte+0x44>)
 8000b22:	f001 fb4b 	bl	80021bc <HAL_GPIO_WritePin>
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40022000 	.word	0x40022000

08000b34 <MCP2515_WriteByteSequence>:

/* Sequential Bytes 쓰기 */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	603a      	str	r2, [r7, #0]
 8000b3e:	71fb      	strb	r3, [r7, #7]
 8000b40:	460b      	mov	r3, r1
 8000b42:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8000b44:	2200      	movs	r2, #0
 8000b46:	2108      	movs	r1, #8
 8000b48:	480e      	ldr	r0, [pc, #56]	@ (8000b84 <MCP2515_WriteByteSequence+0x50>)
 8000b4a:	f001 fb37 	bl	80021bc <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 8000b4e:	2002      	movs	r0, #2
 8000b50:	f000 f896 	bl	8000c80 <SPI_Tx>
  SPI_Tx(startAddress);
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	4618      	mov	r0, r3
 8000b58:	f000 f892 	bl	8000c80 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 8000b5c:	79ba      	ldrb	r2, [r7, #6]
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	1ad3      	subs	r3, r2, r3
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	3301      	adds	r3, #1
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	4619      	mov	r1, r3
 8000b6a:	6838      	ldr	r0, [r7, #0]
 8000b6c:	f000 f89a 	bl	8000ca4 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 8000b70:	2201      	movs	r2, #1
 8000b72:	2108      	movs	r1, #8
 8000b74:	4803      	ldr	r0, [pc, #12]	@ (8000b84 <MCP2515_WriteByteSequence+0x50>)
 8000b76:	f001 fb21 	bl	80021bc <HAL_GPIO_WritePin>
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40022000 	.word	0x40022000

08000b88 <MCP2515_LoadTxSequence>:

/* TxBuffer에 Sequential Bytes 쓰기 */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60b9      	str	r1, [r7, #8]
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	4603      	mov	r3, r0
 8000b94:	73fb      	strb	r3, [r7, #15]
 8000b96:	4613      	mov	r3, r2
 8000b98:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2108      	movs	r1, #8
 8000b9e:	480e      	ldr	r0, [pc, #56]	@ (8000bd8 <MCP2515_LoadTxSequence+0x50>)
 8000ba0:	f001 fb0c 	bl	80021bc <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8000ba4:	7bfb      	ldrb	r3, [r7, #15]
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f000 f86a 	bl	8000c80 <SPI_Tx>
  SPI_TxBuffer(idReg, 4);
 8000bac:	2104      	movs	r1, #4
 8000bae:	68b8      	ldr	r0, [r7, #8]
 8000bb0:	f000 f878 	bl	8000ca4 <SPI_TxBuffer>
  SPI_Tx(dlc);
 8000bb4:	7bbb      	ldrb	r3, [r7, #14]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f000 f862 	bl	8000c80 <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 8000bbc:	7bbb      	ldrb	r3, [r7, #14]
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f000 f86f 	bl	8000ca4 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	2108      	movs	r1, #8
 8000bca:	4803      	ldr	r0, [pc, #12]	@ (8000bd8 <MCP2515_LoadTxSequence+0x50>)
 8000bcc:	f001 faf6 	bl	80021bc <HAL_GPIO_WritePin>
}
 8000bd0:	bf00      	nop
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40022000 	.word	0x40022000

08000bdc <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH();
}

/* RTS 명령을 통해서 TxBuffer 전송 */
void MCP2515_RequestToSend(uint8_t instruction)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 8000be6:	2200      	movs	r2, #0
 8000be8:	2108      	movs	r1, #8
 8000bea:	4808      	ldr	r0, [pc, #32]	@ (8000c0c <MCP2515_RequestToSend+0x30>)
 8000bec:	f001 fae6 	bl	80021bc <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 f844 	bl	8000c80 <SPI_Tx>

  MCP2515_CS_HIGH();
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	2108      	movs	r1, #8
 8000bfc:	4803      	ldr	r0, [pc, #12]	@ (8000c0c <MCP2515_RequestToSend+0x30>)
 8000bfe:	f001 fadd 	bl	80021bc <HAL_GPIO_WritePin>
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40022000 	.word	0x40022000

08000c10 <MCP2515_ReadStatus>:

/* MCP2515 Status 확인 */
uint8_t MCP2515_ReadStatus(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 8000c16:	2200      	movs	r2, #0
 8000c18:	2108      	movs	r1, #8
 8000c1a:	480a      	ldr	r0, [pc, #40]	@ (8000c44 <MCP2515_ReadStatus+0x34>)
 8000c1c:	f001 face 	bl	80021bc <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ_STATUS);
 8000c20:	20a0      	movs	r0, #160	@ 0xa0
 8000c22:	f000 f82d 	bl	8000c80 <SPI_Tx>
  retVal = SPI_Rx();
 8000c26:	f000 f851 	bl	8000ccc <SPI_Rx>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 8000c2e:	2201      	movs	r2, #1
 8000c30:	2108      	movs	r1, #8
 8000c32:	4804      	ldr	r0, [pc, #16]	@ (8000c44 <MCP2515_ReadStatus+0x34>)
 8000c34:	f001 fac2 	bl	80021bc <HAL_GPIO_WritePin>

  return retVal;
 8000c38:	79fb      	ldrb	r3, [r7, #7]
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40022000 	.word	0x40022000

08000c48 <MCP2515_GetRxStatus>:

/* MCP2515 RxStatus 레지스터 확인 */
uint8_t MCP2515_GetRxStatus(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2108      	movs	r1, #8
 8000c52:	480a      	ldr	r0, [pc, #40]	@ (8000c7c <MCP2515_GetRxStatus+0x34>)
 8000c54:	f001 fab2 	bl	80021bc <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_RX_STATUS);
 8000c58:	20b0      	movs	r0, #176	@ 0xb0
 8000c5a:	f000 f811 	bl	8000c80 <SPI_Tx>
  retVal = SPI_Rx();
 8000c5e:	f000 f835 	bl	8000ccc <SPI_Rx>
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 8000c66:	2201      	movs	r2, #1
 8000c68:	2108      	movs	r1, #8
 8000c6a:	4804      	ldr	r0, [pc, #16]	@ (8000c7c <MCP2515_GetRxStatus+0x34>)
 8000c6c:	f001 faa6 	bl	80021bc <HAL_GPIO_WritePin>

  return retVal;
 8000c70:	79fb      	ldrb	r3, [r7, #7]
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40022000 	.word	0x40022000

08000c80 <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx Wrapper 함수 */
static void SPI_Tx(uint8_t data)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 8000c8a:	1df9      	adds	r1, r7, #7
 8000c8c:	230a      	movs	r3, #10
 8000c8e:	2201      	movs	r2, #1
 8000c90:	4803      	ldr	r0, [pc, #12]	@ (8000ca0 <SPI_Tx+0x20>)
 8000c92:	f002 fbd2 	bl	800343a <HAL_SPI_Transmit>
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000030 	.word	0x20000030

08000ca4 <SPI_TxBuffer>:

/* SPI Tx Wrapper 함수 */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	460b      	mov	r3, r1
 8000cae:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8000cb0:	78fb      	ldrb	r3, [r7, #3]
 8000cb2:	b29a      	uxth	r2, r3
 8000cb4:	230a      	movs	r3, #10
 8000cb6:	6879      	ldr	r1, [r7, #4]
 8000cb8:	4803      	ldr	r0, [pc, #12]	@ (8000cc8 <SPI_TxBuffer+0x24>)
 8000cba:	f002 fbbe 	bl	800343a <HAL_SPI_Transmit>
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000030 	.word	0x20000030

08000ccc <SPI_Rx>:

/* SPI Rx Wrapper 함수 */
static uint8_t SPI_Rx(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8000cd2:	1df9      	adds	r1, r7, #7
 8000cd4:	230a      	movs	r3, #10
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	4803      	ldr	r0, [pc, #12]	@ (8000ce8 <SPI_Rx+0x1c>)
 8000cda:	f002 fd1c 	bl	8003716 <HAL_SPI_Receive>
  return retVal;
 8000cde:	79fb      	ldrb	r3, [r7, #7]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000030 	.word	0x20000030

08000cec <SPI_RxBuffer>:

/* SPI Rx Wrapper 함수 */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	460b      	mov	r3, r1
 8000cf6:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8000cf8:	78fb      	ldrb	r3, [r7, #3]
 8000cfa:	b29a      	uxth	r2, r3
 8000cfc:	230a      	movs	r3, #10
 8000cfe:	6879      	ldr	r1, [r7, #4]
 8000d00:	4803      	ldr	r0, [pc, #12]	@ (8000d10 <SPI_RxBuffer+0x24>)
 8000d02:	f002 fd08 	bl	8003716 <HAL_SPI_Receive>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000030 	.word	0x20000030

08000d14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b088      	sub	sp, #32
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d1a:	f000 ff3c 	bl	8001b96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d1e:	f000 f881 	bl	8000e24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d22:	f000 f955 	bl	8000fd0 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000d26:	f000 f8e5 	bl	8000ef4 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000d2a:	f000 f921 	bl	8000f70 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  uint8_t OKmsg[5] = "NEL\n\r";
 8000d2e:	4a37      	ldr	r2, [pc, #220]	@ (8000e0c <main+0xf8>)
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d38:	6018      	str	r0, [r3, #0]
 8000d3a:	3304      	adds	r3, #4
 8000d3c:	7019      	strb	r1, [r3, #0]
  uint8_t SImsg[6] = "SMN1\n\r";
 8000d3e:	4a34      	ldr	r2, [pc, #208]	@ (8000e10 <main+0xfc>)
 8000d40:	f107 030c 	add.w	r3, r7, #12
 8000d44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d48:	6018      	str	r0, [r3, #0]
 8000d4a:	3304      	adds	r3, #4
 8000d4c:	8019      	strh	r1, [r3, #0]
  uint8_t SMNmsg[6] = "SMN_\n\r";
 8000d4e:	4a31      	ldr	r2, [pc, #196]	@ (8000e14 <main+0x100>)
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d56:	6018      	str	r0, [r3, #0]
 8000d58:	3304      	adds	r3, #4
 8000d5a:	8019      	strh	r1, [r3, #0]
  int ret;
  ret = CANSPI_Initialize();
 8000d5c:	f7ff fbcc 	bl	80004f8 <CANSPI_Initialize>
 8000d60:	61f8      	str	r0, [r7, #28]
  if(ret < 0){
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	da0c      	bge.n	8000d82 <main+0x6e>
	  while(1){
		  HAL_UART_Transmit(&huart1,OKmsg, sizeof(OKmsg)/sizeof(uint8_t), 10);
 8000d68:	f107 0114 	add.w	r1, r7, #20
 8000d6c:	230a      	movs	r3, #10
 8000d6e:	2205      	movs	r2, #5
 8000d70:	4829      	ldr	r0, [pc, #164]	@ (8000e18 <main+0x104>)
 8000d72:	f003 fa73 	bl	800425c <HAL_UART_Transmit>
		  HAL_Delay(1000);
 8000d76:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d7a:	f000 ff69 	bl	8001c50 <HAL_Delay>
		  HAL_UART_Transmit(&huart1,OKmsg, sizeof(OKmsg)/sizeof(uint8_t), 10);
 8000d7e:	bf00      	nop
 8000d80:	e7f2      	b.n	8000d68 <main+0x54>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(CANSPI_Receive(&rxMessage))
 8000d82:	4826      	ldr	r0, [pc, #152]	@ (8000e1c <main+0x108>)
 8000d84:	f7ff fce4 	bl	8000750 <CANSPI_Receive>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d015      	beq.n	8000dba <main+0xa6>
	  {
		  if(rxMessage.frame.id == 0x0A)
 8000d8e:	4b23      	ldr	r3, [pc, #140]	@ (8000e1c <main+0x108>)
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	2b0a      	cmp	r3, #10
 8000d94:	d111      	bne.n	8000dba <main+0xa6>
		  {//0x0A
			  if(rxMessage.frame.data1 == 1)
 8000d96:	4b21      	ldr	r3, [pc, #132]	@ (8000e1c <main+0x108>)
 8000d98:	7a9b      	ldrb	r3, [r3, #10]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d107      	bne.n	8000dae <main+0x9a>
			  {
				  HAL_UART_Transmit(&huart1,SImsg, sizeof(SImsg)/sizeof(uint8_t), 10);
 8000d9e:	f107 010c 	add.w	r1, r7, #12
 8000da2:	230a      	movs	r3, #10
 8000da4:	2206      	movs	r2, #6
 8000da6:	481c      	ldr	r0, [pc, #112]	@ (8000e18 <main+0x104>)
 8000da8:	f003 fa58 	bl	800425c <HAL_UART_Transmit>
 8000dac:	e005      	b.n	8000dba <main+0xa6>
			  }else
			  {
				  HAL_UART_Transmit(&huart1,SMNmsg, sizeof(SMNmsg)/sizeof(uint8_t), 10);
 8000dae:	1d39      	adds	r1, r7, #4
 8000db0:	230a      	movs	r3, #10
 8000db2:	2206      	movs	r2, #6
 8000db4:	4818      	ldr	r0, [pc, #96]	@ (8000e18 <main+0x104>)
 8000db6:	f003 fa51 	bl	800425c <HAL_UART_Transmit>
		  txMessage.frame.data7 = 7;
		  CANSPI_Transmit(&txMessage);
		  */
	  }

	   HAL_Delay(250);
 8000dba:	20fa      	movs	r0, #250	@ 0xfa
 8000dbc:	f000 ff48 	bl	8001c50 <HAL_Delay>
	   txMessage.frame.idType = rxMessage.frame.idType;
 8000dc0:	4b16      	ldr	r3, [pc, #88]	@ (8000e1c <main+0x108>)
 8000dc2:	781a      	ldrb	r2, [r3, #0]
 8000dc4:	4b16      	ldr	r3, [pc, #88]	@ (8000e20 <main+0x10c>)
 8000dc6:	701a      	strb	r2, [r3, #0]
	   txMessage.frame.id = 0x36;//0x36
 8000dc8:	4b15      	ldr	r3, [pc, #84]	@ (8000e20 <main+0x10c>)
 8000dca:	2236      	movs	r2, #54	@ 0x36
 8000dcc:	605a      	str	r2, [r3, #4]
	   txMessage.frame.dlc = 8;
 8000dce:	4b14      	ldr	r3, [pc, #80]	@ (8000e20 <main+0x10c>)
 8000dd0:	2208      	movs	r2, #8
 8000dd2:	721a      	strb	r2, [r3, #8]
	   txMessage.frame.data0 = 1;
 8000dd4:	4b12      	ldr	r3, [pc, #72]	@ (8000e20 <main+0x10c>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	725a      	strb	r2, [r3, #9]
	   txMessage.frame.data1 = 1;
 8000dda:	4b11      	ldr	r3, [pc, #68]	@ (8000e20 <main+0x10c>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	729a      	strb	r2, [r3, #10]
	   txMessage.frame.data2 = 2;
 8000de0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e20 <main+0x10c>)
 8000de2:	2202      	movs	r2, #2
 8000de4:	72da      	strb	r2, [r3, #11]
	   txMessage.frame.data3 = 3;
 8000de6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e20 <main+0x10c>)
 8000de8:	2203      	movs	r2, #3
 8000dea:	731a      	strb	r2, [r3, #12]
	   txMessage.frame.data4 = 4;
 8000dec:	4b0c      	ldr	r3, [pc, #48]	@ (8000e20 <main+0x10c>)
 8000dee:	2204      	movs	r2, #4
 8000df0:	735a      	strb	r2, [r3, #13]
	   txMessage.frame.data5 = 5;
 8000df2:	4b0b      	ldr	r3, [pc, #44]	@ (8000e20 <main+0x10c>)
 8000df4:	2205      	movs	r2, #5
 8000df6:	739a      	strb	r2, [r3, #14]
	   txMessage.frame.data6 = 6;
 8000df8:	4b09      	ldr	r3, [pc, #36]	@ (8000e20 <main+0x10c>)
 8000dfa:	2206      	movs	r2, #6
 8000dfc:	73da      	strb	r2, [r3, #15]
	   txMessage.frame.data7 = 7;
 8000dfe:	4b08      	ldr	r3, [pc, #32]	@ (8000e20 <main+0x10c>)
 8000e00:	2207      	movs	r2, #7
 8000e02:	741a      	strb	r2, [r3, #16]
	   CANSPI_Transmit(&txMessage);
 8000e04:	4806      	ldr	r0, [pc, #24]	@ (8000e20 <main+0x10c>)
 8000e06:	f7ff fc2b 	bl	8000660 <CANSPI_Transmit>
	  if(CANSPI_Receive(&rxMessage))
 8000e0a:	e7ba      	b.n	8000d82 <main+0x6e>
 8000e0c:	08004bdc 	.word	0x08004bdc
 8000e10:	08004be4 	.word	0x08004be4
 8000e14:	08004bec 	.word	0x08004bec
 8000e18:	20000094 	.word	0x20000094
 8000e1c:	20000130 	.word	0x20000130
 8000e20:	2000011c 	.word	0x2000011c

08000e24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b094      	sub	sp, #80	@ 0x50
 8000e28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e2a:	f107 0320 	add.w	r3, r7, #32
 8000e2e:	2230      	movs	r2, #48	@ 0x30
 8000e30:	2100      	movs	r1, #0
 8000e32:	4618      	mov	r0, r3
 8000e34:	f003 fe99 	bl	8004b6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e38:	f107 030c 	add.w	r3, r7, #12
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e48:	4b28      	ldr	r3, [pc, #160]	@ (8000eec <SystemClock_Config+0xc8>)
 8000e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4c:	4a27      	ldr	r2, [pc, #156]	@ (8000eec <SystemClock_Config+0xc8>)
 8000e4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e52:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e54:	4b25      	ldr	r3, [pc, #148]	@ (8000eec <SystemClock_Config+0xc8>)
 8000e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e60:	4b23      	ldr	r3, [pc, #140]	@ (8000ef0 <SystemClock_Config+0xcc>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e68:	4a21      	ldr	r2, [pc, #132]	@ (8000ef0 <SystemClock_Config+0xcc>)
 8000e6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e6e:	6013      	str	r3, [r2, #0]
 8000e70:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef0 <SystemClock_Config+0xcc>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e78:	607b      	str	r3, [r7, #4]
 8000e7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e80:	2301      	movs	r3, #1
 8000e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e84:	2310      	movs	r3, #16
 8000e86:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 10;
 8000e90:	230a      	movs	r3, #10
 8000e92:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 8000e94:	23d2      	movs	r3, #210	@ 0xd2
 8000e96:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ea0:	f107 0320 	add.w	r3, r7, #32
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f001 f9a3 	bl	80021f0 <HAL_RCC_OscConfig>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000eb0:	f000 fcf8 	bl	80018a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eb4:	230f      	movs	r3, #15
 8000eb6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ec0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ec4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ec6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ecc:	f107 030c 	add.w	r3, r7, #12
 8000ed0:	2105      	movs	r1, #5
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f001 fc30 	bl	8002738 <HAL_RCC_ClockConfig>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000ede:	f000 fce1 	bl	80018a4 <Error_Handler>
  }
}
 8000ee2:	bf00      	nop
 8000ee4:	3750      	adds	r7, #80	@ 0x50
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40007000 	.word	0x40007000

08000ef4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ef8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f68 <MX_SPI2_Init+0x74>)
 8000efa:	4a1c      	ldr	r2, [pc, #112]	@ (8000f6c <MX_SPI2_Init+0x78>)
 8000efc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000efe:	4b1a      	ldr	r3, [pc, #104]	@ (8000f68 <MX_SPI2_Init+0x74>)
 8000f00:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f04:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f06:	4b18      	ldr	r3, [pc, #96]	@ (8000f68 <MX_SPI2_Init+0x74>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f0c:	4b16      	ldr	r3, [pc, #88]	@ (8000f68 <MX_SPI2_Init+0x74>)
 8000f0e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000f12:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f14:	4b14      	ldr	r3, [pc, #80]	@ (8000f68 <MX_SPI2_Init+0x74>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f1a:	4b13      	ldr	r3, [pc, #76]	@ (8000f68 <MX_SPI2_Init+0x74>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f20:	4b11      	ldr	r3, [pc, #68]	@ (8000f68 <MX_SPI2_Init+0x74>)
 8000f22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f26:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	@ (8000f68 <MX_SPI2_Init+0x74>)
 8000f2a:	2210      	movs	r2, #16
 8000f2c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f68 <MX_SPI2_Init+0x74>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f34:	4b0c      	ldr	r3, [pc, #48]	@ (8000f68 <MX_SPI2_Init+0x74>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f68 <MX_SPI2_Init+0x74>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000f40:	4b09      	ldr	r3, [pc, #36]	@ (8000f68 <MX_SPI2_Init+0x74>)
 8000f42:	2207      	movs	r2, #7
 8000f44:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f46:	4b08      	ldr	r3, [pc, #32]	@ (8000f68 <MX_SPI2_Init+0x74>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <MX_SPI2_Init+0x74>)
 8000f4e:	2208      	movs	r2, #8
 8000f50:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f52:	4805      	ldr	r0, [pc, #20]	@ (8000f68 <MX_SPI2_Init+0x74>)
 8000f54:	f002 f9c6 	bl	80032e4 <HAL_SPI_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000f5e:	f000 fca1 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000030 	.word	0x20000030
 8000f6c:	40003800 	.word	0x40003800

08000f70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f74:	4b14      	ldr	r3, [pc, #80]	@ (8000fc8 <MX_USART1_UART_Init+0x58>)
 8000f76:	4a15      	ldr	r2, [pc, #84]	@ (8000fcc <MX_USART1_UART_Init+0x5c>)
 8000f78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f7a:	4b13      	ldr	r3, [pc, #76]	@ (8000fc8 <MX_USART1_UART_Init+0x58>)
 8000f7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f82:	4b11      	ldr	r3, [pc, #68]	@ (8000fc8 <MX_USART1_UART_Init+0x58>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f88:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc8 <MX_USART1_UART_Init+0x58>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc8 <MX_USART1_UART_Init+0x58>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f94:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc8 <MX_USART1_UART_Init+0x58>)
 8000f96:	220c      	movs	r2, #12
 8000f98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc8 <MX_USART1_UART_Init+0x58>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa0:	4b09      	ldr	r3, [pc, #36]	@ (8000fc8 <MX_USART1_UART_Init+0x58>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fa6:	4b08      	ldr	r3, [pc, #32]	@ (8000fc8 <MX_USART1_UART_Init+0x58>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fac:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <MX_USART1_UART_Init+0x58>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fb2:	4805      	ldr	r0, [pc, #20]	@ (8000fc8 <MX_USART1_UART_Init+0x58>)
 8000fb4:	f003 f904 	bl	80041c0 <HAL_UART_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000fbe:	f000 fc71 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000094 	.word	0x20000094
 8000fcc:	40011000 	.word	0x40011000

08000fd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b090      	sub	sp, #64	@ 0x40
 8000fd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
 8000fe4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fe6:	4bae      	ldr	r3, [pc, #696]	@ (80012a0 <MX_GPIO_Init+0x2d0>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fea:	4aad      	ldr	r2, [pc, #692]	@ (80012a0 <MX_GPIO_Init+0x2d0>)
 8000fec:	f043 0310 	orr.w	r3, r3, #16
 8000ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff2:	4bab      	ldr	r3, [pc, #684]	@ (80012a0 <MX_GPIO_Init+0x2d0>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff6:	f003 0310 	and.w	r3, r3, #16
 8000ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ffe:	4ba8      	ldr	r3, [pc, #672]	@ (80012a0 <MX_GPIO_Init+0x2d0>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001002:	4aa7      	ldr	r2, [pc, #668]	@ (80012a0 <MX_GPIO_Init+0x2d0>)
 8001004:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001008:	6313      	str	r3, [r2, #48]	@ 0x30
 800100a:	4ba5      	ldr	r3, [pc, #660]	@ (80012a0 <MX_GPIO_Init+0x2d0>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001012:	627b      	str	r3, [r7, #36]	@ 0x24
 8001014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001016:	4ba2      	ldr	r3, [pc, #648]	@ (80012a0 <MX_GPIO_Init+0x2d0>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101a:	4aa1      	ldr	r2, [pc, #644]	@ (80012a0 <MX_GPIO_Init+0x2d0>)
 800101c:	f043 0302 	orr.w	r3, r3, #2
 8001020:	6313      	str	r3, [r2, #48]	@ 0x30
 8001022:	4b9f      	ldr	r3, [pc, #636]	@ (80012a0 <MX_GPIO_Init+0x2d0>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	623b      	str	r3, [r7, #32]
 800102c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800102e:	4b9c      	ldr	r3, [pc, #624]	@ (80012a0 <MX_GPIO_Init+0x2d0>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	4a9b      	ldr	r2, [pc, #620]	@ (80012a0 <MX_GPIO_Init+0x2d0>)
 8001034:	f043 0308 	orr.w	r3, r3, #8
 8001038:	6313      	str	r3, [r2, #48]	@ 0x30
 800103a:	4b99      	ldr	r3, [pc, #612]	@ (80012a0 <MX_GPIO_Init+0x2d0>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	f003 0308 	and.w	r3, r3, #8
 8001042:	61fb      	str	r3, [r7, #28]
 8001044:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001046:	4b96      	ldr	r3, [pc, #600]	@ (80012a0 <MX_GPIO_Init+0x2d0>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	4a95      	ldr	r2, [pc, #596]	@ (80012a0 <MX_GPIO_Init+0x2d0>)
 800104c:	f043 0304 	orr.w	r3, r3, #4
 8001050:	6313      	str	r3, [r2, #48]	@ 0x30
 8001052:	4b93      	ldr	r3, [pc, #588]	@ (80012a0 <MX_GPIO_Init+0x2d0>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	f003 0304 	and.w	r3, r3, #4
 800105a:	61bb      	str	r3, [r7, #24]
 800105c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800105e:	4b90      	ldr	r3, [pc, #576]	@ (80012a0 <MX_GPIO_Init+0x2d0>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	4a8f      	ldr	r2, [pc, #572]	@ (80012a0 <MX_GPIO_Init+0x2d0>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6313      	str	r3, [r2, #48]	@ 0x30
 800106a:	4b8d      	ldr	r3, [pc, #564]	@ (80012a0 <MX_GPIO_Init+0x2d0>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001076:	4b8a      	ldr	r3, [pc, #552]	@ (80012a0 <MX_GPIO_Init+0x2d0>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107a:	4a89      	ldr	r2, [pc, #548]	@ (80012a0 <MX_GPIO_Init+0x2d0>)
 800107c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001080:	6313      	str	r3, [r2, #48]	@ 0x30
 8001082:	4b87      	ldr	r3, [pc, #540]	@ (80012a0 <MX_GPIO_Init+0x2d0>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800108e:	4b84      	ldr	r3, [pc, #528]	@ (80012a0 <MX_GPIO_Init+0x2d0>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	4a83      	ldr	r2, [pc, #524]	@ (80012a0 <MX_GPIO_Init+0x2d0>)
 8001094:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001098:	6313      	str	r3, [r2, #48]	@ 0x30
 800109a:	4b81      	ldr	r3, [pc, #516]	@ (80012a0 <MX_GPIO_Init+0x2d0>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80010a6:	4b7e      	ldr	r3, [pc, #504]	@ (80012a0 <MX_GPIO_Init+0x2d0>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	4a7d      	ldr	r2, [pc, #500]	@ (80012a0 <MX_GPIO_Init+0x2d0>)
 80010ac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b2:	4b7b      	ldr	r3, [pc, #492]	@ (80012a0 <MX_GPIO_Init+0x2d0>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010be:	4b78      	ldr	r3, [pc, #480]	@ (80012a0 <MX_GPIO_Init+0x2d0>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c2:	4a77      	ldr	r2, [pc, #476]	@ (80012a0 <MX_GPIO_Init+0x2d0>)
 80010c4:	f043 0320 	orr.w	r3, r3, #32
 80010c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ca:	4b75      	ldr	r3, [pc, #468]	@ (80012a0 <MX_GPIO_Init+0x2d0>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	f003 0320 	and.w	r3, r3, #32
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010d6:	4b72      	ldr	r3, [pc, #456]	@ (80012a0 <MX_GPIO_Init+0x2d0>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	4a71      	ldr	r2, [pc, #452]	@ (80012a0 <MX_GPIO_Init+0x2d0>)
 80010dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e2:	4b6f      	ldr	r3, [pc, #444]	@ (80012a0 <MX_GPIO_Init+0x2d0>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80010ee:	2201      	movs	r2, #1
 80010f0:	2120      	movs	r1, #32
 80010f2:	486c      	ldr	r0, [pc, #432]	@ (80012a4 <MX_GPIO_Init+0x2d4>)
 80010f4:	f001 f862 	bl	80021bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80010f8:	2201      	movs	r2, #1
 80010fa:	2108      	movs	r1, #8
 80010fc:	486a      	ldr	r0, [pc, #424]	@ (80012a8 <MX_GPIO_Init+0x2d8>)
 80010fe:	f001 f85d 	bl	80021bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8001102:	2200      	movs	r2, #0
 8001104:	f241 0104 	movw	r1, #4100	@ 0x1004
 8001108:	4867      	ldr	r0, [pc, #412]	@ (80012a8 <MX_GPIO_Init+0x2d8>)
 800110a:	f001 f857 	bl	80021bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 800110e:	2200      	movs	r2, #0
 8001110:	2108      	movs	r1, #8
 8001112:	4866      	ldr	r0, [pc, #408]	@ (80012ac <MX_GPIO_Init+0x2dc>)
 8001114:	f001 f852 	bl	80021bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001118:	2200      	movs	r2, #0
 800111a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800111e:	4864      	ldr	r0, [pc, #400]	@ (80012b0 <MX_GPIO_Init+0x2e0>)
 8001120:	f001 f84c 	bl	80021bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	21c8      	movs	r1, #200	@ 0xc8
 8001128:	4862      	ldr	r0, [pc, #392]	@ (80012b4 <MX_GPIO_Init+0x2e4>)
 800112a:	f001 f847 	bl	80021bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 800112e:	2310      	movs	r3, #16
 8001130:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113a:	2300      	movs	r3, #0
 800113c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800113e:	230e      	movs	r3, #14
 8001140:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001142:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001146:	4619      	mov	r1, r3
 8001148:	485b      	ldr	r0, [pc, #364]	@ (80012b8 <MX_GPIO_Init+0x2e8>)
 800114a:	f000 fe8b 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800114e:	2308      	movs	r3, #8
 8001150:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001152:	2300      	movs	r3, #0
 8001154:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800115a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800115e:	4619      	mov	r1, r3
 8001160:	4855      	ldr	r0, [pc, #340]	@ (80012b8 <MX_GPIO_Init+0x2e8>)
 8001162:	f000 fe7f 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001166:	2304      	movs	r3, #4
 8001168:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116a:	2302      	movs	r3, #2
 800116c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001172:	2303      	movs	r3, #3
 8001174:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001176:	2309      	movs	r3, #9
 8001178:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800117a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800117e:	4619      	mov	r1, r3
 8001180:	484d      	ldr	r0, [pc, #308]	@ (80012b8 <MX_GPIO_Init+0x2e8>)
 8001182:	f000 fe6f 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001186:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 800118a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118c:	2302      	movs	r3, #2
 800118e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001194:	2303      	movs	r3, #3
 8001196:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001198:	230b      	movs	r3, #11
 800119a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800119c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011a0:	4619      	mov	r1, r3
 80011a2:	4844      	ldr	r0, [pc, #272]	@ (80012b4 <MX_GPIO_Init+0x2e4>)
 80011a4:	f000 fe5e 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80011a8:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80011ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b6:	2303      	movs	r3, #3
 80011b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011ba:	230c      	movs	r3, #12
 80011bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011c2:	4619      	mov	r1, r3
 80011c4:	483c      	ldr	r0, [pc, #240]	@ (80012b8 <MX_GPIO_Init+0x2e8>)
 80011c6:	f000 fe4d 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80011ca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011d0:	2312      	movs	r3, #18
 80011d2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d8:	2300      	movs	r3, #0
 80011da:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011dc:	2304      	movs	r3, #4
 80011de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011e4:	4619      	mov	r1, r3
 80011e6:	4835      	ldr	r0, [pc, #212]	@ (80012bc <MX_GPIO_Init+0x2ec>)
 80011e8:	f000 fe3c 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80011ec:	f643 4323 	movw	r3, #15395	@ 0x3c23
 80011f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	2302      	movs	r3, #2
 80011f4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fa:	2303      	movs	r3, #3
 80011fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80011fe:	230a      	movs	r3, #10
 8001200:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001202:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001206:	4619      	mov	r1, r3
 8001208:	482c      	ldr	r0, [pc, #176]	@ (80012bc <MX_GPIO_Init+0x2ec>)
 800120a:	f000 fe2b 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800120e:	2310      	movs	r3, #16
 8001210:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001212:	2302      	movs	r3, #2
 8001214:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121a:	2300      	movs	r3, #0
 800121c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800121e:	2302      	movs	r3, #2
 8001220:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8001222:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001226:	4619      	mov	r1, r3
 8001228:	4824      	ldr	r0, [pc, #144]	@ (80012bc <MX_GPIO_Init+0x2ec>)
 800122a:	f000 fe1b 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800122e:	2380      	movs	r3, #128	@ 0x80
 8001230:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001232:	2302      	movs	r3, #2
 8001234:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123a:	2300      	movs	r3, #0
 800123c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800123e:	2308      	movs	r3, #8
 8001240:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001242:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001246:	4619      	mov	r1, r3
 8001248:	4816      	ldr	r0, [pc, #88]	@ (80012a4 <MX_GPIO_Init+0x2d4>)
 800124a:	f000 fe0b 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800124e:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001252:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125c:	2303      	movs	r3, #3
 800125e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001260:	230c      	movs	r3, #12
 8001262:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001264:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001268:	4619      	mov	r1, r3
 800126a:	4815      	ldr	r0, [pc, #84]	@ (80012c0 <MX_GPIO_Init+0x2f0>)
 800126c:	f000 fdfa 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8001270:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001274:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001276:	2302      	movs	r3, #2
 8001278:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127e:	2300      	movs	r3, #0
 8001280:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001282:	2301      	movs	r3, #1
 8001284:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8001286:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800128a:	4619      	mov	r1, r3
 800128c:	480d      	ldr	r0, [pc, #52]	@ (80012c4 <MX_GPIO_Init+0x2f4>)
 800128e:	f000 fde9 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001292:	2360      	movs	r3, #96	@ 0x60
 8001294:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001296:	2302      	movs	r3, #2
 8001298:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	e014      	b.n	80012c8 <MX_GPIO_Init+0x2f8>
 800129e:	bf00      	nop
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40020c00 	.word	0x40020c00
 80012a8:	40022000 	.word	0x40022000
 80012ac:	40022800 	.word	0x40022800
 80012b0:	40021c00 	.word	0x40021c00
 80012b4:	40021800 	.word	0x40021800
 80012b8:	40021000 	.word	0x40021000
 80012bc:	40020400 	.word	0x40020400
 80012c0:	40020800 	.word	0x40020800
 80012c4:	40020000 	.word	0x40020000
 80012c8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	2300      	movs	r3, #0
 80012cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80012ce:	230d      	movs	r3, #13
 80012d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012d6:	4619      	mov	r1, r3
 80012d8:	48bc      	ldr	r0, [pc, #752]	@ (80015cc <MX_GPIO_Init+0x5fc>)
 80012da:	f000 fdc3 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80012de:	2340      	movs	r3, #64	@ 0x40
 80012e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e2:	2302      	movs	r3, #2
 80012e4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ea:	2303      	movs	r3, #3
 80012ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80012ee:	230a      	movs	r3, #10
 80012f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80012f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012f6:	4619      	mov	r1, r3
 80012f8:	48b5      	ldr	r0, [pc, #724]	@ (80015d0 <MX_GPIO_Init+0x600>)
 80012fa:	f000 fdb3 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80012fe:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001302:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001304:	2302      	movs	r3, #2
 8001306:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130c:	2303      	movs	r3, #3
 800130e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001310:	230c      	movs	r3, #12
 8001312:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001314:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001318:	4619      	mov	r1, r3
 800131a:	48ae      	ldr	r0, [pc, #696]	@ (80015d4 <MX_GPIO_Init+0x604>)
 800131c:	f000 fda2 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001320:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8001324:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001326:	2302      	movs	r3, #2
 8001328:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132e:	2300      	movs	r3, #0
 8001330:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001332:	230e      	movs	r3, #14
 8001334:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001336:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800133a:	4619      	mov	r1, r3
 800133c:	48a6      	ldr	r0, [pc, #664]	@ (80015d8 <MX_GPIO_Init+0x608>)
 800133e:	f000 fd91 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001342:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001346:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001348:	2300      	movs	r3, #0
 800134a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001350:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001354:	4619      	mov	r1, r3
 8001356:	48a0      	ldr	r0, [pc, #640]	@ (80015d8 <MX_GPIO_Init+0x608>)
 8001358:	f000 fd84 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800135c:	2340      	movs	r3, #64	@ 0x40
 800135e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001360:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001364:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800136a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800136e:	4619      	mov	r1, r3
 8001370:	489a      	ldr	r0, [pc, #616]	@ (80015dc <MX_GPIO_Init+0x60c>)
 8001372:	f000 fd77 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8001376:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800137a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137c:	2302      	movs	r3, #2
 800137e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001384:	2303      	movs	r3, #3
 8001386:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001388:	230c      	movs	r3, #12
 800138a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800138c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001390:	4619      	mov	r1, r3
 8001392:	4892      	ldr	r0, [pc, #584]	@ (80015dc <MX_GPIO_Init+0x60c>)
 8001394:	f000 fd66 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8001398:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800139c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a6:	2303      	movs	r3, #3
 80013a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013aa:	230a      	movs	r3, #10
 80013ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013b2:	4619      	mov	r1, r3
 80013b4:	488a      	ldr	r0, [pc, #552]	@ (80015e0 <MX_GPIO_Init+0x610>)
 80013b6:	f000 fd55 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80013ba:	23f0      	movs	r3, #240	@ 0xf0
 80013bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013be:	2302      	movs	r3, #2
 80013c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	2300      	movs	r3, #0
 80013c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80013ca:	230a      	movs	r3, #10
 80013cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80013ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013d2:	4619      	mov	r1, r3
 80013d4:	4883      	ldr	r0, [pc, #524]	@ (80015e4 <MX_GPIO_Init+0x614>)
 80013d6:	f000 fd45 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80013da:	23f7      	movs	r3, #247	@ 0xf7
 80013dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013ea:	230e      	movs	r3, #14
 80013ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80013ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013f2:	4619      	mov	r1, r3
 80013f4:	487c      	ldr	r0, [pc, #496]	@ (80015e8 <MX_GPIO_Init+0x618>)
 80013f6:	f000 fd35 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 80013fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	2302      	movs	r3, #2
 8001402:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001408:	2300      	movs	r3, #0
 800140a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800140c:	2309      	movs	r3, #9
 800140e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001410:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001414:	4619      	mov	r1, r3
 8001416:	486f      	ldr	r0, [pc, #444]	@ (80015d4 <MX_GPIO_Init+0x604>)
 8001418:	f000 fd24 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800141c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001420:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142a:	2300      	movs	r3, #0
 800142c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800142e:	230a      	movs	r3, #10
 8001430:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001432:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001436:	4619      	mov	r1, r3
 8001438:	4866      	ldr	r0, [pc, #408]	@ (80015d4 <MX_GPIO_Init+0x604>)
 800143a:	f000 fd13 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800143e:	2320      	movs	r3, #32
 8001440:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001442:	2301      	movs	r3, #1
 8001444:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2300      	movs	r3, #0
 800144c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800144e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001452:	4619      	mov	r1, r3
 8001454:	4861      	ldr	r0, [pc, #388]	@ (80015dc <MX_GPIO_Init+0x60c>)
 8001456:	f000 fd05 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800145a:	2308      	movs	r3, #8
 800145c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145e:	2302      	movs	r3, #2
 8001460:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001466:	2300      	movs	r3, #0
 8001468:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800146a:	230d      	movs	r3, #13
 800146c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800146e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001472:	4619      	mov	r1, r3
 8001474:	4859      	ldr	r0, [pc, #356]	@ (80015dc <MX_GPIO_Init+0x60c>)
 8001476:	f000 fcf5 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 800147a:	2308      	movs	r3, #8
 800147c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147e:	2301      	movs	r3, #1
 8001480:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001486:	2303      	movs	r3, #3
 8001488:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 800148a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800148e:	4619      	mov	r1, r3
 8001490:	4854      	ldr	r0, [pc, #336]	@ (80015e4 <MX_GPIO_Init+0x614>)
 8001492:	f000 fce7 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D8_Pin|LCD_DISP_Pin;
 8001496:	f241 0304 	movw	r3, #4100	@ 0x1004
 800149a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149c:	2301      	movs	r3, #1
 800149e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a4:	2300      	movs	r3, #0
 80014a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80014a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014ac:	4619      	mov	r1, r3
 80014ae:	484d      	ldr	r0, [pc, #308]	@ (80015e4 <MX_GPIO_Init+0x614>)
 80014b0:	f000 fcd8 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80014b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ba:	2300      	movs	r3, #0
 80014bc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80014c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014c6:	4619      	mov	r1, r3
 80014c8:	4848      	ldr	r0, [pc, #288]	@ (80015ec <MX_GPIO_Init+0x61c>)
 80014ca:	f000 fccb 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80014ce:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80014d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d4:	2302      	movs	r3, #2
 80014d6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014dc:	2303      	movs	r3, #3
 80014de:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014e0:	230c      	movs	r3, #12
 80014e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014e8:	4619      	mov	r1, r3
 80014ea:	4841      	ldr	r0, [pc, #260]	@ (80015f0 <MX_GPIO_Init+0x620>)
 80014ec:	f000 fcba 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80014f0:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 80014f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	2302      	movs	r3, #2
 80014f8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2300      	movs	r3, #0
 8001500:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001502:	230e      	movs	r3, #14
 8001504:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001506:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800150a:	4619      	mov	r1, r3
 800150c:	4835      	ldr	r0, [pc, #212]	@ (80015e4 <MX_GPIO_Init+0x614>)
 800150e:	f000 fca9 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001512:	2308      	movs	r3, #8
 8001514:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001516:	2301      	movs	r3, #1
 8001518:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2300      	movs	r3, #0
 8001520:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001522:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001526:	4619      	mov	r1, r3
 8001528:	482f      	ldr	r0, [pc, #188]	@ (80015e8 <MX_GPIO_Init+0x618>)
 800152a:	f000 fc9b 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800152e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001532:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001534:	2302      	movs	r3, #2
 8001536:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153c:	2300      	movs	r3, #0
 800153e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001540:	230d      	movs	r3, #13
 8001542:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001544:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001548:	4619      	mov	r1, r3
 800154a:	4822      	ldr	r0, [pc, #136]	@ (80015d4 <MX_GPIO_Init+0x604>)
 800154c:	f000 fc8a 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001550:	2310      	movs	r3, #16
 8001552:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001554:	2300      	movs	r3, #0
 8001556:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800155c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001560:	4619      	mov	r1, r3
 8001562:	481e      	ldr	r0, [pc, #120]	@ (80015dc <MX_GPIO_Init+0x60c>)
 8001564:	f000 fc7e 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8001568:	2304      	movs	r3, #4
 800156a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001574:	2303      	movs	r3, #3
 8001576:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001578:	230c      	movs	r3, #12
 800157a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 800157c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001580:	4619      	mov	r1, r3
 8001582:	4816      	ldr	r0, [pc, #88]	@ (80015dc <MX_GPIO_Init+0x60c>)
 8001584:	f000 fc6e 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001588:	f248 0304 	movw	r3, #32772	@ 0x8004
 800158c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800158e:	2300      	movs	r3, #0
 8001590:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001596:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800159a:	4619      	mov	r1, r3
 800159c:	4815      	ldr	r0, [pc, #84]	@ (80015f4 <MX_GPIO_Init+0x624>)
 800159e:	f000 fc61 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80015a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a8:	2301      	movs	r3, #1
 80015aa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b0:	2300      	movs	r3, #0
 80015b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80015b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015b8:	4619      	mov	r1, r3
 80015ba:	480e      	ldr	r0, [pc, #56]	@ (80015f4 <MX_GPIO_Init+0x624>)
 80015bc:	f000 fc52 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80015c0:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 80015c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c6:	2302      	movs	r3, #2
 80015c8:	e016      	b.n	80015f8 <MX_GPIO_Init+0x628>
 80015ca:	bf00      	nop
 80015cc:	40021000 	.word	0x40021000
 80015d0:	40020400 	.word	0x40020400
 80015d4:	40021800 	.word	0x40021800
 80015d8:	40022400 	.word	0x40022400
 80015dc:	40020c00 	.word	0x40020c00
 80015e0:	40020000 	.word	0x40020000
 80015e4:	40022000 	.word	0x40022000
 80015e8:	40022800 	.word	0x40022800
 80015ec:	40020800 	.word	0x40020800
 80015f0:	40021400 	.word	0x40021400
 80015f4:	40021c00 	.word	0x40021c00
 80015f8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fe:	2300      	movs	r3, #0
 8001600:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001602:	230d      	movs	r3, #13
 8001604:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001606:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800160a:	4619      	mov	r1, r3
 800160c:	489d      	ldr	r0, [pc, #628]	@ (8001884 <MX_GPIO_Init+0x8b4>)
 800160e:	f000 fc29 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8001612:	2301      	movs	r3, #1
 8001614:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001616:	2302      	movs	r3, #2
 8001618:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161e:	2300      	movs	r3, #0
 8001620:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001622:	2302      	movs	r3, #2
 8001624:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8001626:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800162a:	4619      	mov	r1, r3
 800162c:	4896      	ldr	r0, [pc, #600]	@ (8001888 <MX_GPIO_Init+0x8b8>)
 800162e:	f000 fc19 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8001632:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001636:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001638:	2302      	movs	r3, #2
 800163a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001640:	2300      	movs	r3, #0
 8001642:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001644:	2301      	movs	r3, #1
 8001646:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8001648:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800164c:	4619      	mov	r1, r3
 800164e:	488f      	ldr	r0, [pc, #572]	@ (800188c <MX_GPIO_Init+0x8bc>)
 8001650:	f000 fc08 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001654:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001658:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800165a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800165e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001664:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001668:	4619      	mov	r1, r3
 800166a:	4887      	ldr	r0, [pc, #540]	@ (8001888 <MX_GPIO_Init+0x8b8>)
 800166c:	f000 fbfa 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8001670:	23c0      	movs	r3, #192	@ 0xc0
 8001672:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001674:	2302      	movs	r3, #2
 8001676:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167c:	2303      	movs	r3, #3
 800167e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001680:	2308      	movs	r3, #8
 8001682:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001684:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001688:	4619      	mov	r1, r3
 800168a:	4881      	ldr	r0, [pc, #516]	@ (8001890 <MX_GPIO_Init+0x8c0>)
 800168c:	f000 fbea 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001690:	2310      	movs	r3, #16
 8001692:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	2302      	movs	r3, #2
 8001696:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169c:	2303      	movs	r3, #3
 800169e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80016a0:	230a      	movs	r3, #10
 80016a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80016a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016a8:	4619      	mov	r1, r3
 80016aa:	4876      	ldr	r0, [pc, #472]	@ (8001884 <MX_GPIO_Init+0x8b4>)
 80016ac:	f000 fbda 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80016b0:	2328      	movs	r3, #40	@ 0x28
 80016b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b4:	2302      	movs	r3, #2
 80016b6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016bc:	2303      	movs	r3, #3
 80016be:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016c0:	230c      	movs	r3, #12
 80016c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016c8:	4619      	mov	r1, r3
 80016ca:	486e      	ldr	r0, [pc, #440]	@ (8001884 <MX_GPIO_Init+0x8b4>)
 80016cc:	f000 fbca 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80016d0:	23c8      	movs	r3, #200	@ 0xc8
 80016d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d4:	2301      	movs	r3, #1
 80016d6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016dc:	2300      	movs	r3, #0
 80016de:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016e4:	4619      	mov	r1, r3
 80016e6:	486b      	ldr	r0, [pc, #428]	@ (8001894 <MX_GPIO_Init+0x8c4>)
 80016e8:	f000 fbbc 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80016ec:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 80016f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016f2:	2303      	movs	r3, #3
 80016f4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016fe:	4619      	mov	r1, r3
 8001700:	4865      	ldr	r0, [pc, #404]	@ (8001898 <MX_GPIO_Init+0x8c8>)
 8001702:	f000 fbaf 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8001706:	2308      	movs	r3, #8
 8001708:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	2302      	movs	r3, #2
 800170c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001712:	2303      	movs	r3, #3
 8001714:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001716:	230c      	movs	r3, #12
 8001718:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800171a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800171e:	4619      	mov	r1, r3
 8001720:	485b      	ldr	r0, [pc, #364]	@ (8001890 <MX_GPIO_Init+0x8c0>)
 8001722:	f000 fb9f 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001726:	2305      	movs	r3, #5
 8001728:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172a:	2302      	movs	r3, #2
 800172c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001732:	2303      	movs	r3, #3
 8001734:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001736:	230a      	movs	r3, #10
 8001738:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800173a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800173e:	4619      	mov	r1, r3
 8001740:	4853      	ldr	r0, [pc, #332]	@ (8001890 <MX_GPIO_Init+0x8c0>)
 8001742:	f000 fb8f 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001746:	2332      	movs	r3, #50	@ 0x32
 8001748:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174a:	2302      	movs	r3, #2
 800174c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001752:	2303      	movs	r3, #3
 8001754:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001756:	230b      	movs	r3, #11
 8001758:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800175a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800175e:	4619      	mov	r1, r3
 8001760:	484b      	ldr	r0, [pc, #300]	@ (8001890 <MX_GPIO_Init+0x8c0>)
 8001762:	f000 fb7f 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001766:	2304      	movs	r3, #4
 8001768:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176a:	2302      	movs	r3, #2
 800176c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001772:	2303      	movs	r3, #3
 8001774:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001776:	2309      	movs	r3, #9
 8001778:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800177e:	4619      	mov	r1, r3
 8001780:	4846      	ldr	r0, [pc, #280]	@ (800189c <MX_GPIO_Init+0x8cc>)
 8001782:	f000 fb6f 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001786:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800178a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178c:	2302      	movs	r3, #2
 800178e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001794:	2303      	movs	r3, #3
 8001796:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001798:	2309      	movs	r3, #9
 800179a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800179c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017a0:	4619      	mov	r1, r3
 80017a2:	483f      	ldr	r0, [pc, #252]	@ (80018a0 <MX_GPIO_Init+0x8d0>)
 80017a4:	f000 fb5e 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80017a8:	2304      	movs	r3, #4
 80017aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ac:	2300      	movs	r3, #0
 80017ae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80017b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017b8:	4619      	mov	r1, r3
 80017ba:	4836      	ldr	r0, [pc, #216]	@ (8001894 <MX_GPIO_Init+0x8c4>)
 80017bc:	f000 fb52 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80017c0:	2386      	movs	r3, #134	@ 0x86
 80017c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c4:	2302      	movs	r3, #2
 80017c6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017cc:	2303      	movs	r3, #3
 80017ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017d0:	230b      	movs	r3, #11
 80017d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017d8:	4619      	mov	r1, r3
 80017da:	482c      	ldr	r0, [pc, #176]	@ (800188c <MX_GPIO_Init+0x8bc>)
 80017dc:	f000 fb42 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80017e0:	2301      	movs	r3, #1
 80017e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017e4:	2303      	movs	r3, #3
 80017e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80017ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017f0:	4619      	mov	r1, r3
 80017f2:	4826      	ldr	r0, [pc, #152]	@ (800188c <MX_GPIO_Init+0x8bc>)
 80017f4:	f000 fb36 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80017f8:	2350      	movs	r3, #80	@ 0x50
 80017fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fc:	2302      	movs	r3, #2
 80017fe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001804:	2300      	movs	r3, #0
 8001806:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001808:	230d      	movs	r3, #13
 800180a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001810:	4619      	mov	r1, r3
 8001812:	481e      	ldr	r0, [pc, #120]	@ (800188c <MX_GPIO_Init+0x8bc>)
 8001814:	f000 fb26 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001818:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800181c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800181e:	2312      	movs	r3, #18
 8001820:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001826:	2303      	movs	r3, #3
 8001828:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800182a:	2304      	movs	r3, #4
 800182c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800182e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001832:	4619      	mov	r1, r3
 8001834:	4813      	ldr	r0, [pc, #76]	@ (8001884 <MX_GPIO_Init+0x8b4>)
 8001836:	f000 fb15 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800183a:	2328      	movs	r3, #40	@ 0x28
 800183c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183e:	2302      	movs	r3, #2
 8001840:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001846:	2303      	movs	r3, #3
 8001848:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800184a:	230a      	movs	r3, #10
 800184c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001852:	4619      	mov	r1, r3
 8001854:	480d      	ldr	r0, [pc, #52]	@ (800188c <MX_GPIO_Init+0x8bc>)
 8001856:	f000 fb05 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800185a:	2340      	movs	r3, #64	@ 0x40
 800185c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185e:	2302      	movs	r3, #2
 8001860:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001866:	2300      	movs	r3, #0
 8001868:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800186a:	2309      	movs	r3, #9
 800186c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800186e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001872:	4619      	mov	r1, r3
 8001874:	4803      	ldr	r0, [pc, #12]	@ (8001884 <MX_GPIO_Init+0x8b4>)
 8001876:	f000 faf5 	bl	8001e64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800187a:	bf00      	nop
 800187c:	3740      	adds	r7, #64	@ 0x40
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40021c00 	.word	0x40021c00
 8001888:	40022000 	.word	0x40022000
 800188c:	40020000 	.word	0x40020000
 8001890:	40020800 	.word	0x40020800
 8001894:	40021800 	.word	0x40021800
 8001898:	40021400 	.word	0x40021400
 800189c:	40020400 	.word	0x40020400
 80018a0:	40020c00 	.word	0x40020c00

080018a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018a8:	b672      	cpsid	i
}
 80018aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018ac:	bf00      	nop
 80018ae:	e7fd      	b.n	80018ac <Error_Handler+0x8>

080018b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80018b6:	4b0f      	ldr	r3, [pc, #60]	@ (80018f4 <HAL_MspInit+0x44>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ba:	4a0e      	ldr	r2, [pc, #56]	@ (80018f4 <HAL_MspInit+0x44>)
 80018bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018c2:	4b0c      	ldr	r3, [pc, #48]	@ (80018f4 <HAL_MspInit+0x44>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ca:	607b      	str	r3, [r7, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ce:	4b09      	ldr	r3, [pc, #36]	@ (80018f4 <HAL_MspInit+0x44>)
 80018d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d2:	4a08      	ldr	r2, [pc, #32]	@ (80018f4 <HAL_MspInit+0x44>)
 80018d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018da:	4b06      	ldr	r3, [pc, #24]	@ (80018f4 <HAL_MspInit+0x44>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018e2:	603b      	str	r3, [r7, #0]
 80018e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	40023800 	.word	0x40023800

080018f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08a      	sub	sp, #40	@ 0x28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a25      	ldr	r2, [pc, #148]	@ (80019ac <HAL_SPI_MspInit+0xb4>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d144      	bne.n	80019a4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800191a:	4b25      	ldr	r3, [pc, #148]	@ (80019b0 <HAL_SPI_MspInit+0xb8>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191e:	4a24      	ldr	r2, [pc, #144]	@ (80019b0 <HAL_SPI_MspInit+0xb8>)
 8001920:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001924:	6413      	str	r3, [r2, #64]	@ 0x40
 8001926:	4b22      	ldr	r3, [pc, #136]	@ (80019b0 <HAL_SPI_MspInit+0xb8>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001932:	4b1f      	ldr	r3, [pc, #124]	@ (80019b0 <HAL_SPI_MspInit+0xb8>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	4a1e      	ldr	r2, [pc, #120]	@ (80019b0 <HAL_SPI_MspInit+0xb8>)
 8001938:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800193c:	6313      	str	r3, [r2, #48]	@ 0x30
 800193e:	4b1c      	ldr	r3, [pc, #112]	@ (80019b0 <HAL_SPI_MspInit+0xb8>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800194a:	4b19      	ldr	r3, [pc, #100]	@ (80019b0 <HAL_SPI_MspInit+0xb8>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194e:	4a18      	ldr	r2, [pc, #96]	@ (80019b0 <HAL_SPI_MspInit+0xb8>)
 8001950:	f043 0302 	orr.w	r3, r3, #2
 8001954:	6313      	str	r3, [r2, #48]	@ 0x30
 8001956:	4b16      	ldr	r3, [pc, #88]	@ (80019b0 <HAL_SPI_MspInit+0xb8>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8001962:	2302      	movs	r3, #2
 8001964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001966:	2302      	movs	r3, #2
 8001968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196e:	2300      	movs	r3, #0
 8001970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001972:	2305      	movs	r3, #5
 8001974:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8001976:	f107 0314 	add.w	r3, r7, #20
 800197a:	4619      	mov	r1, r3
 800197c:	480d      	ldr	r0, [pc, #52]	@ (80019b4 <HAL_SPI_MspInit+0xbc>)
 800197e:	f000 fa71 	bl	8001e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001982:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001988:	2302      	movs	r3, #2
 800198a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001990:	2300      	movs	r3, #0
 8001992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001994:	2305      	movs	r3, #5
 8001996:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	4619      	mov	r1, r3
 800199e:	4806      	ldr	r0, [pc, #24]	@ (80019b8 <HAL_SPI_MspInit+0xc0>)
 80019a0:	f000 fa60 	bl	8001e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80019a4:	bf00      	nop
 80019a6:	3728      	adds	r7, #40	@ 0x28
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40003800 	.word	0x40003800
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40022000 	.word	0x40022000
 80019b8:	40020400 	.word	0x40020400

080019bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b0ac      	sub	sp, #176	@ 0xb0
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019d4:	f107 0318 	add.w	r3, r7, #24
 80019d8:	2284      	movs	r2, #132	@ 0x84
 80019da:	2100      	movs	r1, #0
 80019dc:	4618      	mov	r0, r3
 80019de:	f003 f8c4 	bl	8004b6a <memset>
  if(huart->Instance==USART1)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a32      	ldr	r2, [pc, #200]	@ (8001ab0 <HAL_UART_MspInit+0xf4>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d15c      	bne.n	8001aa6 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80019ec:	2340      	movs	r3, #64	@ 0x40
 80019ee:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80019f0:	2300      	movs	r3, #0
 80019f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019f4:	f107 0318 	add.w	r3, r7, #24
 80019f8:	4618      	mov	r0, r3
 80019fa:	f001 f883 	bl	8002b04 <HAL_RCCEx_PeriphCLKConfig>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a04:	f7ff ff4e 	bl	80018a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a08:	4b2a      	ldr	r3, [pc, #168]	@ (8001ab4 <HAL_UART_MspInit+0xf8>)
 8001a0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a0c:	4a29      	ldr	r2, [pc, #164]	@ (8001ab4 <HAL_UART_MspInit+0xf8>)
 8001a0e:	f043 0310 	orr.w	r3, r3, #16
 8001a12:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a14:	4b27      	ldr	r3, [pc, #156]	@ (8001ab4 <HAL_UART_MspInit+0xf8>)
 8001a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a18:	f003 0310 	and.w	r3, r3, #16
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a20:	4b24      	ldr	r3, [pc, #144]	@ (8001ab4 <HAL_UART_MspInit+0xf8>)
 8001a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a24:	4a23      	ldr	r2, [pc, #140]	@ (8001ab4 <HAL_UART_MspInit+0xf8>)
 8001a26:	f043 0302 	orr.w	r3, r3, #2
 8001a2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a2c:	4b21      	ldr	r3, [pc, #132]	@ (8001ab4 <HAL_UART_MspInit+0xf8>)
 8001a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a38:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab4 <HAL_UART_MspInit+0xf8>)
 8001a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ab4 <HAL_UART_MspInit+0xf8>)
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a44:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab4 <HAL_UART_MspInit+0xf8>)
 8001a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001a50:	2380      	movs	r3, #128	@ 0x80
 8001a52:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a56:	2302      	movs	r3, #2
 8001a58:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a62:	2300      	movs	r3, #0
 8001a64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a68:	2307      	movs	r3, #7
 8001a6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001a6e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a72:	4619      	mov	r1, r3
 8001a74:	4810      	ldr	r0, [pc, #64]	@ (8001ab8 <HAL_UART_MspInit+0xfc>)
 8001a76:	f000 f9f5 	bl	8001e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001a7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a82:	2302      	movs	r3, #2
 8001a84:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a94:	2307      	movs	r3, #7
 8001a96:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001a9a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4806      	ldr	r0, [pc, #24]	@ (8001abc <HAL_UART_MspInit+0x100>)
 8001aa2:	f000 f9df 	bl	8001e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001aa6:	bf00      	nop
 8001aa8:	37b0      	adds	r7, #176	@ 0xb0
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40011000 	.word	0x40011000
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	40020400 	.word	0x40020400
 8001abc:	40020000 	.word	0x40020000

08001ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ac4:	bf00      	nop
 8001ac6:	e7fd      	b.n	8001ac4 <NMI_Handler+0x4>

08001ac8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001acc:	bf00      	nop
 8001ace:	e7fd      	b.n	8001acc <HardFault_Handler+0x4>

08001ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ad4:	bf00      	nop
 8001ad6:	e7fd      	b.n	8001ad4 <MemManage_Handler+0x4>

08001ad8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001adc:	bf00      	nop
 8001ade:	e7fd      	b.n	8001adc <BusFault_Handler+0x4>

08001ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae4:	bf00      	nop
 8001ae6:	e7fd      	b.n	8001ae4 <UsageFault_Handler+0x4>

08001ae8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b16:	f000 f87b 	bl	8001c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b24:	4b06      	ldr	r3, [pc, #24]	@ (8001b40 <SystemInit+0x20>)
 8001b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b2a:	4a05      	ldr	r2, [pc, #20]	@ (8001b40 <SystemInit+0x20>)
 8001b2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b48:	480d      	ldr	r0, [pc, #52]	@ (8001b80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b4a:	490e      	ldr	r1, [pc, #56]	@ (8001b84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b4c:	4a0e      	ldr	r2, [pc, #56]	@ (8001b88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b50:	e002      	b.n	8001b58 <LoopCopyDataInit>

08001b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b56:	3304      	adds	r3, #4

08001b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b5c:	d3f9      	bcc.n	8001b52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b5e:	4a0b      	ldr	r2, [pc, #44]	@ (8001b8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b60:	4c0b      	ldr	r4, [pc, #44]	@ (8001b90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b64:	e001      	b.n	8001b6a <LoopFillZerobss>

08001b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b68:	3204      	adds	r2, #4

08001b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b6c:	d3fb      	bcc.n	8001b66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b6e:	f7ff ffd7 	bl	8001b20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b72:	f003 f803 	bl	8004b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b76:	f7ff f8cd 	bl	8000d14 <main>
  bx  lr    
 8001b7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b7c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001b80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b84:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001b88:	08004c1c 	.word	0x08004c1c
  ldr r2, =_sbss
 8001b8c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001b90:	20000148 	.word	0x20000148

08001b94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b94:	e7fe      	b.n	8001b94 <ADC_IRQHandler>

08001b96 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b9a:	2003      	movs	r0, #3
 8001b9c:	f000 f92e 	bl	8001dfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	f000 f805 	bl	8001bb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ba6:	f7ff fe83 	bl	80018b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bb8:	4b12      	ldr	r3, [pc, #72]	@ (8001c04 <HAL_InitTick+0x54>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4b12      	ldr	r3, [pc, #72]	@ (8001c08 <HAL_InitTick+0x58>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f000 f93b 	bl	8001e4a <HAL_SYSTICK_Config>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e00e      	b.n	8001bfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b0f      	cmp	r3, #15
 8001be2:	d80a      	bhi.n	8001bfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be4:	2200      	movs	r2, #0
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bec:	f000 f911 	bl	8001e12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bf0:	4a06      	ldr	r2, [pc, #24]	@ (8001c0c <HAL_InitTick+0x5c>)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	e000      	b.n	8001bfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20000000 	.word	0x20000000
 8001c08:	20000008 	.word	0x20000008
 8001c0c:	20000004 	.word	0x20000004

08001c10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c14:	4b06      	ldr	r3, [pc, #24]	@ (8001c30 <HAL_IncTick+0x20>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4b06      	ldr	r3, [pc, #24]	@ (8001c34 <HAL_IncTick+0x24>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4413      	add	r3, r2
 8001c20:	4a04      	ldr	r2, [pc, #16]	@ (8001c34 <HAL_IncTick+0x24>)
 8001c22:	6013      	str	r3, [r2, #0]
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	20000008 	.word	0x20000008
 8001c34:	20000144 	.word	0x20000144

08001c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c3c:	4b03      	ldr	r3, [pc, #12]	@ (8001c4c <HAL_GetTick+0x14>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	20000144 	.word	0x20000144

08001c50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c58:	f7ff ffee 	bl	8001c38 <HAL_GetTick>
 8001c5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c68:	d005      	beq.n	8001c76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c94 <HAL_Delay+0x44>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4413      	add	r3, r2
 8001c74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c76:	bf00      	nop
 8001c78:	f7ff ffde 	bl	8001c38 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d8f7      	bhi.n	8001c78 <HAL_Delay+0x28>
  {
  }
}
 8001c88:	bf00      	nop
 8001c8a:	bf00      	nop
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000008 	.word	0x20000008

08001c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd8 <__NVIC_SetPriorityGrouping+0x40>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cc0:	4b06      	ldr	r3, [pc, #24]	@ (8001cdc <__NVIC_SetPriorityGrouping+0x44>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cc6:	4a04      	ldr	r2, [pc, #16]	@ (8001cd8 <__NVIC_SetPriorityGrouping+0x40>)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	60d3      	str	r3, [r2, #12]
}
 8001ccc:	bf00      	nop
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	e000ed00 	.word	0xe000ed00
 8001cdc:	05fa0000 	.word	0x05fa0000

08001ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce4:	4b04      	ldr	r3, [pc, #16]	@ (8001cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	0a1b      	lsrs	r3, r3, #8
 8001cea:	f003 0307 	and.w	r3, r3, #7
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	6039      	str	r1, [r7, #0]
 8001d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	db0a      	blt.n	8001d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	490c      	ldr	r1, [pc, #48]	@ (8001d48 <__NVIC_SetPriority+0x4c>)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	0112      	lsls	r2, r2, #4
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	440b      	add	r3, r1
 8001d20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d24:	e00a      	b.n	8001d3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	4908      	ldr	r1, [pc, #32]	@ (8001d4c <__NVIC_SetPriority+0x50>)
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	3b04      	subs	r3, #4
 8001d34:	0112      	lsls	r2, r2, #4
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	440b      	add	r3, r1
 8001d3a:	761a      	strb	r2, [r3, #24]
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	e000e100 	.word	0xe000e100
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b089      	sub	sp, #36	@ 0x24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f1c3 0307 	rsb	r3, r3, #7
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	bf28      	it	cs
 8001d6e:	2304      	movcs	r3, #4
 8001d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	3304      	adds	r3, #4
 8001d76:	2b06      	cmp	r3, #6
 8001d78:	d902      	bls.n	8001d80 <NVIC_EncodePriority+0x30>
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3b03      	subs	r3, #3
 8001d7e:	e000      	b.n	8001d82 <NVIC_EncodePriority+0x32>
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d84:	f04f 32ff 	mov.w	r2, #4294967295
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43da      	mvns	r2, r3
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	401a      	ands	r2, r3
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d98:	f04f 31ff 	mov.w	r1, #4294967295
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001da2:	43d9      	mvns	r1, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da8:	4313      	orrs	r3, r2
         );
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3724      	adds	r7, #36	@ 0x24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
	...

08001db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dc8:	d301      	bcc.n	8001dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e00f      	b.n	8001dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dce:	4a0a      	ldr	r2, [pc, #40]	@ (8001df8 <SysTick_Config+0x40>)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dd6:	210f      	movs	r1, #15
 8001dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ddc:	f7ff ff8e 	bl	8001cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001de0:	4b05      	ldr	r3, [pc, #20]	@ (8001df8 <SysTick_Config+0x40>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001de6:	4b04      	ldr	r3, [pc, #16]	@ (8001df8 <SysTick_Config+0x40>)
 8001de8:	2207      	movs	r2, #7
 8001dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	e000e010 	.word	0xe000e010

08001dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff ff47 	bl	8001c98 <__NVIC_SetPriorityGrouping>
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b086      	sub	sp, #24
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	4603      	mov	r3, r0
 8001e1a:	60b9      	str	r1, [r7, #8]
 8001e1c:	607a      	str	r2, [r7, #4]
 8001e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e24:	f7ff ff5c 	bl	8001ce0 <__NVIC_GetPriorityGrouping>
 8001e28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	68b9      	ldr	r1, [r7, #8]
 8001e2e:	6978      	ldr	r0, [r7, #20]
 8001e30:	f7ff ff8e 	bl	8001d50 <NVIC_EncodePriority>
 8001e34:	4602      	mov	r2, r0
 8001e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff ff5d 	bl	8001cfc <__NVIC_SetPriority>
}
 8001e42:	bf00      	nop
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff ffb0 	bl	8001db8 <SysTick_Config>
 8001e58:	4603      	mov	r3, r0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b089      	sub	sp, #36	@ 0x24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001e72:	2300      	movs	r3, #0
 8001e74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001e76:	2300      	movs	r3, #0
 8001e78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61fb      	str	r3, [r7, #28]
 8001e82:	e175      	b.n	8002170 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001e84:	2201      	movs	r2, #1
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	4013      	ands	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	f040 8164 	bne.w	800216a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d005      	beq.n	8001eba <HAL_GPIO_Init+0x56>
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d130      	bne.n	8001f1c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	2203      	movs	r2, #3
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	68da      	ldr	r2, [r3, #12]
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	091b      	lsrs	r3, r3, #4
 8001f06:	f003 0201 	and.w	r2, r3, #1
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 0303 	and.w	r3, r3, #3
 8001f24:	2b03      	cmp	r3, #3
 8001f26:	d017      	beq.n	8001f58 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	2203      	movs	r2, #3
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d123      	bne.n	8001fac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	08da      	lsrs	r2, r3, #3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3208      	adds	r2, #8
 8001f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	f003 0307 	and.w	r3, r3, #7
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	220f      	movs	r2, #15
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	691a      	ldr	r2, [r3, #16]
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	08da      	lsrs	r2, r3, #3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	3208      	adds	r2, #8
 8001fa6:	69b9      	ldr	r1, [r7, #24]
 8001fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 0203 	and.w	r2, r3, #3
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f000 80be 	beq.w	800216a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fee:	4b66      	ldr	r3, [pc, #408]	@ (8002188 <HAL_GPIO_Init+0x324>)
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff2:	4a65      	ldr	r2, [pc, #404]	@ (8002188 <HAL_GPIO_Init+0x324>)
 8001ff4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ff8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ffa:	4b63      	ldr	r3, [pc, #396]	@ (8002188 <HAL_GPIO_Init+0x324>)
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002006:	4a61      	ldr	r2, [pc, #388]	@ (800218c <HAL_GPIO_Init+0x328>)
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	089b      	lsrs	r3, r3, #2
 800200c:	3302      	adds	r3, #2
 800200e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002012:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f003 0303 	and.w	r3, r3, #3
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	220f      	movs	r2, #15
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4013      	ands	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a58      	ldr	r2, [pc, #352]	@ (8002190 <HAL_GPIO_Init+0x32c>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d037      	beq.n	80020a2 <HAL_GPIO_Init+0x23e>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a57      	ldr	r2, [pc, #348]	@ (8002194 <HAL_GPIO_Init+0x330>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d031      	beq.n	800209e <HAL_GPIO_Init+0x23a>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a56      	ldr	r2, [pc, #344]	@ (8002198 <HAL_GPIO_Init+0x334>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d02b      	beq.n	800209a <HAL_GPIO_Init+0x236>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a55      	ldr	r2, [pc, #340]	@ (800219c <HAL_GPIO_Init+0x338>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d025      	beq.n	8002096 <HAL_GPIO_Init+0x232>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a54      	ldr	r2, [pc, #336]	@ (80021a0 <HAL_GPIO_Init+0x33c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d01f      	beq.n	8002092 <HAL_GPIO_Init+0x22e>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a53      	ldr	r2, [pc, #332]	@ (80021a4 <HAL_GPIO_Init+0x340>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d019      	beq.n	800208e <HAL_GPIO_Init+0x22a>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a52      	ldr	r2, [pc, #328]	@ (80021a8 <HAL_GPIO_Init+0x344>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d013      	beq.n	800208a <HAL_GPIO_Init+0x226>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a51      	ldr	r2, [pc, #324]	@ (80021ac <HAL_GPIO_Init+0x348>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d00d      	beq.n	8002086 <HAL_GPIO_Init+0x222>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a50      	ldr	r2, [pc, #320]	@ (80021b0 <HAL_GPIO_Init+0x34c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d007      	beq.n	8002082 <HAL_GPIO_Init+0x21e>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a4f      	ldr	r2, [pc, #316]	@ (80021b4 <HAL_GPIO_Init+0x350>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d101      	bne.n	800207e <HAL_GPIO_Init+0x21a>
 800207a:	2309      	movs	r3, #9
 800207c:	e012      	b.n	80020a4 <HAL_GPIO_Init+0x240>
 800207e:	230a      	movs	r3, #10
 8002080:	e010      	b.n	80020a4 <HAL_GPIO_Init+0x240>
 8002082:	2308      	movs	r3, #8
 8002084:	e00e      	b.n	80020a4 <HAL_GPIO_Init+0x240>
 8002086:	2307      	movs	r3, #7
 8002088:	e00c      	b.n	80020a4 <HAL_GPIO_Init+0x240>
 800208a:	2306      	movs	r3, #6
 800208c:	e00a      	b.n	80020a4 <HAL_GPIO_Init+0x240>
 800208e:	2305      	movs	r3, #5
 8002090:	e008      	b.n	80020a4 <HAL_GPIO_Init+0x240>
 8002092:	2304      	movs	r3, #4
 8002094:	e006      	b.n	80020a4 <HAL_GPIO_Init+0x240>
 8002096:	2303      	movs	r3, #3
 8002098:	e004      	b.n	80020a4 <HAL_GPIO_Init+0x240>
 800209a:	2302      	movs	r3, #2
 800209c:	e002      	b.n	80020a4 <HAL_GPIO_Init+0x240>
 800209e:	2301      	movs	r3, #1
 80020a0:	e000      	b.n	80020a4 <HAL_GPIO_Init+0x240>
 80020a2:	2300      	movs	r3, #0
 80020a4:	69fa      	ldr	r2, [r7, #28]
 80020a6:	f002 0203 	and.w	r2, r2, #3
 80020aa:	0092      	lsls	r2, r2, #2
 80020ac:	4093      	lsls	r3, r2
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80020b4:	4935      	ldr	r1, [pc, #212]	@ (800218c <HAL_GPIO_Init+0x328>)
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	089b      	lsrs	r3, r3, #2
 80020ba:	3302      	adds	r3, #2
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020c2:	4b3d      	ldr	r3, [pc, #244]	@ (80021b8 <HAL_GPIO_Init+0x354>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	43db      	mvns	r3, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4013      	ands	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020e6:	4a34      	ldr	r2, [pc, #208]	@ (80021b8 <HAL_GPIO_Init+0x354>)
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020ec:	4b32      	ldr	r3, [pc, #200]	@ (80021b8 <HAL_GPIO_Init+0x354>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4313      	orrs	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002110:	4a29      	ldr	r2, [pc, #164]	@ (80021b8 <HAL_GPIO_Init+0x354>)
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002116:	4b28      	ldr	r3, [pc, #160]	@ (80021b8 <HAL_GPIO_Init+0x354>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	43db      	mvns	r3, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4013      	ands	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	4313      	orrs	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800213a:	4a1f      	ldr	r2, [pc, #124]	@ (80021b8 <HAL_GPIO_Init+0x354>)
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002140:	4b1d      	ldr	r3, [pc, #116]	@ (80021b8 <HAL_GPIO_Init+0x354>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	43db      	mvns	r3, r3
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4013      	ands	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	4313      	orrs	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002164:	4a14      	ldr	r2, [pc, #80]	@ (80021b8 <HAL_GPIO_Init+0x354>)
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	3301      	adds	r3, #1
 800216e:	61fb      	str	r3, [r7, #28]
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	2b0f      	cmp	r3, #15
 8002174:	f67f ae86 	bls.w	8001e84 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002178:	bf00      	nop
 800217a:	bf00      	nop
 800217c:	3724      	adds	r7, #36	@ 0x24
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	40023800 	.word	0x40023800
 800218c:	40013800 	.word	0x40013800
 8002190:	40020000 	.word	0x40020000
 8002194:	40020400 	.word	0x40020400
 8002198:	40020800 	.word	0x40020800
 800219c:	40020c00 	.word	0x40020c00
 80021a0:	40021000 	.word	0x40021000
 80021a4:	40021400 	.word	0x40021400
 80021a8:	40021800 	.word	0x40021800
 80021ac:	40021c00 	.word	0x40021c00
 80021b0:	40022000 	.word	0x40022000
 80021b4:	40022400 	.word	0x40022400
 80021b8:	40013c00 	.word	0x40013c00

080021bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	807b      	strh	r3, [r7, #2]
 80021c8:	4613      	mov	r3, r2
 80021ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021cc:	787b      	ldrb	r3, [r7, #1]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021d2:	887a      	ldrh	r2, [r7, #2]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80021d8:	e003      	b.n	80021e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80021da:	887b      	ldrh	r3, [r7, #2]
 80021dc:	041a      	lsls	r2, r3, #16
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	619a      	str	r2, [r3, #24]
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
	...

080021f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80021f8:	2300      	movs	r3, #0
 80021fa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e291      	b.n	800272a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 8087 	beq.w	8002322 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002214:	4b96      	ldr	r3, [pc, #600]	@ (8002470 <HAL_RCC_OscConfig+0x280>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f003 030c 	and.w	r3, r3, #12
 800221c:	2b04      	cmp	r3, #4
 800221e:	d00c      	beq.n	800223a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002220:	4b93      	ldr	r3, [pc, #588]	@ (8002470 <HAL_RCC_OscConfig+0x280>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f003 030c 	and.w	r3, r3, #12
 8002228:	2b08      	cmp	r3, #8
 800222a:	d112      	bne.n	8002252 <HAL_RCC_OscConfig+0x62>
 800222c:	4b90      	ldr	r3, [pc, #576]	@ (8002470 <HAL_RCC_OscConfig+0x280>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002234:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002238:	d10b      	bne.n	8002252 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800223a:	4b8d      	ldr	r3, [pc, #564]	@ (8002470 <HAL_RCC_OscConfig+0x280>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d06c      	beq.n	8002320 <HAL_RCC_OscConfig+0x130>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d168      	bne.n	8002320 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e26b      	b.n	800272a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800225a:	d106      	bne.n	800226a <HAL_RCC_OscConfig+0x7a>
 800225c:	4b84      	ldr	r3, [pc, #528]	@ (8002470 <HAL_RCC_OscConfig+0x280>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a83      	ldr	r2, [pc, #524]	@ (8002470 <HAL_RCC_OscConfig+0x280>)
 8002262:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002266:	6013      	str	r3, [r2, #0]
 8002268:	e02e      	b.n	80022c8 <HAL_RCC_OscConfig+0xd8>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10c      	bne.n	800228c <HAL_RCC_OscConfig+0x9c>
 8002272:	4b7f      	ldr	r3, [pc, #508]	@ (8002470 <HAL_RCC_OscConfig+0x280>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a7e      	ldr	r2, [pc, #504]	@ (8002470 <HAL_RCC_OscConfig+0x280>)
 8002278:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800227c:	6013      	str	r3, [r2, #0]
 800227e:	4b7c      	ldr	r3, [pc, #496]	@ (8002470 <HAL_RCC_OscConfig+0x280>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a7b      	ldr	r2, [pc, #492]	@ (8002470 <HAL_RCC_OscConfig+0x280>)
 8002284:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	e01d      	b.n	80022c8 <HAL_RCC_OscConfig+0xd8>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002294:	d10c      	bne.n	80022b0 <HAL_RCC_OscConfig+0xc0>
 8002296:	4b76      	ldr	r3, [pc, #472]	@ (8002470 <HAL_RCC_OscConfig+0x280>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a75      	ldr	r2, [pc, #468]	@ (8002470 <HAL_RCC_OscConfig+0x280>)
 800229c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	4b73      	ldr	r3, [pc, #460]	@ (8002470 <HAL_RCC_OscConfig+0x280>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a72      	ldr	r2, [pc, #456]	@ (8002470 <HAL_RCC_OscConfig+0x280>)
 80022a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022ac:	6013      	str	r3, [r2, #0]
 80022ae:	e00b      	b.n	80022c8 <HAL_RCC_OscConfig+0xd8>
 80022b0:	4b6f      	ldr	r3, [pc, #444]	@ (8002470 <HAL_RCC_OscConfig+0x280>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a6e      	ldr	r2, [pc, #440]	@ (8002470 <HAL_RCC_OscConfig+0x280>)
 80022b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022ba:	6013      	str	r3, [r2, #0]
 80022bc:	4b6c      	ldr	r3, [pc, #432]	@ (8002470 <HAL_RCC_OscConfig+0x280>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a6b      	ldr	r2, [pc, #428]	@ (8002470 <HAL_RCC_OscConfig+0x280>)
 80022c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d013      	beq.n	80022f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d0:	f7ff fcb2 	bl	8001c38 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d8:	f7ff fcae 	bl	8001c38 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b64      	cmp	r3, #100	@ 0x64
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e21f      	b.n	800272a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ea:	4b61      	ldr	r3, [pc, #388]	@ (8002470 <HAL_RCC_OscConfig+0x280>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d0f0      	beq.n	80022d8 <HAL_RCC_OscConfig+0xe8>
 80022f6:	e014      	b.n	8002322 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f8:	f7ff fc9e 	bl	8001c38 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002300:	f7ff fc9a 	bl	8001c38 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b64      	cmp	r3, #100	@ 0x64
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e20b      	b.n	800272a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002312:	4b57      	ldr	r3, [pc, #348]	@ (8002470 <HAL_RCC_OscConfig+0x280>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1f0      	bne.n	8002300 <HAL_RCC_OscConfig+0x110>
 800231e:	e000      	b.n	8002322 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002320:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d069      	beq.n	8002402 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800232e:	4b50      	ldr	r3, [pc, #320]	@ (8002470 <HAL_RCC_OscConfig+0x280>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 030c 	and.w	r3, r3, #12
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00b      	beq.n	8002352 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800233a:	4b4d      	ldr	r3, [pc, #308]	@ (8002470 <HAL_RCC_OscConfig+0x280>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 030c 	and.w	r3, r3, #12
 8002342:	2b08      	cmp	r3, #8
 8002344:	d11c      	bne.n	8002380 <HAL_RCC_OscConfig+0x190>
 8002346:	4b4a      	ldr	r3, [pc, #296]	@ (8002470 <HAL_RCC_OscConfig+0x280>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d116      	bne.n	8002380 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002352:	4b47      	ldr	r3, [pc, #284]	@ (8002470 <HAL_RCC_OscConfig+0x280>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d005      	beq.n	800236a <HAL_RCC_OscConfig+0x17a>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d001      	beq.n	800236a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e1df      	b.n	800272a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236a:	4b41      	ldr	r3, [pc, #260]	@ (8002470 <HAL_RCC_OscConfig+0x280>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	493d      	ldr	r1, [pc, #244]	@ (8002470 <HAL_RCC_OscConfig+0x280>)
 800237a:	4313      	orrs	r3, r2
 800237c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800237e:	e040      	b.n	8002402 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d023      	beq.n	80023d0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002388:	4b39      	ldr	r3, [pc, #228]	@ (8002470 <HAL_RCC_OscConfig+0x280>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a38      	ldr	r2, [pc, #224]	@ (8002470 <HAL_RCC_OscConfig+0x280>)
 800238e:	f043 0301 	orr.w	r3, r3, #1
 8002392:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002394:	f7ff fc50 	bl	8001c38 <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800239c:	f7ff fc4c 	bl	8001c38 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e1bd      	b.n	800272a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ae:	4b30      	ldr	r3, [pc, #192]	@ (8002470 <HAL_RCC_OscConfig+0x280>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d0f0      	beq.n	800239c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ba:	4b2d      	ldr	r3, [pc, #180]	@ (8002470 <HAL_RCC_OscConfig+0x280>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	4929      	ldr	r1, [pc, #164]	@ (8002470 <HAL_RCC_OscConfig+0x280>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	600b      	str	r3, [r1, #0]
 80023ce:	e018      	b.n	8002402 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023d0:	4b27      	ldr	r3, [pc, #156]	@ (8002470 <HAL_RCC_OscConfig+0x280>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a26      	ldr	r2, [pc, #152]	@ (8002470 <HAL_RCC_OscConfig+0x280>)
 80023d6:	f023 0301 	bic.w	r3, r3, #1
 80023da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023dc:	f7ff fc2c 	bl	8001c38 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e4:	f7ff fc28 	bl	8001c38 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e199      	b.n	800272a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002470 <HAL_RCC_OscConfig+0x280>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f0      	bne.n	80023e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0308 	and.w	r3, r3, #8
 800240a:	2b00      	cmp	r3, #0
 800240c:	d038      	beq.n	8002480 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d019      	beq.n	800244a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002416:	4b16      	ldr	r3, [pc, #88]	@ (8002470 <HAL_RCC_OscConfig+0x280>)
 8002418:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800241a:	4a15      	ldr	r2, [pc, #84]	@ (8002470 <HAL_RCC_OscConfig+0x280>)
 800241c:	f043 0301 	orr.w	r3, r3, #1
 8002420:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002422:	f7ff fc09 	bl	8001c38 <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002428:	e008      	b.n	800243c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800242a:	f7ff fc05 	bl	8001c38 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e176      	b.n	800272a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800243c:	4b0c      	ldr	r3, [pc, #48]	@ (8002470 <HAL_RCC_OscConfig+0x280>)
 800243e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0f0      	beq.n	800242a <HAL_RCC_OscConfig+0x23a>
 8002448:	e01a      	b.n	8002480 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800244a:	4b09      	ldr	r3, [pc, #36]	@ (8002470 <HAL_RCC_OscConfig+0x280>)
 800244c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800244e:	4a08      	ldr	r2, [pc, #32]	@ (8002470 <HAL_RCC_OscConfig+0x280>)
 8002450:	f023 0301 	bic.w	r3, r3, #1
 8002454:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002456:	f7ff fbef 	bl	8001c38 <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800245c:	e00a      	b.n	8002474 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800245e:	f7ff fbeb 	bl	8001c38 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d903      	bls.n	8002474 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e15c      	b.n	800272a <HAL_RCC_OscConfig+0x53a>
 8002470:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002474:	4b91      	ldr	r3, [pc, #580]	@ (80026bc <HAL_RCC_OscConfig+0x4cc>)
 8002476:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1ee      	bne.n	800245e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b00      	cmp	r3, #0
 800248a:	f000 80a4 	beq.w	80025d6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800248e:	4b8b      	ldr	r3, [pc, #556]	@ (80026bc <HAL_RCC_OscConfig+0x4cc>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10d      	bne.n	80024b6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800249a:	4b88      	ldr	r3, [pc, #544]	@ (80026bc <HAL_RCC_OscConfig+0x4cc>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249e:	4a87      	ldr	r2, [pc, #540]	@ (80026bc <HAL_RCC_OscConfig+0x4cc>)
 80024a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80024a6:	4b85      	ldr	r3, [pc, #532]	@ (80026bc <HAL_RCC_OscConfig+0x4cc>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ae:	60bb      	str	r3, [r7, #8]
 80024b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024b2:	2301      	movs	r3, #1
 80024b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024b6:	4b82      	ldr	r3, [pc, #520]	@ (80026c0 <HAL_RCC_OscConfig+0x4d0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d118      	bne.n	80024f4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80024c2:	4b7f      	ldr	r3, [pc, #508]	@ (80026c0 <HAL_RCC_OscConfig+0x4d0>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a7e      	ldr	r2, [pc, #504]	@ (80026c0 <HAL_RCC_OscConfig+0x4d0>)
 80024c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ce:	f7ff fbb3 	bl	8001c38 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d6:	f7ff fbaf 	bl	8001c38 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b64      	cmp	r3, #100	@ 0x64
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e120      	b.n	800272a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024e8:	4b75      	ldr	r3, [pc, #468]	@ (80026c0 <HAL_RCC_OscConfig+0x4d0>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0f0      	beq.n	80024d6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d106      	bne.n	800250a <HAL_RCC_OscConfig+0x31a>
 80024fc:	4b6f      	ldr	r3, [pc, #444]	@ (80026bc <HAL_RCC_OscConfig+0x4cc>)
 80024fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002500:	4a6e      	ldr	r2, [pc, #440]	@ (80026bc <HAL_RCC_OscConfig+0x4cc>)
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	6713      	str	r3, [r2, #112]	@ 0x70
 8002508:	e02d      	b.n	8002566 <HAL_RCC_OscConfig+0x376>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10c      	bne.n	800252c <HAL_RCC_OscConfig+0x33c>
 8002512:	4b6a      	ldr	r3, [pc, #424]	@ (80026bc <HAL_RCC_OscConfig+0x4cc>)
 8002514:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002516:	4a69      	ldr	r2, [pc, #420]	@ (80026bc <HAL_RCC_OscConfig+0x4cc>)
 8002518:	f023 0301 	bic.w	r3, r3, #1
 800251c:	6713      	str	r3, [r2, #112]	@ 0x70
 800251e:	4b67      	ldr	r3, [pc, #412]	@ (80026bc <HAL_RCC_OscConfig+0x4cc>)
 8002520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002522:	4a66      	ldr	r2, [pc, #408]	@ (80026bc <HAL_RCC_OscConfig+0x4cc>)
 8002524:	f023 0304 	bic.w	r3, r3, #4
 8002528:	6713      	str	r3, [r2, #112]	@ 0x70
 800252a:	e01c      	b.n	8002566 <HAL_RCC_OscConfig+0x376>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	2b05      	cmp	r3, #5
 8002532:	d10c      	bne.n	800254e <HAL_RCC_OscConfig+0x35e>
 8002534:	4b61      	ldr	r3, [pc, #388]	@ (80026bc <HAL_RCC_OscConfig+0x4cc>)
 8002536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002538:	4a60      	ldr	r2, [pc, #384]	@ (80026bc <HAL_RCC_OscConfig+0x4cc>)
 800253a:	f043 0304 	orr.w	r3, r3, #4
 800253e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002540:	4b5e      	ldr	r3, [pc, #376]	@ (80026bc <HAL_RCC_OscConfig+0x4cc>)
 8002542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002544:	4a5d      	ldr	r2, [pc, #372]	@ (80026bc <HAL_RCC_OscConfig+0x4cc>)
 8002546:	f043 0301 	orr.w	r3, r3, #1
 800254a:	6713      	str	r3, [r2, #112]	@ 0x70
 800254c:	e00b      	b.n	8002566 <HAL_RCC_OscConfig+0x376>
 800254e:	4b5b      	ldr	r3, [pc, #364]	@ (80026bc <HAL_RCC_OscConfig+0x4cc>)
 8002550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002552:	4a5a      	ldr	r2, [pc, #360]	@ (80026bc <HAL_RCC_OscConfig+0x4cc>)
 8002554:	f023 0301 	bic.w	r3, r3, #1
 8002558:	6713      	str	r3, [r2, #112]	@ 0x70
 800255a:	4b58      	ldr	r3, [pc, #352]	@ (80026bc <HAL_RCC_OscConfig+0x4cc>)
 800255c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800255e:	4a57      	ldr	r2, [pc, #348]	@ (80026bc <HAL_RCC_OscConfig+0x4cc>)
 8002560:	f023 0304 	bic.w	r3, r3, #4
 8002564:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d015      	beq.n	800259a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800256e:	f7ff fb63 	bl	8001c38 <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002574:	e00a      	b.n	800258c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002576:	f7ff fb5f 	bl	8001c38 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002584:	4293      	cmp	r3, r2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e0ce      	b.n	800272a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800258c:	4b4b      	ldr	r3, [pc, #300]	@ (80026bc <HAL_RCC_OscConfig+0x4cc>)
 800258e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0ee      	beq.n	8002576 <HAL_RCC_OscConfig+0x386>
 8002598:	e014      	b.n	80025c4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800259a:	f7ff fb4d 	bl	8001c38 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a0:	e00a      	b.n	80025b8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a2:	f7ff fb49 	bl	8001c38 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e0b8      	b.n	800272a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b8:	4b40      	ldr	r3, [pc, #256]	@ (80026bc <HAL_RCC_OscConfig+0x4cc>)
 80025ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1ee      	bne.n	80025a2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025c4:	7dfb      	ldrb	r3, [r7, #23]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d105      	bne.n	80025d6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ca:	4b3c      	ldr	r3, [pc, #240]	@ (80026bc <HAL_RCC_OscConfig+0x4cc>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ce:	4a3b      	ldr	r2, [pc, #236]	@ (80026bc <HAL_RCC_OscConfig+0x4cc>)
 80025d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025d4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f000 80a4 	beq.w	8002728 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025e0:	4b36      	ldr	r3, [pc, #216]	@ (80026bc <HAL_RCC_OscConfig+0x4cc>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f003 030c 	and.w	r3, r3, #12
 80025e8:	2b08      	cmp	r3, #8
 80025ea:	d06b      	beq.n	80026c4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d149      	bne.n	8002688 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f4:	4b31      	ldr	r3, [pc, #196]	@ (80026bc <HAL_RCC_OscConfig+0x4cc>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a30      	ldr	r2, [pc, #192]	@ (80026bc <HAL_RCC_OscConfig+0x4cc>)
 80025fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002600:	f7ff fb1a 	bl	8001c38 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002608:	f7ff fb16 	bl	8001c38 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e087      	b.n	800272a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800261a:	4b28      	ldr	r3, [pc, #160]	@ (80026bc <HAL_RCC_OscConfig+0x4cc>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f0      	bne.n	8002608 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69da      	ldr	r2, [r3, #28]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	431a      	orrs	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002634:	019b      	lsls	r3, r3, #6
 8002636:	431a      	orrs	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800263c:	085b      	lsrs	r3, r3, #1
 800263e:	3b01      	subs	r3, #1
 8002640:	041b      	lsls	r3, r3, #16
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002648:	061b      	lsls	r3, r3, #24
 800264a:	4313      	orrs	r3, r2
 800264c:	4a1b      	ldr	r2, [pc, #108]	@ (80026bc <HAL_RCC_OscConfig+0x4cc>)
 800264e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002652:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002654:	4b19      	ldr	r3, [pc, #100]	@ (80026bc <HAL_RCC_OscConfig+0x4cc>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a18      	ldr	r2, [pc, #96]	@ (80026bc <HAL_RCC_OscConfig+0x4cc>)
 800265a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800265e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002660:	f7ff faea 	bl	8001c38 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002668:	f7ff fae6 	bl	8001c38 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e057      	b.n	800272a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800267a:	4b10      	ldr	r3, [pc, #64]	@ (80026bc <HAL_RCC_OscConfig+0x4cc>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0f0      	beq.n	8002668 <HAL_RCC_OscConfig+0x478>
 8002686:	e04f      	b.n	8002728 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002688:	4b0c      	ldr	r3, [pc, #48]	@ (80026bc <HAL_RCC_OscConfig+0x4cc>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a0b      	ldr	r2, [pc, #44]	@ (80026bc <HAL_RCC_OscConfig+0x4cc>)
 800268e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002692:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002694:	f7ff fad0 	bl	8001c38 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800269c:	f7ff facc 	bl	8001c38 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e03d      	b.n	800272a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ae:	4b03      	ldr	r3, [pc, #12]	@ (80026bc <HAL_RCC_OscConfig+0x4cc>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f0      	bne.n	800269c <HAL_RCC_OscConfig+0x4ac>
 80026ba:	e035      	b.n	8002728 <HAL_RCC_OscConfig+0x538>
 80026bc:	40023800 	.word	0x40023800
 80026c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80026c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002734 <HAL_RCC_OscConfig+0x544>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d028      	beq.n	8002724 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026dc:	429a      	cmp	r2, r3
 80026de:	d121      	bne.n	8002724 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d11a      	bne.n	8002724 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80026f4:	4013      	ands	r3, r2
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80026fa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d111      	bne.n	8002724 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800270a:	085b      	lsrs	r3, r3, #1
 800270c:	3b01      	subs	r3, #1
 800270e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002710:	429a      	cmp	r2, r3
 8002712:	d107      	bne.n	8002724 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800271e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002720:	429a      	cmp	r2, r3
 8002722:	d001      	beq.n	8002728 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e000      	b.n	800272a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3718      	adds	r7, #24
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40023800 	.word	0x40023800

08002738 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002742:	2300      	movs	r3, #0
 8002744:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e0d0      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002750:	4b6a      	ldr	r3, [pc, #424]	@ (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 030f 	and.w	r3, r3, #15
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	429a      	cmp	r2, r3
 800275c:	d910      	bls.n	8002780 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800275e:	4b67      	ldr	r3, [pc, #412]	@ (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f023 020f 	bic.w	r2, r3, #15
 8002766:	4965      	ldr	r1, [pc, #404]	@ (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	4313      	orrs	r3, r2
 800276c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800276e:	4b63      	ldr	r3, [pc, #396]	@ (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	429a      	cmp	r2, r3
 800277a:	d001      	beq.n	8002780 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e0b8      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d020      	beq.n	80027ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	2b00      	cmp	r3, #0
 8002796:	d005      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002798:	4b59      	ldr	r3, [pc, #356]	@ (8002900 <HAL_RCC_ClockConfig+0x1c8>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	4a58      	ldr	r2, [pc, #352]	@ (8002900 <HAL_RCC_ClockConfig+0x1c8>)
 800279e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80027a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0308 	and.w	r3, r3, #8
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d005      	beq.n	80027bc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027b0:	4b53      	ldr	r3, [pc, #332]	@ (8002900 <HAL_RCC_ClockConfig+0x1c8>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	4a52      	ldr	r2, [pc, #328]	@ (8002900 <HAL_RCC_ClockConfig+0x1c8>)
 80027b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80027ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027bc:	4b50      	ldr	r3, [pc, #320]	@ (8002900 <HAL_RCC_ClockConfig+0x1c8>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	494d      	ldr	r1, [pc, #308]	@ (8002900 <HAL_RCC_ClockConfig+0x1c8>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d040      	beq.n	800285c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d107      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e2:	4b47      	ldr	r3, [pc, #284]	@ (8002900 <HAL_RCC_ClockConfig+0x1c8>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d115      	bne.n	800281a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e07f      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d107      	bne.n	800280a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027fa:	4b41      	ldr	r3, [pc, #260]	@ (8002900 <HAL_RCC_ClockConfig+0x1c8>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d109      	bne.n	800281a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e073      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800280a:	4b3d      	ldr	r3, [pc, #244]	@ (8002900 <HAL_RCC_ClockConfig+0x1c8>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e06b      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800281a:	4b39      	ldr	r3, [pc, #228]	@ (8002900 <HAL_RCC_ClockConfig+0x1c8>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f023 0203 	bic.w	r2, r3, #3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	4936      	ldr	r1, [pc, #216]	@ (8002900 <HAL_RCC_ClockConfig+0x1c8>)
 8002828:	4313      	orrs	r3, r2
 800282a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800282c:	f7ff fa04 	bl	8001c38 <HAL_GetTick>
 8002830:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002832:	e00a      	b.n	800284a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002834:	f7ff fa00 	bl	8001c38 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002842:	4293      	cmp	r3, r2
 8002844:	d901      	bls.n	800284a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e053      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800284a:	4b2d      	ldr	r3, [pc, #180]	@ (8002900 <HAL_RCC_ClockConfig+0x1c8>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 020c 	and.w	r2, r3, #12
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	429a      	cmp	r2, r3
 800285a:	d1eb      	bne.n	8002834 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800285c:	4b27      	ldr	r3, [pc, #156]	@ (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 030f 	and.w	r3, r3, #15
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	429a      	cmp	r2, r3
 8002868:	d210      	bcs.n	800288c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800286a:	4b24      	ldr	r3, [pc, #144]	@ (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f023 020f 	bic.w	r2, r3, #15
 8002872:	4922      	ldr	r1, [pc, #136]	@ (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	4313      	orrs	r3, r2
 8002878:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800287a:	4b20      	ldr	r3, [pc, #128]	@ (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 030f 	and.w	r3, r3, #15
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	429a      	cmp	r2, r3
 8002886:	d001      	beq.n	800288c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e032      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b00      	cmp	r3, #0
 8002896:	d008      	beq.n	80028aa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002898:	4b19      	ldr	r3, [pc, #100]	@ (8002900 <HAL_RCC_ClockConfig+0x1c8>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	4916      	ldr	r1, [pc, #88]	@ (8002900 <HAL_RCC_ClockConfig+0x1c8>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0308 	and.w	r3, r3, #8
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d009      	beq.n	80028ca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028b6:	4b12      	ldr	r3, [pc, #72]	@ (8002900 <HAL_RCC_ClockConfig+0x1c8>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	490e      	ldr	r1, [pc, #56]	@ (8002900 <HAL_RCC_ClockConfig+0x1c8>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028ca:	f000 f821 	bl	8002910 <HAL_RCC_GetSysClockFreq>
 80028ce:	4602      	mov	r2, r0
 80028d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002900 <HAL_RCC_ClockConfig+0x1c8>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	091b      	lsrs	r3, r3, #4
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	490a      	ldr	r1, [pc, #40]	@ (8002904 <HAL_RCC_ClockConfig+0x1cc>)
 80028dc:	5ccb      	ldrb	r3, [r1, r3]
 80028de:	fa22 f303 	lsr.w	r3, r2, r3
 80028e2:	4a09      	ldr	r2, [pc, #36]	@ (8002908 <HAL_RCC_ClockConfig+0x1d0>)
 80028e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028e6:	4b09      	ldr	r3, [pc, #36]	@ (800290c <HAL_RCC_ClockConfig+0x1d4>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff f960 	bl	8001bb0 <HAL_InitTick>

  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40023c00 	.word	0x40023c00
 8002900:	40023800 	.word	0x40023800
 8002904:	08004bf4 	.word	0x08004bf4
 8002908:	20000000 	.word	0x20000000
 800290c:	20000004 	.word	0x20000004

08002910 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002914:	b090      	sub	sp, #64	@ 0x40
 8002916:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002918:	2300      	movs	r3, #0
 800291a:	637b      	str	r3, [r7, #52]	@ 0x34
 800291c:	2300      	movs	r3, #0
 800291e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002920:	2300      	movs	r3, #0
 8002922:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002924:	2300      	movs	r3, #0
 8002926:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002928:	4b59      	ldr	r3, [pc, #356]	@ (8002a90 <HAL_RCC_GetSysClockFreq+0x180>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f003 030c 	and.w	r3, r3, #12
 8002930:	2b08      	cmp	r3, #8
 8002932:	d00d      	beq.n	8002950 <HAL_RCC_GetSysClockFreq+0x40>
 8002934:	2b08      	cmp	r3, #8
 8002936:	f200 80a1 	bhi.w	8002a7c <HAL_RCC_GetSysClockFreq+0x16c>
 800293a:	2b00      	cmp	r3, #0
 800293c:	d002      	beq.n	8002944 <HAL_RCC_GetSysClockFreq+0x34>
 800293e:	2b04      	cmp	r3, #4
 8002940:	d003      	beq.n	800294a <HAL_RCC_GetSysClockFreq+0x3a>
 8002942:	e09b      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002944:	4b53      	ldr	r3, [pc, #332]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0x184>)
 8002946:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002948:	e09b      	b.n	8002a82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800294a:	4b53      	ldr	r3, [pc, #332]	@ (8002a98 <HAL_RCC_GetSysClockFreq+0x188>)
 800294c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800294e:	e098      	b.n	8002a82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002950:	4b4f      	ldr	r3, [pc, #316]	@ (8002a90 <HAL_RCC_GetSysClockFreq+0x180>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002958:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800295a:	4b4d      	ldr	r3, [pc, #308]	@ (8002a90 <HAL_RCC_GetSysClockFreq+0x180>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d028      	beq.n	80029b8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002966:	4b4a      	ldr	r3, [pc, #296]	@ (8002a90 <HAL_RCC_GetSysClockFreq+0x180>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	099b      	lsrs	r3, r3, #6
 800296c:	2200      	movs	r2, #0
 800296e:	623b      	str	r3, [r7, #32]
 8002970:	627a      	str	r2, [r7, #36]	@ 0x24
 8002972:	6a3b      	ldr	r3, [r7, #32]
 8002974:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002978:	2100      	movs	r1, #0
 800297a:	4b47      	ldr	r3, [pc, #284]	@ (8002a98 <HAL_RCC_GetSysClockFreq+0x188>)
 800297c:	fb03 f201 	mul.w	r2, r3, r1
 8002980:	2300      	movs	r3, #0
 8002982:	fb00 f303 	mul.w	r3, r0, r3
 8002986:	4413      	add	r3, r2
 8002988:	4a43      	ldr	r2, [pc, #268]	@ (8002a98 <HAL_RCC_GetSysClockFreq+0x188>)
 800298a:	fba0 1202 	umull	r1, r2, r0, r2
 800298e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002990:	460a      	mov	r2, r1
 8002992:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002994:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002996:	4413      	add	r3, r2
 8002998:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800299a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800299c:	2200      	movs	r2, #0
 800299e:	61bb      	str	r3, [r7, #24]
 80029a0:	61fa      	str	r2, [r7, #28]
 80029a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80029aa:	f7fd fc2d 	bl	8000208 <__aeabi_uldivmod>
 80029ae:	4602      	mov	r2, r0
 80029b0:	460b      	mov	r3, r1
 80029b2:	4613      	mov	r3, r2
 80029b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029b6:	e053      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029b8:	4b35      	ldr	r3, [pc, #212]	@ (8002a90 <HAL_RCC_GetSysClockFreq+0x180>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	099b      	lsrs	r3, r3, #6
 80029be:	2200      	movs	r2, #0
 80029c0:	613b      	str	r3, [r7, #16]
 80029c2:	617a      	str	r2, [r7, #20]
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80029ca:	f04f 0b00 	mov.w	fp, #0
 80029ce:	4652      	mov	r2, sl
 80029d0:	465b      	mov	r3, fp
 80029d2:	f04f 0000 	mov.w	r0, #0
 80029d6:	f04f 0100 	mov.w	r1, #0
 80029da:	0159      	lsls	r1, r3, #5
 80029dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029e0:	0150      	lsls	r0, r2, #5
 80029e2:	4602      	mov	r2, r0
 80029e4:	460b      	mov	r3, r1
 80029e6:	ebb2 080a 	subs.w	r8, r2, sl
 80029ea:	eb63 090b 	sbc.w	r9, r3, fp
 80029ee:	f04f 0200 	mov.w	r2, #0
 80029f2:	f04f 0300 	mov.w	r3, #0
 80029f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80029fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80029fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002a02:	ebb2 0408 	subs.w	r4, r2, r8
 8002a06:	eb63 0509 	sbc.w	r5, r3, r9
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	f04f 0300 	mov.w	r3, #0
 8002a12:	00eb      	lsls	r3, r5, #3
 8002a14:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a18:	00e2      	lsls	r2, r4, #3
 8002a1a:	4614      	mov	r4, r2
 8002a1c:	461d      	mov	r5, r3
 8002a1e:	eb14 030a 	adds.w	r3, r4, sl
 8002a22:	603b      	str	r3, [r7, #0]
 8002a24:	eb45 030b 	adc.w	r3, r5, fp
 8002a28:	607b      	str	r3, [r7, #4]
 8002a2a:	f04f 0200 	mov.w	r2, #0
 8002a2e:	f04f 0300 	mov.w	r3, #0
 8002a32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a36:	4629      	mov	r1, r5
 8002a38:	028b      	lsls	r3, r1, #10
 8002a3a:	4621      	mov	r1, r4
 8002a3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a40:	4621      	mov	r1, r4
 8002a42:	028a      	lsls	r2, r1, #10
 8002a44:	4610      	mov	r0, r2
 8002a46:	4619      	mov	r1, r3
 8002a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	60bb      	str	r3, [r7, #8]
 8002a4e:	60fa      	str	r2, [r7, #12]
 8002a50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a54:	f7fd fbd8 	bl	8000208 <__aeabi_uldivmod>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002a60:	4b0b      	ldr	r3, [pc, #44]	@ (8002a90 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	0c1b      	lsrs	r3, r3, #16
 8002a66:	f003 0303 	and.w	r3, r3, #3
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002a70:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a78:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a7a:	e002      	b.n	8002a82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a7c:	4b05      	ldr	r3, [pc, #20]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a7e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3740      	adds	r7, #64	@ 0x40
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a8e:	bf00      	nop
 8002a90:	40023800 	.word	0x40023800
 8002a94:	00f42400 	.word	0x00f42400
 8002a98:	017d7840 	.word	0x017d7840

08002a9c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aa0:	4b03      	ldr	r3, [pc, #12]	@ (8002ab0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	20000000 	.word	0x20000000

08002ab4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ab8:	f7ff fff0 	bl	8002a9c <HAL_RCC_GetHCLKFreq>
 8002abc:	4602      	mov	r2, r0
 8002abe:	4b05      	ldr	r3, [pc, #20]	@ (8002ad4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	0a9b      	lsrs	r3, r3, #10
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	4903      	ldr	r1, [pc, #12]	@ (8002ad8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aca:	5ccb      	ldrb	r3, [r1, r3]
 8002acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	08004c04 	.word	0x08004c04

08002adc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ae0:	f7ff ffdc 	bl	8002a9c <HAL_RCC_GetHCLKFreq>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	4b05      	ldr	r3, [pc, #20]	@ (8002afc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	0b5b      	lsrs	r3, r3, #13
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	4903      	ldr	r1, [pc, #12]	@ (8002b00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002af2:	5ccb      	ldrb	r3, [r1, r3]
 8002af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	40023800 	.word	0x40023800
 8002b00:	08004c04 	.word	0x08004c04

08002b04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b088      	sub	sp, #32
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002b10:	2300      	movs	r3, #0
 8002b12:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002b14:	2300      	movs	r3, #0
 8002b16:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d012      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b2c:	4b69      	ldr	r3, [pc, #420]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	4a68      	ldr	r2, [pc, #416]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b32:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002b36:	6093      	str	r3, [r2, #8]
 8002b38:	4b66      	ldr	r3, [pc, #408]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b40:	4964      	ldr	r1, [pc, #400]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d017      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b5e:	4b5d      	ldr	r3, [pc, #372]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b64:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b6c:	4959      	ldr	r1, [pc, #356]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b7c:	d101      	bne.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d017      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b9a:	4b4e      	ldr	r3, [pc, #312]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ba0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba8:	494a      	ldr	r1, [pc, #296]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bb8:	d101      	bne.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0320 	and.w	r3, r3, #32
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 808b 	beq.w	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002be8:	4b3a      	ldr	r3, [pc, #232]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bec:	4a39      	ldr	r2, [pc, #228]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bf2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bf4:	4b37      	ldr	r3, [pc, #220]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bfc:	60bb      	str	r3, [r7, #8]
 8002bfe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c00:	4b35      	ldr	r3, [pc, #212]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a34      	ldr	r2, [pc, #208]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c0c:	f7ff f814 	bl	8001c38 <HAL_GetTick>
 8002c10:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c14:	f7ff f810 	bl	8001c38 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b64      	cmp	r3, #100	@ 0x64
 8002c20:	d901      	bls.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e357      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c26:	4b2c      	ldr	r3, [pc, #176]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f0      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c32:	4b28      	ldr	r3, [pc, #160]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c3a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d035      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d02e      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c50:	4b20      	ldr	r3, [pc, #128]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c58:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c5a:	4b1e      	ldr	r3, [pc, #120]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c5e:	4a1d      	ldr	r2, [pc, #116]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c64:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c66:	4b1b      	ldr	r3, [pc, #108]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c6a:	4a1a      	ldr	r2, [pc, #104]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c70:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c72:	4a18      	ldr	r2, [pc, #96]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c78:	4b16      	ldr	r3, [pc, #88]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d114      	bne.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c84:	f7fe ffd8 	bl	8001c38 <HAL_GetTick>
 8002c88:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c8a:	e00a      	b.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c8c:	f7fe ffd4 	bl	8001c38 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e319      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0ee      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002cba:	d111      	bne.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002cbc:	4b05      	ldr	r3, [pc, #20]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002cc8:	4b04      	ldr	r3, [pc, #16]	@ (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002cca:	400b      	ands	r3, r1
 8002ccc:	4901      	ldr	r1, [pc, #4]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	608b      	str	r3, [r1, #8]
 8002cd2:	e00b      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	40007000 	.word	0x40007000
 8002cdc:	0ffffcff 	.word	0x0ffffcff
 8002ce0:	4baa      	ldr	r3, [pc, #680]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	4aa9      	ldr	r2, [pc, #676]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ce6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002cea:	6093      	str	r3, [r2, #8]
 8002cec:	4ba7      	ldr	r3, [pc, #668]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf8:	49a4      	ldr	r1, [pc, #656]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0310 	and.w	r3, r3, #16
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d010      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002d0a:	4ba0      	ldr	r3, [pc, #640]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d10:	4a9e      	ldr	r2, [pc, #632]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d16:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002d1a:	4b9c      	ldr	r3, [pc, #624]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d1c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d24:	4999      	ldr	r1, [pc, #612]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00a      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d38:	4b94      	ldr	r3, [pc, #592]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d3e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d46:	4991      	ldr	r1, [pc, #580]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00a      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d5a:	4b8c      	ldr	r3, [pc, #560]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d60:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d68:	4988      	ldr	r1, [pc, #544]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00a      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d7c:	4b83      	ldr	r3, [pc, #524]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d82:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d8a:	4980      	ldr	r1, [pc, #512]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00a      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d9e:	4b7b      	ldr	r3, [pc, #492]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002da4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dac:	4977      	ldr	r1, [pc, #476]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00a      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dc0:	4b72      	ldr	r3, [pc, #456]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dc6:	f023 0203 	bic.w	r2, r3, #3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dce:	496f      	ldr	r1, [pc, #444]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00a      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002de2:	4b6a      	ldr	r3, [pc, #424]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002de8:	f023 020c 	bic.w	r2, r3, #12
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002df0:	4966      	ldr	r1, [pc, #408]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00a      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e04:	4b61      	ldr	r3, [pc, #388]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e0a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e12:	495e      	ldr	r1, [pc, #376]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00a      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e26:	4b59      	ldr	r3, [pc, #356]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e2c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e34:	4955      	ldr	r1, [pc, #340]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00a      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e48:	4b50      	ldr	r3, [pc, #320]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e4e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e56:	494d      	ldr	r1, [pc, #308]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00a      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e6a:	4b48      	ldr	r3, [pc, #288]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e70:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e78:	4944      	ldr	r1, [pc, #272]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00a      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e8c:	4b3f      	ldr	r3, [pc, #252]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e92:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e9a:	493c      	ldr	r1, [pc, #240]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00a      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002eae:	4b37      	ldr	r3, [pc, #220]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eb4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ebc:	4933      	ldr	r1, [pc, #204]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00a      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ed0:	4b2e      	ldr	r3, [pc, #184]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ed6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ede:	492b      	ldr	r1, [pc, #172]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d011      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002ef2:	4b26      	ldr	r3, [pc, #152]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ef8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f00:	4922      	ldr	r1, [pc, #136]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f10:	d101      	bne.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002f12:	2301      	movs	r3, #1
 8002f14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0308 	and.w	r3, r3, #8
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002f22:	2301      	movs	r3, #1
 8002f24:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00a      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f32:	4b16      	ldr	r3, [pc, #88]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f38:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f40:	4912      	ldr	r1, [pc, #72]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00b      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f54:	4b0d      	ldr	r3, [pc, #52]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f5a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f64:	4909      	ldr	r1, [pc, #36]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d006      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f000 80d9 	beq.w	8003132 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f80:	4b02      	ldr	r3, [pc, #8]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a01      	ldr	r2, [pc, #4]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f86:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002f8a:	e001      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002f8c:	40023800 	.word	0x40023800
 8002f90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f92:	f7fe fe51 	bl	8001c38 <HAL_GetTick>
 8002f96:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f98:	e008      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f9a:	f7fe fe4d 	bl	8001c38 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b64      	cmp	r3, #100	@ 0x64
 8002fa6:	d901      	bls.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e194      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fac:	4b6c      	ldr	r3, [pc, #432]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1f0      	bne.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d021      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d11d      	bne.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002fcc:	4b64      	ldr	r3, [pc, #400]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fd2:	0c1b      	lsrs	r3, r3, #16
 8002fd4:	f003 0303 	and.w	r3, r3, #3
 8002fd8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002fda:	4b61      	ldr	r3, [pc, #388]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fe0:	0e1b      	lsrs	r3, r3, #24
 8002fe2:	f003 030f 	and.w	r3, r3, #15
 8002fe6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	019a      	lsls	r2, r3, #6
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	041b      	lsls	r3, r3, #16
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	061b      	lsls	r3, r3, #24
 8002ff8:	431a      	orrs	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	071b      	lsls	r3, r3, #28
 8003000:	4957      	ldr	r1, [pc, #348]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003002:	4313      	orrs	r3, r2
 8003004:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d004      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003018:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800301c:	d00a      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003026:	2b00      	cmp	r3, #0
 8003028:	d02e      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003032:	d129      	bne.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003034:	4b4a      	ldr	r3, [pc, #296]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003036:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800303a:	0c1b      	lsrs	r3, r3, #16
 800303c:	f003 0303 	and.w	r3, r3, #3
 8003040:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003042:	4b47      	ldr	r3, [pc, #284]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003044:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003048:	0f1b      	lsrs	r3, r3, #28
 800304a:	f003 0307 	and.w	r3, r3, #7
 800304e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	019a      	lsls	r2, r3, #6
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	041b      	lsls	r3, r3, #16
 800305a:	431a      	orrs	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	061b      	lsls	r3, r3, #24
 8003062:	431a      	orrs	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	071b      	lsls	r3, r3, #28
 8003068:	493d      	ldr	r1, [pc, #244]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800306a:	4313      	orrs	r3, r2
 800306c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003070:	4b3b      	ldr	r3, [pc, #236]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003072:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003076:	f023 021f 	bic.w	r2, r3, #31
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307e:	3b01      	subs	r3, #1
 8003080:	4937      	ldr	r1, [pc, #220]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003082:	4313      	orrs	r3, r2
 8003084:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d01d      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003094:	4b32      	ldr	r3, [pc, #200]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003096:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800309a:	0e1b      	lsrs	r3, r3, #24
 800309c:	f003 030f 	and.w	r3, r3, #15
 80030a0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030a2:	4b2f      	ldr	r3, [pc, #188]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030a8:	0f1b      	lsrs	r3, r3, #28
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	019a      	lsls	r2, r3, #6
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	041b      	lsls	r3, r3, #16
 80030bc:	431a      	orrs	r2, r3
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	061b      	lsls	r3, r3, #24
 80030c2:	431a      	orrs	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	071b      	lsls	r3, r3, #28
 80030c8:	4925      	ldr	r1, [pc, #148]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d011      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	019a      	lsls	r2, r3, #6
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	041b      	lsls	r3, r3, #16
 80030e8:	431a      	orrs	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	061b      	lsls	r3, r3, #24
 80030f0:	431a      	orrs	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	071b      	lsls	r3, r3, #28
 80030f8:	4919      	ldr	r1, [pc, #100]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003100:	4b17      	ldr	r3, [pc, #92]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a16      	ldr	r2, [pc, #88]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003106:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800310a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800310c:	f7fe fd94 	bl	8001c38 <HAL_GetTick>
 8003110:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003112:	e008      	b.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003114:	f7fe fd90 	bl	8001c38 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b64      	cmp	r3, #100	@ 0x64
 8003120:	d901      	bls.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e0d7      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003126:	4b0e      	ldr	r3, [pc, #56]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d0f0      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	2b01      	cmp	r3, #1
 8003136:	f040 80cd 	bne.w	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800313a:	4b09      	ldr	r3, [pc, #36]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a08      	ldr	r2, [pc, #32]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003140:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003144:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003146:	f7fe fd77 	bl	8001c38 <HAL_GetTick>
 800314a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800314c:	e00a      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800314e:	f7fe fd73 	bl	8001c38 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b64      	cmp	r3, #100	@ 0x64
 800315a:	d903      	bls.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e0ba      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003160:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003164:	4b5e      	ldr	r3, [pc, #376]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800316c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003170:	d0ed      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003182:	2b00      	cmp	r3, #0
 8003184:	d009      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800318e:	2b00      	cmp	r3, #0
 8003190:	d02e      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003196:	2b00      	cmp	r3, #0
 8003198:	d12a      	bne.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800319a:	4b51      	ldr	r3, [pc, #324]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800319c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031a0:	0c1b      	lsrs	r3, r3, #16
 80031a2:	f003 0303 	and.w	r3, r3, #3
 80031a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031a8:	4b4d      	ldr	r3, [pc, #308]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ae:	0f1b      	lsrs	r3, r3, #28
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	019a      	lsls	r2, r3, #6
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	041b      	lsls	r3, r3, #16
 80031c0:	431a      	orrs	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	061b      	lsls	r3, r3, #24
 80031c8:	431a      	orrs	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	071b      	lsls	r3, r3, #28
 80031ce:	4944      	ldr	r1, [pc, #272]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80031d6:	4b42      	ldr	r3, [pc, #264]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031dc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e4:	3b01      	subs	r3, #1
 80031e6:	021b      	lsls	r3, r3, #8
 80031e8:	493d      	ldr	r1, [pc, #244]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d022      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003200:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003204:	d11d      	bne.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003206:	4b36      	ldr	r3, [pc, #216]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003208:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800320c:	0e1b      	lsrs	r3, r3, #24
 800320e:	f003 030f 	and.w	r3, r3, #15
 8003212:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003214:	4b32      	ldr	r3, [pc, #200]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800321a:	0f1b      	lsrs	r3, r3, #28
 800321c:	f003 0307 	and.w	r3, r3, #7
 8003220:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	019a      	lsls	r2, r3, #6
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	041b      	lsls	r3, r3, #16
 800322e:	431a      	orrs	r2, r3
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	061b      	lsls	r3, r3, #24
 8003234:	431a      	orrs	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	071b      	lsls	r3, r3, #28
 800323a:	4929      	ldr	r1, [pc, #164]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800323c:	4313      	orrs	r3, r2
 800323e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0308 	and.w	r3, r3, #8
 800324a:	2b00      	cmp	r3, #0
 800324c:	d028      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800324e:	4b24      	ldr	r3, [pc, #144]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003250:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003254:	0e1b      	lsrs	r3, r3, #24
 8003256:	f003 030f 	and.w	r3, r3, #15
 800325a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800325c:	4b20      	ldr	r3, [pc, #128]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800325e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003262:	0c1b      	lsrs	r3, r3, #16
 8003264:	f003 0303 	and.w	r3, r3, #3
 8003268:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	019a      	lsls	r2, r3, #6
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	041b      	lsls	r3, r3, #16
 8003274:	431a      	orrs	r2, r3
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	061b      	lsls	r3, r3, #24
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	071b      	lsls	r3, r3, #28
 8003282:	4917      	ldr	r1, [pc, #92]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003284:	4313      	orrs	r3, r2
 8003286:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800328a:	4b15      	ldr	r3, [pc, #84]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800328c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003290:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003298:	4911      	ldr	r1, [pc, #68]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800329a:	4313      	orrs	r3, r2
 800329c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80032a0:	4b0f      	ldr	r3, [pc, #60]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a0e      	ldr	r2, [pc, #56]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032ac:	f7fe fcc4 	bl	8001c38 <HAL_GetTick>
 80032b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032b2:	e008      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032b4:	f7fe fcc0 	bl	8001c38 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b64      	cmp	r3, #100	@ 0x64
 80032c0:	d901      	bls.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e007      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032c6:	4b06      	ldr	r3, [pc, #24]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032d2:	d1ef      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3720      	adds	r7, #32
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	40023800 	.word	0x40023800

080032e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e09d      	b.n	8003432 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d108      	bne.n	8003310 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003306:	d009      	beq.n	800331c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	61da      	str	r2, [r3, #28]
 800330e:	e005      	b.n	800331c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d106      	bne.n	800333c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7fe fade 	bl	80018f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003352:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800335c:	d902      	bls.n	8003364 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800335e:	2300      	movs	r3, #0
 8003360:	60fb      	str	r3, [r7, #12]
 8003362:	e002      	b.n	800336a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003364:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003368:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003372:	d007      	beq.n	8003384 <HAL_SPI_Init+0xa0>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800337c:	d002      	beq.n	8003384 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003394:	431a      	orrs	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	431a      	orrs	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	431a      	orrs	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033b2:	431a      	orrs	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	69db      	ldr	r3, [r3, #28]
 80033b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80033bc:	431a      	orrs	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033c6:	ea42 0103 	orr.w	r1, r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ce:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	0c1b      	lsrs	r3, r3, #16
 80033e0:	f003 0204 	and.w	r2, r3, #4
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e8:	f003 0310 	and.w	r3, r3, #16
 80033ec:	431a      	orrs	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	431a      	orrs	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003400:	ea42 0103 	orr.w	r1, r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	430a      	orrs	r2, r1
 8003410:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	69da      	ldr	r2, [r3, #28]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003420:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b088      	sub	sp, #32
 800343e:	af00      	add	r7, sp, #0
 8003440:	60f8      	str	r0, [r7, #12]
 8003442:	60b9      	str	r1, [r7, #8]
 8003444:	603b      	str	r3, [r7, #0]
 8003446:	4613      	mov	r3, r2
 8003448:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800344a:	2300      	movs	r3, #0
 800344c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003454:	2b01      	cmp	r3, #1
 8003456:	d101      	bne.n	800345c <HAL_SPI_Transmit+0x22>
 8003458:	2302      	movs	r3, #2
 800345a:	e158      	b.n	800370e <HAL_SPI_Transmit+0x2d4>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003464:	f7fe fbe8 	bl	8001c38 <HAL_GetTick>
 8003468:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800346a:	88fb      	ldrh	r3, [r7, #6]
 800346c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b01      	cmp	r3, #1
 8003478:	d002      	beq.n	8003480 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800347a:	2302      	movs	r3, #2
 800347c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800347e:	e13d      	b.n	80036fc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d002      	beq.n	800348c <HAL_SPI_Transmit+0x52>
 8003486:	88fb      	ldrh	r3, [r7, #6]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d102      	bne.n	8003492 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003490:	e134      	b.n	80036fc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2203      	movs	r2, #3
 8003496:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	88fa      	ldrh	r2, [r7, #6]
 80034aa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	88fa      	ldrh	r2, [r7, #6]
 80034b0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034dc:	d10f      	bne.n	80034fe <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003508:	2b40      	cmp	r3, #64	@ 0x40
 800350a:	d007      	beq.n	800351c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800351a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003524:	d94b      	bls.n	80035be <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d002      	beq.n	8003534 <HAL_SPI_Transmit+0xfa>
 800352e:	8afb      	ldrh	r3, [r7, #22]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d13e      	bne.n	80035b2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003538:	881a      	ldrh	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003544:	1c9a      	adds	r2, r3, #2
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800354e:	b29b      	uxth	r3, r3
 8003550:	3b01      	subs	r3, #1
 8003552:	b29a      	uxth	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003558:	e02b      	b.n	80035b2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b02      	cmp	r3, #2
 8003566:	d112      	bne.n	800358e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800356c:	881a      	ldrh	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003578:	1c9a      	adds	r2, r3, #2
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003582:	b29b      	uxth	r3, r3
 8003584:	3b01      	subs	r3, #1
 8003586:	b29a      	uxth	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800358c:	e011      	b.n	80035b2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800358e:	f7fe fb53 	bl	8001c38 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	429a      	cmp	r2, r3
 800359c:	d803      	bhi.n	80035a6 <HAL_SPI_Transmit+0x16c>
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a4:	d102      	bne.n	80035ac <HAL_SPI_Transmit+0x172>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d102      	bne.n	80035b2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80035b0:	e0a4      	b.n	80036fc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1ce      	bne.n	800355a <HAL_SPI_Transmit+0x120>
 80035bc:	e07c      	b.n	80036b8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d002      	beq.n	80035cc <HAL_SPI_Transmit+0x192>
 80035c6:	8afb      	ldrh	r3, [r7, #22]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d170      	bne.n	80036ae <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d912      	bls.n	80035fc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035da:	881a      	ldrh	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035e6:	1c9a      	adds	r2, r3, #2
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	3b02      	subs	r3, #2
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80035fa:	e058      	b.n	80036ae <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	330c      	adds	r3, #12
 8003606:	7812      	ldrb	r2, [r2, #0]
 8003608:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800360e:	1c5a      	adds	r2, r3, #1
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003618:	b29b      	uxth	r3, r3
 800361a:	3b01      	subs	r3, #1
 800361c:	b29a      	uxth	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003622:	e044      	b.n	80036ae <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b02      	cmp	r3, #2
 8003630:	d12b      	bne.n	800368a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003636:	b29b      	uxth	r3, r3
 8003638:	2b01      	cmp	r3, #1
 800363a:	d912      	bls.n	8003662 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003640:	881a      	ldrh	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800364c:	1c9a      	adds	r2, r3, #2
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003656:	b29b      	uxth	r3, r3
 8003658:	3b02      	subs	r3, #2
 800365a:	b29a      	uxth	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003660:	e025      	b.n	80036ae <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	330c      	adds	r3, #12
 800366c:	7812      	ldrb	r2, [r2, #0]
 800366e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003674:	1c5a      	adds	r2, r3, #1
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800367e:	b29b      	uxth	r3, r3
 8003680:	3b01      	subs	r3, #1
 8003682:	b29a      	uxth	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003688:	e011      	b.n	80036ae <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800368a:	f7fe fad5 	bl	8001c38 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	429a      	cmp	r2, r3
 8003698:	d803      	bhi.n	80036a2 <HAL_SPI_Transmit+0x268>
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a0:	d102      	bne.n	80036a8 <HAL_SPI_Transmit+0x26e>
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d102      	bne.n	80036ae <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036ac:	e026      	b.n	80036fc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1b5      	bne.n	8003624 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	6839      	ldr	r1, [r7, #0]
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 fd15 	bl	80040ec <SPI_EndRxTxTransaction>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d002      	beq.n	80036ce <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2220      	movs	r2, #32
 80036cc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10a      	bne.n	80036ec <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036d6:	2300      	movs	r3, #0
 80036d8:	613b      	str	r3, [r7, #16]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	613b      	str	r3, [r7, #16]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	613b      	str	r3, [r7, #16]
 80036ea:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d002      	beq.n	80036fa <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	77fb      	strb	r3, [r7, #31]
 80036f8:	e000      	b.n	80036fc <HAL_SPI_Transmit+0x2c2>
  }

error:
 80036fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800370c:	7ffb      	ldrb	r3, [r7, #31]
}
 800370e:	4618      	mov	r0, r3
 8003710:	3720      	adds	r7, #32
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b088      	sub	sp, #32
 800371a:	af02      	add	r7, sp, #8
 800371c:	60f8      	str	r0, [r7, #12]
 800371e:	60b9      	str	r1, [r7, #8]
 8003720:	603b      	str	r3, [r7, #0]
 8003722:	4613      	mov	r3, r2
 8003724:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003726:	2300      	movs	r3, #0
 8003728:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003732:	d112      	bne.n	800375a <HAL_SPI_Receive+0x44>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d10e      	bne.n	800375a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2204      	movs	r2, #4
 8003740:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003744:	88fa      	ldrh	r2, [r7, #6]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	4613      	mov	r3, r2
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	68b9      	ldr	r1, [r7, #8]
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f000 f910 	bl	8003976 <HAL_SPI_TransmitReceive>
 8003756:	4603      	mov	r3, r0
 8003758:	e109      	b.n	800396e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003760:	2b01      	cmp	r3, #1
 8003762:	d101      	bne.n	8003768 <HAL_SPI_Receive+0x52>
 8003764:	2302      	movs	r3, #2
 8003766:	e102      	b.n	800396e <HAL_SPI_Receive+0x258>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003770:	f7fe fa62 	bl	8001c38 <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b01      	cmp	r3, #1
 8003780:	d002      	beq.n	8003788 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003782:	2302      	movs	r3, #2
 8003784:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003786:	e0e9      	b.n	800395c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d002      	beq.n	8003794 <HAL_SPI_Receive+0x7e>
 800378e:	88fb      	ldrh	r3, [r7, #6]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d102      	bne.n	800379a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003798:	e0e0      	b.n	800395c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2204      	movs	r2, #4
 800379e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	88fa      	ldrh	r2, [r7, #6]
 80037b2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	88fa      	ldrh	r2, [r7, #6]
 80037ba:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80037e4:	d908      	bls.n	80037f8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80037f4:	605a      	str	r2, [r3, #4]
 80037f6:	e007      	b.n	8003808 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003806:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003810:	d10f      	bne.n	8003832 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003820:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003830:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800383c:	2b40      	cmp	r3, #64	@ 0x40
 800383e:	d007      	beq.n	8003850 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800384e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003858:	d867      	bhi.n	800392a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800385a:	e030      	b.n	80038be <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b01      	cmp	r3, #1
 8003868:	d117      	bne.n	800389a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f103 020c 	add.w	r2, r3, #12
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003876:	7812      	ldrb	r2, [r2, #0]
 8003878:	b2d2      	uxtb	r2, r2
 800387a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003880:	1c5a      	adds	r2, r3, #1
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800388c:	b29b      	uxth	r3, r3
 800388e:	3b01      	subs	r3, #1
 8003890:	b29a      	uxth	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003898:	e011      	b.n	80038be <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800389a:	f7fe f9cd 	bl	8001c38 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d803      	bhi.n	80038b2 <HAL_SPI_Receive+0x19c>
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b0:	d102      	bne.n	80038b8 <HAL_SPI_Receive+0x1a2>
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d102      	bne.n	80038be <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	75fb      	strb	r3, [r7, #23]
          goto error;
 80038bc:	e04e      	b.n	800395c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1c8      	bne.n	800385c <HAL_SPI_Receive+0x146>
 80038ca:	e034      	b.n	8003936 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d115      	bne.n	8003906 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68da      	ldr	r2, [r3, #12]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e4:	b292      	uxth	r2, r2
 80038e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ec:	1c9a      	adds	r2, r3, #2
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	3b01      	subs	r3, #1
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003904:	e011      	b.n	800392a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003906:	f7fe f997 	bl	8001c38 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	429a      	cmp	r2, r3
 8003914:	d803      	bhi.n	800391e <HAL_SPI_Receive+0x208>
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391c:	d102      	bne.n	8003924 <HAL_SPI_Receive+0x20e>
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d102      	bne.n	800392a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003928:	e018      	b.n	800395c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003930:	b29b      	uxth	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1ca      	bne.n	80038cc <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	6839      	ldr	r1, [r7, #0]
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f000 fb5a 	bl	8003ff4 <SPI_EndRxTransaction>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d002      	beq.n	800394c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2220      	movs	r2, #32
 800394a:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003950:	2b00      	cmp	r3, #0
 8003952:	d002      	beq.n	800395a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	75fb      	strb	r3, [r7, #23]
 8003958:	e000      	b.n	800395c <HAL_SPI_Receive+0x246>
  }

error :
 800395a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800396c:	7dfb      	ldrb	r3, [r7, #23]
}
 800396e:	4618      	mov	r0, r3
 8003970:	3718      	adds	r7, #24
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b08a      	sub	sp, #40	@ 0x28
 800397a:	af00      	add	r7, sp, #0
 800397c:	60f8      	str	r0, [r7, #12]
 800397e:	60b9      	str	r1, [r7, #8]
 8003980:	607a      	str	r2, [r7, #4]
 8003982:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003984:	2301      	movs	r3, #1
 8003986:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003988:	2300      	movs	r3, #0
 800398a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003994:	2b01      	cmp	r3, #1
 8003996:	d101      	bne.n	800399c <HAL_SPI_TransmitReceive+0x26>
 8003998:	2302      	movs	r3, #2
 800399a:	e1fb      	b.n	8003d94 <HAL_SPI_TransmitReceive+0x41e>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039a4:	f7fe f948 	bl	8001c38 <HAL_GetTick>
 80039a8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80039b0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80039b8:	887b      	ldrh	r3, [r7, #2]
 80039ba:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80039bc:	887b      	ldrh	r3, [r7, #2]
 80039be:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80039c0:	7efb      	ldrb	r3, [r7, #27]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d00e      	beq.n	80039e4 <HAL_SPI_TransmitReceive+0x6e>
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039cc:	d106      	bne.n	80039dc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d102      	bne.n	80039dc <HAL_SPI_TransmitReceive+0x66>
 80039d6:	7efb      	ldrb	r3, [r7, #27]
 80039d8:	2b04      	cmp	r3, #4
 80039da:	d003      	beq.n	80039e4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80039dc:	2302      	movs	r3, #2
 80039de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80039e2:	e1cd      	b.n	8003d80 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d005      	beq.n	80039f6 <HAL_SPI_TransmitReceive+0x80>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d002      	beq.n	80039f6 <HAL_SPI_TransmitReceive+0x80>
 80039f0:	887b      	ldrh	r3, [r7, #2]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d103      	bne.n	80039fe <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80039fc:	e1c0      	b.n	8003d80 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	d003      	beq.n	8003a12 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2205      	movs	r2, #5
 8003a0e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	887a      	ldrh	r2, [r7, #2]
 8003a22:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	887a      	ldrh	r2, [r7, #2]
 8003a2a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	887a      	ldrh	r2, [r7, #2]
 8003a38:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	887a      	ldrh	r2, [r7, #2]
 8003a3e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a54:	d802      	bhi.n	8003a5c <HAL_SPI_TransmitReceive+0xe6>
 8003a56:	8a3b      	ldrh	r3, [r7, #16]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d908      	bls.n	8003a6e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685a      	ldr	r2, [r3, #4]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003a6a:	605a      	str	r2, [r3, #4]
 8003a6c:	e007      	b.n	8003a7e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003a7c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a88:	2b40      	cmp	r3, #64	@ 0x40
 8003a8a:	d007      	beq.n	8003a9c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003aa4:	d97c      	bls.n	8003ba0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d002      	beq.n	8003ab4 <HAL_SPI_TransmitReceive+0x13e>
 8003aae:	8a7b      	ldrh	r3, [r7, #18]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d169      	bne.n	8003b88 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ab8:	881a      	ldrh	r2, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac4:	1c9a      	adds	r2, r3, #2
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ad8:	e056      	b.n	8003b88 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d11b      	bne.n	8003b20 <HAL_SPI_TransmitReceive+0x1aa>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d016      	beq.n	8003b20 <HAL_SPI_TransmitReceive+0x1aa>
 8003af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d113      	bne.n	8003b20 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003afc:	881a      	ldrh	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b08:	1c9a      	adds	r2, r3, #2
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d11c      	bne.n	8003b68 <HAL_SPI_TransmitReceive+0x1f2>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d016      	beq.n	8003b68 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68da      	ldr	r2, [r3, #12]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b44:	b292      	uxth	r2, r2
 8003b46:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4c:	1c9a      	adds	r2, r3, #2
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b64:	2301      	movs	r3, #1
 8003b66:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b68:	f7fe f866 	bl	8001c38 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d807      	bhi.n	8003b88 <HAL_SPI_TransmitReceive+0x212>
 8003b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b7e:	d003      	beq.n	8003b88 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8003b86:	e0fb      	b.n	8003d80 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1a3      	bne.n	8003ada <HAL_SPI_TransmitReceive+0x164>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d19d      	bne.n	8003ada <HAL_SPI_TransmitReceive+0x164>
 8003b9e:	e0df      	b.n	8003d60 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <HAL_SPI_TransmitReceive+0x23a>
 8003ba8:	8a7b      	ldrh	r3, [r7, #18]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	f040 80cb 	bne.w	8003d46 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d912      	bls.n	8003be0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bbe:	881a      	ldrh	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bca:	1c9a      	adds	r2, r3, #2
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	3b02      	subs	r3, #2
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003bde:	e0b2      	b.n	8003d46 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	330c      	adds	r3, #12
 8003bea:	7812      	ldrb	r2, [r2, #0]
 8003bec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bf2:	1c5a      	adds	r2, r3, #1
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c06:	e09e      	b.n	8003d46 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d134      	bne.n	8003c80 <HAL_SPI_TransmitReceive+0x30a>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d02f      	beq.n	8003c80 <HAL_SPI_TransmitReceive+0x30a>
 8003c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d12c      	bne.n	8003c80 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d912      	bls.n	8003c56 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c34:	881a      	ldrh	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c40:	1c9a      	adds	r2, r3, #2
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	3b02      	subs	r3, #2
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c54:	e012      	b.n	8003c7c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	330c      	adds	r3, #12
 8003c60:	7812      	ldrb	r2, [r2, #0]
 8003c62:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c68:	1c5a      	adds	r2, r3, #1
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	3b01      	subs	r3, #1
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d148      	bne.n	8003d20 <HAL_SPI_TransmitReceive+0x3aa>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d042      	beq.n	8003d20 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d923      	bls.n	8003cee <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68da      	ldr	r2, [r3, #12]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb0:	b292      	uxth	r2, r2
 8003cb2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb8:	1c9a      	adds	r2, r3, #2
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	3b02      	subs	r3, #2
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d81f      	bhi.n	8003d1c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003cea:	605a      	str	r2, [r3, #4]
 8003cec:	e016      	b.n	8003d1c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f103 020c 	add.w	r2, r3, #12
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfa:	7812      	ldrb	r2, [r2, #0]
 8003cfc:	b2d2      	uxtb	r2, r2
 8003cfe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d04:	1c5a      	adds	r2, r3, #1
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	3b01      	subs	r3, #1
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003d20:	f7fd ff8a 	bl	8001c38 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d803      	bhi.n	8003d38 <HAL_SPI_TransmitReceive+0x3c2>
 8003d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d36:	d102      	bne.n	8003d3e <HAL_SPI_TransmitReceive+0x3c8>
 8003d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d103      	bne.n	8003d46 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8003d44:	e01c      	b.n	8003d80 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f47f af5b 	bne.w	8003c08 <HAL_SPI_TransmitReceive+0x292>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f47f af54 	bne.w	8003c08 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d60:	69fa      	ldr	r2, [r7, #28]
 8003d62:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f000 f9c1 	bl	80040ec <SPI_EndRxTxTransaction>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d006      	beq.n	8003d7e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	661a      	str	r2, [r3, #96]	@ 0x60
 8003d7c:	e000      	b.n	8003d80 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003d7e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003d90:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3728      	adds	r7, #40	@ 0x28
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003daa:	b2db      	uxtb	r3, r3
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b088      	sub	sp, #32
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	603b      	str	r3, [r7, #0]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003dc8:	f7fd ff36 	bl	8001c38 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dd0:	1a9b      	subs	r3, r3, r2
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003dd8:	f7fd ff2e 	bl	8001c38 <HAL_GetTick>
 8003ddc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003dde:	4b39      	ldr	r3, [pc, #228]	@ (8003ec4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	015b      	lsls	r3, r3, #5
 8003de4:	0d1b      	lsrs	r3, r3, #20
 8003de6:	69fa      	ldr	r2, [r7, #28]
 8003de8:	fb02 f303 	mul.w	r3, r2, r3
 8003dec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dee:	e054      	b.n	8003e9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df6:	d050      	beq.n	8003e9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003df8:	f7fd ff1e 	bl	8001c38 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	69fa      	ldr	r2, [r7, #28]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d902      	bls.n	8003e0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d13d      	bne.n	8003e8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003e1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e26:	d111      	bne.n	8003e4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e30:	d004      	beq.n	8003e3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e3a:	d107      	bne.n	8003e4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e54:	d10f      	bne.n	8003e76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e64:	601a      	str	r2, [r3, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e017      	b.n	8003eba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d101      	bne.n	8003e94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e90:	2300      	movs	r3, #0
 8003e92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	3b01      	subs	r3, #1
 8003e98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	689a      	ldr	r2, [r3, #8]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	bf0c      	ite	eq
 8003eaa:	2301      	moveq	r3, #1
 8003eac:	2300      	movne	r3, #0
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	79fb      	ldrb	r3, [r7, #7]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d19b      	bne.n	8003df0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3720      	adds	r7, #32
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	20000000 	.word	0x20000000

08003ec8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b08a      	sub	sp, #40	@ 0x28
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
 8003ed4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003eda:	f7fd fead 	bl	8001c38 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee2:	1a9b      	subs	r3, r3, r2
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003eea:	f7fd fea5 	bl	8001c38 <HAL_GetTick>
 8003eee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	330c      	adds	r3, #12
 8003ef6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003ef8:	4b3d      	ldr	r3, [pc, #244]	@ (8003ff0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	4613      	mov	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4413      	add	r3, r2
 8003f02:	00da      	lsls	r2, r3, #3
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	0d1b      	lsrs	r3, r3, #20
 8003f08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f0a:	fb02 f303 	mul.w	r3, r2, r3
 8003f0e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003f10:	e060      	b.n	8003fd4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003f18:	d107      	bne.n	8003f2a <SPI_WaitFifoStateUntilTimeout+0x62>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d104      	bne.n	8003f2a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003f28:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f30:	d050      	beq.n	8003fd4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f32:	f7fd fe81 	bl	8001c38 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	6a3b      	ldr	r3, [r7, #32]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d902      	bls.n	8003f48 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d13d      	bne.n	8003fc4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003f56:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f60:	d111      	bne.n	8003f86 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f6a:	d004      	beq.n	8003f76 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f74:	d107      	bne.n	8003f86 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f84:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f8e:	d10f      	bne.n	8003fb0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f9e:	601a      	str	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003fae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e010      	b.n	8003fe6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689a      	ldr	r2, [r3, #8]
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	4013      	ands	r3, r2
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d196      	bne.n	8003f12 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3728      	adds	r7, #40	@ 0x28
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	20000000 	.word	0x20000000

08003ff4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b088      	sub	sp, #32
 8003ff8:	af02      	add	r7, sp, #8
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004008:	d111      	bne.n	800402e <SPI_EndRxTransaction+0x3a>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004012:	d004      	beq.n	800401e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800401c:	d107      	bne.n	800402e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800402c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004036:	d112      	bne.n	800405e <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	2200      	movs	r2, #0
 8004040:	2180      	movs	r1, #128	@ 0x80
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f7ff feb8 	bl	8003db8 <SPI_WaitFlagStateUntilTimeout>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d021      	beq.n	8004092 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004052:	f043 0220 	orr.w	r2, r3, #32
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e03d      	b.n	80040da <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800405e:	4b21      	ldr	r3, [pc, #132]	@ (80040e4 <SPI_EndRxTransaction+0xf0>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a21      	ldr	r2, [pc, #132]	@ (80040e8 <SPI_EndRxTransaction+0xf4>)
 8004064:	fba2 2303 	umull	r2, r3, r2, r3
 8004068:	0d5b      	lsrs	r3, r3, #21
 800406a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800406e:	fb02 f303 	mul.w	r3, r2, r3
 8004072:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00a      	beq.n	8004090 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	3b01      	subs	r3, #1
 800407e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800408a:	2b80      	cmp	r3, #128	@ 0x80
 800408c:	d0f2      	beq.n	8004074 <SPI_EndRxTransaction+0x80>
 800408e:	e000      	b.n	8004092 <SPI_EndRxTransaction+0x9e>
        break;
 8004090:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800409a:	d11d      	bne.n	80040d8 <SPI_EndRxTransaction+0xe4>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040a4:	d004      	beq.n	80040b0 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040ae:	d113      	bne.n	80040d8 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f7ff ff03 	bl	8003ec8 <SPI_WaitFifoStateUntilTimeout>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d007      	beq.n	80040d8 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040cc:	f043 0220 	orr.w	r2, r3, #32
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e000      	b.n	80040da <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3718      	adds	r7, #24
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	20000000 	.word	0x20000000
 80040e8:	165e9f81 	.word	0x165e9f81

080040ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b088      	sub	sp, #32
 80040f0:	af02      	add	r7, sp, #8
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	2200      	movs	r2, #0
 8004100:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f7ff fedf 	bl	8003ec8 <SPI_WaitFifoStateUntilTimeout>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d007      	beq.n	8004120 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004114:	f043 0220 	orr.w	r2, r3, #32
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e046      	b.n	80041ae <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004120:	4b25      	ldr	r3, [pc, #148]	@ (80041b8 <SPI_EndRxTxTransaction+0xcc>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a25      	ldr	r2, [pc, #148]	@ (80041bc <SPI_EndRxTxTransaction+0xd0>)
 8004126:	fba2 2303 	umull	r2, r3, r2, r3
 800412a:	0d5b      	lsrs	r3, r3, #21
 800412c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004130:	fb02 f303 	mul.w	r3, r2, r3
 8004134:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800413e:	d112      	bne.n	8004166 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	2200      	movs	r2, #0
 8004148:	2180      	movs	r1, #128	@ 0x80
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f7ff fe34 	bl	8003db8 <SPI_WaitFlagStateUntilTimeout>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d016      	beq.n	8004184 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800415a:	f043 0220 	orr.w	r2, r3, #32
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e023      	b.n	80041ae <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00a      	beq.n	8004182 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	3b01      	subs	r3, #1
 8004170:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800417c:	2b80      	cmp	r3, #128	@ 0x80
 800417e:	d0f2      	beq.n	8004166 <SPI_EndRxTxTransaction+0x7a>
 8004180:	e000      	b.n	8004184 <SPI_EndRxTxTransaction+0x98>
        break;
 8004182:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	9300      	str	r3, [sp, #0]
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	2200      	movs	r2, #0
 800418c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f7ff fe99 	bl	8003ec8 <SPI_WaitFifoStateUntilTimeout>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d007      	beq.n	80041ac <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041a0:	f043 0220 	orr.w	r2, r3, #32
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e000      	b.n	80041ae <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3718      	adds	r7, #24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	20000000 	.word	0x20000000
 80041bc:	165e9f81 	.word	0x165e9f81

080041c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e040      	b.n	8004254 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d106      	bne.n	80041e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7fd fbea 	bl	80019bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2224      	movs	r2, #36	@ 0x24
 80041ec:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 0201 	bic.w	r2, r2, #1
 80041fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 f8b0 	bl	8004364 <UART_SetConfig>
 8004204:	4603      	mov	r3, r0
 8004206:	2b01      	cmp	r3, #1
 8004208:	d101      	bne.n	800420e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e022      	b.n	8004254 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004212:	2b00      	cmp	r3, #0
 8004214:	d002      	beq.n	800421c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 fb08 	bl	800482c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800422a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	689a      	ldr	r2, [r3, #8]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800423a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f042 0201 	orr.w	r2, r2, #1
 800424a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 fb8f 	bl	8004970 <UART_CheckIdleState>
 8004252:	4603      	mov	r3, r0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3708      	adds	r7, #8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b08a      	sub	sp, #40	@ 0x28
 8004260:	af02      	add	r7, sp, #8
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	603b      	str	r3, [r7, #0]
 8004268:	4613      	mov	r3, r2
 800426a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004270:	2b20      	cmp	r3, #32
 8004272:	d171      	bne.n	8004358 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d002      	beq.n	8004280 <HAL_UART_Transmit+0x24>
 800427a:	88fb      	ldrh	r3, [r7, #6]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e06a      	b.n	800435a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2221      	movs	r2, #33	@ 0x21
 8004290:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004292:	f7fd fcd1 	bl	8001c38 <HAL_GetTick>
 8004296:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	88fa      	ldrh	r2, [r7, #6]
 800429c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	88fa      	ldrh	r2, [r7, #6]
 80042a4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042b0:	d108      	bne.n	80042c4 <HAL_UART_Transmit+0x68>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d104      	bne.n	80042c4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80042ba:	2300      	movs	r3, #0
 80042bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	61bb      	str	r3, [r7, #24]
 80042c2:	e003      	b.n	80042cc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042c8:	2300      	movs	r3, #0
 80042ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042cc:	e02c      	b.n	8004328 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	2200      	movs	r2, #0
 80042d6:	2180      	movs	r1, #128	@ 0x80
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f000 fb80 	bl	80049de <UART_WaitOnFlagUntilTimeout>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d001      	beq.n	80042e8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e038      	b.n	800435a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10b      	bne.n	8004306 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	881b      	ldrh	r3, [r3, #0]
 80042f2:	461a      	mov	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042fc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	3302      	adds	r3, #2
 8004302:	61bb      	str	r3, [r7, #24]
 8004304:	e007      	b.n	8004316 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	781a      	ldrb	r2, [r3, #0]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	3301      	adds	r3, #1
 8004314:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800431c:	b29b      	uxth	r3, r3
 800431e:	3b01      	subs	r3, #1
 8004320:	b29a      	uxth	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800432e:	b29b      	uxth	r3, r3
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1cc      	bne.n	80042ce <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	2200      	movs	r2, #0
 800433c:	2140      	movs	r1, #64	@ 0x40
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f000 fb4d 	bl	80049de <UART_WaitOnFlagUntilTimeout>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e005      	b.n	800435a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2220      	movs	r2, #32
 8004352:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004354:	2300      	movs	r3, #0
 8004356:	e000      	b.n	800435a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004358:	2302      	movs	r3, #2
  }
}
 800435a:	4618      	mov	r0, r3
 800435c:	3720      	adds	r7, #32
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
	...

08004364 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b088      	sub	sp, #32
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800436c:	2300      	movs	r3, #0
 800436e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	431a      	orrs	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	431a      	orrs	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	69db      	ldr	r3, [r3, #28]
 8004384:	4313      	orrs	r3, r2
 8004386:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	4ba6      	ldr	r3, [pc, #664]	@ (8004628 <UART_SetConfig+0x2c4>)
 8004390:	4013      	ands	r3, r2
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	6812      	ldr	r2, [r2, #0]
 8004396:	6979      	ldr	r1, [r7, #20]
 8004398:	430b      	orrs	r3, r1
 800439a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68da      	ldr	r2, [r3, #12]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	4313      	orrs	r3, r2
 80043c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	430a      	orrs	r2, r1
 80043d4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a94      	ldr	r2, [pc, #592]	@ (800462c <UART_SetConfig+0x2c8>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d120      	bne.n	8004422 <UART_SetConfig+0xbe>
 80043e0:	4b93      	ldr	r3, [pc, #588]	@ (8004630 <UART_SetConfig+0x2cc>)
 80043e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043e6:	f003 0303 	and.w	r3, r3, #3
 80043ea:	2b03      	cmp	r3, #3
 80043ec:	d816      	bhi.n	800441c <UART_SetConfig+0xb8>
 80043ee:	a201      	add	r2, pc, #4	@ (adr r2, 80043f4 <UART_SetConfig+0x90>)
 80043f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f4:	08004405 	.word	0x08004405
 80043f8:	08004411 	.word	0x08004411
 80043fc:	0800440b 	.word	0x0800440b
 8004400:	08004417 	.word	0x08004417
 8004404:	2301      	movs	r3, #1
 8004406:	77fb      	strb	r3, [r7, #31]
 8004408:	e150      	b.n	80046ac <UART_SetConfig+0x348>
 800440a:	2302      	movs	r3, #2
 800440c:	77fb      	strb	r3, [r7, #31]
 800440e:	e14d      	b.n	80046ac <UART_SetConfig+0x348>
 8004410:	2304      	movs	r3, #4
 8004412:	77fb      	strb	r3, [r7, #31]
 8004414:	e14a      	b.n	80046ac <UART_SetConfig+0x348>
 8004416:	2308      	movs	r3, #8
 8004418:	77fb      	strb	r3, [r7, #31]
 800441a:	e147      	b.n	80046ac <UART_SetConfig+0x348>
 800441c:	2310      	movs	r3, #16
 800441e:	77fb      	strb	r3, [r7, #31]
 8004420:	e144      	b.n	80046ac <UART_SetConfig+0x348>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a83      	ldr	r2, [pc, #524]	@ (8004634 <UART_SetConfig+0x2d0>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d132      	bne.n	8004492 <UART_SetConfig+0x12e>
 800442c:	4b80      	ldr	r3, [pc, #512]	@ (8004630 <UART_SetConfig+0x2cc>)
 800442e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004432:	f003 030c 	and.w	r3, r3, #12
 8004436:	2b0c      	cmp	r3, #12
 8004438:	d828      	bhi.n	800448c <UART_SetConfig+0x128>
 800443a:	a201      	add	r2, pc, #4	@ (adr r2, 8004440 <UART_SetConfig+0xdc>)
 800443c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004440:	08004475 	.word	0x08004475
 8004444:	0800448d 	.word	0x0800448d
 8004448:	0800448d 	.word	0x0800448d
 800444c:	0800448d 	.word	0x0800448d
 8004450:	08004481 	.word	0x08004481
 8004454:	0800448d 	.word	0x0800448d
 8004458:	0800448d 	.word	0x0800448d
 800445c:	0800448d 	.word	0x0800448d
 8004460:	0800447b 	.word	0x0800447b
 8004464:	0800448d 	.word	0x0800448d
 8004468:	0800448d 	.word	0x0800448d
 800446c:	0800448d 	.word	0x0800448d
 8004470:	08004487 	.word	0x08004487
 8004474:	2300      	movs	r3, #0
 8004476:	77fb      	strb	r3, [r7, #31]
 8004478:	e118      	b.n	80046ac <UART_SetConfig+0x348>
 800447a:	2302      	movs	r3, #2
 800447c:	77fb      	strb	r3, [r7, #31]
 800447e:	e115      	b.n	80046ac <UART_SetConfig+0x348>
 8004480:	2304      	movs	r3, #4
 8004482:	77fb      	strb	r3, [r7, #31]
 8004484:	e112      	b.n	80046ac <UART_SetConfig+0x348>
 8004486:	2308      	movs	r3, #8
 8004488:	77fb      	strb	r3, [r7, #31]
 800448a:	e10f      	b.n	80046ac <UART_SetConfig+0x348>
 800448c:	2310      	movs	r3, #16
 800448e:	77fb      	strb	r3, [r7, #31]
 8004490:	e10c      	b.n	80046ac <UART_SetConfig+0x348>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a68      	ldr	r2, [pc, #416]	@ (8004638 <UART_SetConfig+0x2d4>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d120      	bne.n	80044de <UART_SetConfig+0x17a>
 800449c:	4b64      	ldr	r3, [pc, #400]	@ (8004630 <UART_SetConfig+0x2cc>)
 800449e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044a2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80044a6:	2b30      	cmp	r3, #48	@ 0x30
 80044a8:	d013      	beq.n	80044d2 <UART_SetConfig+0x16e>
 80044aa:	2b30      	cmp	r3, #48	@ 0x30
 80044ac:	d814      	bhi.n	80044d8 <UART_SetConfig+0x174>
 80044ae:	2b20      	cmp	r3, #32
 80044b0:	d009      	beq.n	80044c6 <UART_SetConfig+0x162>
 80044b2:	2b20      	cmp	r3, #32
 80044b4:	d810      	bhi.n	80044d8 <UART_SetConfig+0x174>
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d002      	beq.n	80044c0 <UART_SetConfig+0x15c>
 80044ba:	2b10      	cmp	r3, #16
 80044bc:	d006      	beq.n	80044cc <UART_SetConfig+0x168>
 80044be:	e00b      	b.n	80044d8 <UART_SetConfig+0x174>
 80044c0:	2300      	movs	r3, #0
 80044c2:	77fb      	strb	r3, [r7, #31]
 80044c4:	e0f2      	b.n	80046ac <UART_SetConfig+0x348>
 80044c6:	2302      	movs	r3, #2
 80044c8:	77fb      	strb	r3, [r7, #31]
 80044ca:	e0ef      	b.n	80046ac <UART_SetConfig+0x348>
 80044cc:	2304      	movs	r3, #4
 80044ce:	77fb      	strb	r3, [r7, #31]
 80044d0:	e0ec      	b.n	80046ac <UART_SetConfig+0x348>
 80044d2:	2308      	movs	r3, #8
 80044d4:	77fb      	strb	r3, [r7, #31]
 80044d6:	e0e9      	b.n	80046ac <UART_SetConfig+0x348>
 80044d8:	2310      	movs	r3, #16
 80044da:	77fb      	strb	r3, [r7, #31]
 80044dc:	e0e6      	b.n	80046ac <UART_SetConfig+0x348>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a56      	ldr	r2, [pc, #344]	@ (800463c <UART_SetConfig+0x2d8>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d120      	bne.n	800452a <UART_SetConfig+0x1c6>
 80044e8:	4b51      	ldr	r3, [pc, #324]	@ (8004630 <UART_SetConfig+0x2cc>)
 80044ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044ee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80044f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80044f4:	d013      	beq.n	800451e <UART_SetConfig+0x1ba>
 80044f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80044f8:	d814      	bhi.n	8004524 <UART_SetConfig+0x1c0>
 80044fa:	2b80      	cmp	r3, #128	@ 0x80
 80044fc:	d009      	beq.n	8004512 <UART_SetConfig+0x1ae>
 80044fe:	2b80      	cmp	r3, #128	@ 0x80
 8004500:	d810      	bhi.n	8004524 <UART_SetConfig+0x1c0>
 8004502:	2b00      	cmp	r3, #0
 8004504:	d002      	beq.n	800450c <UART_SetConfig+0x1a8>
 8004506:	2b40      	cmp	r3, #64	@ 0x40
 8004508:	d006      	beq.n	8004518 <UART_SetConfig+0x1b4>
 800450a:	e00b      	b.n	8004524 <UART_SetConfig+0x1c0>
 800450c:	2300      	movs	r3, #0
 800450e:	77fb      	strb	r3, [r7, #31]
 8004510:	e0cc      	b.n	80046ac <UART_SetConfig+0x348>
 8004512:	2302      	movs	r3, #2
 8004514:	77fb      	strb	r3, [r7, #31]
 8004516:	e0c9      	b.n	80046ac <UART_SetConfig+0x348>
 8004518:	2304      	movs	r3, #4
 800451a:	77fb      	strb	r3, [r7, #31]
 800451c:	e0c6      	b.n	80046ac <UART_SetConfig+0x348>
 800451e:	2308      	movs	r3, #8
 8004520:	77fb      	strb	r3, [r7, #31]
 8004522:	e0c3      	b.n	80046ac <UART_SetConfig+0x348>
 8004524:	2310      	movs	r3, #16
 8004526:	77fb      	strb	r3, [r7, #31]
 8004528:	e0c0      	b.n	80046ac <UART_SetConfig+0x348>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a44      	ldr	r2, [pc, #272]	@ (8004640 <UART_SetConfig+0x2dc>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d125      	bne.n	8004580 <UART_SetConfig+0x21c>
 8004534:	4b3e      	ldr	r3, [pc, #248]	@ (8004630 <UART_SetConfig+0x2cc>)
 8004536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800453a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800453e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004542:	d017      	beq.n	8004574 <UART_SetConfig+0x210>
 8004544:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004548:	d817      	bhi.n	800457a <UART_SetConfig+0x216>
 800454a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800454e:	d00b      	beq.n	8004568 <UART_SetConfig+0x204>
 8004550:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004554:	d811      	bhi.n	800457a <UART_SetConfig+0x216>
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <UART_SetConfig+0x1fe>
 800455a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800455e:	d006      	beq.n	800456e <UART_SetConfig+0x20a>
 8004560:	e00b      	b.n	800457a <UART_SetConfig+0x216>
 8004562:	2300      	movs	r3, #0
 8004564:	77fb      	strb	r3, [r7, #31]
 8004566:	e0a1      	b.n	80046ac <UART_SetConfig+0x348>
 8004568:	2302      	movs	r3, #2
 800456a:	77fb      	strb	r3, [r7, #31]
 800456c:	e09e      	b.n	80046ac <UART_SetConfig+0x348>
 800456e:	2304      	movs	r3, #4
 8004570:	77fb      	strb	r3, [r7, #31]
 8004572:	e09b      	b.n	80046ac <UART_SetConfig+0x348>
 8004574:	2308      	movs	r3, #8
 8004576:	77fb      	strb	r3, [r7, #31]
 8004578:	e098      	b.n	80046ac <UART_SetConfig+0x348>
 800457a:	2310      	movs	r3, #16
 800457c:	77fb      	strb	r3, [r7, #31]
 800457e:	e095      	b.n	80046ac <UART_SetConfig+0x348>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a2f      	ldr	r2, [pc, #188]	@ (8004644 <UART_SetConfig+0x2e0>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d125      	bne.n	80045d6 <UART_SetConfig+0x272>
 800458a:	4b29      	ldr	r3, [pc, #164]	@ (8004630 <UART_SetConfig+0x2cc>)
 800458c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004590:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004594:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004598:	d017      	beq.n	80045ca <UART_SetConfig+0x266>
 800459a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800459e:	d817      	bhi.n	80045d0 <UART_SetConfig+0x26c>
 80045a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045a4:	d00b      	beq.n	80045be <UART_SetConfig+0x25a>
 80045a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045aa:	d811      	bhi.n	80045d0 <UART_SetConfig+0x26c>
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d003      	beq.n	80045b8 <UART_SetConfig+0x254>
 80045b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045b4:	d006      	beq.n	80045c4 <UART_SetConfig+0x260>
 80045b6:	e00b      	b.n	80045d0 <UART_SetConfig+0x26c>
 80045b8:	2301      	movs	r3, #1
 80045ba:	77fb      	strb	r3, [r7, #31]
 80045bc:	e076      	b.n	80046ac <UART_SetConfig+0x348>
 80045be:	2302      	movs	r3, #2
 80045c0:	77fb      	strb	r3, [r7, #31]
 80045c2:	e073      	b.n	80046ac <UART_SetConfig+0x348>
 80045c4:	2304      	movs	r3, #4
 80045c6:	77fb      	strb	r3, [r7, #31]
 80045c8:	e070      	b.n	80046ac <UART_SetConfig+0x348>
 80045ca:	2308      	movs	r3, #8
 80045cc:	77fb      	strb	r3, [r7, #31]
 80045ce:	e06d      	b.n	80046ac <UART_SetConfig+0x348>
 80045d0:	2310      	movs	r3, #16
 80045d2:	77fb      	strb	r3, [r7, #31]
 80045d4:	e06a      	b.n	80046ac <UART_SetConfig+0x348>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a1b      	ldr	r2, [pc, #108]	@ (8004648 <UART_SetConfig+0x2e4>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d138      	bne.n	8004652 <UART_SetConfig+0x2ee>
 80045e0:	4b13      	ldr	r3, [pc, #76]	@ (8004630 <UART_SetConfig+0x2cc>)
 80045e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045e6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80045ea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80045ee:	d017      	beq.n	8004620 <UART_SetConfig+0x2bc>
 80045f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80045f4:	d82a      	bhi.n	800464c <UART_SetConfig+0x2e8>
 80045f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045fa:	d00b      	beq.n	8004614 <UART_SetConfig+0x2b0>
 80045fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004600:	d824      	bhi.n	800464c <UART_SetConfig+0x2e8>
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <UART_SetConfig+0x2aa>
 8004606:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800460a:	d006      	beq.n	800461a <UART_SetConfig+0x2b6>
 800460c:	e01e      	b.n	800464c <UART_SetConfig+0x2e8>
 800460e:	2300      	movs	r3, #0
 8004610:	77fb      	strb	r3, [r7, #31]
 8004612:	e04b      	b.n	80046ac <UART_SetConfig+0x348>
 8004614:	2302      	movs	r3, #2
 8004616:	77fb      	strb	r3, [r7, #31]
 8004618:	e048      	b.n	80046ac <UART_SetConfig+0x348>
 800461a:	2304      	movs	r3, #4
 800461c:	77fb      	strb	r3, [r7, #31]
 800461e:	e045      	b.n	80046ac <UART_SetConfig+0x348>
 8004620:	2308      	movs	r3, #8
 8004622:	77fb      	strb	r3, [r7, #31]
 8004624:	e042      	b.n	80046ac <UART_SetConfig+0x348>
 8004626:	bf00      	nop
 8004628:	efff69f3 	.word	0xefff69f3
 800462c:	40011000 	.word	0x40011000
 8004630:	40023800 	.word	0x40023800
 8004634:	40004400 	.word	0x40004400
 8004638:	40004800 	.word	0x40004800
 800463c:	40004c00 	.word	0x40004c00
 8004640:	40005000 	.word	0x40005000
 8004644:	40011400 	.word	0x40011400
 8004648:	40007800 	.word	0x40007800
 800464c:	2310      	movs	r3, #16
 800464e:	77fb      	strb	r3, [r7, #31]
 8004650:	e02c      	b.n	80046ac <UART_SetConfig+0x348>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a72      	ldr	r2, [pc, #456]	@ (8004820 <UART_SetConfig+0x4bc>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d125      	bne.n	80046a8 <UART_SetConfig+0x344>
 800465c:	4b71      	ldr	r3, [pc, #452]	@ (8004824 <UART_SetConfig+0x4c0>)
 800465e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004662:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004666:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800466a:	d017      	beq.n	800469c <UART_SetConfig+0x338>
 800466c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004670:	d817      	bhi.n	80046a2 <UART_SetConfig+0x33e>
 8004672:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004676:	d00b      	beq.n	8004690 <UART_SetConfig+0x32c>
 8004678:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800467c:	d811      	bhi.n	80046a2 <UART_SetConfig+0x33e>
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <UART_SetConfig+0x326>
 8004682:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004686:	d006      	beq.n	8004696 <UART_SetConfig+0x332>
 8004688:	e00b      	b.n	80046a2 <UART_SetConfig+0x33e>
 800468a:	2300      	movs	r3, #0
 800468c:	77fb      	strb	r3, [r7, #31]
 800468e:	e00d      	b.n	80046ac <UART_SetConfig+0x348>
 8004690:	2302      	movs	r3, #2
 8004692:	77fb      	strb	r3, [r7, #31]
 8004694:	e00a      	b.n	80046ac <UART_SetConfig+0x348>
 8004696:	2304      	movs	r3, #4
 8004698:	77fb      	strb	r3, [r7, #31]
 800469a:	e007      	b.n	80046ac <UART_SetConfig+0x348>
 800469c:	2308      	movs	r3, #8
 800469e:	77fb      	strb	r3, [r7, #31]
 80046a0:	e004      	b.n	80046ac <UART_SetConfig+0x348>
 80046a2:	2310      	movs	r3, #16
 80046a4:	77fb      	strb	r3, [r7, #31]
 80046a6:	e001      	b.n	80046ac <UART_SetConfig+0x348>
 80046a8:	2310      	movs	r3, #16
 80046aa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	69db      	ldr	r3, [r3, #28]
 80046b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046b4:	d15b      	bne.n	800476e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80046b6:	7ffb      	ldrb	r3, [r7, #31]
 80046b8:	2b08      	cmp	r3, #8
 80046ba:	d828      	bhi.n	800470e <UART_SetConfig+0x3aa>
 80046bc:	a201      	add	r2, pc, #4	@ (adr r2, 80046c4 <UART_SetConfig+0x360>)
 80046be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c2:	bf00      	nop
 80046c4:	080046e9 	.word	0x080046e9
 80046c8:	080046f1 	.word	0x080046f1
 80046cc:	080046f9 	.word	0x080046f9
 80046d0:	0800470f 	.word	0x0800470f
 80046d4:	080046ff 	.word	0x080046ff
 80046d8:	0800470f 	.word	0x0800470f
 80046dc:	0800470f 	.word	0x0800470f
 80046e0:	0800470f 	.word	0x0800470f
 80046e4:	08004707 	.word	0x08004707
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046e8:	f7fe f9e4 	bl	8002ab4 <HAL_RCC_GetPCLK1Freq>
 80046ec:	61b8      	str	r0, [r7, #24]
        break;
 80046ee:	e013      	b.n	8004718 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046f0:	f7fe f9f4 	bl	8002adc <HAL_RCC_GetPCLK2Freq>
 80046f4:	61b8      	str	r0, [r7, #24]
        break;
 80046f6:	e00f      	b.n	8004718 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046f8:	4b4b      	ldr	r3, [pc, #300]	@ (8004828 <UART_SetConfig+0x4c4>)
 80046fa:	61bb      	str	r3, [r7, #24]
        break;
 80046fc:	e00c      	b.n	8004718 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046fe:	f7fe f907 	bl	8002910 <HAL_RCC_GetSysClockFreq>
 8004702:	61b8      	str	r0, [r7, #24]
        break;
 8004704:	e008      	b.n	8004718 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004706:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800470a:	61bb      	str	r3, [r7, #24]
        break;
 800470c:	e004      	b.n	8004718 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800470e:	2300      	movs	r3, #0
 8004710:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	77bb      	strb	r3, [r7, #30]
        break;
 8004716:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d074      	beq.n	8004808 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	005a      	lsls	r2, r3, #1
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	085b      	lsrs	r3, r3, #1
 8004728:	441a      	add	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004732:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	2b0f      	cmp	r3, #15
 8004738:	d916      	bls.n	8004768 <UART_SetConfig+0x404>
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004740:	d212      	bcs.n	8004768 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	b29b      	uxth	r3, r3
 8004746:	f023 030f 	bic.w	r3, r3, #15
 800474a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	085b      	lsrs	r3, r3, #1
 8004750:	b29b      	uxth	r3, r3
 8004752:	f003 0307 	and.w	r3, r3, #7
 8004756:	b29a      	uxth	r2, r3
 8004758:	89fb      	ldrh	r3, [r7, #14]
 800475a:	4313      	orrs	r3, r2
 800475c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	89fa      	ldrh	r2, [r7, #14]
 8004764:	60da      	str	r2, [r3, #12]
 8004766:	e04f      	b.n	8004808 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	77bb      	strb	r3, [r7, #30]
 800476c:	e04c      	b.n	8004808 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800476e:	7ffb      	ldrb	r3, [r7, #31]
 8004770:	2b08      	cmp	r3, #8
 8004772:	d828      	bhi.n	80047c6 <UART_SetConfig+0x462>
 8004774:	a201      	add	r2, pc, #4	@ (adr r2, 800477c <UART_SetConfig+0x418>)
 8004776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800477a:	bf00      	nop
 800477c:	080047a1 	.word	0x080047a1
 8004780:	080047a9 	.word	0x080047a9
 8004784:	080047b1 	.word	0x080047b1
 8004788:	080047c7 	.word	0x080047c7
 800478c:	080047b7 	.word	0x080047b7
 8004790:	080047c7 	.word	0x080047c7
 8004794:	080047c7 	.word	0x080047c7
 8004798:	080047c7 	.word	0x080047c7
 800479c:	080047bf 	.word	0x080047bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047a0:	f7fe f988 	bl	8002ab4 <HAL_RCC_GetPCLK1Freq>
 80047a4:	61b8      	str	r0, [r7, #24]
        break;
 80047a6:	e013      	b.n	80047d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047a8:	f7fe f998 	bl	8002adc <HAL_RCC_GetPCLK2Freq>
 80047ac:	61b8      	str	r0, [r7, #24]
        break;
 80047ae:	e00f      	b.n	80047d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004828 <UART_SetConfig+0x4c4>)
 80047b2:	61bb      	str	r3, [r7, #24]
        break;
 80047b4:	e00c      	b.n	80047d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047b6:	f7fe f8ab 	bl	8002910 <HAL_RCC_GetSysClockFreq>
 80047ba:	61b8      	str	r0, [r7, #24]
        break;
 80047bc:	e008      	b.n	80047d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047c2:	61bb      	str	r3, [r7, #24]
        break;
 80047c4:	e004      	b.n	80047d0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80047c6:	2300      	movs	r3, #0
 80047c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	77bb      	strb	r3, [r7, #30]
        break;
 80047ce:	bf00      	nop
    }

    if (pclk != 0U)
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d018      	beq.n	8004808 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	085a      	lsrs	r2, r3, #1
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	441a      	add	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	2b0f      	cmp	r3, #15
 80047ee:	d909      	bls.n	8004804 <UART_SetConfig+0x4a0>
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047f6:	d205      	bcs.n	8004804 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	60da      	str	r2, [r3, #12]
 8004802:	e001      	b.n	8004808 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004814:	7fbb      	ldrb	r3, [r7, #30]
}
 8004816:	4618      	mov	r0, r3
 8004818:	3720      	adds	r7, #32
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	40007c00 	.word	0x40007c00
 8004824:	40023800 	.word	0x40023800
 8004828:	00f42400 	.word	0x00f42400

0800482c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004838:	f003 0301 	and.w	r3, r3, #1
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00a      	beq.n	8004856 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	430a      	orrs	r2, r1
 8004854:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00a      	beq.n	8004878 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	430a      	orrs	r2, r1
 8004876:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800487c:	f003 0304 	and.w	r3, r3, #4
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00a      	beq.n	800489a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	430a      	orrs	r2, r1
 8004898:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489e:	f003 0308 	and.w	r3, r3, #8
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00a      	beq.n	80048bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	430a      	orrs	r2, r1
 80048ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c0:	f003 0310 	and.w	r3, r3, #16
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00a      	beq.n	80048de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	430a      	orrs	r2, r1
 80048dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e2:	f003 0320 	and.w	r3, r3, #32
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00a      	beq.n	8004900 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	430a      	orrs	r2, r1
 80048fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004908:	2b00      	cmp	r3, #0
 800490a:	d01a      	beq.n	8004942 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004926:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800492a:	d10a      	bne.n	8004942 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00a      	beq.n	8004964 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	430a      	orrs	r2, r1
 8004962:	605a      	str	r2, [r3, #4]
  }
}
 8004964:	bf00      	nop
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af02      	add	r7, sp, #8
 8004976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004980:	f7fd f95a 	bl	8001c38 <HAL_GetTick>
 8004984:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0308 	and.w	r3, r3, #8
 8004990:	2b08      	cmp	r3, #8
 8004992:	d10e      	bne.n	80049b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004994:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004998:	9300      	str	r3, [sp, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f81b 	bl	80049de <UART_WaitOnFlagUntilTimeout>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e011      	b.n	80049d6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2220      	movs	r2, #32
 80049b6:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2220      	movs	r2, #32
 80049bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b09c      	sub	sp, #112	@ 0x70
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	60f8      	str	r0, [r7, #12]
 80049e6:	60b9      	str	r1, [r7, #8]
 80049e8:	603b      	str	r3, [r7, #0]
 80049ea:	4613      	mov	r3, r2
 80049ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049ee:	e0a7      	b.n	8004b40 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80049f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f6:	f000 80a3 	beq.w	8004b40 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049fa:	f7fd f91d 	bl	8001c38 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d302      	bcc.n	8004a10 <UART_WaitOnFlagUntilTimeout+0x32>
 8004a0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d13f      	bne.n	8004a90 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a18:	e853 3f00 	ldrex	r3, [r3]
 8004a1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004a1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a20:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004a24:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a30:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a32:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004a34:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004a36:	e841 2300 	strex	r3, r2, [r1]
 8004a3a:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004a3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1e6      	bne.n	8004a10 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	3308      	adds	r3, #8
 8004a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a4c:	e853 3f00 	ldrex	r3, [r3]
 8004a50:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a54:	f023 0301 	bic.w	r3, r3, #1
 8004a58:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	3308      	adds	r3, #8
 8004a60:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004a62:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004a64:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a66:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004a68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a6a:	e841 2300 	strex	r3, r2, [r1]
 8004a6e:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004a70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1e5      	bne.n	8004a42 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2220      	movs	r2, #32
 8004a7a:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e068      	b.n	8004b62 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0304 	and.w	r3, r3, #4
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d050      	beq.n	8004b40 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	69db      	ldr	r3, [r3, #28]
 8004aa4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004aa8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004aac:	d148      	bne.n	8004b40 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ab6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ac0:	e853 3f00 	ldrex	r3, [r3]
 8004ac4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004acc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ad6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ad8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ada:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004adc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ade:	e841 2300 	strex	r3, r2, [r1]
 8004ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1e6      	bne.n	8004ab8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	3308      	adds	r3, #8
 8004af0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	e853 3f00 	ldrex	r3, [r3]
 8004af8:	613b      	str	r3, [r7, #16]
   return(result);
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	f023 0301 	bic.w	r3, r3, #1
 8004b00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	3308      	adds	r3, #8
 8004b08:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004b0a:	623a      	str	r2, [r7, #32]
 8004b0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0e:	69f9      	ldr	r1, [r7, #28]
 8004b10:	6a3a      	ldr	r2, [r7, #32]
 8004b12:	e841 2300 	strex	r3, r2, [r1]
 8004b16:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1e5      	bne.n	8004aea <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2220      	movs	r2, #32
 8004b22:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2220      	movs	r2, #32
 8004b28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e010      	b.n	8004b62 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	69da      	ldr	r2, [r3, #28]
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	4013      	ands	r3, r2
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	bf0c      	ite	eq
 8004b50:	2301      	moveq	r3, #1
 8004b52:	2300      	movne	r3, #0
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	461a      	mov	r2, r3
 8004b58:	79fb      	ldrb	r3, [r7, #7]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	f43f af48 	beq.w	80049f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3770      	adds	r7, #112	@ 0x70
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <memset>:
 8004b6a:	4402      	add	r2, r0
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d100      	bne.n	8004b74 <memset+0xa>
 8004b72:	4770      	bx	lr
 8004b74:	f803 1b01 	strb.w	r1, [r3], #1
 8004b78:	e7f9      	b.n	8004b6e <memset+0x4>
	...

08004b7c <__libc_init_array>:
 8004b7c:	b570      	push	{r4, r5, r6, lr}
 8004b7e:	4d0d      	ldr	r5, [pc, #52]	@ (8004bb4 <__libc_init_array+0x38>)
 8004b80:	4c0d      	ldr	r4, [pc, #52]	@ (8004bb8 <__libc_init_array+0x3c>)
 8004b82:	1b64      	subs	r4, r4, r5
 8004b84:	10a4      	asrs	r4, r4, #2
 8004b86:	2600      	movs	r6, #0
 8004b88:	42a6      	cmp	r6, r4
 8004b8a:	d109      	bne.n	8004ba0 <__libc_init_array+0x24>
 8004b8c:	4d0b      	ldr	r5, [pc, #44]	@ (8004bbc <__libc_init_array+0x40>)
 8004b8e:	4c0c      	ldr	r4, [pc, #48]	@ (8004bc0 <__libc_init_array+0x44>)
 8004b90:	f000 f818 	bl	8004bc4 <_init>
 8004b94:	1b64      	subs	r4, r4, r5
 8004b96:	10a4      	asrs	r4, r4, #2
 8004b98:	2600      	movs	r6, #0
 8004b9a:	42a6      	cmp	r6, r4
 8004b9c:	d105      	bne.n	8004baa <__libc_init_array+0x2e>
 8004b9e:	bd70      	pop	{r4, r5, r6, pc}
 8004ba0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ba4:	4798      	blx	r3
 8004ba6:	3601      	adds	r6, #1
 8004ba8:	e7ee      	b.n	8004b88 <__libc_init_array+0xc>
 8004baa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bae:	4798      	blx	r3
 8004bb0:	3601      	adds	r6, #1
 8004bb2:	e7f2      	b.n	8004b9a <__libc_init_array+0x1e>
 8004bb4:	08004c14 	.word	0x08004c14
 8004bb8:	08004c14 	.word	0x08004c14
 8004bbc:	08004c14 	.word	0x08004c14
 8004bc0:	08004c18 	.word	0x08004c18

08004bc4 <_init>:
 8004bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bc6:	bf00      	nop
 8004bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bca:	bc08      	pop	{r3}
 8004bcc:	469e      	mov	lr, r3
 8004bce:	4770      	bx	lr

08004bd0 <_fini>:
 8004bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bd2:	bf00      	nop
 8004bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bd6:	bc08      	pop	{r3}
 8004bd8:	469e      	mov	lr, r3
 8004bda:	4770      	bx	lr
