
sensores_melchor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008724  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  080088f8  080088f8  000098f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c90  08008c90  0000a1e8  2**0
                  CONTENTS
  4 .ARM          00000008  08008c90  08008c90  00009c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c98  08008c98  0000a1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c98  08008c98  00009c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c9c  08008c9c  00009c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08008ca0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000039c  200001e8  08008e88  0000a1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000584  08008e88  0000a584  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000154bb  00000000  00000000  0000a218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028f7  00000000  00000000  0001f6d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001368  00000000  00000000  00021fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f45  00000000  00000000  00023338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029749  00000000  00000000  0002427d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000191e1  00000000  00000000  0004d9c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fcda2  00000000  00000000  00066ba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00163949  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000649c  00000000  00000000  0016398c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00169e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080088dc 	.word	0x080088dc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	080088dc 	.word	0x080088dc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b96a 	b.w	8000fb4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	460c      	mov	r4, r1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d14e      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d04:	4694      	mov	ip, r2
 8000d06:	458c      	cmp	ip, r1
 8000d08:	4686      	mov	lr, r0
 8000d0a:	fab2 f282 	clz	r2, r2
 8000d0e:	d962      	bls.n	8000dd6 <__udivmoddi4+0xde>
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0320 	rsb	r3, r2, #32
 8000d16:	4091      	lsls	r1, r2
 8000d18:	fa20 f303 	lsr.w	r3, r0, r3
 8000d1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d20:	4319      	orrs	r1, r3
 8000d22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2a:	fa1f f68c 	uxth.w	r6, ip
 8000d2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d36:	fb07 1114 	mls	r1, r7, r4, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb04 f106 	mul.w	r1, r4, r6
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d4e:	f080 8112 	bcs.w	8000f76 <__udivmoddi4+0x27e>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 810f 	bls.w	8000f76 <__udivmoddi4+0x27e>
 8000d58:	3c02      	subs	r4, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a59      	subs	r1, r3, r1
 8000d5e:	fa1f f38e 	uxth.w	r3, lr
 8000d62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d66:	fb07 1110 	mls	r1, r7, r0, r1
 8000d6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6e:	fb00 f606 	mul.w	r6, r0, r6
 8000d72:	429e      	cmp	r6, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x94>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d7e:	f080 80fc 	bcs.w	8000f7a <__udivmoddi4+0x282>
 8000d82:	429e      	cmp	r6, r3
 8000d84:	f240 80f9 	bls.w	8000f7a <__udivmoddi4+0x282>
 8000d88:	4463      	add	r3, ip
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	1b9b      	subs	r3, r3, r6
 8000d8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d92:	2100      	movs	r1, #0
 8000d94:	b11d      	cbz	r5, 8000d9e <__udivmoddi4+0xa6>
 8000d96:	40d3      	lsrs	r3, r2
 8000d98:	2200      	movs	r2, #0
 8000d9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d905      	bls.n	8000db2 <__udivmoddi4+0xba>
 8000da6:	b10d      	cbz	r5, 8000dac <__udivmoddi4+0xb4>
 8000da8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dac:	2100      	movs	r1, #0
 8000dae:	4608      	mov	r0, r1
 8000db0:	e7f5      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000db2:	fab3 f183 	clz	r1, r3
 8000db6:	2900      	cmp	r1, #0
 8000db8:	d146      	bne.n	8000e48 <__udivmoddi4+0x150>
 8000dba:	42a3      	cmp	r3, r4
 8000dbc:	d302      	bcc.n	8000dc4 <__udivmoddi4+0xcc>
 8000dbe:	4290      	cmp	r0, r2
 8000dc0:	f0c0 80f0 	bcc.w	8000fa4 <__udivmoddi4+0x2ac>
 8000dc4:	1a86      	subs	r6, r0, r2
 8000dc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dca:	2001      	movs	r0, #1
 8000dcc:	2d00      	cmp	r5, #0
 8000dce:	d0e6      	beq.n	8000d9e <__udivmoddi4+0xa6>
 8000dd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000dd4:	e7e3      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	f040 8090 	bne.w	8000efc <__udivmoddi4+0x204>
 8000ddc:	eba1 040c 	sub.w	r4, r1, ip
 8000de0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000de4:	fa1f f78c 	uxth.w	r7, ip
 8000de8:	2101      	movs	r1, #1
 8000dea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000df2:	fb08 4416 	mls	r4, r8, r6, r4
 8000df6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dfa:	fb07 f006 	mul.w	r0, r7, r6
 8000dfe:	4298      	cmp	r0, r3
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x11c>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x11a>
 8000e0c:	4298      	cmp	r0, r3
 8000e0e:	f200 80cd 	bhi.w	8000fac <__udivmoddi4+0x2b4>
 8000e12:	4626      	mov	r6, r4
 8000e14:	1a1c      	subs	r4, r3, r0
 8000e16:	fa1f f38e 	uxth.w	r3, lr
 8000e1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb00 f707 	mul.w	r7, r0, r7
 8000e2a:	429f      	cmp	r7, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x148>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x146>
 8000e38:	429f      	cmp	r7, r3
 8000e3a:	f200 80b0 	bhi.w	8000f9e <__udivmoddi4+0x2a6>
 8000e3e:	4620      	mov	r0, r4
 8000e40:	1bdb      	subs	r3, r3, r7
 8000e42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e46:	e7a5      	b.n	8000d94 <__udivmoddi4+0x9c>
 8000e48:	f1c1 0620 	rsb	r6, r1, #32
 8000e4c:	408b      	lsls	r3, r1
 8000e4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e52:	431f      	orrs	r7, r3
 8000e54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e58:	fa04 f301 	lsl.w	r3, r4, r1
 8000e5c:	ea43 030c 	orr.w	r3, r3, ip
 8000e60:	40f4      	lsrs	r4, r6
 8000e62:	fa00 f801 	lsl.w	r8, r0, r1
 8000e66:	0c38      	lsrs	r0, r7, #16
 8000e68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e70:	fa1f fc87 	uxth.w	ip, r7
 8000e74:	fb00 441e 	mls	r4, r0, lr, r4
 8000e78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e80:	45a1      	cmp	r9, r4
 8000e82:	fa02 f201 	lsl.w	r2, r2, r1
 8000e86:	d90a      	bls.n	8000e9e <__udivmoddi4+0x1a6>
 8000e88:	193c      	adds	r4, r7, r4
 8000e8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e8e:	f080 8084 	bcs.w	8000f9a <__udivmoddi4+0x2a2>
 8000e92:	45a1      	cmp	r9, r4
 8000e94:	f240 8081 	bls.w	8000f9a <__udivmoddi4+0x2a2>
 8000e98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	eba4 0409 	sub.w	r4, r4, r9
 8000ea2:	fa1f f983 	uxth.w	r9, r3
 8000ea6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eaa:	fb00 4413 	mls	r4, r0, r3, r4
 8000eae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb6:	45a4      	cmp	ip, r4
 8000eb8:	d907      	bls.n	8000eca <__udivmoddi4+0x1d2>
 8000eba:	193c      	adds	r4, r7, r4
 8000ebc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ec0:	d267      	bcs.n	8000f92 <__udivmoddi4+0x29a>
 8000ec2:	45a4      	cmp	ip, r4
 8000ec4:	d965      	bls.n	8000f92 <__udivmoddi4+0x29a>
 8000ec6:	3b02      	subs	r3, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ece:	fba0 9302 	umull	r9, r3, r0, r2
 8000ed2:	eba4 040c 	sub.w	r4, r4, ip
 8000ed6:	429c      	cmp	r4, r3
 8000ed8:	46ce      	mov	lr, r9
 8000eda:	469c      	mov	ip, r3
 8000edc:	d351      	bcc.n	8000f82 <__udivmoddi4+0x28a>
 8000ede:	d04e      	beq.n	8000f7e <__udivmoddi4+0x286>
 8000ee0:	b155      	cbz	r5, 8000ef8 <__udivmoddi4+0x200>
 8000ee2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ee6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eea:	fa04 f606 	lsl.w	r6, r4, r6
 8000eee:	40cb      	lsrs	r3, r1
 8000ef0:	431e      	orrs	r6, r3
 8000ef2:	40cc      	lsrs	r4, r1
 8000ef4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ef8:	2100      	movs	r1, #0
 8000efa:	e750      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000efc:	f1c2 0320 	rsb	r3, r2, #32
 8000f00:	fa20 f103 	lsr.w	r1, r0, r3
 8000f04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f08:	fa24 f303 	lsr.w	r3, r4, r3
 8000f0c:	4094      	lsls	r4, r2
 8000f0e:	430c      	orrs	r4, r1
 8000f10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f18:	fa1f f78c 	uxth.w	r7, ip
 8000f1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f20:	fb08 3110 	mls	r1, r8, r0, r3
 8000f24:	0c23      	lsrs	r3, r4, #16
 8000f26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f2a:	fb00 f107 	mul.w	r1, r0, r7
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x24c>
 8000f32:	eb1c 0303 	adds.w	r3, ip, r3
 8000f36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f3a:	d22c      	bcs.n	8000f96 <__udivmoddi4+0x29e>
 8000f3c:	4299      	cmp	r1, r3
 8000f3e:	d92a      	bls.n	8000f96 <__udivmoddi4+0x29e>
 8000f40:	3802      	subs	r0, #2
 8000f42:	4463      	add	r3, ip
 8000f44:	1a5b      	subs	r3, r3, r1
 8000f46:	b2a4      	uxth	r4, r4
 8000f48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f54:	fb01 f307 	mul.w	r3, r1, r7
 8000f58:	42a3      	cmp	r3, r4
 8000f5a:	d908      	bls.n	8000f6e <__udivmoddi4+0x276>
 8000f5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f64:	d213      	bcs.n	8000f8e <__udivmoddi4+0x296>
 8000f66:	42a3      	cmp	r3, r4
 8000f68:	d911      	bls.n	8000f8e <__udivmoddi4+0x296>
 8000f6a:	3902      	subs	r1, #2
 8000f6c:	4464      	add	r4, ip
 8000f6e:	1ae4      	subs	r4, r4, r3
 8000f70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f74:	e739      	b.n	8000dea <__udivmoddi4+0xf2>
 8000f76:	4604      	mov	r4, r0
 8000f78:	e6f0      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e706      	b.n	8000d8c <__udivmoddi4+0x94>
 8000f7e:	45c8      	cmp	r8, r9
 8000f80:	d2ae      	bcs.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f8a:	3801      	subs	r0, #1
 8000f8c:	e7a8      	b.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f8e:	4631      	mov	r1, r6
 8000f90:	e7ed      	b.n	8000f6e <__udivmoddi4+0x276>
 8000f92:	4603      	mov	r3, r0
 8000f94:	e799      	b.n	8000eca <__udivmoddi4+0x1d2>
 8000f96:	4630      	mov	r0, r6
 8000f98:	e7d4      	b.n	8000f44 <__udivmoddi4+0x24c>
 8000f9a:	46d6      	mov	lr, sl
 8000f9c:	e77f      	b.n	8000e9e <__udivmoddi4+0x1a6>
 8000f9e:	4463      	add	r3, ip
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	e74d      	b.n	8000e40 <__udivmoddi4+0x148>
 8000fa4:	4606      	mov	r6, r0
 8000fa6:	4623      	mov	r3, r4
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e70f      	b.n	8000dcc <__udivmoddi4+0xd4>
 8000fac:	3e02      	subs	r6, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	e730      	b.n	8000e14 <__udivmoddi4+0x11c>
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <analogRead>:
	20A		100		48.9 mA		12.2 mA		0.76 mA
	30A		66		74.1 mA		18.5 mA		1.16 mA
*/

//ADC reading por cana
uint16_t analogRead(uint8_t channel){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b088      	sub	sp, #32
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]

	static uint8_t canal_anterior = 3;
	uint16_t val = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	83fb      	strh	r3, [r7, #30]

	//Si es el mismo canal entonces no reconfiguramos de nuevo los pines
	if (canal_anterior == channel) {
 8000fc6:	4b2b      	ldr	r3, [pc, #172]	@ (8001074 <analogRead+0xbc>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	79fa      	ldrb	r2, [r7, #7]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d10f      	bne.n	8000ff0 <analogRead+0x38>

		HAL_ADC_Start(adc);
 8000fd0:	4829      	ldr	r0, [pc, #164]	@ (8001078 <analogRead+0xc0>)
 8000fd2:	f001 fc95 	bl	8002900 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(adc,10);
 8000fd6:	210a      	movs	r1, #10
 8000fd8:	4827      	ldr	r0, [pc, #156]	@ (8001078 <analogRead+0xc0>)
 8000fda:	f001 fd93 	bl	8002b04 <HAL_ADC_PollForConversion>
		val = HAL_ADC_GetValue(adc);
 8000fde:	4826      	ldr	r0, [pc, #152]	@ (8001078 <analogRead+0xc0>)
 8000fe0:	f001 fe1b 	bl	8002c1a <HAL_ADC_GetValue>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	83fb      	strh	r3, [r7, #30]
		HAL_ADC_Stop(adc);
 8000fe8:	4823      	ldr	r0, [pc, #140]	@ (8001078 <analogRead+0xc0>)
 8000fea:	f001 fd57 	bl	8002a9c <HAL_ADC_Stop>
 8000fee:	e038      	b.n	8001062 <analogRead+0xaa>

	}else{ //Configuramos el canal

		//Paramos el adc

		ADC_ChannelConfTypeDef sConfig = {0};
 8000ff0:	f107 030c 	add.w	r3, r7, #12
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]

		//SELECCIONAMOS CANAL
		switch (channel) {
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	2b02      	cmp	r3, #2
 8001002:	d00c      	beq.n	800101e <analogRead+0x66>
 8001004:	2b02      	cmp	r3, #2
 8001006:	dc0d      	bgt.n	8001024 <analogRead+0x6c>
 8001008:	2b00      	cmp	r3, #0
 800100a:	d002      	beq.n	8001012 <analogRead+0x5a>
 800100c:	2b01      	cmp	r3, #1
 800100e:	d003      	beq.n	8001018 <analogRead+0x60>
				break;
			case 2:
				 sConfig.Channel = ADC_CHANNEL_6;
				break;
			default:
				break;
 8001010:	e008      	b.n	8001024 <analogRead+0x6c>
				 sConfig.Channel = ADC_CHANNEL_4;
 8001012:	2304      	movs	r3, #4
 8001014:	60fb      	str	r3, [r7, #12]
				break;
 8001016:	e006      	b.n	8001026 <analogRead+0x6e>
				 sConfig.Channel = ADC_CHANNEL_5;
 8001018:	2305      	movs	r3, #5
 800101a:	60fb      	str	r3, [r7, #12]
				break;
 800101c:	e003      	b.n	8001026 <analogRead+0x6e>
				 sConfig.Channel = ADC_CHANNEL_6;
 800101e:	2306      	movs	r3, #6
 8001020:	60fb      	str	r3, [r7, #12]
				break;
 8001022:	e000      	b.n	8001026 <analogRead+0x6e>
				break;
 8001024:	bf00      	nop
		}

		sConfig.Rank = 1;
 8001026:	2301      	movs	r3, #1
 8001028:	613b      	str	r3, [r7, #16]
		sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
		if (HAL_ADC_ConfigChannel(adc, &sConfig) != HAL_OK)
 800102e:	f107 030c 	add.w	r3, r7, #12
 8001032:	4619      	mov	r1, r3
 8001034:	4810      	ldr	r0, [pc, #64]	@ (8001078 <analogRead+0xc0>)
 8001036:	f001 fdfd 	bl	8002c34 <HAL_ADC_ConfigChannel>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <analogRead+0x8c>
		{
			Error_Handler();
 8001040:	f001 f83e 	bl	80020c0 <Error_Handler>
		}

		//INICALIZAMOS LA CONVERSION
		HAL_ADC_Start(adc);
 8001044:	480c      	ldr	r0, [pc, #48]	@ (8001078 <analogRead+0xc0>)
 8001046:	f001 fc5b 	bl	8002900 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(adc,0);
 800104a:	2100      	movs	r1, #0
 800104c:	480a      	ldr	r0, [pc, #40]	@ (8001078 <analogRead+0xc0>)
 800104e:	f001 fd59 	bl	8002b04 <HAL_ADC_PollForConversion>
		//Tomamos la medida
		val = HAL_ADC_GetValue(adc);
 8001052:	4809      	ldr	r0, [pc, #36]	@ (8001078 <analogRead+0xc0>)
 8001054:	f001 fde1 	bl	8002c1a <HAL_ADC_GetValue>
 8001058:	4603      	mov	r3, r0
 800105a:	83fb      	strh	r3, [r7, #30]
		HAL_ADC_Stop(adc);
 800105c:	4806      	ldr	r0, [pc, #24]	@ (8001078 <analogRead+0xc0>)
 800105e:	f001 fd1d 	bl	8002a9c <HAL_ADC_Stop>
	}

	//Almacenamos el canal anterior
	canal_anterior = channel;
 8001062:	4a04      	ldr	r2, [pc, #16]	@ (8001074 <analogRead+0xbc>)
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	7013      	strb	r3, [r2, #0]

	return val;
 8001068:	8bfb      	ldrh	r3, [r7, #30]
}
 800106a:	4618      	mov	r0, r3
 800106c:	3720      	adds	r7, #32
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000000 	.word	0x20000000
 8001078:	20000210 	.word	0x20000210
 800107c:	00000000 	.word	0x00000000

08001080 <ACS712_Frequency>:

//  FREQUENCY DETECTION
//  uses oversampling and averaging to minimize variation
//  blocks for substantial amount of time, depending on minimalFrequency
void ACS712_Frequency(ACS712* modulo,float minimalFrequency)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08c      	sub	sp, #48	@ 0x30
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	ed87 0a00 	vstr	s0, [r7]
  int maximum = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int minimum = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	62bb      	str	r3, [r7, #40]	@ 0x28
  maximum = minimum = analogRead(modulo->channel);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	7a1b      	ldrb	r3, [r3, #8]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff8d 	bl	8000fb8 <analogRead>
 800109e:	4603      	mov	r3, r0
 80010a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80010a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  //  determine maxima
  uint32_t timeOut = round(1000000.0 / minimalFrequency);
 80010a6:	6838      	ldr	r0, [r7, #0]
 80010a8:	f7ff fa6e 	bl	8000588 <__aeabi_f2d>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	a16b      	add	r1, pc, #428	@ (adr r1, 8001260 <ACS712_Frequency+0x1e0>)
 80010b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80010b6:	f7ff fbe9 	bl	800088c <__aeabi_ddiv>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	ec43 2b17 	vmov	d7, r2, r3
 80010c2:	eeb0 0a47 	vmov.f32	s0, s14
 80010c6:	eef0 0a67 	vmov.f32	s1, s15
 80010ca:	f007 fbc1 	bl	8008850 <round>
 80010ce:	ec53 2b10 	vmov	r2, r3, d0
 80010d2:	4610      	mov	r0, r2
 80010d4:	4619      	mov	r1, r3
 80010d6:	f7ff fd87 	bl	8000be8 <__aeabi_d2uiz>
 80010da:	4603      	mov	r3, r0
 80010dc:	623b      	str	r3, [r7, #32]
  __HAL_TIM_SET_COUNTER(micros,0);
 80010de:	4b5e      	ldr	r3, [pc, #376]	@ (8001258 <ACS712_Frequency+0x1d8>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2200      	movs	r2, #0
 80010e4:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(micros)< timeOut)
 80010e6:	e012      	b.n	800110e <ACS712_Frequency+0x8e>
  {
    int value = analogRead(modulo->channel);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	7a1b      	ldrb	r3, [r3, #8]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff63 	bl	8000fb8 <analogRead>
 80010f2:	4603      	mov	r3, r0
 80010f4:	60bb      	str	r3, [r7, #8]
    if (value > maximum) maximum = value;
 80010f6:	68ba      	ldr	r2, [r7, #8]
 80010f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010fa:	429a      	cmp	r2, r3
 80010fc:	dd01      	ble.n	8001102 <ACS712_Frequency+0x82>
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (value < minimum) minimum = value;
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001106:	429a      	cmp	r2, r3
 8001108:	da01      	bge.n	800110e <ACS712_Frequency+0x8e>
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	62bb      	str	r3, [r7, #40]	@ 0x28
  while (__HAL_TIM_GET_COUNTER(micros)< timeOut)
 800110e:	4b52      	ldr	r3, [pc, #328]	@ (8001258 <ACS712_Frequency+0x1d8>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001114:	6a3a      	ldr	r2, [r7, #32]
 8001116:	429a      	cmp	r2, r3
 8001118:	d8e6      	bhi.n	80010e8 <ACS712_Frequency+0x68>
  }

  //  calculate quarter points
  //  using quarter points is less noise prone than using one single midpoint
  int Q1 = (3 * minimum + maximum ) / 4;
 800111a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800111c:	4613      	mov	r3, r2
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	441a      	add	r2, r3
 8001122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001124:	4413      	add	r3, r2
 8001126:	2b00      	cmp	r3, #0
 8001128:	da00      	bge.n	800112c <ACS712_Frequency+0xac>
 800112a:	3303      	adds	r3, #3
 800112c:	109b      	asrs	r3, r3, #2
 800112e:	61fb      	str	r3, [r7, #28]
  int Q3 = (minimum + 3 * maximum ) / 4;
 8001130:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001132:	4613      	mov	r3, r2
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	441a      	add	r2, r3
 8001138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800113a:	4413      	add	r3, r2
 800113c:	2b00      	cmp	r3, #0
 800113e:	da00      	bge.n	8001142 <ACS712_Frequency+0xc2>
 8001140:	3303      	adds	r3, #3
 8001142:	109b      	asrs	r3, r3, #2
 8001144:	61bb      	str	r3, [r7, #24]

  //  10x passing Quantile points
  //  wait for the right moment to start
  //  to prevent endless loop a timeout is checked.
  timeOut *= 10;
 8001146:	6a3a      	ldr	r2, [r7, #32]
 8001148:	4613      	mov	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	4413      	add	r3, r2
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	623b      	str	r3, [r7, #32]
  __HAL_TIM_SET_COUNTER(micros,0);
 8001152:	4b41      	ldr	r3, [pc, #260]	@ (8001258 <ACS712_Frequency+0x1d8>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2200      	movs	r2, #0
 8001158:	625a      	str	r2, [r3, #36]	@ 0x24
  //  casting to int to keep compiler happy.
  while ((analogRead(modulo->channel) >  Q1) && (__HAL_TIM_GET_COUNTER(micros) < timeOut));
 800115a:	bf00      	nop
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	7a1b      	ldrb	r3, [r3, #8]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ff29 	bl	8000fb8 <analogRead>
 8001166:	4603      	mov	r3, r0
 8001168:	461a      	mov	r2, r3
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	4293      	cmp	r3, r2
 800116e:	da05      	bge.n	800117c <ACS712_Frequency+0xfc>
 8001170:	4b39      	ldr	r3, [pc, #228]	@ (8001258 <ACS712_Frequency+0x1d8>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001176:	6a3a      	ldr	r2, [r7, #32]
 8001178:	429a      	cmp	r2, r3
 800117a:	d8ef      	bhi.n	800115c <ACS712_Frequency+0xdc>
  while ((analogRead(modulo->channel) <= Q3) && (__HAL_TIM_GET_COUNTER(micros) < timeOut));
 800117c:	bf00      	nop
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	7a1b      	ldrb	r3, [r3, #8]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff ff18 	bl	8000fb8 <analogRead>
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	4293      	cmp	r3, r2
 8001190:	db05      	blt.n	800119e <ACS712_Frequency+0x11e>
 8001192:	4b31      	ldr	r3, [pc, #196]	@ (8001258 <ACS712_Frequency+0x1d8>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001198:	6a3a      	ldr	r2, [r7, #32]
 800119a:	429a      	cmp	r2, r3
 800119c:	d8ef      	bhi.n	800117e <ACS712_Frequency+0xfe>
  __HAL_TIM_SET_COUNTER(micros,0);
 800119e:	4b2e      	ldr	r3, [pc, #184]	@ (8001258 <ACS712_Frequency+0x1d8>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2200      	movs	r2, #0
 80011a4:	625a      	str	r2, [r3, #36]	@ 0x24
  for (int i = 0; i < 10; i++)
 80011a6:	2300      	movs	r3, #0
 80011a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80011aa:	e024      	b.n	80011f6 <ACS712_Frequency+0x176>
  {
    while ((analogRead(modulo->channel) >  Q1) && (__HAL_TIM_GET_COUNTER(micros) < timeOut));
 80011ac:	bf00      	nop
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	7a1b      	ldrb	r3, [r3, #8]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff ff00 	bl	8000fb8 <analogRead>
 80011b8:	4603      	mov	r3, r0
 80011ba:	461a      	mov	r2, r3
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	4293      	cmp	r3, r2
 80011c0:	da05      	bge.n	80011ce <ACS712_Frequency+0x14e>
 80011c2:	4b25      	ldr	r3, [pc, #148]	@ (8001258 <ACS712_Frequency+0x1d8>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011c8:	6a3a      	ldr	r2, [r7, #32]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d8ef      	bhi.n	80011ae <ACS712_Frequency+0x12e>
    while ((analogRead(modulo->channel) <= Q3) && (__HAL_TIM_GET_COUNTER(micros) < timeOut));
 80011ce:	bf00      	nop
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	7a1b      	ldrb	r3, [r3, #8]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff feef 	bl	8000fb8 <analogRead>
 80011da:	4603      	mov	r3, r0
 80011dc:	461a      	mov	r2, r3
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	4293      	cmp	r3, r2
 80011e2:	db05      	blt.n	80011f0 <ACS712_Frequency+0x170>
 80011e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001258 <ACS712_Frequency+0x1d8>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ea:	6a3a      	ldr	r2, [r7, #32]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d8ef      	bhi.n	80011d0 <ACS712_Frequency+0x150>
  for (int i = 0; i < 10; i++)
 80011f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f2:	3301      	adds	r3, #1
 80011f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80011f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f8:	2b09      	cmp	r3, #9
 80011fa:	ddd7      	ble.n	80011ac <ACS712_Frequency+0x12c>
  }
  uint32_t stop = __HAL_TIM_GET_COUNTER(micros);
 80011fc:	4b16      	ldr	r3, [pc, #88]	@ (8001258 <ACS712_Frequency+0x1d8>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001202:	617b      	str	r3, [r7, #20]

  //  calculate frequency
  float wavelength = stop;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	ee07 3a90 	vmov	s15, r3
 800120a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800120e:	edc7 7a04 	vstr	s15, [r7, #16]
  float frequency = 1e7 / wavelength;
 8001212:	eddf 6a12 	vldr	s13, [pc, #72]	@ 800125c <ACS712_Frequency+0x1dc>
 8001216:	ed97 7a04 	vldr	s14, [r7, #16]
 800121a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800121e:	edc7 7a03 	vstr	s15, [r7, #12]
  if (_microsAdjust != 1.0) frequency *= _microsAdjust;
 8001222:	68f8      	ldr	r0, [r7, #12]
 8001224:	f7ff f9b0 	bl	8000588 <__aeabi_f2d>
 8001228:	a309      	add	r3, pc, #36	@ (adr r3, 8001250 <ACS712_Frequency+0x1d0>)
 800122a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122e:	f7ff fa03 	bl	8000638 <__aeabi_dmul>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	4610      	mov	r0, r2
 8001238:	4619      	mov	r1, r3
 800123a:	f7ff fcf5 	bl	8000c28 <__aeabi_d2f>
 800123e:	4603      	mov	r3, r0
 8001240:	60fb      	str	r3, [r7, #12]

  modulo->FRE = frequency;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	68fa      	ldr	r2, [r7, #12]
 8001246:	605a      	str	r2, [r3, #4]
}
 8001248:	bf00      	nop
 800124a:	3730      	adds	r7, #48	@ 0x30
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	fcb923a3 	.word	0xfcb923a3
 8001254:	3feff487 	.word	0x3feff487
 8001258:	2000035c 	.word	0x2000035c
 800125c:	4b189680 	.word	0x4b189680
 8001260:	00000000 	.word	0x00000000
 8001264:	412e8480 	.word	0x412e8480

08001268 <ACS712_RMS>:

void ACS712_RMS(ACS712* modulo){
 8001268:	b5b0      	push	{r4, r5, r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
	float voltajeSensor;
	float corriente=0;
 8001270:	f04f 0300 	mov.w	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
	float Imax=0;
 8001276:	f04f 0300 	mov.w	r3, #0
 800127a:	613b      	str	r3, [r7, #16]
	float Imin=0;
 800127c:	f04f 0300 	mov.w	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]

	__HAL_TIM_SET_COUNTER(millis,0);;
 8001282:	4b5b      	ldr	r3, [pc, #364]	@ (80013f0 <ACS712_RMS+0x188>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2200      	movs	r2, #0
 8001288:	625a      	str	r2, [r3, #36]	@ 0x24

	while(__HAL_TIM_GET_COUNTER(millis)<500) //realizamos mediciones durante 0.5 segundos
 800128a:	e068      	b.n	800135e <ACS712_RMS+0xf6>
	  {
		voltajeSensor = (analogRead(modulo->channel)/4095.0) *3.3; //lectura del sensor
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	7a1b      	ldrb	r3, [r3, #8]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff fe91 	bl	8000fb8 <analogRead>
 8001296:	4603      	mov	r3, r0
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff f963 	bl	8000564 <__aeabi_i2d>
 800129e:	a348      	add	r3, pc, #288	@ (adr r3, 80013c0 <ACS712_RMS+0x158>)
 80012a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a4:	f7ff faf2 	bl	800088c <__aeabi_ddiv>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4610      	mov	r0, r2
 80012ae:	4619      	mov	r1, r3
 80012b0:	a345      	add	r3, pc, #276	@ (adr r3, 80013c8 <ACS712_RMS+0x160>)
 80012b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b6:	f7ff f9bf 	bl	8000638 <__aeabi_dmul>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4610      	mov	r0, r2
 80012c0:	4619      	mov	r1, r3
 80012c2:	f7ff fcb1 	bl	8000c28 <__aeabi_d2f>
 80012c6:	4603      	mov	r3, r0
 80012c8:	60bb      	str	r3, [r7, #8]

		/* para disminuir un poco el ruido aplicamos un filtro pasa bajos, que es similar a realizar un promedio de 10 muestras*/
		corriente=0.9*corriente+0.1*((voltajeSensor-midpoimt_0v)/mV_amps); //Ecuación para obtener la corriente
 80012ca:	6978      	ldr	r0, [r7, #20]
 80012cc:	f7ff f95c 	bl	8000588 <__aeabi_f2d>
 80012d0:	a33f      	add	r3, pc, #252	@ (adr r3, 80013d0 <ACS712_RMS+0x168>)
 80012d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d6:	f7ff f9af 	bl	8000638 <__aeabi_dmul>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	4614      	mov	r4, r2
 80012e0:	461d      	mov	r5, r3
 80012e2:	68b8      	ldr	r0, [r7, #8]
 80012e4:	f7ff f950 	bl	8000588 <__aeabi_f2d>
 80012e8:	f04f 0200 	mov.w	r2, #0
 80012ec:	4b41      	ldr	r3, [pc, #260]	@ (80013f4 <ACS712_RMS+0x18c>)
 80012ee:	f7fe ffeb 	bl	80002c8 <__aeabi_dsub>
 80012f2:	4602      	mov	r2, r0
 80012f4:	460b      	mov	r3, r1
 80012f6:	4610      	mov	r0, r2
 80012f8:	4619      	mov	r1, r3
 80012fa:	f04f 0200 	mov.w	r2, #0
 80012fe:	4b3e      	ldr	r3, [pc, #248]	@ (80013f8 <ACS712_RMS+0x190>)
 8001300:	f7ff fac4 	bl	800088c <__aeabi_ddiv>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4610      	mov	r0, r2
 800130a:	4619      	mov	r1, r3
 800130c:	a332      	add	r3, pc, #200	@ (adr r3, 80013d8 <ACS712_RMS+0x170>)
 800130e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001312:	f7ff f991 	bl	8000638 <__aeabi_dmul>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	4620      	mov	r0, r4
 800131c:	4629      	mov	r1, r5
 800131e:	f7fe ffd5 	bl	80002cc <__adddf3>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4610      	mov	r0, r2
 8001328:	4619      	mov	r1, r3
 800132a:	f7ff fc7d 	bl	8000c28 <__aeabi_d2f>
 800132e:	4603      	mov	r3, r0
 8001330:	617b      	str	r3, [r7, #20]

		if(corriente>Imax)Imax=corriente;
 8001332:	ed97 7a05 	vldr	s14, [r7, #20]
 8001336:	edd7 7a04 	vldr	s15, [r7, #16]
 800133a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800133e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001342:	dd01      	ble.n	8001348 <ACS712_RMS+0xe0>
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	613b      	str	r3, [r7, #16]
		if(corriente<Imin)Imin=corriente;
 8001348:	ed97 7a05 	vldr	s14, [r7, #20]
 800134c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001350:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001358:	d501      	bpl.n	800135e <ACS712_RMS+0xf6>
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	60fb      	str	r3, [r7, #12]
	while(__HAL_TIM_GET_COUNTER(millis)<500) //realizamos mediciones durante 0.5 segundos
 800135e:	4b24      	ldr	r3, [pc, #144]	@ (80013f0 <ACS712_RMS+0x188>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001364:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001368:	d390      	bcc.n	800128c <ACS712_RMS+0x24>
	  }

	modulo->RMS = (((Imax-Imin)/2)-offset)*ACS712_FF_SINUS;
 800136a:	ed97 7a04 	vldr	s14, [r7, #16]
 800136e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001372:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001376:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800137a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800137e:	ee16 0a90 	vmov	r0, s13
 8001382:	f7ff f901 	bl	8000588 <__aeabi_f2d>
 8001386:	a316      	add	r3, pc, #88	@ (adr r3, 80013e0 <ACS712_RMS+0x178>)
 8001388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138c:	f7fe ff9c 	bl	80002c8 <__aeabi_dsub>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	4610      	mov	r0, r2
 8001396:	4619      	mov	r1, r3
 8001398:	a313      	add	r3, pc, #76	@ (adr r3, 80013e8 <ACS712_RMS+0x180>)
 800139a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139e:	f7ff f94b 	bl	8000638 <__aeabi_dmul>
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	4610      	mov	r0, r2
 80013a8:	4619      	mov	r1, r3
 80013aa:	f7ff fc3d 	bl	8000c28 <__aeabi_d2f>
 80013ae:	4602      	mov	r2, r0
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	601a      	str	r2, [r3, #0]
	//modulo->RMS = Imax*ACS712_FF_SINUS;
}
 80013b4:	bf00      	nop
 80013b6:	3718      	adds	r7, #24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bdb0      	pop	{r4, r5, r7, pc}
 80013bc:	f3af 8000 	nop.w
 80013c0:	00000000 	.word	0x00000000
 80013c4:	40affe00 	.word	0x40affe00
 80013c8:	66666666 	.word	0x66666666
 80013cc:	400a6666 	.word	0x400a6666
 80013d0:	cccccccd 	.word	0xcccccccd
 80013d4:	3feccccc 	.word	0x3feccccc
 80013d8:	9999999a 	.word	0x9999999a
 80013dc:	3fb99999 	.word	0x3fb99999
 80013e0:	4189374c 	.word	0x4189374c
 80013e4:	3fb0e560 	.word	0x3fb0e560
 80013e8:	76c8b439 	.word	0x76c8b439
 80013ec:	3fe69fbe 	.word	0x3fe69fbe
 80013f0:	20000310 	.word	0x20000310
 80013f4:	40040000 	.word	0x40040000
 80013f8:	40508000 	.word	0x40508000

080013fc <ACS712_sense>:

void ACS712_sense(ACS712* modulo){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]

	//FRECUENCIA
	ACS712_Frequency(modulo,1);
 8001404:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff fe39 	bl	8001080 <ACS712_Frequency>

	//RMS
	ACS712_RMS(modulo);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff ff2a 	bl	8001268 <ACS712_RMS>
}
 8001414:	bf00      	nop
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800141c:	b5b0      	push	{r4, r5, r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001422:	f001 f9cc 	bl	80027be <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001426:	f000 f841 	bl	80014ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800142a:	f000 fa37 	bl	800189c <MX_GPIO_Init>
  MX_SPI2_Init();
 800142e:	f000 f92b 	bl	8001688 <MX_SPI2_Init>
  MX_ADC3_Init();
 8001432:	f000 f8a7 	bl	8001584 <MX_ADC3_Init>
  MX_USART1_UART_Init();
 8001436:	f000 fa01 	bl	800183c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800143a:	f000 f8e5 	bl	8001608 <MX_I2C1_Init>
  MX_TIM5_Init();
 800143e:	f000 f9af 	bl	80017a0 <MX_TIM5_Init>
  MX_TIM2_Init();
 8001442:	f000 f95f 	bl	8001704 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /*
   * Inicializamos los timers
   */
  HAL_TIM_Base_Start(&htim5);
 8001446:	4813      	ldr	r0, [pc, #76]	@ (8001494 <main+0x78>)
 8001448:	f003 fbe4 	bl	8004c14 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 800144c:	4812      	ldr	r0, [pc, #72]	@ (8001498 <main+0x7c>)
 800144e:	f003 fbe1 	bl	8004c14 <HAL_TIM_Base_Start>

	  //accelerometro
	  //SENS_mpu6050(&vibraciones, &hi2c1);

	  //Corrientes por fase
	  ACS712_sense(&F1);
 8001452:	4812      	ldr	r0, [pc, #72]	@ (800149c <main+0x80>)
 8001454:	f7ff ffd2 	bl	80013fc <ACS712_sense>

	  //Velocidad de giro y sentido
	  //SENS_Encoder(&encoder);

	  //Enviamos trama de lo sensado
	  sprintf((char*)msg,"%0.2f %0.2f \r\n",F1.FRE,F1.RMS);
 8001458:	4b10      	ldr	r3, [pc, #64]	@ (800149c <main+0x80>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff f893 	bl	8000588 <__aeabi_f2d>
 8001462:	4604      	mov	r4, r0
 8001464:	460d      	mov	r5, r1
 8001466:	4b0d      	ldr	r3, [pc, #52]	@ (800149c <main+0x80>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff f88c 	bl	8000588 <__aeabi_f2d>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	e9cd 2300 	strd	r2, r3, [sp]
 8001478:	4622      	mov	r2, r4
 800147a:	462b      	mov	r3, r5
 800147c:	4908      	ldr	r1, [pc, #32]	@ (80014a0 <main+0x84>)
 800147e:	4809      	ldr	r0, [pc, #36]	@ (80014a4 <main+0x88>)
 8001480:	f005 f8b8 	bl	80065f4 <siprintf>
	  HAL_UART_Transmit(&huart1, msg, sizeof(msg)/sizeof(uint8_t),10);
 8001484:	230a      	movs	r3, #10
 8001486:	220e      	movs	r2, #14
 8001488:	4906      	ldr	r1, [pc, #24]	@ (80014a4 <main+0x88>)
 800148a:	4807      	ldr	r0, [pc, #28]	@ (80014a8 <main+0x8c>)
 800148c:	f003 ff12 	bl	80052b4 <HAL_UART_Transmit>
	  ACS712_sense(&F1);
 8001490:	bf00      	nop
 8001492:	e7de      	b.n	8001452 <main+0x36>
 8001494:	2000035c 	.word	0x2000035c
 8001498:	20000310 	.word	0x20000310
 800149c:	20000204 	.word	0x20000204
 80014a0:	080088f8 	.word	0x080088f8
 80014a4:	20000004 	.word	0x20000004
 80014a8:	200003a8 	.word	0x200003a8

080014ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b094      	sub	sp, #80	@ 0x50
 80014b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b2:	f107 0320 	add.w	r3, r7, #32
 80014b6:	2230      	movs	r2, #48	@ 0x30
 80014b8:	2100      	movs	r1, #0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f005 f8fd 	bl	80066ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c0:	f107 030c 	add.w	r3, r7, #12
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d0:	4b2a      	ldr	r3, [pc, #168]	@ (800157c <SystemClock_Config+0xd0>)
 80014d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d4:	4a29      	ldr	r2, [pc, #164]	@ (800157c <SystemClock_Config+0xd0>)
 80014d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014da:	6413      	str	r3, [r2, #64]	@ 0x40
 80014dc:	4b27      	ldr	r3, [pc, #156]	@ (800157c <SystemClock_Config+0xd0>)
 80014de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014e8:	4b25      	ldr	r3, [pc, #148]	@ (8001580 <SystemClock_Config+0xd4>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a24      	ldr	r2, [pc, #144]	@ (8001580 <SystemClock_Config+0xd4>)
 80014ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80014f2:	6013      	str	r3, [r2, #0]
 80014f4:	4b22      	ldr	r3, [pc, #136]	@ (8001580 <SystemClock_Config+0xd4>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001500:	2302      	movs	r3, #2
 8001502:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001504:	2301      	movs	r3, #1
 8001506:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001508:	2310      	movs	r3, #16
 800150a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800150c:	2302      	movs	r3, #2
 800150e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001510:	2300      	movs	r3, #0
 8001512:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001514:	2308      	movs	r3, #8
 8001516:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001518:	23d8      	movs	r3, #216	@ 0xd8
 800151a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800151c:	2302      	movs	r3, #2
 800151e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001520:	2302      	movs	r3, #2
 8001522:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001524:	f107 0320 	add.w	r3, r7, #32
 8001528:	4618      	mov	r0, r3
 800152a:	f002 f9f7 	bl	800391c <HAL_RCC_OscConfig>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001534:	f000 fdc4 	bl	80020c0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001538:	f002 f9a0 	bl	800387c <HAL_PWREx_EnableOverDrive>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001542:	f000 fdbd 	bl	80020c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001546:	230f      	movs	r3, #15
 8001548:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800154a:	2302      	movs	r3, #2
 800154c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800154e:	2300      	movs	r3, #0
 8001550:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001552:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001556:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001558:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800155c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800155e:	f107 030c 	add.w	r3, r7, #12
 8001562:	2107      	movs	r1, #7
 8001564:	4618      	mov	r0, r3
 8001566:	f002 fc7d 	bl	8003e64 <HAL_RCC_ClockConfig>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001570:	f000 fda6 	bl	80020c0 <Error_Handler>
  }
}
 8001574:	bf00      	nop
 8001576:	3750      	adds	r7, #80	@ 0x50
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40023800 	.word	0x40023800
 8001580:	40007000 	.word	0x40007000

08001584 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800158a:	463b      	mov	r3, r7
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001596:	4b19      	ldr	r3, [pc, #100]	@ (80015fc <MX_ADC3_Init+0x78>)
 8001598:	4a19      	ldr	r2, [pc, #100]	@ (8001600 <MX_ADC3_Init+0x7c>)
 800159a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800159c:	4b17      	ldr	r3, [pc, #92]	@ (80015fc <MX_ADC3_Init+0x78>)
 800159e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80015a2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80015a4:	4b15      	ldr	r3, [pc, #84]	@ (80015fc <MX_ADC3_Init+0x78>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80015aa:	4b14      	ldr	r3, [pc, #80]	@ (80015fc <MX_ADC3_Init+0x78>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80015b0:	4b12      	ldr	r3, [pc, #72]	@ (80015fc <MX_ADC3_Init+0x78>)
 80015b2:	2201      	movs	r2, #1
 80015b4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80015b6:	4b11      	ldr	r3, [pc, #68]	@ (80015fc <MX_ADC3_Init+0x78>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015be:	4b0f      	ldr	r3, [pc, #60]	@ (80015fc <MX_ADC3_Init+0x78>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015c4:	4b0d      	ldr	r3, [pc, #52]	@ (80015fc <MX_ADC3_Init+0x78>)
 80015c6:	4a0f      	ldr	r2, [pc, #60]	@ (8001604 <MX_ADC3_Init+0x80>)
 80015c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015ca:	4b0c      	ldr	r3, [pc, #48]	@ (80015fc <MX_ADC3_Init+0x78>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80015d0:	4b0a      	ldr	r3, [pc, #40]	@ (80015fc <MX_ADC3_Init+0x78>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80015d6:	4b09      	ldr	r3, [pc, #36]	@ (80015fc <MX_ADC3_Init+0x78>)
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015de:	4b07      	ldr	r3, [pc, #28]	@ (80015fc <MX_ADC3_Init+0x78>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80015e4:	4805      	ldr	r0, [pc, #20]	@ (80015fc <MX_ADC3_Init+0x78>)
 80015e6:	f001 f947 	bl	8002878 <HAL_ADC_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80015f0:	f000 fd66 	bl	80020c0 <Error_Handler>
  //}
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80015f4:	bf00      	nop
 80015f6:	3710      	adds	r7, #16
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20000210 	.word	0x20000210
 8001600:	40012200 	.word	0x40012200
 8001604:	0f000001 	.word	0x0f000001

08001608 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800160c:	4b1b      	ldr	r3, [pc, #108]	@ (800167c <MX_I2C1_Init+0x74>)
 800160e:	4a1c      	ldr	r2, [pc, #112]	@ (8001680 <MX_I2C1_Init+0x78>)
 8001610:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8001612:	4b1a      	ldr	r3, [pc, #104]	@ (800167c <MX_I2C1_Init+0x74>)
 8001614:	4a1b      	ldr	r2, [pc, #108]	@ (8001684 <MX_I2C1_Init+0x7c>)
 8001616:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001618:	4b18      	ldr	r3, [pc, #96]	@ (800167c <MX_I2C1_Init+0x74>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800161e:	4b17      	ldr	r3, [pc, #92]	@ (800167c <MX_I2C1_Init+0x74>)
 8001620:	2201      	movs	r2, #1
 8001622:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001624:	4b15      	ldr	r3, [pc, #84]	@ (800167c <MX_I2C1_Init+0x74>)
 8001626:	2200      	movs	r2, #0
 8001628:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800162a:	4b14      	ldr	r3, [pc, #80]	@ (800167c <MX_I2C1_Init+0x74>)
 800162c:	2200      	movs	r2, #0
 800162e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001630:	4b12      	ldr	r3, [pc, #72]	@ (800167c <MX_I2C1_Init+0x74>)
 8001632:	2200      	movs	r2, #0
 8001634:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001636:	4b11      	ldr	r3, [pc, #68]	@ (800167c <MX_I2C1_Init+0x74>)
 8001638:	2200      	movs	r2, #0
 800163a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800163c:	4b0f      	ldr	r3, [pc, #60]	@ (800167c <MX_I2C1_Init+0x74>)
 800163e:	2200      	movs	r2, #0
 8001640:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001642:	480e      	ldr	r0, [pc, #56]	@ (800167c <MX_I2C1_Init+0x74>)
 8001644:	f001 fff2 	bl	800362c <HAL_I2C_Init>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800164e:	f000 fd37 	bl	80020c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001652:	2100      	movs	r1, #0
 8001654:	4809      	ldr	r0, [pc, #36]	@ (800167c <MX_I2C1_Init+0x74>)
 8001656:	f002 f879 	bl	800374c <HAL_I2CEx_ConfigAnalogFilter>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001660:	f000 fd2e 	bl	80020c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001664:	2100      	movs	r1, #0
 8001666:	4805      	ldr	r0, [pc, #20]	@ (800167c <MX_I2C1_Init+0x74>)
 8001668:	f002 f8bb 	bl	80037e2 <HAL_I2CEx_ConfigDigitalFilter>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001672:	f000 fd25 	bl	80020c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000258 	.word	0x20000258
 8001680:	40005400 	.word	0x40005400
 8001684:	20404768 	.word	0x20404768

08001688 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800168c:	4b1b      	ldr	r3, [pc, #108]	@ (80016fc <MX_SPI2_Init+0x74>)
 800168e:	4a1c      	ldr	r2, [pc, #112]	@ (8001700 <MX_SPI2_Init+0x78>)
 8001690:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001692:	4b1a      	ldr	r3, [pc, #104]	@ (80016fc <MX_SPI2_Init+0x74>)
 8001694:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001698:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800169a:	4b18      	ldr	r3, [pc, #96]	@ (80016fc <MX_SPI2_Init+0x74>)
 800169c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016a0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80016a2:	4b16      	ldr	r3, [pc, #88]	@ (80016fc <MX_SPI2_Init+0x74>)
 80016a4:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 80016a8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016aa:	4b14      	ldr	r3, [pc, #80]	@ (80016fc <MX_SPI2_Init+0x74>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016b0:	4b12      	ldr	r3, [pc, #72]	@ (80016fc <MX_SPI2_Init+0x74>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80016b6:	4b11      	ldr	r3, [pc, #68]	@ (80016fc <MX_SPI2_Init+0x74>)
 80016b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016bc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80016be:	4b0f      	ldr	r3, [pc, #60]	@ (80016fc <MX_SPI2_Init+0x74>)
 80016c0:	2238      	movs	r2, #56	@ 0x38
 80016c2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016c4:	4b0d      	ldr	r3, [pc, #52]	@ (80016fc <MX_SPI2_Init+0x74>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016ca:	4b0c      	ldr	r3, [pc, #48]	@ (80016fc <MX_SPI2_Init+0x74>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016d0:	4b0a      	ldr	r3, [pc, #40]	@ (80016fc <MX_SPI2_Init+0x74>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80016d6:	4b09      	ldr	r3, [pc, #36]	@ (80016fc <MX_SPI2_Init+0x74>)
 80016d8:	2207      	movs	r2, #7
 80016da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016dc:	4b07      	ldr	r3, [pc, #28]	@ (80016fc <MX_SPI2_Init+0x74>)
 80016de:	2200      	movs	r2, #0
 80016e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80016e2:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <MX_SPI2_Init+0x74>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016e8:	4804      	ldr	r0, [pc, #16]	@ (80016fc <MX_SPI2_Init+0x74>)
 80016ea:	f003 f991 	bl	8004a10 <HAL_SPI_Init>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 80016f4:	f000 fce4 	bl	80020c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	200002ac 	.word	0x200002ac
 8001700:	40003800 	.word	0x40003800

08001704 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b088      	sub	sp, #32
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800170a:	f107 0310 	add.w	r3, r7, #16
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001722:	4b1e      	ldr	r3, [pc, #120]	@ (800179c <MX_TIM2_Init+0x98>)
 8001724:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001728:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 53999;
 800172a:	4b1c      	ldr	r3, [pc, #112]	@ (800179c <MX_TIM2_Init+0x98>)
 800172c:	f24d 22ef 	movw	r2, #53999	@ 0xd2ef
 8001730:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001732:	4b1a      	ldr	r3, [pc, #104]	@ (800179c <MX_TIM2_Init+0x98>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001738:	4b18      	ldr	r3, [pc, #96]	@ (800179c <MX_TIM2_Init+0x98>)
 800173a:	f04f 32ff 	mov.w	r2, #4294967295
 800173e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001740:	4b16      	ldr	r3, [pc, #88]	@ (800179c <MX_TIM2_Init+0x98>)
 8001742:	2200      	movs	r2, #0
 8001744:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001746:	4b15      	ldr	r3, [pc, #84]	@ (800179c <MX_TIM2_Init+0x98>)
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800174c:	4813      	ldr	r0, [pc, #76]	@ (800179c <MX_TIM2_Init+0x98>)
 800174e:	f003 fa0a 	bl	8004b66 <HAL_TIM_Base_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001758:	f000 fcb2 	bl	80020c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800175c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001760:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001762:	f107 0310 	add.w	r3, r7, #16
 8001766:	4619      	mov	r1, r3
 8001768:	480c      	ldr	r0, [pc, #48]	@ (800179c <MX_TIM2_Init+0x98>)
 800176a:	f003 fac3 	bl	8004cf4 <HAL_TIM_ConfigClockSource>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001774:	f000 fca4 	bl	80020c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001778:	2300      	movs	r3, #0
 800177a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800177c:	2300      	movs	r3, #0
 800177e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	4619      	mov	r1, r3
 8001784:	4805      	ldr	r0, [pc, #20]	@ (800179c <MX_TIM2_Init+0x98>)
 8001786:	f003 fcb9 	bl	80050fc <HAL_TIMEx_MasterConfigSynchronization>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001790:	f000 fc96 	bl	80020c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001794:	bf00      	nop
 8001796:	3720      	adds	r7, #32
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20000310 	.word	0x20000310

080017a0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b088      	sub	sp, #32
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017a6:	f107 0310 	add.w	r3, r7, #16
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]
 80017b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b4:	1d3b      	adds	r3, r7, #4
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80017be:	4b1d      	ldr	r3, [pc, #116]	@ (8001834 <MX_TIM5_Init+0x94>)
 80017c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001838 <MX_TIM5_Init+0x98>)
 80017c2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 53;
 80017c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001834 <MX_TIM5_Init+0x94>)
 80017c6:	2235      	movs	r2, #53	@ 0x35
 80017c8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001834 <MX_TIM5_Init+0x94>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80017d0:	4b18      	ldr	r3, [pc, #96]	@ (8001834 <MX_TIM5_Init+0x94>)
 80017d2:	f04f 32ff 	mov.w	r2, #4294967295
 80017d6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d8:	4b16      	ldr	r3, [pc, #88]	@ (8001834 <MX_TIM5_Init+0x94>)
 80017da:	2200      	movs	r2, #0
 80017dc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017de:	4b15      	ldr	r3, [pc, #84]	@ (8001834 <MX_TIM5_Init+0x94>)
 80017e0:	2280      	movs	r2, #128	@ 0x80
 80017e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80017e4:	4813      	ldr	r0, [pc, #76]	@ (8001834 <MX_TIM5_Init+0x94>)
 80017e6:	f003 f9be 	bl	8004b66 <HAL_TIM_Base_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80017f0:	f000 fc66 	bl	80020c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80017fa:	f107 0310 	add.w	r3, r7, #16
 80017fe:	4619      	mov	r1, r3
 8001800:	480c      	ldr	r0, [pc, #48]	@ (8001834 <MX_TIM5_Init+0x94>)
 8001802:	f003 fa77 	bl	8004cf4 <HAL_TIM_ConfigClockSource>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800180c:	f000 fc58 	bl	80020c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001810:	2300      	movs	r3, #0
 8001812:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001814:	2300      	movs	r3, #0
 8001816:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001818:	1d3b      	adds	r3, r7, #4
 800181a:	4619      	mov	r1, r3
 800181c:	4805      	ldr	r0, [pc, #20]	@ (8001834 <MX_TIM5_Init+0x94>)
 800181e:	f003 fc6d 	bl	80050fc <HAL_TIMEx_MasterConfigSynchronization>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001828:	f000 fc4a 	bl	80020c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800182c:	bf00      	nop
 800182e:	3720      	adds	r7, #32
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	2000035c 	.word	0x2000035c
 8001838:	40000c00 	.word	0x40000c00

0800183c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001840:	4b14      	ldr	r3, [pc, #80]	@ (8001894 <MX_USART1_UART_Init+0x58>)
 8001842:	4a15      	ldr	r2, [pc, #84]	@ (8001898 <MX_USART1_UART_Init+0x5c>)
 8001844:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001846:	4b13      	ldr	r3, [pc, #76]	@ (8001894 <MX_USART1_UART_Init+0x58>)
 8001848:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800184c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800184e:	4b11      	ldr	r3, [pc, #68]	@ (8001894 <MX_USART1_UART_Init+0x58>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001854:	4b0f      	ldr	r3, [pc, #60]	@ (8001894 <MX_USART1_UART_Init+0x58>)
 8001856:	2200      	movs	r2, #0
 8001858:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800185a:	4b0e      	ldr	r3, [pc, #56]	@ (8001894 <MX_USART1_UART_Init+0x58>)
 800185c:	2200      	movs	r2, #0
 800185e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001860:	4b0c      	ldr	r3, [pc, #48]	@ (8001894 <MX_USART1_UART_Init+0x58>)
 8001862:	220c      	movs	r2, #12
 8001864:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001866:	4b0b      	ldr	r3, [pc, #44]	@ (8001894 <MX_USART1_UART_Init+0x58>)
 8001868:	2200      	movs	r2, #0
 800186a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800186c:	4b09      	ldr	r3, [pc, #36]	@ (8001894 <MX_USART1_UART_Init+0x58>)
 800186e:	2200      	movs	r2, #0
 8001870:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001872:	4b08      	ldr	r3, [pc, #32]	@ (8001894 <MX_USART1_UART_Init+0x58>)
 8001874:	2200      	movs	r2, #0
 8001876:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001878:	4b06      	ldr	r3, [pc, #24]	@ (8001894 <MX_USART1_UART_Init+0x58>)
 800187a:	2200      	movs	r2, #0
 800187c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800187e:	4805      	ldr	r0, [pc, #20]	@ (8001894 <MX_USART1_UART_Init+0x58>)
 8001880:	f003 fcca 	bl	8005218 <HAL_UART_Init>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800188a:	f000 fc19 	bl	80020c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	200003a8 	.word	0x200003a8
 8001898:	40011000 	.word	0x40011000

0800189c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b090      	sub	sp, #64	@ 0x40
 80018a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	605a      	str	r2, [r3, #4]
 80018ac:	609a      	str	r2, [r3, #8]
 80018ae:	60da      	str	r2, [r3, #12]
 80018b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018b2:	4bae      	ldr	r3, [pc, #696]	@ (8001b6c <MX_GPIO_Init+0x2d0>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b6:	4aad      	ldr	r2, [pc, #692]	@ (8001b6c <MX_GPIO_Init+0x2d0>)
 80018b8:	f043 0310 	orr.w	r3, r3, #16
 80018bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018be:	4bab      	ldr	r3, [pc, #684]	@ (8001b6c <MX_GPIO_Init+0x2d0>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c2:	f003 0310 	and.w	r3, r3, #16
 80018c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80018ca:	4ba8      	ldr	r3, [pc, #672]	@ (8001b6c <MX_GPIO_Init+0x2d0>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ce:	4aa7      	ldr	r2, [pc, #668]	@ (8001b6c <MX_GPIO_Init+0x2d0>)
 80018d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d6:	4ba5      	ldr	r3, [pc, #660]	@ (8001b6c <MX_GPIO_Init+0x2d0>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018de:	627b      	str	r3, [r7, #36]	@ 0x24
 80018e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e2:	4ba2      	ldr	r3, [pc, #648]	@ (8001b6c <MX_GPIO_Init+0x2d0>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e6:	4aa1      	ldr	r2, [pc, #644]	@ (8001b6c <MX_GPIO_Init+0x2d0>)
 80018e8:	f043 0302 	orr.w	r3, r3, #2
 80018ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ee:	4b9f      	ldr	r3, [pc, #636]	@ (8001b6c <MX_GPIO_Init+0x2d0>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	623b      	str	r3, [r7, #32]
 80018f8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018fa:	4b9c      	ldr	r3, [pc, #624]	@ (8001b6c <MX_GPIO_Init+0x2d0>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	4a9b      	ldr	r2, [pc, #620]	@ (8001b6c <MX_GPIO_Init+0x2d0>)
 8001900:	f043 0308 	orr.w	r3, r3, #8
 8001904:	6313      	str	r3, [r2, #48]	@ 0x30
 8001906:	4b99      	ldr	r3, [pc, #612]	@ (8001b6c <MX_GPIO_Init+0x2d0>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	f003 0308 	and.w	r3, r3, #8
 800190e:	61fb      	str	r3, [r7, #28]
 8001910:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001912:	4b96      	ldr	r3, [pc, #600]	@ (8001b6c <MX_GPIO_Init+0x2d0>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001916:	4a95      	ldr	r2, [pc, #596]	@ (8001b6c <MX_GPIO_Init+0x2d0>)
 8001918:	f043 0304 	orr.w	r3, r3, #4
 800191c:	6313      	str	r3, [r2, #48]	@ 0x30
 800191e:	4b93      	ldr	r3, [pc, #588]	@ (8001b6c <MX_GPIO_Init+0x2d0>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001922:	f003 0304 	and.w	r3, r3, #4
 8001926:	61bb      	str	r3, [r7, #24]
 8001928:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800192a:	4b90      	ldr	r3, [pc, #576]	@ (8001b6c <MX_GPIO_Init+0x2d0>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192e:	4a8f      	ldr	r2, [pc, #572]	@ (8001b6c <MX_GPIO_Init+0x2d0>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	6313      	str	r3, [r2, #48]	@ 0x30
 8001936:	4b8d      	ldr	r3, [pc, #564]	@ (8001b6c <MX_GPIO_Init+0x2d0>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	617b      	str	r3, [r7, #20]
 8001940:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001942:	4b8a      	ldr	r3, [pc, #552]	@ (8001b6c <MX_GPIO_Init+0x2d0>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001946:	4a89      	ldr	r2, [pc, #548]	@ (8001b6c <MX_GPIO_Init+0x2d0>)
 8001948:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800194c:	6313      	str	r3, [r2, #48]	@ 0x30
 800194e:	4b87      	ldr	r3, [pc, #540]	@ (8001b6c <MX_GPIO_Init+0x2d0>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001952:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800195a:	4b84      	ldr	r3, [pc, #528]	@ (8001b6c <MX_GPIO_Init+0x2d0>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195e:	4a83      	ldr	r2, [pc, #524]	@ (8001b6c <MX_GPIO_Init+0x2d0>)
 8001960:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001964:	6313      	str	r3, [r2, #48]	@ 0x30
 8001966:	4b81      	ldr	r3, [pc, #516]	@ (8001b6c <MX_GPIO_Init+0x2d0>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001972:	4b7e      	ldr	r3, [pc, #504]	@ (8001b6c <MX_GPIO_Init+0x2d0>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001976:	4a7d      	ldr	r2, [pc, #500]	@ (8001b6c <MX_GPIO_Init+0x2d0>)
 8001978:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800197c:	6313      	str	r3, [r2, #48]	@ 0x30
 800197e:	4b7b      	ldr	r3, [pc, #492]	@ (8001b6c <MX_GPIO_Init+0x2d0>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001982:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001986:	60bb      	str	r3, [r7, #8]
 8001988:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800198a:	4b78      	ldr	r3, [pc, #480]	@ (8001b6c <MX_GPIO_Init+0x2d0>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198e:	4a77      	ldr	r2, [pc, #476]	@ (8001b6c <MX_GPIO_Init+0x2d0>)
 8001990:	f043 0320 	orr.w	r3, r3, #32
 8001994:	6313      	str	r3, [r2, #48]	@ 0x30
 8001996:	4b75      	ldr	r3, [pc, #468]	@ (8001b6c <MX_GPIO_Init+0x2d0>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199a:	f003 0320 	and.w	r3, r3, #32
 800199e:	607b      	str	r3, [r7, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019a2:	4b72      	ldr	r3, [pc, #456]	@ (8001b6c <MX_GPIO_Init+0x2d0>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	4a71      	ldr	r2, [pc, #452]	@ (8001b6c <MX_GPIO_Init+0x2d0>)
 80019a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ae:	4b6f      	ldr	r3, [pc, #444]	@ (8001b6c <MX_GPIO_Init+0x2d0>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019b6:	603b      	str	r3, [r7, #0]
 80019b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80019ba:	2201      	movs	r2, #1
 80019bc:	2120      	movs	r1, #32
 80019be:	486c      	ldr	r0, [pc, #432]	@ (8001b70 <MX_GPIO_Init+0x2d4>)
 80019c0:	f001 fe1a 	bl	80035f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 80019c4:	2200      	movs	r2, #0
 80019c6:	f241 010c 	movw	r1, #4108	@ 0x100c
 80019ca:	486a      	ldr	r0, [pc, #424]	@ (8001b74 <MX_GPIO_Init+0x2d8>)
 80019cc:	f001 fe14 	bl	80035f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80019d0:	2200      	movs	r2, #0
 80019d2:	2108      	movs	r1, #8
 80019d4:	4868      	ldr	r0, [pc, #416]	@ (8001b78 <MX_GPIO_Init+0x2dc>)
 80019d6:	f001 fe0f 	bl	80035f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80019da:	2200      	movs	r2, #0
 80019dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019e0:	4866      	ldr	r0, [pc, #408]	@ (8001b7c <MX_GPIO_Init+0x2e0>)
 80019e2:	f001 fe09 	bl	80035f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80019e6:	2201      	movs	r2, #1
 80019e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019ec:	4864      	ldr	r0, [pc, #400]	@ (8001b80 <MX_GPIO_Init+0x2e4>)
 80019ee:	f001 fe03 	bl	80035f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80019f2:	2200      	movs	r2, #0
 80019f4:	21c8      	movs	r1, #200	@ 0xc8
 80019f6:	4863      	ldr	r0, [pc, #396]	@ (8001b84 <MX_GPIO_Init+0x2e8>)
 80019f8:	f001 fdfe 	bl	80035f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 80019fc:	2310      	movs	r3, #16
 80019fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a00:	2302      	movs	r3, #2
 8001a02:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001a0c:	230e      	movs	r3, #14
 8001a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001a10:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a14:	4619      	mov	r1, r3
 8001a16:	485c      	ldr	r0, [pc, #368]	@ (8001b88 <MX_GPIO_Init+0x2ec>)
 8001a18:	f001 fc42 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001a1c:	2308      	movs	r3, #8
 8001a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a20:	2300      	movs	r3, #0
 8001a22:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a28:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4856      	ldr	r0, [pc, #344]	@ (8001b88 <MX_GPIO_Init+0x2ec>)
 8001a30:	f001 fc36 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001a34:	2304      	movs	r3, #4
 8001a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a40:	2303      	movs	r3, #3
 8001a42:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001a44:	2309      	movs	r3, #9
 8001a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001a48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	484e      	ldr	r0, [pc, #312]	@ (8001b88 <MX_GPIO_Init+0x2ec>)
 8001a50:	f001 fc26 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001a54:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8001a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a62:	2303      	movs	r3, #3
 8001a64:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a66:	230b      	movs	r3, #11
 8001a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4844      	ldr	r0, [pc, #272]	@ (8001b84 <MX_GPIO_Init+0x2e8>)
 8001a72:	f001 fc15 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8001a76:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a84:	2303      	movs	r3, #3
 8001a86:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a88:	230c      	movs	r3, #12
 8001a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a90:	4619      	mov	r1, r3
 8001a92:	483d      	ldr	r0, [pc, #244]	@ (8001b88 <MX_GPIO_Init+0x2ec>)
 8001a94:	f001 fc04 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001a98:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8001a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001aaa:	230a      	movs	r3, #10
 8001aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4835      	ldr	r0, [pc, #212]	@ (8001b8c <MX_GPIO_Init+0x2f0>)
 8001ab6:	f001 fbf3 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8001aba:	2310      	movs	r3, #16
 8001abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001aca:	2302      	movs	r3, #2
 8001acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8001ace:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	482d      	ldr	r0, [pc, #180]	@ (8001b8c <MX_GPIO_Init+0x2f0>)
 8001ad6:	f001 fbe3 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001ada:	2380      	movs	r3, #128	@ 0x80
 8001adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001aea:	2308      	movs	r3, #8
 8001aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001aee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001af2:	4619      	mov	r1, r3
 8001af4:	481e      	ldr	r0, [pc, #120]	@ (8001b70 <MX_GPIO_Init+0x2d4>)
 8001af6:	f001 fbd3 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001afa:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b00:	2302      	movs	r3, #2
 8001b02:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001b0c:	230c      	movs	r3, #12
 8001b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b10:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b14:	4619      	mov	r1, r3
 8001b16:	481e      	ldr	r0, [pc, #120]	@ (8001b90 <MX_GPIO_Init+0x2f4>)
 8001b18:	f001 fbc2 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001b1c:	2360      	movs	r3, #96	@ 0x60
 8001b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b20:	2302      	movs	r3, #2
 8001b22:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001b2c:	230d      	movs	r3, #13
 8001b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b30:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b34:	4619      	mov	r1, r3
 8001b36:	4814      	ldr	r0, [pc, #80]	@ (8001b88 <MX_GPIO_Init+0x2ec>)
 8001b38:	f001 fbb2 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001b3c:	2340      	movs	r3, #64	@ 0x40
 8001b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b40:	2302      	movs	r3, #2
 8001b42:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001b4c:	230a      	movs	r3, #10
 8001b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001b50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b54:	4619      	mov	r1, r3
 8001b56:	480d      	ldr	r0, [pc, #52]	@ (8001b8c <MX_GPIO_Init+0x2f0>)
 8001b58:	f001 fba2 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8001b5c:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b62:	2302      	movs	r3, #2
 8001b64:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	e014      	b.n	8001b94 <MX_GPIO_Init+0x2f8>
 8001b6a:	bf00      	nop
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40020c00 	.word	0x40020c00
 8001b74:	40022000 	.word	0x40022000
 8001b78:	40022800 	.word	0x40022800
 8001b7c:	40021c00 	.word	0x40021c00
 8001b80:	40020000 	.word	0x40020000
 8001b84:	40021800 	.word	0x40021800
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	40020400 	.word	0x40020400
 8001b90:	40020800 	.word	0x40020800
 8001b94:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b96:	2303      	movs	r3, #3
 8001b98:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b9a:	230c      	movs	r3, #12
 8001b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b9e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	48bc      	ldr	r0, [pc, #752]	@ (8001e98 <MX_GPIO_Init+0x5fc>)
 8001ba6:	f001 fb7b 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001baa:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8001bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001bbc:	230e      	movs	r3, #14
 8001bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001bc0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	48b5      	ldr	r0, [pc, #724]	@ (8001e9c <MX_GPIO_Init+0x600>)
 8001bc8:	f001 fb6a 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001bcc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001bda:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bde:	4619      	mov	r1, r3
 8001be0:	48ae      	ldr	r0, [pc, #696]	@ (8001e9c <MX_GPIO_Init+0x600>)
 8001be2:	f001 fb5d 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001be6:	2340      	movs	r3, #64	@ 0x40
 8001be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001bea:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001bee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001bf4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	48a9      	ldr	r0, [pc, #676]	@ (8001ea0 <MX_GPIO_Init+0x604>)
 8001bfc:	f001 fb50 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8001c00:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c06:	2302      	movs	r3, #2
 8001c08:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c12:	230c      	movs	r3, #12
 8001c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	48a0      	ldr	r0, [pc, #640]	@ (8001ea0 <MX_GPIO_Init+0x604>)
 8001c1e:	f001 fb3f 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8001c22:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c30:	2303      	movs	r3, #3
 8001c32:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c34:	230a      	movs	r3, #10
 8001c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4899      	ldr	r0, [pc, #612]	@ (8001ea4 <MX_GPIO_Init+0x608>)
 8001c40:	f001 fb2e 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001c44:	23f0      	movs	r3, #240	@ 0xf0
 8001c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c50:	2300      	movs	r3, #0
 8001c52:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001c54:	230a      	movs	r3, #10
 8001c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001c58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4892      	ldr	r0, [pc, #584]	@ (8001ea8 <MX_GPIO_Init+0x60c>)
 8001c60:	f001 fb1e 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001c64:	23f7      	movs	r3, #247	@ 0xf7
 8001c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c70:	2300      	movs	r3, #0
 8001c72:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c74:	230e      	movs	r3, #14
 8001c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001c78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	488b      	ldr	r0, [pc, #556]	@ (8001eac <MX_GPIO_Init+0x610>)
 8001c80:	f001 fb0e 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001c84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c92:	2300      	movs	r3, #0
 8001c94:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001c96:	2309      	movs	r3, #9
 8001c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001c9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	487d      	ldr	r0, [pc, #500]	@ (8001e98 <MX_GPIO_Init+0x5fc>)
 8001ca2:	f001 fafd 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001ca6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cac:	2302      	movs	r3, #2
 8001cae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001cb8:	230a      	movs	r3, #10
 8001cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001cbc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4875      	ldr	r0, [pc, #468]	@ (8001e98 <MX_GPIO_Init+0x5fc>)
 8001cc4:	f001 faec 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001cc8:	2320      	movs	r3, #32
 8001cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001cd8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4870      	ldr	r0, [pc, #448]	@ (8001ea0 <MX_GPIO_Init+0x604>)
 8001ce0:	f001 fade 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001ce4:	2308      	movs	r3, #8
 8001ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001cf4:	230d      	movs	r3, #13
 8001cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001cf8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4868      	ldr	r0, [pc, #416]	@ (8001ea0 <MX_GPIO_Init+0x604>)
 8001d00:	f001 face 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8001d04:	f241 030c 	movw	r3, #4108	@ 0x100c
 8001d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d12:	2300      	movs	r3, #0
 8001d14:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001d16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4862      	ldr	r0, [pc, #392]	@ (8001ea8 <MX_GPIO_Init+0x60c>)
 8001d1e:	f001 fabf 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001d22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001d30:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d34:	4619      	mov	r1, r3
 8001d36:	485e      	ldr	r0, [pc, #376]	@ (8001eb0 <MX_GPIO_Init+0x614>)
 8001d38:	f001 fab2 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8001d3c:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d42:	2302      	movs	r3, #2
 8001d44:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d4e:	230c      	movs	r3, #12
 8001d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d56:	4619      	mov	r1, r3
 8001d58:	4856      	ldr	r0, [pc, #344]	@ (8001eb4 <MX_GPIO_Init+0x618>)
 8001d5a:	f001 faa1 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001d5e:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8001d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d64:	2302      	movs	r3, #2
 8001d66:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d70:	230e      	movs	r3, #14
 8001d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001d74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d78:	4619      	mov	r1, r3
 8001d7a:	484b      	ldr	r0, [pc, #300]	@ (8001ea8 <MX_GPIO_Init+0x60c>)
 8001d7c:	f001 fa90 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001d80:	2308      	movs	r3, #8
 8001d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d84:	2301      	movs	r3, #1
 8001d86:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001d90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d94:	4619      	mov	r1, r3
 8001d96:	4845      	ldr	r0, [pc, #276]	@ (8001eac <MX_GPIO_Init+0x610>)
 8001d98:	f001 fa82 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001d9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da2:	2302      	movs	r3, #2
 8001da4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001daa:	2300      	movs	r3, #0
 8001dac:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001dae:	230d      	movs	r3, #13
 8001db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001db2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001db6:	4619      	mov	r1, r3
 8001db8:	4837      	ldr	r0, [pc, #220]	@ (8001e98 <MX_GPIO_Init+0x5fc>)
 8001dba:	f001 fa71 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001dbe:	2310      	movs	r3, #16
 8001dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001dca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4833      	ldr	r0, [pc, #204]	@ (8001ea0 <MX_GPIO_Init+0x604>)
 8001dd2:	f001 fa65 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8001dd6:	2304      	movs	r3, #4
 8001dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de2:	2303      	movs	r3, #3
 8001de4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001de6:	230c      	movs	r3, #12
 8001de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8001dea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001dee:	4619      	mov	r1, r3
 8001df0:	482b      	ldr	r0, [pc, #172]	@ (8001ea0 <MX_GPIO_Init+0x604>)
 8001df2:	f001 fa55 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001df6:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e08:	4619      	mov	r1, r3
 8001e0a:	482b      	ldr	r0, [pc, #172]	@ (8001eb8 <MX_GPIO_Init+0x61c>)
 8001e0c:	f001 fa48 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001e10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e16:	2301      	movs	r3, #1
 8001e18:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001e22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e26:	4619      	mov	r1, r3
 8001e28:	4823      	ldr	r0, [pc, #140]	@ (8001eb8 <MX_GPIO_Init+0x61c>)
 8001e2a:	f001 fa39 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001e2e:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8001e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e34:	2302      	movs	r3, #2
 8001e36:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001e40:	230d      	movs	r3, #13
 8001e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e48:	4619      	mov	r1, r3
 8001e4a:	481b      	ldr	r0, [pc, #108]	@ (8001eb8 <MX_GPIO_Init+0x61c>)
 8001e4c:	f001 fa28 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8001e50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e56:	2301      	movs	r3, #1
 8001e58:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001e62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e66:	4619      	mov	r1, r3
 8001e68:	480e      	ldr	r0, [pc, #56]	@ (8001ea4 <MX_GPIO_Init+0x608>)
 8001e6a:	f001 fa19 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001e6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001e74:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001e78:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001e7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e82:	4619      	mov	r1, r3
 8001e84:	4808      	ldr	r0, [pc, #32]	@ (8001ea8 <MX_GPIO_Init+0x60c>)
 8001e86:	f001 fa0b 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8001e8a:	23c0      	movs	r3, #192	@ 0xc0
 8001e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e96:	e011      	b.n	8001ebc <MX_GPIO_Init+0x620>
 8001e98:	40021800 	.word	0x40021800
 8001e9c:	40022400 	.word	0x40022400
 8001ea0:	40020c00 	.word	0x40020c00
 8001ea4:	40020000 	.word	0x40020000
 8001ea8:	40022000 	.word	0x40022000
 8001eac:	40022800 	.word	0x40022800
 8001eb0:	40020800 	.word	0x40020800
 8001eb4:	40021400 	.word	0x40021400
 8001eb8:	40021c00 	.word	0x40021c00
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001ec0:	2308      	movs	r3, #8
 8001ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ec4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4877      	ldr	r0, [pc, #476]	@ (80020a8 <MX_GPIO_Init+0x80c>)
 8001ecc:	f001 f9e8 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001ed0:	2310      	movs	r3, #16
 8001ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001edc:	2303      	movs	r3, #3
 8001ede:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001ee0:	230a      	movs	r3, #10
 8001ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001ee4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4870      	ldr	r0, [pc, #448]	@ (80020ac <MX_GPIO_Init+0x810>)
 8001eec:	f001 f9d8 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8001ef0:	2328      	movs	r3, #40	@ 0x28
 8001ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001efc:	2303      	movs	r3, #3
 8001efe:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f00:	230c      	movs	r3, #12
 8001f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4868      	ldr	r0, [pc, #416]	@ (80020ac <MX_GPIO_Init+0x810>)
 8001f0c:	f001 f9c8 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001f10:	23c8      	movs	r3, #200	@ 0xc8
 8001f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f14:	2301      	movs	r3, #1
 8001f16:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f24:	4619      	mov	r1, r3
 8001f26:	4862      	ldr	r0, [pc, #392]	@ (80020b0 <MX_GPIO_Init+0x814>)
 8001f28:	f001 f9ba 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8001f2c:	2308      	movs	r3, #8
 8001f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f30:	2302      	movs	r3, #2
 8001f32:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f3c:	230c      	movs	r3, #12
 8001f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001f40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f44:	4619      	mov	r1, r3
 8001f46:	4858      	ldr	r0, [pc, #352]	@ (80020a8 <MX_GPIO_Init+0x80c>)
 8001f48:	f001 f9aa 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001f4c:	2305      	movs	r3, #5
 8001f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f50:	2302      	movs	r3, #2
 8001f52:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f54:	2300      	movs	r3, #0
 8001f56:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001f5c:	230a      	movs	r3, #10
 8001f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f64:	4619      	mov	r1, r3
 8001f66:	4850      	ldr	r0, [pc, #320]	@ (80020a8 <MX_GPIO_Init+0x80c>)
 8001f68:	f001 f99a 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001f6c:	2332      	movs	r3, #50	@ 0x32
 8001f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f70:	2302      	movs	r3, #2
 8001f72:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f7c:	230b      	movs	r3, #11
 8001f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f84:	4619      	mov	r1, r3
 8001f86:	4848      	ldr	r0, [pc, #288]	@ (80020a8 <MX_GPIO_Init+0x80c>)
 8001f88:	f001 f98a 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f8c:	2304      	movs	r3, #4
 8001f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f90:	2302      	movs	r3, #2
 8001f92:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001f9c:	2309      	movs	r3, #9
 8001f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4843      	ldr	r0, [pc, #268]	@ (80020b4 <MX_GPIO_Init+0x818>)
 8001fa8:	f001 f97a 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001fac:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001fbe:	2309      	movs	r3, #9
 8001fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fc2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	483b      	ldr	r0, [pc, #236]	@ (80020b8 <MX_GPIO_Init+0x81c>)
 8001fca:	f001 f969 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001fce:	2304      	movs	r3, #4
 8001fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001fda:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4833      	ldr	r0, [pc, #204]	@ (80020b0 <MX_GPIO_Init+0x814>)
 8001fe2:	f001 f95d 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001fe6:	2386      	movs	r3, #134	@ 0x86
 8001fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fea:	2302      	movs	r3, #2
 8001fec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ff6:	230b      	movs	r3, #11
 8001ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ffe:	4619      	mov	r1, r3
 8002000:	482e      	ldr	r0, [pc, #184]	@ (80020bc <MX_GPIO_Init+0x820>)
 8002002:	f001 f94d 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002006:	2301      	movs	r3, #1
 8002008:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800200a:	2303      	movs	r3, #3
 800200c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200e:	2300      	movs	r3, #0
 8002010:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002012:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002016:	4619      	mov	r1, r3
 8002018:	4828      	ldr	r0, [pc, #160]	@ (80020bc <MX_GPIO_Init+0x820>)
 800201a:	f001 f941 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800201e:	2350      	movs	r3, #80	@ 0x50
 8002020:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002022:	2302      	movs	r3, #2
 8002024:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202a:	2300      	movs	r3, #0
 800202c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800202e:	230d      	movs	r3, #13
 8002030:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002032:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002036:	4619      	mov	r1, r3
 8002038:	4820      	ldr	r0, [pc, #128]	@ (80020bc <MX_GPIO_Init+0x820>)
 800203a:	f001 f931 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800203e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002042:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002044:	2312      	movs	r3, #18
 8002046:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204c:	2303      	movs	r3, #3
 800204e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002050:	2304      	movs	r3, #4
 8002052:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002054:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002058:	4619      	mov	r1, r3
 800205a:	4814      	ldr	r0, [pc, #80]	@ (80020ac <MX_GPIO_Init+0x810>)
 800205c:	f001 f920 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002060:	2328      	movs	r3, #40	@ 0x28
 8002062:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002064:	2302      	movs	r3, #2
 8002066:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002068:	2300      	movs	r3, #0
 800206a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800206c:	2303      	movs	r3, #3
 800206e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002070:	230a      	movs	r3, #10
 8002072:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002074:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002078:	4619      	mov	r1, r3
 800207a:	4810      	ldr	r0, [pc, #64]	@ (80020bc <MX_GPIO_Init+0x820>)
 800207c:	f001 f910 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002080:	2340      	movs	r3, #64	@ 0x40
 8002082:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002084:	2302      	movs	r3, #2
 8002086:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208c:	2300      	movs	r3, #0
 800208e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002090:	2309      	movs	r3, #9
 8002092:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002094:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002098:	4619      	mov	r1, r3
 800209a:	4804      	ldr	r0, [pc, #16]	@ (80020ac <MX_GPIO_Init+0x810>)
 800209c:	f001 f900 	bl	80032a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020a0:	bf00      	nop
 80020a2:	3740      	adds	r7, #64	@ 0x40
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40020800 	.word	0x40020800
 80020ac:	40021c00 	.word	0x40021c00
 80020b0:	40021800 	.word	0x40021800
 80020b4:	40020400 	.word	0x40020400
 80020b8:	40020c00 	.word	0x40020c00
 80020bc:	40020000 	.word	0x40020000

080020c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020c4:	b672      	cpsid	i
}
 80020c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020c8:	bf00      	nop
 80020ca:	e7fd      	b.n	80020c8 <Error_Handler+0x8>

080020cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80020d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002110 <HAL_MspInit+0x44>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d6:	4a0e      	ldr	r2, [pc, #56]	@ (8002110 <HAL_MspInit+0x44>)
 80020d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80020de:	4b0c      	ldr	r3, [pc, #48]	@ (8002110 <HAL_MspInit+0x44>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020e6:	607b      	str	r3, [r7, #4]
 80020e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ea:	4b09      	ldr	r3, [pc, #36]	@ (8002110 <HAL_MspInit+0x44>)
 80020ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ee:	4a08      	ldr	r2, [pc, #32]	@ (8002110 <HAL_MspInit+0x44>)
 80020f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80020f6:	4b06      	ldr	r3, [pc, #24]	@ (8002110 <HAL_MspInit+0x44>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020fe:	603b      	str	r3, [r7, #0]
 8002100:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	40023800 	.word	0x40023800

08002114 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b08a      	sub	sp, #40	@ 0x28
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211c:	f107 0314 	add.w	r3, r7, #20
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
 800212a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a21      	ldr	r2, [pc, #132]	@ (80021b8 <HAL_ADC_MspInit+0xa4>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d13c      	bne.n	80021b0 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002136:	4b21      	ldr	r3, [pc, #132]	@ (80021bc <HAL_ADC_MspInit+0xa8>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800213a:	4a20      	ldr	r2, [pc, #128]	@ (80021bc <HAL_ADC_MspInit+0xa8>)
 800213c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002140:	6453      	str	r3, [r2, #68]	@ 0x44
 8002142:	4b1e      	ldr	r3, [pc, #120]	@ (80021bc <HAL_ADC_MspInit+0xa8>)
 8002144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002146:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800214a:	613b      	str	r3, [r7, #16]
 800214c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800214e:	4b1b      	ldr	r3, [pc, #108]	@ (80021bc <HAL_ADC_MspInit+0xa8>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002152:	4a1a      	ldr	r2, [pc, #104]	@ (80021bc <HAL_ADC_MspInit+0xa8>)
 8002154:	f043 0320 	orr.w	r3, r3, #32
 8002158:	6313      	str	r3, [r2, #48]	@ 0x30
 800215a:	4b18      	ldr	r3, [pc, #96]	@ (80021bc <HAL_ADC_MspInit+0xa8>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215e:	f003 0320 	and.w	r3, r3, #32
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002166:	4b15      	ldr	r3, [pc, #84]	@ (80021bc <HAL_ADC_MspInit+0xa8>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216a:	4a14      	ldr	r2, [pc, #80]	@ (80021bc <HAL_ADC_MspInit+0xa8>)
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	6313      	str	r3, [r2, #48]	@ 0x30
 8002172:	4b12      	ldr	r3, [pc, #72]	@ (80021bc <HAL_ADC_MspInit+0xa8>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	60bb      	str	r3, [r7, #8]
 800217c:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 800217e:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8002182:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002184:	2303      	movs	r3, #3
 8002186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002188:	2300      	movs	r3, #0
 800218a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800218c:	f107 0314 	add.w	r3, r7, #20
 8002190:	4619      	mov	r1, r3
 8002192:	480b      	ldr	r0, [pc, #44]	@ (80021c0 <HAL_ADC_MspInit+0xac>)
 8002194:	f001 f884 	bl	80032a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002198:	2301      	movs	r3, #1
 800219a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800219c:	2303      	movs	r3, #3
 800219e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a4:	f107 0314 	add.w	r3, r7, #20
 80021a8:	4619      	mov	r1, r3
 80021aa:	4806      	ldr	r0, [pc, #24]	@ (80021c4 <HAL_ADC_MspInit+0xb0>)
 80021ac:	f001 f878 	bl	80032a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80021b0:	bf00      	nop
 80021b2:	3728      	adds	r7, #40	@ 0x28
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40012200 	.word	0x40012200
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40021400 	.word	0x40021400
 80021c4:	40020000 	.word	0x40020000

080021c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b0aa      	sub	sp, #168	@ 0xa8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	60da      	str	r2, [r3, #12]
 80021de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021e0:	f107 0310 	add.w	r3, r7, #16
 80021e4:	2284      	movs	r2, #132	@ 0x84
 80021e6:	2100      	movs	r1, #0
 80021e8:	4618      	mov	r0, r3
 80021ea:	f004 fa66 	bl	80066ba <memset>
  if(hi2c->Instance==I2C1)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a22      	ldr	r2, [pc, #136]	@ (800227c <HAL_I2C_MspInit+0xb4>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d13c      	bne.n	8002272 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80021f8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80021fc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80021fe:	2300      	movs	r3, #0
 8002200:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002202:	f107 0310 	add.w	r3, r7, #16
 8002206:	4618      	mov	r0, r3
 8002208:	f002 f812 	bl	8004230 <HAL_RCCEx_PeriphCLKConfig>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002212:	f7ff ff55 	bl	80020c0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002216:	4b1a      	ldr	r3, [pc, #104]	@ (8002280 <HAL_I2C_MspInit+0xb8>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221a:	4a19      	ldr	r2, [pc, #100]	@ (8002280 <HAL_I2C_MspInit+0xb8>)
 800221c:	f043 0302 	orr.w	r3, r3, #2
 8002220:	6313      	str	r3, [r2, #48]	@ 0x30
 8002222:	4b17      	ldr	r3, [pc, #92]	@ (8002280 <HAL_I2C_MspInit+0xb8>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800222e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002232:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002236:	2312      	movs	r3, #18
 8002238:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002242:	2300      	movs	r3, #0
 8002244:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002248:	2304      	movs	r3, #4
 800224a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800224e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002252:	4619      	mov	r1, r3
 8002254:	480b      	ldr	r0, [pc, #44]	@ (8002284 <HAL_I2C_MspInit+0xbc>)
 8002256:	f001 f823 	bl	80032a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800225a:	4b09      	ldr	r3, [pc, #36]	@ (8002280 <HAL_I2C_MspInit+0xb8>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225e:	4a08      	ldr	r2, [pc, #32]	@ (8002280 <HAL_I2C_MspInit+0xb8>)
 8002260:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002264:	6413      	str	r3, [r2, #64]	@ 0x40
 8002266:	4b06      	ldr	r3, [pc, #24]	@ (8002280 <HAL_I2C_MspInit+0xb8>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800226e:	60bb      	str	r3, [r7, #8]
 8002270:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002272:	bf00      	nop
 8002274:	37a8      	adds	r7, #168	@ 0xa8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40005400 	.word	0x40005400
 8002280:	40023800 	.word	0x40023800
 8002284:	40020400 	.word	0x40020400

08002288 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b08a      	sub	sp, #40	@ 0x28
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002290:	f107 0314 	add.w	r3, r7, #20
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	60da      	str	r2, [r3, #12]
 800229e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a2e      	ldr	r2, [pc, #184]	@ (8002360 <HAL_SPI_MspInit+0xd8>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d155      	bne.n	8002356 <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022aa:	4b2e      	ldr	r3, [pc, #184]	@ (8002364 <HAL_SPI_MspInit+0xdc>)
 80022ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ae:	4a2d      	ldr	r2, [pc, #180]	@ (8002364 <HAL_SPI_MspInit+0xdc>)
 80022b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80022b6:	4b2b      	ldr	r3, [pc, #172]	@ (8002364 <HAL_SPI_MspInit+0xdc>)
 80022b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022be:	613b      	str	r3, [r7, #16]
 80022c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80022c2:	4b28      	ldr	r3, [pc, #160]	@ (8002364 <HAL_SPI_MspInit+0xdc>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c6:	4a27      	ldr	r2, [pc, #156]	@ (8002364 <HAL_SPI_MspInit+0xdc>)
 80022c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ce:	4b25      	ldr	r3, [pc, #148]	@ (8002364 <HAL_SPI_MspInit+0xdc>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022da:	4b22      	ldr	r3, [pc, #136]	@ (8002364 <HAL_SPI_MspInit+0xdc>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022de:	4a21      	ldr	r2, [pc, #132]	@ (8002364 <HAL_SPI_MspInit+0xdc>)
 80022e0:	f043 0302 	orr.w	r3, r3, #2
 80022e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002364 <HAL_SPI_MspInit+0xdc>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	60bb      	str	r3, [r7, #8]
 80022f0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80022f2:	2302      	movs	r3, #2
 80022f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f6:	2302      	movs	r3, #2
 80022f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fa:	2300      	movs	r3, #0
 80022fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022fe:	2302      	movs	r3, #2
 8002300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002302:	2305      	movs	r3, #5
 8002304:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8002306:	f107 0314 	add.w	r3, r7, #20
 800230a:	4619      	mov	r1, r3
 800230c:	4816      	ldr	r0, [pc, #88]	@ (8002368 <HAL_SPI_MspInit+0xe0>)
 800230e:	f000 ffc7 	bl	80032a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin;
 8002312:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002318:	2302      	movs	r3, #2
 800231a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002320:	2302      	movs	r3, #2
 8002322:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002324:	2305      	movs	r3, #5
 8002326:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_MISO_D12_GPIO_Port, &GPIO_InitStruct);
 8002328:	f107 0314 	add.w	r3, r7, #20
 800232c:	4619      	mov	r1, r3
 800232e:	480f      	ldr	r0, [pc, #60]	@ (800236c <HAL_SPI_MspInit+0xe4>)
 8002330:	f000 ffb6 	bl	80032a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MOSI_PWM_D11_Pin;
 8002334:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002338:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233a:	2302      	movs	r3, #2
 800233c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233e:	2300      	movs	r3, #0
 8002340:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002342:	2300      	movs	r3, #0
 8002344:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002346:	2305      	movs	r3, #5
 8002348:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_MOSI_PWM_D11_GPIO_Port, &GPIO_InitStruct);
 800234a:	f107 0314 	add.w	r3, r7, #20
 800234e:	4619      	mov	r1, r3
 8002350:	4806      	ldr	r0, [pc, #24]	@ (800236c <HAL_SPI_MspInit+0xe4>)
 8002352:	f000 ffa5 	bl	80032a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002356:	bf00      	nop
 8002358:	3728      	adds	r7, #40	@ 0x28
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40003800 	.word	0x40003800
 8002364:	40023800 	.word	0x40023800
 8002368:	40022000 	.word	0x40022000
 800236c:	40020400 	.word	0x40020400

08002370 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b08c      	sub	sp, #48	@ 0x30
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002378:	f107 031c 	add.w	r3, r7, #28
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	60da      	str	r2, [r3, #12]
 8002386:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002390:	d129      	bne.n	80023e6 <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002392:	4b2d      	ldr	r3, [pc, #180]	@ (8002448 <HAL_TIM_Base_MspInit+0xd8>)
 8002394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002396:	4a2c      	ldr	r2, [pc, #176]	@ (8002448 <HAL_TIM_Base_MspInit+0xd8>)
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	6413      	str	r3, [r2, #64]	@ 0x40
 800239e:	4b2a      	ldr	r3, [pc, #168]	@ (8002448 <HAL_TIM_Base_MspInit+0xd8>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	61bb      	str	r3, [r7, #24]
 80023a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023aa:	4b27      	ldr	r3, [pc, #156]	@ (8002448 <HAL_TIM_Base_MspInit+0xd8>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ae:	4a26      	ldr	r2, [pc, #152]	@ (8002448 <HAL_TIM_Base_MspInit+0xd8>)
 80023b0:	f043 0301 	orr.w	r3, r3, #1
 80023b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023b6:	4b24      	ldr	r3, [pc, #144]	@ (8002448 <HAL_TIM_Base_MspInit+0xd8>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	617b      	str	r3, [r7, #20]
 80023c0:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80023c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c8:	2302      	movs	r3, #2
 80023ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d0:	2300      	movs	r3, #0
 80023d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023d4:	2301      	movs	r3, #1
 80023d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80023d8:	f107 031c 	add.w	r3, r7, #28
 80023dc:	4619      	mov	r1, r3
 80023de:	481b      	ldr	r0, [pc, #108]	@ (800244c <HAL_TIM_Base_MspInit+0xdc>)
 80023e0:	f000 ff5e 	bl	80032a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80023e4:	e02c      	b.n	8002440 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM5)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a19      	ldr	r2, [pc, #100]	@ (8002450 <HAL_TIM_Base_MspInit+0xe0>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d127      	bne.n	8002440 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80023f0:	4b15      	ldr	r3, [pc, #84]	@ (8002448 <HAL_TIM_Base_MspInit+0xd8>)
 80023f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f4:	4a14      	ldr	r2, [pc, #80]	@ (8002448 <HAL_TIM_Base_MspInit+0xd8>)
 80023f6:	f043 0308 	orr.w	r3, r3, #8
 80023fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80023fc:	4b12      	ldr	r3, [pc, #72]	@ (8002448 <HAL_TIM_Base_MspInit+0xd8>)
 80023fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002400:	f003 0308 	and.w	r3, r3, #8
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002408:	4b0f      	ldr	r3, [pc, #60]	@ (8002448 <HAL_TIM_Base_MspInit+0xd8>)
 800240a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240c:	4a0e      	ldr	r2, [pc, #56]	@ (8002448 <HAL_TIM_Base_MspInit+0xd8>)
 800240e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002412:	6313      	str	r3, [r2, #48]	@ 0x30
 8002414:	4b0c      	ldr	r3, [pc, #48]	@ (8002448 <HAL_TIM_Base_MspInit+0xd8>)
 8002416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002418:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8002420:	2301      	movs	r3, #1
 8002422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002424:	2302      	movs	r3, #2
 8002426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002428:	2300      	movs	r3, #0
 800242a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242c:	2300      	movs	r3, #0
 800242e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002430:	2302      	movs	r3, #2
 8002432:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8002434:	f107 031c 	add.w	r3, r7, #28
 8002438:	4619      	mov	r1, r3
 800243a:	4806      	ldr	r0, [pc, #24]	@ (8002454 <HAL_TIM_Base_MspInit+0xe4>)
 800243c:	f000 ff30 	bl	80032a0 <HAL_GPIO_Init>
}
 8002440:	bf00      	nop
 8002442:	3730      	adds	r7, #48	@ 0x30
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40023800 	.word	0x40023800
 800244c:	40020000 	.word	0x40020000
 8002450:	40000c00 	.word	0x40000c00
 8002454:	40022000 	.word	0x40022000

08002458 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b0ac      	sub	sp, #176	@ 0xb0
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002460:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	605a      	str	r2, [r3, #4]
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	60da      	str	r2, [r3, #12]
 800246e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002470:	f107 0318 	add.w	r3, r7, #24
 8002474:	2284      	movs	r2, #132	@ 0x84
 8002476:	2100      	movs	r1, #0
 8002478:	4618      	mov	r0, r3
 800247a:	f004 f91e 	bl	80066ba <memset>
  if(huart->Instance==USART1)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a32      	ldr	r2, [pc, #200]	@ (800254c <HAL_UART_MspInit+0xf4>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d15c      	bne.n	8002542 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002488:	2340      	movs	r3, #64	@ 0x40
 800248a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800248c:	2300      	movs	r3, #0
 800248e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002490:	f107 0318 	add.w	r3, r7, #24
 8002494:	4618      	mov	r0, r3
 8002496:	f001 fecb 	bl	8004230 <HAL_RCCEx_PeriphCLKConfig>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80024a0:	f7ff fe0e 	bl	80020c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002550 <HAL_UART_MspInit+0xf8>)
 80024a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a8:	4a29      	ldr	r2, [pc, #164]	@ (8002550 <HAL_UART_MspInit+0xf8>)
 80024aa:	f043 0310 	orr.w	r3, r3, #16
 80024ae:	6453      	str	r3, [r2, #68]	@ 0x44
 80024b0:	4b27      	ldr	r3, [pc, #156]	@ (8002550 <HAL_UART_MspInit+0xf8>)
 80024b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024b4:	f003 0310 	and.w	r3, r3, #16
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024bc:	4b24      	ldr	r3, [pc, #144]	@ (8002550 <HAL_UART_MspInit+0xf8>)
 80024be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c0:	4a23      	ldr	r2, [pc, #140]	@ (8002550 <HAL_UART_MspInit+0xf8>)
 80024c2:	f043 0302 	orr.w	r3, r3, #2
 80024c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80024c8:	4b21      	ldr	r3, [pc, #132]	@ (8002550 <HAL_UART_MspInit+0xf8>)
 80024ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	613b      	str	r3, [r7, #16]
 80024d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d4:	4b1e      	ldr	r3, [pc, #120]	@ (8002550 <HAL_UART_MspInit+0xf8>)
 80024d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d8:	4a1d      	ldr	r2, [pc, #116]	@ (8002550 <HAL_UART_MspInit+0xf8>)
 80024da:	f043 0301 	orr.w	r3, r3, #1
 80024de:	6313      	str	r3, [r2, #48]	@ 0x30
 80024e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002550 <HAL_UART_MspInit+0xf8>)
 80024e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80024ec:	2380      	movs	r3, #128	@ 0x80
 80024ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f2:	2302      	movs	r3, #2
 80024f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fe:	2300      	movs	r3, #0
 8002500:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002504:	2307      	movs	r3, #7
 8002506:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800250a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800250e:	4619      	mov	r1, r3
 8002510:	4810      	ldr	r0, [pc, #64]	@ (8002554 <HAL_UART_MspInit+0xfc>)
 8002512:	f000 fec5 	bl	80032a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002516:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800251a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251e:	2302      	movs	r3, #2
 8002520:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002524:	2300      	movs	r3, #0
 8002526:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252a:	2300      	movs	r3, #0
 800252c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002530:	2307      	movs	r3, #7
 8002532:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002536:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800253a:	4619      	mov	r1, r3
 800253c:	4806      	ldr	r0, [pc, #24]	@ (8002558 <HAL_UART_MspInit+0x100>)
 800253e:	f000 feaf 	bl	80032a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002542:	bf00      	nop
 8002544:	37b0      	adds	r7, #176	@ 0xb0
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40011000 	.word	0x40011000
 8002550:	40023800 	.word	0x40023800
 8002554:	40020400 	.word	0x40020400
 8002558:	40020000 	.word	0x40020000

0800255c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002560:	bf00      	nop
 8002562:	e7fd      	b.n	8002560 <NMI_Handler+0x4>

08002564 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002568:	bf00      	nop
 800256a:	e7fd      	b.n	8002568 <HardFault_Handler+0x4>

0800256c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002570:	bf00      	nop
 8002572:	e7fd      	b.n	8002570 <MemManage_Handler+0x4>

08002574 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002578:	bf00      	nop
 800257a:	e7fd      	b.n	8002578 <BusFault_Handler+0x4>

0800257c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002580:	bf00      	nop
 8002582:	e7fd      	b.n	8002580 <UsageFault_Handler+0x4>

08002584 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002592:	b480      	push	{r7}
 8002594:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025a4:	bf00      	nop
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025b2:	f000 f941 	bl	8002838 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025b6:	bf00      	nop
 80025b8:	bd80      	pop	{r7, pc}

080025ba <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025ba:	b480      	push	{r7}
 80025bc:	af00      	add	r7, sp, #0
  return 1;
 80025be:	2301      	movs	r3, #1
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr

080025ca <_kill>:

int _kill(int pid, int sig)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b082      	sub	sp, #8
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
 80025d2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80025d4:	f004 f8c4 	bl	8006760 <__errno>
 80025d8:	4603      	mov	r3, r0
 80025da:	2216      	movs	r2, #22
 80025dc:	601a      	str	r2, [r3, #0]
  return -1;
 80025de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <_exit>:

void _exit (int status)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b082      	sub	sp, #8
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025f2:	f04f 31ff 	mov.w	r1, #4294967295
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7ff ffe7 	bl	80025ca <_kill>
  while (1) {}    /* Make sure we hang here */
 80025fc:	bf00      	nop
 80025fe:	e7fd      	b.n	80025fc <_exit+0x12>

08002600 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800260c:	2300      	movs	r3, #0
 800260e:	617b      	str	r3, [r7, #20]
 8002610:	e00a      	b.n	8002628 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002612:	f3af 8000 	nop.w
 8002616:	4601      	mov	r1, r0
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	1c5a      	adds	r2, r3, #1
 800261c:	60ba      	str	r2, [r7, #8]
 800261e:	b2ca      	uxtb	r2, r1
 8002620:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	3301      	adds	r3, #1
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	429a      	cmp	r2, r3
 800262e:	dbf0      	blt.n	8002612 <_read+0x12>
  }

  return len;
 8002630:	687b      	ldr	r3, [r7, #4]
}
 8002632:	4618      	mov	r0, r3
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b086      	sub	sp, #24
 800263e:	af00      	add	r7, sp, #0
 8002640:	60f8      	str	r0, [r7, #12]
 8002642:	60b9      	str	r1, [r7, #8]
 8002644:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002646:	2300      	movs	r3, #0
 8002648:	617b      	str	r3, [r7, #20]
 800264a:	e009      	b.n	8002660 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	1c5a      	adds	r2, r3, #1
 8002650:	60ba      	str	r2, [r7, #8]
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	4618      	mov	r0, r3
 8002656:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	3301      	adds	r3, #1
 800265e:	617b      	str	r3, [r7, #20]
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	429a      	cmp	r2, r3
 8002666:	dbf1      	blt.n	800264c <_write+0x12>
  }
  return len;
 8002668:	687b      	ldr	r3, [r7, #4]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3718      	adds	r7, #24
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <_close>:

int _close(int file)
{
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800267a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800267e:	4618      	mov	r0, r3
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
 8002692:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800269a:	605a      	str	r2, [r3, #4]
  return 0;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr

080026aa <_isatty>:

int _isatty(int file)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026b2:	2301      	movs	r3, #1
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3714      	adds	r7, #20
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
	...

080026dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026e4:	4a14      	ldr	r2, [pc, #80]	@ (8002738 <_sbrk+0x5c>)
 80026e6:	4b15      	ldr	r3, [pc, #84]	@ (800273c <_sbrk+0x60>)
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026f0:	4b13      	ldr	r3, [pc, #76]	@ (8002740 <_sbrk+0x64>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d102      	bne.n	80026fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026f8:	4b11      	ldr	r3, [pc, #68]	@ (8002740 <_sbrk+0x64>)
 80026fa:	4a12      	ldr	r2, [pc, #72]	@ (8002744 <_sbrk+0x68>)
 80026fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026fe:	4b10      	ldr	r3, [pc, #64]	@ (8002740 <_sbrk+0x64>)
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4413      	add	r3, r2
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	429a      	cmp	r2, r3
 800270a:	d207      	bcs.n	800271c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800270c:	f004 f828 	bl	8006760 <__errno>
 8002710:	4603      	mov	r3, r0
 8002712:	220c      	movs	r2, #12
 8002714:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002716:	f04f 33ff 	mov.w	r3, #4294967295
 800271a:	e009      	b.n	8002730 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800271c:	4b08      	ldr	r3, [pc, #32]	@ (8002740 <_sbrk+0x64>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002722:	4b07      	ldr	r3, [pc, #28]	@ (8002740 <_sbrk+0x64>)
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4413      	add	r3, r2
 800272a:	4a05      	ldr	r2, [pc, #20]	@ (8002740 <_sbrk+0x64>)
 800272c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800272e:	68fb      	ldr	r3, [r7, #12]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3718      	adds	r7, #24
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	20050000 	.word	0x20050000
 800273c:	00000400 	.word	0x00000400
 8002740:	20000430 	.word	0x20000430
 8002744:	20000588 	.word	0x20000588

08002748 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800274c:	4b06      	ldr	r3, [pc, #24]	@ (8002768 <SystemInit+0x20>)
 800274e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002752:	4a05      	ldr	r2, [pc, #20]	@ (8002768 <SystemInit+0x20>)
 8002754:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002758:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800275c:	bf00      	nop
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	e000ed00 	.word	0xe000ed00

0800276c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800276c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80027a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002770:	480d      	ldr	r0, [pc, #52]	@ (80027a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002772:	490e      	ldr	r1, [pc, #56]	@ (80027ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002774:	4a0e      	ldr	r2, [pc, #56]	@ (80027b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002776:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002778:	e002      	b.n	8002780 <LoopCopyDataInit>

0800277a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800277a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800277c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800277e:	3304      	adds	r3, #4

08002780 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002784:	d3f9      	bcc.n	800277a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002786:	4a0b      	ldr	r2, [pc, #44]	@ (80027b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002788:	4c0b      	ldr	r4, [pc, #44]	@ (80027b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800278a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800278c:	e001      	b.n	8002792 <LoopFillZerobss>

0800278e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800278e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002790:	3204      	adds	r2, #4

08002792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002794:	d3fb      	bcc.n	800278e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002796:	f7ff ffd7 	bl	8002748 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800279a:	f003 ffe7 	bl	800676c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800279e:	f7fe fe3d 	bl	800141c <main>
  bx  lr    
 80027a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027a4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80027a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027ac:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80027b0:	08008ca0 	.word	0x08008ca0
  ldr r2, =_sbss
 80027b4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80027b8:	20000584 	.word	0x20000584

080027bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027bc:	e7fe      	b.n	80027bc <ADC_IRQHandler>

080027be <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027c2:	2003      	movs	r0, #3
 80027c4:	f000 fd38 	bl	8003238 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027c8:	2000      	movs	r0, #0
 80027ca:	f000 f805 	bl	80027d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027ce:	f7ff fc7d 	bl	80020cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027e0:	4b12      	ldr	r3, [pc, #72]	@ (800282c <HAL_InitTick+0x54>)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	4b12      	ldr	r3, [pc, #72]	@ (8002830 <HAL_InitTick+0x58>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	4619      	mov	r1, r3
 80027ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80027f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f6:	4618      	mov	r0, r3
 80027f8:	f000 fd45 	bl	8003286 <HAL_SYSTICK_Config>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e00e      	b.n	8002824 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b0f      	cmp	r3, #15
 800280a:	d80a      	bhi.n	8002822 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800280c:	2200      	movs	r2, #0
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	f04f 30ff 	mov.w	r0, #4294967295
 8002814:	f000 fd1b 	bl	800324e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002818:	4a06      	ldr	r2, [pc, #24]	@ (8002834 <HAL_InitTick+0x5c>)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800281e:	2300      	movs	r3, #0
 8002820:	e000      	b.n	8002824 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
}
 8002824:	4618      	mov	r0, r3
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	20000014 	.word	0x20000014
 8002830:	2000001c 	.word	0x2000001c
 8002834:	20000018 	.word	0x20000018

08002838 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800283c:	4b06      	ldr	r3, [pc, #24]	@ (8002858 <HAL_IncTick+0x20>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	461a      	mov	r2, r3
 8002842:	4b06      	ldr	r3, [pc, #24]	@ (800285c <HAL_IncTick+0x24>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4413      	add	r3, r2
 8002848:	4a04      	ldr	r2, [pc, #16]	@ (800285c <HAL_IncTick+0x24>)
 800284a:	6013      	str	r3, [r2, #0]
}
 800284c:	bf00      	nop
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	2000001c 	.word	0x2000001c
 800285c:	20000434 	.word	0x20000434

08002860 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  return uwTick;
 8002864:	4b03      	ldr	r3, [pc, #12]	@ (8002874 <HAL_GetTick+0x14>)
 8002866:	681b      	ldr	r3, [r3, #0]
}
 8002868:	4618      	mov	r0, r3
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	20000434 	.word	0x20000434

08002878 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002880:	2300      	movs	r3, #0
 8002882:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e031      	b.n	80028f2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002892:	2b00      	cmp	r3, #0
 8002894:	d109      	bne.n	80028aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7ff fc3c 	bl	8002114 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ae:	f003 0310 	and.w	r3, r3, #16
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d116      	bne.n	80028e4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028ba:	4b10      	ldr	r3, [pc, #64]	@ (80028fc <HAL_ADC_Init+0x84>)
 80028bc:	4013      	ands	r3, r2
 80028be:	f043 0202 	orr.w	r2, r3, #2
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 fb0a 	bl	8002ee0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d6:	f023 0303 	bic.w	r3, r3, #3
 80028da:	f043 0201 	orr.w	r2, r3, #1
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	641a      	str	r2, [r3, #64]	@ 0x40
 80028e2:	e001      	b.n	80028e8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	ffffeefd 	.word	0xffffeefd

08002900 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002908:	2300      	movs	r3, #0
 800290a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002912:	2b01      	cmp	r3, #1
 8002914:	d101      	bne.n	800291a <HAL_ADC_Start+0x1a>
 8002916:	2302      	movs	r3, #2
 8002918:	e0ad      	b.n	8002a76 <HAL_ADC_Start+0x176>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b01      	cmp	r3, #1
 800292e:	d018      	beq.n	8002962 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689a      	ldr	r2, [r3, #8]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 0201 	orr.w	r2, r2, #1
 800293e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002940:	4b50      	ldr	r3, [pc, #320]	@ (8002a84 <HAL_ADC_Start+0x184>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a50      	ldr	r2, [pc, #320]	@ (8002a88 <HAL_ADC_Start+0x188>)
 8002946:	fba2 2303 	umull	r2, r3, r2, r3
 800294a:	0c9a      	lsrs	r2, r3, #18
 800294c:	4613      	mov	r3, r2
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	4413      	add	r3, r2
 8002952:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002954:	e002      	b.n	800295c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	3b01      	subs	r3, #1
 800295a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f9      	bne.n	8002956 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b01      	cmp	r3, #1
 800296e:	d175      	bne.n	8002a5c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002974:	4b45      	ldr	r3, [pc, #276]	@ (8002a8c <HAL_ADC_Start+0x18c>)
 8002976:	4013      	ands	r3, r2
 8002978:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800298a:	2b00      	cmp	r3, #0
 800298c:	d007      	beq.n	800299e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002992:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002996:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029aa:	d106      	bne.n	80029ba <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b0:	f023 0206 	bic.w	r2, r3, #6
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	645a      	str	r2, [r3, #68]	@ 0x44
 80029b8:	e002      	b.n	80029c0 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80029d0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80029d2:	4b2f      	ldr	r3, [pc, #188]	@ (8002a90 <HAL_ADC_Start+0x190>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f003 031f 	and.w	r3, r3, #31
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10f      	bne.n	80029fe <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d143      	bne.n	8002a74 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80029fa:	609a      	str	r2, [r3, #8]
 80029fc:	e03a      	b.n	8002a74 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a24      	ldr	r2, [pc, #144]	@ (8002a94 <HAL_ADC_Start+0x194>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d10e      	bne.n	8002a26 <HAL_ADC_Start+0x126>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d107      	bne.n	8002a26 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002a24:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002a26:	4b1a      	ldr	r3, [pc, #104]	@ (8002a90 <HAL_ADC_Start+0x190>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f003 0310 	and.w	r3, r3, #16
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d120      	bne.n	8002a74 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a18      	ldr	r2, [pc, #96]	@ (8002a98 <HAL_ADC_Start+0x198>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d11b      	bne.n	8002a74 <HAL_ADC_Start+0x174>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d114      	bne.n	8002a74 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002a58:	609a      	str	r2, [r3, #8]
 8002a5a:	e00b      	b.n	8002a74 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a60:	f043 0210 	orr.w	r2, r3, #16
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6c:	f043 0201 	orr.w	r2, r3, #1
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	20000014 	.word	0x20000014
 8002a88:	431bde83 	.word	0x431bde83
 8002a8c:	fffff8fe 	.word	0xfffff8fe
 8002a90:	40012300 	.word	0x40012300
 8002a94:	40012000 	.word	0x40012000
 8002a98:	40012200 	.word	0x40012200

08002a9c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d101      	bne.n	8002ab2 <HAL_ADC_Stop+0x16>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	e01f      	b.n	8002af2 <HAL_ADC_Stop+0x56>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 0201 	bic.w	r2, r2, #1
 8002ac8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d107      	bne.n	8002ae8 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002adc:	4b08      	ldr	r3, [pc, #32]	@ (8002b00 <HAL_ADC_Stop+0x64>)
 8002ade:	4013      	ands	r3, r2
 8002ae0:	f043 0201 	orr.w	r2, r3, #1
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	ffffeefe 	.word	0xffffeefe

08002b04 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b20:	d113      	bne.n	8002b4a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002b2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b30:	d10b      	bne.n	8002b4a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b36:	f043 0220 	orr.w	r2, r3, #32
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e063      	b.n	8002c12 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002b4a:	f7ff fe89 	bl	8002860 <HAL_GetTick>
 8002b4e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b50:	e021      	b.n	8002b96 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b58:	d01d      	beq.n	8002b96 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d007      	beq.n	8002b70 <HAL_ADC_PollForConversion+0x6c>
 8002b60:	f7ff fe7e 	bl	8002860 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d212      	bcs.n	8002b96 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d00b      	beq.n	8002b96 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b82:	f043 0204 	orr.w	r2, r3, #4
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e03d      	b.n	8002c12 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d1d6      	bne.n	8002b52 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f06f 0212 	mvn.w	r2, #18
 8002bac:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d123      	bne.n	8002c10 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d11f      	bne.n	8002c10 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d006      	beq.n	8002bec <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d111      	bne.n	8002c10 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d105      	bne.n	8002c10 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c08:	f043 0201 	orr.w	r2, r3, #1
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <HAL_ADC_ConfigChannel+0x1c>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e136      	b.n	8002ebe <HAL_ADC_ConfigChannel+0x28a>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b09      	cmp	r3, #9
 8002c5e:	d93a      	bls.n	8002cd6 <HAL_ADC_ConfigChannel+0xa2>
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002c68:	d035      	beq.n	8002cd6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68d9      	ldr	r1, [r3, #12]
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	461a      	mov	r2, r3
 8002c78:	4613      	mov	r3, r2
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3b1e      	subs	r3, #30
 8002c80:	2207      	movs	r2, #7
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	43da      	mvns	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	400a      	ands	r2, r1
 8002c8e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a8d      	ldr	r2, [pc, #564]	@ (8002ecc <HAL_ADC_ConfigChannel+0x298>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d10a      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68d9      	ldr	r1, [r3, #12]
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	061a      	lsls	r2, r3, #24
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cae:	e035      	b.n	8002d1c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68d9      	ldr	r1, [r3, #12]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	689a      	ldr	r2, [r3, #8]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	4403      	add	r3, r0
 8002cc8:	3b1e      	subs	r3, #30
 8002cca:	409a      	lsls	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cd4:	e022      	b.n	8002d1c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6919      	ldr	r1, [r3, #16]
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	4413      	add	r3, r2
 8002cea:	2207      	movs	r2, #7
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	43da      	mvns	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	400a      	ands	r2, r1
 8002cf8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6919      	ldr	r1, [r3, #16]
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	4403      	add	r3, r0
 8002d12:	409a      	lsls	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	2b06      	cmp	r3, #6
 8002d22:	d824      	bhi.n	8002d6e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685a      	ldr	r2, [r3, #4]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4413      	add	r3, r2
 8002d34:	3b05      	subs	r3, #5
 8002d36:	221f      	movs	r2, #31
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	43da      	mvns	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	400a      	ands	r2, r1
 8002d44:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	4618      	mov	r0, r3
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	3b05      	subs	r3, #5
 8002d60:	fa00 f203 	lsl.w	r2, r0, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d6c:	e04c      	b.n	8002e08 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	2b0c      	cmp	r3, #12
 8002d74:	d824      	bhi.n	8002dc0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	4613      	mov	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4413      	add	r3, r2
 8002d86:	3b23      	subs	r3, #35	@ 0x23
 8002d88:	221f      	movs	r2, #31
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	43da      	mvns	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	400a      	ands	r2, r1
 8002d96:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	4618      	mov	r0, r3
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	4613      	mov	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4413      	add	r3, r2
 8002db0:	3b23      	subs	r3, #35	@ 0x23
 8002db2:	fa00 f203 	lsl.w	r2, r0, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	631a      	str	r2, [r3, #48]	@ 0x30
 8002dbe:	e023      	b.n	8002e08 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	3b41      	subs	r3, #65	@ 0x41
 8002dd2:	221f      	movs	r2, #31
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	43da      	mvns	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	400a      	ands	r2, r1
 8002de0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	4618      	mov	r0, r3
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	4613      	mov	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	3b41      	subs	r3, #65	@ 0x41
 8002dfc:	fa00 f203 	lsl.w	r2, r0, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a30      	ldr	r2, [pc, #192]	@ (8002ed0 <HAL_ADC_ConfigChannel+0x29c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d10a      	bne.n	8002e28 <HAL_ADC_ConfigChannel+0x1f4>
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002e1a:	d105      	bne.n	8002e28 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002e1c:	4b2d      	ldr	r3, [pc, #180]	@ (8002ed4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	4a2c      	ldr	r2, [pc, #176]	@ (8002ed4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002e22:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002e26:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a28      	ldr	r2, [pc, #160]	@ (8002ed0 <HAL_ADC_ConfigChannel+0x29c>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d10f      	bne.n	8002e52 <HAL_ADC_ConfigChannel+0x21e>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2b12      	cmp	r3, #18
 8002e38:	d10b      	bne.n	8002e52 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002e3a:	4b26      	ldr	r3, [pc, #152]	@ (8002ed4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	4a25      	ldr	r2, [pc, #148]	@ (8002ed4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002e40:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002e44:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002e46:	4b23      	ldr	r3, [pc, #140]	@ (8002ed4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	4a22      	ldr	r2, [pc, #136]	@ (8002ed4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002e4c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e50:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a1e      	ldr	r2, [pc, #120]	@ (8002ed0 <HAL_ADC_ConfigChannel+0x29c>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d12b      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x280>
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a1a      	ldr	r2, [pc, #104]	@ (8002ecc <HAL_ADC_ConfigChannel+0x298>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d003      	beq.n	8002e6e <HAL_ADC_ConfigChannel+0x23a>
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2b11      	cmp	r3, #17
 8002e6c:	d122      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002e6e:	4b19      	ldr	r3, [pc, #100]	@ (8002ed4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	4a18      	ldr	r2, [pc, #96]	@ (8002ed4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002e74:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002e78:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002e7a:	4b16      	ldr	r3, [pc, #88]	@ (8002ed4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	4a15      	ldr	r2, [pc, #84]	@ (8002ed4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002e80:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002e84:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a10      	ldr	r2, [pc, #64]	@ (8002ecc <HAL_ADC_ConfigChannel+0x298>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d111      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002e90:	4b11      	ldr	r3, [pc, #68]	@ (8002ed8 <HAL_ADC_ConfigChannel+0x2a4>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a11      	ldr	r2, [pc, #68]	@ (8002edc <HAL_ADC_ConfigChannel+0x2a8>)
 8002e96:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9a:	0c9a      	lsrs	r2, r3, #18
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002ea6:	e002      	b.n	8002eae <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1f9      	bne.n	8002ea8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3714      	adds	r7, #20
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	10000012 	.word	0x10000012
 8002ed0:	40012000 	.word	0x40012000
 8002ed4:	40012300 	.word	0x40012300
 8002ed8:	20000014 	.word	0x20000014
 8002edc:	431bde83 	.word	0x431bde83

08002ee0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002ee8:	4b78      	ldr	r3, [pc, #480]	@ (80030cc <ADC_Init+0x1ec>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	4a77      	ldr	r2, [pc, #476]	@ (80030cc <ADC_Init+0x1ec>)
 8002eee:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002ef2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002ef4:	4b75      	ldr	r3, [pc, #468]	@ (80030cc <ADC_Init+0x1ec>)
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	4973      	ldr	r1, [pc, #460]	@ (80030cc <ADC_Init+0x1ec>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6859      	ldr	r1, [r3, #4]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	021a      	lsls	r2, r3, #8
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002f34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6859      	ldr	r1, [r3, #4]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6899      	ldr	r1, [r3, #8]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f6e:	4a58      	ldr	r2, [pc, #352]	@ (80030d0 <ADC_Init+0x1f0>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d022      	beq.n	8002fba <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689a      	ldr	r2, [r3, #8]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f82:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6899      	ldr	r1, [r3, #8]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002fa4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6899      	ldr	r1, [r3, #8]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	609a      	str	r2, [r3, #8]
 8002fb8:	e00f      	b.n	8002fda <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002fc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002fd8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 0202 	bic.w	r2, r2, #2
 8002fe8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6899      	ldr	r1, [r3, #8]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	005a      	lsls	r2, r3, #1
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d01b      	beq.n	8003040 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003016:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003026:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6859      	ldr	r1, [r3, #4]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003032:	3b01      	subs	r3, #1
 8003034:	035a      	lsls	r2, r3, #13
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	430a      	orrs	r2, r1
 800303c:	605a      	str	r2, [r3, #4]
 800303e:	e007      	b.n	8003050 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800304e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800305e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	3b01      	subs	r3, #1
 800306c:	051a      	lsls	r2, r3, #20
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	430a      	orrs	r2, r1
 8003074:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003084:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6899      	ldr	r1, [r3, #8]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003092:	025a      	lsls	r2, r3, #9
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	430a      	orrs	r2, r1
 800309a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689a      	ldr	r2, [r3, #8]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6899      	ldr	r1, [r3, #8]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	029a      	lsls	r2, r3, #10
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	430a      	orrs	r2, r1
 80030be:	609a      	str	r2, [r3, #8]
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	40012300 	.word	0x40012300
 80030d0:	0f000001 	.word	0x0f000001

080030d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f003 0307 	and.w	r3, r3, #7
 80030e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003114 <__NVIC_SetPriorityGrouping+0x40>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030ea:	68ba      	ldr	r2, [r7, #8]
 80030ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030f0:	4013      	ands	r3, r2
 80030f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80030fc:	4b06      	ldr	r3, [pc, #24]	@ (8003118 <__NVIC_SetPriorityGrouping+0x44>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003102:	4a04      	ldr	r2, [pc, #16]	@ (8003114 <__NVIC_SetPriorityGrouping+0x40>)
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	60d3      	str	r3, [r2, #12]
}
 8003108:	bf00      	nop
 800310a:	3714      	adds	r7, #20
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	e000ed00 	.word	0xe000ed00
 8003118:	05fa0000 	.word	0x05fa0000

0800311c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003120:	4b04      	ldr	r3, [pc, #16]	@ (8003134 <__NVIC_GetPriorityGrouping+0x18>)
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	0a1b      	lsrs	r3, r3, #8
 8003126:	f003 0307 	and.w	r3, r3, #7
}
 800312a:	4618      	mov	r0, r3
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr
 8003134:	e000ed00 	.word	0xe000ed00

08003138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	4603      	mov	r3, r0
 8003140:	6039      	str	r1, [r7, #0]
 8003142:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003148:	2b00      	cmp	r3, #0
 800314a:	db0a      	blt.n	8003162 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	b2da      	uxtb	r2, r3
 8003150:	490c      	ldr	r1, [pc, #48]	@ (8003184 <__NVIC_SetPriority+0x4c>)
 8003152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003156:	0112      	lsls	r2, r2, #4
 8003158:	b2d2      	uxtb	r2, r2
 800315a:	440b      	add	r3, r1
 800315c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003160:	e00a      	b.n	8003178 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	b2da      	uxtb	r2, r3
 8003166:	4908      	ldr	r1, [pc, #32]	@ (8003188 <__NVIC_SetPriority+0x50>)
 8003168:	79fb      	ldrb	r3, [r7, #7]
 800316a:	f003 030f 	and.w	r3, r3, #15
 800316e:	3b04      	subs	r3, #4
 8003170:	0112      	lsls	r2, r2, #4
 8003172:	b2d2      	uxtb	r2, r2
 8003174:	440b      	add	r3, r1
 8003176:	761a      	strb	r2, [r3, #24]
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	e000e100 	.word	0xe000e100
 8003188:	e000ed00 	.word	0xe000ed00

0800318c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800318c:	b480      	push	{r7}
 800318e:	b089      	sub	sp, #36	@ 0x24
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f003 0307 	and.w	r3, r3, #7
 800319e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	f1c3 0307 	rsb	r3, r3, #7
 80031a6:	2b04      	cmp	r3, #4
 80031a8:	bf28      	it	cs
 80031aa:	2304      	movcs	r3, #4
 80031ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	3304      	adds	r3, #4
 80031b2:	2b06      	cmp	r3, #6
 80031b4:	d902      	bls.n	80031bc <NVIC_EncodePriority+0x30>
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	3b03      	subs	r3, #3
 80031ba:	e000      	b.n	80031be <NVIC_EncodePriority+0x32>
 80031bc:	2300      	movs	r3, #0
 80031be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c0:	f04f 32ff 	mov.w	r2, #4294967295
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	43da      	mvns	r2, r3
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	401a      	ands	r2, r3
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031d4:	f04f 31ff 	mov.w	r1, #4294967295
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	fa01 f303 	lsl.w	r3, r1, r3
 80031de:	43d9      	mvns	r1, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031e4:	4313      	orrs	r3, r2
         );
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3724      	adds	r7, #36	@ 0x24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
	...

080031f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3b01      	subs	r3, #1
 8003200:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003204:	d301      	bcc.n	800320a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003206:	2301      	movs	r3, #1
 8003208:	e00f      	b.n	800322a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800320a:	4a0a      	ldr	r2, [pc, #40]	@ (8003234 <SysTick_Config+0x40>)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3b01      	subs	r3, #1
 8003210:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003212:	210f      	movs	r1, #15
 8003214:	f04f 30ff 	mov.w	r0, #4294967295
 8003218:	f7ff ff8e 	bl	8003138 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800321c:	4b05      	ldr	r3, [pc, #20]	@ (8003234 <SysTick_Config+0x40>)
 800321e:	2200      	movs	r2, #0
 8003220:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003222:	4b04      	ldr	r3, [pc, #16]	@ (8003234 <SysTick_Config+0x40>)
 8003224:	2207      	movs	r2, #7
 8003226:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	e000e010 	.word	0xe000e010

08003238 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7ff ff47 	bl	80030d4 <__NVIC_SetPriorityGrouping>
}
 8003246:	bf00      	nop
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800324e:	b580      	push	{r7, lr}
 8003250:	b086      	sub	sp, #24
 8003252:	af00      	add	r7, sp, #0
 8003254:	4603      	mov	r3, r0
 8003256:	60b9      	str	r1, [r7, #8]
 8003258:	607a      	str	r2, [r7, #4]
 800325a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800325c:	2300      	movs	r3, #0
 800325e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003260:	f7ff ff5c 	bl	800311c <__NVIC_GetPriorityGrouping>
 8003264:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	68b9      	ldr	r1, [r7, #8]
 800326a:	6978      	ldr	r0, [r7, #20]
 800326c:	f7ff ff8e 	bl	800318c <NVIC_EncodePriority>
 8003270:	4602      	mov	r2, r0
 8003272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003276:	4611      	mov	r1, r2
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff ff5d 	bl	8003138 <__NVIC_SetPriority>
}
 800327e:	bf00      	nop
 8003280:	3718      	adds	r7, #24
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b082      	sub	sp, #8
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7ff ffb0 	bl	80031f4 <SysTick_Config>
 8003294:	4603      	mov	r3, r0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
	...

080032a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b089      	sub	sp, #36	@ 0x24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80032aa:	2300      	movs	r3, #0
 80032ac:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80032ae:	2300      	movs	r3, #0
 80032b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80032b2:	2300      	movs	r3, #0
 80032b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80032b6:	2300      	movs	r3, #0
 80032b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80032ba:	2300      	movs	r3, #0
 80032bc:	61fb      	str	r3, [r7, #28]
 80032be:	e175      	b.n	80035ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80032c0:	2201      	movs	r2, #1
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	4013      	ands	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	429a      	cmp	r2, r3
 80032da:	f040 8164 	bne.w	80035a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f003 0303 	and.w	r3, r3, #3
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d005      	beq.n	80032f6 <HAL_GPIO_Init+0x56>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f003 0303 	and.w	r3, r3, #3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d130      	bne.n	8003358 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	2203      	movs	r2, #3
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	43db      	mvns	r3, r3
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	4013      	ands	r3, r2
 800330c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	68da      	ldr	r2, [r3, #12]
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	4313      	orrs	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800332c:	2201      	movs	r2, #1
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	43db      	mvns	r3, r3
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	4013      	ands	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	091b      	lsrs	r3, r3, #4
 8003342:	f003 0201 	and.w	r2, r3, #1
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	4313      	orrs	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f003 0303 	and.w	r3, r3, #3
 8003360:	2b03      	cmp	r3, #3
 8003362:	d017      	beq.n	8003394 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	2203      	movs	r2, #3
 8003370:	fa02 f303 	lsl.w	r3, r2, r3
 8003374:	43db      	mvns	r3, r3
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	4013      	ands	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	4313      	orrs	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f003 0303 	and.w	r3, r3, #3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d123      	bne.n	80033e8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	08da      	lsrs	r2, r3, #3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	3208      	adds	r2, #8
 80033a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	220f      	movs	r2, #15
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	43db      	mvns	r3, r3
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	4013      	ands	r3, r2
 80033c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	691a      	ldr	r2, [r3, #16]
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	f003 0307 	and.w	r3, r3, #7
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	08da      	lsrs	r2, r3, #3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	3208      	adds	r2, #8
 80033e2:	69b9      	ldr	r1, [r7, #24]
 80033e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	2203      	movs	r2, #3
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	43db      	mvns	r3, r3
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	4013      	ands	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f003 0203 	and.w	r2, r3, #3
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	4313      	orrs	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 80be 	beq.w	80035a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800342a:	4b66      	ldr	r3, [pc, #408]	@ (80035c4 <HAL_GPIO_Init+0x324>)
 800342c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800342e:	4a65      	ldr	r2, [pc, #404]	@ (80035c4 <HAL_GPIO_Init+0x324>)
 8003430:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003434:	6453      	str	r3, [r2, #68]	@ 0x44
 8003436:	4b63      	ldr	r3, [pc, #396]	@ (80035c4 <HAL_GPIO_Init+0x324>)
 8003438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800343a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003442:	4a61      	ldr	r2, [pc, #388]	@ (80035c8 <HAL_GPIO_Init+0x328>)
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	089b      	lsrs	r3, r3, #2
 8003448:	3302      	adds	r3, #2
 800344a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800344e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	f003 0303 	and.w	r3, r3, #3
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	220f      	movs	r2, #15
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
 800345e:	43db      	mvns	r3, r3
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	4013      	ands	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a58      	ldr	r2, [pc, #352]	@ (80035cc <HAL_GPIO_Init+0x32c>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d037      	beq.n	80034de <HAL_GPIO_Init+0x23e>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a57      	ldr	r2, [pc, #348]	@ (80035d0 <HAL_GPIO_Init+0x330>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d031      	beq.n	80034da <HAL_GPIO_Init+0x23a>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a56      	ldr	r2, [pc, #344]	@ (80035d4 <HAL_GPIO_Init+0x334>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d02b      	beq.n	80034d6 <HAL_GPIO_Init+0x236>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a55      	ldr	r2, [pc, #340]	@ (80035d8 <HAL_GPIO_Init+0x338>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d025      	beq.n	80034d2 <HAL_GPIO_Init+0x232>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a54      	ldr	r2, [pc, #336]	@ (80035dc <HAL_GPIO_Init+0x33c>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d01f      	beq.n	80034ce <HAL_GPIO_Init+0x22e>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a53      	ldr	r2, [pc, #332]	@ (80035e0 <HAL_GPIO_Init+0x340>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d019      	beq.n	80034ca <HAL_GPIO_Init+0x22a>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a52      	ldr	r2, [pc, #328]	@ (80035e4 <HAL_GPIO_Init+0x344>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d013      	beq.n	80034c6 <HAL_GPIO_Init+0x226>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a51      	ldr	r2, [pc, #324]	@ (80035e8 <HAL_GPIO_Init+0x348>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d00d      	beq.n	80034c2 <HAL_GPIO_Init+0x222>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a50      	ldr	r2, [pc, #320]	@ (80035ec <HAL_GPIO_Init+0x34c>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d007      	beq.n	80034be <HAL_GPIO_Init+0x21e>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a4f      	ldr	r2, [pc, #316]	@ (80035f0 <HAL_GPIO_Init+0x350>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d101      	bne.n	80034ba <HAL_GPIO_Init+0x21a>
 80034b6:	2309      	movs	r3, #9
 80034b8:	e012      	b.n	80034e0 <HAL_GPIO_Init+0x240>
 80034ba:	230a      	movs	r3, #10
 80034bc:	e010      	b.n	80034e0 <HAL_GPIO_Init+0x240>
 80034be:	2308      	movs	r3, #8
 80034c0:	e00e      	b.n	80034e0 <HAL_GPIO_Init+0x240>
 80034c2:	2307      	movs	r3, #7
 80034c4:	e00c      	b.n	80034e0 <HAL_GPIO_Init+0x240>
 80034c6:	2306      	movs	r3, #6
 80034c8:	e00a      	b.n	80034e0 <HAL_GPIO_Init+0x240>
 80034ca:	2305      	movs	r3, #5
 80034cc:	e008      	b.n	80034e0 <HAL_GPIO_Init+0x240>
 80034ce:	2304      	movs	r3, #4
 80034d0:	e006      	b.n	80034e0 <HAL_GPIO_Init+0x240>
 80034d2:	2303      	movs	r3, #3
 80034d4:	e004      	b.n	80034e0 <HAL_GPIO_Init+0x240>
 80034d6:	2302      	movs	r3, #2
 80034d8:	e002      	b.n	80034e0 <HAL_GPIO_Init+0x240>
 80034da:	2301      	movs	r3, #1
 80034dc:	e000      	b.n	80034e0 <HAL_GPIO_Init+0x240>
 80034de:	2300      	movs	r3, #0
 80034e0:	69fa      	ldr	r2, [r7, #28]
 80034e2:	f002 0203 	and.w	r2, r2, #3
 80034e6:	0092      	lsls	r2, r2, #2
 80034e8:	4093      	lsls	r3, r2
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80034f0:	4935      	ldr	r1, [pc, #212]	@ (80035c8 <HAL_GPIO_Init+0x328>)
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	089b      	lsrs	r3, r3, #2
 80034f6:	3302      	adds	r3, #2
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034fe:	4b3d      	ldr	r3, [pc, #244]	@ (80035f4 <HAL_GPIO_Init+0x354>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	43db      	mvns	r3, r3
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	4013      	ands	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	4313      	orrs	r3, r2
 8003520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003522:	4a34      	ldr	r2, [pc, #208]	@ (80035f4 <HAL_GPIO_Init+0x354>)
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003528:	4b32      	ldr	r3, [pc, #200]	@ (80035f4 <HAL_GPIO_Init+0x354>)
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	43db      	mvns	r3, r3
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	4013      	ands	r3, r2
 8003536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	4313      	orrs	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800354c:	4a29      	ldr	r2, [pc, #164]	@ (80035f4 <HAL_GPIO_Init+0x354>)
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003552:	4b28      	ldr	r3, [pc, #160]	@ (80035f4 <HAL_GPIO_Init+0x354>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	43db      	mvns	r3, r3
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	4013      	ands	r3, r2
 8003560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	4313      	orrs	r3, r2
 8003574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003576:	4a1f      	ldr	r2, [pc, #124]	@ (80035f4 <HAL_GPIO_Init+0x354>)
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800357c:	4b1d      	ldr	r3, [pc, #116]	@ (80035f4 <HAL_GPIO_Init+0x354>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	43db      	mvns	r3, r3
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	4013      	ands	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	4313      	orrs	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035a0:	4a14      	ldr	r2, [pc, #80]	@ (80035f4 <HAL_GPIO_Init+0x354>)
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	3301      	adds	r3, #1
 80035aa:	61fb      	str	r3, [r7, #28]
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	2b0f      	cmp	r3, #15
 80035b0:	f67f ae86 	bls.w	80032c0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80035b4:	bf00      	nop
 80035b6:	bf00      	nop
 80035b8:	3724      	adds	r7, #36	@ 0x24
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	40023800 	.word	0x40023800
 80035c8:	40013800 	.word	0x40013800
 80035cc:	40020000 	.word	0x40020000
 80035d0:	40020400 	.word	0x40020400
 80035d4:	40020800 	.word	0x40020800
 80035d8:	40020c00 	.word	0x40020c00
 80035dc:	40021000 	.word	0x40021000
 80035e0:	40021400 	.word	0x40021400
 80035e4:	40021800 	.word	0x40021800
 80035e8:	40021c00 	.word	0x40021c00
 80035ec:	40022000 	.word	0x40022000
 80035f0:	40022400 	.word	0x40022400
 80035f4:	40013c00 	.word	0x40013c00

080035f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	460b      	mov	r3, r1
 8003602:	807b      	strh	r3, [r7, #2]
 8003604:	4613      	mov	r3, r2
 8003606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003608:	787b      	ldrb	r3, [r7, #1]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800360e:	887a      	ldrh	r2, [r7, #2]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003614:	e003      	b.n	800361e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003616:	887b      	ldrh	r3, [r7, #2]
 8003618:	041a      	lsls	r2, r3, #16
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	619a      	str	r2, [r3, #24]
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
	...

0800362c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e07f      	b.n	800373e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d106      	bne.n	8003658 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7fe fdb8 	bl	80021c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2224      	movs	r2, #36	@ 0x24
 800365c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0201 	bic.w	r2, r2, #1
 800366e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800367c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800368c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d107      	bne.n	80036a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689a      	ldr	r2, [r3, #8]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036a2:	609a      	str	r2, [r3, #8]
 80036a4:	e006      	b.n	80036b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	689a      	ldr	r2, [r3, #8]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80036b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d104      	bne.n	80036c6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80036c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6859      	ldr	r1, [r3, #4]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003748 <HAL_I2C_Init+0x11c>)
 80036d2:	430b      	orrs	r3, r1
 80036d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68da      	ldr	r2, [r3, #12]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	691a      	ldr	r2, [r3, #16]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	69d9      	ldr	r1, [r3, #28]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a1a      	ldr	r2, [r3, #32]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f042 0201 	orr.w	r2, r2, #1
 800371e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2220      	movs	r2, #32
 800372a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	02008000 	.word	0x02008000

0800374c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b20      	cmp	r3, #32
 8003760:	d138      	bne.n	80037d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003768:	2b01      	cmp	r3, #1
 800376a:	d101      	bne.n	8003770 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800376c:	2302      	movs	r3, #2
 800376e:	e032      	b.n	80037d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2224      	movs	r2, #36	@ 0x24
 800377c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 0201 	bic.w	r2, r2, #1
 800378e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800379e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6819      	ldr	r1, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	683a      	ldr	r2, [r7, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f042 0201 	orr.w	r2, r2, #1
 80037be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2220      	movs	r2, #32
 80037c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80037d0:	2300      	movs	r3, #0
 80037d2:	e000      	b.n	80037d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80037d4:	2302      	movs	r3, #2
  }
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b085      	sub	sp, #20
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
 80037ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b20      	cmp	r3, #32
 80037f6:	d139      	bne.n	800386c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d101      	bne.n	8003806 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003802:	2302      	movs	r3, #2
 8003804:	e033      	b.n	800386e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2224      	movs	r2, #36	@ 0x24
 8003812:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0201 	bic.w	r2, r2, #1
 8003824:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003834:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	021b      	lsls	r3, r3, #8
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	4313      	orrs	r3, r2
 800383e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f042 0201 	orr.w	r2, r2, #1
 8003856:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2220      	movs	r2, #32
 800385c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003868:	2300      	movs	r3, #0
 800386a:	e000      	b.n	800386e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800386c:	2302      	movs	r3, #2
  }
}
 800386e:	4618      	mov	r0, r3
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
	...

0800387c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003882:	2300      	movs	r3, #0
 8003884:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003886:	4b23      	ldr	r3, [pc, #140]	@ (8003914 <HAL_PWREx_EnableOverDrive+0x98>)
 8003888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388a:	4a22      	ldr	r2, [pc, #136]	@ (8003914 <HAL_PWREx_EnableOverDrive+0x98>)
 800388c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003890:	6413      	str	r3, [r2, #64]	@ 0x40
 8003892:	4b20      	ldr	r3, [pc, #128]	@ (8003914 <HAL_PWREx_EnableOverDrive+0x98>)
 8003894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800389a:	603b      	str	r3, [r7, #0]
 800389c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800389e:	4b1e      	ldr	r3, [pc, #120]	@ (8003918 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a1d      	ldr	r2, [pc, #116]	@ (8003918 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038a8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038aa:	f7fe ffd9 	bl	8002860 <HAL_GetTick>
 80038ae:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80038b0:	e009      	b.n	80038c6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80038b2:	f7fe ffd5 	bl	8002860 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80038c0:	d901      	bls.n	80038c6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e022      	b.n	800390c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80038c6:	4b14      	ldr	r3, [pc, #80]	@ (8003918 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038d2:	d1ee      	bne.n	80038b2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80038d4:	4b10      	ldr	r3, [pc, #64]	@ (8003918 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a0f      	ldr	r2, [pc, #60]	@ (8003918 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038de:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038e0:	f7fe ffbe 	bl	8002860 <HAL_GetTick>
 80038e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80038e6:	e009      	b.n	80038fc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80038e8:	f7fe ffba 	bl	8002860 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80038f6:	d901      	bls.n	80038fc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e007      	b.n	800390c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80038fc:	4b06      	ldr	r3, [pc, #24]	@ (8003918 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003904:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003908:	d1ee      	bne.n	80038e8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	40023800 	.word	0x40023800
 8003918:	40007000 	.word	0x40007000

0800391c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003924:	2300      	movs	r3, #0
 8003926:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e291      	b.n	8003e56 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 8087 	beq.w	8003a4e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003940:	4b96      	ldr	r3, [pc, #600]	@ (8003b9c <HAL_RCC_OscConfig+0x280>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f003 030c 	and.w	r3, r3, #12
 8003948:	2b04      	cmp	r3, #4
 800394a:	d00c      	beq.n	8003966 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800394c:	4b93      	ldr	r3, [pc, #588]	@ (8003b9c <HAL_RCC_OscConfig+0x280>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f003 030c 	and.w	r3, r3, #12
 8003954:	2b08      	cmp	r3, #8
 8003956:	d112      	bne.n	800397e <HAL_RCC_OscConfig+0x62>
 8003958:	4b90      	ldr	r3, [pc, #576]	@ (8003b9c <HAL_RCC_OscConfig+0x280>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003960:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003964:	d10b      	bne.n	800397e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003966:	4b8d      	ldr	r3, [pc, #564]	@ (8003b9c <HAL_RCC_OscConfig+0x280>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d06c      	beq.n	8003a4c <HAL_RCC_OscConfig+0x130>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d168      	bne.n	8003a4c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e26b      	b.n	8003e56 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003986:	d106      	bne.n	8003996 <HAL_RCC_OscConfig+0x7a>
 8003988:	4b84      	ldr	r3, [pc, #528]	@ (8003b9c <HAL_RCC_OscConfig+0x280>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a83      	ldr	r2, [pc, #524]	@ (8003b9c <HAL_RCC_OscConfig+0x280>)
 800398e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003992:	6013      	str	r3, [r2, #0]
 8003994:	e02e      	b.n	80039f4 <HAL_RCC_OscConfig+0xd8>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10c      	bne.n	80039b8 <HAL_RCC_OscConfig+0x9c>
 800399e:	4b7f      	ldr	r3, [pc, #508]	@ (8003b9c <HAL_RCC_OscConfig+0x280>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a7e      	ldr	r2, [pc, #504]	@ (8003b9c <HAL_RCC_OscConfig+0x280>)
 80039a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039a8:	6013      	str	r3, [r2, #0]
 80039aa:	4b7c      	ldr	r3, [pc, #496]	@ (8003b9c <HAL_RCC_OscConfig+0x280>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a7b      	ldr	r2, [pc, #492]	@ (8003b9c <HAL_RCC_OscConfig+0x280>)
 80039b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	e01d      	b.n	80039f4 <HAL_RCC_OscConfig+0xd8>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039c0:	d10c      	bne.n	80039dc <HAL_RCC_OscConfig+0xc0>
 80039c2:	4b76      	ldr	r3, [pc, #472]	@ (8003b9c <HAL_RCC_OscConfig+0x280>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a75      	ldr	r2, [pc, #468]	@ (8003b9c <HAL_RCC_OscConfig+0x280>)
 80039c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	4b73      	ldr	r3, [pc, #460]	@ (8003b9c <HAL_RCC_OscConfig+0x280>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a72      	ldr	r2, [pc, #456]	@ (8003b9c <HAL_RCC_OscConfig+0x280>)
 80039d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	e00b      	b.n	80039f4 <HAL_RCC_OscConfig+0xd8>
 80039dc:	4b6f      	ldr	r3, [pc, #444]	@ (8003b9c <HAL_RCC_OscConfig+0x280>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a6e      	ldr	r2, [pc, #440]	@ (8003b9c <HAL_RCC_OscConfig+0x280>)
 80039e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039e6:	6013      	str	r3, [r2, #0]
 80039e8:	4b6c      	ldr	r3, [pc, #432]	@ (8003b9c <HAL_RCC_OscConfig+0x280>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a6b      	ldr	r2, [pc, #428]	@ (8003b9c <HAL_RCC_OscConfig+0x280>)
 80039ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d013      	beq.n	8003a24 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fc:	f7fe ff30 	bl	8002860 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a04:	f7fe ff2c 	bl	8002860 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b64      	cmp	r3, #100	@ 0x64
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e21f      	b.n	8003e56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a16:	4b61      	ldr	r3, [pc, #388]	@ (8003b9c <HAL_RCC_OscConfig+0x280>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0f0      	beq.n	8003a04 <HAL_RCC_OscConfig+0xe8>
 8003a22:	e014      	b.n	8003a4e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a24:	f7fe ff1c 	bl	8002860 <HAL_GetTick>
 8003a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a2a:	e008      	b.n	8003a3e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a2c:	f7fe ff18 	bl	8002860 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b64      	cmp	r3, #100	@ 0x64
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e20b      	b.n	8003e56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a3e:	4b57      	ldr	r3, [pc, #348]	@ (8003b9c <HAL_RCC_OscConfig+0x280>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1f0      	bne.n	8003a2c <HAL_RCC_OscConfig+0x110>
 8003a4a:	e000      	b.n	8003a4e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d069      	beq.n	8003b2e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a5a:	4b50      	ldr	r3, [pc, #320]	@ (8003b9c <HAL_RCC_OscConfig+0x280>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f003 030c 	and.w	r3, r3, #12
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00b      	beq.n	8003a7e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a66:	4b4d      	ldr	r3, [pc, #308]	@ (8003b9c <HAL_RCC_OscConfig+0x280>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 030c 	and.w	r3, r3, #12
 8003a6e:	2b08      	cmp	r3, #8
 8003a70:	d11c      	bne.n	8003aac <HAL_RCC_OscConfig+0x190>
 8003a72:	4b4a      	ldr	r3, [pc, #296]	@ (8003b9c <HAL_RCC_OscConfig+0x280>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d116      	bne.n	8003aac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a7e:	4b47      	ldr	r3, [pc, #284]	@ (8003b9c <HAL_RCC_OscConfig+0x280>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d005      	beq.n	8003a96 <HAL_RCC_OscConfig+0x17a>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d001      	beq.n	8003a96 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e1df      	b.n	8003e56 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a96:	4b41      	ldr	r3, [pc, #260]	@ (8003b9c <HAL_RCC_OscConfig+0x280>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	493d      	ldr	r1, [pc, #244]	@ (8003b9c <HAL_RCC_OscConfig+0x280>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aaa:	e040      	b.n	8003b2e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d023      	beq.n	8003afc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ab4:	4b39      	ldr	r3, [pc, #228]	@ (8003b9c <HAL_RCC_OscConfig+0x280>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a38      	ldr	r2, [pc, #224]	@ (8003b9c <HAL_RCC_OscConfig+0x280>)
 8003aba:	f043 0301 	orr.w	r3, r3, #1
 8003abe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac0:	f7fe fece 	bl	8002860 <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ac8:	f7fe feca 	bl	8002860 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e1bd      	b.n	8003e56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ada:	4b30      	ldr	r3, [pc, #192]	@ (8003b9c <HAL_RCC_OscConfig+0x280>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d0f0      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae6:	4b2d      	ldr	r3, [pc, #180]	@ (8003b9c <HAL_RCC_OscConfig+0x280>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	4929      	ldr	r1, [pc, #164]	@ (8003b9c <HAL_RCC_OscConfig+0x280>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	600b      	str	r3, [r1, #0]
 8003afa:	e018      	b.n	8003b2e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003afc:	4b27      	ldr	r3, [pc, #156]	@ (8003b9c <HAL_RCC_OscConfig+0x280>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a26      	ldr	r2, [pc, #152]	@ (8003b9c <HAL_RCC_OscConfig+0x280>)
 8003b02:	f023 0301 	bic.w	r3, r3, #1
 8003b06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b08:	f7fe feaa 	bl	8002860 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b10:	f7fe fea6 	bl	8002860 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e199      	b.n	8003e56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b22:	4b1e      	ldr	r3, [pc, #120]	@ (8003b9c <HAL_RCC_OscConfig+0x280>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1f0      	bne.n	8003b10 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d038      	beq.n	8003bac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d019      	beq.n	8003b76 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b42:	4b16      	ldr	r3, [pc, #88]	@ (8003b9c <HAL_RCC_OscConfig+0x280>)
 8003b44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b46:	4a15      	ldr	r2, [pc, #84]	@ (8003b9c <HAL_RCC_OscConfig+0x280>)
 8003b48:	f043 0301 	orr.w	r3, r3, #1
 8003b4c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4e:	f7fe fe87 	bl	8002860 <HAL_GetTick>
 8003b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b54:	e008      	b.n	8003b68 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b56:	f7fe fe83 	bl	8002860 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e176      	b.n	8003e56 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b68:	4b0c      	ldr	r3, [pc, #48]	@ (8003b9c <HAL_RCC_OscConfig+0x280>)
 8003b6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d0f0      	beq.n	8003b56 <HAL_RCC_OscConfig+0x23a>
 8003b74:	e01a      	b.n	8003bac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b76:	4b09      	ldr	r3, [pc, #36]	@ (8003b9c <HAL_RCC_OscConfig+0x280>)
 8003b78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b7a:	4a08      	ldr	r2, [pc, #32]	@ (8003b9c <HAL_RCC_OscConfig+0x280>)
 8003b7c:	f023 0301 	bic.w	r3, r3, #1
 8003b80:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b82:	f7fe fe6d 	bl	8002860 <HAL_GetTick>
 8003b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b88:	e00a      	b.n	8003ba0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b8a:	f7fe fe69 	bl	8002860 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d903      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e15c      	b.n	8003e56 <HAL_RCC_OscConfig+0x53a>
 8003b9c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ba0:	4b91      	ldr	r3, [pc, #580]	@ (8003de8 <HAL_RCC_OscConfig+0x4cc>)
 8003ba2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1ee      	bne.n	8003b8a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0304 	and.w	r3, r3, #4
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 80a4 	beq.w	8003d02 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bba:	4b8b      	ldr	r3, [pc, #556]	@ (8003de8 <HAL_RCC_OscConfig+0x4cc>)
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10d      	bne.n	8003be2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bc6:	4b88      	ldr	r3, [pc, #544]	@ (8003de8 <HAL_RCC_OscConfig+0x4cc>)
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bca:	4a87      	ldr	r2, [pc, #540]	@ (8003de8 <HAL_RCC_OscConfig+0x4cc>)
 8003bcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bd2:	4b85      	ldr	r3, [pc, #532]	@ (8003de8 <HAL_RCC_OscConfig+0x4cc>)
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bda:	60bb      	str	r3, [r7, #8]
 8003bdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bde:	2301      	movs	r3, #1
 8003be0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003be2:	4b82      	ldr	r3, [pc, #520]	@ (8003dec <HAL_RCC_OscConfig+0x4d0>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d118      	bne.n	8003c20 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003bee:	4b7f      	ldr	r3, [pc, #508]	@ (8003dec <HAL_RCC_OscConfig+0x4d0>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a7e      	ldr	r2, [pc, #504]	@ (8003dec <HAL_RCC_OscConfig+0x4d0>)
 8003bf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bfa:	f7fe fe31 	bl	8002860 <HAL_GetTick>
 8003bfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c00:	e008      	b.n	8003c14 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c02:	f7fe fe2d 	bl	8002860 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b64      	cmp	r3, #100	@ 0x64
 8003c0e:	d901      	bls.n	8003c14 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e120      	b.n	8003e56 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c14:	4b75      	ldr	r3, [pc, #468]	@ (8003dec <HAL_RCC_OscConfig+0x4d0>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d0f0      	beq.n	8003c02 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d106      	bne.n	8003c36 <HAL_RCC_OscConfig+0x31a>
 8003c28:	4b6f      	ldr	r3, [pc, #444]	@ (8003de8 <HAL_RCC_OscConfig+0x4cc>)
 8003c2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c2c:	4a6e      	ldr	r2, [pc, #440]	@ (8003de8 <HAL_RCC_OscConfig+0x4cc>)
 8003c2e:	f043 0301 	orr.w	r3, r3, #1
 8003c32:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c34:	e02d      	b.n	8003c92 <HAL_RCC_OscConfig+0x376>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10c      	bne.n	8003c58 <HAL_RCC_OscConfig+0x33c>
 8003c3e:	4b6a      	ldr	r3, [pc, #424]	@ (8003de8 <HAL_RCC_OscConfig+0x4cc>)
 8003c40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c42:	4a69      	ldr	r2, [pc, #420]	@ (8003de8 <HAL_RCC_OscConfig+0x4cc>)
 8003c44:	f023 0301 	bic.w	r3, r3, #1
 8003c48:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c4a:	4b67      	ldr	r3, [pc, #412]	@ (8003de8 <HAL_RCC_OscConfig+0x4cc>)
 8003c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c4e:	4a66      	ldr	r2, [pc, #408]	@ (8003de8 <HAL_RCC_OscConfig+0x4cc>)
 8003c50:	f023 0304 	bic.w	r3, r3, #4
 8003c54:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c56:	e01c      	b.n	8003c92 <HAL_RCC_OscConfig+0x376>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	2b05      	cmp	r3, #5
 8003c5e:	d10c      	bne.n	8003c7a <HAL_RCC_OscConfig+0x35e>
 8003c60:	4b61      	ldr	r3, [pc, #388]	@ (8003de8 <HAL_RCC_OscConfig+0x4cc>)
 8003c62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c64:	4a60      	ldr	r2, [pc, #384]	@ (8003de8 <HAL_RCC_OscConfig+0x4cc>)
 8003c66:	f043 0304 	orr.w	r3, r3, #4
 8003c6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c6c:	4b5e      	ldr	r3, [pc, #376]	@ (8003de8 <HAL_RCC_OscConfig+0x4cc>)
 8003c6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c70:	4a5d      	ldr	r2, [pc, #372]	@ (8003de8 <HAL_RCC_OscConfig+0x4cc>)
 8003c72:	f043 0301 	orr.w	r3, r3, #1
 8003c76:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c78:	e00b      	b.n	8003c92 <HAL_RCC_OscConfig+0x376>
 8003c7a:	4b5b      	ldr	r3, [pc, #364]	@ (8003de8 <HAL_RCC_OscConfig+0x4cc>)
 8003c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c7e:	4a5a      	ldr	r2, [pc, #360]	@ (8003de8 <HAL_RCC_OscConfig+0x4cc>)
 8003c80:	f023 0301 	bic.w	r3, r3, #1
 8003c84:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c86:	4b58      	ldr	r3, [pc, #352]	@ (8003de8 <HAL_RCC_OscConfig+0x4cc>)
 8003c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c8a:	4a57      	ldr	r2, [pc, #348]	@ (8003de8 <HAL_RCC_OscConfig+0x4cc>)
 8003c8c:	f023 0304 	bic.w	r3, r3, #4
 8003c90:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d015      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c9a:	f7fe fde1 	bl	8002860 <HAL_GetTick>
 8003c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca0:	e00a      	b.n	8003cb8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ca2:	f7fe fddd 	bl	8002860 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e0ce      	b.n	8003e56 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cb8:	4b4b      	ldr	r3, [pc, #300]	@ (8003de8 <HAL_RCC_OscConfig+0x4cc>)
 8003cba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d0ee      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x386>
 8003cc4:	e014      	b.n	8003cf0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc6:	f7fe fdcb 	bl	8002860 <HAL_GetTick>
 8003cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ccc:	e00a      	b.n	8003ce4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cce:	f7fe fdc7 	bl	8002860 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e0b8      	b.n	8003e56 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ce4:	4b40      	ldr	r3, [pc, #256]	@ (8003de8 <HAL_RCC_OscConfig+0x4cc>)
 8003ce6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1ee      	bne.n	8003cce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003cf0:	7dfb      	ldrb	r3, [r7, #23]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d105      	bne.n	8003d02 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cf6:	4b3c      	ldr	r3, [pc, #240]	@ (8003de8 <HAL_RCC_OscConfig+0x4cc>)
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfa:	4a3b      	ldr	r2, [pc, #236]	@ (8003de8 <HAL_RCC_OscConfig+0x4cc>)
 8003cfc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d00:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f000 80a4 	beq.w	8003e54 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d0c:	4b36      	ldr	r3, [pc, #216]	@ (8003de8 <HAL_RCC_OscConfig+0x4cc>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f003 030c 	and.w	r3, r3, #12
 8003d14:	2b08      	cmp	r3, #8
 8003d16:	d06b      	beq.n	8003df0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d149      	bne.n	8003db4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d20:	4b31      	ldr	r3, [pc, #196]	@ (8003de8 <HAL_RCC_OscConfig+0x4cc>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a30      	ldr	r2, [pc, #192]	@ (8003de8 <HAL_RCC_OscConfig+0x4cc>)
 8003d26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2c:	f7fe fd98 	bl	8002860 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d34:	f7fe fd94 	bl	8002860 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e087      	b.n	8003e56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d46:	4b28      	ldr	r3, [pc, #160]	@ (8003de8 <HAL_RCC_OscConfig+0x4cc>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1f0      	bne.n	8003d34 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	69da      	ldr	r2, [r3, #28]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d60:	019b      	lsls	r3, r3, #6
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d68:	085b      	lsrs	r3, r3, #1
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	041b      	lsls	r3, r3, #16
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d74:	061b      	lsls	r3, r3, #24
 8003d76:	4313      	orrs	r3, r2
 8003d78:	4a1b      	ldr	r2, [pc, #108]	@ (8003de8 <HAL_RCC_OscConfig+0x4cc>)
 8003d7a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003d7e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d80:	4b19      	ldr	r3, [pc, #100]	@ (8003de8 <HAL_RCC_OscConfig+0x4cc>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a18      	ldr	r2, [pc, #96]	@ (8003de8 <HAL_RCC_OscConfig+0x4cc>)
 8003d86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8c:	f7fe fd68 	bl	8002860 <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d94:	f7fe fd64 	bl	8002860 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e057      	b.n	8003e56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003da6:	4b10      	ldr	r3, [pc, #64]	@ (8003de8 <HAL_RCC_OscConfig+0x4cc>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0f0      	beq.n	8003d94 <HAL_RCC_OscConfig+0x478>
 8003db2:	e04f      	b.n	8003e54 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003db4:	4b0c      	ldr	r3, [pc, #48]	@ (8003de8 <HAL_RCC_OscConfig+0x4cc>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a0b      	ldr	r2, [pc, #44]	@ (8003de8 <HAL_RCC_OscConfig+0x4cc>)
 8003dba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003dbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc0:	f7fe fd4e 	bl	8002860 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc8:	f7fe fd4a 	bl	8002860 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e03d      	b.n	8003e56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dda:	4b03      	ldr	r3, [pc, #12]	@ (8003de8 <HAL_RCC_OscConfig+0x4cc>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1f0      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x4ac>
 8003de6:	e035      	b.n	8003e54 <HAL_RCC_OscConfig+0x538>
 8003de8:	40023800 	.word	0x40023800
 8003dec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003df0:	4b1b      	ldr	r3, [pc, #108]	@ (8003e60 <HAL_RCC_OscConfig+0x544>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d028      	beq.n	8003e50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d121      	bne.n	8003e50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d11a      	bne.n	8003e50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e20:	4013      	ands	r3, r2
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e26:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d111      	bne.n	8003e50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e36:	085b      	lsrs	r3, r3, #1
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d107      	bne.n	8003e50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e4a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d001      	beq.n	8003e54 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e000      	b.n	8003e56 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3718      	adds	r7, #24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	40023800 	.word	0x40023800

08003e64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e0d0      	b.n	800401e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e7c:	4b6a      	ldr	r3, [pc, #424]	@ (8004028 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 030f 	and.w	r3, r3, #15
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d910      	bls.n	8003eac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e8a:	4b67      	ldr	r3, [pc, #412]	@ (8004028 <HAL_RCC_ClockConfig+0x1c4>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f023 020f 	bic.w	r2, r3, #15
 8003e92:	4965      	ldr	r1, [pc, #404]	@ (8004028 <HAL_RCC_ClockConfig+0x1c4>)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e9a:	4b63      	ldr	r3, [pc, #396]	@ (8004028 <HAL_RCC_ClockConfig+0x1c4>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 030f 	and.w	r3, r3, #15
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d001      	beq.n	8003eac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e0b8      	b.n	800401e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d020      	beq.n	8003efa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0304 	and.w	r3, r3, #4
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d005      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ec4:	4b59      	ldr	r3, [pc, #356]	@ (800402c <HAL_RCC_ClockConfig+0x1c8>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	4a58      	ldr	r2, [pc, #352]	@ (800402c <HAL_RCC_ClockConfig+0x1c8>)
 8003eca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003ece:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0308 	and.w	r3, r3, #8
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d005      	beq.n	8003ee8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003edc:	4b53      	ldr	r3, [pc, #332]	@ (800402c <HAL_RCC_ClockConfig+0x1c8>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	4a52      	ldr	r2, [pc, #328]	@ (800402c <HAL_RCC_ClockConfig+0x1c8>)
 8003ee2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003ee6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ee8:	4b50      	ldr	r3, [pc, #320]	@ (800402c <HAL_RCC_ClockConfig+0x1c8>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	494d      	ldr	r1, [pc, #308]	@ (800402c <HAL_RCC_ClockConfig+0x1c8>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d040      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d107      	bne.n	8003f1e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f0e:	4b47      	ldr	r3, [pc, #284]	@ (800402c <HAL_RCC_ClockConfig+0x1c8>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d115      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e07f      	b.n	800401e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d107      	bne.n	8003f36 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f26:	4b41      	ldr	r3, [pc, #260]	@ (800402c <HAL_RCC_ClockConfig+0x1c8>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d109      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e073      	b.n	800401e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f36:	4b3d      	ldr	r3, [pc, #244]	@ (800402c <HAL_RCC_ClockConfig+0x1c8>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e06b      	b.n	800401e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f46:	4b39      	ldr	r3, [pc, #228]	@ (800402c <HAL_RCC_ClockConfig+0x1c8>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f023 0203 	bic.w	r2, r3, #3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	4936      	ldr	r1, [pc, #216]	@ (800402c <HAL_RCC_ClockConfig+0x1c8>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f58:	f7fe fc82 	bl	8002860 <HAL_GetTick>
 8003f5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f5e:	e00a      	b.n	8003f76 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f60:	f7fe fc7e 	bl	8002860 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e053      	b.n	800401e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f76:	4b2d      	ldr	r3, [pc, #180]	@ (800402c <HAL_RCC_ClockConfig+0x1c8>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 020c 	and.w	r2, r3, #12
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d1eb      	bne.n	8003f60 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f88:	4b27      	ldr	r3, [pc, #156]	@ (8004028 <HAL_RCC_ClockConfig+0x1c4>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 030f 	and.w	r3, r3, #15
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d210      	bcs.n	8003fb8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f96:	4b24      	ldr	r3, [pc, #144]	@ (8004028 <HAL_RCC_ClockConfig+0x1c4>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f023 020f 	bic.w	r2, r3, #15
 8003f9e:	4922      	ldr	r1, [pc, #136]	@ (8004028 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fa6:	4b20      	ldr	r3, [pc, #128]	@ (8004028 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 030f 	and.w	r3, r3, #15
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d001      	beq.n	8003fb8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e032      	b.n	800401e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d008      	beq.n	8003fd6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fc4:	4b19      	ldr	r3, [pc, #100]	@ (800402c <HAL_RCC_ClockConfig+0x1c8>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	4916      	ldr	r1, [pc, #88]	@ (800402c <HAL_RCC_ClockConfig+0x1c8>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0308 	and.w	r3, r3, #8
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d009      	beq.n	8003ff6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003fe2:	4b12      	ldr	r3, [pc, #72]	@ (800402c <HAL_RCC_ClockConfig+0x1c8>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	490e      	ldr	r1, [pc, #56]	@ (800402c <HAL_RCC_ClockConfig+0x1c8>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ff6:	f000 f821 	bl	800403c <HAL_RCC_GetSysClockFreq>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800402c <HAL_RCC_ClockConfig+0x1c8>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	091b      	lsrs	r3, r3, #4
 8004002:	f003 030f 	and.w	r3, r3, #15
 8004006:	490a      	ldr	r1, [pc, #40]	@ (8004030 <HAL_RCC_ClockConfig+0x1cc>)
 8004008:	5ccb      	ldrb	r3, [r1, r3]
 800400a:	fa22 f303 	lsr.w	r3, r2, r3
 800400e:	4a09      	ldr	r2, [pc, #36]	@ (8004034 <HAL_RCC_ClockConfig+0x1d0>)
 8004010:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004012:	4b09      	ldr	r3, [pc, #36]	@ (8004038 <HAL_RCC_ClockConfig+0x1d4>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f7fe fbde 	bl	80027d8 <HAL_InitTick>

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	40023c00 	.word	0x40023c00
 800402c:	40023800 	.word	0x40023800
 8004030:	08008908 	.word	0x08008908
 8004034:	20000014 	.word	0x20000014
 8004038:	20000018 	.word	0x20000018

0800403c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800403c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004040:	b090      	sub	sp, #64	@ 0x40
 8004042:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004044:	2300      	movs	r3, #0
 8004046:	637b      	str	r3, [r7, #52]	@ 0x34
 8004048:	2300      	movs	r3, #0
 800404a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800404c:	2300      	movs	r3, #0
 800404e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8004050:	2300      	movs	r3, #0
 8004052:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004054:	4b59      	ldr	r3, [pc, #356]	@ (80041bc <HAL_RCC_GetSysClockFreq+0x180>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f003 030c 	and.w	r3, r3, #12
 800405c:	2b08      	cmp	r3, #8
 800405e:	d00d      	beq.n	800407c <HAL_RCC_GetSysClockFreq+0x40>
 8004060:	2b08      	cmp	r3, #8
 8004062:	f200 80a1 	bhi.w	80041a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004066:	2b00      	cmp	r3, #0
 8004068:	d002      	beq.n	8004070 <HAL_RCC_GetSysClockFreq+0x34>
 800406a:	2b04      	cmp	r3, #4
 800406c:	d003      	beq.n	8004076 <HAL_RCC_GetSysClockFreq+0x3a>
 800406e:	e09b      	b.n	80041a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004070:	4b53      	ldr	r3, [pc, #332]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004072:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004074:	e09b      	b.n	80041ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004076:	4b53      	ldr	r3, [pc, #332]	@ (80041c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004078:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800407a:	e098      	b.n	80041ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800407c:	4b4f      	ldr	r3, [pc, #316]	@ (80041bc <HAL_RCC_GetSysClockFreq+0x180>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004084:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004086:	4b4d      	ldr	r3, [pc, #308]	@ (80041bc <HAL_RCC_GetSysClockFreq+0x180>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d028      	beq.n	80040e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004092:	4b4a      	ldr	r3, [pc, #296]	@ (80041bc <HAL_RCC_GetSysClockFreq+0x180>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	099b      	lsrs	r3, r3, #6
 8004098:	2200      	movs	r2, #0
 800409a:	623b      	str	r3, [r7, #32]
 800409c:	627a      	str	r2, [r7, #36]	@ 0x24
 800409e:	6a3b      	ldr	r3, [r7, #32]
 80040a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80040a4:	2100      	movs	r1, #0
 80040a6:	4b47      	ldr	r3, [pc, #284]	@ (80041c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80040a8:	fb03 f201 	mul.w	r2, r3, r1
 80040ac:	2300      	movs	r3, #0
 80040ae:	fb00 f303 	mul.w	r3, r0, r3
 80040b2:	4413      	add	r3, r2
 80040b4:	4a43      	ldr	r2, [pc, #268]	@ (80041c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80040b6:	fba0 1202 	umull	r1, r2, r0, r2
 80040ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040bc:	460a      	mov	r2, r1
 80040be:	62ba      	str	r2, [r7, #40]	@ 0x28
 80040c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040c2:	4413      	add	r3, r2
 80040c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040c8:	2200      	movs	r2, #0
 80040ca:	61bb      	str	r3, [r7, #24]
 80040cc:	61fa      	str	r2, [r7, #28]
 80040ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80040d6:	f7fc fdf7 	bl	8000cc8 <__aeabi_uldivmod>
 80040da:	4602      	mov	r2, r0
 80040dc:	460b      	mov	r3, r1
 80040de:	4613      	mov	r3, r2
 80040e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040e2:	e053      	b.n	800418c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040e4:	4b35      	ldr	r3, [pc, #212]	@ (80041bc <HAL_RCC_GetSysClockFreq+0x180>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	099b      	lsrs	r3, r3, #6
 80040ea:	2200      	movs	r2, #0
 80040ec:	613b      	str	r3, [r7, #16]
 80040ee:	617a      	str	r2, [r7, #20]
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80040f6:	f04f 0b00 	mov.w	fp, #0
 80040fa:	4652      	mov	r2, sl
 80040fc:	465b      	mov	r3, fp
 80040fe:	f04f 0000 	mov.w	r0, #0
 8004102:	f04f 0100 	mov.w	r1, #0
 8004106:	0159      	lsls	r1, r3, #5
 8004108:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800410c:	0150      	lsls	r0, r2, #5
 800410e:	4602      	mov	r2, r0
 8004110:	460b      	mov	r3, r1
 8004112:	ebb2 080a 	subs.w	r8, r2, sl
 8004116:	eb63 090b 	sbc.w	r9, r3, fp
 800411a:	f04f 0200 	mov.w	r2, #0
 800411e:	f04f 0300 	mov.w	r3, #0
 8004122:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004126:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800412a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800412e:	ebb2 0408 	subs.w	r4, r2, r8
 8004132:	eb63 0509 	sbc.w	r5, r3, r9
 8004136:	f04f 0200 	mov.w	r2, #0
 800413a:	f04f 0300 	mov.w	r3, #0
 800413e:	00eb      	lsls	r3, r5, #3
 8004140:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004144:	00e2      	lsls	r2, r4, #3
 8004146:	4614      	mov	r4, r2
 8004148:	461d      	mov	r5, r3
 800414a:	eb14 030a 	adds.w	r3, r4, sl
 800414e:	603b      	str	r3, [r7, #0]
 8004150:	eb45 030b 	adc.w	r3, r5, fp
 8004154:	607b      	str	r3, [r7, #4]
 8004156:	f04f 0200 	mov.w	r2, #0
 800415a:	f04f 0300 	mov.w	r3, #0
 800415e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004162:	4629      	mov	r1, r5
 8004164:	028b      	lsls	r3, r1, #10
 8004166:	4621      	mov	r1, r4
 8004168:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800416c:	4621      	mov	r1, r4
 800416e:	028a      	lsls	r2, r1, #10
 8004170:	4610      	mov	r0, r2
 8004172:	4619      	mov	r1, r3
 8004174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004176:	2200      	movs	r2, #0
 8004178:	60bb      	str	r3, [r7, #8]
 800417a:	60fa      	str	r2, [r7, #12]
 800417c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004180:	f7fc fda2 	bl	8000cc8 <__aeabi_uldivmod>
 8004184:	4602      	mov	r2, r0
 8004186:	460b      	mov	r3, r1
 8004188:	4613      	mov	r3, r2
 800418a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800418c:	4b0b      	ldr	r3, [pc, #44]	@ (80041bc <HAL_RCC_GetSysClockFreq+0x180>)
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	0c1b      	lsrs	r3, r3, #16
 8004192:	f003 0303 	and.w	r3, r3, #3
 8004196:	3301      	adds	r3, #1
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800419c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800419e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80041a6:	e002      	b.n	80041ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041a8:	4b05      	ldr	r3, [pc, #20]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80041aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80041ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3740      	adds	r7, #64	@ 0x40
 80041b4:	46bd      	mov	sp, r7
 80041b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041ba:	bf00      	nop
 80041bc:	40023800 	.word	0x40023800
 80041c0:	00f42400 	.word	0x00f42400
 80041c4:	017d7840 	.word	0x017d7840

080041c8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041cc:	4b03      	ldr	r3, [pc, #12]	@ (80041dc <HAL_RCC_GetHCLKFreq+0x14>)
 80041ce:	681b      	ldr	r3, [r3, #0]
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	20000014 	.word	0x20000014

080041e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041e4:	f7ff fff0 	bl	80041c8 <HAL_RCC_GetHCLKFreq>
 80041e8:	4602      	mov	r2, r0
 80041ea:	4b05      	ldr	r3, [pc, #20]	@ (8004200 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	0a9b      	lsrs	r3, r3, #10
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	4903      	ldr	r1, [pc, #12]	@ (8004204 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041f6:	5ccb      	ldrb	r3, [r1, r3]
 80041f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	40023800 	.word	0x40023800
 8004204:	08008918 	.word	0x08008918

08004208 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800420c:	f7ff ffdc 	bl	80041c8 <HAL_RCC_GetHCLKFreq>
 8004210:	4602      	mov	r2, r0
 8004212:	4b05      	ldr	r3, [pc, #20]	@ (8004228 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	0b5b      	lsrs	r3, r3, #13
 8004218:	f003 0307 	and.w	r3, r3, #7
 800421c:	4903      	ldr	r1, [pc, #12]	@ (800422c <HAL_RCC_GetPCLK2Freq+0x24>)
 800421e:	5ccb      	ldrb	r3, [r1, r3]
 8004220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004224:	4618      	mov	r0, r3
 8004226:	bd80      	pop	{r7, pc}
 8004228:	40023800 	.word	0x40023800
 800422c:	08008918 	.word	0x08008918

08004230 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b088      	sub	sp, #32
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004238:	2300      	movs	r3, #0
 800423a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800423c:	2300      	movs	r3, #0
 800423e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004240:	2300      	movs	r3, #0
 8004242:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004244:	2300      	movs	r3, #0
 8004246:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004248:	2300      	movs	r3, #0
 800424a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b00      	cmp	r3, #0
 8004256:	d012      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004258:	4b69      	ldr	r3, [pc, #420]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	4a68      	ldr	r2, [pc, #416]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800425e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004262:	6093      	str	r3, [r2, #8]
 8004264:	4b66      	ldr	r3, [pc, #408]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800426c:	4964      	ldr	r1, [pc, #400]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800426e:	4313      	orrs	r3, r2
 8004270:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800427a:	2301      	movs	r3, #1
 800427c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d017      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800428a:	4b5d      	ldr	r3, [pc, #372]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800428c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004290:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004298:	4959      	ldr	r1, [pc, #356]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800429a:	4313      	orrs	r3, r2
 800429c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042a8:	d101      	bne.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80042aa:	2301      	movs	r3, #1
 80042ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80042b6:	2301      	movs	r3, #1
 80042b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d017      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80042c6:	4b4e      	ldr	r3, [pc, #312]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042cc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d4:	494a      	ldr	r1, [pc, #296]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042e4:	d101      	bne.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80042e6:	2301      	movs	r3, #1
 80042e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80042f2:	2301      	movs	r3, #1
 80042f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004302:	2301      	movs	r3, #1
 8004304:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0320 	and.w	r3, r3, #32
 800430e:	2b00      	cmp	r3, #0
 8004310:	f000 808b 	beq.w	800442a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004314:	4b3a      	ldr	r3, [pc, #232]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004318:	4a39      	ldr	r2, [pc, #228]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800431a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800431e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004320:	4b37      	ldr	r3, [pc, #220]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004324:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004328:	60bb      	str	r3, [r7, #8]
 800432a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800432c:	4b35      	ldr	r3, [pc, #212]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a34      	ldr	r2, [pc, #208]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004332:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004336:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004338:	f7fe fa92 	bl	8002860 <HAL_GetTick>
 800433c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800433e:	e008      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004340:	f7fe fa8e 	bl	8002860 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b64      	cmp	r3, #100	@ 0x64
 800434c:	d901      	bls.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e357      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004352:	4b2c      	ldr	r3, [pc, #176]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800435a:	2b00      	cmp	r3, #0
 800435c:	d0f0      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800435e:	4b28      	ldr	r3, [pc, #160]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004362:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004366:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d035      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004372:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	429a      	cmp	r2, r3
 800437a:	d02e      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800437c:	4b20      	ldr	r3, [pc, #128]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800437e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004380:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004384:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004386:	4b1e      	ldr	r3, [pc, #120]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800438a:	4a1d      	ldr	r2, [pc, #116]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800438c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004390:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004392:	4b1b      	ldr	r3, [pc, #108]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004396:	4a1a      	ldr	r2, [pc, #104]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004398:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800439c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800439e:	4a18      	ldr	r2, [pc, #96]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80043a4:	4b16      	ldr	r3, [pc, #88]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043a8:	f003 0301 	and.w	r3, r3, #1
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d114      	bne.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b0:	f7fe fa56 	bl	8002860 <HAL_GetTick>
 80043b4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b6:	e00a      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043b8:	f7fe fa52 	bl	8002860 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d901      	bls.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e319      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ce:	4b0c      	ldr	r3, [pc, #48]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d0ee      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043e6:	d111      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80043e8:	4b05      	ldr	r3, [pc, #20]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80043f4:	4b04      	ldr	r3, [pc, #16]	@ (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80043f6:	400b      	ands	r3, r1
 80043f8:	4901      	ldr	r1, [pc, #4]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	608b      	str	r3, [r1, #8]
 80043fe:	e00b      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004400:	40023800 	.word	0x40023800
 8004404:	40007000 	.word	0x40007000
 8004408:	0ffffcff 	.word	0x0ffffcff
 800440c:	4baa      	ldr	r3, [pc, #680]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	4aa9      	ldr	r2, [pc, #676]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004412:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004416:	6093      	str	r3, [r2, #8]
 8004418:	4ba7      	ldr	r3, [pc, #668]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800441a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004420:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004424:	49a4      	ldr	r1, [pc, #656]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004426:	4313      	orrs	r3, r2
 8004428:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0310 	and.w	r3, r3, #16
 8004432:	2b00      	cmp	r3, #0
 8004434:	d010      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004436:	4ba0      	ldr	r3, [pc, #640]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004438:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800443c:	4a9e      	ldr	r2, [pc, #632]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800443e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004442:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004446:	4b9c      	ldr	r3, [pc, #624]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004448:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004450:	4999      	ldr	r1, [pc, #612]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004452:	4313      	orrs	r3, r2
 8004454:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00a      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004464:	4b94      	ldr	r3, [pc, #592]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800446a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004472:	4991      	ldr	r1, [pc, #580]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004474:	4313      	orrs	r3, r2
 8004476:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00a      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004486:	4b8c      	ldr	r3, [pc, #560]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800448c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004494:	4988      	ldr	r1, [pc, #544]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004496:	4313      	orrs	r3, r2
 8004498:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00a      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80044a8:	4b83      	ldr	r3, [pc, #524]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044b6:	4980      	ldr	r1, [pc, #512]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00a      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044ca:	4b7b      	ldr	r3, [pc, #492]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044d0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044d8:	4977      	ldr	r1, [pc, #476]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00a      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044ec:	4b72      	ldr	r3, [pc, #456]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044f2:	f023 0203 	bic.w	r2, r3, #3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044fa:	496f      	ldr	r1, [pc, #444]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00a      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800450e:	4b6a      	ldr	r3, [pc, #424]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004514:	f023 020c 	bic.w	r2, r3, #12
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800451c:	4966      	ldr	r1, [pc, #408]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800451e:	4313      	orrs	r3, r2
 8004520:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00a      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004530:	4b61      	ldr	r3, [pc, #388]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004536:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800453e:	495e      	ldr	r1, [pc, #376]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004540:	4313      	orrs	r3, r2
 8004542:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00a      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004552:	4b59      	ldr	r3, [pc, #356]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004554:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004558:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004560:	4955      	ldr	r1, [pc, #340]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004562:	4313      	orrs	r3, r2
 8004564:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00a      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004574:	4b50      	ldr	r3, [pc, #320]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004576:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800457a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004582:	494d      	ldr	r1, [pc, #308]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004584:	4313      	orrs	r3, r2
 8004586:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00a      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004596:	4b48      	ldr	r3, [pc, #288]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004598:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800459c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045a4:	4944      	ldr	r1, [pc, #272]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00a      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80045b8:	4b3f      	ldr	r3, [pc, #252]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045be:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045c6:	493c      	ldr	r1, [pc, #240]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00a      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80045da:	4b37      	ldr	r3, [pc, #220]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045e0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045e8:	4933      	ldr	r1, [pc, #204]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00a      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80045fc:	4b2e      	ldr	r3, [pc, #184]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004602:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800460a:	492b      	ldr	r1, [pc, #172]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800460c:	4313      	orrs	r3, r2
 800460e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d011      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800461e:	4b26      	ldr	r3, [pc, #152]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004620:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004624:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800462c:	4922      	ldr	r1, [pc, #136]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800462e:	4313      	orrs	r3, r2
 8004630:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004638:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800463c:	d101      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800463e:	2301      	movs	r3, #1
 8004640:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0308 	and.w	r3, r3, #8
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800464e:	2301      	movs	r3, #1
 8004650:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00a      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800465e:	4b16      	ldr	r3, [pc, #88]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004664:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800466c:	4912      	ldr	r1, [pc, #72]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800466e:	4313      	orrs	r3, r2
 8004670:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00b      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004680:	4b0d      	ldr	r3, [pc, #52]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004686:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004690:	4909      	ldr	r1, [pc, #36]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004692:	4313      	orrs	r3, r2
 8004694:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d006      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f000 80d9 	beq.w	800485e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80046ac:	4b02      	ldr	r3, [pc, #8]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a01      	ldr	r2, [pc, #4]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80046b6:	e001      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80046b8:	40023800 	.word	0x40023800
 80046bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046be:	f7fe f8cf 	bl	8002860 <HAL_GetTick>
 80046c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046c4:	e008      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80046c6:	f7fe f8cb 	bl	8002860 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b64      	cmp	r3, #100	@ 0x64
 80046d2:	d901      	bls.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e194      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046d8:	4b6c      	ldr	r3, [pc, #432]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1f0      	bne.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d021      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d11d      	bne.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80046f8:	4b64      	ldr	r3, [pc, #400]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046fe:	0c1b      	lsrs	r3, r3, #16
 8004700:	f003 0303 	and.w	r3, r3, #3
 8004704:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004706:	4b61      	ldr	r3, [pc, #388]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004708:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800470c:	0e1b      	lsrs	r3, r3, #24
 800470e:	f003 030f 	and.w	r3, r3, #15
 8004712:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	019a      	lsls	r2, r3, #6
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	041b      	lsls	r3, r3, #16
 800471e:	431a      	orrs	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	061b      	lsls	r3, r3, #24
 8004724:	431a      	orrs	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	071b      	lsls	r3, r3, #28
 800472c:	4957      	ldr	r1, [pc, #348]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800472e:	4313      	orrs	r3, r2
 8004730:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d004      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004744:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004748:	d00a      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004752:	2b00      	cmp	r3, #0
 8004754:	d02e      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800475a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800475e:	d129      	bne.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004760:	4b4a      	ldr	r3, [pc, #296]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004762:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004766:	0c1b      	lsrs	r3, r3, #16
 8004768:	f003 0303 	and.w	r3, r3, #3
 800476c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800476e:	4b47      	ldr	r3, [pc, #284]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004770:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004774:	0f1b      	lsrs	r3, r3, #28
 8004776:	f003 0307 	and.w	r3, r3, #7
 800477a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	019a      	lsls	r2, r3, #6
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	041b      	lsls	r3, r3, #16
 8004786:	431a      	orrs	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	061b      	lsls	r3, r3, #24
 800478e:	431a      	orrs	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	071b      	lsls	r3, r3, #28
 8004794:	493d      	ldr	r1, [pc, #244]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004796:	4313      	orrs	r3, r2
 8004798:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800479c:	4b3b      	ldr	r3, [pc, #236]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800479e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047a2:	f023 021f 	bic.w	r2, r3, #31
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047aa:	3b01      	subs	r3, #1
 80047ac:	4937      	ldr	r1, [pc, #220]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d01d      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80047c0:	4b32      	ldr	r3, [pc, #200]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047c6:	0e1b      	lsrs	r3, r3, #24
 80047c8:	f003 030f 	and.w	r3, r3, #15
 80047cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80047ce:	4b2f      	ldr	r3, [pc, #188]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047d4:	0f1b      	lsrs	r3, r3, #28
 80047d6:	f003 0307 	and.w	r3, r3, #7
 80047da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	019a      	lsls	r2, r3, #6
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	041b      	lsls	r3, r3, #16
 80047e8:	431a      	orrs	r2, r3
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	061b      	lsls	r3, r3, #24
 80047ee:	431a      	orrs	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	071b      	lsls	r3, r3, #28
 80047f4:	4925      	ldr	r1, [pc, #148]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d011      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	019a      	lsls	r2, r3, #6
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	041b      	lsls	r3, r3, #16
 8004814:	431a      	orrs	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	061b      	lsls	r3, r3, #24
 800481c:	431a      	orrs	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	071b      	lsls	r3, r3, #28
 8004824:	4919      	ldr	r1, [pc, #100]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004826:	4313      	orrs	r3, r2
 8004828:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800482c:	4b17      	ldr	r3, [pc, #92]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a16      	ldr	r2, [pc, #88]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004832:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004836:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004838:	f7fe f812 	bl	8002860 <HAL_GetTick>
 800483c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800483e:	e008      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004840:	f7fe f80e 	bl	8002860 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b64      	cmp	r3, #100	@ 0x64
 800484c:	d901      	bls.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e0d7      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004852:	4b0e      	ldr	r3, [pc, #56]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d0f0      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	2b01      	cmp	r3, #1
 8004862:	f040 80cd 	bne.w	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004866:	4b09      	ldr	r3, [pc, #36]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a08      	ldr	r2, [pc, #32]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800486c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004870:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004872:	f7fd fff5 	bl	8002860 <HAL_GetTick>
 8004876:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004878:	e00a      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800487a:	f7fd fff1 	bl	8002860 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b64      	cmp	r3, #100	@ 0x64
 8004886:	d903      	bls.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e0ba      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800488c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004890:	4b5e      	ldr	r3, [pc, #376]	@ (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004898:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800489c:	d0ed      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d009      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d02e      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d12a      	bne.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80048c6:	4b51      	ldr	r3, [pc, #324]	@ (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048cc:	0c1b      	lsrs	r3, r3, #16
 80048ce:	f003 0303 	and.w	r3, r3, #3
 80048d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80048d4:	4b4d      	ldr	r3, [pc, #308]	@ (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048da:	0f1b      	lsrs	r3, r3, #28
 80048dc:	f003 0307 	and.w	r3, r3, #7
 80048e0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	019a      	lsls	r2, r3, #6
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	041b      	lsls	r3, r3, #16
 80048ec:	431a      	orrs	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	061b      	lsls	r3, r3, #24
 80048f4:	431a      	orrs	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	071b      	lsls	r3, r3, #28
 80048fa:	4944      	ldr	r1, [pc, #272]	@ (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004902:	4b42      	ldr	r3, [pc, #264]	@ (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004904:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004908:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004910:	3b01      	subs	r3, #1
 8004912:	021b      	lsls	r3, r3, #8
 8004914:	493d      	ldr	r1, [pc, #244]	@ (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004916:	4313      	orrs	r3, r2
 8004918:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d022      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800492c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004930:	d11d      	bne.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004932:	4b36      	ldr	r3, [pc, #216]	@ (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004934:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004938:	0e1b      	lsrs	r3, r3, #24
 800493a:	f003 030f 	and.w	r3, r3, #15
 800493e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004940:	4b32      	ldr	r3, [pc, #200]	@ (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004946:	0f1b      	lsrs	r3, r3, #28
 8004948:	f003 0307 	and.w	r3, r3, #7
 800494c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	019a      	lsls	r2, r3, #6
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a1b      	ldr	r3, [r3, #32]
 8004958:	041b      	lsls	r3, r3, #16
 800495a:	431a      	orrs	r2, r3
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	061b      	lsls	r3, r3, #24
 8004960:	431a      	orrs	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	071b      	lsls	r3, r3, #28
 8004966:	4929      	ldr	r1, [pc, #164]	@ (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004968:	4313      	orrs	r3, r2
 800496a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0308 	and.w	r3, r3, #8
 8004976:	2b00      	cmp	r3, #0
 8004978:	d028      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800497a:	4b24      	ldr	r3, [pc, #144]	@ (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800497c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004980:	0e1b      	lsrs	r3, r3, #24
 8004982:	f003 030f 	and.w	r3, r3, #15
 8004986:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004988:	4b20      	ldr	r3, [pc, #128]	@ (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800498a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800498e:	0c1b      	lsrs	r3, r3, #16
 8004990:	f003 0303 	and.w	r3, r3, #3
 8004994:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	019a      	lsls	r2, r3, #6
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	041b      	lsls	r3, r3, #16
 80049a0:	431a      	orrs	r2, r3
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	061b      	lsls	r3, r3, #24
 80049a6:	431a      	orrs	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	69db      	ldr	r3, [r3, #28]
 80049ac:	071b      	lsls	r3, r3, #28
 80049ae:	4917      	ldr	r1, [pc, #92]	@ (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80049b6:	4b15      	ldr	r3, [pc, #84]	@ (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c4:	4911      	ldr	r1, [pc, #68]	@ (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80049cc:	4b0f      	ldr	r3, [pc, #60]	@ (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a0e      	ldr	r2, [pc, #56]	@ (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049d8:	f7fd ff42 	bl	8002860 <HAL_GetTick>
 80049dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80049de:	e008      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80049e0:	f7fd ff3e 	bl	8002860 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2b64      	cmp	r3, #100	@ 0x64
 80049ec:	d901      	bls.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e007      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80049f2:	4b06      	ldr	r3, [pc, #24]	@ (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80049fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80049fe:	d1ef      	bne.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3720      	adds	r7, #32
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	40023800 	.word	0x40023800

08004a10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d101      	bne.n	8004a22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e09d      	b.n	8004b5e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d108      	bne.n	8004a3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a32:	d009      	beq.n	8004a48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	61da      	str	r2, [r3, #28]
 8004a3a:	e005      	b.n	8004a48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d106      	bne.n	8004a68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f7fd fc10 	bl	8002288 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a7e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a88:	d902      	bls.n	8004a90 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	60fb      	str	r3, [r7, #12]
 8004a8e:	e002      	b.n	8004a96 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004a90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a94:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004a9e:	d007      	beq.n	8004ab0 <HAL_SPI_Init+0xa0>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004aa8:	d002      	beq.n	8004ab0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	431a      	orrs	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	f003 0301 	and.w	r3, r3, #1
 8004ad4:	431a      	orrs	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	69db      	ldr	r3, [r3, #28]
 8004ae4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004af2:	ea42 0103 	orr.w	r1, r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004afa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	0c1b      	lsrs	r3, r3, #16
 8004b0c:	f003 0204 	and.w	r2, r3, #4
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b14:	f003 0310 	and.w	r3, r3, #16
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b1e:	f003 0308 	and.w	r3, r3, #8
 8004b22:	431a      	orrs	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004b2c:	ea42 0103 	orr.w	r1, r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	69da      	ldr	r2, [r3, #28]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b4c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b082      	sub	sp, #8
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d101      	bne.n	8004b78 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e049      	b.n	8004c0c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d106      	bne.n	8004b92 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f7fd fbef 	bl	8002370 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2202      	movs	r2, #2
 8004b96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	3304      	adds	r3, #4
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	4610      	mov	r0, r2
 8004ba6:	f000 f96f 	bl	8004e88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2201      	movs	r2, #1
 8004bae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3708      	adds	r7, #8
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d001      	beq.n	8004c2c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e04c      	b.n	8004cc6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2202      	movs	r2, #2
 8004c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a26      	ldr	r2, [pc, #152]	@ (8004cd4 <HAL_TIM_Base_Start+0xc0>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d022      	beq.n	8004c84 <HAL_TIM_Base_Start+0x70>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c46:	d01d      	beq.n	8004c84 <HAL_TIM_Base_Start+0x70>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a22      	ldr	r2, [pc, #136]	@ (8004cd8 <HAL_TIM_Base_Start+0xc4>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d018      	beq.n	8004c84 <HAL_TIM_Base_Start+0x70>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a21      	ldr	r2, [pc, #132]	@ (8004cdc <HAL_TIM_Base_Start+0xc8>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d013      	beq.n	8004c84 <HAL_TIM_Base_Start+0x70>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a1f      	ldr	r2, [pc, #124]	@ (8004ce0 <HAL_TIM_Base_Start+0xcc>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d00e      	beq.n	8004c84 <HAL_TIM_Base_Start+0x70>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a1e      	ldr	r2, [pc, #120]	@ (8004ce4 <HAL_TIM_Base_Start+0xd0>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d009      	beq.n	8004c84 <HAL_TIM_Base_Start+0x70>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a1c      	ldr	r2, [pc, #112]	@ (8004ce8 <HAL_TIM_Base_Start+0xd4>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d004      	beq.n	8004c84 <HAL_TIM_Base_Start+0x70>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a1b      	ldr	r2, [pc, #108]	@ (8004cec <HAL_TIM_Base_Start+0xd8>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d115      	bne.n	8004cb0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	689a      	ldr	r2, [r3, #8]
 8004c8a:	4b19      	ldr	r3, [pc, #100]	@ (8004cf0 <HAL_TIM_Base_Start+0xdc>)
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2b06      	cmp	r3, #6
 8004c94:	d015      	beq.n	8004cc2 <HAL_TIM_Base_Start+0xae>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c9c:	d011      	beq.n	8004cc2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f042 0201 	orr.w	r2, r2, #1
 8004cac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cae:	e008      	b.n	8004cc2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f042 0201 	orr.w	r2, r2, #1
 8004cbe:	601a      	str	r2, [r3, #0]
 8004cc0:	e000      	b.n	8004cc4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cc2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3714      	adds	r7, #20
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	40010000 	.word	0x40010000
 8004cd8:	40000400 	.word	0x40000400
 8004cdc:	40000800 	.word	0x40000800
 8004ce0:	40000c00 	.word	0x40000c00
 8004ce4:	40010400 	.word	0x40010400
 8004ce8:	40014000 	.word	0x40014000
 8004cec:	40001800 	.word	0x40001800
 8004cf0:	00010007 	.word	0x00010007

08004cf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d101      	bne.n	8004d10 <HAL_TIM_ConfigClockSource+0x1c>
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	e0b4      	b.n	8004e7a <HAL_TIM_ConfigClockSource+0x186>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d28:	68ba      	ldr	r2, [r7, #8]
 8004d2a:	4b56      	ldr	r3, [pc, #344]	@ (8004e84 <HAL_TIM_ConfigClockSource+0x190>)
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d48:	d03e      	beq.n	8004dc8 <HAL_TIM_ConfigClockSource+0xd4>
 8004d4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d4e:	f200 8087 	bhi.w	8004e60 <HAL_TIM_ConfigClockSource+0x16c>
 8004d52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d56:	f000 8086 	beq.w	8004e66 <HAL_TIM_ConfigClockSource+0x172>
 8004d5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d5e:	d87f      	bhi.n	8004e60 <HAL_TIM_ConfigClockSource+0x16c>
 8004d60:	2b70      	cmp	r3, #112	@ 0x70
 8004d62:	d01a      	beq.n	8004d9a <HAL_TIM_ConfigClockSource+0xa6>
 8004d64:	2b70      	cmp	r3, #112	@ 0x70
 8004d66:	d87b      	bhi.n	8004e60 <HAL_TIM_ConfigClockSource+0x16c>
 8004d68:	2b60      	cmp	r3, #96	@ 0x60
 8004d6a:	d050      	beq.n	8004e0e <HAL_TIM_ConfigClockSource+0x11a>
 8004d6c:	2b60      	cmp	r3, #96	@ 0x60
 8004d6e:	d877      	bhi.n	8004e60 <HAL_TIM_ConfigClockSource+0x16c>
 8004d70:	2b50      	cmp	r3, #80	@ 0x50
 8004d72:	d03c      	beq.n	8004dee <HAL_TIM_ConfigClockSource+0xfa>
 8004d74:	2b50      	cmp	r3, #80	@ 0x50
 8004d76:	d873      	bhi.n	8004e60 <HAL_TIM_ConfigClockSource+0x16c>
 8004d78:	2b40      	cmp	r3, #64	@ 0x40
 8004d7a:	d058      	beq.n	8004e2e <HAL_TIM_ConfigClockSource+0x13a>
 8004d7c:	2b40      	cmp	r3, #64	@ 0x40
 8004d7e:	d86f      	bhi.n	8004e60 <HAL_TIM_ConfigClockSource+0x16c>
 8004d80:	2b30      	cmp	r3, #48	@ 0x30
 8004d82:	d064      	beq.n	8004e4e <HAL_TIM_ConfigClockSource+0x15a>
 8004d84:	2b30      	cmp	r3, #48	@ 0x30
 8004d86:	d86b      	bhi.n	8004e60 <HAL_TIM_ConfigClockSource+0x16c>
 8004d88:	2b20      	cmp	r3, #32
 8004d8a:	d060      	beq.n	8004e4e <HAL_TIM_ConfigClockSource+0x15a>
 8004d8c:	2b20      	cmp	r3, #32
 8004d8e:	d867      	bhi.n	8004e60 <HAL_TIM_ConfigClockSource+0x16c>
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d05c      	beq.n	8004e4e <HAL_TIM_ConfigClockSource+0x15a>
 8004d94:	2b10      	cmp	r3, #16
 8004d96:	d05a      	beq.n	8004e4e <HAL_TIM_ConfigClockSource+0x15a>
 8004d98:	e062      	b.n	8004e60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004daa:	f000 f987 	bl	80050bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004dbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	609a      	str	r2, [r3, #8]
      break;
 8004dc6:	e04f      	b.n	8004e68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004dd8:	f000 f970 	bl	80050bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689a      	ldr	r2, [r3, #8]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004dea:	609a      	str	r2, [r3, #8]
      break;
 8004dec:	e03c      	b.n	8004e68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	f000 f8e4 	bl	8004fc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2150      	movs	r1, #80	@ 0x50
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 f93d 	bl	8005086 <TIM_ITRx_SetConfig>
      break;
 8004e0c:	e02c      	b.n	8004e68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	f000 f903 	bl	8005026 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2160      	movs	r1, #96	@ 0x60
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 f92d 	bl	8005086 <TIM_ITRx_SetConfig>
      break;
 8004e2c:	e01c      	b.n	8004e68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	f000 f8c4 	bl	8004fc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2140      	movs	r1, #64	@ 0x40
 8004e46:	4618      	mov	r0, r3
 8004e48:	f000 f91d 	bl	8005086 <TIM_ITRx_SetConfig>
      break;
 8004e4c:	e00c      	b.n	8004e68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4619      	mov	r1, r3
 8004e58:	4610      	mov	r0, r2
 8004e5a:	f000 f914 	bl	8005086 <TIM_ITRx_SetConfig>
      break;
 8004e5e:	e003      	b.n	8004e68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	73fb      	strb	r3, [r7, #15]
      break;
 8004e64:	e000      	b.n	8004e68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	fffeff88 	.word	0xfffeff88

08004e88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a40      	ldr	r2, [pc, #256]	@ (8004f9c <TIM_Base_SetConfig+0x114>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d013      	beq.n	8004ec8 <TIM_Base_SetConfig+0x40>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ea6:	d00f      	beq.n	8004ec8 <TIM_Base_SetConfig+0x40>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a3d      	ldr	r2, [pc, #244]	@ (8004fa0 <TIM_Base_SetConfig+0x118>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d00b      	beq.n	8004ec8 <TIM_Base_SetConfig+0x40>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a3c      	ldr	r2, [pc, #240]	@ (8004fa4 <TIM_Base_SetConfig+0x11c>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d007      	beq.n	8004ec8 <TIM_Base_SetConfig+0x40>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a3b      	ldr	r2, [pc, #236]	@ (8004fa8 <TIM_Base_SetConfig+0x120>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d003      	beq.n	8004ec8 <TIM_Base_SetConfig+0x40>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a3a      	ldr	r2, [pc, #232]	@ (8004fac <TIM_Base_SetConfig+0x124>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d108      	bne.n	8004eda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ece:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a2f      	ldr	r2, [pc, #188]	@ (8004f9c <TIM_Base_SetConfig+0x114>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d02b      	beq.n	8004f3a <TIM_Base_SetConfig+0xb2>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ee8:	d027      	beq.n	8004f3a <TIM_Base_SetConfig+0xb2>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a2c      	ldr	r2, [pc, #176]	@ (8004fa0 <TIM_Base_SetConfig+0x118>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d023      	beq.n	8004f3a <TIM_Base_SetConfig+0xb2>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a2b      	ldr	r2, [pc, #172]	@ (8004fa4 <TIM_Base_SetConfig+0x11c>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d01f      	beq.n	8004f3a <TIM_Base_SetConfig+0xb2>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a2a      	ldr	r2, [pc, #168]	@ (8004fa8 <TIM_Base_SetConfig+0x120>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d01b      	beq.n	8004f3a <TIM_Base_SetConfig+0xb2>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a29      	ldr	r2, [pc, #164]	@ (8004fac <TIM_Base_SetConfig+0x124>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d017      	beq.n	8004f3a <TIM_Base_SetConfig+0xb2>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a28      	ldr	r2, [pc, #160]	@ (8004fb0 <TIM_Base_SetConfig+0x128>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d013      	beq.n	8004f3a <TIM_Base_SetConfig+0xb2>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a27      	ldr	r2, [pc, #156]	@ (8004fb4 <TIM_Base_SetConfig+0x12c>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d00f      	beq.n	8004f3a <TIM_Base_SetConfig+0xb2>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a26      	ldr	r2, [pc, #152]	@ (8004fb8 <TIM_Base_SetConfig+0x130>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d00b      	beq.n	8004f3a <TIM_Base_SetConfig+0xb2>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a25      	ldr	r2, [pc, #148]	@ (8004fbc <TIM_Base_SetConfig+0x134>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d007      	beq.n	8004f3a <TIM_Base_SetConfig+0xb2>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a24      	ldr	r2, [pc, #144]	@ (8004fc0 <TIM_Base_SetConfig+0x138>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d003      	beq.n	8004f3a <TIM_Base_SetConfig+0xb2>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a23      	ldr	r2, [pc, #140]	@ (8004fc4 <TIM_Base_SetConfig+0x13c>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d108      	bne.n	8004f4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a0a      	ldr	r2, [pc, #40]	@ (8004f9c <TIM_Base_SetConfig+0x114>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d003      	beq.n	8004f80 <TIM_Base_SetConfig+0xf8>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a0c      	ldr	r2, [pc, #48]	@ (8004fac <TIM_Base_SetConfig+0x124>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d103      	bne.n	8004f88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	691a      	ldr	r2, [r3, #16]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	615a      	str	r2, [r3, #20]
}
 8004f8e:	bf00      	nop
 8004f90:	3714      	adds	r7, #20
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	40010000 	.word	0x40010000
 8004fa0:	40000400 	.word	0x40000400
 8004fa4:	40000800 	.word	0x40000800
 8004fa8:	40000c00 	.word	0x40000c00
 8004fac:	40010400 	.word	0x40010400
 8004fb0:	40014000 	.word	0x40014000
 8004fb4:	40014400 	.word	0x40014400
 8004fb8:	40014800 	.word	0x40014800
 8004fbc:	40001800 	.word	0x40001800
 8004fc0:	40001c00 	.word	0x40001c00
 8004fc4:	40002000 	.word	0x40002000

08004fc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b087      	sub	sp, #28
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	f023 0201 	bic.w	r2, r3, #1
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ff2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	011b      	lsls	r3, r3, #4
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f023 030a 	bic.w	r3, r3, #10
 8005004:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	4313      	orrs	r3, r2
 800500c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	621a      	str	r2, [r3, #32]
}
 800501a:	bf00      	nop
 800501c:	371c      	adds	r7, #28
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005026:	b480      	push	{r7}
 8005028:	b087      	sub	sp, #28
 800502a:	af00      	add	r7, sp, #0
 800502c:	60f8      	str	r0, [r7, #12]
 800502e:	60b9      	str	r1, [r7, #8]
 8005030:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	f023 0210 	bic.w	r2, r3, #16
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6a1b      	ldr	r3, [r3, #32]
 8005048:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005050:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	031b      	lsls	r3, r3, #12
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	4313      	orrs	r3, r2
 800505a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005062:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	011b      	lsls	r3, r3, #4
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	4313      	orrs	r3, r2
 800506c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	621a      	str	r2, [r3, #32]
}
 800507a:	bf00      	nop
 800507c:	371c      	adds	r7, #28
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005086:	b480      	push	{r7}
 8005088:	b085      	sub	sp, #20
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
 800508e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800509c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800509e:	683a      	ldr	r2, [r7, #0]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	f043 0307 	orr.w	r3, r3, #7
 80050a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	609a      	str	r2, [r3, #8]
}
 80050b0:	bf00      	nop
 80050b2:	3714      	adds	r7, #20
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050bc:	b480      	push	{r7}
 80050be:	b087      	sub	sp, #28
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	607a      	str	r2, [r7, #4]
 80050c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80050d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	021a      	lsls	r2, r3, #8
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	431a      	orrs	r2, r3
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	609a      	str	r2, [r3, #8]
}
 80050f0:	bf00      	nop
 80050f2:	371c      	adds	r7, #28
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800510c:	2b01      	cmp	r3, #1
 800510e:	d101      	bne.n	8005114 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005110:	2302      	movs	r3, #2
 8005112:	e06d      	b.n	80051f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2202      	movs	r2, #2
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a30      	ldr	r2, [pc, #192]	@ (80051fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d004      	beq.n	8005148 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a2f      	ldr	r2, [pc, #188]	@ (8005200 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d108      	bne.n	800515a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800514e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	4313      	orrs	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005160:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	4313      	orrs	r3, r2
 800516a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a20      	ldr	r2, [pc, #128]	@ (80051fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d022      	beq.n	80051c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005186:	d01d      	beq.n	80051c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a1d      	ldr	r2, [pc, #116]	@ (8005204 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d018      	beq.n	80051c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a1c      	ldr	r2, [pc, #112]	@ (8005208 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d013      	beq.n	80051c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a1a      	ldr	r2, [pc, #104]	@ (800520c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d00e      	beq.n	80051c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a15      	ldr	r2, [pc, #84]	@ (8005200 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d009      	beq.n	80051c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a16      	ldr	r2, [pc, #88]	@ (8005210 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d004      	beq.n	80051c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a15      	ldr	r2, [pc, #84]	@ (8005214 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d10c      	bne.n	80051de <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	68ba      	ldr	r2, [r7, #8]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68ba      	ldr	r2, [r7, #8]
 80051dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3714      	adds	r7, #20
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr
 80051fc:	40010000 	.word	0x40010000
 8005200:	40010400 	.word	0x40010400
 8005204:	40000400 	.word	0x40000400
 8005208:	40000800 	.word	0x40000800
 800520c:	40000c00 	.word	0x40000c00
 8005210:	40014000 	.word	0x40014000
 8005214:	40001800 	.word	0x40001800

08005218 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e040      	b.n	80052ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800522e:	2b00      	cmp	r3, #0
 8005230:	d106      	bne.n	8005240 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f7fd f90c 	bl	8002458 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2224      	movs	r2, #36	@ 0x24
 8005244:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f022 0201 	bic.w	r2, r2, #1
 8005254:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f8b0 	bl	80053bc <UART_SetConfig>
 800525c:	4603      	mov	r3, r0
 800525e:	2b01      	cmp	r3, #1
 8005260:	d101      	bne.n	8005266 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e022      	b.n	80052ac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800526a:	2b00      	cmp	r3, #0
 800526c:	d002      	beq.n	8005274 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 fb08 	bl	8005884 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	685a      	ldr	r2, [r3, #4]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005282:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689a      	ldr	r2, [r3, #8]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005292:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f042 0201 	orr.w	r2, r2, #1
 80052a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 fb8f 	bl	80059c8 <UART_CheckIdleState>
 80052aa:	4603      	mov	r3, r0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3708      	adds	r7, #8
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b08a      	sub	sp, #40	@ 0x28
 80052b8:	af02      	add	r7, sp, #8
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	603b      	str	r3, [r7, #0]
 80052c0:	4613      	mov	r3, r2
 80052c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052c8:	2b20      	cmp	r3, #32
 80052ca:	d171      	bne.n	80053b0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d002      	beq.n	80052d8 <HAL_UART_Transmit+0x24>
 80052d2:	88fb      	ldrh	r3, [r7, #6]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d101      	bne.n	80052dc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e06a      	b.n	80053b2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2221      	movs	r2, #33	@ 0x21
 80052e8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052ea:	f7fd fab9 	bl	8002860 <HAL_GetTick>
 80052ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	88fa      	ldrh	r2, [r7, #6]
 80052f4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	88fa      	ldrh	r2, [r7, #6]
 80052fc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005308:	d108      	bne.n	800531c <HAL_UART_Transmit+0x68>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d104      	bne.n	800531c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005312:	2300      	movs	r3, #0
 8005314:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	61bb      	str	r3, [r7, #24]
 800531a:	e003      	b.n	8005324 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005320:	2300      	movs	r3, #0
 8005322:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005324:	e02c      	b.n	8005380 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	2200      	movs	r2, #0
 800532e:	2180      	movs	r1, #128	@ 0x80
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f000 fb80 	bl	8005a36 <UART_WaitOnFlagUntilTimeout>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d001      	beq.n	8005340 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e038      	b.n	80053b2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10b      	bne.n	800535e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	881b      	ldrh	r3, [r3, #0]
 800534a:	461a      	mov	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005354:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	3302      	adds	r3, #2
 800535a:	61bb      	str	r3, [r7, #24]
 800535c:	e007      	b.n	800536e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	781a      	ldrb	r2, [r3, #0]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	3301      	adds	r3, #1
 800536c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005374:	b29b      	uxth	r3, r3
 8005376:	3b01      	subs	r3, #1
 8005378:	b29a      	uxth	r2, r3
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005386:	b29b      	uxth	r3, r3
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1cc      	bne.n	8005326 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	9300      	str	r3, [sp, #0]
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	2200      	movs	r2, #0
 8005394:	2140      	movs	r1, #64	@ 0x40
 8005396:	68f8      	ldr	r0, [r7, #12]
 8005398:	f000 fb4d 	bl	8005a36 <UART_WaitOnFlagUntilTimeout>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d001      	beq.n	80053a6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e005      	b.n	80053b2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2220      	movs	r2, #32
 80053aa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80053ac:	2300      	movs	r3, #0
 80053ae:	e000      	b.n	80053b2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80053b0:	2302      	movs	r3, #2
  }
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3720      	adds	r7, #32
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
	...

080053bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b088      	sub	sp, #32
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053c4:	2300      	movs	r3, #0
 80053c6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	689a      	ldr	r2, [r3, #8]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	431a      	orrs	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	431a      	orrs	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	69db      	ldr	r3, [r3, #28]
 80053dc:	4313      	orrs	r3, r2
 80053de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	4ba6      	ldr	r3, [pc, #664]	@ (8005680 <UART_SetConfig+0x2c4>)
 80053e8:	4013      	ands	r3, r2
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	6812      	ldr	r2, [r2, #0]
 80053ee:	6979      	ldr	r1, [r7, #20]
 80053f0:	430b      	orrs	r3, r1
 80053f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68da      	ldr	r2, [r3, #12]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	430a      	orrs	r2, r1
 8005408:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a1b      	ldr	r3, [r3, #32]
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	4313      	orrs	r3, r2
 8005418:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	430a      	orrs	r2, r1
 800542c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a94      	ldr	r2, [pc, #592]	@ (8005684 <UART_SetConfig+0x2c8>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d120      	bne.n	800547a <UART_SetConfig+0xbe>
 8005438:	4b93      	ldr	r3, [pc, #588]	@ (8005688 <UART_SetConfig+0x2cc>)
 800543a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800543e:	f003 0303 	and.w	r3, r3, #3
 8005442:	2b03      	cmp	r3, #3
 8005444:	d816      	bhi.n	8005474 <UART_SetConfig+0xb8>
 8005446:	a201      	add	r2, pc, #4	@ (adr r2, 800544c <UART_SetConfig+0x90>)
 8005448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800544c:	0800545d 	.word	0x0800545d
 8005450:	08005469 	.word	0x08005469
 8005454:	08005463 	.word	0x08005463
 8005458:	0800546f 	.word	0x0800546f
 800545c:	2301      	movs	r3, #1
 800545e:	77fb      	strb	r3, [r7, #31]
 8005460:	e150      	b.n	8005704 <UART_SetConfig+0x348>
 8005462:	2302      	movs	r3, #2
 8005464:	77fb      	strb	r3, [r7, #31]
 8005466:	e14d      	b.n	8005704 <UART_SetConfig+0x348>
 8005468:	2304      	movs	r3, #4
 800546a:	77fb      	strb	r3, [r7, #31]
 800546c:	e14a      	b.n	8005704 <UART_SetConfig+0x348>
 800546e:	2308      	movs	r3, #8
 8005470:	77fb      	strb	r3, [r7, #31]
 8005472:	e147      	b.n	8005704 <UART_SetConfig+0x348>
 8005474:	2310      	movs	r3, #16
 8005476:	77fb      	strb	r3, [r7, #31]
 8005478:	e144      	b.n	8005704 <UART_SetConfig+0x348>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a83      	ldr	r2, [pc, #524]	@ (800568c <UART_SetConfig+0x2d0>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d132      	bne.n	80054ea <UART_SetConfig+0x12e>
 8005484:	4b80      	ldr	r3, [pc, #512]	@ (8005688 <UART_SetConfig+0x2cc>)
 8005486:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800548a:	f003 030c 	and.w	r3, r3, #12
 800548e:	2b0c      	cmp	r3, #12
 8005490:	d828      	bhi.n	80054e4 <UART_SetConfig+0x128>
 8005492:	a201      	add	r2, pc, #4	@ (adr r2, 8005498 <UART_SetConfig+0xdc>)
 8005494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005498:	080054cd 	.word	0x080054cd
 800549c:	080054e5 	.word	0x080054e5
 80054a0:	080054e5 	.word	0x080054e5
 80054a4:	080054e5 	.word	0x080054e5
 80054a8:	080054d9 	.word	0x080054d9
 80054ac:	080054e5 	.word	0x080054e5
 80054b0:	080054e5 	.word	0x080054e5
 80054b4:	080054e5 	.word	0x080054e5
 80054b8:	080054d3 	.word	0x080054d3
 80054bc:	080054e5 	.word	0x080054e5
 80054c0:	080054e5 	.word	0x080054e5
 80054c4:	080054e5 	.word	0x080054e5
 80054c8:	080054df 	.word	0x080054df
 80054cc:	2300      	movs	r3, #0
 80054ce:	77fb      	strb	r3, [r7, #31]
 80054d0:	e118      	b.n	8005704 <UART_SetConfig+0x348>
 80054d2:	2302      	movs	r3, #2
 80054d4:	77fb      	strb	r3, [r7, #31]
 80054d6:	e115      	b.n	8005704 <UART_SetConfig+0x348>
 80054d8:	2304      	movs	r3, #4
 80054da:	77fb      	strb	r3, [r7, #31]
 80054dc:	e112      	b.n	8005704 <UART_SetConfig+0x348>
 80054de:	2308      	movs	r3, #8
 80054e0:	77fb      	strb	r3, [r7, #31]
 80054e2:	e10f      	b.n	8005704 <UART_SetConfig+0x348>
 80054e4:	2310      	movs	r3, #16
 80054e6:	77fb      	strb	r3, [r7, #31]
 80054e8:	e10c      	b.n	8005704 <UART_SetConfig+0x348>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a68      	ldr	r2, [pc, #416]	@ (8005690 <UART_SetConfig+0x2d4>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d120      	bne.n	8005536 <UART_SetConfig+0x17a>
 80054f4:	4b64      	ldr	r3, [pc, #400]	@ (8005688 <UART_SetConfig+0x2cc>)
 80054f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054fa:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80054fe:	2b30      	cmp	r3, #48	@ 0x30
 8005500:	d013      	beq.n	800552a <UART_SetConfig+0x16e>
 8005502:	2b30      	cmp	r3, #48	@ 0x30
 8005504:	d814      	bhi.n	8005530 <UART_SetConfig+0x174>
 8005506:	2b20      	cmp	r3, #32
 8005508:	d009      	beq.n	800551e <UART_SetConfig+0x162>
 800550a:	2b20      	cmp	r3, #32
 800550c:	d810      	bhi.n	8005530 <UART_SetConfig+0x174>
 800550e:	2b00      	cmp	r3, #0
 8005510:	d002      	beq.n	8005518 <UART_SetConfig+0x15c>
 8005512:	2b10      	cmp	r3, #16
 8005514:	d006      	beq.n	8005524 <UART_SetConfig+0x168>
 8005516:	e00b      	b.n	8005530 <UART_SetConfig+0x174>
 8005518:	2300      	movs	r3, #0
 800551a:	77fb      	strb	r3, [r7, #31]
 800551c:	e0f2      	b.n	8005704 <UART_SetConfig+0x348>
 800551e:	2302      	movs	r3, #2
 8005520:	77fb      	strb	r3, [r7, #31]
 8005522:	e0ef      	b.n	8005704 <UART_SetConfig+0x348>
 8005524:	2304      	movs	r3, #4
 8005526:	77fb      	strb	r3, [r7, #31]
 8005528:	e0ec      	b.n	8005704 <UART_SetConfig+0x348>
 800552a:	2308      	movs	r3, #8
 800552c:	77fb      	strb	r3, [r7, #31]
 800552e:	e0e9      	b.n	8005704 <UART_SetConfig+0x348>
 8005530:	2310      	movs	r3, #16
 8005532:	77fb      	strb	r3, [r7, #31]
 8005534:	e0e6      	b.n	8005704 <UART_SetConfig+0x348>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a56      	ldr	r2, [pc, #344]	@ (8005694 <UART_SetConfig+0x2d8>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d120      	bne.n	8005582 <UART_SetConfig+0x1c6>
 8005540:	4b51      	ldr	r3, [pc, #324]	@ (8005688 <UART_SetConfig+0x2cc>)
 8005542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005546:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800554a:	2bc0      	cmp	r3, #192	@ 0xc0
 800554c:	d013      	beq.n	8005576 <UART_SetConfig+0x1ba>
 800554e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005550:	d814      	bhi.n	800557c <UART_SetConfig+0x1c0>
 8005552:	2b80      	cmp	r3, #128	@ 0x80
 8005554:	d009      	beq.n	800556a <UART_SetConfig+0x1ae>
 8005556:	2b80      	cmp	r3, #128	@ 0x80
 8005558:	d810      	bhi.n	800557c <UART_SetConfig+0x1c0>
 800555a:	2b00      	cmp	r3, #0
 800555c:	d002      	beq.n	8005564 <UART_SetConfig+0x1a8>
 800555e:	2b40      	cmp	r3, #64	@ 0x40
 8005560:	d006      	beq.n	8005570 <UART_SetConfig+0x1b4>
 8005562:	e00b      	b.n	800557c <UART_SetConfig+0x1c0>
 8005564:	2300      	movs	r3, #0
 8005566:	77fb      	strb	r3, [r7, #31]
 8005568:	e0cc      	b.n	8005704 <UART_SetConfig+0x348>
 800556a:	2302      	movs	r3, #2
 800556c:	77fb      	strb	r3, [r7, #31]
 800556e:	e0c9      	b.n	8005704 <UART_SetConfig+0x348>
 8005570:	2304      	movs	r3, #4
 8005572:	77fb      	strb	r3, [r7, #31]
 8005574:	e0c6      	b.n	8005704 <UART_SetConfig+0x348>
 8005576:	2308      	movs	r3, #8
 8005578:	77fb      	strb	r3, [r7, #31]
 800557a:	e0c3      	b.n	8005704 <UART_SetConfig+0x348>
 800557c:	2310      	movs	r3, #16
 800557e:	77fb      	strb	r3, [r7, #31]
 8005580:	e0c0      	b.n	8005704 <UART_SetConfig+0x348>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a44      	ldr	r2, [pc, #272]	@ (8005698 <UART_SetConfig+0x2dc>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d125      	bne.n	80055d8 <UART_SetConfig+0x21c>
 800558c:	4b3e      	ldr	r3, [pc, #248]	@ (8005688 <UART_SetConfig+0x2cc>)
 800558e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005592:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005596:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800559a:	d017      	beq.n	80055cc <UART_SetConfig+0x210>
 800559c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055a0:	d817      	bhi.n	80055d2 <UART_SetConfig+0x216>
 80055a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055a6:	d00b      	beq.n	80055c0 <UART_SetConfig+0x204>
 80055a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055ac:	d811      	bhi.n	80055d2 <UART_SetConfig+0x216>
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d003      	beq.n	80055ba <UART_SetConfig+0x1fe>
 80055b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055b6:	d006      	beq.n	80055c6 <UART_SetConfig+0x20a>
 80055b8:	e00b      	b.n	80055d2 <UART_SetConfig+0x216>
 80055ba:	2300      	movs	r3, #0
 80055bc:	77fb      	strb	r3, [r7, #31]
 80055be:	e0a1      	b.n	8005704 <UART_SetConfig+0x348>
 80055c0:	2302      	movs	r3, #2
 80055c2:	77fb      	strb	r3, [r7, #31]
 80055c4:	e09e      	b.n	8005704 <UART_SetConfig+0x348>
 80055c6:	2304      	movs	r3, #4
 80055c8:	77fb      	strb	r3, [r7, #31]
 80055ca:	e09b      	b.n	8005704 <UART_SetConfig+0x348>
 80055cc:	2308      	movs	r3, #8
 80055ce:	77fb      	strb	r3, [r7, #31]
 80055d0:	e098      	b.n	8005704 <UART_SetConfig+0x348>
 80055d2:	2310      	movs	r3, #16
 80055d4:	77fb      	strb	r3, [r7, #31]
 80055d6:	e095      	b.n	8005704 <UART_SetConfig+0x348>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a2f      	ldr	r2, [pc, #188]	@ (800569c <UART_SetConfig+0x2e0>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d125      	bne.n	800562e <UART_SetConfig+0x272>
 80055e2:	4b29      	ldr	r3, [pc, #164]	@ (8005688 <UART_SetConfig+0x2cc>)
 80055e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80055ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80055f0:	d017      	beq.n	8005622 <UART_SetConfig+0x266>
 80055f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80055f6:	d817      	bhi.n	8005628 <UART_SetConfig+0x26c>
 80055f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055fc:	d00b      	beq.n	8005616 <UART_SetConfig+0x25a>
 80055fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005602:	d811      	bhi.n	8005628 <UART_SetConfig+0x26c>
 8005604:	2b00      	cmp	r3, #0
 8005606:	d003      	beq.n	8005610 <UART_SetConfig+0x254>
 8005608:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800560c:	d006      	beq.n	800561c <UART_SetConfig+0x260>
 800560e:	e00b      	b.n	8005628 <UART_SetConfig+0x26c>
 8005610:	2301      	movs	r3, #1
 8005612:	77fb      	strb	r3, [r7, #31]
 8005614:	e076      	b.n	8005704 <UART_SetConfig+0x348>
 8005616:	2302      	movs	r3, #2
 8005618:	77fb      	strb	r3, [r7, #31]
 800561a:	e073      	b.n	8005704 <UART_SetConfig+0x348>
 800561c:	2304      	movs	r3, #4
 800561e:	77fb      	strb	r3, [r7, #31]
 8005620:	e070      	b.n	8005704 <UART_SetConfig+0x348>
 8005622:	2308      	movs	r3, #8
 8005624:	77fb      	strb	r3, [r7, #31]
 8005626:	e06d      	b.n	8005704 <UART_SetConfig+0x348>
 8005628:	2310      	movs	r3, #16
 800562a:	77fb      	strb	r3, [r7, #31]
 800562c:	e06a      	b.n	8005704 <UART_SetConfig+0x348>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a1b      	ldr	r2, [pc, #108]	@ (80056a0 <UART_SetConfig+0x2e4>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d138      	bne.n	80056aa <UART_SetConfig+0x2ee>
 8005638:	4b13      	ldr	r3, [pc, #76]	@ (8005688 <UART_SetConfig+0x2cc>)
 800563a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800563e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005642:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005646:	d017      	beq.n	8005678 <UART_SetConfig+0x2bc>
 8005648:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800564c:	d82a      	bhi.n	80056a4 <UART_SetConfig+0x2e8>
 800564e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005652:	d00b      	beq.n	800566c <UART_SetConfig+0x2b0>
 8005654:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005658:	d824      	bhi.n	80056a4 <UART_SetConfig+0x2e8>
 800565a:	2b00      	cmp	r3, #0
 800565c:	d003      	beq.n	8005666 <UART_SetConfig+0x2aa>
 800565e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005662:	d006      	beq.n	8005672 <UART_SetConfig+0x2b6>
 8005664:	e01e      	b.n	80056a4 <UART_SetConfig+0x2e8>
 8005666:	2300      	movs	r3, #0
 8005668:	77fb      	strb	r3, [r7, #31]
 800566a:	e04b      	b.n	8005704 <UART_SetConfig+0x348>
 800566c:	2302      	movs	r3, #2
 800566e:	77fb      	strb	r3, [r7, #31]
 8005670:	e048      	b.n	8005704 <UART_SetConfig+0x348>
 8005672:	2304      	movs	r3, #4
 8005674:	77fb      	strb	r3, [r7, #31]
 8005676:	e045      	b.n	8005704 <UART_SetConfig+0x348>
 8005678:	2308      	movs	r3, #8
 800567a:	77fb      	strb	r3, [r7, #31]
 800567c:	e042      	b.n	8005704 <UART_SetConfig+0x348>
 800567e:	bf00      	nop
 8005680:	efff69f3 	.word	0xefff69f3
 8005684:	40011000 	.word	0x40011000
 8005688:	40023800 	.word	0x40023800
 800568c:	40004400 	.word	0x40004400
 8005690:	40004800 	.word	0x40004800
 8005694:	40004c00 	.word	0x40004c00
 8005698:	40005000 	.word	0x40005000
 800569c:	40011400 	.word	0x40011400
 80056a0:	40007800 	.word	0x40007800
 80056a4:	2310      	movs	r3, #16
 80056a6:	77fb      	strb	r3, [r7, #31]
 80056a8:	e02c      	b.n	8005704 <UART_SetConfig+0x348>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a72      	ldr	r2, [pc, #456]	@ (8005878 <UART_SetConfig+0x4bc>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d125      	bne.n	8005700 <UART_SetConfig+0x344>
 80056b4:	4b71      	ldr	r3, [pc, #452]	@ (800587c <UART_SetConfig+0x4c0>)
 80056b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056ba:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80056be:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80056c2:	d017      	beq.n	80056f4 <UART_SetConfig+0x338>
 80056c4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80056c8:	d817      	bhi.n	80056fa <UART_SetConfig+0x33e>
 80056ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056ce:	d00b      	beq.n	80056e8 <UART_SetConfig+0x32c>
 80056d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056d4:	d811      	bhi.n	80056fa <UART_SetConfig+0x33e>
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d003      	beq.n	80056e2 <UART_SetConfig+0x326>
 80056da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056de:	d006      	beq.n	80056ee <UART_SetConfig+0x332>
 80056e0:	e00b      	b.n	80056fa <UART_SetConfig+0x33e>
 80056e2:	2300      	movs	r3, #0
 80056e4:	77fb      	strb	r3, [r7, #31]
 80056e6:	e00d      	b.n	8005704 <UART_SetConfig+0x348>
 80056e8:	2302      	movs	r3, #2
 80056ea:	77fb      	strb	r3, [r7, #31]
 80056ec:	e00a      	b.n	8005704 <UART_SetConfig+0x348>
 80056ee:	2304      	movs	r3, #4
 80056f0:	77fb      	strb	r3, [r7, #31]
 80056f2:	e007      	b.n	8005704 <UART_SetConfig+0x348>
 80056f4:	2308      	movs	r3, #8
 80056f6:	77fb      	strb	r3, [r7, #31]
 80056f8:	e004      	b.n	8005704 <UART_SetConfig+0x348>
 80056fa:	2310      	movs	r3, #16
 80056fc:	77fb      	strb	r3, [r7, #31]
 80056fe:	e001      	b.n	8005704 <UART_SetConfig+0x348>
 8005700:	2310      	movs	r3, #16
 8005702:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	69db      	ldr	r3, [r3, #28]
 8005708:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800570c:	d15b      	bne.n	80057c6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800570e:	7ffb      	ldrb	r3, [r7, #31]
 8005710:	2b08      	cmp	r3, #8
 8005712:	d828      	bhi.n	8005766 <UART_SetConfig+0x3aa>
 8005714:	a201      	add	r2, pc, #4	@ (adr r2, 800571c <UART_SetConfig+0x360>)
 8005716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571a:	bf00      	nop
 800571c:	08005741 	.word	0x08005741
 8005720:	08005749 	.word	0x08005749
 8005724:	08005751 	.word	0x08005751
 8005728:	08005767 	.word	0x08005767
 800572c:	08005757 	.word	0x08005757
 8005730:	08005767 	.word	0x08005767
 8005734:	08005767 	.word	0x08005767
 8005738:	08005767 	.word	0x08005767
 800573c:	0800575f 	.word	0x0800575f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005740:	f7fe fd4e 	bl	80041e0 <HAL_RCC_GetPCLK1Freq>
 8005744:	61b8      	str	r0, [r7, #24]
        break;
 8005746:	e013      	b.n	8005770 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005748:	f7fe fd5e 	bl	8004208 <HAL_RCC_GetPCLK2Freq>
 800574c:	61b8      	str	r0, [r7, #24]
        break;
 800574e:	e00f      	b.n	8005770 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005750:	4b4b      	ldr	r3, [pc, #300]	@ (8005880 <UART_SetConfig+0x4c4>)
 8005752:	61bb      	str	r3, [r7, #24]
        break;
 8005754:	e00c      	b.n	8005770 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005756:	f7fe fc71 	bl	800403c <HAL_RCC_GetSysClockFreq>
 800575a:	61b8      	str	r0, [r7, #24]
        break;
 800575c:	e008      	b.n	8005770 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800575e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005762:	61bb      	str	r3, [r7, #24]
        break;
 8005764:	e004      	b.n	8005770 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005766:	2300      	movs	r3, #0
 8005768:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	77bb      	strb	r3, [r7, #30]
        break;
 800576e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d074      	beq.n	8005860 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	005a      	lsls	r2, r3, #1
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	085b      	lsrs	r3, r3, #1
 8005780:	441a      	add	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	fbb2 f3f3 	udiv	r3, r2, r3
 800578a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	2b0f      	cmp	r3, #15
 8005790:	d916      	bls.n	80057c0 <UART_SetConfig+0x404>
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005798:	d212      	bcs.n	80057c0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	b29b      	uxth	r3, r3
 800579e:	f023 030f 	bic.w	r3, r3, #15
 80057a2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	085b      	lsrs	r3, r3, #1
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	f003 0307 	and.w	r3, r3, #7
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	89fb      	ldrh	r3, [r7, #14]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	89fa      	ldrh	r2, [r7, #14]
 80057bc:	60da      	str	r2, [r3, #12]
 80057be:	e04f      	b.n	8005860 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	77bb      	strb	r3, [r7, #30]
 80057c4:	e04c      	b.n	8005860 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057c6:	7ffb      	ldrb	r3, [r7, #31]
 80057c8:	2b08      	cmp	r3, #8
 80057ca:	d828      	bhi.n	800581e <UART_SetConfig+0x462>
 80057cc:	a201      	add	r2, pc, #4	@ (adr r2, 80057d4 <UART_SetConfig+0x418>)
 80057ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d2:	bf00      	nop
 80057d4:	080057f9 	.word	0x080057f9
 80057d8:	08005801 	.word	0x08005801
 80057dc:	08005809 	.word	0x08005809
 80057e0:	0800581f 	.word	0x0800581f
 80057e4:	0800580f 	.word	0x0800580f
 80057e8:	0800581f 	.word	0x0800581f
 80057ec:	0800581f 	.word	0x0800581f
 80057f0:	0800581f 	.word	0x0800581f
 80057f4:	08005817 	.word	0x08005817
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057f8:	f7fe fcf2 	bl	80041e0 <HAL_RCC_GetPCLK1Freq>
 80057fc:	61b8      	str	r0, [r7, #24]
        break;
 80057fe:	e013      	b.n	8005828 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005800:	f7fe fd02 	bl	8004208 <HAL_RCC_GetPCLK2Freq>
 8005804:	61b8      	str	r0, [r7, #24]
        break;
 8005806:	e00f      	b.n	8005828 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005808:	4b1d      	ldr	r3, [pc, #116]	@ (8005880 <UART_SetConfig+0x4c4>)
 800580a:	61bb      	str	r3, [r7, #24]
        break;
 800580c:	e00c      	b.n	8005828 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800580e:	f7fe fc15 	bl	800403c <HAL_RCC_GetSysClockFreq>
 8005812:	61b8      	str	r0, [r7, #24]
        break;
 8005814:	e008      	b.n	8005828 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005816:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800581a:	61bb      	str	r3, [r7, #24]
        break;
 800581c:	e004      	b.n	8005828 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800581e:	2300      	movs	r3, #0
 8005820:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	77bb      	strb	r3, [r7, #30]
        break;
 8005826:	bf00      	nop
    }

    if (pclk != 0U)
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d018      	beq.n	8005860 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	085a      	lsrs	r2, r3, #1
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	441a      	add	r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005840:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	2b0f      	cmp	r3, #15
 8005846:	d909      	bls.n	800585c <UART_SetConfig+0x4a0>
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800584e:	d205      	bcs.n	800585c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	b29a      	uxth	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	60da      	str	r2, [r3, #12]
 800585a:	e001      	b.n	8005860 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800586c:	7fbb      	ldrb	r3, [r7, #30]
}
 800586e:	4618      	mov	r0, r3
 8005870:	3720      	adds	r7, #32
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	40007c00 	.word	0x40007c00
 800587c:	40023800 	.word	0x40023800
 8005880:	00f42400 	.word	0x00f42400

08005884 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005890:	f003 0301 	and.w	r3, r3, #1
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00a      	beq.n	80058ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	430a      	orrs	r2, r1
 80058ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b2:	f003 0302 	and.w	r3, r3, #2
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00a      	beq.n	80058d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	430a      	orrs	r2, r1
 80058ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d4:	f003 0304 	and.w	r3, r3, #4
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00a      	beq.n	80058f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	430a      	orrs	r2, r1
 80058f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f6:	f003 0308 	and.w	r3, r3, #8
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00a      	beq.n	8005914 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	430a      	orrs	r2, r1
 8005912:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005918:	f003 0310 	and.w	r3, r3, #16
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00a      	beq.n	8005936 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	430a      	orrs	r2, r1
 8005934:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800593a:	f003 0320 	and.w	r3, r3, #32
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00a      	beq.n	8005958 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	430a      	orrs	r2, r1
 8005956:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800595c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005960:	2b00      	cmp	r3, #0
 8005962:	d01a      	beq.n	800599a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	430a      	orrs	r2, r1
 8005978:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800597e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005982:	d10a      	bne.n	800599a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	430a      	orrs	r2, r1
 8005998:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800599e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00a      	beq.n	80059bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	430a      	orrs	r2, r1
 80059ba:	605a      	str	r2, [r3, #4]
  }
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b086      	sub	sp, #24
 80059cc:	af02      	add	r7, sp, #8
 80059ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059d8:	f7fc ff42 	bl	8002860 <HAL_GetTick>
 80059dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0308 	and.w	r3, r3, #8
 80059e8:	2b08      	cmp	r3, #8
 80059ea:	d10e      	bne.n	8005a0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80059f0:	9300      	str	r3, [sp, #0]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 f81b 	bl	8005a36 <UART_WaitOnFlagUntilTimeout>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d001      	beq.n	8005a0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e011      	b.n	8005a2e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2220      	movs	r2, #32
 8005a0e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2220      	movs	r2, #32
 8005a14:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b09c      	sub	sp, #112	@ 0x70
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	60f8      	str	r0, [r7, #12]
 8005a3e:	60b9      	str	r1, [r7, #8]
 8005a40:	603b      	str	r3, [r7, #0]
 8005a42:	4613      	mov	r3, r2
 8005a44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a46:	e0a7      	b.n	8005b98 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a4e:	f000 80a3 	beq.w	8005b98 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a52:	f7fc ff05 	bl	8002860 <HAL_GetTick>
 8005a56:	4602      	mov	r2, r0
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d302      	bcc.n	8005a68 <UART_WaitOnFlagUntilTimeout+0x32>
 8005a62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d13f      	bne.n	8005ae8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a70:	e853 3f00 	ldrex	r3, [r3]
 8005a74:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005a76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a78:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005a7c:	667b      	str	r3, [r7, #100]	@ 0x64
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	461a      	mov	r2, r3
 8005a84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a86:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a88:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005a8c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005a8e:	e841 2300 	strex	r3, r2, [r1]
 8005a92:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005a94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d1e6      	bne.n	8005a68 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	3308      	adds	r3, #8
 8005aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005aa4:	e853 3f00 	ldrex	r3, [r3]
 8005aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aac:	f023 0301 	bic.w	r3, r3, #1
 8005ab0:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	3308      	adds	r3, #8
 8005ab8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005aba:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005abc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005abe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005ac0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ac2:	e841 2300 	strex	r3, r2, [r1]
 8005ac6:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005ac8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1e5      	bne.n	8005a9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2220      	movs	r2, #32
 8005ad2:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2220      	movs	r2, #32
 8005ad8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e068      	b.n	8005bba <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0304 	and.w	r3, r3, #4
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d050      	beq.n	8005b98 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	69db      	ldr	r3, [r3, #28]
 8005afc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b04:	d148      	bne.n	8005b98 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b0e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b18:	e853 3f00 	ldrex	r3, [r3]
 8005b1c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b20:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005b24:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b30:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b32:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005b34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005b36:	e841 2300 	strex	r3, r2, [r1]
 8005b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1e6      	bne.n	8005b10 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	3308      	adds	r3, #8
 8005b48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	e853 3f00 	ldrex	r3, [r3]
 8005b50:	613b      	str	r3, [r7, #16]
   return(result);
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	f023 0301 	bic.w	r3, r3, #1
 8005b58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	3308      	adds	r3, #8
 8005b60:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005b62:	623a      	str	r2, [r7, #32]
 8005b64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b66:	69f9      	ldr	r1, [r7, #28]
 8005b68:	6a3a      	ldr	r2, [r7, #32]
 8005b6a:	e841 2300 	strex	r3, r2, [r1]
 8005b6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1e5      	bne.n	8005b42 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2220      	movs	r2, #32
 8005b7a:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2220      	movs	r2, #32
 8005b80:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2220      	movs	r2, #32
 8005b88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e010      	b.n	8005bba <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	69da      	ldr	r2, [r3, #28]
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	68ba      	ldr	r2, [r7, #8]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	bf0c      	ite	eq
 8005ba8:	2301      	moveq	r3, #1
 8005baa:	2300      	movne	r3, #0
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	461a      	mov	r2, r3
 8005bb0:	79fb      	ldrb	r3, [r7, #7]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	f43f af48 	beq.w	8005a48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3770      	adds	r7, #112	@ 0x70
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}

08005bc2 <__cvt>:
 8005bc2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bc6:	ec57 6b10 	vmov	r6, r7, d0
 8005bca:	2f00      	cmp	r7, #0
 8005bcc:	460c      	mov	r4, r1
 8005bce:	4619      	mov	r1, r3
 8005bd0:	463b      	mov	r3, r7
 8005bd2:	bfbb      	ittet	lt
 8005bd4:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005bd8:	461f      	movlt	r7, r3
 8005bda:	2300      	movge	r3, #0
 8005bdc:	232d      	movlt	r3, #45	@ 0x2d
 8005bde:	700b      	strb	r3, [r1, #0]
 8005be0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005be2:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005be6:	4691      	mov	r9, r2
 8005be8:	f023 0820 	bic.w	r8, r3, #32
 8005bec:	bfbc      	itt	lt
 8005bee:	4632      	movlt	r2, r6
 8005bf0:	4616      	movlt	r6, r2
 8005bf2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005bf6:	d005      	beq.n	8005c04 <__cvt+0x42>
 8005bf8:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005bfc:	d100      	bne.n	8005c00 <__cvt+0x3e>
 8005bfe:	3401      	adds	r4, #1
 8005c00:	2102      	movs	r1, #2
 8005c02:	e000      	b.n	8005c06 <__cvt+0x44>
 8005c04:	2103      	movs	r1, #3
 8005c06:	ab03      	add	r3, sp, #12
 8005c08:	9301      	str	r3, [sp, #4]
 8005c0a:	ab02      	add	r3, sp, #8
 8005c0c:	9300      	str	r3, [sp, #0]
 8005c0e:	ec47 6b10 	vmov	d0, r6, r7
 8005c12:	4653      	mov	r3, sl
 8005c14:	4622      	mov	r2, r4
 8005c16:	f000 fe5b 	bl	80068d0 <_dtoa_r>
 8005c1a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005c1e:	4605      	mov	r5, r0
 8005c20:	d119      	bne.n	8005c56 <__cvt+0x94>
 8005c22:	f019 0f01 	tst.w	r9, #1
 8005c26:	d00e      	beq.n	8005c46 <__cvt+0x84>
 8005c28:	eb00 0904 	add.w	r9, r0, r4
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	2300      	movs	r3, #0
 8005c30:	4630      	mov	r0, r6
 8005c32:	4639      	mov	r1, r7
 8005c34:	f7fa ff68 	bl	8000b08 <__aeabi_dcmpeq>
 8005c38:	b108      	cbz	r0, 8005c3e <__cvt+0x7c>
 8005c3a:	f8cd 900c 	str.w	r9, [sp, #12]
 8005c3e:	2230      	movs	r2, #48	@ 0x30
 8005c40:	9b03      	ldr	r3, [sp, #12]
 8005c42:	454b      	cmp	r3, r9
 8005c44:	d31e      	bcc.n	8005c84 <__cvt+0xc2>
 8005c46:	9b03      	ldr	r3, [sp, #12]
 8005c48:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005c4a:	1b5b      	subs	r3, r3, r5
 8005c4c:	4628      	mov	r0, r5
 8005c4e:	6013      	str	r3, [r2, #0]
 8005c50:	b004      	add	sp, #16
 8005c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c56:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005c5a:	eb00 0904 	add.w	r9, r0, r4
 8005c5e:	d1e5      	bne.n	8005c2c <__cvt+0x6a>
 8005c60:	7803      	ldrb	r3, [r0, #0]
 8005c62:	2b30      	cmp	r3, #48	@ 0x30
 8005c64:	d10a      	bne.n	8005c7c <__cvt+0xba>
 8005c66:	2200      	movs	r2, #0
 8005c68:	2300      	movs	r3, #0
 8005c6a:	4630      	mov	r0, r6
 8005c6c:	4639      	mov	r1, r7
 8005c6e:	f7fa ff4b 	bl	8000b08 <__aeabi_dcmpeq>
 8005c72:	b918      	cbnz	r0, 8005c7c <__cvt+0xba>
 8005c74:	f1c4 0401 	rsb	r4, r4, #1
 8005c78:	f8ca 4000 	str.w	r4, [sl]
 8005c7c:	f8da 3000 	ldr.w	r3, [sl]
 8005c80:	4499      	add	r9, r3
 8005c82:	e7d3      	b.n	8005c2c <__cvt+0x6a>
 8005c84:	1c59      	adds	r1, r3, #1
 8005c86:	9103      	str	r1, [sp, #12]
 8005c88:	701a      	strb	r2, [r3, #0]
 8005c8a:	e7d9      	b.n	8005c40 <__cvt+0x7e>

08005c8c <__exponent>:
 8005c8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c8e:	2900      	cmp	r1, #0
 8005c90:	bfba      	itte	lt
 8005c92:	4249      	neglt	r1, r1
 8005c94:	232d      	movlt	r3, #45	@ 0x2d
 8005c96:	232b      	movge	r3, #43	@ 0x2b
 8005c98:	2909      	cmp	r1, #9
 8005c9a:	7002      	strb	r2, [r0, #0]
 8005c9c:	7043      	strb	r3, [r0, #1]
 8005c9e:	dd29      	ble.n	8005cf4 <__exponent+0x68>
 8005ca0:	f10d 0307 	add.w	r3, sp, #7
 8005ca4:	461d      	mov	r5, r3
 8005ca6:	270a      	movs	r7, #10
 8005ca8:	461a      	mov	r2, r3
 8005caa:	fbb1 f6f7 	udiv	r6, r1, r7
 8005cae:	fb07 1416 	mls	r4, r7, r6, r1
 8005cb2:	3430      	adds	r4, #48	@ 0x30
 8005cb4:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005cb8:	460c      	mov	r4, r1
 8005cba:	2c63      	cmp	r4, #99	@ 0x63
 8005cbc:	f103 33ff 	add.w	r3, r3, #4294967295
 8005cc0:	4631      	mov	r1, r6
 8005cc2:	dcf1      	bgt.n	8005ca8 <__exponent+0x1c>
 8005cc4:	3130      	adds	r1, #48	@ 0x30
 8005cc6:	1e94      	subs	r4, r2, #2
 8005cc8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005ccc:	1c41      	adds	r1, r0, #1
 8005cce:	4623      	mov	r3, r4
 8005cd0:	42ab      	cmp	r3, r5
 8005cd2:	d30a      	bcc.n	8005cea <__exponent+0x5e>
 8005cd4:	f10d 0309 	add.w	r3, sp, #9
 8005cd8:	1a9b      	subs	r3, r3, r2
 8005cda:	42ac      	cmp	r4, r5
 8005cdc:	bf88      	it	hi
 8005cde:	2300      	movhi	r3, #0
 8005ce0:	3302      	adds	r3, #2
 8005ce2:	4403      	add	r3, r0
 8005ce4:	1a18      	subs	r0, r3, r0
 8005ce6:	b003      	add	sp, #12
 8005ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cea:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005cee:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005cf2:	e7ed      	b.n	8005cd0 <__exponent+0x44>
 8005cf4:	2330      	movs	r3, #48	@ 0x30
 8005cf6:	3130      	adds	r1, #48	@ 0x30
 8005cf8:	7083      	strb	r3, [r0, #2]
 8005cfa:	70c1      	strb	r1, [r0, #3]
 8005cfc:	1d03      	adds	r3, r0, #4
 8005cfe:	e7f1      	b.n	8005ce4 <__exponent+0x58>

08005d00 <_printf_float>:
 8005d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d04:	b08d      	sub	sp, #52	@ 0x34
 8005d06:	460c      	mov	r4, r1
 8005d08:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005d0c:	4616      	mov	r6, r2
 8005d0e:	461f      	mov	r7, r3
 8005d10:	4605      	mov	r5, r0
 8005d12:	f000 fcdb 	bl	80066cc <_localeconv_r>
 8005d16:	6803      	ldr	r3, [r0, #0]
 8005d18:	9304      	str	r3, [sp, #16]
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7fa fac8 	bl	80002b0 <strlen>
 8005d20:	2300      	movs	r3, #0
 8005d22:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d24:	f8d8 3000 	ldr.w	r3, [r8]
 8005d28:	9005      	str	r0, [sp, #20]
 8005d2a:	3307      	adds	r3, #7
 8005d2c:	f023 0307 	bic.w	r3, r3, #7
 8005d30:	f103 0208 	add.w	r2, r3, #8
 8005d34:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005d38:	f8d4 b000 	ldr.w	fp, [r4]
 8005d3c:	f8c8 2000 	str.w	r2, [r8]
 8005d40:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005d44:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005d48:	9307      	str	r3, [sp, #28]
 8005d4a:	f8cd 8018 	str.w	r8, [sp, #24]
 8005d4e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005d52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d56:	4b9c      	ldr	r3, [pc, #624]	@ (8005fc8 <_printf_float+0x2c8>)
 8005d58:	f04f 32ff 	mov.w	r2, #4294967295
 8005d5c:	f7fa ff06 	bl	8000b6c <__aeabi_dcmpun>
 8005d60:	bb70      	cbnz	r0, 8005dc0 <_printf_float+0xc0>
 8005d62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d66:	4b98      	ldr	r3, [pc, #608]	@ (8005fc8 <_printf_float+0x2c8>)
 8005d68:	f04f 32ff 	mov.w	r2, #4294967295
 8005d6c:	f7fa fee0 	bl	8000b30 <__aeabi_dcmple>
 8005d70:	bb30      	cbnz	r0, 8005dc0 <_printf_float+0xc0>
 8005d72:	2200      	movs	r2, #0
 8005d74:	2300      	movs	r3, #0
 8005d76:	4640      	mov	r0, r8
 8005d78:	4649      	mov	r1, r9
 8005d7a:	f7fa fecf 	bl	8000b1c <__aeabi_dcmplt>
 8005d7e:	b110      	cbz	r0, 8005d86 <_printf_float+0x86>
 8005d80:	232d      	movs	r3, #45	@ 0x2d
 8005d82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d86:	4a91      	ldr	r2, [pc, #580]	@ (8005fcc <_printf_float+0x2cc>)
 8005d88:	4b91      	ldr	r3, [pc, #580]	@ (8005fd0 <_printf_float+0x2d0>)
 8005d8a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005d8e:	bf94      	ite	ls
 8005d90:	4690      	movls	r8, r2
 8005d92:	4698      	movhi	r8, r3
 8005d94:	2303      	movs	r3, #3
 8005d96:	6123      	str	r3, [r4, #16]
 8005d98:	f02b 0304 	bic.w	r3, fp, #4
 8005d9c:	6023      	str	r3, [r4, #0]
 8005d9e:	f04f 0900 	mov.w	r9, #0
 8005da2:	9700      	str	r7, [sp, #0]
 8005da4:	4633      	mov	r3, r6
 8005da6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005da8:	4621      	mov	r1, r4
 8005daa:	4628      	mov	r0, r5
 8005dac:	f000 f9d2 	bl	8006154 <_printf_common>
 8005db0:	3001      	adds	r0, #1
 8005db2:	f040 808d 	bne.w	8005ed0 <_printf_float+0x1d0>
 8005db6:	f04f 30ff 	mov.w	r0, #4294967295
 8005dba:	b00d      	add	sp, #52	@ 0x34
 8005dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dc0:	4642      	mov	r2, r8
 8005dc2:	464b      	mov	r3, r9
 8005dc4:	4640      	mov	r0, r8
 8005dc6:	4649      	mov	r1, r9
 8005dc8:	f7fa fed0 	bl	8000b6c <__aeabi_dcmpun>
 8005dcc:	b140      	cbz	r0, 8005de0 <_printf_float+0xe0>
 8005dce:	464b      	mov	r3, r9
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	bfbc      	itt	lt
 8005dd4:	232d      	movlt	r3, #45	@ 0x2d
 8005dd6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005dda:	4a7e      	ldr	r2, [pc, #504]	@ (8005fd4 <_printf_float+0x2d4>)
 8005ddc:	4b7e      	ldr	r3, [pc, #504]	@ (8005fd8 <_printf_float+0x2d8>)
 8005dde:	e7d4      	b.n	8005d8a <_printf_float+0x8a>
 8005de0:	6863      	ldr	r3, [r4, #4]
 8005de2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005de6:	9206      	str	r2, [sp, #24]
 8005de8:	1c5a      	adds	r2, r3, #1
 8005dea:	d13b      	bne.n	8005e64 <_printf_float+0x164>
 8005dec:	2306      	movs	r3, #6
 8005dee:	6063      	str	r3, [r4, #4]
 8005df0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005df4:	2300      	movs	r3, #0
 8005df6:	6022      	str	r2, [r4, #0]
 8005df8:	9303      	str	r3, [sp, #12]
 8005dfa:	ab0a      	add	r3, sp, #40	@ 0x28
 8005dfc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005e00:	ab09      	add	r3, sp, #36	@ 0x24
 8005e02:	9300      	str	r3, [sp, #0]
 8005e04:	6861      	ldr	r1, [r4, #4]
 8005e06:	ec49 8b10 	vmov	d0, r8, r9
 8005e0a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005e0e:	4628      	mov	r0, r5
 8005e10:	f7ff fed7 	bl	8005bc2 <__cvt>
 8005e14:	9b06      	ldr	r3, [sp, #24]
 8005e16:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005e18:	2b47      	cmp	r3, #71	@ 0x47
 8005e1a:	4680      	mov	r8, r0
 8005e1c:	d129      	bne.n	8005e72 <_printf_float+0x172>
 8005e1e:	1cc8      	adds	r0, r1, #3
 8005e20:	db02      	blt.n	8005e28 <_printf_float+0x128>
 8005e22:	6863      	ldr	r3, [r4, #4]
 8005e24:	4299      	cmp	r1, r3
 8005e26:	dd41      	ble.n	8005eac <_printf_float+0x1ac>
 8005e28:	f1aa 0a02 	sub.w	sl, sl, #2
 8005e2c:	fa5f fa8a 	uxtb.w	sl, sl
 8005e30:	3901      	subs	r1, #1
 8005e32:	4652      	mov	r2, sl
 8005e34:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005e38:	9109      	str	r1, [sp, #36]	@ 0x24
 8005e3a:	f7ff ff27 	bl	8005c8c <__exponent>
 8005e3e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005e40:	1813      	adds	r3, r2, r0
 8005e42:	2a01      	cmp	r2, #1
 8005e44:	4681      	mov	r9, r0
 8005e46:	6123      	str	r3, [r4, #16]
 8005e48:	dc02      	bgt.n	8005e50 <_printf_float+0x150>
 8005e4a:	6822      	ldr	r2, [r4, #0]
 8005e4c:	07d2      	lsls	r2, r2, #31
 8005e4e:	d501      	bpl.n	8005e54 <_printf_float+0x154>
 8005e50:	3301      	adds	r3, #1
 8005e52:	6123      	str	r3, [r4, #16]
 8005e54:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d0a2      	beq.n	8005da2 <_printf_float+0xa2>
 8005e5c:	232d      	movs	r3, #45	@ 0x2d
 8005e5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e62:	e79e      	b.n	8005da2 <_printf_float+0xa2>
 8005e64:	9a06      	ldr	r2, [sp, #24]
 8005e66:	2a47      	cmp	r2, #71	@ 0x47
 8005e68:	d1c2      	bne.n	8005df0 <_printf_float+0xf0>
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1c0      	bne.n	8005df0 <_printf_float+0xf0>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e7bd      	b.n	8005dee <_printf_float+0xee>
 8005e72:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005e76:	d9db      	bls.n	8005e30 <_printf_float+0x130>
 8005e78:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005e7c:	d118      	bne.n	8005eb0 <_printf_float+0x1b0>
 8005e7e:	2900      	cmp	r1, #0
 8005e80:	6863      	ldr	r3, [r4, #4]
 8005e82:	dd0b      	ble.n	8005e9c <_printf_float+0x19c>
 8005e84:	6121      	str	r1, [r4, #16]
 8005e86:	b913      	cbnz	r3, 8005e8e <_printf_float+0x18e>
 8005e88:	6822      	ldr	r2, [r4, #0]
 8005e8a:	07d0      	lsls	r0, r2, #31
 8005e8c:	d502      	bpl.n	8005e94 <_printf_float+0x194>
 8005e8e:	3301      	adds	r3, #1
 8005e90:	440b      	add	r3, r1
 8005e92:	6123      	str	r3, [r4, #16]
 8005e94:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005e96:	f04f 0900 	mov.w	r9, #0
 8005e9a:	e7db      	b.n	8005e54 <_printf_float+0x154>
 8005e9c:	b913      	cbnz	r3, 8005ea4 <_printf_float+0x1a4>
 8005e9e:	6822      	ldr	r2, [r4, #0]
 8005ea0:	07d2      	lsls	r2, r2, #31
 8005ea2:	d501      	bpl.n	8005ea8 <_printf_float+0x1a8>
 8005ea4:	3302      	adds	r3, #2
 8005ea6:	e7f4      	b.n	8005e92 <_printf_float+0x192>
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e7f2      	b.n	8005e92 <_printf_float+0x192>
 8005eac:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005eb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005eb2:	4299      	cmp	r1, r3
 8005eb4:	db05      	blt.n	8005ec2 <_printf_float+0x1c2>
 8005eb6:	6823      	ldr	r3, [r4, #0]
 8005eb8:	6121      	str	r1, [r4, #16]
 8005eba:	07d8      	lsls	r0, r3, #31
 8005ebc:	d5ea      	bpl.n	8005e94 <_printf_float+0x194>
 8005ebe:	1c4b      	adds	r3, r1, #1
 8005ec0:	e7e7      	b.n	8005e92 <_printf_float+0x192>
 8005ec2:	2900      	cmp	r1, #0
 8005ec4:	bfd4      	ite	le
 8005ec6:	f1c1 0202 	rsble	r2, r1, #2
 8005eca:	2201      	movgt	r2, #1
 8005ecc:	4413      	add	r3, r2
 8005ece:	e7e0      	b.n	8005e92 <_printf_float+0x192>
 8005ed0:	6823      	ldr	r3, [r4, #0]
 8005ed2:	055a      	lsls	r2, r3, #21
 8005ed4:	d407      	bmi.n	8005ee6 <_printf_float+0x1e6>
 8005ed6:	6923      	ldr	r3, [r4, #16]
 8005ed8:	4642      	mov	r2, r8
 8005eda:	4631      	mov	r1, r6
 8005edc:	4628      	mov	r0, r5
 8005ede:	47b8      	blx	r7
 8005ee0:	3001      	adds	r0, #1
 8005ee2:	d12b      	bne.n	8005f3c <_printf_float+0x23c>
 8005ee4:	e767      	b.n	8005db6 <_printf_float+0xb6>
 8005ee6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005eea:	f240 80dd 	bls.w	80060a8 <_printf_float+0x3a8>
 8005eee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	f7fa fe07 	bl	8000b08 <__aeabi_dcmpeq>
 8005efa:	2800      	cmp	r0, #0
 8005efc:	d033      	beq.n	8005f66 <_printf_float+0x266>
 8005efe:	4a37      	ldr	r2, [pc, #220]	@ (8005fdc <_printf_float+0x2dc>)
 8005f00:	2301      	movs	r3, #1
 8005f02:	4631      	mov	r1, r6
 8005f04:	4628      	mov	r0, r5
 8005f06:	47b8      	blx	r7
 8005f08:	3001      	adds	r0, #1
 8005f0a:	f43f af54 	beq.w	8005db6 <_printf_float+0xb6>
 8005f0e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005f12:	4543      	cmp	r3, r8
 8005f14:	db02      	blt.n	8005f1c <_printf_float+0x21c>
 8005f16:	6823      	ldr	r3, [r4, #0]
 8005f18:	07d8      	lsls	r0, r3, #31
 8005f1a:	d50f      	bpl.n	8005f3c <_printf_float+0x23c>
 8005f1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f20:	4631      	mov	r1, r6
 8005f22:	4628      	mov	r0, r5
 8005f24:	47b8      	blx	r7
 8005f26:	3001      	adds	r0, #1
 8005f28:	f43f af45 	beq.w	8005db6 <_printf_float+0xb6>
 8005f2c:	f04f 0900 	mov.w	r9, #0
 8005f30:	f108 38ff 	add.w	r8, r8, #4294967295
 8005f34:	f104 0a1a 	add.w	sl, r4, #26
 8005f38:	45c8      	cmp	r8, r9
 8005f3a:	dc09      	bgt.n	8005f50 <_printf_float+0x250>
 8005f3c:	6823      	ldr	r3, [r4, #0]
 8005f3e:	079b      	lsls	r3, r3, #30
 8005f40:	f100 8103 	bmi.w	800614a <_printf_float+0x44a>
 8005f44:	68e0      	ldr	r0, [r4, #12]
 8005f46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f48:	4298      	cmp	r0, r3
 8005f4a:	bfb8      	it	lt
 8005f4c:	4618      	movlt	r0, r3
 8005f4e:	e734      	b.n	8005dba <_printf_float+0xba>
 8005f50:	2301      	movs	r3, #1
 8005f52:	4652      	mov	r2, sl
 8005f54:	4631      	mov	r1, r6
 8005f56:	4628      	mov	r0, r5
 8005f58:	47b8      	blx	r7
 8005f5a:	3001      	adds	r0, #1
 8005f5c:	f43f af2b 	beq.w	8005db6 <_printf_float+0xb6>
 8005f60:	f109 0901 	add.w	r9, r9, #1
 8005f64:	e7e8      	b.n	8005f38 <_printf_float+0x238>
 8005f66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	dc39      	bgt.n	8005fe0 <_printf_float+0x2e0>
 8005f6c:	4a1b      	ldr	r2, [pc, #108]	@ (8005fdc <_printf_float+0x2dc>)
 8005f6e:	2301      	movs	r3, #1
 8005f70:	4631      	mov	r1, r6
 8005f72:	4628      	mov	r0, r5
 8005f74:	47b8      	blx	r7
 8005f76:	3001      	adds	r0, #1
 8005f78:	f43f af1d 	beq.w	8005db6 <_printf_float+0xb6>
 8005f7c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005f80:	ea59 0303 	orrs.w	r3, r9, r3
 8005f84:	d102      	bne.n	8005f8c <_printf_float+0x28c>
 8005f86:	6823      	ldr	r3, [r4, #0]
 8005f88:	07d9      	lsls	r1, r3, #31
 8005f8a:	d5d7      	bpl.n	8005f3c <_printf_float+0x23c>
 8005f8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f90:	4631      	mov	r1, r6
 8005f92:	4628      	mov	r0, r5
 8005f94:	47b8      	blx	r7
 8005f96:	3001      	adds	r0, #1
 8005f98:	f43f af0d 	beq.w	8005db6 <_printf_float+0xb6>
 8005f9c:	f04f 0a00 	mov.w	sl, #0
 8005fa0:	f104 0b1a 	add.w	fp, r4, #26
 8005fa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fa6:	425b      	negs	r3, r3
 8005fa8:	4553      	cmp	r3, sl
 8005faa:	dc01      	bgt.n	8005fb0 <_printf_float+0x2b0>
 8005fac:	464b      	mov	r3, r9
 8005fae:	e793      	b.n	8005ed8 <_printf_float+0x1d8>
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	465a      	mov	r2, fp
 8005fb4:	4631      	mov	r1, r6
 8005fb6:	4628      	mov	r0, r5
 8005fb8:	47b8      	blx	r7
 8005fba:	3001      	adds	r0, #1
 8005fbc:	f43f aefb 	beq.w	8005db6 <_printf_float+0xb6>
 8005fc0:	f10a 0a01 	add.w	sl, sl, #1
 8005fc4:	e7ee      	b.n	8005fa4 <_printf_float+0x2a4>
 8005fc6:	bf00      	nop
 8005fc8:	7fefffff 	.word	0x7fefffff
 8005fcc:	08008920 	.word	0x08008920
 8005fd0:	08008924 	.word	0x08008924
 8005fd4:	08008928 	.word	0x08008928
 8005fd8:	0800892c 	.word	0x0800892c
 8005fdc:	08008930 	.word	0x08008930
 8005fe0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005fe2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005fe6:	4553      	cmp	r3, sl
 8005fe8:	bfa8      	it	ge
 8005fea:	4653      	movge	r3, sl
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	4699      	mov	r9, r3
 8005ff0:	dc36      	bgt.n	8006060 <_printf_float+0x360>
 8005ff2:	f04f 0b00 	mov.w	fp, #0
 8005ff6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ffa:	f104 021a 	add.w	r2, r4, #26
 8005ffe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006000:	9306      	str	r3, [sp, #24]
 8006002:	eba3 0309 	sub.w	r3, r3, r9
 8006006:	455b      	cmp	r3, fp
 8006008:	dc31      	bgt.n	800606e <_printf_float+0x36e>
 800600a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800600c:	459a      	cmp	sl, r3
 800600e:	dc3a      	bgt.n	8006086 <_printf_float+0x386>
 8006010:	6823      	ldr	r3, [r4, #0]
 8006012:	07da      	lsls	r2, r3, #31
 8006014:	d437      	bmi.n	8006086 <_printf_float+0x386>
 8006016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006018:	ebaa 0903 	sub.w	r9, sl, r3
 800601c:	9b06      	ldr	r3, [sp, #24]
 800601e:	ebaa 0303 	sub.w	r3, sl, r3
 8006022:	4599      	cmp	r9, r3
 8006024:	bfa8      	it	ge
 8006026:	4699      	movge	r9, r3
 8006028:	f1b9 0f00 	cmp.w	r9, #0
 800602c:	dc33      	bgt.n	8006096 <_printf_float+0x396>
 800602e:	f04f 0800 	mov.w	r8, #0
 8006032:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006036:	f104 0b1a 	add.w	fp, r4, #26
 800603a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800603c:	ebaa 0303 	sub.w	r3, sl, r3
 8006040:	eba3 0309 	sub.w	r3, r3, r9
 8006044:	4543      	cmp	r3, r8
 8006046:	f77f af79 	ble.w	8005f3c <_printf_float+0x23c>
 800604a:	2301      	movs	r3, #1
 800604c:	465a      	mov	r2, fp
 800604e:	4631      	mov	r1, r6
 8006050:	4628      	mov	r0, r5
 8006052:	47b8      	blx	r7
 8006054:	3001      	adds	r0, #1
 8006056:	f43f aeae 	beq.w	8005db6 <_printf_float+0xb6>
 800605a:	f108 0801 	add.w	r8, r8, #1
 800605e:	e7ec      	b.n	800603a <_printf_float+0x33a>
 8006060:	4642      	mov	r2, r8
 8006062:	4631      	mov	r1, r6
 8006064:	4628      	mov	r0, r5
 8006066:	47b8      	blx	r7
 8006068:	3001      	adds	r0, #1
 800606a:	d1c2      	bne.n	8005ff2 <_printf_float+0x2f2>
 800606c:	e6a3      	b.n	8005db6 <_printf_float+0xb6>
 800606e:	2301      	movs	r3, #1
 8006070:	4631      	mov	r1, r6
 8006072:	4628      	mov	r0, r5
 8006074:	9206      	str	r2, [sp, #24]
 8006076:	47b8      	blx	r7
 8006078:	3001      	adds	r0, #1
 800607a:	f43f ae9c 	beq.w	8005db6 <_printf_float+0xb6>
 800607e:	9a06      	ldr	r2, [sp, #24]
 8006080:	f10b 0b01 	add.w	fp, fp, #1
 8006084:	e7bb      	b.n	8005ffe <_printf_float+0x2fe>
 8006086:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800608a:	4631      	mov	r1, r6
 800608c:	4628      	mov	r0, r5
 800608e:	47b8      	blx	r7
 8006090:	3001      	adds	r0, #1
 8006092:	d1c0      	bne.n	8006016 <_printf_float+0x316>
 8006094:	e68f      	b.n	8005db6 <_printf_float+0xb6>
 8006096:	9a06      	ldr	r2, [sp, #24]
 8006098:	464b      	mov	r3, r9
 800609a:	4442      	add	r2, r8
 800609c:	4631      	mov	r1, r6
 800609e:	4628      	mov	r0, r5
 80060a0:	47b8      	blx	r7
 80060a2:	3001      	adds	r0, #1
 80060a4:	d1c3      	bne.n	800602e <_printf_float+0x32e>
 80060a6:	e686      	b.n	8005db6 <_printf_float+0xb6>
 80060a8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80060ac:	f1ba 0f01 	cmp.w	sl, #1
 80060b0:	dc01      	bgt.n	80060b6 <_printf_float+0x3b6>
 80060b2:	07db      	lsls	r3, r3, #31
 80060b4:	d536      	bpl.n	8006124 <_printf_float+0x424>
 80060b6:	2301      	movs	r3, #1
 80060b8:	4642      	mov	r2, r8
 80060ba:	4631      	mov	r1, r6
 80060bc:	4628      	mov	r0, r5
 80060be:	47b8      	blx	r7
 80060c0:	3001      	adds	r0, #1
 80060c2:	f43f ae78 	beq.w	8005db6 <_printf_float+0xb6>
 80060c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060ca:	4631      	mov	r1, r6
 80060cc:	4628      	mov	r0, r5
 80060ce:	47b8      	blx	r7
 80060d0:	3001      	adds	r0, #1
 80060d2:	f43f ae70 	beq.w	8005db6 <_printf_float+0xb6>
 80060d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80060da:	2200      	movs	r2, #0
 80060dc:	2300      	movs	r3, #0
 80060de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80060e2:	f7fa fd11 	bl	8000b08 <__aeabi_dcmpeq>
 80060e6:	b9c0      	cbnz	r0, 800611a <_printf_float+0x41a>
 80060e8:	4653      	mov	r3, sl
 80060ea:	f108 0201 	add.w	r2, r8, #1
 80060ee:	4631      	mov	r1, r6
 80060f0:	4628      	mov	r0, r5
 80060f2:	47b8      	blx	r7
 80060f4:	3001      	adds	r0, #1
 80060f6:	d10c      	bne.n	8006112 <_printf_float+0x412>
 80060f8:	e65d      	b.n	8005db6 <_printf_float+0xb6>
 80060fa:	2301      	movs	r3, #1
 80060fc:	465a      	mov	r2, fp
 80060fe:	4631      	mov	r1, r6
 8006100:	4628      	mov	r0, r5
 8006102:	47b8      	blx	r7
 8006104:	3001      	adds	r0, #1
 8006106:	f43f ae56 	beq.w	8005db6 <_printf_float+0xb6>
 800610a:	f108 0801 	add.w	r8, r8, #1
 800610e:	45d0      	cmp	r8, sl
 8006110:	dbf3      	blt.n	80060fa <_printf_float+0x3fa>
 8006112:	464b      	mov	r3, r9
 8006114:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006118:	e6df      	b.n	8005eda <_printf_float+0x1da>
 800611a:	f04f 0800 	mov.w	r8, #0
 800611e:	f104 0b1a 	add.w	fp, r4, #26
 8006122:	e7f4      	b.n	800610e <_printf_float+0x40e>
 8006124:	2301      	movs	r3, #1
 8006126:	4642      	mov	r2, r8
 8006128:	e7e1      	b.n	80060ee <_printf_float+0x3ee>
 800612a:	2301      	movs	r3, #1
 800612c:	464a      	mov	r2, r9
 800612e:	4631      	mov	r1, r6
 8006130:	4628      	mov	r0, r5
 8006132:	47b8      	blx	r7
 8006134:	3001      	adds	r0, #1
 8006136:	f43f ae3e 	beq.w	8005db6 <_printf_float+0xb6>
 800613a:	f108 0801 	add.w	r8, r8, #1
 800613e:	68e3      	ldr	r3, [r4, #12]
 8006140:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006142:	1a5b      	subs	r3, r3, r1
 8006144:	4543      	cmp	r3, r8
 8006146:	dcf0      	bgt.n	800612a <_printf_float+0x42a>
 8006148:	e6fc      	b.n	8005f44 <_printf_float+0x244>
 800614a:	f04f 0800 	mov.w	r8, #0
 800614e:	f104 0919 	add.w	r9, r4, #25
 8006152:	e7f4      	b.n	800613e <_printf_float+0x43e>

08006154 <_printf_common>:
 8006154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006158:	4616      	mov	r6, r2
 800615a:	4698      	mov	r8, r3
 800615c:	688a      	ldr	r2, [r1, #8]
 800615e:	690b      	ldr	r3, [r1, #16]
 8006160:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006164:	4293      	cmp	r3, r2
 8006166:	bfb8      	it	lt
 8006168:	4613      	movlt	r3, r2
 800616a:	6033      	str	r3, [r6, #0]
 800616c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006170:	4607      	mov	r7, r0
 8006172:	460c      	mov	r4, r1
 8006174:	b10a      	cbz	r2, 800617a <_printf_common+0x26>
 8006176:	3301      	adds	r3, #1
 8006178:	6033      	str	r3, [r6, #0]
 800617a:	6823      	ldr	r3, [r4, #0]
 800617c:	0699      	lsls	r1, r3, #26
 800617e:	bf42      	ittt	mi
 8006180:	6833      	ldrmi	r3, [r6, #0]
 8006182:	3302      	addmi	r3, #2
 8006184:	6033      	strmi	r3, [r6, #0]
 8006186:	6825      	ldr	r5, [r4, #0]
 8006188:	f015 0506 	ands.w	r5, r5, #6
 800618c:	d106      	bne.n	800619c <_printf_common+0x48>
 800618e:	f104 0a19 	add.w	sl, r4, #25
 8006192:	68e3      	ldr	r3, [r4, #12]
 8006194:	6832      	ldr	r2, [r6, #0]
 8006196:	1a9b      	subs	r3, r3, r2
 8006198:	42ab      	cmp	r3, r5
 800619a:	dc26      	bgt.n	80061ea <_printf_common+0x96>
 800619c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80061a0:	6822      	ldr	r2, [r4, #0]
 80061a2:	3b00      	subs	r3, #0
 80061a4:	bf18      	it	ne
 80061a6:	2301      	movne	r3, #1
 80061a8:	0692      	lsls	r2, r2, #26
 80061aa:	d42b      	bmi.n	8006204 <_printf_common+0xb0>
 80061ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80061b0:	4641      	mov	r1, r8
 80061b2:	4638      	mov	r0, r7
 80061b4:	47c8      	blx	r9
 80061b6:	3001      	adds	r0, #1
 80061b8:	d01e      	beq.n	80061f8 <_printf_common+0xa4>
 80061ba:	6823      	ldr	r3, [r4, #0]
 80061bc:	6922      	ldr	r2, [r4, #16]
 80061be:	f003 0306 	and.w	r3, r3, #6
 80061c2:	2b04      	cmp	r3, #4
 80061c4:	bf02      	ittt	eq
 80061c6:	68e5      	ldreq	r5, [r4, #12]
 80061c8:	6833      	ldreq	r3, [r6, #0]
 80061ca:	1aed      	subeq	r5, r5, r3
 80061cc:	68a3      	ldr	r3, [r4, #8]
 80061ce:	bf0c      	ite	eq
 80061d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061d4:	2500      	movne	r5, #0
 80061d6:	4293      	cmp	r3, r2
 80061d8:	bfc4      	itt	gt
 80061da:	1a9b      	subgt	r3, r3, r2
 80061dc:	18ed      	addgt	r5, r5, r3
 80061de:	2600      	movs	r6, #0
 80061e0:	341a      	adds	r4, #26
 80061e2:	42b5      	cmp	r5, r6
 80061e4:	d11a      	bne.n	800621c <_printf_common+0xc8>
 80061e6:	2000      	movs	r0, #0
 80061e8:	e008      	b.n	80061fc <_printf_common+0xa8>
 80061ea:	2301      	movs	r3, #1
 80061ec:	4652      	mov	r2, sl
 80061ee:	4641      	mov	r1, r8
 80061f0:	4638      	mov	r0, r7
 80061f2:	47c8      	blx	r9
 80061f4:	3001      	adds	r0, #1
 80061f6:	d103      	bne.n	8006200 <_printf_common+0xac>
 80061f8:	f04f 30ff 	mov.w	r0, #4294967295
 80061fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006200:	3501      	adds	r5, #1
 8006202:	e7c6      	b.n	8006192 <_printf_common+0x3e>
 8006204:	18e1      	adds	r1, r4, r3
 8006206:	1c5a      	adds	r2, r3, #1
 8006208:	2030      	movs	r0, #48	@ 0x30
 800620a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800620e:	4422      	add	r2, r4
 8006210:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006214:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006218:	3302      	adds	r3, #2
 800621a:	e7c7      	b.n	80061ac <_printf_common+0x58>
 800621c:	2301      	movs	r3, #1
 800621e:	4622      	mov	r2, r4
 8006220:	4641      	mov	r1, r8
 8006222:	4638      	mov	r0, r7
 8006224:	47c8      	blx	r9
 8006226:	3001      	adds	r0, #1
 8006228:	d0e6      	beq.n	80061f8 <_printf_common+0xa4>
 800622a:	3601      	adds	r6, #1
 800622c:	e7d9      	b.n	80061e2 <_printf_common+0x8e>
	...

08006230 <_printf_i>:
 8006230:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006234:	7e0f      	ldrb	r7, [r1, #24]
 8006236:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006238:	2f78      	cmp	r7, #120	@ 0x78
 800623a:	4691      	mov	r9, r2
 800623c:	4680      	mov	r8, r0
 800623e:	460c      	mov	r4, r1
 8006240:	469a      	mov	sl, r3
 8006242:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006246:	d807      	bhi.n	8006258 <_printf_i+0x28>
 8006248:	2f62      	cmp	r7, #98	@ 0x62
 800624a:	d80a      	bhi.n	8006262 <_printf_i+0x32>
 800624c:	2f00      	cmp	r7, #0
 800624e:	f000 80d2 	beq.w	80063f6 <_printf_i+0x1c6>
 8006252:	2f58      	cmp	r7, #88	@ 0x58
 8006254:	f000 80b9 	beq.w	80063ca <_printf_i+0x19a>
 8006258:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800625c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006260:	e03a      	b.n	80062d8 <_printf_i+0xa8>
 8006262:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006266:	2b15      	cmp	r3, #21
 8006268:	d8f6      	bhi.n	8006258 <_printf_i+0x28>
 800626a:	a101      	add	r1, pc, #4	@ (adr r1, 8006270 <_printf_i+0x40>)
 800626c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006270:	080062c9 	.word	0x080062c9
 8006274:	080062dd 	.word	0x080062dd
 8006278:	08006259 	.word	0x08006259
 800627c:	08006259 	.word	0x08006259
 8006280:	08006259 	.word	0x08006259
 8006284:	08006259 	.word	0x08006259
 8006288:	080062dd 	.word	0x080062dd
 800628c:	08006259 	.word	0x08006259
 8006290:	08006259 	.word	0x08006259
 8006294:	08006259 	.word	0x08006259
 8006298:	08006259 	.word	0x08006259
 800629c:	080063dd 	.word	0x080063dd
 80062a0:	08006307 	.word	0x08006307
 80062a4:	08006397 	.word	0x08006397
 80062a8:	08006259 	.word	0x08006259
 80062ac:	08006259 	.word	0x08006259
 80062b0:	080063ff 	.word	0x080063ff
 80062b4:	08006259 	.word	0x08006259
 80062b8:	08006307 	.word	0x08006307
 80062bc:	08006259 	.word	0x08006259
 80062c0:	08006259 	.word	0x08006259
 80062c4:	0800639f 	.word	0x0800639f
 80062c8:	6833      	ldr	r3, [r6, #0]
 80062ca:	1d1a      	adds	r2, r3, #4
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	6032      	str	r2, [r6, #0]
 80062d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80062d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80062d8:	2301      	movs	r3, #1
 80062da:	e09d      	b.n	8006418 <_printf_i+0x1e8>
 80062dc:	6833      	ldr	r3, [r6, #0]
 80062de:	6820      	ldr	r0, [r4, #0]
 80062e0:	1d19      	adds	r1, r3, #4
 80062e2:	6031      	str	r1, [r6, #0]
 80062e4:	0606      	lsls	r6, r0, #24
 80062e6:	d501      	bpl.n	80062ec <_printf_i+0xbc>
 80062e8:	681d      	ldr	r5, [r3, #0]
 80062ea:	e003      	b.n	80062f4 <_printf_i+0xc4>
 80062ec:	0645      	lsls	r5, r0, #25
 80062ee:	d5fb      	bpl.n	80062e8 <_printf_i+0xb8>
 80062f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80062f4:	2d00      	cmp	r5, #0
 80062f6:	da03      	bge.n	8006300 <_printf_i+0xd0>
 80062f8:	232d      	movs	r3, #45	@ 0x2d
 80062fa:	426d      	negs	r5, r5
 80062fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006300:	4859      	ldr	r0, [pc, #356]	@ (8006468 <_printf_i+0x238>)
 8006302:	230a      	movs	r3, #10
 8006304:	e011      	b.n	800632a <_printf_i+0xfa>
 8006306:	6821      	ldr	r1, [r4, #0]
 8006308:	6833      	ldr	r3, [r6, #0]
 800630a:	0608      	lsls	r0, r1, #24
 800630c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006310:	d402      	bmi.n	8006318 <_printf_i+0xe8>
 8006312:	0649      	lsls	r1, r1, #25
 8006314:	bf48      	it	mi
 8006316:	b2ad      	uxthmi	r5, r5
 8006318:	2f6f      	cmp	r7, #111	@ 0x6f
 800631a:	4853      	ldr	r0, [pc, #332]	@ (8006468 <_printf_i+0x238>)
 800631c:	6033      	str	r3, [r6, #0]
 800631e:	bf14      	ite	ne
 8006320:	230a      	movne	r3, #10
 8006322:	2308      	moveq	r3, #8
 8006324:	2100      	movs	r1, #0
 8006326:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800632a:	6866      	ldr	r6, [r4, #4]
 800632c:	60a6      	str	r6, [r4, #8]
 800632e:	2e00      	cmp	r6, #0
 8006330:	bfa2      	ittt	ge
 8006332:	6821      	ldrge	r1, [r4, #0]
 8006334:	f021 0104 	bicge.w	r1, r1, #4
 8006338:	6021      	strge	r1, [r4, #0]
 800633a:	b90d      	cbnz	r5, 8006340 <_printf_i+0x110>
 800633c:	2e00      	cmp	r6, #0
 800633e:	d04b      	beq.n	80063d8 <_printf_i+0x1a8>
 8006340:	4616      	mov	r6, r2
 8006342:	fbb5 f1f3 	udiv	r1, r5, r3
 8006346:	fb03 5711 	mls	r7, r3, r1, r5
 800634a:	5dc7      	ldrb	r7, [r0, r7]
 800634c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006350:	462f      	mov	r7, r5
 8006352:	42bb      	cmp	r3, r7
 8006354:	460d      	mov	r5, r1
 8006356:	d9f4      	bls.n	8006342 <_printf_i+0x112>
 8006358:	2b08      	cmp	r3, #8
 800635a:	d10b      	bne.n	8006374 <_printf_i+0x144>
 800635c:	6823      	ldr	r3, [r4, #0]
 800635e:	07df      	lsls	r7, r3, #31
 8006360:	d508      	bpl.n	8006374 <_printf_i+0x144>
 8006362:	6923      	ldr	r3, [r4, #16]
 8006364:	6861      	ldr	r1, [r4, #4]
 8006366:	4299      	cmp	r1, r3
 8006368:	bfde      	ittt	le
 800636a:	2330      	movle	r3, #48	@ 0x30
 800636c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006370:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006374:	1b92      	subs	r2, r2, r6
 8006376:	6122      	str	r2, [r4, #16]
 8006378:	f8cd a000 	str.w	sl, [sp]
 800637c:	464b      	mov	r3, r9
 800637e:	aa03      	add	r2, sp, #12
 8006380:	4621      	mov	r1, r4
 8006382:	4640      	mov	r0, r8
 8006384:	f7ff fee6 	bl	8006154 <_printf_common>
 8006388:	3001      	adds	r0, #1
 800638a:	d14a      	bne.n	8006422 <_printf_i+0x1f2>
 800638c:	f04f 30ff 	mov.w	r0, #4294967295
 8006390:	b004      	add	sp, #16
 8006392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006396:	6823      	ldr	r3, [r4, #0]
 8006398:	f043 0320 	orr.w	r3, r3, #32
 800639c:	6023      	str	r3, [r4, #0]
 800639e:	4833      	ldr	r0, [pc, #204]	@ (800646c <_printf_i+0x23c>)
 80063a0:	2778      	movs	r7, #120	@ 0x78
 80063a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80063a6:	6823      	ldr	r3, [r4, #0]
 80063a8:	6831      	ldr	r1, [r6, #0]
 80063aa:	061f      	lsls	r7, r3, #24
 80063ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80063b0:	d402      	bmi.n	80063b8 <_printf_i+0x188>
 80063b2:	065f      	lsls	r7, r3, #25
 80063b4:	bf48      	it	mi
 80063b6:	b2ad      	uxthmi	r5, r5
 80063b8:	6031      	str	r1, [r6, #0]
 80063ba:	07d9      	lsls	r1, r3, #31
 80063bc:	bf44      	itt	mi
 80063be:	f043 0320 	orrmi.w	r3, r3, #32
 80063c2:	6023      	strmi	r3, [r4, #0]
 80063c4:	b11d      	cbz	r5, 80063ce <_printf_i+0x19e>
 80063c6:	2310      	movs	r3, #16
 80063c8:	e7ac      	b.n	8006324 <_printf_i+0xf4>
 80063ca:	4827      	ldr	r0, [pc, #156]	@ (8006468 <_printf_i+0x238>)
 80063cc:	e7e9      	b.n	80063a2 <_printf_i+0x172>
 80063ce:	6823      	ldr	r3, [r4, #0]
 80063d0:	f023 0320 	bic.w	r3, r3, #32
 80063d4:	6023      	str	r3, [r4, #0]
 80063d6:	e7f6      	b.n	80063c6 <_printf_i+0x196>
 80063d8:	4616      	mov	r6, r2
 80063da:	e7bd      	b.n	8006358 <_printf_i+0x128>
 80063dc:	6833      	ldr	r3, [r6, #0]
 80063de:	6825      	ldr	r5, [r4, #0]
 80063e0:	6961      	ldr	r1, [r4, #20]
 80063e2:	1d18      	adds	r0, r3, #4
 80063e4:	6030      	str	r0, [r6, #0]
 80063e6:	062e      	lsls	r6, r5, #24
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	d501      	bpl.n	80063f0 <_printf_i+0x1c0>
 80063ec:	6019      	str	r1, [r3, #0]
 80063ee:	e002      	b.n	80063f6 <_printf_i+0x1c6>
 80063f0:	0668      	lsls	r0, r5, #25
 80063f2:	d5fb      	bpl.n	80063ec <_printf_i+0x1bc>
 80063f4:	8019      	strh	r1, [r3, #0]
 80063f6:	2300      	movs	r3, #0
 80063f8:	6123      	str	r3, [r4, #16]
 80063fa:	4616      	mov	r6, r2
 80063fc:	e7bc      	b.n	8006378 <_printf_i+0x148>
 80063fe:	6833      	ldr	r3, [r6, #0]
 8006400:	1d1a      	adds	r2, r3, #4
 8006402:	6032      	str	r2, [r6, #0]
 8006404:	681e      	ldr	r6, [r3, #0]
 8006406:	6862      	ldr	r2, [r4, #4]
 8006408:	2100      	movs	r1, #0
 800640a:	4630      	mov	r0, r6
 800640c:	f7f9 ff00 	bl	8000210 <memchr>
 8006410:	b108      	cbz	r0, 8006416 <_printf_i+0x1e6>
 8006412:	1b80      	subs	r0, r0, r6
 8006414:	6060      	str	r0, [r4, #4]
 8006416:	6863      	ldr	r3, [r4, #4]
 8006418:	6123      	str	r3, [r4, #16]
 800641a:	2300      	movs	r3, #0
 800641c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006420:	e7aa      	b.n	8006378 <_printf_i+0x148>
 8006422:	6923      	ldr	r3, [r4, #16]
 8006424:	4632      	mov	r2, r6
 8006426:	4649      	mov	r1, r9
 8006428:	4640      	mov	r0, r8
 800642a:	47d0      	blx	sl
 800642c:	3001      	adds	r0, #1
 800642e:	d0ad      	beq.n	800638c <_printf_i+0x15c>
 8006430:	6823      	ldr	r3, [r4, #0]
 8006432:	079b      	lsls	r3, r3, #30
 8006434:	d413      	bmi.n	800645e <_printf_i+0x22e>
 8006436:	68e0      	ldr	r0, [r4, #12]
 8006438:	9b03      	ldr	r3, [sp, #12]
 800643a:	4298      	cmp	r0, r3
 800643c:	bfb8      	it	lt
 800643e:	4618      	movlt	r0, r3
 8006440:	e7a6      	b.n	8006390 <_printf_i+0x160>
 8006442:	2301      	movs	r3, #1
 8006444:	4632      	mov	r2, r6
 8006446:	4649      	mov	r1, r9
 8006448:	4640      	mov	r0, r8
 800644a:	47d0      	blx	sl
 800644c:	3001      	adds	r0, #1
 800644e:	d09d      	beq.n	800638c <_printf_i+0x15c>
 8006450:	3501      	adds	r5, #1
 8006452:	68e3      	ldr	r3, [r4, #12]
 8006454:	9903      	ldr	r1, [sp, #12]
 8006456:	1a5b      	subs	r3, r3, r1
 8006458:	42ab      	cmp	r3, r5
 800645a:	dcf2      	bgt.n	8006442 <_printf_i+0x212>
 800645c:	e7eb      	b.n	8006436 <_printf_i+0x206>
 800645e:	2500      	movs	r5, #0
 8006460:	f104 0619 	add.w	r6, r4, #25
 8006464:	e7f5      	b.n	8006452 <_printf_i+0x222>
 8006466:	bf00      	nop
 8006468:	08008932 	.word	0x08008932
 800646c:	08008943 	.word	0x08008943

08006470 <std>:
 8006470:	2300      	movs	r3, #0
 8006472:	b510      	push	{r4, lr}
 8006474:	4604      	mov	r4, r0
 8006476:	e9c0 3300 	strd	r3, r3, [r0]
 800647a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800647e:	6083      	str	r3, [r0, #8]
 8006480:	8181      	strh	r1, [r0, #12]
 8006482:	6643      	str	r3, [r0, #100]	@ 0x64
 8006484:	81c2      	strh	r2, [r0, #14]
 8006486:	6183      	str	r3, [r0, #24]
 8006488:	4619      	mov	r1, r3
 800648a:	2208      	movs	r2, #8
 800648c:	305c      	adds	r0, #92	@ 0x5c
 800648e:	f000 f914 	bl	80066ba <memset>
 8006492:	4b0d      	ldr	r3, [pc, #52]	@ (80064c8 <std+0x58>)
 8006494:	6263      	str	r3, [r4, #36]	@ 0x24
 8006496:	4b0d      	ldr	r3, [pc, #52]	@ (80064cc <std+0x5c>)
 8006498:	62a3      	str	r3, [r4, #40]	@ 0x28
 800649a:	4b0d      	ldr	r3, [pc, #52]	@ (80064d0 <std+0x60>)
 800649c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800649e:	4b0d      	ldr	r3, [pc, #52]	@ (80064d4 <std+0x64>)
 80064a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80064a2:	4b0d      	ldr	r3, [pc, #52]	@ (80064d8 <std+0x68>)
 80064a4:	6224      	str	r4, [r4, #32]
 80064a6:	429c      	cmp	r4, r3
 80064a8:	d006      	beq.n	80064b8 <std+0x48>
 80064aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80064ae:	4294      	cmp	r4, r2
 80064b0:	d002      	beq.n	80064b8 <std+0x48>
 80064b2:	33d0      	adds	r3, #208	@ 0xd0
 80064b4:	429c      	cmp	r4, r3
 80064b6:	d105      	bne.n	80064c4 <std+0x54>
 80064b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80064bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064c0:	f000 b978 	b.w	80067b4 <__retarget_lock_init_recursive>
 80064c4:	bd10      	pop	{r4, pc}
 80064c6:	bf00      	nop
 80064c8:	08006635 	.word	0x08006635
 80064cc:	08006657 	.word	0x08006657
 80064d0:	0800668f 	.word	0x0800668f
 80064d4:	080066b3 	.word	0x080066b3
 80064d8:	20000438 	.word	0x20000438

080064dc <stdio_exit_handler>:
 80064dc:	4a02      	ldr	r2, [pc, #8]	@ (80064e8 <stdio_exit_handler+0xc>)
 80064de:	4903      	ldr	r1, [pc, #12]	@ (80064ec <stdio_exit_handler+0x10>)
 80064e0:	4803      	ldr	r0, [pc, #12]	@ (80064f0 <stdio_exit_handler+0x14>)
 80064e2:	f000 b869 	b.w	80065b8 <_fwalk_sglue>
 80064e6:	bf00      	nop
 80064e8:	20000020 	.word	0x20000020
 80064ec:	08008115 	.word	0x08008115
 80064f0:	20000030 	.word	0x20000030

080064f4 <cleanup_stdio>:
 80064f4:	6841      	ldr	r1, [r0, #4]
 80064f6:	4b0c      	ldr	r3, [pc, #48]	@ (8006528 <cleanup_stdio+0x34>)
 80064f8:	4299      	cmp	r1, r3
 80064fa:	b510      	push	{r4, lr}
 80064fc:	4604      	mov	r4, r0
 80064fe:	d001      	beq.n	8006504 <cleanup_stdio+0x10>
 8006500:	f001 fe08 	bl	8008114 <_fflush_r>
 8006504:	68a1      	ldr	r1, [r4, #8]
 8006506:	4b09      	ldr	r3, [pc, #36]	@ (800652c <cleanup_stdio+0x38>)
 8006508:	4299      	cmp	r1, r3
 800650a:	d002      	beq.n	8006512 <cleanup_stdio+0x1e>
 800650c:	4620      	mov	r0, r4
 800650e:	f001 fe01 	bl	8008114 <_fflush_r>
 8006512:	68e1      	ldr	r1, [r4, #12]
 8006514:	4b06      	ldr	r3, [pc, #24]	@ (8006530 <cleanup_stdio+0x3c>)
 8006516:	4299      	cmp	r1, r3
 8006518:	d004      	beq.n	8006524 <cleanup_stdio+0x30>
 800651a:	4620      	mov	r0, r4
 800651c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006520:	f001 bdf8 	b.w	8008114 <_fflush_r>
 8006524:	bd10      	pop	{r4, pc}
 8006526:	bf00      	nop
 8006528:	20000438 	.word	0x20000438
 800652c:	200004a0 	.word	0x200004a0
 8006530:	20000508 	.word	0x20000508

08006534 <global_stdio_init.part.0>:
 8006534:	b510      	push	{r4, lr}
 8006536:	4b0b      	ldr	r3, [pc, #44]	@ (8006564 <global_stdio_init.part.0+0x30>)
 8006538:	4c0b      	ldr	r4, [pc, #44]	@ (8006568 <global_stdio_init.part.0+0x34>)
 800653a:	4a0c      	ldr	r2, [pc, #48]	@ (800656c <global_stdio_init.part.0+0x38>)
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	4620      	mov	r0, r4
 8006540:	2200      	movs	r2, #0
 8006542:	2104      	movs	r1, #4
 8006544:	f7ff ff94 	bl	8006470 <std>
 8006548:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800654c:	2201      	movs	r2, #1
 800654e:	2109      	movs	r1, #9
 8006550:	f7ff ff8e 	bl	8006470 <std>
 8006554:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006558:	2202      	movs	r2, #2
 800655a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800655e:	2112      	movs	r1, #18
 8006560:	f7ff bf86 	b.w	8006470 <std>
 8006564:	20000570 	.word	0x20000570
 8006568:	20000438 	.word	0x20000438
 800656c:	080064dd 	.word	0x080064dd

08006570 <__sfp_lock_acquire>:
 8006570:	4801      	ldr	r0, [pc, #4]	@ (8006578 <__sfp_lock_acquire+0x8>)
 8006572:	f000 b920 	b.w	80067b6 <__retarget_lock_acquire_recursive>
 8006576:	bf00      	nop
 8006578:	20000579 	.word	0x20000579

0800657c <__sfp_lock_release>:
 800657c:	4801      	ldr	r0, [pc, #4]	@ (8006584 <__sfp_lock_release+0x8>)
 800657e:	f000 b91b 	b.w	80067b8 <__retarget_lock_release_recursive>
 8006582:	bf00      	nop
 8006584:	20000579 	.word	0x20000579

08006588 <__sinit>:
 8006588:	b510      	push	{r4, lr}
 800658a:	4604      	mov	r4, r0
 800658c:	f7ff fff0 	bl	8006570 <__sfp_lock_acquire>
 8006590:	6a23      	ldr	r3, [r4, #32]
 8006592:	b11b      	cbz	r3, 800659c <__sinit+0x14>
 8006594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006598:	f7ff bff0 	b.w	800657c <__sfp_lock_release>
 800659c:	4b04      	ldr	r3, [pc, #16]	@ (80065b0 <__sinit+0x28>)
 800659e:	6223      	str	r3, [r4, #32]
 80065a0:	4b04      	ldr	r3, [pc, #16]	@ (80065b4 <__sinit+0x2c>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1f5      	bne.n	8006594 <__sinit+0xc>
 80065a8:	f7ff ffc4 	bl	8006534 <global_stdio_init.part.0>
 80065ac:	e7f2      	b.n	8006594 <__sinit+0xc>
 80065ae:	bf00      	nop
 80065b0:	080064f5 	.word	0x080064f5
 80065b4:	20000570 	.word	0x20000570

080065b8 <_fwalk_sglue>:
 80065b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065bc:	4607      	mov	r7, r0
 80065be:	4688      	mov	r8, r1
 80065c0:	4614      	mov	r4, r2
 80065c2:	2600      	movs	r6, #0
 80065c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80065c8:	f1b9 0901 	subs.w	r9, r9, #1
 80065cc:	d505      	bpl.n	80065da <_fwalk_sglue+0x22>
 80065ce:	6824      	ldr	r4, [r4, #0]
 80065d0:	2c00      	cmp	r4, #0
 80065d2:	d1f7      	bne.n	80065c4 <_fwalk_sglue+0xc>
 80065d4:	4630      	mov	r0, r6
 80065d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065da:	89ab      	ldrh	r3, [r5, #12]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d907      	bls.n	80065f0 <_fwalk_sglue+0x38>
 80065e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80065e4:	3301      	adds	r3, #1
 80065e6:	d003      	beq.n	80065f0 <_fwalk_sglue+0x38>
 80065e8:	4629      	mov	r1, r5
 80065ea:	4638      	mov	r0, r7
 80065ec:	47c0      	blx	r8
 80065ee:	4306      	orrs	r6, r0
 80065f0:	3568      	adds	r5, #104	@ 0x68
 80065f2:	e7e9      	b.n	80065c8 <_fwalk_sglue+0x10>

080065f4 <siprintf>:
 80065f4:	b40e      	push	{r1, r2, r3}
 80065f6:	b500      	push	{lr}
 80065f8:	b09c      	sub	sp, #112	@ 0x70
 80065fa:	ab1d      	add	r3, sp, #116	@ 0x74
 80065fc:	9002      	str	r0, [sp, #8]
 80065fe:	9006      	str	r0, [sp, #24]
 8006600:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006604:	4809      	ldr	r0, [pc, #36]	@ (800662c <siprintf+0x38>)
 8006606:	9107      	str	r1, [sp, #28]
 8006608:	9104      	str	r1, [sp, #16]
 800660a:	4909      	ldr	r1, [pc, #36]	@ (8006630 <siprintf+0x3c>)
 800660c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006610:	9105      	str	r1, [sp, #20]
 8006612:	6800      	ldr	r0, [r0, #0]
 8006614:	9301      	str	r3, [sp, #4]
 8006616:	a902      	add	r1, sp, #8
 8006618:	f001 fbfc 	bl	8007e14 <_svfiprintf_r>
 800661c:	9b02      	ldr	r3, [sp, #8]
 800661e:	2200      	movs	r2, #0
 8006620:	701a      	strb	r2, [r3, #0]
 8006622:	b01c      	add	sp, #112	@ 0x70
 8006624:	f85d eb04 	ldr.w	lr, [sp], #4
 8006628:	b003      	add	sp, #12
 800662a:	4770      	bx	lr
 800662c:	2000002c 	.word	0x2000002c
 8006630:	ffff0208 	.word	0xffff0208

08006634 <__sread>:
 8006634:	b510      	push	{r4, lr}
 8006636:	460c      	mov	r4, r1
 8006638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800663c:	f000 f86c 	bl	8006718 <_read_r>
 8006640:	2800      	cmp	r0, #0
 8006642:	bfab      	itete	ge
 8006644:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006646:	89a3      	ldrhlt	r3, [r4, #12]
 8006648:	181b      	addge	r3, r3, r0
 800664a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800664e:	bfac      	ite	ge
 8006650:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006652:	81a3      	strhlt	r3, [r4, #12]
 8006654:	bd10      	pop	{r4, pc}

08006656 <__swrite>:
 8006656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800665a:	461f      	mov	r7, r3
 800665c:	898b      	ldrh	r3, [r1, #12]
 800665e:	05db      	lsls	r3, r3, #23
 8006660:	4605      	mov	r5, r0
 8006662:	460c      	mov	r4, r1
 8006664:	4616      	mov	r6, r2
 8006666:	d505      	bpl.n	8006674 <__swrite+0x1e>
 8006668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800666c:	2302      	movs	r3, #2
 800666e:	2200      	movs	r2, #0
 8006670:	f000 f840 	bl	80066f4 <_lseek_r>
 8006674:	89a3      	ldrh	r3, [r4, #12]
 8006676:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800667a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800667e:	81a3      	strh	r3, [r4, #12]
 8006680:	4632      	mov	r2, r6
 8006682:	463b      	mov	r3, r7
 8006684:	4628      	mov	r0, r5
 8006686:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800668a:	f000 b857 	b.w	800673c <_write_r>

0800668e <__sseek>:
 800668e:	b510      	push	{r4, lr}
 8006690:	460c      	mov	r4, r1
 8006692:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006696:	f000 f82d 	bl	80066f4 <_lseek_r>
 800669a:	1c43      	adds	r3, r0, #1
 800669c:	89a3      	ldrh	r3, [r4, #12]
 800669e:	bf15      	itete	ne
 80066a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80066a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80066a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80066aa:	81a3      	strheq	r3, [r4, #12]
 80066ac:	bf18      	it	ne
 80066ae:	81a3      	strhne	r3, [r4, #12]
 80066b0:	bd10      	pop	{r4, pc}

080066b2 <__sclose>:
 80066b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066b6:	f000 b80d 	b.w	80066d4 <_close_r>

080066ba <memset>:
 80066ba:	4402      	add	r2, r0
 80066bc:	4603      	mov	r3, r0
 80066be:	4293      	cmp	r3, r2
 80066c0:	d100      	bne.n	80066c4 <memset+0xa>
 80066c2:	4770      	bx	lr
 80066c4:	f803 1b01 	strb.w	r1, [r3], #1
 80066c8:	e7f9      	b.n	80066be <memset+0x4>
	...

080066cc <_localeconv_r>:
 80066cc:	4800      	ldr	r0, [pc, #0]	@ (80066d0 <_localeconv_r+0x4>)
 80066ce:	4770      	bx	lr
 80066d0:	2000016c 	.word	0x2000016c

080066d4 <_close_r>:
 80066d4:	b538      	push	{r3, r4, r5, lr}
 80066d6:	4d06      	ldr	r5, [pc, #24]	@ (80066f0 <_close_r+0x1c>)
 80066d8:	2300      	movs	r3, #0
 80066da:	4604      	mov	r4, r0
 80066dc:	4608      	mov	r0, r1
 80066de:	602b      	str	r3, [r5, #0]
 80066e0:	f7fb ffc7 	bl	8002672 <_close>
 80066e4:	1c43      	adds	r3, r0, #1
 80066e6:	d102      	bne.n	80066ee <_close_r+0x1a>
 80066e8:	682b      	ldr	r3, [r5, #0]
 80066ea:	b103      	cbz	r3, 80066ee <_close_r+0x1a>
 80066ec:	6023      	str	r3, [r4, #0]
 80066ee:	bd38      	pop	{r3, r4, r5, pc}
 80066f0:	20000574 	.word	0x20000574

080066f4 <_lseek_r>:
 80066f4:	b538      	push	{r3, r4, r5, lr}
 80066f6:	4d07      	ldr	r5, [pc, #28]	@ (8006714 <_lseek_r+0x20>)
 80066f8:	4604      	mov	r4, r0
 80066fa:	4608      	mov	r0, r1
 80066fc:	4611      	mov	r1, r2
 80066fe:	2200      	movs	r2, #0
 8006700:	602a      	str	r2, [r5, #0]
 8006702:	461a      	mov	r2, r3
 8006704:	f7fb ffdc 	bl	80026c0 <_lseek>
 8006708:	1c43      	adds	r3, r0, #1
 800670a:	d102      	bne.n	8006712 <_lseek_r+0x1e>
 800670c:	682b      	ldr	r3, [r5, #0]
 800670e:	b103      	cbz	r3, 8006712 <_lseek_r+0x1e>
 8006710:	6023      	str	r3, [r4, #0]
 8006712:	bd38      	pop	{r3, r4, r5, pc}
 8006714:	20000574 	.word	0x20000574

08006718 <_read_r>:
 8006718:	b538      	push	{r3, r4, r5, lr}
 800671a:	4d07      	ldr	r5, [pc, #28]	@ (8006738 <_read_r+0x20>)
 800671c:	4604      	mov	r4, r0
 800671e:	4608      	mov	r0, r1
 8006720:	4611      	mov	r1, r2
 8006722:	2200      	movs	r2, #0
 8006724:	602a      	str	r2, [r5, #0]
 8006726:	461a      	mov	r2, r3
 8006728:	f7fb ff6a 	bl	8002600 <_read>
 800672c:	1c43      	adds	r3, r0, #1
 800672e:	d102      	bne.n	8006736 <_read_r+0x1e>
 8006730:	682b      	ldr	r3, [r5, #0]
 8006732:	b103      	cbz	r3, 8006736 <_read_r+0x1e>
 8006734:	6023      	str	r3, [r4, #0]
 8006736:	bd38      	pop	{r3, r4, r5, pc}
 8006738:	20000574 	.word	0x20000574

0800673c <_write_r>:
 800673c:	b538      	push	{r3, r4, r5, lr}
 800673e:	4d07      	ldr	r5, [pc, #28]	@ (800675c <_write_r+0x20>)
 8006740:	4604      	mov	r4, r0
 8006742:	4608      	mov	r0, r1
 8006744:	4611      	mov	r1, r2
 8006746:	2200      	movs	r2, #0
 8006748:	602a      	str	r2, [r5, #0]
 800674a:	461a      	mov	r2, r3
 800674c:	f7fb ff75 	bl	800263a <_write>
 8006750:	1c43      	adds	r3, r0, #1
 8006752:	d102      	bne.n	800675a <_write_r+0x1e>
 8006754:	682b      	ldr	r3, [r5, #0]
 8006756:	b103      	cbz	r3, 800675a <_write_r+0x1e>
 8006758:	6023      	str	r3, [r4, #0]
 800675a:	bd38      	pop	{r3, r4, r5, pc}
 800675c:	20000574 	.word	0x20000574

08006760 <__errno>:
 8006760:	4b01      	ldr	r3, [pc, #4]	@ (8006768 <__errno+0x8>)
 8006762:	6818      	ldr	r0, [r3, #0]
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	2000002c 	.word	0x2000002c

0800676c <__libc_init_array>:
 800676c:	b570      	push	{r4, r5, r6, lr}
 800676e:	4d0d      	ldr	r5, [pc, #52]	@ (80067a4 <__libc_init_array+0x38>)
 8006770:	4c0d      	ldr	r4, [pc, #52]	@ (80067a8 <__libc_init_array+0x3c>)
 8006772:	1b64      	subs	r4, r4, r5
 8006774:	10a4      	asrs	r4, r4, #2
 8006776:	2600      	movs	r6, #0
 8006778:	42a6      	cmp	r6, r4
 800677a:	d109      	bne.n	8006790 <__libc_init_array+0x24>
 800677c:	4d0b      	ldr	r5, [pc, #44]	@ (80067ac <__libc_init_array+0x40>)
 800677e:	4c0c      	ldr	r4, [pc, #48]	@ (80067b0 <__libc_init_array+0x44>)
 8006780:	f002 f8ac 	bl	80088dc <_init>
 8006784:	1b64      	subs	r4, r4, r5
 8006786:	10a4      	asrs	r4, r4, #2
 8006788:	2600      	movs	r6, #0
 800678a:	42a6      	cmp	r6, r4
 800678c:	d105      	bne.n	800679a <__libc_init_array+0x2e>
 800678e:	bd70      	pop	{r4, r5, r6, pc}
 8006790:	f855 3b04 	ldr.w	r3, [r5], #4
 8006794:	4798      	blx	r3
 8006796:	3601      	adds	r6, #1
 8006798:	e7ee      	b.n	8006778 <__libc_init_array+0xc>
 800679a:	f855 3b04 	ldr.w	r3, [r5], #4
 800679e:	4798      	blx	r3
 80067a0:	3601      	adds	r6, #1
 80067a2:	e7f2      	b.n	800678a <__libc_init_array+0x1e>
 80067a4:	08008c98 	.word	0x08008c98
 80067a8:	08008c98 	.word	0x08008c98
 80067ac:	08008c98 	.word	0x08008c98
 80067b0:	08008c9c 	.word	0x08008c9c

080067b4 <__retarget_lock_init_recursive>:
 80067b4:	4770      	bx	lr

080067b6 <__retarget_lock_acquire_recursive>:
 80067b6:	4770      	bx	lr

080067b8 <__retarget_lock_release_recursive>:
 80067b8:	4770      	bx	lr

080067ba <quorem>:
 80067ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067be:	6903      	ldr	r3, [r0, #16]
 80067c0:	690c      	ldr	r4, [r1, #16]
 80067c2:	42a3      	cmp	r3, r4
 80067c4:	4607      	mov	r7, r0
 80067c6:	db7e      	blt.n	80068c6 <quorem+0x10c>
 80067c8:	3c01      	subs	r4, #1
 80067ca:	f101 0814 	add.w	r8, r1, #20
 80067ce:	00a3      	lsls	r3, r4, #2
 80067d0:	f100 0514 	add.w	r5, r0, #20
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80067da:	9301      	str	r3, [sp, #4]
 80067dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80067e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80067e4:	3301      	adds	r3, #1
 80067e6:	429a      	cmp	r2, r3
 80067e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80067ec:	fbb2 f6f3 	udiv	r6, r2, r3
 80067f0:	d32e      	bcc.n	8006850 <quorem+0x96>
 80067f2:	f04f 0a00 	mov.w	sl, #0
 80067f6:	46c4      	mov	ip, r8
 80067f8:	46ae      	mov	lr, r5
 80067fa:	46d3      	mov	fp, sl
 80067fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006800:	b298      	uxth	r0, r3
 8006802:	fb06 a000 	mla	r0, r6, r0, sl
 8006806:	0c02      	lsrs	r2, r0, #16
 8006808:	0c1b      	lsrs	r3, r3, #16
 800680a:	fb06 2303 	mla	r3, r6, r3, r2
 800680e:	f8de 2000 	ldr.w	r2, [lr]
 8006812:	b280      	uxth	r0, r0
 8006814:	b292      	uxth	r2, r2
 8006816:	1a12      	subs	r2, r2, r0
 8006818:	445a      	add	r2, fp
 800681a:	f8de 0000 	ldr.w	r0, [lr]
 800681e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006822:	b29b      	uxth	r3, r3
 8006824:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006828:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800682c:	b292      	uxth	r2, r2
 800682e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006832:	45e1      	cmp	r9, ip
 8006834:	f84e 2b04 	str.w	r2, [lr], #4
 8006838:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800683c:	d2de      	bcs.n	80067fc <quorem+0x42>
 800683e:	9b00      	ldr	r3, [sp, #0]
 8006840:	58eb      	ldr	r3, [r5, r3]
 8006842:	b92b      	cbnz	r3, 8006850 <quorem+0x96>
 8006844:	9b01      	ldr	r3, [sp, #4]
 8006846:	3b04      	subs	r3, #4
 8006848:	429d      	cmp	r5, r3
 800684a:	461a      	mov	r2, r3
 800684c:	d32f      	bcc.n	80068ae <quorem+0xf4>
 800684e:	613c      	str	r4, [r7, #16]
 8006850:	4638      	mov	r0, r7
 8006852:	f001 f97b 	bl	8007b4c <__mcmp>
 8006856:	2800      	cmp	r0, #0
 8006858:	db25      	blt.n	80068a6 <quorem+0xec>
 800685a:	4629      	mov	r1, r5
 800685c:	2000      	movs	r0, #0
 800685e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006862:	f8d1 c000 	ldr.w	ip, [r1]
 8006866:	fa1f fe82 	uxth.w	lr, r2
 800686a:	fa1f f38c 	uxth.w	r3, ip
 800686e:	eba3 030e 	sub.w	r3, r3, lr
 8006872:	4403      	add	r3, r0
 8006874:	0c12      	lsrs	r2, r2, #16
 8006876:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800687a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800687e:	b29b      	uxth	r3, r3
 8006880:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006884:	45c1      	cmp	r9, r8
 8006886:	f841 3b04 	str.w	r3, [r1], #4
 800688a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800688e:	d2e6      	bcs.n	800685e <quorem+0xa4>
 8006890:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006894:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006898:	b922      	cbnz	r2, 80068a4 <quorem+0xea>
 800689a:	3b04      	subs	r3, #4
 800689c:	429d      	cmp	r5, r3
 800689e:	461a      	mov	r2, r3
 80068a0:	d30b      	bcc.n	80068ba <quorem+0x100>
 80068a2:	613c      	str	r4, [r7, #16]
 80068a4:	3601      	adds	r6, #1
 80068a6:	4630      	mov	r0, r6
 80068a8:	b003      	add	sp, #12
 80068aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ae:	6812      	ldr	r2, [r2, #0]
 80068b0:	3b04      	subs	r3, #4
 80068b2:	2a00      	cmp	r2, #0
 80068b4:	d1cb      	bne.n	800684e <quorem+0x94>
 80068b6:	3c01      	subs	r4, #1
 80068b8:	e7c6      	b.n	8006848 <quorem+0x8e>
 80068ba:	6812      	ldr	r2, [r2, #0]
 80068bc:	3b04      	subs	r3, #4
 80068be:	2a00      	cmp	r2, #0
 80068c0:	d1ef      	bne.n	80068a2 <quorem+0xe8>
 80068c2:	3c01      	subs	r4, #1
 80068c4:	e7ea      	b.n	800689c <quorem+0xe2>
 80068c6:	2000      	movs	r0, #0
 80068c8:	e7ee      	b.n	80068a8 <quorem+0xee>
 80068ca:	0000      	movs	r0, r0
 80068cc:	0000      	movs	r0, r0
	...

080068d0 <_dtoa_r>:
 80068d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068d4:	69c7      	ldr	r7, [r0, #28]
 80068d6:	b099      	sub	sp, #100	@ 0x64
 80068d8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80068dc:	ec55 4b10 	vmov	r4, r5, d0
 80068e0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80068e2:	9109      	str	r1, [sp, #36]	@ 0x24
 80068e4:	4683      	mov	fp, r0
 80068e6:	920e      	str	r2, [sp, #56]	@ 0x38
 80068e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80068ea:	b97f      	cbnz	r7, 800690c <_dtoa_r+0x3c>
 80068ec:	2010      	movs	r0, #16
 80068ee:	f000 fdfd 	bl	80074ec <malloc>
 80068f2:	4602      	mov	r2, r0
 80068f4:	f8cb 001c 	str.w	r0, [fp, #28]
 80068f8:	b920      	cbnz	r0, 8006904 <_dtoa_r+0x34>
 80068fa:	4ba7      	ldr	r3, [pc, #668]	@ (8006b98 <_dtoa_r+0x2c8>)
 80068fc:	21ef      	movs	r1, #239	@ 0xef
 80068fe:	48a7      	ldr	r0, [pc, #668]	@ (8006b9c <_dtoa_r+0x2cc>)
 8006900:	f001 fc68 	bl	80081d4 <__assert_func>
 8006904:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006908:	6007      	str	r7, [r0, #0]
 800690a:	60c7      	str	r7, [r0, #12]
 800690c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006910:	6819      	ldr	r1, [r3, #0]
 8006912:	b159      	cbz	r1, 800692c <_dtoa_r+0x5c>
 8006914:	685a      	ldr	r2, [r3, #4]
 8006916:	604a      	str	r2, [r1, #4]
 8006918:	2301      	movs	r3, #1
 800691a:	4093      	lsls	r3, r2
 800691c:	608b      	str	r3, [r1, #8]
 800691e:	4658      	mov	r0, fp
 8006920:	f000 feda 	bl	80076d8 <_Bfree>
 8006924:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006928:	2200      	movs	r2, #0
 800692a:	601a      	str	r2, [r3, #0]
 800692c:	1e2b      	subs	r3, r5, #0
 800692e:	bfb9      	ittee	lt
 8006930:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006934:	9303      	strlt	r3, [sp, #12]
 8006936:	2300      	movge	r3, #0
 8006938:	6033      	strge	r3, [r6, #0]
 800693a:	9f03      	ldr	r7, [sp, #12]
 800693c:	4b98      	ldr	r3, [pc, #608]	@ (8006ba0 <_dtoa_r+0x2d0>)
 800693e:	bfbc      	itt	lt
 8006940:	2201      	movlt	r2, #1
 8006942:	6032      	strlt	r2, [r6, #0]
 8006944:	43bb      	bics	r3, r7
 8006946:	d112      	bne.n	800696e <_dtoa_r+0x9e>
 8006948:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800694a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800694e:	6013      	str	r3, [r2, #0]
 8006950:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006954:	4323      	orrs	r3, r4
 8006956:	f000 854d 	beq.w	80073f4 <_dtoa_r+0xb24>
 800695a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800695c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006bb4 <_dtoa_r+0x2e4>
 8006960:	2b00      	cmp	r3, #0
 8006962:	f000 854f 	beq.w	8007404 <_dtoa_r+0xb34>
 8006966:	f10a 0303 	add.w	r3, sl, #3
 800696a:	f000 bd49 	b.w	8007400 <_dtoa_r+0xb30>
 800696e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006972:	2200      	movs	r2, #0
 8006974:	ec51 0b17 	vmov	r0, r1, d7
 8006978:	2300      	movs	r3, #0
 800697a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800697e:	f7fa f8c3 	bl	8000b08 <__aeabi_dcmpeq>
 8006982:	4680      	mov	r8, r0
 8006984:	b158      	cbz	r0, 800699e <_dtoa_r+0xce>
 8006986:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006988:	2301      	movs	r3, #1
 800698a:	6013      	str	r3, [r2, #0]
 800698c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800698e:	b113      	cbz	r3, 8006996 <_dtoa_r+0xc6>
 8006990:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006992:	4b84      	ldr	r3, [pc, #528]	@ (8006ba4 <_dtoa_r+0x2d4>)
 8006994:	6013      	str	r3, [r2, #0]
 8006996:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006bb8 <_dtoa_r+0x2e8>
 800699a:	f000 bd33 	b.w	8007404 <_dtoa_r+0xb34>
 800699e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80069a2:	aa16      	add	r2, sp, #88	@ 0x58
 80069a4:	a917      	add	r1, sp, #92	@ 0x5c
 80069a6:	4658      	mov	r0, fp
 80069a8:	f001 f980 	bl	8007cac <__d2b>
 80069ac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80069b0:	4681      	mov	r9, r0
 80069b2:	2e00      	cmp	r6, #0
 80069b4:	d077      	beq.n	8006aa6 <_dtoa_r+0x1d6>
 80069b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80069b8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80069bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80069c4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80069c8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80069cc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80069d0:	4619      	mov	r1, r3
 80069d2:	2200      	movs	r2, #0
 80069d4:	4b74      	ldr	r3, [pc, #464]	@ (8006ba8 <_dtoa_r+0x2d8>)
 80069d6:	f7f9 fc77 	bl	80002c8 <__aeabi_dsub>
 80069da:	a369      	add	r3, pc, #420	@ (adr r3, 8006b80 <_dtoa_r+0x2b0>)
 80069dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e0:	f7f9 fe2a 	bl	8000638 <__aeabi_dmul>
 80069e4:	a368      	add	r3, pc, #416	@ (adr r3, 8006b88 <_dtoa_r+0x2b8>)
 80069e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ea:	f7f9 fc6f 	bl	80002cc <__adddf3>
 80069ee:	4604      	mov	r4, r0
 80069f0:	4630      	mov	r0, r6
 80069f2:	460d      	mov	r5, r1
 80069f4:	f7f9 fdb6 	bl	8000564 <__aeabi_i2d>
 80069f8:	a365      	add	r3, pc, #404	@ (adr r3, 8006b90 <_dtoa_r+0x2c0>)
 80069fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fe:	f7f9 fe1b 	bl	8000638 <__aeabi_dmul>
 8006a02:	4602      	mov	r2, r0
 8006a04:	460b      	mov	r3, r1
 8006a06:	4620      	mov	r0, r4
 8006a08:	4629      	mov	r1, r5
 8006a0a:	f7f9 fc5f 	bl	80002cc <__adddf3>
 8006a0e:	4604      	mov	r4, r0
 8006a10:	460d      	mov	r5, r1
 8006a12:	f7fa f8c1 	bl	8000b98 <__aeabi_d2iz>
 8006a16:	2200      	movs	r2, #0
 8006a18:	4607      	mov	r7, r0
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	4620      	mov	r0, r4
 8006a1e:	4629      	mov	r1, r5
 8006a20:	f7fa f87c 	bl	8000b1c <__aeabi_dcmplt>
 8006a24:	b140      	cbz	r0, 8006a38 <_dtoa_r+0x168>
 8006a26:	4638      	mov	r0, r7
 8006a28:	f7f9 fd9c 	bl	8000564 <__aeabi_i2d>
 8006a2c:	4622      	mov	r2, r4
 8006a2e:	462b      	mov	r3, r5
 8006a30:	f7fa f86a 	bl	8000b08 <__aeabi_dcmpeq>
 8006a34:	b900      	cbnz	r0, 8006a38 <_dtoa_r+0x168>
 8006a36:	3f01      	subs	r7, #1
 8006a38:	2f16      	cmp	r7, #22
 8006a3a:	d851      	bhi.n	8006ae0 <_dtoa_r+0x210>
 8006a3c:	4b5b      	ldr	r3, [pc, #364]	@ (8006bac <_dtoa_r+0x2dc>)
 8006a3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a4a:	f7fa f867 	bl	8000b1c <__aeabi_dcmplt>
 8006a4e:	2800      	cmp	r0, #0
 8006a50:	d048      	beq.n	8006ae4 <_dtoa_r+0x214>
 8006a52:	3f01      	subs	r7, #1
 8006a54:	2300      	movs	r3, #0
 8006a56:	9312      	str	r3, [sp, #72]	@ 0x48
 8006a58:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006a5a:	1b9b      	subs	r3, r3, r6
 8006a5c:	1e5a      	subs	r2, r3, #1
 8006a5e:	bf44      	itt	mi
 8006a60:	f1c3 0801 	rsbmi	r8, r3, #1
 8006a64:	2300      	movmi	r3, #0
 8006a66:	9208      	str	r2, [sp, #32]
 8006a68:	bf54      	ite	pl
 8006a6a:	f04f 0800 	movpl.w	r8, #0
 8006a6e:	9308      	strmi	r3, [sp, #32]
 8006a70:	2f00      	cmp	r7, #0
 8006a72:	db39      	blt.n	8006ae8 <_dtoa_r+0x218>
 8006a74:	9b08      	ldr	r3, [sp, #32]
 8006a76:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006a78:	443b      	add	r3, r7
 8006a7a:	9308      	str	r3, [sp, #32]
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a82:	2b09      	cmp	r3, #9
 8006a84:	d864      	bhi.n	8006b50 <_dtoa_r+0x280>
 8006a86:	2b05      	cmp	r3, #5
 8006a88:	bfc4      	itt	gt
 8006a8a:	3b04      	subgt	r3, #4
 8006a8c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006a8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a90:	f1a3 0302 	sub.w	r3, r3, #2
 8006a94:	bfcc      	ite	gt
 8006a96:	2400      	movgt	r4, #0
 8006a98:	2401      	movle	r4, #1
 8006a9a:	2b03      	cmp	r3, #3
 8006a9c:	d863      	bhi.n	8006b66 <_dtoa_r+0x296>
 8006a9e:	e8df f003 	tbb	[pc, r3]
 8006aa2:	372a      	.short	0x372a
 8006aa4:	5535      	.short	0x5535
 8006aa6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006aaa:	441e      	add	r6, r3
 8006aac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006ab0:	2b20      	cmp	r3, #32
 8006ab2:	bfc1      	itttt	gt
 8006ab4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006ab8:	409f      	lslgt	r7, r3
 8006aba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006abe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006ac2:	bfd6      	itet	le
 8006ac4:	f1c3 0320 	rsble	r3, r3, #32
 8006ac8:	ea47 0003 	orrgt.w	r0, r7, r3
 8006acc:	fa04 f003 	lslle.w	r0, r4, r3
 8006ad0:	f7f9 fd38 	bl	8000544 <__aeabi_ui2d>
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006ada:	3e01      	subs	r6, #1
 8006adc:	9214      	str	r2, [sp, #80]	@ 0x50
 8006ade:	e777      	b.n	80069d0 <_dtoa_r+0x100>
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e7b8      	b.n	8006a56 <_dtoa_r+0x186>
 8006ae4:	9012      	str	r0, [sp, #72]	@ 0x48
 8006ae6:	e7b7      	b.n	8006a58 <_dtoa_r+0x188>
 8006ae8:	427b      	negs	r3, r7
 8006aea:	930a      	str	r3, [sp, #40]	@ 0x28
 8006aec:	2300      	movs	r3, #0
 8006aee:	eba8 0807 	sub.w	r8, r8, r7
 8006af2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006af4:	e7c4      	b.n	8006a80 <_dtoa_r+0x1b0>
 8006af6:	2300      	movs	r3, #0
 8006af8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006afa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	dc35      	bgt.n	8006b6c <_dtoa_r+0x29c>
 8006b00:	2301      	movs	r3, #1
 8006b02:	9300      	str	r3, [sp, #0]
 8006b04:	9307      	str	r3, [sp, #28]
 8006b06:	461a      	mov	r2, r3
 8006b08:	920e      	str	r2, [sp, #56]	@ 0x38
 8006b0a:	e00b      	b.n	8006b24 <_dtoa_r+0x254>
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e7f3      	b.n	8006af8 <_dtoa_r+0x228>
 8006b10:	2300      	movs	r3, #0
 8006b12:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b16:	18fb      	adds	r3, r7, r3
 8006b18:	9300      	str	r3, [sp, #0]
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	9307      	str	r3, [sp, #28]
 8006b20:	bfb8      	it	lt
 8006b22:	2301      	movlt	r3, #1
 8006b24:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006b28:	2100      	movs	r1, #0
 8006b2a:	2204      	movs	r2, #4
 8006b2c:	f102 0514 	add.w	r5, r2, #20
 8006b30:	429d      	cmp	r5, r3
 8006b32:	d91f      	bls.n	8006b74 <_dtoa_r+0x2a4>
 8006b34:	6041      	str	r1, [r0, #4]
 8006b36:	4658      	mov	r0, fp
 8006b38:	f000 fd8e 	bl	8007658 <_Balloc>
 8006b3c:	4682      	mov	sl, r0
 8006b3e:	2800      	cmp	r0, #0
 8006b40:	d13c      	bne.n	8006bbc <_dtoa_r+0x2ec>
 8006b42:	4b1b      	ldr	r3, [pc, #108]	@ (8006bb0 <_dtoa_r+0x2e0>)
 8006b44:	4602      	mov	r2, r0
 8006b46:	f240 11af 	movw	r1, #431	@ 0x1af
 8006b4a:	e6d8      	b.n	80068fe <_dtoa_r+0x2e>
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e7e0      	b.n	8006b12 <_dtoa_r+0x242>
 8006b50:	2401      	movs	r4, #1
 8006b52:	2300      	movs	r3, #0
 8006b54:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b56:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006b58:	f04f 33ff 	mov.w	r3, #4294967295
 8006b5c:	9300      	str	r3, [sp, #0]
 8006b5e:	9307      	str	r3, [sp, #28]
 8006b60:	2200      	movs	r2, #0
 8006b62:	2312      	movs	r3, #18
 8006b64:	e7d0      	b.n	8006b08 <_dtoa_r+0x238>
 8006b66:	2301      	movs	r3, #1
 8006b68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b6a:	e7f5      	b.n	8006b58 <_dtoa_r+0x288>
 8006b6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b6e:	9300      	str	r3, [sp, #0]
 8006b70:	9307      	str	r3, [sp, #28]
 8006b72:	e7d7      	b.n	8006b24 <_dtoa_r+0x254>
 8006b74:	3101      	adds	r1, #1
 8006b76:	0052      	lsls	r2, r2, #1
 8006b78:	e7d8      	b.n	8006b2c <_dtoa_r+0x25c>
 8006b7a:	bf00      	nop
 8006b7c:	f3af 8000 	nop.w
 8006b80:	636f4361 	.word	0x636f4361
 8006b84:	3fd287a7 	.word	0x3fd287a7
 8006b88:	8b60c8b3 	.word	0x8b60c8b3
 8006b8c:	3fc68a28 	.word	0x3fc68a28
 8006b90:	509f79fb 	.word	0x509f79fb
 8006b94:	3fd34413 	.word	0x3fd34413
 8006b98:	08008961 	.word	0x08008961
 8006b9c:	08008978 	.word	0x08008978
 8006ba0:	7ff00000 	.word	0x7ff00000
 8006ba4:	08008931 	.word	0x08008931
 8006ba8:	3ff80000 	.word	0x3ff80000
 8006bac:	08008a70 	.word	0x08008a70
 8006bb0:	080089d0 	.word	0x080089d0
 8006bb4:	0800895d 	.word	0x0800895d
 8006bb8:	08008930 	.word	0x08008930
 8006bbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006bc0:	6018      	str	r0, [r3, #0]
 8006bc2:	9b07      	ldr	r3, [sp, #28]
 8006bc4:	2b0e      	cmp	r3, #14
 8006bc6:	f200 80a4 	bhi.w	8006d12 <_dtoa_r+0x442>
 8006bca:	2c00      	cmp	r4, #0
 8006bcc:	f000 80a1 	beq.w	8006d12 <_dtoa_r+0x442>
 8006bd0:	2f00      	cmp	r7, #0
 8006bd2:	dd33      	ble.n	8006c3c <_dtoa_r+0x36c>
 8006bd4:	4bad      	ldr	r3, [pc, #692]	@ (8006e8c <_dtoa_r+0x5bc>)
 8006bd6:	f007 020f 	and.w	r2, r7, #15
 8006bda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006bde:	ed93 7b00 	vldr	d7, [r3]
 8006be2:	05f8      	lsls	r0, r7, #23
 8006be4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006be8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006bec:	d516      	bpl.n	8006c1c <_dtoa_r+0x34c>
 8006bee:	4ba8      	ldr	r3, [pc, #672]	@ (8006e90 <_dtoa_r+0x5c0>)
 8006bf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006bf4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006bf8:	f7f9 fe48 	bl	800088c <__aeabi_ddiv>
 8006bfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c00:	f004 040f 	and.w	r4, r4, #15
 8006c04:	2603      	movs	r6, #3
 8006c06:	4da2      	ldr	r5, [pc, #648]	@ (8006e90 <_dtoa_r+0x5c0>)
 8006c08:	b954      	cbnz	r4, 8006c20 <_dtoa_r+0x350>
 8006c0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c12:	f7f9 fe3b 	bl	800088c <__aeabi_ddiv>
 8006c16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c1a:	e028      	b.n	8006c6e <_dtoa_r+0x39e>
 8006c1c:	2602      	movs	r6, #2
 8006c1e:	e7f2      	b.n	8006c06 <_dtoa_r+0x336>
 8006c20:	07e1      	lsls	r1, r4, #31
 8006c22:	d508      	bpl.n	8006c36 <_dtoa_r+0x366>
 8006c24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c28:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006c2c:	f7f9 fd04 	bl	8000638 <__aeabi_dmul>
 8006c30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c34:	3601      	adds	r6, #1
 8006c36:	1064      	asrs	r4, r4, #1
 8006c38:	3508      	adds	r5, #8
 8006c3a:	e7e5      	b.n	8006c08 <_dtoa_r+0x338>
 8006c3c:	f000 80d2 	beq.w	8006de4 <_dtoa_r+0x514>
 8006c40:	427c      	negs	r4, r7
 8006c42:	4b92      	ldr	r3, [pc, #584]	@ (8006e8c <_dtoa_r+0x5bc>)
 8006c44:	4d92      	ldr	r5, [pc, #584]	@ (8006e90 <_dtoa_r+0x5c0>)
 8006c46:	f004 020f 	and.w	r2, r4, #15
 8006c4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c56:	f7f9 fcef 	bl	8000638 <__aeabi_dmul>
 8006c5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c5e:	1124      	asrs	r4, r4, #4
 8006c60:	2300      	movs	r3, #0
 8006c62:	2602      	movs	r6, #2
 8006c64:	2c00      	cmp	r4, #0
 8006c66:	f040 80b2 	bne.w	8006dce <_dtoa_r+0x4fe>
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1d3      	bne.n	8006c16 <_dtoa_r+0x346>
 8006c6e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006c70:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f000 80b7 	beq.w	8006de8 <_dtoa_r+0x518>
 8006c7a:	4b86      	ldr	r3, [pc, #536]	@ (8006e94 <_dtoa_r+0x5c4>)
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	4620      	mov	r0, r4
 8006c80:	4629      	mov	r1, r5
 8006c82:	f7f9 ff4b 	bl	8000b1c <__aeabi_dcmplt>
 8006c86:	2800      	cmp	r0, #0
 8006c88:	f000 80ae 	beq.w	8006de8 <_dtoa_r+0x518>
 8006c8c:	9b07      	ldr	r3, [sp, #28]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	f000 80aa 	beq.w	8006de8 <_dtoa_r+0x518>
 8006c94:	9b00      	ldr	r3, [sp, #0]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	dd37      	ble.n	8006d0a <_dtoa_r+0x43a>
 8006c9a:	1e7b      	subs	r3, r7, #1
 8006c9c:	9304      	str	r3, [sp, #16]
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	4b7d      	ldr	r3, [pc, #500]	@ (8006e98 <_dtoa_r+0x5c8>)
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	4629      	mov	r1, r5
 8006ca6:	f7f9 fcc7 	bl	8000638 <__aeabi_dmul>
 8006caa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cae:	9c00      	ldr	r4, [sp, #0]
 8006cb0:	3601      	adds	r6, #1
 8006cb2:	4630      	mov	r0, r6
 8006cb4:	f7f9 fc56 	bl	8000564 <__aeabi_i2d>
 8006cb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006cbc:	f7f9 fcbc 	bl	8000638 <__aeabi_dmul>
 8006cc0:	4b76      	ldr	r3, [pc, #472]	@ (8006e9c <_dtoa_r+0x5cc>)
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f7f9 fb02 	bl	80002cc <__adddf3>
 8006cc8:	4605      	mov	r5, r0
 8006cca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006cce:	2c00      	cmp	r4, #0
 8006cd0:	f040 808d 	bne.w	8006dee <_dtoa_r+0x51e>
 8006cd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cd8:	4b71      	ldr	r3, [pc, #452]	@ (8006ea0 <_dtoa_r+0x5d0>)
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f7f9 faf4 	bl	80002c8 <__aeabi_dsub>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006ce8:	462a      	mov	r2, r5
 8006cea:	4633      	mov	r3, r6
 8006cec:	f7f9 ff34 	bl	8000b58 <__aeabi_dcmpgt>
 8006cf0:	2800      	cmp	r0, #0
 8006cf2:	f040 828b 	bne.w	800720c <_dtoa_r+0x93c>
 8006cf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cfa:	462a      	mov	r2, r5
 8006cfc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006d00:	f7f9 ff0c 	bl	8000b1c <__aeabi_dcmplt>
 8006d04:	2800      	cmp	r0, #0
 8006d06:	f040 8128 	bne.w	8006f5a <_dtoa_r+0x68a>
 8006d0a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006d0e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006d12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f2c0 815a 	blt.w	8006fce <_dtoa_r+0x6fe>
 8006d1a:	2f0e      	cmp	r7, #14
 8006d1c:	f300 8157 	bgt.w	8006fce <_dtoa_r+0x6fe>
 8006d20:	4b5a      	ldr	r3, [pc, #360]	@ (8006e8c <_dtoa_r+0x5bc>)
 8006d22:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006d26:	ed93 7b00 	vldr	d7, [r3]
 8006d2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	ed8d 7b00 	vstr	d7, [sp]
 8006d32:	da03      	bge.n	8006d3c <_dtoa_r+0x46c>
 8006d34:	9b07      	ldr	r3, [sp, #28]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	f340 8101 	ble.w	8006f3e <_dtoa_r+0x66e>
 8006d3c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006d40:	4656      	mov	r6, sl
 8006d42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d46:	4620      	mov	r0, r4
 8006d48:	4629      	mov	r1, r5
 8006d4a:	f7f9 fd9f 	bl	800088c <__aeabi_ddiv>
 8006d4e:	f7f9 ff23 	bl	8000b98 <__aeabi_d2iz>
 8006d52:	4680      	mov	r8, r0
 8006d54:	f7f9 fc06 	bl	8000564 <__aeabi_i2d>
 8006d58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d5c:	f7f9 fc6c 	bl	8000638 <__aeabi_dmul>
 8006d60:	4602      	mov	r2, r0
 8006d62:	460b      	mov	r3, r1
 8006d64:	4620      	mov	r0, r4
 8006d66:	4629      	mov	r1, r5
 8006d68:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006d6c:	f7f9 faac 	bl	80002c8 <__aeabi_dsub>
 8006d70:	f806 4b01 	strb.w	r4, [r6], #1
 8006d74:	9d07      	ldr	r5, [sp, #28]
 8006d76:	eba6 040a 	sub.w	r4, r6, sl
 8006d7a:	42a5      	cmp	r5, r4
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	460b      	mov	r3, r1
 8006d80:	f040 8117 	bne.w	8006fb2 <_dtoa_r+0x6e2>
 8006d84:	f7f9 faa2 	bl	80002cc <__adddf3>
 8006d88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d8c:	4604      	mov	r4, r0
 8006d8e:	460d      	mov	r5, r1
 8006d90:	f7f9 fee2 	bl	8000b58 <__aeabi_dcmpgt>
 8006d94:	2800      	cmp	r0, #0
 8006d96:	f040 80f9 	bne.w	8006f8c <_dtoa_r+0x6bc>
 8006d9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d9e:	4620      	mov	r0, r4
 8006da0:	4629      	mov	r1, r5
 8006da2:	f7f9 feb1 	bl	8000b08 <__aeabi_dcmpeq>
 8006da6:	b118      	cbz	r0, 8006db0 <_dtoa_r+0x4e0>
 8006da8:	f018 0f01 	tst.w	r8, #1
 8006dac:	f040 80ee 	bne.w	8006f8c <_dtoa_r+0x6bc>
 8006db0:	4649      	mov	r1, r9
 8006db2:	4658      	mov	r0, fp
 8006db4:	f000 fc90 	bl	80076d8 <_Bfree>
 8006db8:	2300      	movs	r3, #0
 8006dba:	7033      	strb	r3, [r6, #0]
 8006dbc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006dbe:	3701      	adds	r7, #1
 8006dc0:	601f      	str	r7, [r3, #0]
 8006dc2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	f000 831d 	beq.w	8007404 <_dtoa_r+0xb34>
 8006dca:	601e      	str	r6, [r3, #0]
 8006dcc:	e31a      	b.n	8007404 <_dtoa_r+0xb34>
 8006dce:	07e2      	lsls	r2, r4, #31
 8006dd0:	d505      	bpl.n	8006dde <_dtoa_r+0x50e>
 8006dd2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006dd6:	f7f9 fc2f 	bl	8000638 <__aeabi_dmul>
 8006dda:	3601      	adds	r6, #1
 8006ddc:	2301      	movs	r3, #1
 8006dde:	1064      	asrs	r4, r4, #1
 8006de0:	3508      	adds	r5, #8
 8006de2:	e73f      	b.n	8006c64 <_dtoa_r+0x394>
 8006de4:	2602      	movs	r6, #2
 8006de6:	e742      	b.n	8006c6e <_dtoa_r+0x39e>
 8006de8:	9c07      	ldr	r4, [sp, #28]
 8006dea:	9704      	str	r7, [sp, #16]
 8006dec:	e761      	b.n	8006cb2 <_dtoa_r+0x3e2>
 8006dee:	4b27      	ldr	r3, [pc, #156]	@ (8006e8c <_dtoa_r+0x5bc>)
 8006df0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006df2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006df6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006dfa:	4454      	add	r4, sl
 8006dfc:	2900      	cmp	r1, #0
 8006dfe:	d053      	beq.n	8006ea8 <_dtoa_r+0x5d8>
 8006e00:	4928      	ldr	r1, [pc, #160]	@ (8006ea4 <_dtoa_r+0x5d4>)
 8006e02:	2000      	movs	r0, #0
 8006e04:	f7f9 fd42 	bl	800088c <__aeabi_ddiv>
 8006e08:	4633      	mov	r3, r6
 8006e0a:	462a      	mov	r2, r5
 8006e0c:	f7f9 fa5c 	bl	80002c8 <__aeabi_dsub>
 8006e10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006e14:	4656      	mov	r6, sl
 8006e16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e1a:	f7f9 febd 	bl	8000b98 <__aeabi_d2iz>
 8006e1e:	4605      	mov	r5, r0
 8006e20:	f7f9 fba0 	bl	8000564 <__aeabi_i2d>
 8006e24:	4602      	mov	r2, r0
 8006e26:	460b      	mov	r3, r1
 8006e28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e2c:	f7f9 fa4c 	bl	80002c8 <__aeabi_dsub>
 8006e30:	3530      	adds	r5, #48	@ 0x30
 8006e32:	4602      	mov	r2, r0
 8006e34:	460b      	mov	r3, r1
 8006e36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006e3a:	f806 5b01 	strb.w	r5, [r6], #1
 8006e3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006e42:	f7f9 fe6b 	bl	8000b1c <__aeabi_dcmplt>
 8006e46:	2800      	cmp	r0, #0
 8006e48:	d171      	bne.n	8006f2e <_dtoa_r+0x65e>
 8006e4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e4e:	4911      	ldr	r1, [pc, #68]	@ (8006e94 <_dtoa_r+0x5c4>)
 8006e50:	2000      	movs	r0, #0
 8006e52:	f7f9 fa39 	bl	80002c8 <__aeabi_dsub>
 8006e56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006e5a:	f7f9 fe5f 	bl	8000b1c <__aeabi_dcmplt>
 8006e5e:	2800      	cmp	r0, #0
 8006e60:	f040 8095 	bne.w	8006f8e <_dtoa_r+0x6be>
 8006e64:	42a6      	cmp	r6, r4
 8006e66:	f43f af50 	beq.w	8006d0a <_dtoa_r+0x43a>
 8006e6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8006e98 <_dtoa_r+0x5c8>)
 8006e70:	2200      	movs	r2, #0
 8006e72:	f7f9 fbe1 	bl	8000638 <__aeabi_dmul>
 8006e76:	4b08      	ldr	r3, [pc, #32]	@ (8006e98 <_dtoa_r+0x5c8>)
 8006e78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e82:	f7f9 fbd9 	bl	8000638 <__aeabi_dmul>
 8006e86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e8a:	e7c4      	b.n	8006e16 <_dtoa_r+0x546>
 8006e8c:	08008a70 	.word	0x08008a70
 8006e90:	08008a48 	.word	0x08008a48
 8006e94:	3ff00000 	.word	0x3ff00000
 8006e98:	40240000 	.word	0x40240000
 8006e9c:	401c0000 	.word	0x401c0000
 8006ea0:	40140000 	.word	0x40140000
 8006ea4:	3fe00000 	.word	0x3fe00000
 8006ea8:	4631      	mov	r1, r6
 8006eaa:	4628      	mov	r0, r5
 8006eac:	f7f9 fbc4 	bl	8000638 <__aeabi_dmul>
 8006eb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006eb4:	9415      	str	r4, [sp, #84]	@ 0x54
 8006eb6:	4656      	mov	r6, sl
 8006eb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ebc:	f7f9 fe6c 	bl	8000b98 <__aeabi_d2iz>
 8006ec0:	4605      	mov	r5, r0
 8006ec2:	f7f9 fb4f 	bl	8000564 <__aeabi_i2d>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	460b      	mov	r3, r1
 8006eca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ece:	f7f9 f9fb 	bl	80002c8 <__aeabi_dsub>
 8006ed2:	3530      	adds	r5, #48	@ 0x30
 8006ed4:	f806 5b01 	strb.w	r5, [r6], #1
 8006ed8:	4602      	mov	r2, r0
 8006eda:	460b      	mov	r3, r1
 8006edc:	42a6      	cmp	r6, r4
 8006ede:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006ee2:	f04f 0200 	mov.w	r2, #0
 8006ee6:	d124      	bne.n	8006f32 <_dtoa_r+0x662>
 8006ee8:	4bac      	ldr	r3, [pc, #688]	@ (800719c <_dtoa_r+0x8cc>)
 8006eea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006eee:	f7f9 f9ed 	bl	80002cc <__adddf3>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006efa:	f7f9 fe2d 	bl	8000b58 <__aeabi_dcmpgt>
 8006efe:	2800      	cmp	r0, #0
 8006f00:	d145      	bne.n	8006f8e <_dtoa_r+0x6be>
 8006f02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006f06:	49a5      	ldr	r1, [pc, #660]	@ (800719c <_dtoa_r+0x8cc>)
 8006f08:	2000      	movs	r0, #0
 8006f0a:	f7f9 f9dd 	bl	80002c8 <__aeabi_dsub>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	460b      	mov	r3, r1
 8006f12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f16:	f7f9 fe01 	bl	8000b1c <__aeabi_dcmplt>
 8006f1a:	2800      	cmp	r0, #0
 8006f1c:	f43f aef5 	beq.w	8006d0a <_dtoa_r+0x43a>
 8006f20:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006f22:	1e73      	subs	r3, r6, #1
 8006f24:	9315      	str	r3, [sp, #84]	@ 0x54
 8006f26:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006f2a:	2b30      	cmp	r3, #48	@ 0x30
 8006f2c:	d0f8      	beq.n	8006f20 <_dtoa_r+0x650>
 8006f2e:	9f04      	ldr	r7, [sp, #16]
 8006f30:	e73e      	b.n	8006db0 <_dtoa_r+0x4e0>
 8006f32:	4b9b      	ldr	r3, [pc, #620]	@ (80071a0 <_dtoa_r+0x8d0>)
 8006f34:	f7f9 fb80 	bl	8000638 <__aeabi_dmul>
 8006f38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f3c:	e7bc      	b.n	8006eb8 <_dtoa_r+0x5e8>
 8006f3e:	d10c      	bne.n	8006f5a <_dtoa_r+0x68a>
 8006f40:	4b98      	ldr	r3, [pc, #608]	@ (80071a4 <_dtoa_r+0x8d4>)
 8006f42:	2200      	movs	r2, #0
 8006f44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f48:	f7f9 fb76 	bl	8000638 <__aeabi_dmul>
 8006f4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f50:	f7f9 fdf8 	bl	8000b44 <__aeabi_dcmpge>
 8006f54:	2800      	cmp	r0, #0
 8006f56:	f000 8157 	beq.w	8007208 <_dtoa_r+0x938>
 8006f5a:	2400      	movs	r4, #0
 8006f5c:	4625      	mov	r5, r4
 8006f5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f60:	43db      	mvns	r3, r3
 8006f62:	9304      	str	r3, [sp, #16]
 8006f64:	4656      	mov	r6, sl
 8006f66:	2700      	movs	r7, #0
 8006f68:	4621      	mov	r1, r4
 8006f6a:	4658      	mov	r0, fp
 8006f6c:	f000 fbb4 	bl	80076d8 <_Bfree>
 8006f70:	2d00      	cmp	r5, #0
 8006f72:	d0dc      	beq.n	8006f2e <_dtoa_r+0x65e>
 8006f74:	b12f      	cbz	r7, 8006f82 <_dtoa_r+0x6b2>
 8006f76:	42af      	cmp	r7, r5
 8006f78:	d003      	beq.n	8006f82 <_dtoa_r+0x6b2>
 8006f7a:	4639      	mov	r1, r7
 8006f7c:	4658      	mov	r0, fp
 8006f7e:	f000 fbab 	bl	80076d8 <_Bfree>
 8006f82:	4629      	mov	r1, r5
 8006f84:	4658      	mov	r0, fp
 8006f86:	f000 fba7 	bl	80076d8 <_Bfree>
 8006f8a:	e7d0      	b.n	8006f2e <_dtoa_r+0x65e>
 8006f8c:	9704      	str	r7, [sp, #16]
 8006f8e:	4633      	mov	r3, r6
 8006f90:	461e      	mov	r6, r3
 8006f92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f96:	2a39      	cmp	r2, #57	@ 0x39
 8006f98:	d107      	bne.n	8006faa <_dtoa_r+0x6da>
 8006f9a:	459a      	cmp	sl, r3
 8006f9c:	d1f8      	bne.n	8006f90 <_dtoa_r+0x6c0>
 8006f9e:	9a04      	ldr	r2, [sp, #16]
 8006fa0:	3201      	adds	r2, #1
 8006fa2:	9204      	str	r2, [sp, #16]
 8006fa4:	2230      	movs	r2, #48	@ 0x30
 8006fa6:	f88a 2000 	strb.w	r2, [sl]
 8006faa:	781a      	ldrb	r2, [r3, #0]
 8006fac:	3201      	adds	r2, #1
 8006fae:	701a      	strb	r2, [r3, #0]
 8006fb0:	e7bd      	b.n	8006f2e <_dtoa_r+0x65e>
 8006fb2:	4b7b      	ldr	r3, [pc, #492]	@ (80071a0 <_dtoa_r+0x8d0>)
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f7f9 fb3f 	bl	8000638 <__aeabi_dmul>
 8006fba:	2200      	movs	r2, #0
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	4604      	mov	r4, r0
 8006fc0:	460d      	mov	r5, r1
 8006fc2:	f7f9 fda1 	bl	8000b08 <__aeabi_dcmpeq>
 8006fc6:	2800      	cmp	r0, #0
 8006fc8:	f43f aebb 	beq.w	8006d42 <_dtoa_r+0x472>
 8006fcc:	e6f0      	b.n	8006db0 <_dtoa_r+0x4e0>
 8006fce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006fd0:	2a00      	cmp	r2, #0
 8006fd2:	f000 80db 	beq.w	800718c <_dtoa_r+0x8bc>
 8006fd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006fd8:	2a01      	cmp	r2, #1
 8006fda:	f300 80bf 	bgt.w	800715c <_dtoa_r+0x88c>
 8006fde:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006fe0:	2a00      	cmp	r2, #0
 8006fe2:	f000 80b7 	beq.w	8007154 <_dtoa_r+0x884>
 8006fe6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006fea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006fec:	4646      	mov	r6, r8
 8006fee:	9a08      	ldr	r2, [sp, #32]
 8006ff0:	2101      	movs	r1, #1
 8006ff2:	441a      	add	r2, r3
 8006ff4:	4658      	mov	r0, fp
 8006ff6:	4498      	add	r8, r3
 8006ff8:	9208      	str	r2, [sp, #32]
 8006ffa:	f000 fc21 	bl	8007840 <__i2b>
 8006ffe:	4605      	mov	r5, r0
 8007000:	b15e      	cbz	r6, 800701a <_dtoa_r+0x74a>
 8007002:	9b08      	ldr	r3, [sp, #32]
 8007004:	2b00      	cmp	r3, #0
 8007006:	dd08      	ble.n	800701a <_dtoa_r+0x74a>
 8007008:	42b3      	cmp	r3, r6
 800700a:	9a08      	ldr	r2, [sp, #32]
 800700c:	bfa8      	it	ge
 800700e:	4633      	movge	r3, r6
 8007010:	eba8 0803 	sub.w	r8, r8, r3
 8007014:	1af6      	subs	r6, r6, r3
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	9308      	str	r3, [sp, #32]
 800701a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800701c:	b1f3      	cbz	r3, 800705c <_dtoa_r+0x78c>
 800701e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007020:	2b00      	cmp	r3, #0
 8007022:	f000 80b7 	beq.w	8007194 <_dtoa_r+0x8c4>
 8007026:	b18c      	cbz	r4, 800704c <_dtoa_r+0x77c>
 8007028:	4629      	mov	r1, r5
 800702a:	4622      	mov	r2, r4
 800702c:	4658      	mov	r0, fp
 800702e:	f000 fcc7 	bl	80079c0 <__pow5mult>
 8007032:	464a      	mov	r2, r9
 8007034:	4601      	mov	r1, r0
 8007036:	4605      	mov	r5, r0
 8007038:	4658      	mov	r0, fp
 800703a:	f000 fc17 	bl	800786c <__multiply>
 800703e:	4649      	mov	r1, r9
 8007040:	9004      	str	r0, [sp, #16]
 8007042:	4658      	mov	r0, fp
 8007044:	f000 fb48 	bl	80076d8 <_Bfree>
 8007048:	9b04      	ldr	r3, [sp, #16]
 800704a:	4699      	mov	r9, r3
 800704c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800704e:	1b1a      	subs	r2, r3, r4
 8007050:	d004      	beq.n	800705c <_dtoa_r+0x78c>
 8007052:	4649      	mov	r1, r9
 8007054:	4658      	mov	r0, fp
 8007056:	f000 fcb3 	bl	80079c0 <__pow5mult>
 800705a:	4681      	mov	r9, r0
 800705c:	2101      	movs	r1, #1
 800705e:	4658      	mov	r0, fp
 8007060:	f000 fbee 	bl	8007840 <__i2b>
 8007064:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007066:	4604      	mov	r4, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	f000 81cf 	beq.w	800740c <_dtoa_r+0xb3c>
 800706e:	461a      	mov	r2, r3
 8007070:	4601      	mov	r1, r0
 8007072:	4658      	mov	r0, fp
 8007074:	f000 fca4 	bl	80079c0 <__pow5mult>
 8007078:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800707a:	2b01      	cmp	r3, #1
 800707c:	4604      	mov	r4, r0
 800707e:	f300 8095 	bgt.w	80071ac <_dtoa_r+0x8dc>
 8007082:	9b02      	ldr	r3, [sp, #8]
 8007084:	2b00      	cmp	r3, #0
 8007086:	f040 8087 	bne.w	8007198 <_dtoa_r+0x8c8>
 800708a:	9b03      	ldr	r3, [sp, #12]
 800708c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007090:	2b00      	cmp	r3, #0
 8007092:	f040 8089 	bne.w	80071a8 <_dtoa_r+0x8d8>
 8007096:	9b03      	ldr	r3, [sp, #12]
 8007098:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800709c:	0d1b      	lsrs	r3, r3, #20
 800709e:	051b      	lsls	r3, r3, #20
 80070a0:	b12b      	cbz	r3, 80070ae <_dtoa_r+0x7de>
 80070a2:	9b08      	ldr	r3, [sp, #32]
 80070a4:	3301      	adds	r3, #1
 80070a6:	9308      	str	r3, [sp, #32]
 80070a8:	f108 0801 	add.w	r8, r8, #1
 80070ac:	2301      	movs	r3, #1
 80070ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80070b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	f000 81b0 	beq.w	8007418 <_dtoa_r+0xb48>
 80070b8:	6923      	ldr	r3, [r4, #16]
 80070ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80070be:	6918      	ldr	r0, [r3, #16]
 80070c0:	f000 fb72 	bl	80077a8 <__hi0bits>
 80070c4:	f1c0 0020 	rsb	r0, r0, #32
 80070c8:	9b08      	ldr	r3, [sp, #32]
 80070ca:	4418      	add	r0, r3
 80070cc:	f010 001f 	ands.w	r0, r0, #31
 80070d0:	d077      	beq.n	80071c2 <_dtoa_r+0x8f2>
 80070d2:	f1c0 0320 	rsb	r3, r0, #32
 80070d6:	2b04      	cmp	r3, #4
 80070d8:	dd6b      	ble.n	80071b2 <_dtoa_r+0x8e2>
 80070da:	9b08      	ldr	r3, [sp, #32]
 80070dc:	f1c0 001c 	rsb	r0, r0, #28
 80070e0:	4403      	add	r3, r0
 80070e2:	4480      	add	r8, r0
 80070e4:	4406      	add	r6, r0
 80070e6:	9308      	str	r3, [sp, #32]
 80070e8:	f1b8 0f00 	cmp.w	r8, #0
 80070ec:	dd05      	ble.n	80070fa <_dtoa_r+0x82a>
 80070ee:	4649      	mov	r1, r9
 80070f0:	4642      	mov	r2, r8
 80070f2:	4658      	mov	r0, fp
 80070f4:	f000 fcbe 	bl	8007a74 <__lshift>
 80070f8:	4681      	mov	r9, r0
 80070fa:	9b08      	ldr	r3, [sp, #32]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	dd05      	ble.n	800710c <_dtoa_r+0x83c>
 8007100:	4621      	mov	r1, r4
 8007102:	461a      	mov	r2, r3
 8007104:	4658      	mov	r0, fp
 8007106:	f000 fcb5 	bl	8007a74 <__lshift>
 800710a:	4604      	mov	r4, r0
 800710c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800710e:	2b00      	cmp	r3, #0
 8007110:	d059      	beq.n	80071c6 <_dtoa_r+0x8f6>
 8007112:	4621      	mov	r1, r4
 8007114:	4648      	mov	r0, r9
 8007116:	f000 fd19 	bl	8007b4c <__mcmp>
 800711a:	2800      	cmp	r0, #0
 800711c:	da53      	bge.n	80071c6 <_dtoa_r+0x8f6>
 800711e:	1e7b      	subs	r3, r7, #1
 8007120:	9304      	str	r3, [sp, #16]
 8007122:	4649      	mov	r1, r9
 8007124:	2300      	movs	r3, #0
 8007126:	220a      	movs	r2, #10
 8007128:	4658      	mov	r0, fp
 800712a:	f000 faf7 	bl	800771c <__multadd>
 800712e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007130:	4681      	mov	r9, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	f000 8172 	beq.w	800741c <_dtoa_r+0xb4c>
 8007138:	2300      	movs	r3, #0
 800713a:	4629      	mov	r1, r5
 800713c:	220a      	movs	r2, #10
 800713e:	4658      	mov	r0, fp
 8007140:	f000 faec 	bl	800771c <__multadd>
 8007144:	9b00      	ldr	r3, [sp, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	4605      	mov	r5, r0
 800714a:	dc67      	bgt.n	800721c <_dtoa_r+0x94c>
 800714c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800714e:	2b02      	cmp	r3, #2
 8007150:	dc41      	bgt.n	80071d6 <_dtoa_r+0x906>
 8007152:	e063      	b.n	800721c <_dtoa_r+0x94c>
 8007154:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007156:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800715a:	e746      	b.n	8006fea <_dtoa_r+0x71a>
 800715c:	9b07      	ldr	r3, [sp, #28]
 800715e:	1e5c      	subs	r4, r3, #1
 8007160:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007162:	42a3      	cmp	r3, r4
 8007164:	bfbf      	itttt	lt
 8007166:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007168:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800716a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800716c:	1ae3      	sublt	r3, r4, r3
 800716e:	bfb4      	ite	lt
 8007170:	18d2      	addlt	r2, r2, r3
 8007172:	1b1c      	subge	r4, r3, r4
 8007174:	9b07      	ldr	r3, [sp, #28]
 8007176:	bfbc      	itt	lt
 8007178:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800717a:	2400      	movlt	r4, #0
 800717c:	2b00      	cmp	r3, #0
 800717e:	bfb5      	itete	lt
 8007180:	eba8 0603 	sublt.w	r6, r8, r3
 8007184:	9b07      	ldrge	r3, [sp, #28]
 8007186:	2300      	movlt	r3, #0
 8007188:	4646      	movge	r6, r8
 800718a:	e730      	b.n	8006fee <_dtoa_r+0x71e>
 800718c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800718e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007190:	4646      	mov	r6, r8
 8007192:	e735      	b.n	8007000 <_dtoa_r+0x730>
 8007194:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007196:	e75c      	b.n	8007052 <_dtoa_r+0x782>
 8007198:	2300      	movs	r3, #0
 800719a:	e788      	b.n	80070ae <_dtoa_r+0x7de>
 800719c:	3fe00000 	.word	0x3fe00000
 80071a0:	40240000 	.word	0x40240000
 80071a4:	40140000 	.word	0x40140000
 80071a8:	9b02      	ldr	r3, [sp, #8]
 80071aa:	e780      	b.n	80070ae <_dtoa_r+0x7de>
 80071ac:	2300      	movs	r3, #0
 80071ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80071b0:	e782      	b.n	80070b8 <_dtoa_r+0x7e8>
 80071b2:	d099      	beq.n	80070e8 <_dtoa_r+0x818>
 80071b4:	9a08      	ldr	r2, [sp, #32]
 80071b6:	331c      	adds	r3, #28
 80071b8:	441a      	add	r2, r3
 80071ba:	4498      	add	r8, r3
 80071bc:	441e      	add	r6, r3
 80071be:	9208      	str	r2, [sp, #32]
 80071c0:	e792      	b.n	80070e8 <_dtoa_r+0x818>
 80071c2:	4603      	mov	r3, r0
 80071c4:	e7f6      	b.n	80071b4 <_dtoa_r+0x8e4>
 80071c6:	9b07      	ldr	r3, [sp, #28]
 80071c8:	9704      	str	r7, [sp, #16]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	dc20      	bgt.n	8007210 <_dtoa_r+0x940>
 80071ce:	9300      	str	r3, [sp, #0]
 80071d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	dd1e      	ble.n	8007214 <_dtoa_r+0x944>
 80071d6:	9b00      	ldr	r3, [sp, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	f47f aec0 	bne.w	8006f5e <_dtoa_r+0x68e>
 80071de:	4621      	mov	r1, r4
 80071e0:	2205      	movs	r2, #5
 80071e2:	4658      	mov	r0, fp
 80071e4:	f000 fa9a 	bl	800771c <__multadd>
 80071e8:	4601      	mov	r1, r0
 80071ea:	4604      	mov	r4, r0
 80071ec:	4648      	mov	r0, r9
 80071ee:	f000 fcad 	bl	8007b4c <__mcmp>
 80071f2:	2800      	cmp	r0, #0
 80071f4:	f77f aeb3 	ble.w	8006f5e <_dtoa_r+0x68e>
 80071f8:	4656      	mov	r6, sl
 80071fa:	2331      	movs	r3, #49	@ 0x31
 80071fc:	f806 3b01 	strb.w	r3, [r6], #1
 8007200:	9b04      	ldr	r3, [sp, #16]
 8007202:	3301      	adds	r3, #1
 8007204:	9304      	str	r3, [sp, #16]
 8007206:	e6ae      	b.n	8006f66 <_dtoa_r+0x696>
 8007208:	9c07      	ldr	r4, [sp, #28]
 800720a:	9704      	str	r7, [sp, #16]
 800720c:	4625      	mov	r5, r4
 800720e:	e7f3      	b.n	80071f8 <_dtoa_r+0x928>
 8007210:	9b07      	ldr	r3, [sp, #28]
 8007212:	9300      	str	r3, [sp, #0]
 8007214:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007216:	2b00      	cmp	r3, #0
 8007218:	f000 8104 	beq.w	8007424 <_dtoa_r+0xb54>
 800721c:	2e00      	cmp	r6, #0
 800721e:	dd05      	ble.n	800722c <_dtoa_r+0x95c>
 8007220:	4629      	mov	r1, r5
 8007222:	4632      	mov	r2, r6
 8007224:	4658      	mov	r0, fp
 8007226:	f000 fc25 	bl	8007a74 <__lshift>
 800722a:	4605      	mov	r5, r0
 800722c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800722e:	2b00      	cmp	r3, #0
 8007230:	d05a      	beq.n	80072e8 <_dtoa_r+0xa18>
 8007232:	6869      	ldr	r1, [r5, #4]
 8007234:	4658      	mov	r0, fp
 8007236:	f000 fa0f 	bl	8007658 <_Balloc>
 800723a:	4606      	mov	r6, r0
 800723c:	b928      	cbnz	r0, 800724a <_dtoa_r+0x97a>
 800723e:	4b84      	ldr	r3, [pc, #528]	@ (8007450 <_dtoa_r+0xb80>)
 8007240:	4602      	mov	r2, r0
 8007242:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007246:	f7ff bb5a 	b.w	80068fe <_dtoa_r+0x2e>
 800724a:	692a      	ldr	r2, [r5, #16]
 800724c:	3202      	adds	r2, #2
 800724e:	0092      	lsls	r2, r2, #2
 8007250:	f105 010c 	add.w	r1, r5, #12
 8007254:	300c      	adds	r0, #12
 8007256:	f000 ffaf 	bl	80081b8 <memcpy>
 800725a:	2201      	movs	r2, #1
 800725c:	4631      	mov	r1, r6
 800725e:	4658      	mov	r0, fp
 8007260:	f000 fc08 	bl	8007a74 <__lshift>
 8007264:	f10a 0301 	add.w	r3, sl, #1
 8007268:	9307      	str	r3, [sp, #28]
 800726a:	9b00      	ldr	r3, [sp, #0]
 800726c:	4453      	add	r3, sl
 800726e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007270:	9b02      	ldr	r3, [sp, #8]
 8007272:	f003 0301 	and.w	r3, r3, #1
 8007276:	462f      	mov	r7, r5
 8007278:	930a      	str	r3, [sp, #40]	@ 0x28
 800727a:	4605      	mov	r5, r0
 800727c:	9b07      	ldr	r3, [sp, #28]
 800727e:	4621      	mov	r1, r4
 8007280:	3b01      	subs	r3, #1
 8007282:	4648      	mov	r0, r9
 8007284:	9300      	str	r3, [sp, #0]
 8007286:	f7ff fa98 	bl	80067ba <quorem>
 800728a:	4639      	mov	r1, r7
 800728c:	9002      	str	r0, [sp, #8]
 800728e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007292:	4648      	mov	r0, r9
 8007294:	f000 fc5a 	bl	8007b4c <__mcmp>
 8007298:	462a      	mov	r2, r5
 800729a:	9008      	str	r0, [sp, #32]
 800729c:	4621      	mov	r1, r4
 800729e:	4658      	mov	r0, fp
 80072a0:	f000 fc70 	bl	8007b84 <__mdiff>
 80072a4:	68c2      	ldr	r2, [r0, #12]
 80072a6:	4606      	mov	r6, r0
 80072a8:	bb02      	cbnz	r2, 80072ec <_dtoa_r+0xa1c>
 80072aa:	4601      	mov	r1, r0
 80072ac:	4648      	mov	r0, r9
 80072ae:	f000 fc4d 	bl	8007b4c <__mcmp>
 80072b2:	4602      	mov	r2, r0
 80072b4:	4631      	mov	r1, r6
 80072b6:	4658      	mov	r0, fp
 80072b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80072ba:	f000 fa0d 	bl	80076d8 <_Bfree>
 80072be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80072c2:	9e07      	ldr	r6, [sp, #28]
 80072c4:	ea43 0102 	orr.w	r1, r3, r2
 80072c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072ca:	4319      	orrs	r1, r3
 80072cc:	d110      	bne.n	80072f0 <_dtoa_r+0xa20>
 80072ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80072d2:	d029      	beq.n	8007328 <_dtoa_r+0xa58>
 80072d4:	9b08      	ldr	r3, [sp, #32]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	dd02      	ble.n	80072e0 <_dtoa_r+0xa10>
 80072da:	9b02      	ldr	r3, [sp, #8]
 80072dc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80072e0:	9b00      	ldr	r3, [sp, #0]
 80072e2:	f883 8000 	strb.w	r8, [r3]
 80072e6:	e63f      	b.n	8006f68 <_dtoa_r+0x698>
 80072e8:	4628      	mov	r0, r5
 80072ea:	e7bb      	b.n	8007264 <_dtoa_r+0x994>
 80072ec:	2201      	movs	r2, #1
 80072ee:	e7e1      	b.n	80072b4 <_dtoa_r+0x9e4>
 80072f0:	9b08      	ldr	r3, [sp, #32]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	db04      	blt.n	8007300 <_dtoa_r+0xa30>
 80072f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80072f8:	430b      	orrs	r3, r1
 80072fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80072fc:	430b      	orrs	r3, r1
 80072fe:	d120      	bne.n	8007342 <_dtoa_r+0xa72>
 8007300:	2a00      	cmp	r2, #0
 8007302:	dded      	ble.n	80072e0 <_dtoa_r+0xa10>
 8007304:	4649      	mov	r1, r9
 8007306:	2201      	movs	r2, #1
 8007308:	4658      	mov	r0, fp
 800730a:	f000 fbb3 	bl	8007a74 <__lshift>
 800730e:	4621      	mov	r1, r4
 8007310:	4681      	mov	r9, r0
 8007312:	f000 fc1b 	bl	8007b4c <__mcmp>
 8007316:	2800      	cmp	r0, #0
 8007318:	dc03      	bgt.n	8007322 <_dtoa_r+0xa52>
 800731a:	d1e1      	bne.n	80072e0 <_dtoa_r+0xa10>
 800731c:	f018 0f01 	tst.w	r8, #1
 8007320:	d0de      	beq.n	80072e0 <_dtoa_r+0xa10>
 8007322:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007326:	d1d8      	bne.n	80072da <_dtoa_r+0xa0a>
 8007328:	9a00      	ldr	r2, [sp, #0]
 800732a:	2339      	movs	r3, #57	@ 0x39
 800732c:	7013      	strb	r3, [r2, #0]
 800732e:	4633      	mov	r3, r6
 8007330:	461e      	mov	r6, r3
 8007332:	3b01      	subs	r3, #1
 8007334:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007338:	2a39      	cmp	r2, #57	@ 0x39
 800733a:	d052      	beq.n	80073e2 <_dtoa_r+0xb12>
 800733c:	3201      	adds	r2, #1
 800733e:	701a      	strb	r2, [r3, #0]
 8007340:	e612      	b.n	8006f68 <_dtoa_r+0x698>
 8007342:	2a00      	cmp	r2, #0
 8007344:	dd07      	ble.n	8007356 <_dtoa_r+0xa86>
 8007346:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800734a:	d0ed      	beq.n	8007328 <_dtoa_r+0xa58>
 800734c:	9a00      	ldr	r2, [sp, #0]
 800734e:	f108 0301 	add.w	r3, r8, #1
 8007352:	7013      	strb	r3, [r2, #0]
 8007354:	e608      	b.n	8006f68 <_dtoa_r+0x698>
 8007356:	9b07      	ldr	r3, [sp, #28]
 8007358:	9a07      	ldr	r2, [sp, #28]
 800735a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800735e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007360:	4293      	cmp	r3, r2
 8007362:	d028      	beq.n	80073b6 <_dtoa_r+0xae6>
 8007364:	4649      	mov	r1, r9
 8007366:	2300      	movs	r3, #0
 8007368:	220a      	movs	r2, #10
 800736a:	4658      	mov	r0, fp
 800736c:	f000 f9d6 	bl	800771c <__multadd>
 8007370:	42af      	cmp	r7, r5
 8007372:	4681      	mov	r9, r0
 8007374:	f04f 0300 	mov.w	r3, #0
 8007378:	f04f 020a 	mov.w	r2, #10
 800737c:	4639      	mov	r1, r7
 800737e:	4658      	mov	r0, fp
 8007380:	d107      	bne.n	8007392 <_dtoa_r+0xac2>
 8007382:	f000 f9cb 	bl	800771c <__multadd>
 8007386:	4607      	mov	r7, r0
 8007388:	4605      	mov	r5, r0
 800738a:	9b07      	ldr	r3, [sp, #28]
 800738c:	3301      	adds	r3, #1
 800738e:	9307      	str	r3, [sp, #28]
 8007390:	e774      	b.n	800727c <_dtoa_r+0x9ac>
 8007392:	f000 f9c3 	bl	800771c <__multadd>
 8007396:	4629      	mov	r1, r5
 8007398:	4607      	mov	r7, r0
 800739a:	2300      	movs	r3, #0
 800739c:	220a      	movs	r2, #10
 800739e:	4658      	mov	r0, fp
 80073a0:	f000 f9bc 	bl	800771c <__multadd>
 80073a4:	4605      	mov	r5, r0
 80073a6:	e7f0      	b.n	800738a <_dtoa_r+0xaba>
 80073a8:	9b00      	ldr	r3, [sp, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	bfcc      	ite	gt
 80073ae:	461e      	movgt	r6, r3
 80073b0:	2601      	movle	r6, #1
 80073b2:	4456      	add	r6, sl
 80073b4:	2700      	movs	r7, #0
 80073b6:	4649      	mov	r1, r9
 80073b8:	2201      	movs	r2, #1
 80073ba:	4658      	mov	r0, fp
 80073bc:	f000 fb5a 	bl	8007a74 <__lshift>
 80073c0:	4621      	mov	r1, r4
 80073c2:	4681      	mov	r9, r0
 80073c4:	f000 fbc2 	bl	8007b4c <__mcmp>
 80073c8:	2800      	cmp	r0, #0
 80073ca:	dcb0      	bgt.n	800732e <_dtoa_r+0xa5e>
 80073cc:	d102      	bne.n	80073d4 <_dtoa_r+0xb04>
 80073ce:	f018 0f01 	tst.w	r8, #1
 80073d2:	d1ac      	bne.n	800732e <_dtoa_r+0xa5e>
 80073d4:	4633      	mov	r3, r6
 80073d6:	461e      	mov	r6, r3
 80073d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80073dc:	2a30      	cmp	r2, #48	@ 0x30
 80073de:	d0fa      	beq.n	80073d6 <_dtoa_r+0xb06>
 80073e0:	e5c2      	b.n	8006f68 <_dtoa_r+0x698>
 80073e2:	459a      	cmp	sl, r3
 80073e4:	d1a4      	bne.n	8007330 <_dtoa_r+0xa60>
 80073e6:	9b04      	ldr	r3, [sp, #16]
 80073e8:	3301      	adds	r3, #1
 80073ea:	9304      	str	r3, [sp, #16]
 80073ec:	2331      	movs	r3, #49	@ 0x31
 80073ee:	f88a 3000 	strb.w	r3, [sl]
 80073f2:	e5b9      	b.n	8006f68 <_dtoa_r+0x698>
 80073f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80073f6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007454 <_dtoa_r+0xb84>
 80073fa:	b11b      	cbz	r3, 8007404 <_dtoa_r+0xb34>
 80073fc:	f10a 0308 	add.w	r3, sl, #8
 8007400:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007402:	6013      	str	r3, [r2, #0]
 8007404:	4650      	mov	r0, sl
 8007406:	b019      	add	sp, #100	@ 0x64
 8007408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800740c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800740e:	2b01      	cmp	r3, #1
 8007410:	f77f ae37 	ble.w	8007082 <_dtoa_r+0x7b2>
 8007414:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007416:	930a      	str	r3, [sp, #40]	@ 0x28
 8007418:	2001      	movs	r0, #1
 800741a:	e655      	b.n	80070c8 <_dtoa_r+0x7f8>
 800741c:	9b00      	ldr	r3, [sp, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	f77f aed6 	ble.w	80071d0 <_dtoa_r+0x900>
 8007424:	4656      	mov	r6, sl
 8007426:	4621      	mov	r1, r4
 8007428:	4648      	mov	r0, r9
 800742a:	f7ff f9c6 	bl	80067ba <quorem>
 800742e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007432:	f806 8b01 	strb.w	r8, [r6], #1
 8007436:	9b00      	ldr	r3, [sp, #0]
 8007438:	eba6 020a 	sub.w	r2, r6, sl
 800743c:	4293      	cmp	r3, r2
 800743e:	ddb3      	ble.n	80073a8 <_dtoa_r+0xad8>
 8007440:	4649      	mov	r1, r9
 8007442:	2300      	movs	r3, #0
 8007444:	220a      	movs	r2, #10
 8007446:	4658      	mov	r0, fp
 8007448:	f000 f968 	bl	800771c <__multadd>
 800744c:	4681      	mov	r9, r0
 800744e:	e7ea      	b.n	8007426 <_dtoa_r+0xb56>
 8007450:	080089d0 	.word	0x080089d0
 8007454:	08008954 	.word	0x08008954

08007458 <_free_r>:
 8007458:	b538      	push	{r3, r4, r5, lr}
 800745a:	4605      	mov	r5, r0
 800745c:	2900      	cmp	r1, #0
 800745e:	d041      	beq.n	80074e4 <_free_r+0x8c>
 8007460:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007464:	1f0c      	subs	r4, r1, #4
 8007466:	2b00      	cmp	r3, #0
 8007468:	bfb8      	it	lt
 800746a:	18e4      	addlt	r4, r4, r3
 800746c:	f000 f8e8 	bl	8007640 <__malloc_lock>
 8007470:	4a1d      	ldr	r2, [pc, #116]	@ (80074e8 <_free_r+0x90>)
 8007472:	6813      	ldr	r3, [r2, #0]
 8007474:	b933      	cbnz	r3, 8007484 <_free_r+0x2c>
 8007476:	6063      	str	r3, [r4, #4]
 8007478:	6014      	str	r4, [r2, #0]
 800747a:	4628      	mov	r0, r5
 800747c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007480:	f000 b8e4 	b.w	800764c <__malloc_unlock>
 8007484:	42a3      	cmp	r3, r4
 8007486:	d908      	bls.n	800749a <_free_r+0x42>
 8007488:	6820      	ldr	r0, [r4, #0]
 800748a:	1821      	adds	r1, r4, r0
 800748c:	428b      	cmp	r3, r1
 800748e:	bf01      	itttt	eq
 8007490:	6819      	ldreq	r1, [r3, #0]
 8007492:	685b      	ldreq	r3, [r3, #4]
 8007494:	1809      	addeq	r1, r1, r0
 8007496:	6021      	streq	r1, [r4, #0]
 8007498:	e7ed      	b.n	8007476 <_free_r+0x1e>
 800749a:	461a      	mov	r2, r3
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	b10b      	cbz	r3, 80074a4 <_free_r+0x4c>
 80074a0:	42a3      	cmp	r3, r4
 80074a2:	d9fa      	bls.n	800749a <_free_r+0x42>
 80074a4:	6811      	ldr	r1, [r2, #0]
 80074a6:	1850      	adds	r0, r2, r1
 80074a8:	42a0      	cmp	r0, r4
 80074aa:	d10b      	bne.n	80074c4 <_free_r+0x6c>
 80074ac:	6820      	ldr	r0, [r4, #0]
 80074ae:	4401      	add	r1, r0
 80074b0:	1850      	adds	r0, r2, r1
 80074b2:	4283      	cmp	r3, r0
 80074b4:	6011      	str	r1, [r2, #0]
 80074b6:	d1e0      	bne.n	800747a <_free_r+0x22>
 80074b8:	6818      	ldr	r0, [r3, #0]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	6053      	str	r3, [r2, #4]
 80074be:	4408      	add	r0, r1
 80074c0:	6010      	str	r0, [r2, #0]
 80074c2:	e7da      	b.n	800747a <_free_r+0x22>
 80074c4:	d902      	bls.n	80074cc <_free_r+0x74>
 80074c6:	230c      	movs	r3, #12
 80074c8:	602b      	str	r3, [r5, #0]
 80074ca:	e7d6      	b.n	800747a <_free_r+0x22>
 80074cc:	6820      	ldr	r0, [r4, #0]
 80074ce:	1821      	adds	r1, r4, r0
 80074d0:	428b      	cmp	r3, r1
 80074d2:	bf04      	itt	eq
 80074d4:	6819      	ldreq	r1, [r3, #0]
 80074d6:	685b      	ldreq	r3, [r3, #4]
 80074d8:	6063      	str	r3, [r4, #4]
 80074da:	bf04      	itt	eq
 80074dc:	1809      	addeq	r1, r1, r0
 80074de:	6021      	streq	r1, [r4, #0]
 80074e0:	6054      	str	r4, [r2, #4]
 80074e2:	e7ca      	b.n	800747a <_free_r+0x22>
 80074e4:	bd38      	pop	{r3, r4, r5, pc}
 80074e6:	bf00      	nop
 80074e8:	20000580 	.word	0x20000580

080074ec <malloc>:
 80074ec:	4b02      	ldr	r3, [pc, #8]	@ (80074f8 <malloc+0xc>)
 80074ee:	4601      	mov	r1, r0
 80074f0:	6818      	ldr	r0, [r3, #0]
 80074f2:	f000 b825 	b.w	8007540 <_malloc_r>
 80074f6:	bf00      	nop
 80074f8:	2000002c 	.word	0x2000002c

080074fc <sbrk_aligned>:
 80074fc:	b570      	push	{r4, r5, r6, lr}
 80074fe:	4e0f      	ldr	r6, [pc, #60]	@ (800753c <sbrk_aligned+0x40>)
 8007500:	460c      	mov	r4, r1
 8007502:	6831      	ldr	r1, [r6, #0]
 8007504:	4605      	mov	r5, r0
 8007506:	b911      	cbnz	r1, 800750e <sbrk_aligned+0x12>
 8007508:	f000 fe46 	bl	8008198 <_sbrk_r>
 800750c:	6030      	str	r0, [r6, #0]
 800750e:	4621      	mov	r1, r4
 8007510:	4628      	mov	r0, r5
 8007512:	f000 fe41 	bl	8008198 <_sbrk_r>
 8007516:	1c43      	adds	r3, r0, #1
 8007518:	d103      	bne.n	8007522 <sbrk_aligned+0x26>
 800751a:	f04f 34ff 	mov.w	r4, #4294967295
 800751e:	4620      	mov	r0, r4
 8007520:	bd70      	pop	{r4, r5, r6, pc}
 8007522:	1cc4      	adds	r4, r0, #3
 8007524:	f024 0403 	bic.w	r4, r4, #3
 8007528:	42a0      	cmp	r0, r4
 800752a:	d0f8      	beq.n	800751e <sbrk_aligned+0x22>
 800752c:	1a21      	subs	r1, r4, r0
 800752e:	4628      	mov	r0, r5
 8007530:	f000 fe32 	bl	8008198 <_sbrk_r>
 8007534:	3001      	adds	r0, #1
 8007536:	d1f2      	bne.n	800751e <sbrk_aligned+0x22>
 8007538:	e7ef      	b.n	800751a <sbrk_aligned+0x1e>
 800753a:	bf00      	nop
 800753c:	2000057c 	.word	0x2000057c

08007540 <_malloc_r>:
 8007540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007544:	1ccd      	adds	r5, r1, #3
 8007546:	f025 0503 	bic.w	r5, r5, #3
 800754a:	3508      	adds	r5, #8
 800754c:	2d0c      	cmp	r5, #12
 800754e:	bf38      	it	cc
 8007550:	250c      	movcc	r5, #12
 8007552:	2d00      	cmp	r5, #0
 8007554:	4606      	mov	r6, r0
 8007556:	db01      	blt.n	800755c <_malloc_r+0x1c>
 8007558:	42a9      	cmp	r1, r5
 800755a:	d904      	bls.n	8007566 <_malloc_r+0x26>
 800755c:	230c      	movs	r3, #12
 800755e:	6033      	str	r3, [r6, #0]
 8007560:	2000      	movs	r0, #0
 8007562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007566:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800763c <_malloc_r+0xfc>
 800756a:	f000 f869 	bl	8007640 <__malloc_lock>
 800756e:	f8d8 3000 	ldr.w	r3, [r8]
 8007572:	461c      	mov	r4, r3
 8007574:	bb44      	cbnz	r4, 80075c8 <_malloc_r+0x88>
 8007576:	4629      	mov	r1, r5
 8007578:	4630      	mov	r0, r6
 800757a:	f7ff ffbf 	bl	80074fc <sbrk_aligned>
 800757e:	1c43      	adds	r3, r0, #1
 8007580:	4604      	mov	r4, r0
 8007582:	d158      	bne.n	8007636 <_malloc_r+0xf6>
 8007584:	f8d8 4000 	ldr.w	r4, [r8]
 8007588:	4627      	mov	r7, r4
 800758a:	2f00      	cmp	r7, #0
 800758c:	d143      	bne.n	8007616 <_malloc_r+0xd6>
 800758e:	2c00      	cmp	r4, #0
 8007590:	d04b      	beq.n	800762a <_malloc_r+0xea>
 8007592:	6823      	ldr	r3, [r4, #0]
 8007594:	4639      	mov	r1, r7
 8007596:	4630      	mov	r0, r6
 8007598:	eb04 0903 	add.w	r9, r4, r3
 800759c:	f000 fdfc 	bl	8008198 <_sbrk_r>
 80075a0:	4581      	cmp	r9, r0
 80075a2:	d142      	bne.n	800762a <_malloc_r+0xea>
 80075a4:	6821      	ldr	r1, [r4, #0]
 80075a6:	1a6d      	subs	r5, r5, r1
 80075a8:	4629      	mov	r1, r5
 80075aa:	4630      	mov	r0, r6
 80075ac:	f7ff ffa6 	bl	80074fc <sbrk_aligned>
 80075b0:	3001      	adds	r0, #1
 80075b2:	d03a      	beq.n	800762a <_malloc_r+0xea>
 80075b4:	6823      	ldr	r3, [r4, #0]
 80075b6:	442b      	add	r3, r5
 80075b8:	6023      	str	r3, [r4, #0]
 80075ba:	f8d8 3000 	ldr.w	r3, [r8]
 80075be:	685a      	ldr	r2, [r3, #4]
 80075c0:	bb62      	cbnz	r2, 800761c <_malloc_r+0xdc>
 80075c2:	f8c8 7000 	str.w	r7, [r8]
 80075c6:	e00f      	b.n	80075e8 <_malloc_r+0xa8>
 80075c8:	6822      	ldr	r2, [r4, #0]
 80075ca:	1b52      	subs	r2, r2, r5
 80075cc:	d420      	bmi.n	8007610 <_malloc_r+0xd0>
 80075ce:	2a0b      	cmp	r2, #11
 80075d0:	d917      	bls.n	8007602 <_malloc_r+0xc2>
 80075d2:	1961      	adds	r1, r4, r5
 80075d4:	42a3      	cmp	r3, r4
 80075d6:	6025      	str	r5, [r4, #0]
 80075d8:	bf18      	it	ne
 80075da:	6059      	strne	r1, [r3, #4]
 80075dc:	6863      	ldr	r3, [r4, #4]
 80075de:	bf08      	it	eq
 80075e0:	f8c8 1000 	streq.w	r1, [r8]
 80075e4:	5162      	str	r2, [r4, r5]
 80075e6:	604b      	str	r3, [r1, #4]
 80075e8:	4630      	mov	r0, r6
 80075ea:	f000 f82f 	bl	800764c <__malloc_unlock>
 80075ee:	f104 000b 	add.w	r0, r4, #11
 80075f2:	1d23      	adds	r3, r4, #4
 80075f4:	f020 0007 	bic.w	r0, r0, #7
 80075f8:	1ac2      	subs	r2, r0, r3
 80075fa:	bf1c      	itt	ne
 80075fc:	1a1b      	subne	r3, r3, r0
 80075fe:	50a3      	strne	r3, [r4, r2]
 8007600:	e7af      	b.n	8007562 <_malloc_r+0x22>
 8007602:	6862      	ldr	r2, [r4, #4]
 8007604:	42a3      	cmp	r3, r4
 8007606:	bf0c      	ite	eq
 8007608:	f8c8 2000 	streq.w	r2, [r8]
 800760c:	605a      	strne	r2, [r3, #4]
 800760e:	e7eb      	b.n	80075e8 <_malloc_r+0xa8>
 8007610:	4623      	mov	r3, r4
 8007612:	6864      	ldr	r4, [r4, #4]
 8007614:	e7ae      	b.n	8007574 <_malloc_r+0x34>
 8007616:	463c      	mov	r4, r7
 8007618:	687f      	ldr	r7, [r7, #4]
 800761a:	e7b6      	b.n	800758a <_malloc_r+0x4a>
 800761c:	461a      	mov	r2, r3
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	42a3      	cmp	r3, r4
 8007622:	d1fb      	bne.n	800761c <_malloc_r+0xdc>
 8007624:	2300      	movs	r3, #0
 8007626:	6053      	str	r3, [r2, #4]
 8007628:	e7de      	b.n	80075e8 <_malloc_r+0xa8>
 800762a:	230c      	movs	r3, #12
 800762c:	6033      	str	r3, [r6, #0]
 800762e:	4630      	mov	r0, r6
 8007630:	f000 f80c 	bl	800764c <__malloc_unlock>
 8007634:	e794      	b.n	8007560 <_malloc_r+0x20>
 8007636:	6005      	str	r5, [r0, #0]
 8007638:	e7d6      	b.n	80075e8 <_malloc_r+0xa8>
 800763a:	bf00      	nop
 800763c:	20000580 	.word	0x20000580

08007640 <__malloc_lock>:
 8007640:	4801      	ldr	r0, [pc, #4]	@ (8007648 <__malloc_lock+0x8>)
 8007642:	f7ff b8b8 	b.w	80067b6 <__retarget_lock_acquire_recursive>
 8007646:	bf00      	nop
 8007648:	20000578 	.word	0x20000578

0800764c <__malloc_unlock>:
 800764c:	4801      	ldr	r0, [pc, #4]	@ (8007654 <__malloc_unlock+0x8>)
 800764e:	f7ff b8b3 	b.w	80067b8 <__retarget_lock_release_recursive>
 8007652:	bf00      	nop
 8007654:	20000578 	.word	0x20000578

08007658 <_Balloc>:
 8007658:	b570      	push	{r4, r5, r6, lr}
 800765a:	69c6      	ldr	r6, [r0, #28]
 800765c:	4604      	mov	r4, r0
 800765e:	460d      	mov	r5, r1
 8007660:	b976      	cbnz	r6, 8007680 <_Balloc+0x28>
 8007662:	2010      	movs	r0, #16
 8007664:	f7ff ff42 	bl	80074ec <malloc>
 8007668:	4602      	mov	r2, r0
 800766a:	61e0      	str	r0, [r4, #28]
 800766c:	b920      	cbnz	r0, 8007678 <_Balloc+0x20>
 800766e:	4b18      	ldr	r3, [pc, #96]	@ (80076d0 <_Balloc+0x78>)
 8007670:	4818      	ldr	r0, [pc, #96]	@ (80076d4 <_Balloc+0x7c>)
 8007672:	216b      	movs	r1, #107	@ 0x6b
 8007674:	f000 fdae 	bl	80081d4 <__assert_func>
 8007678:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800767c:	6006      	str	r6, [r0, #0]
 800767e:	60c6      	str	r6, [r0, #12]
 8007680:	69e6      	ldr	r6, [r4, #28]
 8007682:	68f3      	ldr	r3, [r6, #12]
 8007684:	b183      	cbz	r3, 80076a8 <_Balloc+0x50>
 8007686:	69e3      	ldr	r3, [r4, #28]
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800768e:	b9b8      	cbnz	r0, 80076c0 <_Balloc+0x68>
 8007690:	2101      	movs	r1, #1
 8007692:	fa01 f605 	lsl.w	r6, r1, r5
 8007696:	1d72      	adds	r2, r6, #5
 8007698:	0092      	lsls	r2, r2, #2
 800769a:	4620      	mov	r0, r4
 800769c:	f000 fdb8 	bl	8008210 <_calloc_r>
 80076a0:	b160      	cbz	r0, 80076bc <_Balloc+0x64>
 80076a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80076a6:	e00e      	b.n	80076c6 <_Balloc+0x6e>
 80076a8:	2221      	movs	r2, #33	@ 0x21
 80076aa:	2104      	movs	r1, #4
 80076ac:	4620      	mov	r0, r4
 80076ae:	f000 fdaf 	bl	8008210 <_calloc_r>
 80076b2:	69e3      	ldr	r3, [r4, #28]
 80076b4:	60f0      	str	r0, [r6, #12]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d1e4      	bne.n	8007686 <_Balloc+0x2e>
 80076bc:	2000      	movs	r0, #0
 80076be:	bd70      	pop	{r4, r5, r6, pc}
 80076c0:	6802      	ldr	r2, [r0, #0]
 80076c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80076c6:	2300      	movs	r3, #0
 80076c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80076cc:	e7f7      	b.n	80076be <_Balloc+0x66>
 80076ce:	bf00      	nop
 80076d0:	08008961 	.word	0x08008961
 80076d4:	080089e1 	.word	0x080089e1

080076d8 <_Bfree>:
 80076d8:	b570      	push	{r4, r5, r6, lr}
 80076da:	69c6      	ldr	r6, [r0, #28]
 80076dc:	4605      	mov	r5, r0
 80076de:	460c      	mov	r4, r1
 80076e0:	b976      	cbnz	r6, 8007700 <_Bfree+0x28>
 80076e2:	2010      	movs	r0, #16
 80076e4:	f7ff ff02 	bl	80074ec <malloc>
 80076e8:	4602      	mov	r2, r0
 80076ea:	61e8      	str	r0, [r5, #28]
 80076ec:	b920      	cbnz	r0, 80076f8 <_Bfree+0x20>
 80076ee:	4b09      	ldr	r3, [pc, #36]	@ (8007714 <_Bfree+0x3c>)
 80076f0:	4809      	ldr	r0, [pc, #36]	@ (8007718 <_Bfree+0x40>)
 80076f2:	218f      	movs	r1, #143	@ 0x8f
 80076f4:	f000 fd6e 	bl	80081d4 <__assert_func>
 80076f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80076fc:	6006      	str	r6, [r0, #0]
 80076fe:	60c6      	str	r6, [r0, #12]
 8007700:	b13c      	cbz	r4, 8007712 <_Bfree+0x3a>
 8007702:	69eb      	ldr	r3, [r5, #28]
 8007704:	6862      	ldr	r2, [r4, #4]
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800770c:	6021      	str	r1, [r4, #0]
 800770e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007712:	bd70      	pop	{r4, r5, r6, pc}
 8007714:	08008961 	.word	0x08008961
 8007718:	080089e1 	.word	0x080089e1

0800771c <__multadd>:
 800771c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007720:	690d      	ldr	r5, [r1, #16]
 8007722:	4607      	mov	r7, r0
 8007724:	460c      	mov	r4, r1
 8007726:	461e      	mov	r6, r3
 8007728:	f101 0c14 	add.w	ip, r1, #20
 800772c:	2000      	movs	r0, #0
 800772e:	f8dc 3000 	ldr.w	r3, [ip]
 8007732:	b299      	uxth	r1, r3
 8007734:	fb02 6101 	mla	r1, r2, r1, r6
 8007738:	0c1e      	lsrs	r6, r3, #16
 800773a:	0c0b      	lsrs	r3, r1, #16
 800773c:	fb02 3306 	mla	r3, r2, r6, r3
 8007740:	b289      	uxth	r1, r1
 8007742:	3001      	adds	r0, #1
 8007744:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007748:	4285      	cmp	r5, r0
 800774a:	f84c 1b04 	str.w	r1, [ip], #4
 800774e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007752:	dcec      	bgt.n	800772e <__multadd+0x12>
 8007754:	b30e      	cbz	r6, 800779a <__multadd+0x7e>
 8007756:	68a3      	ldr	r3, [r4, #8]
 8007758:	42ab      	cmp	r3, r5
 800775a:	dc19      	bgt.n	8007790 <__multadd+0x74>
 800775c:	6861      	ldr	r1, [r4, #4]
 800775e:	4638      	mov	r0, r7
 8007760:	3101      	adds	r1, #1
 8007762:	f7ff ff79 	bl	8007658 <_Balloc>
 8007766:	4680      	mov	r8, r0
 8007768:	b928      	cbnz	r0, 8007776 <__multadd+0x5a>
 800776a:	4602      	mov	r2, r0
 800776c:	4b0c      	ldr	r3, [pc, #48]	@ (80077a0 <__multadd+0x84>)
 800776e:	480d      	ldr	r0, [pc, #52]	@ (80077a4 <__multadd+0x88>)
 8007770:	21ba      	movs	r1, #186	@ 0xba
 8007772:	f000 fd2f 	bl	80081d4 <__assert_func>
 8007776:	6922      	ldr	r2, [r4, #16]
 8007778:	3202      	adds	r2, #2
 800777a:	f104 010c 	add.w	r1, r4, #12
 800777e:	0092      	lsls	r2, r2, #2
 8007780:	300c      	adds	r0, #12
 8007782:	f000 fd19 	bl	80081b8 <memcpy>
 8007786:	4621      	mov	r1, r4
 8007788:	4638      	mov	r0, r7
 800778a:	f7ff ffa5 	bl	80076d8 <_Bfree>
 800778e:	4644      	mov	r4, r8
 8007790:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007794:	3501      	adds	r5, #1
 8007796:	615e      	str	r6, [r3, #20]
 8007798:	6125      	str	r5, [r4, #16]
 800779a:	4620      	mov	r0, r4
 800779c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077a0:	080089d0 	.word	0x080089d0
 80077a4:	080089e1 	.word	0x080089e1

080077a8 <__hi0bits>:
 80077a8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80077ac:	4603      	mov	r3, r0
 80077ae:	bf36      	itet	cc
 80077b0:	0403      	lslcc	r3, r0, #16
 80077b2:	2000      	movcs	r0, #0
 80077b4:	2010      	movcc	r0, #16
 80077b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80077ba:	bf3c      	itt	cc
 80077bc:	021b      	lslcc	r3, r3, #8
 80077be:	3008      	addcc	r0, #8
 80077c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077c4:	bf3c      	itt	cc
 80077c6:	011b      	lslcc	r3, r3, #4
 80077c8:	3004      	addcc	r0, #4
 80077ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077ce:	bf3c      	itt	cc
 80077d0:	009b      	lslcc	r3, r3, #2
 80077d2:	3002      	addcc	r0, #2
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	db05      	blt.n	80077e4 <__hi0bits+0x3c>
 80077d8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80077dc:	f100 0001 	add.w	r0, r0, #1
 80077e0:	bf08      	it	eq
 80077e2:	2020      	moveq	r0, #32
 80077e4:	4770      	bx	lr

080077e6 <__lo0bits>:
 80077e6:	6803      	ldr	r3, [r0, #0]
 80077e8:	4602      	mov	r2, r0
 80077ea:	f013 0007 	ands.w	r0, r3, #7
 80077ee:	d00b      	beq.n	8007808 <__lo0bits+0x22>
 80077f0:	07d9      	lsls	r1, r3, #31
 80077f2:	d421      	bmi.n	8007838 <__lo0bits+0x52>
 80077f4:	0798      	lsls	r0, r3, #30
 80077f6:	bf49      	itett	mi
 80077f8:	085b      	lsrmi	r3, r3, #1
 80077fa:	089b      	lsrpl	r3, r3, #2
 80077fc:	2001      	movmi	r0, #1
 80077fe:	6013      	strmi	r3, [r2, #0]
 8007800:	bf5c      	itt	pl
 8007802:	6013      	strpl	r3, [r2, #0]
 8007804:	2002      	movpl	r0, #2
 8007806:	4770      	bx	lr
 8007808:	b299      	uxth	r1, r3
 800780a:	b909      	cbnz	r1, 8007810 <__lo0bits+0x2a>
 800780c:	0c1b      	lsrs	r3, r3, #16
 800780e:	2010      	movs	r0, #16
 8007810:	b2d9      	uxtb	r1, r3
 8007812:	b909      	cbnz	r1, 8007818 <__lo0bits+0x32>
 8007814:	3008      	adds	r0, #8
 8007816:	0a1b      	lsrs	r3, r3, #8
 8007818:	0719      	lsls	r1, r3, #28
 800781a:	bf04      	itt	eq
 800781c:	091b      	lsreq	r3, r3, #4
 800781e:	3004      	addeq	r0, #4
 8007820:	0799      	lsls	r1, r3, #30
 8007822:	bf04      	itt	eq
 8007824:	089b      	lsreq	r3, r3, #2
 8007826:	3002      	addeq	r0, #2
 8007828:	07d9      	lsls	r1, r3, #31
 800782a:	d403      	bmi.n	8007834 <__lo0bits+0x4e>
 800782c:	085b      	lsrs	r3, r3, #1
 800782e:	f100 0001 	add.w	r0, r0, #1
 8007832:	d003      	beq.n	800783c <__lo0bits+0x56>
 8007834:	6013      	str	r3, [r2, #0]
 8007836:	4770      	bx	lr
 8007838:	2000      	movs	r0, #0
 800783a:	4770      	bx	lr
 800783c:	2020      	movs	r0, #32
 800783e:	4770      	bx	lr

08007840 <__i2b>:
 8007840:	b510      	push	{r4, lr}
 8007842:	460c      	mov	r4, r1
 8007844:	2101      	movs	r1, #1
 8007846:	f7ff ff07 	bl	8007658 <_Balloc>
 800784a:	4602      	mov	r2, r0
 800784c:	b928      	cbnz	r0, 800785a <__i2b+0x1a>
 800784e:	4b05      	ldr	r3, [pc, #20]	@ (8007864 <__i2b+0x24>)
 8007850:	4805      	ldr	r0, [pc, #20]	@ (8007868 <__i2b+0x28>)
 8007852:	f240 1145 	movw	r1, #325	@ 0x145
 8007856:	f000 fcbd 	bl	80081d4 <__assert_func>
 800785a:	2301      	movs	r3, #1
 800785c:	6144      	str	r4, [r0, #20]
 800785e:	6103      	str	r3, [r0, #16]
 8007860:	bd10      	pop	{r4, pc}
 8007862:	bf00      	nop
 8007864:	080089d0 	.word	0x080089d0
 8007868:	080089e1 	.word	0x080089e1

0800786c <__multiply>:
 800786c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007870:	4614      	mov	r4, r2
 8007872:	690a      	ldr	r2, [r1, #16]
 8007874:	6923      	ldr	r3, [r4, #16]
 8007876:	429a      	cmp	r2, r3
 8007878:	bfa8      	it	ge
 800787a:	4623      	movge	r3, r4
 800787c:	460f      	mov	r7, r1
 800787e:	bfa4      	itt	ge
 8007880:	460c      	movge	r4, r1
 8007882:	461f      	movge	r7, r3
 8007884:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007888:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800788c:	68a3      	ldr	r3, [r4, #8]
 800788e:	6861      	ldr	r1, [r4, #4]
 8007890:	eb0a 0609 	add.w	r6, sl, r9
 8007894:	42b3      	cmp	r3, r6
 8007896:	b085      	sub	sp, #20
 8007898:	bfb8      	it	lt
 800789a:	3101      	addlt	r1, #1
 800789c:	f7ff fedc 	bl	8007658 <_Balloc>
 80078a0:	b930      	cbnz	r0, 80078b0 <__multiply+0x44>
 80078a2:	4602      	mov	r2, r0
 80078a4:	4b44      	ldr	r3, [pc, #272]	@ (80079b8 <__multiply+0x14c>)
 80078a6:	4845      	ldr	r0, [pc, #276]	@ (80079bc <__multiply+0x150>)
 80078a8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80078ac:	f000 fc92 	bl	80081d4 <__assert_func>
 80078b0:	f100 0514 	add.w	r5, r0, #20
 80078b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80078b8:	462b      	mov	r3, r5
 80078ba:	2200      	movs	r2, #0
 80078bc:	4543      	cmp	r3, r8
 80078be:	d321      	bcc.n	8007904 <__multiply+0x98>
 80078c0:	f107 0114 	add.w	r1, r7, #20
 80078c4:	f104 0214 	add.w	r2, r4, #20
 80078c8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80078cc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80078d0:	9302      	str	r3, [sp, #8]
 80078d2:	1b13      	subs	r3, r2, r4
 80078d4:	3b15      	subs	r3, #21
 80078d6:	f023 0303 	bic.w	r3, r3, #3
 80078da:	3304      	adds	r3, #4
 80078dc:	f104 0715 	add.w	r7, r4, #21
 80078e0:	42ba      	cmp	r2, r7
 80078e2:	bf38      	it	cc
 80078e4:	2304      	movcc	r3, #4
 80078e6:	9301      	str	r3, [sp, #4]
 80078e8:	9b02      	ldr	r3, [sp, #8]
 80078ea:	9103      	str	r1, [sp, #12]
 80078ec:	428b      	cmp	r3, r1
 80078ee:	d80c      	bhi.n	800790a <__multiply+0x9e>
 80078f0:	2e00      	cmp	r6, #0
 80078f2:	dd03      	ble.n	80078fc <__multiply+0x90>
 80078f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d05b      	beq.n	80079b4 <__multiply+0x148>
 80078fc:	6106      	str	r6, [r0, #16]
 80078fe:	b005      	add	sp, #20
 8007900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007904:	f843 2b04 	str.w	r2, [r3], #4
 8007908:	e7d8      	b.n	80078bc <__multiply+0x50>
 800790a:	f8b1 a000 	ldrh.w	sl, [r1]
 800790e:	f1ba 0f00 	cmp.w	sl, #0
 8007912:	d024      	beq.n	800795e <__multiply+0xf2>
 8007914:	f104 0e14 	add.w	lr, r4, #20
 8007918:	46a9      	mov	r9, r5
 800791a:	f04f 0c00 	mov.w	ip, #0
 800791e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007922:	f8d9 3000 	ldr.w	r3, [r9]
 8007926:	fa1f fb87 	uxth.w	fp, r7
 800792a:	b29b      	uxth	r3, r3
 800792c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007930:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007934:	f8d9 7000 	ldr.w	r7, [r9]
 8007938:	4463      	add	r3, ip
 800793a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800793e:	fb0a c70b 	mla	r7, sl, fp, ip
 8007942:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007946:	b29b      	uxth	r3, r3
 8007948:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800794c:	4572      	cmp	r2, lr
 800794e:	f849 3b04 	str.w	r3, [r9], #4
 8007952:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007956:	d8e2      	bhi.n	800791e <__multiply+0xb2>
 8007958:	9b01      	ldr	r3, [sp, #4]
 800795a:	f845 c003 	str.w	ip, [r5, r3]
 800795e:	9b03      	ldr	r3, [sp, #12]
 8007960:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007964:	3104      	adds	r1, #4
 8007966:	f1b9 0f00 	cmp.w	r9, #0
 800796a:	d021      	beq.n	80079b0 <__multiply+0x144>
 800796c:	682b      	ldr	r3, [r5, #0]
 800796e:	f104 0c14 	add.w	ip, r4, #20
 8007972:	46ae      	mov	lr, r5
 8007974:	f04f 0a00 	mov.w	sl, #0
 8007978:	f8bc b000 	ldrh.w	fp, [ip]
 800797c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007980:	fb09 770b 	mla	r7, r9, fp, r7
 8007984:	4457      	add	r7, sl
 8007986:	b29b      	uxth	r3, r3
 8007988:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800798c:	f84e 3b04 	str.w	r3, [lr], #4
 8007990:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007994:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007998:	f8be 3000 	ldrh.w	r3, [lr]
 800799c:	fb09 330a 	mla	r3, r9, sl, r3
 80079a0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80079a4:	4562      	cmp	r2, ip
 80079a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80079aa:	d8e5      	bhi.n	8007978 <__multiply+0x10c>
 80079ac:	9f01      	ldr	r7, [sp, #4]
 80079ae:	51eb      	str	r3, [r5, r7]
 80079b0:	3504      	adds	r5, #4
 80079b2:	e799      	b.n	80078e8 <__multiply+0x7c>
 80079b4:	3e01      	subs	r6, #1
 80079b6:	e79b      	b.n	80078f0 <__multiply+0x84>
 80079b8:	080089d0 	.word	0x080089d0
 80079bc:	080089e1 	.word	0x080089e1

080079c0 <__pow5mult>:
 80079c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079c4:	4615      	mov	r5, r2
 80079c6:	f012 0203 	ands.w	r2, r2, #3
 80079ca:	4607      	mov	r7, r0
 80079cc:	460e      	mov	r6, r1
 80079ce:	d007      	beq.n	80079e0 <__pow5mult+0x20>
 80079d0:	4c25      	ldr	r4, [pc, #148]	@ (8007a68 <__pow5mult+0xa8>)
 80079d2:	3a01      	subs	r2, #1
 80079d4:	2300      	movs	r3, #0
 80079d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80079da:	f7ff fe9f 	bl	800771c <__multadd>
 80079de:	4606      	mov	r6, r0
 80079e0:	10ad      	asrs	r5, r5, #2
 80079e2:	d03d      	beq.n	8007a60 <__pow5mult+0xa0>
 80079e4:	69fc      	ldr	r4, [r7, #28]
 80079e6:	b97c      	cbnz	r4, 8007a08 <__pow5mult+0x48>
 80079e8:	2010      	movs	r0, #16
 80079ea:	f7ff fd7f 	bl	80074ec <malloc>
 80079ee:	4602      	mov	r2, r0
 80079f0:	61f8      	str	r0, [r7, #28]
 80079f2:	b928      	cbnz	r0, 8007a00 <__pow5mult+0x40>
 80079f4:	4b1d      	ldr	r3, [pc, #116]	@ (8007a6c <__pow5mult+0xac>)
 80079f6:	481e      	ldr	r0, [pc, #120]	@ (8007a70 <__pow5mult+0xb0>)
 80079f8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80079fc:	f000 fbea 	bl	80081d4 <__assert_func>
 8007a00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a04:	6004      	str	r4, [r0, #0]
 8007a06:	60c4      	str	r4, [r0, #12]
 8007a08:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007a0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007a10:	b94c      	cbnz	r4, 8007a26 <__pow5mult+0x66>
 8007a12:	f240 2171 	movw	r1, #625	@ 0x271
 8007a16:	4638      	mov	r0, r7
 8007a18:	f7ff ff12 	bl	8007840 <__i2b>
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007a22:	4604      	mov	r4, r0
 8007a24:	6003      	str	r3, [r0, #0]
 8007a26:	f04f 0900 	mov.w	r9, #0
 8007a2a:	07eb      	lsls	r3, r5, #31
 8007a2c:	d50a      	bpl.n	8007a44 <__pow5mult+0x84>
 8007a2e:	4631      	mov	r1, r6
 8007a30:	4622      	mov	r2, r4
 8007a32:	4638      	mov	r0, r7
 8007a34:	f7ff ff1a 	bl	800786c <__multiply>
 8007a38:	4631      	mov	r1, r6
 8007a3a:	4680      	mov	r8, r0
 8007a3c:	4638      	mov	r0, r7
 8007a3e:	f7ff fe4b 	bl	80076d8 <_Bfree>
 8007a42:	4646      	mov	r6, r8
 8007a44:	106d      	asrs	r5, r5, #1
 8007a46:	d00b      	beq.n	8007a60 <__pow5mult+0xa0>
 8007a48:	6820      	ldr	r0, [r4, #0]
 8007a4a:	b938      	cbnz	r0, 8007a5c <__pow5mult+0x9c>
 8007a4c:	4622      	mov	r2, r4
 8007a4e:	4621      	mov	r1, r4
 8007a50:	4638      	mov	r0, r7
 8007a52:	f7ff ff0b 	bl	800786c <__multiply>
 8007a56:	6020      	str	r0, [r4, #0]
 8007a58:	f8c0 9000 	str.w	r9, [r0]
 8007a5c:	4604      	mov	r4, r0
 8007a5e:	e7e4      	b.n	8007a2a <__pow5mult+0x6a>
 8007a60:	4630      	mov	r0, r6
 8007a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a66:	bf00      	nop
 8007a68:	08008a3c 	.word	0x08008a3c
 8007a6c:	08008961 	.word	0x08008961
 8007a70:	080089e1 	.word	0x080089e1

08007a74 <__lshift>:
 8007a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a78:	460c      	mov	r4, r1
 8007a7a:	6849      	ldr	r1, [r1, #4]
 8007a7c:	6923      	ldr	r3, [r4, #16]
 8007a7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007a82:	68a3      	ldr	r3, [r4, #8]
 8007a84:	4607      	mov	r7, r0
 8007a86:	4691      	mov	r9, r2
 8007a88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007a8c:	f108 0601 	add.w	r6, r8, #1
 8007a90:	42b3      	cmp	r3, r6
 8007a92:	db0b      	blt.n	8007aac <__lshift+0x38>
 8007a94:	4638      	mov	r0, r7
 8007a96:	f7ff fddf 	bl	8007658 <_Balloc>
 8007a9a:	4605      	mov	r5, r0
 8007a9c:	b948      	cbnz	r0, 8007ab2 <__lshift+0x3e>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	4b28      	ldr	r3, [pc, #160]	@ (8007b44 <__lshift+0xd0>)
 8007aa2:	4829      	ldr	r0, [pc, #164]	@ (8007b48 <__lshift+0xd4>)
 8007aa4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007aa8:	f000 fb94 	bl	80081d4 <__assert_func>
 8007aac:	3101      	adds	r1, #1
 8007aae:	005b      	lsls	r3, r3, #1
 8007ab0:	e7ee      	b.n	8007a90 <__lshift+0x1c>
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	f100 0114 	add.w	r1, r0, #20
 8007ab8:	f100 0210 	add.w	r2, r0, #16
 8007abc:	4618      	mov	r0, r3
 8007abe:	4553      	cmp	r3, sl
 8007ac0:	db33      	blt.n	8007b2a <__lshift+0xb6>
 8007ac2:	6920      	ldr	r0, [r4, #16]
 8007ac4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ac8:	f104 0314 	add.w	r3, r4, #20
 8007acc:	f019 091f 	ands.w	r9, r9, #31
 8007ad0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007ad4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007ad8:	d02b      	beq.n	8007b32 <__lshift+0xbe>
 8007ada:	f1c9 0e20 	rsb	lr, r9, #32
 8007ade:	468a      	mov	sl, r1
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	6818      	ldr	r0, [r3, #0]
 8007ae4:	fa00 f009 	lsl.w	r0, r0, r9
 8007ae8:	4310      	orrs	r0, r2
 8007aea:	f84a 0b04 	str.w	r0, [sl], #4
 8007aee:	f853 2b04 	ldr.w	r2, [r3], #4
 8007af2:	459c      	cmp	ip, r3
 8007af4:	fa22 f20e 	lsr.w	r2, r2, lr
 8007af8:	d8f3      	bhi.n	8007ae2 <__lshift+0x6e>
 8007afa:	ebac 0304 	sub.w	r3, ip, r4
 8007afe:	3b15      	subs	r3, #21
 8007b00:	f023 0303 	bic.w	r3, r3, #3
 8007b04:	3304      	adds	r3, #4
 8007b06:	f104 0015 	add.w	r0, r4, #21
 8007b0a:	4584      	cmp	ip, r0
 8007b0c:	bf38      	it	cc
 8007b0e:	2304      	movcc	r3, #4
 8007b10:	50ca      	str	r2, [r1, r3]
 8007b12:	b10a      	cbz	r2, 8007b18 <__lshift+0xa4>
 8007b14:	f108 0602 	add.w	r6, r8, #2
 8007b18:	3e01      	subs	r6, #1
 8007b1a:	4638      	mov	r0, r7
 8007b1c:	612e      	str	r6, [r5, #16]
 8007b1e:	4621      	mov	r1, r4
 8007b20:	f7ff fdda 	bl	80076d8 <_Bfree>
 8007b24:	4628      	mov	r0, r5
 8007b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b2a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007b2e:	3301      	adds	r3, #1
 8007b30:	e7c5      	b.n	8007abe <__lshift+0x4a>
 8007b32:	3904      	subs	r1, #4
 8007b34:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b38:	f841 2f04 	str.w	r2, [r1, #4]!
 8007b3c:	459c      	cmp	ip, r3
 8007b3e:	d8f9      	bhi.n	8007b34 <__lshift+0xc0>
 8007b40:	e7ea      	b.n	8007b18 <__lshift+0xa4>
 8007b42:	bf00      	nop
 8007b44:	080089d0 	.word	0x080089d0
 8007b48:	080089e1 	.word	0x080089e1

08007b4c <__mcmp>:
 8007b4c:	690a      	ldr	r2, [r1, #16]
 8007b4e:	4603      	mov	r3, r0
 8007b50:	6900      	ldr	r0, [r0, #16]
 8007b52:	1a80      	subs	r0, r0, r2
 8007b54:	b530      	push	{r4, r5, lr}
 8007b56:	d10e      	bne.n	8007b76 <__mcmp+0x2a>
 8007b58:	3314      	adds	r3, #20
 8007b5a:	3114      	adds	r1, #20
 8007b5c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007b60:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007b64:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007b68:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007b6c:	4295      	cmp	r5, r2
 8007b6e:	d003      	beq.n	8007b78 <__mcmp+0x2c>
 8007b70:	d205      	bcs.n	8007b7e <__mcmp+0x32>
 8007b72:	f04f 30ff 	mov.w	r0, #4294967295
 8007b76:	bd30      	pop	{r4, r5, pc}
 8007b78:	42a3      	cmp	r3, r4
 8007b7a:	d3f3      	bcc.n	8007b64 <__mcmp+0x18>
 8007b7c:	e7fb      	b.n	8007b76 <__mcmp+0x2a>
 8007b7e:	2001      	movs	r0, #1
 8007b80:	e7f9      	b.n	8007b76 <__mcmp+0x2a>
	...

08007b84 <__mdiff>:
 8007b84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b88:	4689      	mov	r9, r1
 8007b8a:	4606      	mov	r6, r0
 8007b8c:	4611      	mov	r1, r2
 8007b8e:	4648      	mov	r0, r9
 8007b90:	4614      	mov	r4, r2
 8007b92:	f7ff ffdb 	bl	8007b4c <__mcmp>
 8007b96:	1e05      	subs	r5, r0, #0
 8007b98:	d112      	bne.n	8007bc0 <__mdiff+0x3c>
 8007b9a:	4629      	mov	r1, r5
 8007b9c:	4630      	mov	r0, r6
 8007b9e:	f7ff fd5b 	bl	8007658 <_Balloc>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	b928      	cbnz	r0, 8007bb2 <__mdiff+0x2e>
 8007ba6:	4b3f      	ldr	r3, [pc, #252]	@ (8007ca4 <__mdiff+0x120>)
 8007ba8:	f240 2137 	movw	r1, #567	@ 0x237
 8007bac:	483e      	ldr	r0, [pc, #248]	@ (8007ca8 <__mdiff+0x124>)
 8007bae:	f000 fb11 	bl	80081d4 <__assert_func>
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007bb8:	4610      	mov	r0, r2
 8007bba:	b003      	add	sp, #12
 8007bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bc0:	bfbc      	itt	lt
 8007bc2:	464b      	movlt	r3, r9
 8007bc4:	46a1      	movlt	r9, r4
 8007bc6:	4630      	mov	r0, r6
 8007bc8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007bcc:	bfba      	itte	lt
 8007bce:	461c      	movlt	r4, r3
 8007bd0:	2501      	movlt	r5, #1
 8007bd2:	2500      	movge	r5, #0
 8007bd4:	f7ff fd40 	bl	8007658 <_Balloc>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	b918      	cbnz	r0, 8007be4 <__mdiff+0x60>
 8007bdc:	4b31      	ldr	r3, [pc, #196]	@ (8007ca4 <__mdiff+0x120>)
 8007bde:	f240 2145 	movw	r1, #581	@ 0x245
 8007be2:	e7e3      	b.n	8007bac <__mdiff+0x28>
 8007be4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007be8:	6926      	ldr	r6, [r4, #16]
 8007bea:	60c5      	str	r5, [r0, #12]
 8007bec:	f109 0310 	add.w	r3, r9, #16
 8007bf0:	f109 0514 	add.w	r5, r9, #20
 8007bf4:	f104 0e14 	add.w	lr, r4, #20
 8007bf8:	f100 0b14 	add.w	fp, r0, #20
 8007bfc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007c00:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007c04:	9301      	str	r3, [sp, #4]
 8007c06:	46d9      	mov	r9, fp
 8007c08:	f04f 0c00 	mov.w	ip, #0
 8007c0c:	9b01      	ldr	r3, [sp, #4]
 8007c0e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007c12:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007c16:	9301      	str	r3, [sp, #4]
 8007c18:	fa1f f38a 	uxth.w	r3, sl
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	b283      	uxth	r3, r0
 8007c20:	1acb      	subs	r3, r1, r3
 8007c22:	0c00      	lsrs	r0, r0, #16
 8007c24:	4463      	add	r3, ip
 8007c26:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007c2a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007c34:	4576      	cmp	r6, lr
 8007c36:	f849 3b04 	str.w	r3, [r9], #4
 8007c3a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007c3e:	d8e5      	bhi.n	8007c0c <__mdiff+0x88>
 8007c40:	1b33      	subs	r3, r6, r4
 8007c42:	3b15      	subs	r3, #21
 8007c44:	f023 0303 	bic.w	r3, r3, #3
 8007c48:	3415      	adds	r4, #21
 8007c4a:	3304      	adds	r3, #4
 8007c4c:	42a6      	cmp	r6, r4
 8007c4e:	bf38      	it	cc
 8007c50:	2304      	movcc	r3, #4
 8007c52:	441d      	add	r5, r3
 8007c54:	445b      	add	r3, fp
 8007c56:	461e      	mov	r6, r3
 8007c58:	462c      	mov	r4, r5
 8007c5a:	4544      	cmp	r4, r8
 8007c5c:	d30e      	bcc.n	8007c7c <__mdiff+0xf8>
 8007c5e:	f108 0103 	add.w	r1, r8, #3
 8007c62:	1b49      	subs	r1, r1, r5
 8007c64:	f021 0103 	bic.w	r1, r1, #3
 8007c68:	3d03      	subs	r5, #3
 8007c6a:	45a8      	cmp	r8, r5
 8007c6c:	bf38      	it	cc
 8007c6e:	2100      	movcc	r1, #0
 8007c70:	440b      	add	r3, r1
 8007c72:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007c76:	b191      	cbz	r1, 8007c9e <__mdiff+0x11a>
 8007c78:	6117      	str	r7, [r2, #16]
 8007c7a:	e79d      	b.n	8007bb8 <__mdiff+0x34>
 8007c7c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007c80:	46e6      	mov	lr, ip
 8007c82:	0c08      	lsrs	r0, r1, #16
 8007c84:	fa1c fc81 	uxtah	ip, ip, r1
 8007c88:	4471      	add	r1, lr
 8007c8a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007c8e:	b289      	uxth	r1, r1
 8007c90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007c94:	f846 1b04 	str.w	r1, [r6], #4
 8007c98:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007c9c:	e7dd      	b.n	8007c5a <__mdiff+0xd6>
 8007c9e:	3f01      	subs	r7, #1
 8007ca0:	e7e7      	b.n	8007c72 <__mdiff+0xee>
 8007ca2:	bf00      	nop
 8007ca4:	080089d0 	.word	0x080089d0
 8007ca8:	080089e1 	.word	0x080089e1

08007cac <__d2b>:
 8007cac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007cb0:	460f      	mov	r7, r1
 8007cb2:	2101      	movs	r1, #1
 8007cb4:	ec59 8b10 	vmov	r8, r9, d0
 8007cb8:	4616      	mov	r6, r2
 8007cba:	f7ff fccd 	bl	8007658 <_Balloc>
 8007cbe:	4604      	mov	r4, r0
 8007cc0:	b930      	cbnz	r0, 8007cd0 <__d2b+0x24>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	4b23      	ldr	r3, [pc, #140]	@ (8007d54 <__d2b+0xa8>)
 8007cc6:	4824      	ldr	r0, [pc, #144]	@ (8007d58 <__d2b+0xac>)
 8007cc8:	f240 310f 	movw	r1, #783	@ 0x30f
 8007ccc:	f000 fa82 	bl	80081d4 <__assert_func>
 8007cd0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007cd4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007cd8:	b10d      	cbz	r5, 8007cde <__d2b+0x32>
 8007cda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007cde:	9301      	str	r3, [sp, #4]
 8007ce0:	f1b8 0300 	subs.w	r3, r8, #0
 8007ce4:	d023      	beq.n	8007d2e <__d2b+0x82>
 8007ce6:	4668      	mov	r0, sp
 8007ce8:	9300      	str	r3, [sp, #0]
 8007cea:	f7ff fd7c 	bl	80077e6 <__lo0bits>
 8007cee:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007cf2:	b1d0      	cbz	r0, 8007d2a <__d2b+0x7e>
 8007cf4:	f1c0 0320 	rsb	r3, r0, #32
 8007cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8007cfc:	430b      	orrs	r3, r1
 8007cfe:	40c2      	lsrs	r2, r0
 8007d00:	6163      	str	r3, [r4, #20]
 8007d02:	9201      	str	r2, [sp, #4]
 8007d04:	9b01      	ldr	r3, [sp, #4]
 8007d06:	61a3      	str	r3, [r4, #24]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	bf0c      	ite	eq
 8007d0c:	2201      	moveq	r2, #1
 8007d0e:	2202      	movne	r2, #2
 8007d10:	6122      	str	r2, [r4, #16]
 8007d12:	b1a5      	cbz	r5, 8007d3e <__d2b+0x92>
 8007d14:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007d18:	4405      	add	r5, r0
 8007d1a:	603d      	str	r5, [r7, #0]
 8007d1c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007d20:	6030      	str	r0, [r6, #0]
 8007d22:	4620      	mov	r0, r4
 8007d24:	b003      	add	sp, #12
 8007d26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d2a:	6161      	str	r1, [r4, #20]
 8007d2c:	e7ea      	b.n	8007d04 <__d2b+0x58>
 8007d2e:	a801      	add	r0, sp, #4
 8007d30:	f7ff fd59 	bl	80077e6 <__lo0bits>
 8007d34:	9b01      	ldr	r3, [sp, #4]
 8007d36:	6163      	str	r3, [r4, #20]
 8007d38:	3020      	adds	r0, #32
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	e7e8      	b.n	8007d10 <__d2b+0x64>
 8007d3e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007d42:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007d46:	6038      	str	r0, [r7, #0]
 8007d48:	6918      	ldr	r0, [r3, #16]
 8007d4a:	f7ff fd2d 	bl	80077a8 <__hi0bits>
 8007d4e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007d52:	e7e5      	b.n	8007d20 <__d2b+0x74>
 8007d54:	080089d0 	.word	0x080089d0
 8007d58:	080089e1 	.word	0x080089e1

08007d5c <__ssputs_r>:
 8007d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d60:	688e      	ldr	r6, [r1, #8]
 8007d62:	461f      	mov	r7, r3
 8007d64:	42be      	cmp	r6, r7
 8007d66:	680b      	ldr	r3, [r1, #0]
 8007d68:	4682      	mov	sl, r0
 8007d6a:	460c      	mov	r4, r1
 8007d6c:	4690      	mov	r8, r2
 8007d6e:	d82d      	bhi.n	8007dcc <__ssputs_r+0x70>
 8007d70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007d74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007d78:	d026      	beq.n	8007dc8 <__ssputs_r+0x6c>
 8007d7a:	6965      	ldr	r5, [r4, #20]
 8007d7c:	6909      	ldr	r1, [r1, #16]
 8007d7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d82:	eba3 0901 	sub.w	r9, r3, r1
 8007d86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d8a:	1c7b      	adds	r3, r7, #1
 8007d8c:	444b      	add	r3, r9
 8007d8e:	106d      	asrs	r5, r5, #1
 8007d90:	429d      	cmp	r5, r3
 8007d92:	bf38      	it	cc
 8007d94:	461d      	movcc	r5, r3
 8007d96:	0553      	lsls	r3, r2, #21
 8007d98:	d527      	bpl.n	8007dea <__ssputs_r+0x8e>
 8007d9a:	4629      	mov	r1, r5
 8007d9c:	f7ff fbd0 	bl	8007540 <_malloc_r>
 8007da0:	4606      	mov	r6, r0
 8007da2:	b360      	cbz	r0, 8007dfe <__ssputs_r+0xa2>
 8007da4:	6921      	ldr	r1, [r4, #16]
 8007da6:	464a      	mov	r2, r9
 8007da8:	f000 fa06 	bl	80081b8 <memcpy>
 8007dac:	89a3      	ldrh	r3, [r4, #12]
 8007dae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007db2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007db6:	81a3      	strh	r3, [r4, #12]
 8007db8:	6126      	str	r6, [r4, #16]
 8007dba:	6165      	str	r5, [r4, #20]
 8007dbc:	444e      	add	r6, r9
 8007dbe:	eba5 0509 	sub.w	r5, r5, r9
 8007dc2:	6026      	str	r6, [r4, #0]
 8007dc4:	60a5      	str	r5, [r4, #8]
 8007dc6:	463e      	mov	r6, r7
 8007dc8:	42be      	cmp	r6, r7
 8007dca:	d900      	bls.n	8007dce <__ssputs_r+0x72>
 8007dcc:	463e      	mov	r6, r7
 8007dce:	6820      	ldr	r0, [r4, #0]
 8007dd0:	4632      	mov	r2, r6
 8007dd2:	4641      	mov	r1, r8
 8007dd4:	f000 f9c6 	bl	8008164 <memmove>
 8007dd8:	68a3      	ldr	r3, [r4, #8]
 8007dda:	1b9b      	subs	r3, r3, r6
 8007ddc:	60a3      	str	r3, [r4, #8]
 8007dde:	6823      	ldr	r3, [r4, #0]
 8007de0:	4433      	add	r3, r6
 8007de2:	6023      	str	r3, [r4, #0]
 8007de4:	2000      	movs	r0, #0
 8007de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dea:	462a      	mov	r2, r5
 8007dec:	f000 fa36 	bl	800825c <_realloc_r>
 8007df0:	4606      	mov	r6, r0
 8007df2:	2800      	cmp	r0, #0
 8007df4:	d1e0      	bne.n	8007db8 <__ssputs_r+0x5c>
 8007df6:	6921      	ldr	r1, [r4, #16]
 8007df8:	4650      	mov	r0, sl
 8007dfa:	f7ff fb2d 	bl	8007458 <_free_r>
 8007dfe:	230c      	movs	r3, #12
 8007e00:	f8ca 3000 	str.w	r3, [sl]
 8007e04:	89a3      	ldrh	r3, [r4, #12]
 8007e06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e0a:	81a3      	strh	r3, [r4, #12]
 8007e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e10:	e7e9      	b.n	8007de6 <__ssputs_r+0x8a>
	...

08007e14 <_svfiprintf_r>:
 8007e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e18:	4698      	mov	r8, r3
 8007e1a:	898b      	ldrh	r3, [r1, #12]
 8007e1c:	061b      	lsls	r3, r3, #24
 8007e1e:	b09d      	sub	sp, #116	@ 0x74
 8007e20:	4607      	mov	r7, r0
 8007e22:	460d      	mov	r5, r1
 8007e24:	4614      	mov	r4, r2
 8007e26:	d510      	bpl.n	8007e4a <_svfiprintf_r+0x36>
 8007e28:	690b      	ldr	r3, [r1, #16]
 8007e2a:	b973      	cbnz	r3, 8007e4a <_svfiprintf_r+0x36>
 8007e2c:	2140      	movs	r1, #64	@ 0x40
 8007e2e:	f7ff fb87 	bl	8007540 <_malloc_r>
 8007e32:	6028      	str	r0, [r5, #0]
 8007e34:	6128      	str	r0, [r5, #16]
 8007e36:	b930      	cbnz	r0, 8007e46 <_svfiprintf_r+0x32>
 8007e38:	230c      	movs	r3, #12
 8007e3a:	603b      	str	r3, [r7, #0]
 8007e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e40:	b01d      	add	sp, #116	@ 0x74
 8007e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e46:	2340      	movs	r3, #64	@ 0x40
 8007e48:	616b      	str	r3, [r5, #20]
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e4e:	2320      	movs	r3, #32
 8007e50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007e54:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e58:	2330      	movs	r3, #48	@ 0x30
 8007e5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007ff8 <_svfiprintf_r+0x1e4>
 8007e5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007e62:	f04f 0901 	mov.w	r9, #1
 8007e66:	4623      	mov	r3, r4
 8007e68:	469a      	mov	sl, r3
 8007e6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e6e:	b10a      	cbz	r2, 8007e74 <_svfiprintf_r+0x60>
 8007e70:	2a25      	cmp	r2, #37	@ 0x25
 8007e72:	d1f9      	bne.n	8007e68 <_svfiprintf_r+0x54>
 8007e74:	ebba 0b04 	subs.w	fp, sl, r4
 8007e78:	d00b      	beq.n	8007e92 <_svfiprintf_r+0x7e>
 8007e7a:	465b      	mov	r3, fp
 8007e7c:	4622      	mov	r2, r4
 8007e7e:	4629      	mov	r1, r5
 8007e80:	4638      	mov	r0, r7
 8007e82:	f7ff ff6b 	bl	8007d5c <__ssputs_r>
 8007e86:	3001      	adds	r0, #1
 8007e88:	f000 80a7 	beq.w	8007fda <_svfiprintf_r+0x1c6>
 8007e8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e8e:	445a      	add	r2, fp
 8007e90:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e92:	f89a 3000 	ldrb.w	r3, [sl]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	f000 809f 	beq.w	8007fda <_svfiprintf_r+0x1c6>
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8007ea2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ea6:	f10a 0a01 	add.w	sl, sl, #1
 8007eaa:	9304      	str	r3, [sp, #16]
 8007eac:	9307      	str	r3, [sp, #28]
 8007eae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007eb2:	931a      	str	r3, [sp, #104]	@ 0x68
 8007eb4:	4654      	mov	r4, sl
 8007eb6:	2205      	movs	r2, #5
 8007eb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ebc:	484e      	ldr	r0, [pc, #312]	@ (8007ff8 <_svfiprintf_r+0x1e4>)
 8007ebe:	f7f8 f9a7 	bl	8000210 <memchr>
 8007ec2:	9a04      	ldr	r2, [sp, #16]
 8007ec4:	b9d8      	cbnz	r0, 8007efe <_svfiprintf_r+0xea>
 8007ec6:	06d0      	lsls	r0, r2, #27
 8007ec8:	bf44      	itt	mi
 8007eca:	2320      	movmi	r3, #32
 8007ecc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ed0:	0711      	lsls	r1, r2, #28
 8007ed2:	bf44      	itt	mi
 8007ed4:	232b      	movmi	r3, #43	@ 0x2b
 8007ed6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007eda:	f89a 3000 	ldrb.w	r3, [sl]
 8007ede:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ee0:	d015      	beq.n	8007f0e <_svfiprintf_r+0xfa>
 8007ee2:	9a07      	ldr	r2, [sp, #28]
 8007ee4:	4654      	mov	r4, sl
 8007ee6:	2000      	movs	r0, #0
 8007ee8:	f04f 0c0a 	mov.w	ip, #10
 8007eec:	4621      	mov	r1, r4
 8007eee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ef2:	3b30      	subs	r3, #48	@ 0x30
 8007ef4:	2b09      	cmp	r3, #9
 8007ef6:	d94b      	bls.n	8007f90 <_svfiprintf_r+0x17c>
 8007ef8:	b1b0      	cbz	r0, 8007f28 <_svfiprintf_r+0x114>
 8007efa:	9207      	str	r2, [sp, #28]
 8007efc:	e014      	b.n	8007f28 <_svfiprintf_r+0x114>
 8007efe:	eba0 0308 	sub.w	r3, r0, r8
 8007f02:	fa09 f303 	lsl.w	r3, r9, r3
 8007f06:	4313      	orrs	r3, r2
 8007f08:	9304      	str	r3, [sp, #16]
 8007f0a:	46a2      	mov	sl, r4
 8007f0c:	e7d2      	b.n	8007eb4 <_svfiprintf_r+0xa0>
 8007f0e:	9b03      	ldr	r3, [sp, #12]
 8007f10:	1d19      	adds	r1, r3, #4
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	9103      	str	r1, [sp, #12]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	bfbb      	ittet	lt
 8007f1a:	425b      	neglt	r3, r3
 8007f1c:	f042 0202 	orrlt.w	r2, r2, #2
 8007f20:	9307      	strge	r3, [sp, #28]
 8007f22:	9307      	strlt	r3, [sp, #28]
 8007f24:	bfb8      	it	lt
 8007f26:	9204      	strlt	r2, [sp, #16]
 8007f28:	7823      	ldrb	r3, [r4, #0]
 8007f2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f2c:	d10a      	bne.n	8007f44 <_svfiprintf_r+0x130>
 8007f2e:	7863      	ldrb	r3, [r4, #1]
 8007f30:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f32:	d132      	bne.n	8007f9a <_svfiprintf_r+0x186>
 8007f34:	9b03      	ldr	r3, [sp, #12]
 8007f36:	1d1a      	adds	r2, r3, #4
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	9203      	str	r2, [sp, #12]
 8007f3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007f40:	3402      	adds	r4, #2
 8007f42:	9305      	str	r3, [sp, #20]
 8007f44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008008 <_svfiprintf_r+0x1f4>
 8007f48:	7821      	ldrb	r1, [r4, #0]
 8007f4a:	2203      	movs	r2, #3
 8007f4c:	4650      	mov	r0, sl
 8007f4e:	f7f8 f95f 	bl	8000210 <memchr>
 8007f52:	b138      	cbz	r0, 8007f64 <_svfiprintf_r+0x150>
 8007f54:	9b04      	ldr	r3, [sp, #16]
 8007f56:	eba0 000a 	sub.w	r0, r0, sl
 8007f5a:	2240      	movs	r2, #64	@ 0x40
 8007f5c:	4082      	lsls	r2, r0
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	3401      	adds	r4, #1
 8007f62:	9304      	str	r3, [sp, #16]
 8007f64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f68:	4824      	ldr	r0, [pc, #144]	@ (8007ffc <_svfiprintf_r+0x1e8>)
 8007f6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007f6e:	2206      	movs	r2, #6
 8007f70:	f7f8 f94e 	bl	8000210 <memchr>
 8007f74:	2800      	cmp	r0, #0
 8007f76:	d036      	beq.n	8007fe6 <_svfiprintf_r+0x1d2>
 8007f78:	4b21      	ldr	r3, [pc, #132]	@ (8008000 <_svfiprintf_r+0x1ec>)
 8007f7a:	bb1b      	cbnz	r3, 8007fc4 <_svfiprintf_r+0x1b0>
 8007f7c:	9b03      	ldr	r3, [sp, #12]
 8007f7e:	3307      	adds	r3, #7
 8007f80:	f023 0307 	bic.w	r3, r3, #7
 8007f84:	3308      	adds	r3, #8
 8007f86:	9303      	str	r3, [sp, #12]
 8007f88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f8a:	4433      	add	r3, r6
 8007f8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f8e:	e76a      	b.n	8007e66 <_svfiprintf_r+0x52>
 8007f90:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f94:	460c      	mov	r4, r1
 8007f96:	2001      	movs	r0, #1
 8007f98:	e7a8      	b.n	8007eec <_svfiprintf_r+0xd8>
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	3401      	adds	r4, #1
 8007f9e:	9305      	str	r3, [sp, #20]
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	f04f 0c0a 	mov.w	ip, #10
 8007fa6:	4620      	mov	r0, r4
 8007fa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fac:	3a30      	subs	r2, #48	@ 0x30
 8007fae:	2a09      	cmp	r2, #9
 8007fb0:	d903      	bls.n	8007fba <_svfiprintf_r+0x1a6>
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d0c6      	beq.n	8007f44 <_svfiprintf_r+0x130>
 8007fb6:	9105      	str	r1, [sp, #20]
 8007fb8:	e7c4      	b.n	8007f44 <_svfiprintf_r+0x130>
 8007fba:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fbe:	4604      	mov	r4, r0
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e7f0      	b.n	8007fa6 <_svfiprintf_r+0x192>
 8007fc4:	ab03      	add	r3, sp, #12
 8007fc6:	9300      	str	r3, [sp, #0]
 8007fc8:	462a      	mov	r2, r5
 8007fca:	4b0e      	ldr	r3, [pc, #56]	@ (8008004 <_svfiprintf_r+0x1f0>)
 8007fcc:	a904      	add	r1, sp, #16
 8007fce:	4638      	mov	r0, r7
 8007fd0:	f7fd fe96 	bl	8005d00 <_printf_float>
 8007fd4:	1c42      	adds	r2, r0, #1
 8007fd6:	4606      	mov	r6, r0
 8007fd8:	d1d6      	bne.n	8007f88 <_svfiprintf_r+0x174>
 8007fda:	89ab      	ldrh	r3, [r5, #12]
 8007fdc:	065b      	lsls	r3, r3, #25
 8007fde:	f53f af2d 	bmi.w	8007e3c <_svfiprintf_r+0x28>
 8007fe2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007fe4:	e72c      	b.n	8007e40 <_svfiprintf_r+0x2c>
 8007fe6:	ab03      	add	r3, sp, #12
 8007fe8:	9300      	str	r3, [sp, #0]
 8007fea:	462a      	mov	r2, r5
 8007fec:	4b05      	ldr	r3, [pc, #20]	@ (8008004 <_svfiprintf_r+0x1f0>)
 8007fee:	a904      	add	r1, sp, #16
 8007ff0:	4638      	mov	r0, r7
 8007ff2:	f7fe f91d 	bl	8006230 <_printf_i>
 8007ff6:	e7ed      	b.n	8007fd4 <_svfiprintf_r+0x1c0>
 8007ff8:	08008b38 	.word	0x08008b38
 8007ffc:	08008b42 	.word	0x08008b42
 8008000:	08005d01 	.word	0x08005d01
 8008004:	08007d5d 	.word	0x08007d5d
 8008008:	08008b3e 	.word	0x08008b3e

0800800c <__sflush_r>:
 800800c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008014:	0716      	lsls	r6, r2, #28
 8008016:	4605      	mov	r5, r0
 8008018:	460c      	mov	r4, r1
 800801a:	d454      	bmi.n	80080c6 <__sflush_r+0xba>
 800801c:	684b      	ldr	r3, [r1, #4]
 800801e:	2b00      	cmp	r3, #0
 8008020:	dc02      	bgt.n	8008028 <__sflush_r+0x1c>
 8008022:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008024:	2b00      	cmp	r3, #0
 8008026:	dd48      	ble.n	80080ba <__sflush_r+0xae>
 8008028:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800802a:	2e00      	cmp	r6, #0
 800802c:	d045      	beq.n	80080ba <__sflush_r+0xae>
 800802e:	2300      	movs	r3, #0
 8008030:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008034:	682f      	ldr	r7, [r5, #0]
 8008036:	6a21      	ldr	r1, [r4, #32]
 8008038:	602b      	str	r3, [r5, #0]
 800803a:	d030      	beq.n	800809e <__sflush_r+0x92>
 800803c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800803e:	89a3      	ldrh	r3, [r4, #12]
 8008040:	0759      	lsls	r1, r3, #29
 8008042:	d505      	bpl.n	8008050 <__sflush_r+0x44>
 8008044:	6863      	ldr	r3, [r4, #4]
 8008046:	1ad2      	subs	r2, r2, r3
 8008048:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800804a:	b10b      	cbz	r3, 8008050 <__sflush_r+0x44>
 800804c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800804e:	1ad2      	subs	r2, r2, r3
 8008050:	2300      	movs	r3, #0
 8008052:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008054:	6a21      	ldr	r1, [r4, #32]
 8008056:	4628      	mov	r0, r5
 8008058:	47b0      	blx	r6
 800805a:	1c43      	adds	r3, r0, #1
 800805c:	89a3      	ldrh	r3, [r4, #12]
 800805e:	d106      	bne.n	800806e <__sflush_r+0x62>
 8008060:	6829      	ldr	r1, [r5, #0]
 8008062:	291d      	cmp	r1, #29
 8008064:	d82b      	bhi.n	80080be <__sflush_r+0xb2>
 8008066:	4a2a      	ldr	r2, [pc, #168]	@ (8008110 <__sflush_r+0x104>)
 8008068:	410a      	asrs	r2, r1
 800806a:	07d6      	lsls	r6, r2, #31
 800806c:	d427      	bmi.n	80080be <__sflush_r+0xb2>
 800806e:	2200      	movs	r2, #0
 8008070:	6062      	str	r2, [r4, #4]
 8008072:	04d9      	lsls	r1, r3, #19
 8008074:	6922      	ldr	r2, [r4, #16]
 8008076:	6022      	str	r2, [r4, #0]
 8008078:	d504      	bpl.n	8008084 <__sflush_r+0x78>
 800807a:	1c42      	adds	r2, r0, #1
 800807c:	d101      	bne.n	8008082 <__sflush_r+0x76>
 800807e:	682b      	ldr	r3, [r5, #0]
 8008080:	b903      	cbnz	r3, 8008084 <__sflush_r+0x78>
 8008082:	6560      	str	r0, [r4, #84]	@ 0x54
 8008084:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008086:	602f      	str	r7, [r5, #0]
 8008088:	b1b9      	cbz	r1, 80080ba <__sflush_r+0xae>
 800808a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800808e:	4299      	cmp	r1, r3
 8008090:	d002      	beq.n	8008098 <__sflush_r+0x8c>
 8008092:	4628      	mov	r0, r5
 8008094:	f7ff f9e0 	bl	8007458 <_free_r>
 8008098:	2300      	movs	r3, #0
 800809a:	6363      	str	r3, [r4, #52]	@ 0x34
 800809c:	e00d      	b.n	80080ba <__sflush_r+0xae>
 800809e:	2301      	movs	r3, #1
 80080a0:	4628      	mov	r0, r5
 80080a2:	47b0      	blx	r6
 80080a4:	4602      	mov	r2, r0
 80080a6:	1c50      	adds	r0, r2, #1
 80080a8:	d1c9      	bne.n	800803e <__sflush_r+0x32>
 80080aa:	682b      	ldr	r3, [r5, #0]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d0c6      	beq.n	800803e <__sflush_r+0x32>
 80080b0:	2b1d      	cmp	r3, #29
 80080b2:	d001      	beq.n	80080b8 <__sflush_r+0xac>
 80080b4:	2b16      	cmp	r3, #22
 80080b6:	d11e      	bne.n	80080f6 <__sflush_r+0xea>
 80080b8:	602f      	str	r7, [r5, #0]
 80080ba:	2000      	movs	r0, #0
 80080bc:	e022      	b.n	8008104 <__sflush_r+0xf8>
 80080be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080c2:	b21b      	sxth	r3, r3
 80080c4:	e01b      	b.n	80080fe <__sflush_r+0xf2>
 80080c6:	690f      	ldr	r7, [r1, #16]
 80080c8:	2f00      	cmp	r7, #0
 80080ca:	d0f6      	beq.n	80080ba <__sflush_r+0xae>
 80080cc:	0793      	lsls	r3, r2, #30
 80080ce:	680e      	ldr	r6, [r1, #0]
 80080d0:	bf08      	it	eq
 80080d2:	694b      	ldreq	r3, [r1, #20]
 80080d4:	600f      	str	r7, [r1, #0]
 80080d6:	bf18      	it	ne
 80080d8:	2300      	movne	r3, #0
 80080da:	eba6 0807 	sub.w	r8, r6, r7
 80080de:	608b      	str	r3, [r1, #8]
 80080e0:	f1b8 0f00 	cmp.w	r8, #0
 80080e4:	dde9      	ble.n	80080ba <__sflush_r+0xae>
 80080e6:	6a21      	ldr	r1, [r4, #32]
 80080e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80080ea:	4643      	mov	r3, r8
 80080ec:	463a      	mov	r2, r7
 80080ee:	4628      	mov	r0, r5
 80080f0:	47b0      	blx	r6
 80080f2:	2800      	cmp	r0, #0
 80080f4:	dc08      	bgt.n	8008108 <__sflush_r+0xfc>
 80080f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080fe:	81a3      	strh	r3, [r4, #12]
 8008100:	f04f 30ff 	mov.w	r0, #4294967295
 8008104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008108:	4407      	add	r7, r0
 800810a:	eba8 0800 	sub.w	r8, r8, r0
 800810e:	e7e7      	b.n	80080e0 <__sflush_r+0xd4>
 8008110:	dfbffffe 	.word	0xdfbffffe

08008114 <_fflush_r>:
 8008114:	b538      	push	{r3, r4, r5, lr}
 8008116:	690b      	ldr	r3, [r1, #16]
 8008118:	4605      	mov	r5, r0
 800811a:	460c      	mov	r4, r1
 800811c:	b913      	cbnz	r3, 8008124 <_fflush_r+0x10>
 800811e:	2500      	movs	r5, #0
 8008120:	4628      	mov	r0, r5
 8008122:	bd38      	pop	{r3, r4, r5, pc}
 8008124:	b118      	cbz	r0, 800812e <_fflush_r+0x1a>
 8008126:	6a03      	ldr	r3, [r0, #32]
 8008128:	b90b      	cbnz	r3, 800812e <_fflush_r+0x1a>
 800812a:	f7fe fa2d 	bl	8006588 <__sinit>
 800812e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d0f3      	beq.n	800811e <_fflush_r+0xa>
 8008136:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008138:	07d0      	lsls	r0, r2, #31
 800813a:	d404      	bmi.n	8008146 <_fflush_r+0x32>
 800813c:	0599      	lsls	r1, r3, #22
 800813e:	d402      	bmi.n	8008146 <_fflush_r+0x32>
 8008140:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008142:	f7fe fb38 	bl	80067b6 <__retarget_lock_acquire_recursive>
 8008146:	4628      	mov	r0, r5
 8008148:	4621      	mov	r1, r4
 800814a:	f7ff ff5f 	bl	800800c <__sflush_r>
 800814e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008150:	07da      	lsls	r2, r3, #31
 8008152:	4605      	mov	r5, r0
 8008154:	d4e4      	bmi.n	8008120 <_fflush_r+0xc>
 8008156:	89a3      	ldrh	r3, [r4, #12]
 8008158:	059b      	lsls	r3, r3, #22
 800815a:	d4e1      	bmi.n	8008120 <_fflush_r+0xc>
 800815c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800815e:	f7fe fb2b 	bl	80067b8 <__retarget_lock_release_recursive>
 8008162:	e7dd      	b.n	8008120 <_fflush_r+0xc>

08008164 <memmove>:
 8008164:	4288      	cmp	r0, r1
 8008166:	b510      	push	{r4, lr}
 8008168:	eb01 0402 	add.w	r4, r1, r2
 800816c:	d902      	bls.n	8008174 <memmove+0x10>
 800816e:	4284      	cmp	r4, r0
 8008170:	4623      	mov	r3, r4
 8008172:	d807      	bhi.n	8008184 <memmove+0x20>
 8008174:	1e43      	subs	r3, r0, #1
 8008176:	42a1      	cmp	r1, r4
 8008178:	d008      	beq.n	800818c <memmove+0x28>
 800817a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800817e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008182:	e7f8      	b.n	8008176 <memmove+0x12>
 8008184:	4402      	add	r2, r0
 8008186:	4601      	mov	r1, r0
 8008188:	428a      	cmp	r2, r1
 800818a:	d100      	bne.n	800818e <memmove+0x2a>
 800818c:	bd10      	pop	{r4, pc}
 800818e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008192:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008196:	e7f7      	b.n	8008188 <memmove+0x24>

08008198 <_sbrk_r>:
 8008198:	b538      	push	{r3, r4, r5, lr}
 800819a:	4d06      	ldr	r5, [pc, #24]	@ (80081b4 <_sbrk_r+0x1c>)
 800819c:	2300      	movs	r3, #0
 800819e:	4604      	mov	r4, r0
 80081a0:	4608      	mov	r0, r1
 80081a2:	602b      	str	r3, [r5, #0]
 80081a4:	f7fa fa9a 	bl	80026dc <_sbrk>
 80081a8:	1c43      	adds	r3, r0, #1
 80081aa:	d102      	bne.n	80081b2 <_sbrk_r+0x1a>
 80081ac:	682b      	ldr	r3, [r5, #0]
 80081ae:	b103      	cbz	r3, 80081b2 <_sbrk_r+0x1a>
 80081b0:	6023      	str	r3, [r4, #0]
 80081b2:	bd38      	pop	{r3, r4, r5, pc}
 80081b4:	20000574 	.word	0x20000574

080081b8 <memcpy>:
 80081b8:	440a      	add	r2, r1
 80081ba:	4291      	cmp	r1, r2
 80081bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80081c0:	d100      	bne.n	80081c4 <memcpy+0xc>
 80081c2:	4770      	bx	lr
 80081c4:	b510      	push	{r4, lr}
 80081c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081ce:	4291      	cmp	r1, r2
 80081d0:	d1f9      	bne.n	80081c6 <memcpy+0xe>
 80081d2:	bd10      	pop	{r4, pc}

080081d4 <__assert_func>:
 80081d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80081d6:	4614      	mov	r4, r2
 80081d8:	461a      	mov	r2, r3
 80081da:	4b09      	ldr	r3, [pc, #36]	@ (8008200 <__assert_func+0x2c>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4605      	mov	r5, r0
 80081e0:	68d8      	ldr	r0, [r3, #12]
 80081e2:	b954      	cbnz	r4, 80081fa <__assert_func+0x26>
 80081e4:	4b07      	ldr	r3, [pc, #28]	@ (8008204 <__assert_func+0x30>)
 80081e6:	461c      	mov	r4, r3
 80081e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80081ec:	9100      	str	r1, [sp, #0]
 80081ee:	462b      	mov	r3, r5
 80081f0:	4905      	ldr	r1, [pc, #20]	@ (8008208 <__assert_func+0x34>)
 80081f2:	f000 f86f 	bl	80082d4 <fiprintf>
 80081f6:	f000 f87f 	bl	80082f8 <abort>
 80081fa:	4b04      	ldr	r3, [pc, #16]	@ (800820c <__assert_func+0x38>)
 80081fc:	e7f4      	b.n	80081e8 <__assert_func+0x14>
 80081fe:	bf00      	nop
 8008200:	2000002c 	.word	0x2000002c
 8008204:	08008b8e 	.word	0x08008b8e
 8008208:	08008b60 	.word	0x08008b60
 800820c:	08008b53 	.word	0x08008b53

08008210 <_calloc_r>:
 8008210:	b570      	push	{r4, r5, r6, lr}
 8008212:	fba1 5402 	umull	r5, r4, r1, r2
 8008216:	b93c      	cbnz	r4, 8008228 <_calloc_r+0x18>
 8008218:	4629      	mov	r1, r5
 800821a:	f7ff f991 	bl	8007540 <_malloc_r>
 800821e:	4606      	mov	r6, r0
 8008220:	b928      	cbnz	r0, 800822e <_calloc_r+0x1e>
 8008222:	2600      	movs	r6, #0
 8008224:	4630      	mov	r0, r6
 8008226:	bd70      	pop	{r4, r5, r6, pc}
 8008228:	220c      	movs	r2, #12
 800822a:	6002      	str	r2, [r0, #0]
 800822c:	e7f9      	b.n	8008222 <_calloc_r+0x12>
 800822e:	462a      	mov	r2, r5
 8008230:	4621      	mov	r1, r4
 8008232:	f7fe fa42 	bl	80066ba <memset>
 8008236:	e7f5      	b.n	8008224 <_calloc_r+0x14>

08008238 <__ascii_mbtowc>:
 8008238:	b082      	sub	sp, #8
 800823a:	b901      	cbnz	r1, 800823e <__ascii_mbtowc+0x6>
 800823c:	a901      	add	r1, sp, #4
 800823e:	b142      	cbz	r2, 8008252 <__ascii_mbtowc+0x1a>
 8008240:	b14b      	cbz	r3, 8008256 <__ascii_mbtowc+0x1e>
 8008242:	7813      	ldrb	r3, [r2, #0]
 8008244:	600b      	str	r3, [r1, #0]
 8008246:	7812      	ldrb	r2, [r2, #0]
 8008248:	1e10      	subs	r0, r2, #0
 800824a:	bf18      	it	ne
 800824c:	2001      	movne	r0, #1
 800824e:	b002      	add	sp, #8
 8008250:	4770      	bx	lr
 8008252:	4610      	mov	r0, r2
 8008254:	e7fb      	b.n	800824e <__ascii_mbtowc+0x16>
 8008256:	f06f 0001 	mvn.w	r0, #1
 800825a:	e7f8      	b.n	800824e <__ascii_mbtowc+0x16>

0800825c <_realloc_r>:
 800825c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008260:	4680      	mov	r8, r0
 8008262:	4615      	mov	r5, r2
 8008264:	460c      	mov	r4, r1
 8008266:	b921      	cbnz	r1, 8008272 <_realloc_r+0x16>
 8008268:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800826c:	4611      	mov	r1, r2
 800826e:	f7ff b967 	b.w	8007540 <_malloc_r>
 8008272:	b92a      	cbnz	r2, 8008280 <_realloc_r+0x24>
 8008274:	f7ff f8f0 	bl	8007458 <_free_r>
 8008278:	2400      	movs	r4, #0
 800827a:	4620      	mov	r0, r4
 800827c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008280:	f000 f841 	bl	8008306 <_malloc_usable_size_r>
 8008284:	4285      	cmp	r5, r0
 8008286:	4606      	mov	r6, r0
 8008288:	d802      	bhi.n	8008290 <_realloc_r+0x34>
 800828a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800828e:	d8f4      	bhi.n	800827a <_realloc_r+0x1e>
 8008290:	4629      	mov	r1, r5
 8008292:	4640      	mov	r0, r8
 8008294:	f7ff f954 	bl	8007540 <_malloc_r>
 8008298:	4607      	mov	r7, r0
 800829a:	2800      	cmp	r0, #0
 800829c:	d0ec      	beq.n	8008278 <_realloc_r+0x1c>
 800829e:	42b5      	cmp	r5, r6
 80082a0:	462a      	mov	r2, r5
 80082a2:	4621      	mov	r1, r4
 80082a4:	bf28      	it	cs
 80082a6:	4632      	movcs	r2, r6
 80082a8:	f7ff ff86 	bl	80081b8 <memcpy>
 80082ac:	4621      	mov	r1, r4
 80082ae:	4640      	mov	r0, r8
 80082b0:	f7ff f8d2 	bl	8007458 <_free_r>
 80082b4:	463c      	mov	r4, r7
 80082b6:	e7e0      	b.n	800827a <_realloc_r+0x1e>

080082b8 <__ascii_wctomb>:
 80082b8:	4603      	mov	r3, r0
 80082ba:	4608      	mov	r0, r1
 80082bc:	b141      	cbz	r1, 80082d0 <__ascii_wctomb+0x18>
 80082be:	2aff      	cmp	r2, #255	@ 0xff
 80082c0:	d904      	bls.n	80082cc <__ascii_wctomb+0x14>
 80082c2:	228a      	movs	r2, #138	@ 0x8a
 80082c4:	601a      	str	r2, [r3, #0]
 80082c6:	f04f 30ff 	mov.w	r0, #4294967295
 80082ca:	4770      	bx	lr
 80082cc:	700a      	strb	r2, [r1, #0]
 80082ce:	2001      	movs	r0, #1
 80082d0:	4770      	bx	lr
	...

080082d4 <fiprintf>:
 80082d4:	b40e      	push	{r1, r2, r3}
 80082d6:	b503      	push	{r0, r1, lr}
 80082d8:	4601      	mov	r1, r0
 80082da:	ab03      	add	r3, sp, #12
 80082dc:	4805      	ldr	r0, [pc, #20]	@ (80082f4 <fiprintf+0x20>)
 80082de:	f853 2b04 	ldr.w	r2, [r3], #4
 80082e2:	6800      	ldr	r0, [r0, #0]
 80082e4:	9301      	str	r3, [sp, #4]
 80082e6:	f000 f83f 	bl	8008368 <_vfiprintf_r>
 80082ea:	b002      	add	sp, #8
 80082ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80082f0:	b003      	add	sp, #12
 80082f2:	4770      	bx	lr
 80082f4:	2000002c 	.word	0x2000002c

080082f8 <abort>:
 80082f8:	b508      	push	{r3, lr}
 80082fa:	2006      	movs	r0, #6
 80082fc:	f000 fa08 	bl	8008710 <raise>
 8008300:	2001      	movs	r0, #1
 8008302:	f7fa f972 	bl	80025ea <_exit>

08008306 <_malloc_usable_size_r>:
 8008306:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800830a:	1f18      	subs	r0, r3, #4
 800830c:	2b00      	cmp	r3, #0
 800830e:	bfbc      	itt	lt
 8008310:	580b      	ldrlt	r3, [r1, r0]
 8008312:	18c0      	addlt	r0, r0, r3
 8008314:	4770      	bx	lr

08008316 <__sfputc_r>:
 8008316:	6893      	ldr	r3, [r2, #8]
 8008318:	3b01      	subs	r3, #1
 800831a:	2b00      	cmp	r3, #0
 800831c:	b410      	push	{r4}
 800831e:	6093      	str	r3, [r2, #8]
 8008320:	da08      	bge.n	8008334 <__sfputc_r+0x1e>
 8008322:	6994      	ldr	r4, [r2, #24]
 8008324:	42a3      	cmp	r3, r4
 8008326:	db01      	blt.n	800832c <__sfputc_r+0x16>
 8008328:	290a      	cmp	r1, #10
 800832a:	d103      	bne.n	8008334 <__sfputc_r+0x1e>
 800832c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008330:	f000 b932 	b.w	8008598 <__swbuf_r>
 8008334:	6813      	ldr	r3, [r2, #0]
 8008336:	1c58      	adds	r0, r3, #1
 8008338:	6010      	str	r0, [r2, #0]
 800833a:	7019      	strb	r1, [r3, #0]
 800833c:	4608      	mov	r0, r1
 800833e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008342:	4770      	bx	lr

08008344 <__sfputs_r>:
 8008344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008346:	4606      	mov	r6, r0
 8008348:	460f      	mov	r7, r1
 800834a:	4614      	mov	r4, r2
 800834c:	18d5      	adds	r5, r2, r3
 800834e:	42ac      	cmp	r4, r5
 8008350:	d101      	bne.n	8008356 <__sfputs_r+0x12>
 8008352:	2000      	movs	r0, #0
 8008354:	e007      	b.n	8008366 <__sfputs_r+0x22>
 8008356:	f814 1b01 	ldrb.w	r1, [r4], #1
 800835a:	463a      	mov	r2, r7
 800835c:	4630      	mov	r0, r6
 800835e:	f7ff ffda 	bl	8008316 <__sfputc_r>
 8008362:	1c43      	adds	r3, r0, #1
 8008364:	d1f3      	bne.n	800834e <__sfputs_r+0xa>
 8008366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008368 <_vfiprintf_r>:
 8008368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800836c:	460d      	mov	r5, r1
 800836e:	b09d      	sub	sp, #116	@ 0x74
 8008370:	4614      	mov	r4, r2
 8008372:	4698      	mov	r8, r3
 8008374:	4606      	mov	r6, r0
 8008376:	b118      	cbz	r0, 8008380 <_vfiprintf_r+0x18>
 8008378:	6a03      	ldr	r3, [r0, #32]
 800837a:	b90b      	cbnz	r3, 8008380 <_vfiprintf_r+0x18>
 800837c:	f7fe f904 	bl	8006588 <__sinit>
 8008380:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008382:	07d9      	lsls	r1, r3, #31
 8008384:	d405      	bmi.n	8008392 <_vfiprintf_r+0x2a>
 8008386:	89ab      	ldrh	r3, [r5, #12]
 8008388:	059a      	lsls	r2, r3, #22
 800838a:	d402      	bmi.n	8008392 <_vfiprintf_r+0x2a>
 800838c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800838e:	f7fe fa12 	bl	80067b6 <__retarget_lock_acquire_recursive>
 8008392:	89ab      	ldrh	r3, [r5, #12]
 8008394:	071b      	lsls	r3, r3, #28
 8008396:	d501      	bpl.n	800839c <_vfiprintf_r+0x34>
 8008398:	692b      	ldr	r3, [r5, #16]
 800839a:	b99b      	cbnz	r3, 80083c4 <_vfiprintf_r+0x5c>
 800839c:	4629      	mov	r1, r5
 800839e:	4630      	mov	r0, r6
 80083a0:	f000 f938 	bl	8008614 <__swsetup_r>
 80083a4:	b170      	cbz	r0, 80083c4 <_vfiprintf_r+0x5c>
 80083a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083a8:	07dc      	lsls	r4, r3, #31
 80083aa:	d504      	bpl.n	80083b6 <_vfiprintf_r+0x4e>
 80083ac:	f04f 30ff 	mov.w	r0, #4294967295
 80083b0:	b01d      	add	sp, #116	@ 0x74
 80083b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083b6:	89ab      	ldrh	r3, [r5, #12]
 80083b8:	0598      	lsls	r0, r3, #22
 80083ba:	d4f7      	bmi.n	80083ac <_vfiprintf_r+0x44>
 80083bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083be:	f7fe f9fb 	bl	80067b8 <__retarget_lock_release_recursive>
 80083c2:	e7f3      	b.n	80083ac <_vfiprintf_r+0x44>
 80083c4:	2300      	movs	r3, #0
 80083c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80083c8:	2320      	movs	r3, #32
 80083ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80083ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80083d2:	2330      	movs	r3, #48	@ 0x30
 80083d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008584 <_vfiprintf_r+0x21c>
 80083d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80083dc:	f04f 0901 	mov.w	r9, #1
 80083e0:	4623      	mov	r3, r4
 80083e2:	469a      	mov	sl, r3
 80083e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083e8:	b10a      	cbz	r2, 80083ee <_vfiprintf_r+0x86>
 80083ea:	2a25      	cmp	r2, #37	@ 0x25
 80083ec:	d1f9      	bne.n	80083e2 <_vfiprintf_r+0x7a>
 80083ee:	ebba 0b04 	subs.w	fp, sl, r4
 80083f2:	d00b      	beq.n	800840c <_vfiprintf_r+0xa4>
 80083f4:	465b      	mov	r3, fp
 80083f6:	4622      	mov	r2, r4
 80083f8:	4629      	mov	r1, r5
 80083fa:	4630      	mov	r0, r6
 80083fc:	f7ff ffa2 	bl	8008344 <__sfputs_r>
 8008400:	3001      	adds	r0, #1
 8008402:	f000 80a7 	beq.w	8008554 <_vfiprintf_r+0x1ec>
 8008406:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008408:	445a      	add	r2, fp
 800840a:	9209      	str	r2, [sp, #36]	@ 0x24
 800840c:	f89a 3000 	ldrb.w	r3, [sl]
 8008410:	2b00      	cmp	r3, #0
 8008412:	f000 809f 	beq.w	8008554 <_vfiprintf_r+0x1ec>
 8008416:	2300      	movs	r3, #0
 8008418:	f04f 32ff 	mov.w	r2, #4294967295
 800841c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008420:	f10a 0a01 	add.w	sl, sl, #1
 8008424:	9304      	str	r3, [sp, #16]
 8008426:	9307      	str	r3, [sp, #28]
 8008428:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800842c:	931a      	str	r3, [sp, #104]	@ 0x68
 800842e:	4654      	mov	r4, sl
 8008430:	2205      	movs	r2, #5
 8008432:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008436:	4853      	ldr	r0, [pc, #332]	@ (8008584 <_vfiprintf_r+0x21c>)
 8008438:	f7f7 feea 	bl	8000210 <memchr>
 800843c:	9a04      	ldr	r2, [sp, #16]
 800843e:	b9d8      	cbnz	r0, 8008478 <_vfiprintf_r+0x110>
 8008440:	06d1      	lsls	r1, r2, #27
 8008442:	bf44      	itt	mi
 8008444:	2320      	movmi	r3, #32
 8008446:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800844a:	0713      	lsls	r3, r2, #28
 800844c:	bf44      	itt	mi
 800844e:	232b      	movmi	r3, #43	@ 0x2b
 8008450:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008454:	f89a 3000 	ldrb.w	r3, [sl]
 8008458:	2b2a      	cmp	r3, #42	@ 0x2a
 800845a:	d015      	beq.n	8008488 <_vfiprintf_r+0x120>
 800845c:	9a07      	ldr	r2, [sp, #28]
 800845e:	4654      	mov	r4, sl
 8008460:	2000      	movs	r0, #0
 8008462:	f04f 0c0a 	mov.w	ip, #10
 8008466:	4621      	mov	r1, r4
 8008468:	f811 3b01 	ldrb.w	r3, [r1], #1
 800846c:	3b30      	subs	r3, #48	@ 0x30
 800846e:	2b09      	cmp	r3, #9
 8008470:	d94b      	bls.n	800850a <_vfiprintf_r+0x1a2>
 8008472:	b1b0      	cbz	r0, 80084a2 <_vfiprintf_r+0x13a>
 8008474:	9207      	str	r2, [sp, #28]
 8008476:	e014      	b.n	80084a2 <_vfiprintf_r+0x13a>
 8008478:	eba0 0308 	sub.w	r3, r0, r8
 800847c:	fa09 f303 	lsl.w	r3, r9, r3
 8008480:	4313      	orrs	r3, r2
 8008482:	9304      	str	r3, [sp, #16]
 8008484:	46a2      	mov	sl, r4
 8008486:	e7d2      	b.n	800842e <_vfiprintf_r+0xc6>
 8008488:	9b03      	ldr	r3, [sp, #12]
 800848a:	1d19      	adds	r1, r3, #4
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	9103      	str	r1, [sp, #12]
 8008490:	2b00      	cmp	r3, #0
 8008492:	bfbb      	ittet	lt
 8008494:	425b      	neglt	r3, r3
 8008496:	f042 0202 	orrlt.w	r2, r2, #2
 800849a:	9307      	strge	r3, [sp, #28]
 800849c:	9307      	strlt	r3, [sp, #28]
 800849e:	bfb8      	it	lt
 80084a0:	9204      	strlt	r2, [sp, #16]
 80084a2:	7823      	ldrb	r3, [r4, #0]
 80084a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80084a6:	d10a      	bne.n	80084be <_vfiprintf_r+0x156>
 80084a8:	7863      	ldrb	r3, [r4, #1]
 80084aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80084ac:	d132      	bne.n	8008514 <_vfiprintf_r+0x1ac>
 80084ae:	9b03      	ldr	r3, [sp, #12]
 80084b0:	1d1a      	adds	r2, r3, #4
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	9203      	str	r2, [sp, #12]
 80084b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80084ba:	3402      	adds	r4, #2
 80084bc:	9305      	str	r3, [sp, #20]
 80084be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008594 <_vfiprintf_r+0x22c>
 80084c2:	7821      	ldrb	r1, [r4, #0]
 80084c4:	2203      	movs	r2, #3
 80084c6:	4650      	mov	r0, sl
 80084c8:	f7f7 fea2 	bl	8000210 <memchr>
 80084cc:	b138      	cbz	r0, 80084de <_vfiprintf_r+0x176>
 80084ce:	9b04      	ldr	r3, [sp, #16]
 80084d0:	eba0 000a 	sub.w	r0, r0, sl
 80084d4:	2240      	movs	r2, #64	@ 0x40
 80084d6:	4082      	lsls	r2, r0
 80084d8:	4313      	orrs	r3, r2
 80084da:	3401      	adds	r4, #1
 80084dc:	9304      	str	r3, [sp, #16]
 80084de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084e2:	4829      	ldr	r0, [pc, #164]	@ (8008588 <_vfiprintf_r+0x220>)
 80084e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80084e8:	2206      	movs	r2, #6
 80084ea:	f7f7 fe91 	bl	8000210 <memchr>
 80084ee:	2800      	cmp	r0, #0
 80084f0:	d03f      	beq.n	8008572 <_vfiprintf_r+0x20a>
 80084f2:	4b26      	ldr	r3, [pc, #152]	@ (800858c <_vfiprintf_r+0x224>)
 80084f4:	bb1b      	cbnz	r3, 800853e <_vfiprintf_r+0x1d6>
 80084f6:	9b03      	ldr	r3, [sp, #12]
 80084f8:	3307      	adds	r3, #7
 80084fa:	f023 0307 	bic.w	r3, r3, #7
 80084fe:	3308      	adds	r3, #8
 8008500:	9303      	str	r3, [sp, #12]
 8008502:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008504:	443b      	add	r3, r7
 8008506:	9309      	str	r3, [sp, #36]	@ 0x24
 8008508:	e76a      	b.n	80083e0 <_vfiprintf_r+0x78>
 800850a:	fb0c 3202 	mla	r2, ip, r2, r3
 800850e:	460c      	mov	r4, r1
 8008510:	2001      	movs	r0, #1
 8008512:	e7a8      	b.n	8008466 <_vfiprintf_r+0xfe>
 8008514:	2300      	movs	r3, #0
 8008516:	3401      	adds	r4, #1
 8008518:	9305      	str	r3, [sp, #20]
 800851a:	4619      	mov	r1, r3
 800851c:	f04f 0c0a 	mov.w	ip, #10
 8008520:	4620      	mov	r0, r4
 8008522:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008526:	3a30      	subs	r2, #48	@ 0x30
 8008528:	2a09      	cmp	r2, #9
 800852a:	d903      	bls.n	8008534 <_vfiprintf_r+0x1cc>
 800852c:	2b00      	cmp	r3, #0
 800852e:	d0c6      	beq.n	80084be <_vfiprintf_r+0x156>
 8008530:	9105      	str	r1, [sp, #20]
 8008532:	e7c4      	b.n	80084be <_vfiprintf_r+0x156>
 8008534:	fb0c 2101 	mla	r1, ip, r1, r2
 8008538:	4604      	mov	r4, r0
 800853a:	2301      	movs	r3, #1
 800853c:	e7f0      	b.n	8008520 <_vfiprintf_r+0x1b8>
 800853e:	ab03      	add	r3, sp, #12
 8008540:	9300      	str	r3, [sp, #0]
 8008542:	462a      	mov	r2, r5
 8008544:	4b12      	ldr	r3, [pc, #72]	@ (8008590 <_vfiprintf_r+0x228>)
 8008546:	a904      	add	r1, sp, #16
 8008548:	4630      	mov	r0, r6
 800854a:	f7fd fbd9 	bl	8005d00 <_printf_float>
 800854e:	4607      	mov	r7, r0
 8008550:	1c78      	adds	r0, r7, #1
 8008552:	d1d6      	bne.n	8008502 <_vfiprintf_r+0x19a>
 8008554:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008556:	07d9      	lsls	r1, r3, #31
 8008558:	d405      	bmi.n	8008566 <_vfiprintf_r+0x1fe>
 800855a:	89ab      	ldrh	r3, [r5, #12]
 800855c:	059a      	lsls	r2, r3, #22
 800855e:	d402      	bmi.n	8008566 <_vfiprintf_r+0x1fe>
 8008560:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008562:	f7fe f929 	bl	80067b8 <__retarget_lock_release_recursive>
 8008566:	89ab      	ldrh	r3, [r5, #12]
 8008568:	065b      	lsls	r3, r3, #25
 800856a:	f53f af1f 	bmi.w	80083ac <_vfiprintf_r+0x44>
 800856e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008570:	e71e      	b.n	80083b0 <_vfiprintf_r+0x48>
 8008572:	ab03      	add	r3, sp, #12
 8008574:	9300      	str	r3, [sp, #0]
 8008576:	462a      	mov	r2, r5
 8008578:	4b05      	ldr	r3, [pc, #20]	@ (8008590 <_vfiprintf_r+0x228>)
 800857a:	a904      	add	r1, sp, #16
 800857c:	4630      	mov	r0, r6
 800857e:	f7fd fe57 	bl	8006230 <_printf_i>
 8008582:	e7e4      	b.n	800854e <_vfiprintf_r+0x1e6>
 8008584:	08008b38 	.word	0x08008b38
 8008588:	08008b42 	.word	0x08008b42
 800858c:	08005d01 	.word	0x08005d01
 8008590:	08008345 	.word	0x08008345
 8008594:	08008b3e 	.word	0x08008b3e

08008598 <__swbuf_r>:
 8008598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800859a:	460e      	mov	r6, r1
 800859c:	4614      	mov	r4, r2
 800859e:	4605      	mov	r5, r0
 80085a0:	b118      	cbz	r0, 80085aa <__swbuf_r+0x12>
 80085a2:	6a03      	ldr	r3, [r0, #32]
 80085a4:	b90b      	cbnz	r3, 80085aa <__swbuf_r+0x12>
 80085a6:	f7fd ffef 	bl	8006588 <__sinit>
 80085aa:	69a3      	ldr	r3, [r4, #24]
 80085ac:	60a3      	str	r3, [r4, #8]
 80085ae:	89a3      	ldrh	r3, [r4, #12]
 80085b0:	071a      	lsls	r2, r3, #28
 80085b2:	d501      	bpl.n	80085b8 <__swbuf_r+0x20>
 80085b4:	6923      	ldr	r3, [r4, #16]
 80085b6:	b943      	cbnz	r3, 80085ca <__swbuf_r+0x32>
 80085b8:	4621      	mov	r1, r4
 80085ba:	4628      	mov	r0, r5
 80085bc:	f000 f82a 	bl	8008614 <__swsetup_r>
 80085c0:	b118      	cbz	r0, 80085ca <__swbuf_r+0x32>
 80085c2:	f04f 37ff 	mov.w	r7, #4294967295
 80085c6:	4638      	mov	r0, r7
 80085c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085ca:	6823      	ldr	r3, [r4, #0]
 80085cc:	6922      	ldr	r2, [r4, #16]
 80085ce:	1a98      	subs	r0, r3, r2
 80085d0:	6963      	ldr	r3, [r4, #20]
 80085d2:	b2f6      	uxtb	r6, r6
 80085d4:	4283      	cmp	r3, r0
 80085d6:	4637      	mov	r7, r6
 80085d8:	dc05      	bgt.n	80085e6 <__swbuf_r+0x4e>
 80085da:	4621      	mov	r1, r4
 80085dc:	4628      	mov	r0, r5
 80085de:	f7ff fd99 	bl	8008114 <_fflush_r>
 80085e2:	2800      	cmp	r0, #0
 80085e4:	d1ed      	bne.n	80085c2 <__swbuf_r+0x2a>
 80085e6:	68a3      	ldr	r3, [r4, #8]
 80085e8:	3b01      	subs	r3, #1
 80085ea:	60a3      	str	r3, [r4, #8]
 80085ec:	6823      	ldr	r3, [r4, #0]
 80085ee:	1c5a      	adds	r2, r3, #1
 80085f0:	6022      	str	r2, [r4, #0]
 80085f2:	701e      	strb	r6, [r3, #0]
 80085f4:	6962      	ldr	r2, [r4, #20]
 80085f6:	1c43      	adds	r3, r0, #1
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d004      	beq.n	8008606 <__swbuf_r+0x6e>
 80085fc:	89a3      	ldrh	r3, [r4, #12]
 80085fe:	07db      	lsls	r3, r3, #31
 8008600:	d5e1      	bpl.n	80085c6 <__swbuf_r+0x2e>
 8008602:	2e0a      	cmp	r6, #10
 8008604:	d1df      	bne.n	80085c6 <__swbuf_r+0x2e>
 8008606:	4621      	mov	r1, r4
 8008608:	4628      	mov	r0, r5
 800860a:	f7ff fd83 	bl	8008114 <_fflush_r>
 800860e:	2800      	cmp	r0, #0
 8008610:	d0d9      	beq.n	80085c6 <__swbuf_r+0x2e>
 8008612:	e7d6      	b.n	80085c2 <__swbuf_r+0x2a>

08008614 <__swsetup_r>:
 8008614:	b538      	push	{r3, r4, r5, lr}
 8008616:	4b29      	ldr	r3, [pc, #164]	@ (80086bc <__swsetup_r+0xa8>)
 8008618:	4605      	mov	r5, r0
 800861a:	6818      	ldr	r0, [r3, #0]
 800861c:	460c      	mov	r4, r1
 800861e:	b118      	cbz	r0, 8008628 <__swsetup_r+0x14>
 8008620:	6a03      	ldr	r3, [r0, #32]
 8008622:	b90b      	cbnz	r3, 8008628 <__swsetup_r+0x14>
 8008624:	f7fd ffb0 	bl	8006588 <__sinit>
 8008628:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800862c:	0719      	lsls	r1, r3, #28
 800862e:	d422      	bmi.n	8008676 <__swsetup_r+0x62>
 8008630:	06da      	lsls	r2, r3, #27
 8008632:	d407      	bmi.n	8008644 <__swsetup_r+0x30>
 8008634:	2209      	movs	r2, #9
 8008636:	602a      	str	r2, [r5, #0]
 8008638:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800863c:	81a3      	strh	r3, [r4, #12]
 800863e:	f04f 30ff 	mov.w	r0, #4294967295
 8008642:	e033      	b.n	80086ac <__swsetup_r+0x98>
 8008644:	0758      	lsls	r0, r3, #29
 8008646:	d512      	bpl.n	800866e <__swsetup_r+0x5a>
 8008648:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800864a:	b141      	cbz	r1, 800865e <__swsetup_r+0x4a>
 800864c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008650:	4299      	cmp	r1, r3
 8008652:	d002      	beq.n	800865a <__swsetup_r+0x46>
 8008654:	4628      	mov	r0, r5
 8008656:	f7fe feff 	bl	8007458 <_free_r>
 800865a:	2300      	movs	r3, #0
 800865c:	6363      	str	r3, [r4, #52]	@ 0x34
 800865e:	89a3      	ldrh	r3, [r4, #12]
 8008660:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008664:	81a3      	strh	r3, [r4, #12]
 8008666:	2300      	movs	r3, #0
 8008668:	6063      	str	r3, [r4, #4]
 800866a:	6923      	ldr	r3, [r4, #16]
 800866c:	6023      	str	r3, [r4, #0]
 800866e:	89a3      	ldrh	r3, [r4, #12]
 8008670:	f043 0308 	orr.w	r3, r3, #8
 8008674:	81a3      	strh	r3, [r4, #12]
 8008676:	6923      	ldr	r3, [r4, #16]
 8008678:	b94b      	cbnz	r3, 800868e <__swsetup_r+0x7a>
 800867a:	89a3      	ldrh	r3, [r4, #12]
 800867c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008680:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008684:	d003      	beq.n	800868e <__swsetup_r+0x7a>
 8008686:	4621      	mov	r1, r4
 8008688:	4628      	mov	r0, r5
 800868a:	f000 f883 	bl	8008794 <__smakebuf_r>
 800868e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008692:	f013 0201 	ands.w	r2, r3, #1
 8008696:	d00a      	beq.n	80086ae <__swsetup_r+0x9a>
 8008698:	2200      	movs	r2, #0
 800869a:	60a2      	str	r2, [r4, #8]
 800869c:	6962      	ldr	r2, [r4, #20]
 800869e:	4252      	negs	r2, r2
 80086a0:	61a2      	str	r2, [r4, #24]
 80086a2:	6922      	ldr	r2, [r4, #16]
 80086a4:	b942      	cbnz	r2, 80086b8 <__swsetup_r+0xa4>
 80086a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80086aa:	d1c5      	bne.n	8008638 <__swsetup_r+0x24>
 80086ac:	bd38      	pop	{r3, r4, r5, pc}
 80086ae:	0799      	lsls	r1, r3, #30
 80086b0:	bf58      	it	pl
 80086b2:	6962      	ldrpl	r2, [r4, #20]
 80086b4:	60a2      	str	r2, [r4, #8]
 80086b6:	e7f4      	b.n	80086a2 <__swsetup_r+0x8e>
 80086b8:	2000      	movs	r0, #0
 80086ba:	e7f7      	b.n	80086ac <__swsetup_r+0x98>
 80086bc:	2000002c 	.word	0x2000002c

080086c0 <_raise_r>:
 80086c0:	291f      	cmp	r1, #31
 80086c2:	b538      	push	{r3, r4, r5, lr}
 80086c4:	4605      	mov	r5, r0
 80086c6:	460c      	mov	r4, r1
 80086c8:	d904      	bls.n	80086d4 <_raise_r+0x14>
 80086ca:	2316      	movs	r3, #22
 80086cc:	6003      	str	r3, [r0, #0]
 80086ce:	f04f 30ff 	mov.w	r0, #4294967295
 80086d2:	bd38      	pop	{r3, r4, r5, pc}
 80086d4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80086d6:	b112      	cbz	r2, 80086de <_raise_r+0x1e>
 80086d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80086dc:	b94b      	cbnz	r3, 80086f2 <_raise_r+0x32>
 80086de:	4628      	mov	r0, r5
 80086e0:	f000 f830 	bl	8008744 <_getpid_r>
 80086e4:	4622      	mov	r2, r4
 80086e6:	4601      	mov	r1, r0
 80086e8:	4628      	mov	r0, r5
 80086ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086ee:	f000 b817 	b.w	8008720 <_kill_r>
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	d00a      	beq.n	800870c <_raise_r+0x4c>
 80086f6:	1c59      	adds	r1, r3, #1
 80086f8:	d103      	bne.n	8008702 <_raise_r+0x42>
 80086fa:	2316      	movs	r3, #22
 80086fc:	6003      	str	r3, [r0, #0]
 80086fe:	2001      	movs	r0, #1
 8008700:	e7e7      	b.n	80086d2 <_raise_r+0x12>
 8008702:	2100      	movs	r1, #0
 8008704:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008708:	4620      	mov	r0, r4
 800870a:	4798      	blx	r3
 800870c:	2000      	movs	r0, #0
 800870e:	e7e0      	b.n	80086d2 <_raise_r+0x12>

08008710 <raise>:
 8008710:	4b02      	ldr	r3, [pc, #8]	@ (800871c <raise+0xc>)
 8008712:	4601      	mov	r1, r0
 8008714:	6818      	ldr	r0, [r3, #0]
 8008716:	f7ff bfd3 	b.w	80086c0 <_raise_r>
 800871a:	bf00      	nop
 800871c:	2000002c 	.word	0x2000002c

08008720 <_kill_r>:
 8008720:	b538      	push	{r3, r4, r5, lr}
 8008722:	4d07      	ldr	r5, [pc, #28]	@ (8008740 <_kill_r+0x20>)
 8008724:	2300      	movs	r3, #0
 8008726:	4604      	mov	r4, r0
 8008728:	4608      	mov	r0, r1
 800872a:	4611      	mov	r1, r2
 800872c:	602b      	str	r3, [r5, #0]
 800872e:	f7f9 ff4c 	bl	80025ca <_kill>
 8008732:	1c43      	adds	r3, r0, #1
 8008734:	d102      	bne.n	800873c <_kill_r+0x1c>
 8008736:	682b      	ldr	r3, [r5, #0]
 8008738:	b103      	cbz	r3, 800873c <_kill_r+0x1c>
 800873a:	6023      	str	r3, [r4, #0]
 800873c:	bd38      	pop	{r3, r4, r5, pc}
 800873e:	bf00      	nop
 8008740:	20000574 	.word	0x20000574

08008744 <_getpid_r>:
 8008744:	f7f9 bf39 	b.w	80025ba <_getpid>

08008748 <__swhatbuf_r>:
 8008748:	b570      	push	{r4, r5, r6, lr}
 800874a:	460c      	mov	r4, r1
 800874c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008750:	2900      	cmp	r1, #0
 8008752:	b096      	sub	sp, #88	@ 0x58
 8008754:	4615      	mov	r5, r2
 8008756:	461e      	mov	r6, r3
 8008758:	da0d      	bge.n	8008776 <__swhatbuf_r+0x2e>
 800875a:	89a3      	ldrh	r3, [r4, #12]
 800875c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008760:	f04f 0100 	mov.w	r1, #0
 8008764:	bf14      	ite	ne
 8008766:	2340      	movne	r3, #64	@ 0x40
 8008768:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800876c:	2000      	movs	r0, #0
 800876e:	6031      	str	r1, [r6, #0]
 8008770:	602b      	str	r3, [r5, #0]
 8008772:	b016      	add	sp, #88	@ 0x58
 8008774:	bd70      	pop	{r4, r5, r6, pc}
 8008776:	466a      	mov	r2, sp
 8008778:	f000 f848 	bl	800880c <_fstat_r>
 800877c:	2800      	cmp	r0, #0
 800877e:	dbec      	blt.n	800875a <__swhatbuf_r+0x12>
 8008780:	9901      	ldr	r1, [sp, #4]
 8008782:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008786:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800878a:	4259      	negs	r1, r3
 800878c:	4159      	adcs	r1, r3
 800878e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008792:	e7eb      	b.n	800876c <__swhatbuf_r+0x24>

08008794 <__smakebuf_r>:
 8008794:	898b      	ldrh	r3, [r1, #12]
 8008796:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008798:	079d      	lsls	r5, r3, #30
 800879a:	4606      	mov	r6, r0
 800879c:	460c      	mov	r4, r1
 800879e:	d507      	bpl.n	80087b0 <__smakebuf_r+0x1c>
 80087a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80087a4:	6023      	str	r3, [r4, #0]
 80087a6:	6123      	str	r3, [r4, #16]
 80087a8:	2301      	movs	r3, #1
 80087aa:	6163      	str	r3, [r4, #20]
 80087ac:	b003      	add	sp, #12
 80087ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087b0:	ab01      	add	r3, sp, #4
 80087b2:	466a      	mov	r2, sp
 80087b4:	f7ff ffc8 	bl	8008748 <__swhatbuf_r>
 80087b8:	9f00      	ldr	r7, [sp, #0]
 80087ba:	4605      	mov	r5, r0
 80087bc:	4639      	mov	r1, r7
 80087be:	4630      	mov	r0, r6
 80087c0:	f7fe febe 	bl	8007540 <_malloc_r>
 80087c4:	b948      	cbnz	r0, 80087da <__smakebuf_r+0x46>
 80087c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087ca:	059a      	lsls	r2, r3, #22
 80087cc:	d4ee      	bmi.n	80087ac <__smakebuf_r+0x18>
 80087ce:	f023 0303 	bic.w	r3, r3, #3
 80087d2:	f043 0302 	orr.w	r3, r3, #2
 80087d6:	81a3      	strh	r3, [r4, #12]
 80087d8:	e7e2      	b.n	80087a0 <__smakebuf_r+0xc>
 80087da:	89a3      	ldrh	r3, [r4, #12]
 80087dc:	6020      	str	r0, [r4, #0]
 80087de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087e2:	81a3      	strh	r3, [r4, #12]
 80087e4:	9b01      	ldr	r3, [sp, #4]
 80087e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80087ea:	b15b      	cbz	r3, 8008804 <__smakebuf_r+0x70>
 80087ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087f0:	4630      	mov	r0, r6
 80087f2:	f000 f81d 	bl	8008830 <_isatty_r>
 80087f6:	b128      	cbz	r0, 8008804 <__smakebuf_r+0x70>
 80087f8:	89a3      	ldrh	r3, [r4, #12]
 80087fa:	f023 0303 	bic.w	r3, r3, #3
 80087fe:	f043 0301 	orr.w	r3, r3, #1
 8008802:	81a3      	strh	r3, [r4, #12]
 8008804:	89a3      	ldrh	r3, [r4, #12]
 8008806:	431d      	orrs	r5, r3
 8008808:	81a5      	strh	r5, [r4, #12]
 800880a:	e7cf      	b.n	80087ac <__smakebuf_r+0x18>

0800880c <_fstat_r>:
 800880c:	b538      	push	{r3, r4, r5, lr}
 800880e:	4d07      	ldr	r5, [pc, #28]	@ (800882c <_fstat_r+0x20>)
 8008810:	2300      	movs	r3, #0
 8008812:	4604      	mov	r4, r0
 8008814:	4608      	mov	r0, r1
 8008816:	4611      	mov	r1, r2
 8008818:	602b      	str	r3, [r5, #0]
 800881a:	f7f9 ff36 	bl	800268a <_fstat>
 800881e:	1c43      	adds	r3, r0, #1
 8008820:	d102      	bne.n	8008828 <_fstat_r+0x1c>
 8008822:	682b      	ldr	r3, [r5, #0]
 8008824:	b103      	cbz	r3, 8008828 <_fstat_r+0x1c>
 8008826:	6023      	str	r3, [r4, #0]
 8008828:	bd38      	pop	{r3, r4, r5, pc}
 800882a:	bf00      	nop
 800882c:	20000574 	.word	0x20000574

08008830 <_isatty_r>:
 8008830:	b538      	push	{r3, r4, r5, lr}
 8008832:	4d06      	ldr	r5, [pc, #24]	@ (800884c <_isatty_r+0x1c>)
 8008834:	2300      	movs	r3, #0
 8008836:	4604      	mov	r4, r0
 8008838:	4608      	mov	r0, r1
 800883a:	602b      	str	r3, [r5, #0]
 800883c:	f7f9 ff35 	bl	80026aa <_isatty>
 8008840:	1c43      	adds	r3, r0, #1
 8008842:	d102      	bne.n	800884a <_isatty_r+0x1a>
 8008844:	682b      	ldr	r3, [r5, #0]
 8008846:	b103      	cbz	r3, 800884a <_isatty_r+0x1a>
 8008848:	6023      	str	r3, [r4, #0]
 800884a:	bd38      	pop	{r3, r4, r5, pc}
 800884c:	20000574 	.word	0x20000574

08008850 <round>:
 8008850:	ec51 0b10 	vmov	r0, r1, d0
 8008854:	b570      	push	{r4, r5, r6, lr}
 8008856:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800885a:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800885e:	2a13      	cmp	r2, #19
 8008860:	460b      	mov	r3, r1
 8008862:	4605      	mov	r5, r0
 8008864:	dc1b      	bgt.n	800889e <round+0x4e>
 8008866:	2a00      	cmp	r2, #0
 8008868:	da0b      	bge.n	8008882 <round+0x32>
 800886a:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800886e:	3201      	adds	r2, #1
 8008870:	bf04      	itt	eq
 8008872:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8008876:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800887a:	2200      	movs	r2, #0
 800887c:	4619      	mov	r1, r3
 800887e:	4610      	mov	r0, r2
 8008880:	e015      	b.n	80088ae <round+0x5e>
 8008882:	4c15      	ldr	r4, [pc, #84]	@ (80088d8 <round+0x88>)
 8008884:	4114      	asrs	r4, r2
 8008886:	ea04 0601 	and.w	r6, r4, r1
 800888a:	4306      	orrs	r6, r0
 800888c:	d00f      	beq.n	80088ae <round+0x5e>
 800888e:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8008892:	fa41 f202 	asr.w	r2, r1, r2
 8008896:	4413      	add	r3, r2
 8008898:	ea23 0304 	bic.w	r3, r3, r4
 800889c:	e7ed      	b.n	800887a <round+0x2a>
 800889e:	2a33      	cmp	r2, #51	@ 0x33
 80088a0:	dd08      	ble.n	80088b4 <round+0x64>
 80088a2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80088a6:	d102      	bne.n	80088ae <round+0x5e>
 80088a8:	4602      	mov	r2, r0
 80088aa:	f7f7 fd0f 	bl	80002cc <__adddf3>
 80088ae:	ec41 0b10 	vmov	d0, r0, r1
 80088b2:	bd70      	pop	{r4, r5, r6, pc}
 80088b4:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 80088b8:	f04f 34ff 	mov.w	r4, #4294967295
 80088bc:	40f4      	lsrs	r4, r6
 80088be:	4204      	tst	r4, r0
 80088c0:	d0f5      	beq.n	80088ae <round+0x5e>
 80088c2:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 80088c6:	2201      	movs	r2, #1
 80088c8:	408a      	lsls	r2, r1
 80088ca:	1952      	adds	r2, r2, r5
 80088cc:	bf28      	it	cs
 80088ce:	3301      	addcs	r3, #1
 80088d0:	ea22 0204 	bic.w	r2, r2, r4
 80088d4:	e7d2      	b.n	800887c <round+0x2c>
 80088d6:	bf00      	nop
 80088d8:	000fffff 	.word	0x000fffff

080088dc <_init>:
 80088dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088de:	bf00      	nop
 80088e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088e2:	bc08      	pop	{r3}
 80088e4:	469e      	mov	lr, r3
 80088e6:	4770      	bx	lr

080088e8 <_fini>:
 80088e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ea:	bf00      	nop
 80088ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088ee:	bc08      	pop	{r3}
 80088f0:	469e      	mov	lr, r3
 80088f2:	4770      	bx	lr
