
sensores_melchor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b20  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000052c  08008cf0  08008cf0  00018cf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800921c  0800921c  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800921c  0800921c  0001921c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009224  08009224  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009224  08009224  00019224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009228  08009228  00019228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800922c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000388  200001f0  0800941c  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000578  0800941c  00020578  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010747  00000000  00000000  00020263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023be  00000000  00000000  000309aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000da0  00000000  00000000  00032d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a91  00000000  00000000  00033b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000507a  00000000  00000000  00034599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012ece  00000000  00000000  00039613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f2ba3  00000000  00000000  0004c4e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004a78  00000000  00000000  0013f084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00143afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008cd8 	.word	0x08008cd8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	08008cd8 	.word	0x08008cd8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <SENS_max6675>:
  * @brief  Receive an amount from a MAX6675 unit.
  * @param  thermocouple MAX6675 data type pointer to an actual unit.
  * @param  spiHandle SPI_HandleTypeDef for respective SPI periferal being used.
  * @retval HAL status
  */
HAL_StatusTypeDef SENS_max6675(MAX6675* thermocouple, SPI_HandleTypeDef *spiHandle){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef rslt = HAL_OK ;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	73fb      	strb	r3, [r7, #15]
	uint16_t rawtemp = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	81bb      	strh	r3, [r7, #12]
	uint8_t DATA[2]; // Raw Data from MAX6675

	//SPI COMUNICATION
	HAL_GPIO_WritePin(SSPORT,SSPIN,GPIO_PIN_RESET);
 8000f96:	2200      	movs	r2, #0
 8000f98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f9c:	4823      	ldr	r0, [pc, #140]	; (800102c <SENS_max6675+0xa8>)
 8000f9e:	f001 fffd 	bl	8002f9c <HAL_GPIO_WritePin>
	rslt = HAL_SPI_Receive(spiHandle,DATA, 1,50);
 8000fa2:	f107 0108 	add.w	r1, r7, #8
 8000fa6:	2332      	movs	r3, #50	; 0x32
 8000fa8:	2201      	movs	r2, #1
 8000faa:	6838      	ldr	r0, [r7, #0]
 8000fac:	f003 fdbd 	bl	8004b2a <HAL_SPI_Receive>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(SSPORT,SSPIN,GPIO_PIN_SET);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fba:	481c      	ldr	r0, [pc, #112]	; (800102c <SENS_max6675+0xa8>)
 8000fbc:	f001 ffee 	bl	8002f9c <HAL_GPIO_WritePin>

	thermocouple->registro = DATA[0]|(DATA[1]<<8); //16 bit register info
 8000fc0:	7a3b      	ldrb	r3, [r7, #8]
 8000fc2:	b21a      	sxth	r2, r3
 8000fc4:	7a7b      	ldrb	r3, [r7, #9]
 8000fc6:	021b      	lsls	r3, r3, #8
 8000fc8:	b21b      	sxth	r3, r3
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	b21b      	sxth	r3, r3
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	801a      	strh	r2, [r3, #0]

	if ((thermocouple->registro & MAX6675_input)>>2 == (thermocouple->registro & MAX6675_dummy)>>15){ //Checks if it has a themocouple on it and it is okay
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	881b      	ldrh	r3, [r3, #0]
 8000fd8:	109b      	asrs	r3, r3, #2
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	8812      	ldrh	r2, [r2, #0]
 8000fe2:	0bd2      	lsrs	r2, r2, #15
 8000fe4:	b292      	uxth	r2, r2
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d119      	bne.n	800101e <SENS_max6675+0x9a>

		rawtemp = (thermocouple->registro & MAX6675_temperature) >> 3; //temperature data extraction
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	881b      	ldrh	r3, [r3, #0]
 8000fee:	10db      	asrs	r3, r3, #3
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ff6:	81bb      	strh	r3, [r7, #12]
		thermocouple->temp = rawtemp*0.25; // Data to Centigrade Conversation
 8000ff8:	89bb      	ldrh	r3, [r7, #12]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fab2 	bl	8000564 <__aeabi_i2d>
 8001000:	f04f 0200 	mov.w	r2, #0
 8001004:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <SENS_max6675+0xac>)
 8001006:	f7ff fb17 	bl	8000638 <__aeabi_dmul>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	4610      	mov	r0, r2
 8001010:	4619      	mov	r1, r3
 8001012:	f7ff fde9 	bl	8000be8 <__aeabi_d2f>
 8001016:	4602      	mov	r2, r0
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	605a      	str	r2, [r3, #4]
 800101c:	e001      	b.n	8001022 <SENS_max6675+0x9e>

	}else{
		rslt = HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001022:	7bfb      	ldrb	r3, [r7, #15]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40020000 	.word	0x40020000
 8001030:	3fd00000 	.word	0x3fd00000

08001034 <SENS_MLX90614>:
 * 	This library was highly based on Michele Gazzarri's
 * 	Source: https://github.com/dinamitemic/mlx90614/blob/master/mlx90614.c
 */
#include "MLX90614.h"

HAL_StatusTypeDef SENS_MLX90614(MLX90614* IR_LENSE, I2C_HandleTypeDef *i2cHandle){
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef rslt = HAL_OK;
 800103e:	2300      	movs	r3, #0
 8001040:	73fb      	strb	r3, [r7, #15]

	IR_LENSE->ObjTemp = MLX90614_ReadTemp(MLX90614_DEFAULT_SA,MLX90614_TOBJ1,i2cHandle);
 8001042:	683a      	ldr	r2, [r7, #0]
 8001044:	2107      	movs	r1, #7
 8001046:	205a      	movs	r0, #90	; 0x5a
 8001048:	f000 f816 	bl	8001078 <MLX90614_ReadTemp>
 800104c:	eef0 7a40 	vmov.f32	s15, s0
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	edc3 7a00 	vstr	s15, [r3]
	IR_LENSE->AmbTemp = MLX90614_ReadTemp(MLX90614_DEFAULT_SA,MLX90614_TAMB,i2cHandle);
 8001056:	683a      	ldr	r2, [r7, #0]
 8001058:	2106      	movs	r1, #6
 800105a:	205a      	movs	r0, #90	; 0x5a
 800105c:	f000 f80c 	bl	8001078 <MLX90614_ReadTemp>
 8001060:	eef0 7a40 	vmov.f32	s15, s0
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	edc3 7a01 	vstr	s15, [r3, #4]

	return rslt;
 800106a:	7bfb      	ldrb	r3, [r7, #15]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	0000      	movs	r0, r0
	...

08001078 <MLX90614_ReadTemp>:
  * @brief  Transforms data into celcius temperature.
  * @param  devAddr is the device i2c adress
  * @param  regAddr is the register addres to be written
  * @param  temperature in celcius
  */
float MLX90614_ReadTemp(uint8_t devAddr, uint8_t regAddr,I2C_HandleTypeDef *i2cHandle) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	603a      	str	r2, [r7, #0]
 8001082:	71fb      	strb	r3, [r7, #7]
 8001084:	460b      	mov	r3, r1
 8001086:	71bb      	strb	r3, [r7, #6]
	float temp;
	uint16_t data;

	data = MLX90614_ReadReg(devAddr, regAddr,MLX90614_DBG_OFF,i2cHandle);
 8001088:	79b9      	ldrb	r1, [r7, #6]
 800108a:	79f8      	ldrb	r0, [r7, #7]
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	2200      	movs	r2, #0
 8001090:	f000 f898 	bl	80011c4 <MLX90614_ReadReg>
 8001094:	4603      	mov	r3, r0
 8001096:	81fb      	strh	r3, [r7, #14]
	temp = data*0.02 - 273.15;
 8001098:	89fb      	ldrh	r3, [r7, #14]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fa62 	bl	8000564 <__aeabi_i2d>
 80010a0:	a30f      	add	r3, pc, #60	; (adr r3, 80010e0 <MLX90614_ReadTemp+0x68>)
 80010a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a6:	f7ff fac7 	bl	8000638 <__aeabi_dmul>
 80010aa:	4602      	mov	r2, r0
 80010ac:	460b      	mov	r3, r1
 80010ae:	4610      	mov	r0, r2
 80010b0:	4619      	mov	r1, r3
 80010b2:	a30d      	add	r3, pc, #52	; (adr r3, 80010e8 <MLX90614_ReadTemp+0x70>)
 80010b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b8:	f7ff f906 	bl	80002c8 <__aeabi_dsub>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	4610      	mov	r0, r2
 80010c2:	4619      	mov	r1, r3
 80010c4:	f7ff fd90 	bl	8000be8 <__aeabi_d2f>
 80010c8:	4603      	mov	r3, r0
 80010ca:	60bb      	str	r3, [r7, #8]

	return temp;
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	ee07 3a90 	vmov	s15, r3
}
 80010d2:	eeb0 0a67 	vmov.f32	s0, s15
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	f3af 8000 	nop.w
 80010e0:	47ae147b 	.word	0x47ae147b
 80010e4:	3f947ae1 	.word	0x3f947ae1
 80010e8:	66666666 	.word	0x66666666
 80010ec:	40711266 	.word	0x40711266

080010f0 <MLX90614_SendDebugMsg>:


char temp_buff[128] = {};
void MLX90614_SendDebugMsg(uint8_t op_type, uint8_t devAddr, uint8_t regAddr, uint16_t data, uint8_t crc_in, uint8_t crc_calc) {
 80010f0:	b590      	push	{r4, r7, lr}
 80010f2:	b087      	sub	sp, #28
 80010f4:	af04      	add	r7, sp, #16
 80010f6:	4604      	mov	r4, r0
 80010f8:	4608      	mov	r0, r1
 80010fa:	4611      	mov	r1, r2
 80010fc:	461a      	mov	r2, r3
 80010fe:	4623      	mov	r3, r4
 8001100:	71fb      	strb	r3, [r7, #7]
 8001102:	4603      	mov	r3, r0
 8001104:	71bb      	strb	r3, [r7, #6]
 8001106:	460b      	mov	r3, r1
 8001108:	717b      	strb	r3, [r7, #5]
 800110a:	4613      	mov	r3, r2
 800110c:	807b      	strh	r3, [r7, #2]
	if(op_type == MLX90614_DBG_MSG_W) {
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d10d      	bne.n	8001130 <MLX90614_SendDebugMsg+0x40>
		snprintf(temp_buff, sizeof(temp_buff), "W Dev: 0x%02X, Reg: 0x%02X, Data: 0x%04X, CRC8_calc:0x%02X\r\n", devAddr, regAddr, data, crc_calc);
 8001114:	79b8      	ldrb	r0, [r7, #6]
 8001116:	797b      	ldrb	r3, [r7, #5]
 8001118:	887a      	ldrh	r2, [r7, #2]
 800111a:	7f39      	ldrb	r1, [r7, #28]
 800111c:	9102      	str	r1, [sp, #8]
 800111e:	9201      	str	r2, [sp, #4]
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	4603      	mov	r3, r0
 8001124:	4a0d      	ldr	r2, [pc, #52]	; (800115c <MLX90614_SendDebugMsg+0x6c>)
 8001126:	2180      	movs	r1, #128	; 0x80
 8001128:	480d      	ldr	r0, [pc, #52]	; (8001160 <MLX90614_SendDebugMsg+0x70>)
 800112a:	f005 fc43 	bl	80069b4 <sniprintf>
	else if (op_type == MLX90614_DBG_MSG_R) {
		snprintf(temp_buff, sizeof(temp_buff), "R Dev: 0x%02X, Reg: 0x%02X, Data: 0x%04X, CRC8_in:0x%02X, CRC8_calc:0x%02X\r\n", devAddr, regAddr, data, crc_in, crc_calc);
		//CDC_Transmit_FS(temp_buff, strlen((const char *)temp_buff));
	}

}
 800112e:	e011      	b.n	8001154 <MLX90614_SendDebugMsg+0x64>
	else if (op_type == MLX90614_DBG_MSG_R) {
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d10e      	bne.n	8001154 <MLX90614_SendDebugMsg+0x64>
		snprintf(temp_buff, sizeof(temp_buff), "R Dev: 0x%02X, Reg: 0x%02X, Data: 0x%04X, CRC8_in:0x%02X, CRC8_calc:0x%02X\r\n", devAddr, regAddr, data, crc_in, crc_calc);
 8001136:	79bc      	ldrb	r4, [r7, #6]
 8001138:	797b      	ldrb	r3, [r7, #5]
 800113a:	887a      	ldrh	r2, [r7, #2]
 800113c:	7e39      	ldrb	r1, [r7, #24]
 800113e:	7f38      	ldrb	r0, [r7, #28]
 8001140:	9003      	str	r0, [sp, #12]
 8001142:	9102      	str	r1, [sp, #8]
 8001144:	9201      	str	r2, [sp, #4]
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	4623      	mov	r3, r4
 800114a:	4a06      	ldr	r2, [pc, #24]	; (8001164 <MLX90614_SendDebugMsg+0x74>)
 800114c:	2180      	movs	r1, #128	; 0x80
 800114e:	4804      	ldr	r0, [pc, #16]	; (8001160 <MLX90614_SendDebugMsg+0x70>)
 8001150:	f005 fc30 	bl	80069b4 <sniprintf>
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	bd90      	pop	{r4, r7, pc}
 800115c:	08008cf0 	.word	0x08008cf0
 8001160:	2000020c 	.word	0x2000020c
 8001164:	08008d30 	.word	0x08008d30

08001168 <CRC8_Calc>:
  * 		It uses a cheattable for ease. x8+x2+x1+x0 polynomial
  * @param  p pointer to an array of bytes.
  * @param  len is the lenght of that array of bytes.
  * @retval crc checksum value.
  */
uint8_t CRC8_Calc (uint8_t *p, uint8_t len) {
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	70fb      	strb	r3, [r7, #3]
        uint16_t i; //index table
        uint16_t crc = 0x0; //checksum result
 8001174:	2300      	movs	r3, #0
 8001176:	81fb      	strh	r3, [r7, #14]

        while (len--) {
 8001178:	e015      	b.n	80011a6 <CRC8_Calc+0x3e>
                i = (crc ^ *p++) & 0xFF;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	1c5a      	adds	r2, r3, #1
 800117e:	607a      	str	r2, [r7, #4]
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	b29a      	uxth	r2, r3
 8001184:	89fb      	ldrh	r3, [r7, #14]
 8001186:	4053      	eors	r3, r2
 8001188:	b29b      	uxth	r3, r3
 800118a:	b2db      	uxtb	r3, r3
 800118c:	81bb      	strh	r3, [r7, #12]
                crc = (crc_table[i] ^ (crc << 8)) & 0xFF;
 800118e:	89bb      	ldrh	r3, [r7, #12]
 8001190:	4a0b      	ldr	r2, [pc, #44]	; (80011c0 <CRC8_Calc+0x58>)
 8001192:	5cd3      	ldrb	r3, [r2, r3]
 8001194:	b21a      	sxth	r2, r3
 8001196:	89fb      	ldrh	r3, [r7, #14]
 8001198:	021b      	lsls	r3, r3, #8
 800119a:	b21b      	sxth	r3, r3
 800119c:	4053      	eors	r3, r2
 800119e:	b21b      	sxth	r3, r3
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	81fb      	strh	r3, [r7, #14]
        while (len--) {
 80011a6:	78fb      	ldrb	r3, [r7, #3]
 80011a8:	1e5a      	subs	r2, r3, #1
 80011aa:	70fa      	strb	r2, [r7, #3]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d1e4      	bne.n	800117a <CRC8_Calc+0x12>
        }

        return crc & 0xFF;
 80011b0:	89fb      	ldrh	r3, [r7, #14]
 80011b2:	b2db      	uxtb	r3, r3
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	08008d90 	.word	0x08008d90

080011c4 <MLX90614_ReadReg>:
  * @param  regAddr is the register addres to be written
  * @param  data is the info to be written
  * @param  dbg_lvl 0-> CRC verification is to desired 1-> It is
  * @param  i2cHandle pointer
  */
uint16_t MLX90614_ReadReg(uint8_t devAddr, uint8_t regAddr, uint8_t dbg_lvl, I2C_HandleTypeDef *i2cHandle) {
 80011c4:	b590      	push	{r4, r7, lr}
 80011c6:	b08b      	sub	sp, #44	; 0x2c
 80011c8:	af04      	add	r7, sp, #16
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	4603      	mov	r3, r0
 80011ce:	71fb      	strb	r3, [r7, #7]
 80011d0:	460b      	mov	r3, r1
 80011d2:	71bb      	strb	r3, [r7, #6]
 80011d4:	4613      	mov	r3, r2
 80011d6:	717b      	strb	r3, [r7, #5]
	uint16_t data; // it will store the fulll 16bit register
	uint8_t in_buff[3], crc_buff[5], crc;

	HAL_I2C_Mem_Read(i2cHandle, (devAddr<<1), regAddr, 1, in_buff, 3, 100);
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	b29b      	uxth	r3, r3
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	b299      	uxth	r1, r3
 80011e0:	79bb      	ldrb	r3, [r7, #6]
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	2364      	movs	r3, #100	; 0x64
 80011e6:	9302      	str	r3, [sp, #8]
 80011e8:	2303      	movs	r3, #3
 80011ea:	9301      	str	r3, [sp, #4]
 80011ec:	f107 0310 	add.w	r3, r7, #16
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	2301      	movs	r3, #1
 80011f4:	6838      	ldr	r0, [r7, #0]
 80011f6:	f001 ff7b 	bl	80030f0 <HAL_I2C_Mem_Read>

	// For a read word command, in the crc8 calculus, you have to include [SA_W, Command, SA_R, LSB, MSB]
	crc_buff[0] = (devAddr<<1);
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	723b      	strb	r3, [r7, #8]
	crc_buff[1] = regAddr;
 8001202:	79bb      	ldrb	r3, [r7, #6]
 8001204:	727b      	strb	r3, [r7, #9]
	crc_buff[2] = (devAddr<<1) + 1;
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	b2db      	uxtb	r3, r3
 800120c:	3301      	adds	r3, #1
 800120e:	b2db      	uxtb	r3, r3
 8001210:	72bb      	strb	r3, [r7, #10]
	crc_buff[3] = in_buff[0];
 8001212:	7c3b      	ldrb	r3, [r7, #16]
 8001214:	72fb      	strb	r3, [r7, #11]
	crc_buff[4] = in_buff[1];
 8001216:	7c7b      	ldrb	r3, [r7, #17]
 8001218:	733b      	strb	r3, [r7, #12]
	crc = CRC8_Calc(crc_buff, 5);
 800121a:	f107 0308 	add.w	r3, r7, #8
 800121e:	2105      	movs	r1, #5
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ffa1 	bl	8001168 <CRC8_Calc>
 8001226:	4603      	mov	r3, r0
 8001228:	757b      	strb	r3, [r7, #21]

	data = (in_buff[1] <<8 | in_buff[0]);
 800122a:	7c7b      	ldrb	r3, [r7, #17]
 800122c:	021b      	lsls	r3, r3, #8
 800122e:	b21a      	sxth	r2, r3
 8001230:	7c3b      	ldrb	r3, [r7, #16]
 8001232:	b21b      	sxth	r3, r3
 8001234:	4313      	orrs	r3, r2
 8001236:	b21b      	sxth	r3, r3
 8001238:	82fb      	strh	r3, [r7, #22]

	//TODO: implement CRC8 check on data received
	if (crc != in_buff[2]) {
 800123a:	7cbb      	ldrb	r3, [r7, #18]
 800123c:	7d7a      	ldrb	r2, [r7, #21]
 800123e:	429a      	cmp	r2, r3
 8001240:	d001      	beq.n	8001246 <MLX90614_ReadReg+0x82>
		data = 0x0000;
 8001242:	2300      	movs	r3, #0
 8001244:	82fb      	strh	r3, [r7, #22]
	}
	if(dbg_lvl == MLX90614_DBG_ON)	MLX90614_SendDebugMsg(MLX90614_DBG_MSG_R, devAddr, regAddr, data, in_buff[2], crc);
 8001246:	797b      	ldrb	r3, [r7, #5]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d10b      	bne.n	8001264 <MLX90614_ReadReg+0xa0>
 800124c:	7cbb      	ldrb	r3, [r7, #18]
 800124e:	8afc      	ldrh	r4, [r7, #22]
 8001250:	79b8      	ldrb	r0, [r7, #6]
 8001252:	79f9      	ldrb	r1, [r7, #7]
 8001254:	7d7a      	ldrb	r2, [r7, #21]
 8001256:	9201      	str	r2, [sp, #4]
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	4623      	mov	r3, r4
 800125c:	4602      	mov	r2, r0
 800125e:	2001      	movs	r0, #1
 8001260:	f7ff ff46 	bl	80010f0 <MLX90614_SendDebugMsg>

	//HAL_Delay(1);
	return data;
 8001264:	8afb      	ldrh	r3, [r7, #22]
}
 8001266:	4618      	mov	r0, r3
 8001268:	371c      	adds	r7, #28
 800126a:	46bd      	mov	sp, r7
 800126c:	bd90      	pop	{r4, r7, pc}
	...

08001270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001270:	b5b0      	push	{r4, r5, r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001276:	f001 f8ea 	bl	800244e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800127a:	f000 f843 	bl	8001304 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800127e:	f000 f9a9 	bl	80015d4 <MX_GPIO_Init>
  MX_SPI2_Init();
 8001282:	f000 f939 	bl	80014f8 <MX_SPI2_Init>
  MX_ADC3_Init();
 8001286:	f000 f8a5 	bl	80013d4 <MX_ADC3_Init>
  MX_USART1_UART_Init();
 800128a:	f000 f973 	bl	8001574 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800128e:	f000 f8f3 	bl	8001478 <MX_I2C1_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //Tempertura de carcasa
	  SENS_max6675(&termocupla, &hspi2);
 8001292:	4914      	ldr	r1, [pc, #80]	; (80012e4 <main+0x74>)
 8001294:	4814      	ldr	r0, [pc, #80]	; (80012e8 <main+0x78>)
 8001296:	f7ff fe75 	bl	8000f84 <SENS_max6675>

	  //Tempertura de flecha
	  SENS_MLX90614(&infrarojo_temp, &hi2c1);
 800129a:	4914      	ldr	r1, [pc, #80]	; (80012ec <main+0x7c>)
 800129c:	4814      	ldr	r0, [pc, #80]	; (80012f0 <main+0x80>)
 800129e:	f7ff fec9 	bl	8001034 <SENS_MLX90614>

	  //Velocidad de giro y sentido
	  //SENS_Encoder(&encoder);

	  //Enviamos trama de lo sensado
	  sprintf((char*)msg,"%0.2f %0.2f \r\n",termocupla.temp,infrarojo_temp.ObjTemp);
 80012a2:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <main+0x78>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff f96e 	bl	8000588 <__aeabi_f2d>
 80012ac:	4604      	mov	r4, r0
 80012ae:	460d      	mov	r5, r1
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <main+0x80>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff f967 	bl	8000588 <__aeabi_f2d>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	e9cd 2300 	strd	r2, r3, [sp]
 80012c2:	4622      	mov	r2, r4
 80012c4:	462b      	mov	r3, r5
 80012c6:	490b      	ldr	r1, [pc, #44]	; (80012f4 <main+0x84>)
 80012c8:	480b      	ldr	r0, [pc, #44]	; (80012f8 <main+0x88>)
 80012ca:	f005 fba7 	bl	8006a1c <siprintf>
	  HAL_UART_Transmit(&huart1, msg, sizeof(msg)/sizeof(uint8_t),10);
 80012ce:	230a      	movs	r3, #10
 80012d0:	221a      	movs	r2, #26
 80012d2:	4909      	ldr	r1, [pc, #36]	; (80012f8 <main+0x88>)
 80012d4:	4809      	ldr	r0, [pc, #36]	; (80012fc <main+0x8c>)
 80012d6:	f004 f9bd 	bl	8005654 <HAL_UART_Transmit>
	  HAL_Delay(periodo);
 80012da:	4809      	ldr	r0, [pc, #36]	; (8001300 <main+0x90>)
 80012dc:	f001 f914 	bl	8002508 <HAL_Delay>
	  SENS_max6675(&termocupla, &hspi2);
 80012e0:	e7d7      	b.n	8001292 <main+0x22>
 80012e2:	bf00      	nop
 80012e4:	20000338 	.word	0x20000338
 80012e8:	2000028c 	.word	0x2000028c
 80012ec:	200002e4 	.word	0x200002e4
 80012f0:	20000294 	.word	0x20000294
 80012f4:	08008d80 	.word	0x08008d80
 80012f8:	20000000 	.word	0x20000000
 80012fc:	2000039c 	.word	0x2000039c
 8001300:	000493e0 	.word	0x000493e0

08001304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b094      	sub	sp, #80	; 0x50
 8001308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800130a:	f107 0320 	add.w	r3, r7, #32
 800130e:	2230      	movs	r2, #48	; 0x30
 8001310:	2100      	movs	r1, #0
 8001312:	4618      	mov	r0, r3
 8001314:	f005 fbe5 	bl	8006ae2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001318:	f107 030c 	add.w	r3, r7, #12
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001328:	4b28      	ldr	r3, [pc, #160]	; (80013cc <SystemClock_Config+0xc8>)
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	4a27      	ldr	r2, [pc, #156]	; (80013cc <SystemClock_Config+0xc8>)
 800132e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001332:	6413      	str	r3, [r2, #64]	; 0x40
 8001334:	4b25      	ldr	r3, [pc, #148]	; (80013cc <SystemClock_Config+0xc8>)
 8001336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001340:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <SystemClock_Config+0xcc>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001348:	4a21      	ldr	r2, [pc, #132]	; (80013d0 <SystemClock_Config+0xcc>)
 800134a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800134e:	6013      	str	r3, [r2, #0]
 8001350:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <SystemClock_Config+0xcc>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001358:	607b      	str	r3, [r7, #4]
 800135a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800135c:	2302      	movs	r3, #2
 800135e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001360:	2301      	movs	r3, #1
 8001362:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001364:	2310      	movs	r3, #16
 8001366:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001368:	2302      	movs	r3, #2
 800136a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800136c:	2300      	movs	r3, #0
 800136e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 10;
 8001370:	230a      	movs	r3, #10
 8001372:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 8001374:	23d2      	movs	r3, #210	; 0xd2
 8001376:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001378:	2302      	movs	r3, #2
 800137a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800137c:	2302      	movs	r3, #2
 800137e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001380:	f107 0320 	add.w	r3, r7, #32
 8001384:	4618      	mov	r0, r3
 8001386:	f002 faab 	bl	80038e0 <HAL_RCC_OscConfig>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001390:	f000 fd58 	bl	8001e44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001394:	230f      	movs	r3, #15
 8001396:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001398:	2302      	movs	r3, #2
 800139a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013ac:	f107 030c 	add.w	r3, r7, #12
 80013b0:	2105      	movs	r1, #5
 80013b2:	4618      	mov	r0, r3
 80013b4:	f002 fd38 	bl	8003e28 <HAL_RCC_ClockConfig>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80013be:	f000 fd41 	bl	8001e44 <Error_Handler>
  }
}
 80013c2:	bf00      	nop
 80013c4:	3750      	adds	r7, #80	; 0x50
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40007000 	.word	0x40007000

080013d4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013da:	463b      	mov	r3, r7
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80013e6:	4b21      	ldr	r3, [pc, #132]	; (800146c <MX_ADC3_Init+0x98>)
 80013e8:	4a21      	ldr	r2, [pc, #132]	; (8001470 <MX_ADC3_Init+0x9c>)
 80013ea:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013ec:	4b1f      	ldr	r3, [pc, #124]	; (800146c <MX_ADC3_Init+0x98>)
 80013ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013f2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80013f4:	4b1d      	ldr	r3, [pc, #116]	; (800146c <MX_ADC3_Init+0x98>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013fa:	4b1c      	ldr	r3, [pc, #112]	; (800146c <MX_ADC3_Init+0x98>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001400:	4b1a      	ldr	r3, [pc, #104]	; (800146c <MX_ADC3_Init+0x98>)
 8001402:	2200      	movs	r2, #0
 8001404:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001406:	4b19      	ldr	r3, [pc, #100]	; (800146c <MX_ADC3_Init+0x98>)
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800140e:	4b17      	ldr	r3, [pc, #92]	; (800146c <MX_ADC3_Init+0x98>)
 8001410:	2200      	movs	r2, #0
 8001412:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001414:	4b15      	ldr	r3, [pc, #84]	; (800146c <MX_ADC3_Init+0x98>)
 8001416:	4a17      	ldr	r2, [pc, #92]	; (8001474 <MX_ADC3_Init+0xa0>)
 8001418:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800141a:	4b14      	ldr	r3, [pc, #80]	; (800146c <MX_ADC3_Init+0x98>)
 800141c:	2200      	movs	r2, #0
 800141e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001420:	4b12      	ldr	r3, [pc, #72]	; (800146c <MX_ADC3_Init+0x98>)
 8001422:	2201      	movs	r2, #1
 8001424:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001426:	4b11      	ldr	r3, [pc, #68]	; (800146c <MX_ADC3_Init+0x98>)
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800142e:	4b0f      	ldr	r3, [pc, #60]	; (800146c <MX_ADC3_Init+0x98>)
 8001430:	2201      	movs	r2, #1
 8001432:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001434:	480d      	ldr	r0, [pc, #52]	; (800146c <MX_ADC3_Init+0x98>)
 8001436:	f001 f88b 	bl	8002550 <HAL_ADC_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001440:	f000 fd00 	bl	8001e44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001444:	2304      	movs	r3, #4
 8001446:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001448:	2301      	movs	r3, #1
 800144a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800144c:	2300      	movs	r3, #0
 800144e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001450:	463b      	mov	r3, r7
 8001452:	4619      	mov	r1, r3
 8001454:	4805      	ldr	r0, [pc, #20]	; (800146c <MX_ADC3_Init+0x98>)
 8001456:	f001 f8bf 	bl	80025d8 <HAL_ADC_ConfigChannel>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001460:	f000 fcf0 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001464:	bf00      	nop
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	2000029c 	.word	0x2000029c
 8001470:	40012200 	.word	0x40012200
 8001474:	0f000001 	.word	0x0f000001

08001478 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800147c:	4b1b      	ldr	r3, [pc, #108]	; (80014ec <MX_I2C1_Init+0x74>)
 800147e:	4a1c      	ldr	r2, [pc, #112]	; (80014f0 <MX_I2C1_Init+0x78>)
 8001480:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00A0A3F7;
 8001482:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <MX_I2C1_Init+0x74>)
 8001484:	4a1b      	ldr	r2, [pc, #108]	; (80014f4 <MX_I2C1_Init+0x7c>)
 8001486:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001488:	4b18      	ldr	r3, [pc, #96]	; (80014ec <MX_I2C1_Init+0x74>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800148e:	4b17      	ldr	r3, [pc, #92]	; (80014ec <MX_I2C1_Init+0x74>)
 8001490:	2201      	movs	r2, #1
 8001492:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001494:	4b15      	ldr	r3, [pc, #84]	; (80014ec <MX_I2C1_Init+0x74>)
 8001496:	2200      	movs	r2, #0
 8001498:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800149a:	4b14      	ldr	r3, [pc, #80]	; (80014ec <MX_I2C1_Init+0x74>)
 800149c:	2200      	movs	r2, #0
 800149e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <MX_I2C1_Init+0x74>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014a6:	4b11      	ldr	r3, [pc, #68]	; (80014ec <MX_I2C1_Init+0x74>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014ac:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <MX_I2C1_Init+0x74>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014b2:	480e      	ldr	r0, [pc, #56]	; (80014ec <MX_I2C1_Init+0x74>)
 80014b4:	f001 fd8c 	bl	8002fd0 <HAL_I2C_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014be:	f000 fcc1 	bl	8001e44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014c2:	2100      	movs	r1, #0
 80014c4:	4809      	ldr	r0, [pc, #36]	; (80014ec <MX_I2C1_Init+0x74>)
 80014c6:	f002 f973 	bl	80037b0 <HAL_I2CEx_ConfigAnalogFilter>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014d0:	f000 fcb8 	bl	8001e44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014d4:	2100      	movs	r1, #0
 80014d6:	4805      	ldr	r0, [pc, #20]	; (80014ec <MX_I2C1_Init+0x74>)
 80014d8:	f002 f9b5 	bl	8003846 <HAL_I2CEx_ConfigDigitalFilter>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014e2:	f000 fcaf 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	200002e4 	.word	0x200002e4
 80014f0:	40005400 	.word	0x40005400
 80014f4:	00a0a3f7 	.word	0x00a0a3f7

080014f8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80014fc:	4b1b      	ldr	r3, [pc, #108]	; (800156c <MX_SPI2_Init+0x74>)
 80014fe:	4a1c      	ldr	r2, [pc, #112]	; (8001570 <MX_SPI2_Init+0x78>)
 8001500:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001502:	4b1a      	ldr	r3, [pc, #104]	; (800156c <MX_SPI2_Init+0x74>)
 8001504:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001508:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800150a:	4b18      	ldr	r3, [pc, #96]	; (800156c <MX_SPI2_Init+0x74>)
 800150c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001510:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001512:	4b16      	ldr	r3, [pc, #88]	; (800156c <MX_SPI2_Init+0x74>)
 8001514:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8001518:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800151a:	4b14      	ldr	r3, [pc, #80]	; (800156c <MX_SPI2_Init+0x74>)
 800151c:	2200      	movs	r2, #0
 800151e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001520:	4b12      	ldr	r3, [pc, #72]	; (800156c <MX_SPI2_Init+0x74>)
 8001522:	2200      	movs	r2, #0
 8001524:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001526:	4b11      	ldr	r3, [pc, #68]	; (800156c <MX_SPI2_Init+0x74>)
 8001528:	f44f 7200 	mov.w	r2, #512	; 0x200
 800152c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800152e:	4b0f      	ldr	r3, [pc, #60]	; (800156c <MX_SPI2_Init+0x74>)
 8001530:	2238      	movs	r2, #56	; 0x38
 8001532:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001534:	4b0d      	ldr	r3, [pc, #52]	; (800156c <MX_SPI2_Init+0x74>)
 8001536:	2200      	movs	r2, #0
 8001538:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800153a:	4b0c      	ldr	r3, [pc, #48]	; (800156c <MX_SPI2_Init+0x74>)
 800153c:	2200      	movs	r2, #0
 800153e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001540:	4b0a      	ldr	r3, [pc, #40]	; (800156c <MX_SPI2_Init+0x74>)
 8001542:	2200      	movs	r2, #0
 8001544:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <MX_SPI2_Init+0x74>)
 8001548:	2207      	movs	r2, #7
 800154a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800154c:	4b07      	ldr	r3, [pc, #28]	; (800156c <MX_SPI2_Init+0x74>)
 800154e:	2200      	movs	r2, #0
 8001550:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <MX_SPI2_Init+0x74>)
 8001554:	2200      	movs	r2, #0
 8001556:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001558:	4804      	ldr	r0, [pc, #16]	; (800156c <MX_SPI2_Init+0x74>)
 800155a:	f003 fa3b 	bl	80049d4 <HAL_SPI_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8001564:	f000 fc6e 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000338 	.word	0x20000338
 8001570:	40003800 	.word	0x40003800

08001574 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001578:	4b14      	ldr	r3, [pc, #80]	; (80015cc <MX_USART1_UART_Init+0x58>)
 800157a:	4a15      	ldr	r2, [pc, #84]	; (80015d0 <MX_USART1_UART_Init+0x5c>)
 800157c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800157e:	4b13      	ldr	r3, [pc, #76]	; (80015cc <MX_USART1_UART_Init+0x58>)
 8001580:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001584:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001586:	4b11      	ldr	r3, [pc, #68]	; (80015cc <MX_USART1_UART_Init+0x58>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800158c:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <MX_USART1_UART_Init+0x58>)
 800158e:	2200      	movs	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001592:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <MX_USART1_UART_Init+0x58>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001598:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <MX_USART1_UART_Init+0x58>)
 800159a:	220c      	movs	r2, #12
 800159c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800159e:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <MX_USART1_UART_Init+0x58>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a4:	4b09      	ldr	r3, [pc, #36]	; (80015cc <MX_USART1_UART_Init+0x58>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015aa:	4b08      	ldr	r3, [pc, #32]	; (80015cc <MX_USART1_UART_Init+0x58>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <MX_USART1_UART_Init+0x58>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015b6:	4805      	ldr	r0, [pc, #20]	; (80015cc <MX_USART1_UART_Init+0x58>)
 80015b8:	f003 fffe 	bl	80055b8 <HAL_UART_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80015c2:	f000 fc3f 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	2000039c 	.word	0x2000039c
 80015d0:	40011000 	.word	0x40011000

080015d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b090      	sub	sp, #64	; 0x40
 80015d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
 80015e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015ea:	4bae      	ldr	r3, [pc, #696]	; (80018a4 <MX_GPIO_Init+0x2d0>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4aad      	ldr	r2, [pc, #692]	; (80018a4 <MX_GPIO_Init+0x2d0>)
 80015f0:	f043 0310 	orr.w	r3, r3, #16
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4bab      	ldr	r3, [pc, #684]	; (80018a4 <MX_GPIO_Init+0x2d0>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0310 	and.w	r3, r3, #16
 80015fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001600:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001602:	4ba8      	ldr	r3, [pc, #672]	; (80018a4 <MX_GPIO_Init+0x2d0>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	4aa7      	ldr	r2, [pc, #668]	; (80018a4 <MX_GPIO_Init+0x2d0>)
 8001608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800160c:	6313      	str	r3, [r2, #48]	; 0x30
 800160e:	4ba5      	ldr	r3, [pc, #660]	; (80018a4 <MX_GPIO_Init+0x2d0>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
 8001618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800161a:	4ba2      	ldr	r3, [pc, #648]	; (80018a4 <MX_GPIO_Init+0x2d0>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4aa1      	ldr	r2, [pc, #644]	; (80018a4 <MX_GPIO_Init+0x2d0>)
 8001620:	f043 0302 	orr.w	r3, r3, #2
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b9f      	ldr	r3, [pc, #636]	; (80018a4 <MX_GPIO_Init+0x2d0>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	623b      	str	r3, [r7, #32]
 8001630:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001632:	4b9c      	ldr	r3, [pc, #624]	; (80018a4 <MX_GPIO_Init+0x2d0>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a9b      	ldr	r2, [pc, #620]	; (80018a4 <MX_GPIO_Init+0x2d0>)
 8001638:	f043 0308 	orr.w	r3, r3, #8
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b99      	ldr	r3, [pc, #612]	; (80018a4 <MX_GPIO_Init+0x2d0>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0308 	and.w	r3, r3, #8
 8001646:	61fb      	str	r3, [r7, #28]
 8001648:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800164a:	4b96      	ldr	r3, [pc, #600]	; (80018a4 <MX_GPIO_Init+0x2d0>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	4a95      	ldr	r2, [pc, #596]	; (80018a4 <MX_GPIO_Init+0x2d0>)
 8001650:	f043 0304 	orr.w	r3, r3, #4
 8001654:	6313      	str	r3, [r2, #48]	; 0x30
 8001656:	4b93      	ldr	r3, [pc, #588]	; (80018a4 <MX_GPIO_Init+0x2d0>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	f003 0304 	and.w	r3, r3, #4
 800165e:	61bb      	str	r3, [r7, #24]
 8001660:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001662:	4b90      	ldr	r3, [pc, #576]	; (80018a4 <MX_GPIO_Init+0x2d0>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4a8f      	ldr	r2, [pc, #572]	; (80018a4 <MX_GPIO_Init+0x2d0>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4b8d      	ldr	r3, [pc, #564]	; (80018a4 <MX_GPIO_Init+0x2d0>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	617b      	str	r3, [r7, #20]
 8001678:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800167a:	4b8a      	ldr	r3, [pc, #552]	; (80018a4 <MX_GPIO_Init+0x2d0>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	4a89      	ldr	r2, [pc, #548]	; (80018a4 <MX_GPIO_Init+0x2d0>)
 8001680:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001684:	6313      	str	r3, [r2, #48]	; 0x30
 8001686:	4b87      	ldr	r3, [pc, #540]	; (80018a4 <MX_GPIO_Init+0x2d0>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001692:	4b84      	ldr	r3, [pc, #528]	; (80018a4 <MX_GPIO_Init+0x2d0>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a83      	ldr	r2, [pc, #524]	; (80018a4 <MX_GPIO_Init+0x2d0>)
 8001698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b81      	ldr	r3, [pc, #516]	; (80018a4 <MX_GPIO_Init+0x2d0>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80016aa:	4b7e      	ldr	r3, [pc, #504]	; (80018a4 <MX_GPIO_Init+0x2d0>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4a7d      	ldr	r2, [pc, #500]	; (80018a4 <MX_GPIO_Init+0x2d0>)
 80016b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
 80016b6:	4b7b      	ldr	r3, [pc, #492]	; (80018a4 <MX_GPIO_Init+0x2d0>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016c2:	4b78      	ldr	r3, [pc, #480]	; (80018a4 <MX_GPIO_Init+0x2d0>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a77      	ldr	r2, [pc, #476]	; (80018a4 <MX_GPIO_Init+0x2d0>)
 80016c8:	f043 0320 	orr.w	r3, r3, #32
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b75      	ldr	r3, [pc, #468]	; (80018a4 <MX_GPIO_Init+0x2d0>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0320 	and.w	r3, r3, #32
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016da:	4b72      	ldr	r3, [pc, #456]	; (80018a4 <MX_GPIO_Init+0x2d0>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a71      	ldr	r2, [pc, #452]	; (80018a4 <MX_GPIO_Init+0x2d0>)
 80016e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b6f      	ldr	r3, [pc, #444]	; (80018a4 <MX_GPIO_Init+0x2d0>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80016f2:	2201      	movs	r2, #1
 80016f4:	2120      	movs	r1, #32
 80016f6:	486c      	ldr	r0, [pc, #432]	; (80018a8 <MX_GPIO_Init+0x2d4>)
 80016f8:	f001 fc50 	bl	8002f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 80016fc:	2200      	movs	r2, #0
 80016fe:	f241 010c 	movw	r1, #4108	; 0x100c
 8001702:	486a      	ldr	r0, [pc, #424]	; (80018ac <MX_GPIO_Init+0x2d8>)
 8001704:	f001 fc4a 	bl	8002f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8001708:	2200      	movs	r2, #0
 800170a:	2108      	movs	r1, #8
 800170c:	4868      	ldr	r0, [pc, #416]	; (80018b0 <MX_GPIO_Init+0x2dc>)
 800170e:	f001 fc45 	bl	8002f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001712:	2200      	movs	r2, #0
 8001714:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001718:	4866      	ldr	r0, [pc, #408]	; (80018b4 <MX_GPIO_Init+0x2e0>)
 800171a:	f001 fc3f 	bl	8002f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800171e:	2201      	movs	r2, #1
 8001720:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001724:	4864      	ldr	r0, [pc, #400]	; (80018b8 <MX_GPIO_Init+0x2e4>)
 8001726:	f001 fc39 	bl	8002f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800172a:	2200      	movs	r2, #0
 800172c:	21c8      	movs	r1, #200	; 0xc8
 800172e:	4863      	ldr	r0, [pc, #396]	; (80018bc <MX_GPIO_Init+0x2e8>)
 8001730:	f001 fc34 	bl	8002f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001734:	2310      	movs	r3, #16
 8001736:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001738:	2302      	movs	r3, #2
 800173a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001740:	2300      	movs	r3, #0
 8001742:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001744:	230e      	movs	r3, #14
 8001746:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001748:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800174c:	4619      	mov	r1, r3
 800174e:	485c      	ldr	r0, [pc, #368]	; (80018c0 <MX_GPIO_Init+0x2ec>)
 8001750:	f001 fa78 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001754:	2308      	movs	r3, #8
 8001756:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001758:	2300      	movs	r3, #0
 800175a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001760:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001764:	4619      	mov	r1, r3
 8001766:	4856      	ldr	r0, [pc, #344]	; (80018c0 <MX_GPIO_Init+0x2ec>)
 8001768:	f001 fa6c 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800176c:	2304      	movs	r3, #4
 800176e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	2302      	movs	r3, #2
 8001772:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001778:	2303      	movs	r3, #3
 800177a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800177c:	2309      	movs	r3, #9
 800177e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001780:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001784:	4619      	mov	r1, r3
 8001786:	484e      	ldr	r0, [pc, #312]	; (80018c0 <MX_GPIO_Init+0x2ec>)
 8001788:	f001 fa5c 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800178c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001790:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001792:	2302      	movs	r3, #2
 8001794:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179a:	2303      	movs	r3, #3
 800179c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800179e:	230b      	movs	r3, #11
 80017a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017a6:	4619      	mov	r1, r3
 80017a8:	4844      	ldr	r0, [pc, #272]	; (80018bc <MX_GPIO_Init+0x2e8>)
 80017aa:	f001 fa4b 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80017ae:	f64f 7383 	movw	r3, #65411	; 0xff83
 80017b2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b4:	2302      	movs	r3, #2
 80017b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017bc:	2303      	movs	r3, #3
 80017be:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017c0:	230c      	movs	r3, #12
 80017c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017c8:	4619      	mov	r1, r3
 80017ca:	483d      	ldr	r0, [pc, #244]	; (80018c0 <MX_GPIO_Init+0x2ec>)
 80017cc:	f001 fa3a 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80017d0:	f643 4323 	movw	r3, #15395	; 0x3c23
 80017d4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d6:	2302      	movs	r3, #2
 80017d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017de:	2303      	movs	r3, #3
 80017e0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80017e2:	230a      	movs	r3, #10
 80017e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ea:	4619      	mov	r1, r3
 80017ec:	4835      	ldr	r0, [pc, #212]	; (80018c4 <MX_GPIO_Init+0x2f0>)
 80017ee:	f001 fa29 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80017f2:	2310      	movs	r3, #16
 80017f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f6:	2302      	movs	r3, #2
 80017f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fe:	2300      	movs	r3, #0
 8001800:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001802:	2302      	movs	r3, #2
 8001804:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8001806:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800180a:	4619      	mov	r1, r3
 800180c:	482d      	ldr	r0, [pc, #180]	; (80018c4 <MX_GPIO_Init+0x2f0>)
 800180e:	f001 fa19 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001812:	2380      	movs	r3, #128	; 0x80
 8001814:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001816:	2302      	movs	r3, #2
 8001818:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181e:	2300      	movs	r3, #0
 8001820:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001822:	2308      	movs	r3, #8
 8001824:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001826:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800182a:	4619      	mov	r1, r3
 800182c:	481e      	ldr	r0, [pc, #120]	; (80018a8 <MX_GPIO_Init+0x2d4>)
 800182e:	f001 fa09 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001832:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001836:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001838:	2302      	movs	r3, #2
 800183a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001840:	2303      	movs	r3, #3
 8001842:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001844:	230c      	movs	r3, #12
 8001846:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001848:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800184c:	4619      	mov	r1, r3
 800184e:	481e      	ldr	r0, [pc, #120]	; (80018c8 <MX_GPIO_Init+0x2f4>)
 8001850:	f001 f9f8 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8001854:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001858:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185a:	2302      	movs	r3, #2
 800185c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001862:	2300      	movs	r3, #0
 8001864:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001866:	2301      	movs	r3, #1
 8001868:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800186a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800186e:	4619      	mov	r1, r3
 8001870:	4811      	ldr	r0, [pc, #68]	; (80018b8 <MX_GPIO_Init+0x2e4>)
 8001872:	f001 f9e7 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001876:	2360      	movs	r3, #96	; 0x60
 8001878:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187a:	2302      	movs	r3, #2
 800187c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001882:	2300      	movs	r3, #0
 8001884:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001886:	230d      	movs	r3, #13
 8001888:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800188a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800188e:	4619      	mov	r1, r3
 8001890:	480b      	ldr	r0, [pc, #44]	; (80018c0 <MX_GPIO_Init+0x2ec>)
 8001892:	f001 f9d7 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001896:	2340      	movs	r3, #64	; 0x40
 8001898:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189a:	2302      	movs	r3, #2
 800189c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	e014      	b.n	80018cc <MX_GPIO_Init+0x2f8>
 80018a2:	bf00      	nop
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40020c00 	.word	0x40020c00
 80018ac:	40022000 	.word	0x40022000
 80018b0:	40022800 	.word	0x40022800
 80018b4:	40021c00 	.word	0x40021c00
 80018b8:	40020000 	.word	0x40020000
 80018bc:	40021800 	.word	0x40021800
 80018c0:	40021000 	.word	0x40021000
 80018c4:	40020400 	.word	0x40020400
 80018c8:	40020800 	.word	0x40020800
 80018cc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ce:	2303      	movs	r3, #3
 80018d0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80018d2:	230a      	movs	r3, #10
 80018d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80018d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018da:	4619      	mov	r1, r3
 80018dc:	48bc      	ldr	r0, [pc, #752]	; (8001bd0 <MX_GPIO_Init+0x5fc>)
 80018de:	f001 f9b1 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80018e2:	f248 1333 	movw	r3, #33075	; 0x8133
 80018e6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e8:	2302      	movs	r3, #2
 80018ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f0:	2303      	movs	r3, #3
 80018f2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018f4:	230c      	movs	r3, #12
 80018f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018fc:	4619      	mov	r1, r3
 80018fe:	48b5      	ldr	r0, [pc, #724]	; (8001bd4 <MX_GPIO_Init+0x600>)
 8001900:	f001 f9a0 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001904:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001908:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190a:	2302      	movs	r3, #2
 800190c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001912:	2300      	movs	r3, #0
 8001914:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001916:	230e      	movs	r3, #14
 8001918:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800191a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800191e:	4619      	mov	r1, r3
 8001920:	48ad      	ldr	r0, [pc, #692]	; (8001bd8 <MX_GPIO_Init+0x604>)
 8001922:	f001 f98f 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001926:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800192a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800192c:	2300      	movs	r3, #0
 800192e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001934:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001938:	4619      	mov	r1, r3
 800193a:	48a7      	ldr	r0, [pc, #668]	; (8001bd8 <MX_GPIO_Init+0x604>)
 800193c:	f001 f982 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001940:	2340      	movs	r3, #64	; 0x40
 8001942:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001944:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001948:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800194e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001952:	4619      	mov	r1, r3
 8001954:	48a1      	ldr	r0, [pc, #644]	; (8001bdc <MX_GPIO_Init+0x608>)
 8001956:	f001 f975 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800195a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800195e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001960:	2302      	movs	r3, #2
 8001962:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001968:	2303      	movs	r3, #3
 800196a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800196c:	230c      	movs	r3, #12
 800196e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001970:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001974:	4619      	mov	r1, r3
 8001976:	4899      	ldr	r0, [pc, #612]	; (8001bdc <MX_GPIO_Init+0x608>)
 8001978:	f001 f964 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800197c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001980:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001982:	2302      	movs	r3, #2
 8001984:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198a:	2303      	movs	r3, #3
 800198c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800198e:	230a      	movs	r3, #10
 8001990:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001992:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001996:	4619      	mov	r1, r3
 8001998:	4891      	ldr	r0, [pc, #580]	; (8001be0 <MX_GPIO_Init+0x60c>)
 800199a:	f001 f953 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800199e:	23f0      	movs	r3, #240	; 0xf0
 80019a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a2:	2302      	movs	r3, #2
 80019a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019aa:	2300      	movs	r3, #0
 80019ac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80019ae:	230a      	movs	r3, #10
 80019b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80019b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019b6:	4619      	mov	r1, r3
 80019b8:	488a      	ldr	r0, [pc, #552]	; (8001be4 <MX_GPIO_Init+0x610>)
 80019ba:	f001 f943 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80019be:	23f7      	movs	r3, #247	; 0xf7
 80019c0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c2:	2302      	movs	r3, #2
 80019c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ca:	2300      	movs	r3, #0
 80019cc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80019ce:	230e      	movs	r3, #14
 80019d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80019d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019d6:	4619      	mov	r1, r3
 80019d8:	4883      	ldr	r0, [pc, #524]	; (8001be8 <MX_GPIO_Init+0x614>)
 80019da:	f001 f933 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 80019de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e4:	2302      	movs	r3, #2
 80019e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ec:	2300      	movs	r3, #0
 80019ee:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80019f0:	2309      	movs	r3, #9
 80019f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80019f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019f8:	4619      	mov	r1, r3
 80019fa:	4876      	ldr	r0, [pc, #472]	; (8001bd4 <MX_GPIO_Init+0x600>)
 80019fc:	f001 f922 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001a00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a06:	2302      	movs	r3, #2
 8001a08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001a12:	230a      	movs	r3, #10
 8001a14:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001a16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	486d      	ldr	r0, [pc, #436]	; (8001bd4 <MX_GPIO_Init+0x600>)
 8001a1e:	f001 f911 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001a22:	2320      	movs	r3, #32
 8001a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a26:	2301      	movs	r3, #1
 8001a28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001a32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a36:	4619      	mov	r1, r3
 8001a38:	4868      	ldr	r0, [pc, #416]	; (8001bdc <MX_GPIO_Init+0x608>)
 8001a3a:	f001 f903 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001a3e:	2308      	movs	r3, #8
 8001a40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a42:	2302      	movs	r3, #2
 8001a44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001a4e:	230d      	movs	r3, #13
 8001a50:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001a52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a56:	4619      	mov	r1, r3
 8001a58:	4860      	ldr	r0, [pc, #384]	; (8001bdc <MX_GPIO_Init+0x608>)
 8001a5a:	f001 f8f3 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8001a5e:	f241 030c 	movw	r3, #4108	; 0x100c
 8001a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a64:	2301      	movs	r3, #1
 8001a66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001a70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a74:	4619      	mov	r1, r3
 8001a76:	485b      	ldr	r0, [pc, #364]	; (8001be4 <MX_GPIO_Init+0x610>)
 8001a78:	f001 f8e4 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001a7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a82:	2300      	movs	r3, #0
 8001a84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001a8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4856      	ldr	r0, [pc, #344]	; (8001bec <MX_GPIO_Init+0x618>)
 8001a92:	f001 f8d7 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8001a96:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001aa8:	230c      	movs	r3, #12
 8001aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001aac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	484f      	ldr	r0, [pc, #316]	; (8001bf0 <MX_GPIO_Init+0x61c>)
 8001ab4:	f001 f8c6 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001ab8:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001aca:	230e      	movs	r3, #14
 8001acc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001ace:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4843      	ldr	r0, [pc, #268]	; (8001be4 <MX_GPIO_Init+0x610>)
 8001ad6:	f001 f8b5 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001ada:	2308      	movs	r3, #8
 8001adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001aea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aee:	4619      	mov	r1, r3
 8001af0:	483d      	ldr	r0, [pc, #244]	; (8001be8 <MX_GPIO_Init+0x614>)
 8001af2:	f001 f8a7 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001af6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afc:	2302      	movs	r3, #2
 8001afe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b04:	2300      	movs	r3, #0
 8001b06:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001b08:	230d      	movs	r3, #13
 8001b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001b0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b10:	4619      	mov	r1, r3
 8001b12:	4830      	ldr	r0, [pc, #192]	; (8001bd4 <MX_GPIO_Init+0x600>)
 8001b14:	f001 f896 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001b18:	2310      	movs	r3, #16
 8001b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b28:	4619      	mov	r1, r3
 8001b2a:	482c      	ldr	r0, [pc, #176]	; (8001bdc <MX_GPIO_Init+0x608>)
 8001b2c:	f001 f88a 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8001b30:	2304      	movs	r3, #4
 8001b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b34:	2302      	movs	r3, #2
 8001b36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001b40:	230c      	movs	r3, #12
 8001b42:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8001b44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4824      	ldr	r0, [pc, #144]	; (8001bdc <MX_GPIO_Init+0x608>)
 8001b4c:	f001 f87a 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001b50:	f248 0304 	movw	r3, #32772	; 0x8004
 8001b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b56:	2300      	movs	r3, #0
 8001b58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b62:	4619      	mov	r1, r3
 8001b64:	4823      	ldr	r0, [pc, #140]	; (8001bf4 <MX_GPIO_Init+0x620>)
 8001b66:	f001 f86d 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001b6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b70:	2301      	movs	r3, #1
 8001b72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001b7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b80:	4619      	mov	r1, r3
 8001b82:	481c      	ldr	r0, [pc, #112]	; (8001bf4 <MX_GPIO_Init+0x620>)
 8001b84:	f001 f85e 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001b88:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b96:	2300      	movs	r3, #0
 8001b98:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001b9a:	230d      	movs	r3, #13
 8001b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4813      	ldr	r0, [pc, #76]	; (8001bf4 <MX_GPIO_Init+0x620>)
 8001ba6:	f001 f84d 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8001baa:	2301      	movs	r3, #1
 8001bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8001bbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4807      	ldr	r0, [pc, #28]	; (8001be4 <MX_GPIO_Init+0x610>)
 8001bc6:	f001 f83d 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8001bca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bce:	e013      	b.n	8001bf8 <MX_GPIO_Init+0x624>
 8001bd0:	40020400 	.word	0x40020400
 8001bd4:	40021800 	.word	0x40021800
 8001bd8:	40022400 	.word	0x40022400
 8001bdc:	40020c00 	.word	0x40020c00
 8001be0:	40020000 	.word	0x40020000
 8001be4:	40022000 	.word	0x40022000
 8001be8:	40022800 	.word	0x40022800
 8001bec:	40020800 	.word	0x40020800
 8001bf0:	40021400 	.word	0x40021400
 8001bf4:	40021c00 	.word	0x40021c00
 8001bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c02:	2302      	movs	r3, #2
 8001c04:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001c06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4886      	ldr	r0, [pc, #536]	; (8001e28 <MX_GPIO_Init+0x854>)
 8001c0e:	f001 f819 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001c12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001c18:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001c1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001c22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c26:	4619      	mov	r1, r3
 8001c28:	4880      	ldr	r0, [pc, #512]	; (8001e2c <MX_GPIO_Init+0x858>)
 8001c2a:	f001 f80b 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8001c2e:	23c0      	movs	r3, #192	; 0xc0
 8001c30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c32:	2302      	movs	r3, #2
 8001c34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001c3e:	2308      	movs	r3, #8
 8001c40:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c46:	4619      	mov	r1, r3
 8001c48:	4879      	ldr	r0, [pc, #484]	; (8001e30 <MX_GPIO_Init+0x85c>)
 8001c4a:	f000 fffb 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001c4e:	2310      	movs	r3, #16
 8001c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c52:	2302      	movs	r3, #2
 8001c54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001c5e:	230a      	movs	r3, #10
 8001c60:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001c62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c66:	4619      	mov	r1, r3
 8001c68:	4872      	ldr	r0, [pc, #456]	; (8001e34 <MX_GPIO_Init+0x860>)
 8001c6a:	f000 ffeb 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8001c6e:	2328      	movs	r3, #40	; 0x28
 8001c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c72:	2302      	movs	r3, #2
 8001c74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c7e:	230c      	movs	r3, #12
 8001c80:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c86:	4619      	mov	r1, r3
 8001c88:	486a      	ldr	r0, [pc, #424]	; (8001e34 <MX_GPIO_Init+0x860>)
 8001c8a:	f000 ffdb 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001c8e:	23c8      	movs	r3, #200	; 0xc8
 8001c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c92:	2301      	movs	r3, #1
 8001c94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4864      	ldr	r0, [pc, #400]	; (8001e38 <MX_GPIO_Init+0x864>)
 8001ca6:	f000 ffcd 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8001caa:	2308      	movs	r3, #8
 8001cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001cba:	230c      	movs	r3, #12
 8001cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001cbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	485a      	ldr	r0, [pc, #360]	; (8001e30 <MX_GPIO_Init+0x85c>)
 8001cc6:	f000 ffbd 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001cca:	2305      	movs	r3, #5
 8001ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001cda:	230a      	movs	r3, #10
 8001cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4852      	ldr	r0, [pc, #328]	; (8001e30 <MX_GPIO_Init+0x85c>)
 8001ce6:	f000 ffad 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001cea:	2332      	movs	r3, #50	; 0x32
 8001cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cfa:	230b      	movs	r3, #11
 8001cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d02:	4619      	mov	r1, r3
 8001d04:	484a      	ldr	r0, [pc, #296]	; (8001e30 <MX_GPIO_Init+0x85c>)
 8001d06:	f000 ff9d 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d0a:	2304      	movs	r3, #4
 8001d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d16:	2303      	movs	r3, #3
 8001d18:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001d1a:	2309      	movs	r3, #9
 8001d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d22:	4619      	mov	r1, r3
 8001d24:	4845      	ldr	r0, [pc, #276]	; (8001e3c <MX_GPIO_Init+0x868>)
 8001d26:	f000 ff8d 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001d2a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d30:	2302      	movs	r3, #2
 8001d32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001d3c:	2309      	movs	r3, #9
 8001d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d44:	4619      	mov	r1, r3
 8001d46:	483e      	ldr	r0, [pc, #248]	; (8001e40 <MX_GPIO_Init+0x86c>)
 8001d48:	f000 ff7c 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001d4c:	2304      	movs	r3, #4
 8001d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d50:	2300      	movs	r3, #0
 8001d52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001d58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4836      	ldr	r0, [pc, #216]	; (8001e38 <MX_GPIO_Init+0x864>)
 8001d60:	f000 ff70 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001d64:	2386      	movs	r3, #134	; 0x86
 8001d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d70:	2303      	movs	r3, #3
 8001d72:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d74:	230b      	movs	r3, #11
 8001d76:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	482a      	ldr	r0, [pc, #168]	; (8001e28 <MX_GPIO_Init+0x854>)
 8001d80:	f000 ff60 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d84:	2301      	movs	r3, #1
 8001d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d94:	4619      	mov	r1, r3
 8001d96:	4824      	ldr	r0, [pc, #144]	; (8001e28 <MX_GPIO_Init+0x854>)
 8001d98:	f000 ff54 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001d9c:	2350      	movs	r3, #80	; 0x50
 8001d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da0:	2302      	movs	r3, #2
 8001da2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da8:	2300      	movs	r3, #0
 8001daa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001dac:	230d      	movs	r3, #13
 8001dae:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001db4:	4619      	mov	r1, r3
 8001db6:	481c      	ldr	r0, [pc, #112]	; (8001e28 <MX_GPIO_Init+0x854>)
 8001db8:	f000 ff44 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001dbc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dc2:	2312      	movs	r3, #18
 8001dc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001dce:	2304      	movs	r3, #4
 8001dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001dd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4816      	ldr	r0, [pc, #88]	; (8001e34 <MX_GPIO_Init+0x860>)
 8001dda:	f000 ff33 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001dde:	2328      	movs	r3, #40	; 0x28
 8001de0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de2:	2302      	movs	r3, #2
 8001de4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dea:	2303      	movs	r3, #3
 8001dec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001dee:	230a      	movs	r3, #10
 8001df0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001df6:	4619      	mov	r1, r3
 8001df8:	480b      	ldr	r0, [pc, #44]	; (8001e28 <MX_GPIO_Init+0x854>)
 8001dfa:	f000 ff23 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001dfe:	2340      	movs	r3, #64	; 0x40
 8001e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e02:	2302      	movs	r3, #2
 8001e04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e06:	2300      	movs	r3, #0
 8001e08:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001e0e:	2309      	movs	r3, #9
 8001e10:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001e12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e16:	4619      	mov	r1, r3
 8001e18:	4806      	ldr	r0, [pc, #24]	; (8001e34 <MX_GPIO_Init+0x860>)
 8001e1a:	f000 ff13 	bl	8002c44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e1e:	bf00      	nop
 8001e20:	3740      	adds	r7, #64	; 0x40
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40020000 	.word	0x40020000
 8001e2c:	40022000 	.word	0x40022000
 8001e30:	40020800 	.word	0x40020800
 8001e34:	40021c00 	.word	0x40021c00
 8001e38:	40021800 	.word	0x40021800
 8001e3c:	40020400 	.word	0x40020400
 8001e40:	40020c00 	.word	0x40020c00

08001e44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e48:	b672      	cpsid	i
}
 8001e4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e4c:	e7fe      	b.n	8001e4c <Error_Handler+0x8>
	...

08001e50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e56:	4b0f      	ldr	r3, [pc, #60]	; (8001e94 <HAL_MspInit+0x44>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	4a0e      	ldr	r2, [pc, #56]	; (8001e94 <HAL_MspInit+0x44>)
 8001e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e60:	6413      	str	r3, [r2, #64]	; 0x40
 8001e62:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <HAL_MspInit+0x44>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6a:	607b      	str	r3, [r7, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e6e:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <HAL_MspInit+0x44>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e72:	4a08      	ldr	r2, [pc, #32]	; (8001e94 <HAL_MspInit+0x44>)
 8001e74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e78:	6453      	str	r3, [r2, #68]	; 0x44
 8001e7a:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <HAL_MspInit+0x44>)
 8001e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e82:	603b      	str	r3, [r7, #0]
 8001e84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	40023800 	.word	0x40023800

08001e98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08a      	sub	sp, #40	; 0x28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea0:	f107 0314 	add.w	r3, r7, #20
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a21      	ldr	r2, [pc, #132]	; (8001f3c <HAL_ADC_MspInit+0xa4>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d13c      	bne.n	8001f34 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001eba:	4b21      	ldr	r3, [pc, #132]	; (8001f40 <HAL_ADC_MspInit+0xa8>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	4a20      	ldr	r2, [pc, #128]	; (8001f40 <HAL_ADC_MspInit+0xa8>)
 8001ec0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ec6:	4b1e      	ldr	r3, [pc, #120]	; (8001f40 <HAL_ADC_MspInit+0xa8>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ed2:	4b1b      	ldr	r3, [pc, #108]	; (8001f40 <HAL_ADC_MspInit+0xa8>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	4a1a      	ldr	r2, [pc, #104]	; (8001f40 <HAL_ADC_MspInit+0xa8>)
 8001ed8:	f043 0320 	orr.w	r3, r3, #32
 8001edc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ede:	4b18      	ldr	r3, [pc, #96]	; (8001f40 <HAL_ADC_MspInit+0xa8>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	f003 0320 	and.w	r3, r3, #32
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eea:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <HAL_ADC_MspInit+0xa8>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	4a14      	ldr	r2, [pc, #80]	; (8001f40 <HAL_ADC_MspInit+0xa8>)
 8001ef0:	f043 0301 	orr.w	r3, r3, #1
 8001ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef6:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <HAL_ADC_MspInit+0xa8>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	60bb      	str	r3, [r7, #8]
 8001f00:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001f02:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001f06:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f10:	f107 0314 	add.w	r3, r7, #20
 8001f14:	4619      	mov	r1, r3
 8001f16:	480b      	ldr	r0, [pc, #44]	; (8001f44 <HAL_ADC_MspInit+0xac>)
 8001f18:	f000 fe94 	bl	8002c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f20:	2303      	movs	r3, #3
 8001f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f28:	f107 0314 	add.w	r3, r7, #20
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4806      	ldr	r0, [pc, #24]	; (8001f48 <HAL_ADC_MspInit+0xb0>)
 8001f30:	f000 fe88 	bl	8002c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001f34:	bf00      	nop
 8001f36:	3728      	adds	r7, #40	; 0x28
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40012200 	.word	0x40012200
 8001f40:	40023800 	.word	0x40023800
 8001f44:	40021400 	.word	0x40021400
 8001f48:	40020000 	.word	0x40020000

08001f4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b0aa      	sub	sp, #168	; 0xa8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f54:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	60da      	str	r2, [r3, #12]
 8001f62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f64:	f107 0310 	add.w	r3, r7, #16
 8001f68:	2284      	movs	r2, #132	; 0x84
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f004 fdb8 	bl	8006ae2 <memset>
  if(hi2c->Instance==I2C1)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a22      	ldr	r2, [pc, #136]	; (8002000 <HAL_I2C_MspInit+0xb4>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d13c      	bne.n	8001ff6 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001f7c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f80:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001f82:	2300      	movs	r3, #0
 8001f84:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f86:	f107 0310 	add.w	r3, r7, #16
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f002 f932 	bl	80041f4 <HAL_RCCEx_PeriphCLKConfig>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001f96:	f7ff ff55 	bl	8001e44 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f9a:	4b1a      	ldr	r3, [pc, #104]	; (8002004 <HAL_I2C_MspInit+0xb8>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	4a19      	ldr	r2, [pc, #100]	; (8002004 <HAL_I2C_MspInit+0xb8>)
 8001fa0:	f043 0302 	orr.w	r3, r3, #2
 8001fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa6:	4b17      	ldr	r3, [pc, #92]	; (8002004 <HAL_I2C_MspInit+0xb8>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001fb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fba:	2312      	movs	r3, #18
 8001fbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fcc:	2304      	movs	r3, #4
 8001fce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	480b      	ldr	r0, [pc, #44]	; (8002008 <HAL_I2C_MspInit+0xbc>)
 8001fda:	f000 fe33 	bl	8002c44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fde:	4b09      	ldr	r3, [pc, #36]	; (8002004 <HAL_I2C_MspInit+0xb8>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	4a08      	ldr	r2, [pc, #32]	; (8002004 <HAL_I2C_MspInit+0xb8>)
 8001fe4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fea:	4b06      	ldr	r3, [pc, #24]	; (8002004 <HAL_I2C_MspInit+0xb8>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ff2:	60bb      	str	r3, [r7, #8]
 8001ff4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ff6:	bf00      	nop
 8001ff8:	37a8      	adds	r7, #168	; 0xa8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40005400 	.word	0x40005400
 8002004:	40023800 	.word	0x40023800
 8002008:	40020400 	.word	0x40020400

0800200c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b08a      	sub	sp, #40	; 0x28
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a2e      	ldr	r2, [pc, #184]	; (80020e4 <HAL_SPI_MspInit+0xd8>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d155      	bne.n	80020da <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800202e:	4b2e      	ldr	r3, [pc, #184]	; (80020e8 <HAL_SPI_MspInit+0xdc>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	4a2d      	ldr	r2, [pc, #180]	; (80020e8 <HAL_SPI_MspInit+0xdc>)
 8002034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002038:	6413      	str	r3, [r2, #64]	; 0x40
 800203a:	4b2b      	ldr	r3, [pc, #172]	; (80020e8 <HAL_SPI_MspInit+0xdc>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002042:	613b      	str	r3, [r7, #16]
 8002044:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002046:	4b28      	ldr	r3, [pc, #160]	; (80020e8 <HAL_SPI_MspInit+0xdc>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	4a27      	ldr	r2, [pc, #156]	; (80020e8 <HAL_SPI_MspInit+0xdc>)
 800204c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002050:	6313      	str	r3, [r2, #48]	; 0x30
 8002052:	4b25      	ldr	r3, [pc, #148]	; (80020e8 <HAL_SPI_MspInit+0xdc>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800205e:	4b22      	ldr	r3, [pc, #136]	; (80020e8 <HAL_SPI_MspInit+0xdc>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	4a21      	ldr	r2, [pc, #132]	; (80020e8 <HAL_SPI_MspInit+0xdc>)
 8002064:	f043 0302 	orr.w	r3, r3, #2
 8002068:	6313      	str	r3, [r2, #48]	; 0x30
 800206a:	4b1f      	ldr	r3, [pc, #124]	; (80020e8 <HAL_SPI_MspInit+0xdc>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	60bb      	str	r3, [r7, #8]
 8002074:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8002076:	2302      	movs	r3, #2
 8002078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207a:	2302      	movs	r3, #2
 800207c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002082:	2302      	movs	r3, #2
 8002084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002086:	2305      	movs	r3, #5
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800208a:	f107 0314 	add.w	r3, r7, #20
 800208e:	4619      	mov	r1, r3
 8002090:	4816      	ldr	r0, [pc, #88]	; (80020ec <HAL_SPI_MspInit+0xe0>)
 8002092:	f000 fdd7 	bl	8002c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin;
 8002096:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800209a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209c:	2302      	movs	r3, #2
 800209e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020a4:	2302      	movs	r3, #2
 80020a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020a8:	2305      	movs	r3, #5
 80020aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_MISO_D12_GPIO_Port, &GPIO_InitStruct);
 80020ac:	f107 0314 	add.w	r3, r7, #20
 80020b0:	4619      	mov	r1, r3
 80020b2:	480f      	ldr	r0, [pc, #60]	; (80020f0 <HAL_SPI_MspInit+0xe4>)
 80020b4:	f000 fdc6 	bl	8002c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MOSI_PWM_D11_Pin;
 80020b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020be:	2302      	movs	r3, #2
 80020c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c6:	2300      	movs	r3, #0
 80020c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020ca:	2305      	movs	r3, #5
 80020cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_MOSI_PWM_D11_GPIO_Port, &GPIO_InitStruct);
 80020ce:	f107 0314 	add.w	r3, r7, #20
 80020d2:	4619      	mov	r1, r3
 80020d4:	4806      	ldr	r0, [pc, #24]	; (80020f0 <HAL_SPI_MspInit+0xe4>)
 80020d6:	f000 fdb5 	bl	8002c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80020da:	bf00      	nop
 80020dc:	3728      	adds	r7, #40	; 0x28
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40003800 	.word	0x40003800
 80020e8:	40023800 	.word	0x40023800
 80020ec:	40022000 	.word	0x40022000
 80020f0:	40020400 	.word	0x40020400

080020f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b0ac      	sub	sp, #176	; 0xb0
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	605a      	str	r2, [r3, #4]
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	60da      	str	r2, [r3, #12]
 800210a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800210c:	f107 0318 	add.w	r3, r7, #24
 8002110:	2284      	movs	r2, #132	; 0x84
 8002112:	2100      	movs	r1, #0
 8002114:	4618      	mov	r0, r3
 8002116:	f004 fce4 	bl	8006ae2 <memset>
  if(huart->Instance==USART1)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a32      	ldr	r2, [pc, #200]	; (80021e8 <HAL_UART_MspInit+0xf4>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d15c      	bne.n	80021de <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002124:	2340      	movs	r3, #64	; 0x40
 8002126:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002128:	2300      	movs	r3, #0
 800212a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800212c:	f107 0318 	add.w	r3, r7, #24
 8002130:	4618      	mov	r0, r3
 8002132:	f002 f85f 	bl	80041f4 <HAL_RCCEx_PeriphCLKConfig>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800213c:	f7ff fe82 	bl	8001e44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002140:	4b2a      	ldr	r3, [pc, #168]	; (80021ec <HAL_UART_MspInit+0xf8>)
 8002142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002144:	4a29      	ldr	r2, [pc, #164]	; (80021ec <HAL_UART_MspInit+0xf8>)
 8002146:	f043 0310 	orr.w	r3, r3, #16
 800214a:	6453      	str	r3, [r2, #68]	; 0x44
 800214c:	4b27      	ldr	r3, [pc, #156]	; (80021ec <HAL_UART_MspInit+0xf8>)
 800214e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002150:	f003 0310 	and.w	r3, r3, #16
 8002154:	617b      	str	r3, [r7, #20]
 8002156:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002158:	4b24      	ldr	r3, [pc, #144]	; (80021ec <HAL_UART_MspInit+0xf8>)
 800215a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215c:	4a23      	ldr	r2, [pc, #140]	; (80021ec <HAL_UART_MspInit+0xf8>)
 800215e:	f043 0302 	orr.w	r3, r3, #2
 8002162:	6313      	str	r3, [r2, #48]	; 0x30
 8002164:	4b21      	ldr	r3, [pc, #132]	; (80021ec <HAL_UART_MspInit+0xf8>)
 8002166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	613b      	str	r3, [r7, #16]
 800216e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002170:	4b1e      	ldr	r3, [pc, #120]	; (80021ec <HAL_UART_MspInit+0xf8>)
 8002172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002174:	4a1d      	ldr	r2, [pc, #116]	; (80021ec <HAL_UART_MspInit+0xf8>)
 8002176:	f043 0301 	orr.w	r3, r3, #1
 800217a:	6313      	str	r3, [r2, #48]	; 0x30
 800217c:	4b1b      	ldr	r3, [pc, #108]	; (80021ec <HAL_UART_MspInit+0xf8>)
 800217e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002188:	2380      	movs	r3, #128	; 0x80
 800218a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218e:	2302      	movs	r3, #2
 8002190:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	2300      	movs	r3, #0
 8002196:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219a:	2300      	movs	r3, #0
 800219c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021a0:	2307      	movs	r3, #7
 80021a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80021a6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021aa:	4619      	mov	r1, r3
 80021ac:	4810      	ldr	r0, [pc, #64]	; (80021f0 <HAL_UART_MspInit+0xfc>)
 80021ae:	f000 fd49 	bl	8002c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80021b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ba:	2302      	movs	r3, #2
 80021bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c6:	2300      	movs	r3, #0
 80021c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021cc:	2307      	movs	r3, #7
 80021ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80021d2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021d6:	4619      	mov	r1, r3
 80021d8:	4806      	ldr	r0, [pc, #24]	; (80021f4 <HAL_UART_MspInit+0x100>)
 80021da:	f000 fd33 	bl	8002c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80021de:	bf00      	nop
 80021e0:	37b0      	adds	r7, #176	; 0xb0
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40011000 	.word	0x40011000
 80021ec:	40023800 	.word	0x40023800
 80021f0:	40020400 	.word	0x40020400
 80021f4:	40020000 	.word	0x40020000

080021f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021fc:	e7fe      	b.n	80021fc <NMI_Handler+0x4>

080021fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021fe:	b480      	push	{r7}
 8002200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002202:	e7fe      	b.n	8002202 <HardFault_Handler+0x4>

08002204 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002208:	e7fe      	b.n	8002208 <MemManage_Handler+0x4>

0800220a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800220a:	b480      	push	{r7}
 800220c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800220e:	e7fe      	b.n	800220e <BusFault_Handler+0x4>

08002210 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002214:	e7fe      	b.n	8002214 <UsageFault_Handler+0x4>

08002216 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002216:	b480      	push	{r7}
 8002218:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002244:	f000 f940 	bl	80024c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002248:	bf00      	nop
 800224a:	bd80      	pop	{r7, pc}

0800224c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  return 1;
 8002250:	2301      	movs	r3, #1
}
 8002252:	4618      	mov	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <_kill>:

int _kill(int pid, int sig)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002266:	f004 fc8f 	bl	8006b88 <__errno>
 800226a:	4603      	mov	r3, r0
 800226c:	2216      	movs	r2, #22
 800226e:	601a      	str	r2, [r3, #0]
  return -1;
 8002270:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002274:	4618      	mov	r0, r3
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <_exit>:

void _exit (int status)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002284:	f04f 31ff 	mov.w	r1, #4294967295
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7ff ffe7 	bl	800225c <_kill>
  while (1) {}    /* Make sure we hang here */
 800228e:	e7fe      	b.n	800228e <_exit+0x12>

08002290 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]
 80022a0:	e00a      	b.n	80022b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022a2:	f3af 8000 	nop.w
 80022a6:	4601      	mov	r1, r0
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	60ba      	str	r2, [r7, #8]
 80022ae:	b2ca      	uxtb	r2, r1
 80022b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	3301      	adds	r3, #1
 80022b6:	617b      	str	r3, [r7, #20]
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	429a      	cmp	r2, r3
 80022be:	dbf0      	blt.n	80022a2 <_read+0x12>
  }

  return len;
 80022c0:	687b      	ldr	r3, [r7, #4]
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b086      	sub	sp, #24
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	60f8      	str	r0, [r7, #12]
 80022d2:	60b9      	str	r1, [r7, #8]
 80022d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d6:	2300      	movs	r3, #0
 80022d8:	617b      	str	r3, [r7, #20]
 80022da:	e009      	b.n	80022f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	60ba      	str	r2, [r7, #8]
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	3301      	adds	r3, #1
 80022ee:	617b      	str	r3, [r7, #20]
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	dbf1      	blt.n	80022dc <_write+0x12>
  }
  return len;
 80022f8:	687b      	ldr	r3, [r7, #4]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <_close>:

int _close(int file)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800230a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800230e:	4618      	mov	r0, r3
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
 8002322:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800232a:	605a      	str	r2, [r3, #4]
  return 0;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <_isatty>:

int _isatty(int file)
{
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002342:	2301      	movs	r3, #1
}
 8002344:	4618      	mov	r0, r3
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
	...

0800236c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002374:	4a14      	ldr	r2, [pc, #80]	; (80023c8 <_sbrk+0x5c>)
 8002376:	4b15      	ldr	r3, [pc, #84]	; (80023cc <_sbrk+0x60>)
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002380:	4b13      	ldr	r3, [pc, #76]	; (80023d0 <_sbrk+0x64>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d102      	bne.n	800238e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002388:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <_sbrk+0x64>)
 800238a:	4a12      	ldr	r2, [pc, #72]	; (80023d4 <_sbrk+0x68>)
 800238c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800238e:	4b10      	ldr	r3, [pc, #64]	; (80023d0 <_sbrk+0x64>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4413      	add	r3, r2
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	429a      	cmp	r2, r3
 800239a:	d207      	bcs.n	80023ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800239c:	f004 fbf4 	bl	8006b88 <__errno>
 80023a0:	4603      	mov	r3, r0
 80023a2:	220c      	movs	r2, #12
 80023a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023a6:	f04f 33ff 	mov.w	r3, #4294967295
 80023aa:	e009      	b.n	80023c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023ac:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <_sbrk+0x64>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023b2:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <_sbrk+0x64>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4413      	add	r3, r2
 80023ba:	4a05      	ldr	r2, [pc, #20]	; (80023d0 <_sbrk+0x64>)
 80023bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023be:	68fb      	ldr	r3, [r7, #12]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	20050000 	.word	0x20050000
 80023cc:	00000400 	.word	0x00000400
 80023d0:	20000424 	.word	0x20000424
 80023d4:	20000578 	.word	0x20000578

080023d8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023dc:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <SystemInit+0x20>)
 80023de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e2:	4a05      	ldr	r2, [pc, #20]	; (80023f8 <SystemInit+0x20>)
 80023e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023ec:	bf00      	nop
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002434 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002400:	480d      	ldr	r0, [pc, #52]	; (8002438 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002402:	490e      	ldr	r1, [pc, #56]	; (800243c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002404:	4a0e      	ldr	r2, [pc, #56]	; (8002440 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002408:	e002      	b.n	8002410 <LoopCopyDataInit>

0800240a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800240a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800240c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800240e:	3304      	adds	r3, #4

08002410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002414:	d3f9      	bcc.n	800240a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002416:	4a0b      	ldr	r2, [pc, #44]	; (8002444 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002418:	4c0b      	ldr	r4, [pc, #44]	; (8002448 <LoopFillZerobss+0x26>)
  movs r3, #0
 800241a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800241c:	e001      	b.n	8002422 <LoopFillZerobss>

0800241e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800241e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002420:	3204      	adds	r2, #4

08002422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002424:	d3fb      	bcc.n	800241e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002426:	f7ff ffd7 	bl	80023d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800242a:	f004 fbb3 	bl	8006b94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800242e:	f7fe ff1f 	bl	8001270 <main>
  bx  lr    
 8002432:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002434:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002438:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800243c:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002440:	0800922c 	.word	0x0800922c
  ldr r2, =_sbss
 8002444:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002448:	20000578 	.word	0x20000578

0800244c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800244c:	e7fe      	b.n	800244c <ADC_IRQHandler>

0800244e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002452:	2003      	movs	r0, #3
 8002454:	f000 fbc2 	bl	8002bdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002458:	2000      	movs	r0, #0
 800245a:	f000 f805 	bl	8002468 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800245e:	f7ff fcf7 	bl	8001e50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	bd80      	pop	{r7, pc}

08002468 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002470:	4b12      	ldr	r3, [pc, #72]	; (80024bc <HAL_InitTick+0x54>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <HAL_InitTick+0x58>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	4619      	mov	r1, r3
 800247a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800247e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002482:	fbb2 f3f3 	udiv	r3, r2, r3
 8002486:	4618      	mov	r0, r3
 8002488:	f000 fbcf 	bl	8002c2a <HAL_SYSTICK_Config>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e00e      	b.n	80024b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b0f      	cmp	r3, #15
 800249a:	d80a      	bhi.n	80024b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800249c:	2200      	movs	r2, #0
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	f04f 30ff 	mov.w	r0, #4294967295
 80024a4:	f000 fba5 	bl	8002bf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024a8:	4a06      	ldr	r2, [pc, #24]	; (80024c4 <HAL_InitTick+0x5c>)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
 80024b0:	e000      	b.n	80024b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	2000001c 	.word	0x2000001c
 80024c0:	20000024 	.word	0x20000024
 80024c4:	20000020 	.word	0x20000020

080024c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024cc:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <HAL_IncTick+0x20>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	461a      	mov	r2, r3
 80024d2:	4b06      	ldr	r3, [pc, #24]	; (80024ec <HAL_IncTick+0x24>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4413      	add	r3, r2
 80024d8:	4a04      	ldr	r2, [pc, #16]	; (80024ec <HAL_IncTick+0x24>)
 80024da:	6013      	str	r3, [r2, #0]
}
 80024dc:	bf00      	nop
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	20000024 	.word	0x20000024
 80024ec:	20000428 	.word	0x20000428

080024f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  return uwTick;
 80024f4:	4b03      	ldr	r3, [pc, #12]	; (8002504 <HAL_GetTick+0x14>)
 80024f6:	681b      	ldr	r3, [r3, #0]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	20000428 	.word	0x20000428

08002508 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002510:	f7ff ffee 	bl	80024f0 <HAL_GetTick>
 8002514:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002520:	d005      	beq.n	800252e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002522:	4b0a      	ldr	r3, [pc, #40]	; (800254c <HAL_Delay+0x44>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	461a      	mov	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	4413      	add	r3, r2
 800252c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800252e:	bf00      	nop
 8002530:	f7ff ffde 	bl	80024f0 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	429a      	cmp	r2, r3
 800253e:	d8f7      	bhi.n	8002530 <HAL_Delay+0x28>
  {
  }
}
 8002540:	bf00      	nop
 8002542:	bf00      	nop
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20000024 	.word	0x20000024

08002550 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002558:	2300      	movs	r3, #0
 800255a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e031      	b.n	80025ca <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	2b00      	cmp	r3, #0
 800256c:	d109      	bne.n	8002582 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7ff fc92 	bl	8001e98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	f003 0310 	and.w	r3, r3, #16
 800258a:	2b00      	cmp	r3, #0
 800258c:	d116      	bne.n	80025bc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002592:	4b10      	ldr	r3, [pc, #64]	; (80025d4 <HAL_ADC_Init+0x84>)
 8002594:	4013      	ands	r3, r2
 8002596:	f043 0202 	orr.w	r2, r3, #2
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f970 	bl	8002884 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	f023 0303 	bic.w	r3, r3, #3
 80025b2:	f043 0201 	orr.w	r2, r3, #1
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	641a      	str	r2, [r3, #64]	; 0x40
 80025ba:	e001      	b.n	80025c0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	ffffeefd 	.word	0xffffeefd

080025d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80025e2:	2300      	movs	r3, #0
 80025e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d101      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x1c>
 80025f0:	2302      	movs	r3, #2
 80025f2:	e136      	b.n	8002862 <HAL_ADC_ConfigChannel+0x28a>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b09      	cmp	r3, #9
 8002602:	d93a      	bls.n	800267a <HAL_ADC_ConfigChannel+0xa2>
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800260c:	d035      	beq.n	800267a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68d9      	ldr	r1, [r3, #12]
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	b29b      	uxth	r3, r3
 800261a:	461a      	mov	r2, r3
 800261c:	4613      	mov	r3, r2
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	4413      	add	r3, r2
 8002622:	3b1e      	subs	r3, #30
 8002624:	2207      	movs	r2, #7
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	43da      	mvns	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	400a      	ands	r2, r1
 8002632:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a8d      	ldr	r2, [pc, #564]	; (8002870 <HAL_ADC_ConfigChannel+0x298>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d10a      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68d9      	ldr	r1, [r3, #12]
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	061a      	lsls	r2, r3, #24
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002652:	e035      	b.n	80026c0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68d9      	ldr	r1, [r3, #12]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	b29b      	uxth	r3, r3
 8002664:	4618      	mov	r0, r3
 8002666:	4603      	mov	r3, r0
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	4403      	add	r3, r0
 800266c:	3b1e      	subs	r3, #30
 800266e:	409a      	lsls	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	430a      	orrs	r2, r1
 8002676:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002678:	e022      	b.n	80026c0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6919      	ldr	r1, [r3, #16]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	b29b      	uxth	r3, r3
 8002686:	461a      	mov	r2, r3
 8002688:	4613      	mov	r3, r2
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	4413      	add	r3, r2
 800268e:	2207      	movs	r2, #7
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43da      	mvns	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	400a      	ands	r2, r1
 800269c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6919      	ldr	r1, [r3, #16]
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	4618      	mov	r0, r3
 80026b0:	4603      	mov	r3, r0
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	4403      	add	r3, r0
 80026b6:	409a      	lsls	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	430a      	orrs	r2, r1
 80026be:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	2b06      	cmp	r3, #6
 80026c6:	d824      	bhi.n	8002712 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	4613      	mov	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4413      	add	r3, r2
 80026d8:	3b05      	subs	r3, #5
 80026da:	221f      	movs	r2, #31
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43da      	mvns	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	400a      	ands	r2, r1
 80026e8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	4618      	mov	r0, r3
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	3b05      	subs	r3, #5
 8002704:	fa00 f203 	lsl.w	r2, r0, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	635a      	str	r2, [r3, #52]	; 0x34
 8002710:	e04c      	b.n	80027ac <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b0c      	cmp	r3, #12
 8002718:	d824      	bhi.n	8002764 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	4613      	mov	r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	4413      	add	r3, r2
 800272a:	3b23      	subs	r3, #35	; 0x23
 800272c:	221f      	movs	r2, #31
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43da      	mvns	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	400a      	ands	r2, r1
 800273a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	b29b      	uxth	r3, r3
 8002748:	4618      	mov	r0, r3
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	4613      	mov	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	3b23      	subs	r3, #35	; 0x23
 8002756:	fa00 f203 	lsl.w	r2, r0, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	430a      	orrs	r2, r1
 8002760:	631a      	str	r2, [r3, #48]	; 0x30
 8002762:	e023      	b.n	80027ac <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	4613      	mov	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	4413      	add	r3, r2
 8002774:	3b41      	subs	r3, #65	; 0x41
 8002776:	221f      	movs	r2, #31
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43da      	mvns	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	400a      	ands	r2, r1
 8002784:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	b29b      	uxth	r3, r3
 8002792:	4618      	mov	r0, r3
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	4613      	mov	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4413      	add	r3, r2
 800279e:	3b41      	subs	r3, #65	; 0x41
 80027a0:	fa00 f203 	lsl.w	r2, r0, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a30      	ldr	r2, [pc, #192]	; (8002874 <HAL_ADC_ConfigChannel+0x29c>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d10a      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x1f4>
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027be:	d105      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80027c0:	4b2d      	ldr	r3, [pc, #180]	; (8002878 <HAL_ADC_ConfigChannel+0x2a0>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	4a2c      	ldr	r2, [pc, #176]	; (8002878 <HAL_ADC_ConfigChannel+0x2a0>)
 80027c6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80027ca:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a28      	ldr	r2, [pc, #160]	; (8002874 <HAL_ADC_ConfigChannel+0x29c>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d10f      	bne.n	80027f6 <HAL_ADC_ConfigChannel+0x21e>
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2b12      	cmp	r3, #18
 80027dc:	d10b      	bne.n	80027f6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80027de:	4b26      	ldr	r3, [pc, #152]	; (8002878 <HAL_ADC_ConfigChannel+0x2a0>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	4a25      	ldr	r2, [pc, #148]	; (8002878 <HAL_ADC_ConfigChannel+0x2a0>)
 80027e4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80027e8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80027ea:	4b23      	ldr	r3, [pc, #140]	; (8002878 <HAL_ADC_ConfigChannel+0x2a0>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	4a22      	ldr	r2, [pc, #136]	; (8002878 <HAL_ADC_ConfigChannel+0x2a0>)
 80027f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027f4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a1e      	ldr	r2, [pc, #120]	; (8002874 <HAL_ADC_ConfigChannel+0x29c>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d12b      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x280>
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a1a      	ldr	r2, [pc, #104]	; (8002870 <HAL_ADC_ConfigChannel+0x298>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d003      	beq.n	8002812 <HAL_ADC_ConfigChannel+0x23a>
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2b11      	cmp	r3, #17
 8002810:	d122      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002812:	4b19      	ldr	r3, [pc, #100]	; (8002878 <HAL_ADC_ConfigChannel+0x2a0>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	4a18      	ldr	r2, [pc, #96]	; (8002878 <HAL_ADC_ConfigChannel+0x2a0>)
 8002818:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800281c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800281e:	4b16      	ldr	r3, [pc, #88]	; (8002878 <HAL_ADC_ConfigChannel+0x2a0>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	4a15      	ldr	r2, [pc, #84]	; (8002878 <HAL_ADC_ConfigChannel+0x2a0>)
 8002824:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002828:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a10      	ldr	r2, [pc, #64]	; (8002870 <HAL_ADC_ConfigChannel+0x298>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d111      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002834:	4b11      	ldr	r3, [pc, #68]	; (800287c <HAL_ADC_ConfigChannel+0x2a4>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a11      	ldr	r2, [pc, #68]	; (8002880 <HAL_ADC_ConfigChannel+0x2a8>)
 800283a:	fba2 2303 	umull	r2, r3, r2, r3
 800283e:	0c9a      	lsrs	r2, r3, #18
 8002840:	4613      	mov	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800284a:	e002      	b.n	8002852 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	3b01      	subs	r3, #1
 8002850:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1f9      	bne.n	800284c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3714      	adds	r7, #20
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	10000012 	.word	0x10000012
 8002874:	40012000 	.word	0x40012000
 8002878:	40012300 	.word	0x40012300
 800287c:	2000001c 	.word	0x2000001c
 8002880:	431bde83 	.word	0x431bde83

08002884 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800288c:	4b78      	ldr	r3, [pc, #480]	; (8002a70 <ADC_Init+0x1ec>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	4a77      	ldr	r2, [pc, #476]	; (8002a70 <ADC_Init+0x1ec>)
 8002892:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002896:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002898:	4b75      	ldr	r3, [pc, #468]	; (8002a70 <ADC_Init+0x1ec>)
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	4973      	ldr	r1, [pc, #460]	; (8002a70 <ADC_Init+0x1ec>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6859      	ldr	r1, [r3, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	021a      	lsls	r2, r3, #8
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80028d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6859      	ldr	r1, [r3, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689a      	ldr	r2, [r3, #8]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6899      	ldr	r1, [r3, #8]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68da      	ldr	r2, [r3, #12]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	430a      	orrs	r2, r1
 800290c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002912:	4a58      	ldr	r2, [pc, #352]	; (8002a74 <ADC_Init+0x1f0>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d022      	beq.n	800295e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689a      	ldr	r2, [r3, #8]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002926:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6899      	ldr	r1, [r3, #8]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	430a      	orrs	r2, r1
 8002938:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002948:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	6899      	ldr	r1, [r3, #8]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	430a      	orrs	r2, r1
 800295a:	609a      	str	r2, [r3, #8]
 800295c:	e00f      	b.n	800297e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800296c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800297c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 0202 	bic.w	r2, r2, #2
 800298c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6899      	ldr	r1, [r3, #8]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	005a      	lsls	r2, r3, #1
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d01b      	beq.n	80029e4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	685a      	ldr	r2, [r3, #4]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80029ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6859      	ldr	r1, [r3, #4]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d6:	3b01      	subs	r3, #1
 80029d8:	035a      	lsls	r2, r3, #13
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	605a      	str	r2, [r3, #4]
 80029e2:	e007      	b.n	80029f4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	051a      	lsls	r2, r3, #20
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6899      	ldr	r1, [r3, #8]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a36:	025a      	lsls	r2, r3, #9
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689a      	ldr	r2, [r3, #8]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6899      	ldr	r1, [r3, #8]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	029a      	lsls	r2, r3, #10
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	430a      	orrs	r2, r1
 8002a62:	609a      	str	r2, [r3, #8]
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	40012300 	.word	0x40012300
 8002a74:	0f000001 	.word	0x0f000001

08002a78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a88:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <__NVIC_SetPriorityGrouping+0x40>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a94:	4013      	ands	r3, r2
 8002a96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002aa0:	4b06      	ldr	r3, [pc, #24]	; (8002abc <__NVIC_SetPriorityGrouping+0x44>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aa6:	4a04      	ldr	r2, [pc, #16]	; (8002ab8 <__NVIC_SetPriorityGrouping+0x40>)
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	60d3      	str	r3, [r2, #12]
}
 8002aac:	bf00      	nop
 8002aae:	3714      	adds	r7, #20
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	e000ed00 	.word	0xe000ed00
 8002abc:	05fa0000 	.word	0x05fa0000

08002ac0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ac4:	4b04      	ldr	r3, [pc, #16]	; (8002ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	0a1b      	lsrs	r3, r3, #8
 8002aca:	f003 0307 	and.w	r3, r3, #7
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	e000ed00 	.word	0xe000ed00

08002adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	6039      	str	r1, [r7, #0]
 8002ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	db0a      	blt.n	8002b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	490c      	ldr	r1, [pc, #48]	; (8002b28 <__NVIC_SetPriority+0x4c>)
 8002af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afa:	0112      	lsls	r2, r2, #4
 8002afc:	b2d2      	uxtb	r2, r2
 8002afe:	440b      	add	r3, r1
 8002b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b04:	e00a      	b.n	8002b1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	4908      	ldr	r1, [pc, #32]	; (8002b2c <__NVIC_SetPriority+0x50>)
 8002b0c:	79fb      	ldrb	r3, [r7, #7]
 8002b0e:	f003 030f 	and.w	r3, r3, #15
 8002b12:	3b04      	subs	r3, #4
 8002b14:	0112      	lsls	r2, r2, #4
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	440b      	add	r3, r1
 8002b1a:	761a      	strb	r2, [r3, #24]
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	e000e100 	.word	0xe000e100
 8002b2c:	e000ed00 	.word	0xe000ed00

08002b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b089      	sub	sp, #36	; 0x24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f1c3 0307 	rsb	r3, r3, #7
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	bf28      	it	cs
 8002b4e:	2304      	movcs	r3, #4
 8002b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	3304      	adds	r3, #4
 8002b56:	2b06      	cmp	r3, #6
 8002b58:	d902      	bls.n	8002b60 <NVIC_EncodePriority+0x30>
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	3b03      	subs	r3, #3
 8002b5e:	e000      	b.n	8002b62 <NVIC_EncodePriority+0x32>
 8002b60:	2300      	movs	r3, #0
 8002b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b64:	f04f 32ff 	mov.w	r2, #4294967295
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43da      	mvns	r2, r3
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	401a      	ands	r2, r3
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b78:	f04f 31ff 	mov.w	r1, #4294967295
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b82:	43d9      	mvns	r1, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b88:	4313      	orrs	r3, r2
         );
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3724      	adds	r7, #36	; 0x24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
	...

08002b98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ba8:	d301      	bcc.n	8002bae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002baa:	2301      	movs	r3, #1
 8002bac:	e00f      	b.n	8002bce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bae:	4a0a      	ldr	r2, [pc, #40]	; (8002bd8 <SysTick_Config+0x40>)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bb6:	210f      	movs	r1, #15
 8002bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bbc:	f7ff ff8e 	bl	8002adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bc0:	4b05      	ldr	r3, [pc, #20]	; (8002bd8 <SysTick_Config+0x40>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bc6:	4b04      	ldr	r3, [pc, #16]	; (8002bd8 <SysTick_Config+0x40>)
 8002bc8:	2207      	movs	r2, #7
 8002bca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	e000e010 	.word	0xe000e010

08002bdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7ff ff47 	bl	8002a78 <__NVIC_SetPriorityGrouping>
}
 8002bea:	bf00      	nop
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b086      	sub	sp, #24
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	60b9      	str	r1, [r7, #8]
 8002bfc:	607a      	str	r2, [r7, #4]
 8002bfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c00:	2300      	movs	r3, #0
 8002c02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c04:	f7ff ff5c 	bl	8002ac0 <__NVIC_GetPriorityGrouping>
 8002c08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	68b9      	ldr	r1, [r7, #8]
 8002c0e:	6978      	ldr	r0, [r7, #20]
 8002c10:	f7ff ff8e 	bl	8002b30 <NVIC_EncodePriority>
 8002c14:	4602      	mov	r2, r0
 8002c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c1a:	4611      	mov	r1, r2
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff ff5d 	bl	8002adc <__NVIC_SetPriority>
}
 8002c22:	bf00      	nop
 8002c24:	3718      	adds	r7, #24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b082      	sub	sp, #8
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7ff ffb0 	bl	8002b98 <SysTick_Config>
 8002c38:	4603      	mov	r3, r0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
	...

08002c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b089      	sub	sp, #36	; 0x24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002c52:	2300      	movs	r3, #0
 8002c54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002c56:	2300      	movs	r3, #0
 8002c58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c5e:	2300      	movs	r3, #0
 8002c60:	61fb      	str	r3, [r7, #28]
 8002c62:	e175      	b.n	8002f50 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002c64:	2201      	movs	r2, #1
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	4013      	ands	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	f040 8164 	bne.w	8002f4a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f003 0303 	and.w	r3, r3, #3
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d005      	beq.n	8002c9a <HAL_GPIO_Init+0x56>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d130      	bne.n	8002cfc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	2203      	movs	r2, #3
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	43db      	mvns	r3, r3
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	68da      	ldr	r2, [r3, #12]
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	091b      	lsrs	r3, r3, #4
 8002ce6:	f003 0201 	and.w	r2, r3, #1
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f003 0303 	and.w	r3, r3, #3
 8002d04:	2b03      	cmp	r3, #3
 8002d06:	d017      	beq.n	8002d38 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	2203      	movs	r2, #3
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f003 0303 	and.w	r3, r3, #3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d123      	bne.n	8002d8c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	08da      	lsrs	r2, r3, #3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3208      	adds	r2, #8
 8002d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	220f      	movs	r2, #15
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	43db      	mvns	r3, r3
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4013      	ands	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	691a      	ldr	r2, [r3, #16]
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	08da      	lsrs	r2, r3, #3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	3208      	adds	r2, #8
 8002d86:	69b9      	ldr	r1, [r7, #24]
 8002d88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	2203      	movs	r2, #3
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4013      	ands	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f003 0203 	and.w	r2, r3, #3
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 80be 	beq.w	8002f4a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dce:	4b66      	ldr	r3, [pc, #408]	; (8002f68 <HAL_GPIO_Init+0x324>)
 8002dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd2:	4a65      	ldr	r2, [pc, #404]	; (8002f68 <HAL_GPIO_Init+0x324>)
 8002dd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8002dda:	4b63      	ldr	r3, [pc, #396]	; (8002f68 <HAL_GPIO_Init+0x324>)
 8002ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002de6:	4a61      	ldr	r2, [pc, #388]	; (8002f6c <HAL_GPIO_Init+0x328>)
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	089b      	lsrs	r3, r3, #2
 8002dec:	3302      	adds	r3, #2
 8002dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	f003 0303 	and.w	r3, r3, #3
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	220f      	movs	r2, #15
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	43db      	mvns	r3, r3
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4013      	ands	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a58      	ldr	r2, [pc, #352]	; (8002f70 <HAL_GPIO_Init+0x32c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d037      	beq.n	8002e82 <HAL_GPIO_Init+0x23e>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a57      	ldr	r2, [pc, #348]	; (8002f74 <HAL_GPIO_Init+0x330>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d031      	beq.n	8002e7e <HAL_GPIO_Init+0x23a>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a56      	ldr	r2, [pc, #344]	; (8002f78 <HAL_GPIO_Init+0x334>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d02b      	beq.n	8002e7a <HAL_GPIO_Init+0x236>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a55      	ldr	r2, [pc, #340]	; (8002f7c <HAL_GPIO_Init+0x338>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d025      	beq.n	8002e76 <HAL_GPIO_Init+0x232>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a54      	ldr	r2, [pc, #336]	; (8002f80 <HAL_GPIO_Init+0x33c>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d01f      	beq.n	8002e72 <HAL_GPIO_Init+0x22e>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a53      	ldr	r2, [pc, #332]	; (8002f84 <HAL_GPIO_Init+0x340>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d019      	beq.n	8002e6e <HAL_GPIO_Init+0x22a>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a52      	ldr	r2, [pc, #328]	; (8002f88 <HAL_GPIO_Init+0x344>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d013      	beq.n	8002e6a <HAL_GPIO_Init+0x226>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a51      	ldr	r2, [pc, #324]	; (8002f8c <HAL_GPIO_Init+0x348>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d00d      	beq.n	8002e66 <HAL_GPIO_Init+0x222>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a50      	ldr	r2, [pc, #320]	; (8002f90 <HAL_GPIO_Init+0x34c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d007      	beq.n	8002e62 <HAL_GPIO_Init+0x21e>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a4f      	ldr	r2, [pc, #316]	; (8002f94 <HAL_GPIO_Init+0x350>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d101      	bne.n	8002e5e <HAL_GPIO_Init+0x21a>
 8002e5a:	2309      	movs	r3, #9
 8002e5c:	e012      	b.n	8002e84 <HAL_GPIO_Init+0x240>
 8002e5e:	230a      	movs	r3, #10
 8002e60:	e010      	b.n	8002e84 <HAL_GPIO_Init+0x240>
 8002e62:	2308      	movs	r3, #8
 8002e64:	e00e      	b.n	8002e84 <HAL_GPIO_Init+0x240>
 8002e66:	2307      	movs	r3, #7
 8002e68:	e00c      	b.n	8002e84 <HAL_GPIO_Init+0x240>
 8002e6a:	2306      	movs	r3, #6
 8002e6c:	e00a      	b.n	8002e84 <HAL_GPIO_Init+0x240>
 8002e6e:	2305      	movs	r3, #5
 8002e70:	e008      	b.n	8002e84 <HAL_GPIO_Init+0x240>
 8002e72:	2304      	movs	r3, #4
 8002e74:	e006      	b.n	8002e84 <HAL_GPIO_Init+0x240>
 8002e76:	2303      	movs	r3, #3
 8002e78:	e004      	b.n	8002e84 <HAL_GPIO_Init+0x240>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e002      	b.n	8002e84 <HAL_GPIO_Init+0x240>
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e000      	b.n	8002e84 <HAL_GPIO_Init+0x240>
 8002e82:	2300      	movs	r3, #0
 8002e84:	69fa      	ldr	r2, [r7, #28]
 8002e86:	f002 0203 	and.w	r2, r2, #3
 8002e8a:	0092      	lsls	r2, r2, #2
 8002e8c:	4093      	lsls	r3, r2
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e94:	4935      	ldr	r1, [pc, #212]	; (8002f6c <HAL_GPIO_Init+0x328>)
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	089b      	lsrs	r3, r3, #2
 8002e9a:	3302      	adds	r3, #2
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ea2:	4b3d      	ldr	r3, [pc, #244]	; (8002f98 <HAL_GPIO_Init+0x354>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	43db      	mvns	r3, r3
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ec6:	4a34      	ldr	r2, [pc, #208]	; (8002f98 <HAL_GPIO_Init+0x354>)
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ecc:	4b32      	ldr	r3, [pc, #200]	; (8002f98 <HAL_GPIO_Init+0x354>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ef0:	4a29      	ldr	r2, [pc, #164]	; (8002f98 <HAL_GPIO_Init+0x354>)
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ef6:	4b28      	ldr	r3, [pc, #160]	; (8002f98 <HAL_GPIO_Init+0x354>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	43db      	mvns	r3, r3
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	4013      	ands	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d003      	beq.n	8002f1a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f1a:	4a1f      	ldr	r2, [pc, #124]	; (8002f98 <HAL_GPIO_Init+0x354>)
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f20:	4b1d      	ldr	r3, [pc, #116]	; (8002f98 <HAL_GPIO_Init+0x354>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d003      	beq.n	8002f44 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f44:	4a14      	ldr	r2, [pc, #80]	; (8002f98 <HAL_GPIO_Init+0x354>)
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	61fb      	str	r3, [r7, #28]
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	2b0f      	cmp	r3, #15
 8002f54:	f67f ae86 	bls.w	8002c64 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002f58:	bf00      	nop
 8002f5a:	bf00      	nop
 8002f5c:	3724      	adds	r7, #36	; 0x24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	40013800 	.word	0x40013800
 8002f70:	40020000 	.word	0x40020000
 8002f74:	40020400 	.word	0x40020400
 8002f78:	40020800 	.word	0x40020800
 8002f7c:	40020c00 	.word	0x40020c00
 8002f80:	40021000 	.word	0x40021000
 8002f84:	40021400 	.word	0x40021400
 8002f88:	40021800 	.word	0x40021800
 8002f8c:	40021c00 	.word	0x40021c00
 8002f90:	40022000 	.word	0x40022000
 8002f94:	40022400 	.word	0x40022400
 8002f98:	40013c00 	.word	0x40013c00

08002f9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	807b      	strh	r3, [r7, #2]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fac:	787b      	ldrb	r3, [r7, #1]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fb2:	887a      	ldrh	r2, [r7, #2]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002fb8:	e003      	b.n	8002fc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002fba:	887b      	ldrh	r3, [r7, #2]
 8002fbc:	041a      	lsls	r2, r3, #16
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	619a      	str	r2, [r3, #24]
}
 8002fc2:	bf00      	nop
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
	...

08002fd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e07f      	b.n	80030e2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d106      	bne.n	8002ffc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7fe ffa8 	bl	8001f4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2224      	movs	r2, #36	; 0x24
 8003000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 0201 	bic.w	r2, r2, #1
 8003012:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003020:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003030:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d107      	bne.n	800304a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	689a      	ldr	r2, [r3, #8]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003046:	609a      	str	r2, [r3, #8]
 8003048:	e006      	b.n	8003058 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689a      	ldr	r2, [r3, #8]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003056:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	2b02      	cmp	r3, #2
 800305e:	d104      	bne.n	800306a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003068:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6859      	ldr	r1, [r3, #4]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	4b1d      	ldr	r3, [pc, #116]	; (80030ec <HAL_I2C_Init+0x11c>)
 8003076:	430b      	orrs	r3, r1
 8003078:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68da      	ldr	r2, [r3, #12]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003088:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	691a      	ldr	r2, [r3, #16]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	69d9      	ldr	r1, [r3, #28]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a1a      	ldr	r2, [r3, #32]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f042 0201 	orr.w	r2, r2, #1
 80030c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2220      	movs	r2, #32
 80030ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	02008000 	.word	0x02008000

080030f0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b088      	sub	sp, #32
 80030f4:	af02      	add	r7, sp, #8
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	4608      	mov	r0, r1
 80030fa:	4611      	mov	r1, r2
 80030fc:	461a      	mov	r2, r3
 80030fe:	4603      	mov	r3, r0
 8003100:	817b      	strh	r3, [r7, #10]
 8003102:	460b      	mov	r3, r1
 8003104:	813b      	strh	r3, [r7, #8]
 8003106:	4613      	mov	r3, r2
 8003108:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b20      	cmp	r3, #32
 8003114:	f040 80fd 	bne.w	8003312 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003118:	6a3b      	ldr	r3, [r7, #32]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d002      	beq.n	8003124 <HAL_I2C_Mem_Read+0x34>
 800311e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003120:	2b00      	cmp	r3, #0
 8003122:	d105      	bne.n	8003130 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f44f 7200 	mov.w	r2, #512	; 0x200
 800312a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e0f1      	b.n	8003314 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003136:	2b01      	cmp	r3, #1
 8003138:	d101      	bne.n	800313e <HAL_I2C_Mem_Read+0x4e>
 800313a:	2302      	movs	r3, #2
 800313c:	e0ea      	b.n	8003314 <HAL_I2C_Mem_Read+0x224>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003146:	f7ff f9d3 	bl	80024f0 <HAL_GetTick>
 800314a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	2319      	movs	r3, #25
 8003152:	2201      	movs	r2, #1
 8003154:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f000 f95b 	bl	8003414 <I2C_WaitOnFlagUntilTimeout>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e0d5      	b.n	8003314 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2222      	movs	r2, #34	; 0x22
 800316c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2240      	movs	r2, #64	; 0x40
 8003174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6a3a      	ldr	r2, [r7, #32]
 8003182:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003188:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003190:	88f8      	ldrh	r0, [r7, #6]
 8003192:	893a      	ldrh	r2, [r7, #8]
 8003194:	8979      	ldrh	r1, [r7, #10]
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	9301      	str	r3, [sp, #4]
 800319a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	4603      	mov	r3, r0
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 f8bf 	bl	8003324 <I2C_RequestMemoryRead>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d005      	beq.n	80031b8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e0ad      	b.n	8003314 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031bc:	b29b      	uxth	r3, r3
 80031be:	2bff      	cmp	r3, #255	; 0xff
 80031c0:	d90e      	bls.n	80031e0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	22ff      	movs	r2, #255	; 0xff
 80031c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031cc:	b2da      	uxtb	r2, r3
 80031ce:	8979      	ldrh	r1, [r7, #10]
 80031d0:	4b52      	ldr	r3, [pc, #328]	; (800331c <HAL_I2C_Mem_Read+0x22c>)
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 fab7 	bl	800374c <I2C_TransferConfig>
 80031de:	e00f      	b.n	8003200 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ee:	b2da      	uxtb	r2, r3
 80031f0:	8979      	ldrh	r1, [r7, #10]
 80031f2:	4b4a      	ldr	r3, [pc, #296]	; (800331c <HAL_I2C_Mem_Read+0x22c>)
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f000 faa6 	bl	800374c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003206:	2200      	movs	r2, #0
 8003208:	2104      	movs	r1, #4
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f000 f902 	bl	8003414 <I2C_WaitOnFlagUntilTimeout>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e07c      	b.n	8003314 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	b2d2      	uxtb	r2, r2
 8003226:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322c:	1c5a      	adds	r2, r3, #1
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003236:	3b01      	subs	r3, #1
 8003238:	b29a      	uxth	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003242:	b29b      	uxth	r3, r3
 8003244:	3b01      	subs	r3, #1
 8003246:	b29a      	uxth	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003250:	b29b      	uxth	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d034      	beq.n	80032c0 <HAL_I2C_Mem_Read+0x1d0>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800325a:	2b00      	cmp	r3, #0
 800325c:	d130      	bne.n	80032c0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003264:	2200      	movs	r2, #0
 8003266:	2180      	movs	r1, #128	; 0x80
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f000 f8d3 	bl	8003414 <I2C_WaitOnFlagUntilTimeout>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e04d      	b.n	8003314 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800327c:	b29b      	uxth	r3, r3
 800327e:	2bff      	cmp	r3, #255	; 0xff
 8003280:	d90e      	bls.n	80032a0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	22ff      	movs	r2, #255	; 0xff
 8003286:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800328c:	b2da      	uxtb	r2, r3
 800328e:	8979      	ldrh	r1, [r7, #10]
 8003290:	2300      	movs	r3, #0
 8003292:	9300      	str	r3, [sp, #0]
 8003294:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 fa57 	bl	800374c <I2C_TransferConfig>
 800329e:	e00f      	b.n	80032c0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ae:	b2da      	uxtb	r2, r3
 80032b0:	8979      	ldrh	r1, [r7, #10]
 80032b2:	2300      	movs	r3, #0
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 fa46 	bl	800374c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d19a      	bne.n	8003200 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f000 f920 	bl	8003514 <I2C_WaitOnSTOPFlagUntilTimeout>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e01a      	b.n	8003314 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2220      	movs	r2, #32
 80032e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6859      	ldr	r1, [r3, #4]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <HAL_I2C_Mem_Read+0x230>)
 80032f2:	400b      	ands	r3, r1
 80032f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2220      	movs	r2, #32
 80032fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800330e:	2300      	movs	r3, #0
 8003310:	e000      	b.n	8003314 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003312:	2302      	movs	r3, #2
  }
}
 8003314:	4618      	mov	r0, r3
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	80002400 	.word	0x80002400
 8003320:	fe00e800 	.word	0xfe00e800

08003324 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af02      	add	r7, sp, #8
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	4608      	mov	r0, r1
 800332e:	4611      	mov	r1, r2
 8003330:	461a      	mov	r2, r3
 8003332:	4603      	mov	r3, r0
 8003334:	817b      	strh	r3, [r7, #10]
 8003336:	460b      	mov	r3, r1
 8003338:	813b      	strh	r3, [r7, #8]
 800333a:	4613      	mov	r3, r2
 800333c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800333e:	88fb      	ldrh	r3, [r7, #6]
 8003340:	b2da      	uxtb	r2, r3
 8003342:	8979      	ldrh	r1, [r7, #10]
 8003344:	4b20      	ldr	r3, [pc, #128]	; (80033c8 <I2C_RequestMemoryRead+0xa4>)
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	2300      	movs	r3, #0
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f000 f9fe 	bl	800374c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003350:	69fa      	ldr	r2, [r7, #28]
 8003352:	69b9      	ldr	r1, [r7, #24]
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f000 f89d 	bl	8003494 <I2C_WaitOnTXISFlagUntilTimeout>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e02c      	b.n	80033be <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003364:	88fb      	ldrh	r3, [r7, #6]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d105      	bne.n	8003376 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800336a:	893b      	ldrh	r3, [r7, #8]
 800336c:	b2da      	uxtb	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	629a      	str	r2, [r3, #40]	; 0x28
 8003374:	e015      	b.n	80033a2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003376:	893b      	ldrh	r3, [r7, #8]
 8003378:	0a1b      	lsrs	r3, r3, #8
 800337a:	b29b      	uxth	r3, r3
 800337c:	b2da      	uxtb	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003384:	69fa      	ldr	r2, [r7, #28]
 8003386:	69b9      	ldr	r1, [r7, #24]
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f000 f883 	bl	8003494 <I2C_WaitOnTXISFlagUntilTimeout>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e012      	b.n	80033be <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003398:	893b      	ldrh	r3, [r7, #8]
 800339a:	b2da      	uxtb	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	2200      	movs	r2, #0
 80033aa:	2140      	movs	r1, #64	; 0x40
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f000 f831 	bl	8003414 <I2C_WaitOnFlagUntilTimeout>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e000      	b.n	80033be <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	80002000 	.word	0x80002000

080033cc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d103      	bne.n	80033ea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2200      	movs	r2, #0
 80033e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d007      	beq.n	8003408 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	699a      	ldr	r2, [r3, #24]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0201 	orr.w	r2, r2, #1
 8003406:	619a      	str	r2, [r3, #24]
  }
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	603b      	str	r3, [r7, #0]
 8003420:	4613      	mov	r3, r2
 8003422:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003424:	e022      	b.n	800346c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800342c:	d01e      	beq.n	800346c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800342e:	f7ff f85f 	bl	80024f0 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	429a      	cmp	r2, r3
 800343c:	d302      	bcc.n	8003444 <I2C_WaitOnFlagUntilTimeout+0x30>
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d113      	bne.n	800346c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003448:	f043 0220 	orr.w	r2, r3, #32
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2220      	movs	r2, #32
 8003454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e00f      	b.n	800348c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	699a      	ldr	r2, [r3, #24]
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	4013      	ands	r3, r2
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	429a      	cmp	r2, r3
 800347a:	bf0c      	ite	eq
 800347c:	2301      	moveq	r3, #1
 800347e:	2300      	movne	r3, #0
 8003480:	b2db      	uxtb	r3, r3
 8003482:	461a      	mov	r2, r3
 8003484:	79fb      	ldrb	r3, [r7, #7]
 8003486:	429a      	cmp	r2, r3
 8003488:	d0cd      	beq.n	8003426 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034a0:	e02c      	b.n	80034fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	68b9      	ldr	r1, [r7, #8]
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 f870 	bl	800358c <I2C_IsErrorOccurred>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e02a      	b.n	800350c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034bc:	d01e      	beq.n	80034fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034be:	f7ff f817 	bl	80024f0 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	68ba      	ldr	r2, [r7, #8]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d302      	bcc.n	80034d4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d113      	bne.n	80034fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d8:	f043 0220 	orr.w	r2, r3, #32
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2220      	movs	r2, #32
 80034e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e007      	b.n	800350c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b02      	cmp	r3, #2
 8003508:	d1cb      	bne.n	80034a2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003520:	e028      	b.n	8003574 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	68b9      	ldr	r1, [r7, #8]
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 f830 	bl	800358c <I2C_IsErrorOccurred>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e026      	b.n	8003584 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003536:	f7fe ffdb 	bl	80024f0 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	429a      	cmp	r2, r3
 8003544:	d302      	bcc.n	800354c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d113      	bne.n	8003574 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003550:	f043 0220 	orr.w	r2, r3, #32
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2220      	movs	r2, #32
 800355c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e007      	b.n	8003584 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	f003 0320 	and.w	r3, r3, #32
 800357e:	2b20      	cmp	r3, #32
 8003580:	d1cf      	bne.n	8003522 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b08a      	sub	sp, #40	; 0x28
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003598:	2300      	movs	r3, #0
 800359a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80035a6:	2300      	movs	r3, #0
 80035a8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	f003 0310 	and.w	r3, r3, #16
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d068      	beq.n	800368a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2210      	movs	r2, #16
 80035be:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80035c0:	e049      	b.n	8003656 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c8:	d045      	beq.n	8003656 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80035ca:	f7fe ff91 	bl	80024f0 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	68ba      	ldr	r2, [r7, #8]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d302      	bcc.n	80035e0 <I2C_IsErrorOccurred+0x54>
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d13a      	bne.n	8003656 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035f2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003602:	d121      	bne.n	8003648 <I2C_IsErrorOccurred+0xbc>
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800360a:	d01d      	beq.n	8003648 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800360c:	7cfb      	ldrb	r3, [r7, #19]
 800360e:	2b20      	cmp	r3, #32
 8003610:	d01a      	beq.n	8003648 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003620:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003622:	f7fe ff65 	bl	80024f0 <HAL_GetTick>
 8003626:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003628:	e00e      	b.n	8003648 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800362a:	f7fe ff61 	bl	80024f0 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b19      	cmp	r3, #25
 8003636:	d907      	bls.n	8003648 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	f043 0320 	orr.w	r3, r3, #32
 800363e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003646:	e006      	b.n	8003656 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	f003 0320 	and.w	r3, r3, #32
 8003652:	2b20      	cmp	r3, #32
 8003654:	d1e9      	bne.n	800362a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	f003 0320 	and.w	r3, r3, #32
 8003660:	2b20      	cmp	r3, #32
 8003662:	d003      	beq.n	800366c <I2C_IsErrorOccurred+0xe0>
 8003664:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003668:	2b00      	cmp	r3, #0
 800366a:	d0aa      	beq.n	80035c2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800366c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003670:	2b00      	cmp	r3, #0
 8003672:	d103      	bne.n	800367c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2220      	movs	r2, #32
 800367a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800367c:	6a3b      	ldr	r3, [r7, #32]
 800367e:	f043 0304 	orr.w	r3, r3, #4
 8003682:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00b      	beq.n	80036b4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800369c:	6a3b      	ldr	r3, [r7, #32]
 800369e:	f043 0301 	orr.w	r3, r3, #1
 80036a2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00b      	beq.n	80036d6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80036be:	6a3b      	ldr	r3, [r7, #32]
 80036c0:	f043 0308 	orr.w	r3, r3, #8
 80036c4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00b      	beq.n	80036f8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80036e0:	6a3b      	ldr	r3, [r7, #32]
 80036e2:	f043 0302 	orr.w	r3, r3, #2
 80036e6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80036f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d01c      	beq.n	800373a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f7ff fe63 	bl	80033cc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	6859      	ldr	r1, [r3, #4]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	4b0d      	ldr	r3, [pc, #52]	; (8003748 <I2C_IsErrorOccurred+0x1bc>)
 8003712:	400b      	ands	r3, r1
 8003714:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800371a:	6a3b      	ldr	r3, [r7, #32]
 800371c:	431a      	orrs	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2220      	movs	r2, #32
 8003726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800373a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800373e:	4618      	mov	r0, r3
 8003740:	3728      	adds	r7, #40	; 0x28
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	fe00e800 	.word	0xfe00e800

0800374c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800374c:	b480      	push	{r7}
 800374e:	b087      	sub	sp, #28
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	607b      	str	r3, [r7, #4]
 8003756:	460b      	mov	r3, r1
 8003758:	817b      	strh	r3, [r7, #10]
 800375a:	4613      	mov	r3, r2
 800375c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800375e:	897b      	ldrh	r3, [r7, #10]
 8003760:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003764:	7a7b      	ldrb	r3, [r7, #9]
 8003766:	041b      	lsls	r3, r3, #16
 8003768:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800376c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003772:	6a3b      	ldr	r3, [r7, #32]
 8003774:	4313      	orrs	r3, r2
 8003776:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800377a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	6a3b      	ldr	r3, [r7, #32]
 8003784:	0d5b      	lsrs	r3, r3, #21
 8003786:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800378a:	4b08      	ldr	r3, [pc, #32]	; (80037ac <I2C_TransferConfig+0x60>)
 800378c:	430b      	orrs	r3, r1
 800378e:	43db      	mvns	r3, r3
 8003790:	ea02 0103 	and.w	r1, r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	430a      	orrs	r2, r1
 800379c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800379e:	bf00      	nop
 80037a0:	371c      	adds	r7, #28
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	03ff63ff 	.word	0x03ff63ff

080037b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b20      	cmp	r3, #32
 80037c4:	d138      	bne.n	8003838 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d101      	bne.n	80037d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80037d0:	2302      	movs	r3, #2
 80037d2:	e032      	b.n	800383a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2224      	movs	r2, #36	; 0x24
 80037e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0201 	bic.w	r2, r2, #1
 80037f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003802:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6819      	ldr	r1, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0201 	orr.w	r2, r2, #1
 8003822:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2220      	movs	r2, #32
 8003828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003834:	2300      	movs	r3, #0
 8003836:	e000      	b.n	800383a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003838:	2302      	movs	r3, #2
  }
}
 800383a:	4618      	mov	r0, r3
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003846:	b480      	push	{r7}
 8003848:	b085      	sub	sp, #20
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
 800384e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b20      	cmp	r3, #32
 800385a:	d139      	bne.n	80038d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003862:	2b01      	cmp	r3, #1
 8003864:	d101      	bne.n	800386a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003866:	2302      	movs	r3, #2
 8003868:	e033      	b.n	80038d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2224      	movs	r2, #36	; 0x24
 8003876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0201 	bic.w	r2, r2, #1
 8003888:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003898:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	021b      	lsls	r3, r3, #8
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0201 	orr.w	r2, r2, #1
 80038ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2220      	movs	r2, #32
 80038c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038cc:	2300      	movs	r3, #0
 80038ce:	e000      	b.n	80038d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80038d0:	2302      	movs	r3, #2
  }
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3714      	adds	r7, #20
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
	...

080038e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80038e8:	2300      	movs	r3, #0
 80038ea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e291      	b.n	8003e1a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 8087 	beq.w	8003a12 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003904:	4b96      	ldr	r3, [pc, #600]	; (8003b60 <HAL_RCC_OscConfig+0x280>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f003 030c 	and.w	r3, r3, #12
 800390c:	2b04      	cmp	r3, #4
 800390e:	d00c      	beq.n	800392a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003910:	4b93      	ldr	r3, [pc, #588]	; (8003b60 <HAL_RCC_OscConfig+0x280>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f003 030c 	and.w	r3, r3, #12
 8003918:	2b08      	cmp	r3, #8
 800391a:	d112      	bne.n	8003942 <HAL_RCC_OscConfig+0x62>
 800391c:	4b90      	ldr	r3, [pc, #576]	; (8003b60 <HAL_RCC_OscConfig+0x280>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003924:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003928:	d10b      	bne.n	8003942 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800392a:	4b8d      	ldr	r3, [pc, #564]	; (8003b60 <HAL_RCC_OscConfig+0x280>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d06c      	beq.n	8003a10 <HAL_RCC_OscConfig+0x130>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d168      	bne.n	8003a10 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e26b      	b.n	8003e1a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800394a:	d106      	bne.n	800395a <HAL_RCC_OscConfig+0x7a>
 800394c:	4b84      	ldr	r3, [pc, #528]	; (8003b60 <HAL_RCC_OscConfig+0x280>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a83      	ldr	r2, [pc, #524]	; (8003b60 <HAL_RCC_OscConfig+0x280>)
 8003952:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003956:	6013      	str	r3, [r2, #0]
 8003958:	e02e      	b.n	80039b8 <HAL_RCC_OscConfig+0xd8>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10c      	bne.n	800397c <HAL_RCC_OscConfig+0x9c>
 8003962:	4b7f      	ldr	r3, [pc, #508]	; (8003b60 <HAL_RCC_OscConfig+0x280>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a7e      	ldr	r2, [pc, #504]	; (8003b60 <HAL_RCC_OscConfig+0x280>)
 8003968:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800396c:	6013      	str	r3, [r2, #0]
 800396e:	4b7c      	ldr	r3, [pc, #496]	; (8003b60 <HAL_RCC_OscConfig+0x280>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a7b      	ldr	r2, [pc, #492]	; (8003b60 <HAL_RCC_OscConfig+0x280>)
 8003974:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003978:	6013      	str	r3, [r2, #0]
 800397a:	e01d      	b.n	80039b8 <HAL_RCC_OscConfig+0xd8>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003984:	d10c      	bne.n	80039a0 <HAL_RCC_OscConfig+0xc0>
 8003986:	4b76      	ldr	r3, [pc, #472]	; (8003b60 <HAL_RCC_OscConfig+0x280>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a75      	ldr	r2, [pc, #468]	; (8003b60 <HAL_RCC_OscConfig+0x280>)
 800398c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003990:	6013      	str	r3, [r2, #0]
 8003992:	4b73      	ldr	r3, [pc, #460]	; (8003b60 <HAL_RCC_OscConfig+0x280>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a72      	ldr	r2, [pc, #456]	; (8003b60 <HAL_RCC_OscConfig+0x280>)
 8003998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800399c:	6013      	str	r3, [r2, #0]
 800399e:	e00b      	b.n	80039b8 <HAL_RCC_OscConfig+0xd8>
 80039a0:	4b6f      	ldr	r3, [pc, #444]	; (8003b60 <HAL_RCC_OscConfig+0x280>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a6e      	ldr	r2, [pc, #440]	; (8003b60 <HAL_RCC_OscConfig+0x280>)
 80039a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039aa:	6013      	str	r3, [r2, #0]
 80039ac:	4b6c      	ldr	r3, [pc, #432]	; (8003b60 <HAL_RCC_OscConfig+0x280>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a6b      	ldr	r2, [pc, #428]	; (8003b60 <HAL_RCC_OscConfig+0x280>)
 80039b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d013      	beq.n	80039e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c0:	f7fe fd96 	bl	80024f0 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039c8:	f7fe fd92 	bl	80024f0 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b64      	cmp	r3, #100	; 0x64
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e21f      	b.n	8003e1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039da:	4b61      	ldr	r3, [pc, #388]	; (8003b60 <HAL_RCC_OscConfig+0x280>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d0f0      	beq.n	80039c8 <HAL_RCC_OscConfig+0xe8>
 80039e6:	e014      	b.n	8003a12 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e8:	f7fe fd82 	bl	80024f0 <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039f0:	f7fe fd7e 	bl	80024f0 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b64      	cmp	r3, #100	; 0x64
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e20b      	b.n	8003e1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a02:	4b57      	ldr	r3, [pc, #348]	; (8003b60 <HAL_RCC_OscConfig+0x280>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f0      	bne.n	80039f0 <HAL_RCC_OscConfig+0x110>
 8003a0e:	e000      	b.n	8003a12 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d069      	beq.n	8003af2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a1e:	4b50      	ldr	r3, [pc, #320]	; (8003b60 <HAL_RCC_OscConfig+0x280>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 030c 	and.w	r3, r3, #12
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00b      	beq.n	8003a42 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a2a:	4b4d      	ldr	r3, [pc, #308]	; (8003b60 <HAL_RCC_OscConfig+0x280>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 030c 	and.w	r3, r3, #12
 8003a32:	2b08      	cmp	r3, #8
 8003a34:	d11c      	bne.n	8003a70 <HAL_RCC_OscConfig+0x190>
 8003a36:	4b4a      	ldr	r3, [pc, #296]	; (8003b60 <HAL_RCC_OscConfig+0x280>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d116      	bne.n	8003a70 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a42:	4b47      	ldr	r3, [pc, #284]	; (8003b60 <HAL_RCC_OscConfig+0x280>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d005      	beq.n	8003a5a <HAL_RCC_OscConfig+0x17a>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d001      	beq.n	8003a5a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e1df      	b.n	8003e1a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a5a:	4b41      	ldr	r3, [pc, #260]	; (8003b60 <HAL_RCC_OscConfig+0x280>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	493d      	ldr	r1, [pc, #244]	; (8003b60 <HAL_RCC_OscConfig+0x280>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a6e:	e040      	b.n	8003af2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d023      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a78:	4b39      	ldr	r3, [pc, #228]	; (8003b60 <HAL_RCC_OscConfig+0x280>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a38      	ldr	r2, [pc, #224]	; (8003b60 <HAL_RCC_OscConfig+0x280>)
 8003a7e:	f043 0301 	orr.w	r3, r3, #1
 8003a82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a84:	f7fe fd34 	bl	80024f0 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a8c:	f7fe fd30 	bl	80024f0 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e1bd      	b.n	8003e1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a9e:	4b30      	ldr	r3, [pc, #192]	; (8003b60 <HAL_RCC_OscConfig+0x280>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d0f0      	beq.n	8003a8c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aaa:	4b2d      	ldr	r3, [pc, #180]	; (8003b60 <HAL_RCC_OscConfig+0x280>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	4929      	ldr	r1, [pc, #164]	; (8003b60 <HAL_RCC_OscConfig+0x280>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	600b      	str	r3, [r1, #0]
 8003abe:	e018      	b.n	8003af2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ac0:	4b27      	ldr	r3, [pc, #156]	; (8003b60 <HAL_RCC_OscConfig+0x280>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a26      	ldr	r2, [pc, #152]	; (8003b60 <HAL_RCC_OscConfig+0x280>)
 8003ac6:	f023 0301 	bic.w	r3, r3, #1
 8003aca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003acc:	f7fe fd10 	bl	80024f0 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ad4:	f7fe fd0c 	bl	80024f0 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e199      	b.n	8003e1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ae6:	4b1e      	ldr	r3, [pc, #120]	; (8003b60 <HAL_RCC_OscConfig+0x280>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1f0      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0308 	and.w	r3, r3, #8
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d038      	beq.n	8003b70 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d019      	beq.n	8003b3a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b06:	4b16      	ldr	r3, [pc, #88]	; (8003b60 <HAL_RCC_OscConfig+0x280>)
 8003b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b0a:	4a15      	ldr	r2, [pc, #84]	; (8003b60 <HAL_RCC_OscConfig+0x280>)
 8003b0c:	f043 0301 	orr.w	r3, r3, #1
 8003b10:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b12:	f7fe fced 	bl	80024f0 <HAL_GetTick>
 8003b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b18:	e008      	b.n	8003b2c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b1a:	f7fe fce9 	bl	80024f0 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d901      	bls.n	8003b2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e176      	b.n	8003e1a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b2c:	4b0c      	ldr	r3, [pc, #48]	; (8003b60 <HAL_RCC_OscConfig+0x280>)
 8003b2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d0f0      	beq.n	8003b1a <HAL_RCC_OscConfig+0x23a>
 8003b38:	e01a      	b.n	8003b70 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b3a:	4b09      	ldr	r3, [pc, #36]	; (8003b60 <HAL_RCC_OscConfig+0x280>)
 8003b3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b3e:	4a08      	ldr	r2, [pc, #32]	; (8003b60 <HAL_RCC_OscConfig+0x280>)
 8003b40:	f023 0301 	bic.w	r3, r3, #1
 8003b44:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b46:	f7fe fcd3 	bl	80024f0 <HAL_GetTick>
 8003b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b4c:	e00a      	b.n	8003b64 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b4e:	f7fe fccf 	bl	80024f0 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d903      	bls.n	8003b64 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e15c      	b.n	8003e1a <HAL_RCC_OscConfig+0x53a>
 8003b60:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b64:	4b91      	ldr	r3, [pc, #580]	; (8003dac <HAL_RCC_OscConfig+0x4cc>)
 8003b66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1ee      	bne.n	8003b4e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f000 80a4 	beq.w	8003cc6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b7e:	4b8b      	ldr	r3, [pc, #556]	; (8003dac <HAL_RCC_OscConfig+0x4cc>)
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10d      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b8a:	4b88      	ldr	r3, [pc, #544]	; (8003dac <HAL_RCC_OscConfig+0x4cc>)
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	4a87      	ldr	r2, [pc, #540]	; (8003dac <HAL_RCC_OscConfig+0x4cc>)
 8003b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b94:	6413      	str	r3, [r2, #64]	; 0x40
 8003b96:	4b85      	ldr	r3, [pc, #532]	; (8003dac <HAL_RCC_OscConfig+0x4cc>)
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b9e:	60bb      	str	r3, [r7, #8]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ba6:	4b82      	ldr	r3, [pc, #520]	; (8003db0 <HAL_RCC_OscConfig+0x4d0>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d118      	bne.n	8003be4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003bb2:	4b7f      	ldr	r3, [pc, #508]	; (8003db0 <HAL_RCC_OscConfig+0x4d0>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a7e      	ldr	r2, [pc, #504]	; (8003db0 <HAL_RCC_OscConfig+0x4d0>)
 8003bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bbe:	f7fe fc97 	bl	80024f0 <HAL_GetTick>
 8003bc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bc4:	e008      	b.n	8003bd8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bc6:	f7fe fc93 	bl	80024f0 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b64      	cmp	r3, #100	; 0x64
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e120      	b.n	8003e1a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bd8:	4b75      	ldr	r3, [pc, #468]	; (8003db0 <HAL_RCC_OscConfig+0x4d0>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0f0      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d106      	bne.n	8003bfa <HAL_RCC_OscConfig+0x31a>
 8003bec:	4b6f      	ldr	r3, [pc, #444]	; (8003dac <HAL_RCC_OscConfig+0x4cc>)
 8003bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf0:	4a6e      	ldr	r2, [pc, #440]	; (8003dac <HAL_RCC_OscConfig+0x4cc>)
 8003bf2:	f043 0301 	orr.w	r3, r3, #1
 8003bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8003bf8:	e02d      	b.n	8003c56 <HAL_RCC_OscConfig+0x376>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10c      	bne.n	8003c1c <HAL_RCC_OscConfig+0x33c>
 8003c02:	4b6a      	ldr	r3, [pc, #424]	; (8003dac <HAL_RCC_OscConfig+0x4cc>)
 8003c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c06:	4a69      	ldr	r2, [pc, #420]	; (8003dac <HAL_RCC_OscConfig+0x4cc>)
 8003c08:	f023 0301 	bic.w	r3, r3, #1
 8003c0c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c0e:	4b67      	ldr	r3, [pc, #412]	; (8003dac <HAL_RCC_OscConfig+0x4cc>)
 8003c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c12:	4a66      	ldr	r2, [pc, #408]	; (8003dac <HAL_RCC_OscConfig+0x4cc>)
 8003c14:	f023 0304 	bic.w	r3, r3, #4
 8003c18:	6713      	str	r3, [r2, #112]	; 0x70
 8003c1a:	e01c      	b.n	8003c56 <HAL_RCC_OscConfig+0x376>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	2b05      	cmp	r3, #5
 8003c22:	d10c      	bne.n	8003c3e <HAL_RCC_OscConfig+0x35e>
 8003c24:	4b61      	ldr	r3, [pc, #388]	; (8003dac <HAL_RCC_OscConfig+0x4cc>)
 8003c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c28:	4a60      	ldr	r2, [pc, #384]	; (8003dac <HAL_RCC_OscConfig+0x4cc>)
 8003c2a:	f043 0304 	orr.w	r3, r3, #4
 8003c2e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c30:	4b5e      	ldr	r3, [pc, #376]	; (8003dac <HAL_RCC_OscConfig+0x4cc>)
 8003c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c34:	4a5d      	ldr	r2, [pc, #372]	; (8003dac <HAL_RCC_OscConfig+0x4cc>)
 8003c36:	f043 0301 	orr.w	r3, r3, #1
 8003c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c3c:	e00b      	b.n	8003c56 <HAL_RCC_OscConfig+0x376>
 8003c3e:	4b5b      	ldr	r3, [pc, #364]	; (8003dac <HAL_RCC_OscConfig+0x4cc>)
 8003c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c42:	4a5a      	ldr	r2, [pc, #360]	; (8003dac <HAL_RCC_OscConfig+0x4cc>)
 8003c44:	f023 0301 	bic.w	r3, r3, #1
 8003c48:	6713      	str	r3, [r2, #112]	; 0x70
 8003c4a:	4b58      	ldr	r3, [pc, #352]	; (8003dac <HAL_RCC_OscConfig+0x4cc>)
 8003c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4e:	4a57      	ldr	r2, [pc, #348]	; (8003dac <HAL_RCC_OscConfig+0x4cc>)
 8003c50:	f023 0304 	bic.w	r3, r3, #4
 8003c54:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d015      	beq.n	8003c8a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c5e:	f7fe fc47 	bl	80024f0 <HAL_GetTick>
 8003c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c64:	e00a      	b.n	8003c7c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c66:	f7fe fc43 	bl	80024f0 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e0ce      	b.n	8003e1a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c7c:	4b4b      	ldr	r3, [pc, #300]	; (8003dac <HAL_RCC_OscConfig+0x4cc>)
 8003c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d0ee      	beq.n	8003c66 <HAL_RCC_OscConfig+0x386>
 8003c88:	e014      	b.n	8003cb4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c8a:	f7fe fc31 	bl	80024f0 <HAL_GetTick>
 8003c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c90:	e00a      	b.n	8003ca8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c92:	f7fe fc2d 	bl	80024f0 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e0b8      	b.n	8003e1a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ca8:	4b40      	ldr	r3, [pc, #256]	; (8003dac <HAL_RCC_OscConfig+0x4cc>)
 8003caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1ee      	bne.n	8003c92 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003cb4:	7dfb      	ldrb	r3, [r7, #23]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d105      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cba:	4b3c      	ldr	r3, [pc, #240]	; (8003dac <HAL_RCC_OscConfig+0x4cc>)
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbe:	4a3b      	ldr	r2, [pc, #236]	; (8003dac <HAL_RCC_OscConfig+0x4cc>)
 8003cc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cc4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f000 80a4 	beq.w	8003e18 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cd0:	4b36      	ldr	r3, [pc, #216]	; (8003dac <HAL_RCC_OscConfig+0x4cc>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f003 030c 	and.w	r3, r3, #12
 8003cd8:	2b08      	cmp	r3, #8
 8003cda:	d06b      	beq.n	8003db4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d149      	bne.n	8003d78 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ce4:	4b31      	ldr	r3, [pc, #196]	; (8003dac <HAL_RCC_OscConfig+0x4cc>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a30      	ldr	r2, [pc, #192]	; (8003dac <HAL_RCC_OscConfig+0x4cc>)
 8003cea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf0:	f7fe fbfe 	bl	80024f0 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cf8:	f7fe fbfa 	bl	80024f0 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e087      	b.n	8003e1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d0a:	4b28      	ldr	r3, [pc, #160]	; (8003dac <HAL_RCC_OscConfig+0x4cc>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1f0      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	69da      	ldr	r2, [r3, #28]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d24:	019b      	lsls	r3, r3, #6
 8003d26:	431a      	orrs	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2c:	085b      	lsrs	r3, r3, #1
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	041b      	lsls	r3, r3, #16
 8003d32:	431a      	orrs	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d38:	061b      	lsls	r3, r3, #24
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	4a1b      	ldr	r2, [pc, #108]	; (8003dac <HAL_RCC_OscConfig+0x4cc>)
 8003d3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d42:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d44:	4b19      	ldr	r3, [pc, #100]	; (8003dac <HAL_RCC_OscConfig+0x4cc>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a18      	ldr	r2, [pc, #96]	; (8003dac <HAL_RCC_OscConfig+0x4cc>)
 8003d4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d50:	f7fe fbce 	bl	80024f0 <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d58:	f7fe fbca 	bl	80024f0 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e057      	b.n	8003e1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d6a:	4b10      	ldr	r3, [pc, #64]	; (8003dac <HAL_RCC_OscConfig+0x4cc>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d0f0      	beq.n	8003d58 <HAL_RCC_OscConfig+0x478>
 8003d76:	e04f      	b.n	8003e18 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d78:	4b0c      	ldr	r3, [pc, #48]	; (8003dac <HAL_RCC_OscConfig+0x4cc>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a0b      	ldr	r2, [pc, #44]	; (8003dac <HAL_RCC_OscConfig+0x4cc>)
 8003d7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d84:	f7fe fbb4 	bl	80024f0 <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d8c:	f7fe fbb0 	bl	80024f0 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e03d      	b.n	8003e1a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d9e:	4b03      	ldr	r3, [pc, #12]	; (8003dac <HAL_RCC_OscConfig+0x4cc>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1f0      	bne.n	8003d8c <HAL_RCC_OscConfig+0x4ac>
 8003daa:	e035      	b.n	8003e18 <HAL_RCC_OscConfig+0x538>
 8003dac:	40023800 	.word	0x40023800
 8003db0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003db4:	4b1b      	ldr	r3, [pc, #108]	; (8003e24 <HAL_RCC_OscConfig+0x544>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d028      	beq.n	8003e14 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d121      	bne.n	8003e14 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d11a      	bne.n	8003e14 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003de4:	4013      	ands	r3, r2
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d111      	bne.n	8003e14 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfa:	085b      	lsrs	r3, r3, #1
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d107      	bne.n	8003e14 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d001      	beq.n	8003e18 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e000      	b.n	8003e1a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3718      	adds	r7, #24
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	40023800 	.word	0x40023800

08003e28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003e32:	2300      	movs	r3, #0
 8003e34:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d101      	bne.n	8003e40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e0d0      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e40:	4b6a      	ldr	r3, [pc, #424]	; (8003fec <HAL_RCC_ClockConfig+0x1c4>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 030f 	and.w	r3, r3, #15
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d910      	bls.n	8003e70 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e4e:	4b67      	ldr	r3, [pc, #412]	; (8003fec <HAL_RCC_ClockConfig+0x1c4>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f023 020f 	bic.w	r2, r3, #15
 8003e56:	4965      	ldr	r1, [pc, #404]	; (8003fec <HAL_RCC_ClockConfig+0x1c4>)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e5e:	4b63      	ldr	r3, [pc, #396]	; (8003fec <HAL_RCC_ClockConfig+0x1c4>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d001      	beq.n	8003e70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e0b8      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d020      	beq.n	8003ebe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0304 	and.w	r3, r3, #4
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d005      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e88:	4b59      	ldr	r3, [pc, #356]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	4a58      	ldr	r2, [pc, #352]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e92:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0308 	and.w	r3, r3, #8
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d005      	beq.n	8003eac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ea0:	4b53      	ldr	r3, [pc, #332]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	4a52      	ldr	r2, [pc, #328]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8003ea6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003eaa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eac:	4b50      	ldr	r3, [pc, #320]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	494d      	ldr	r1, [pc, #308]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d040      	beq.n	8003f4c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d107      	bne.n	8003ee2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ed2:	4b47      	ldr	r3, [pc, #284]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d115      	bne.n	8003f0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e07f      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d107      	bne.n	8003efa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eea:	4b41      	ldr	r3, [pc, #260]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d109      	bne.n	8003f0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e073      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003efa:	4b3d      	ldr	r3, [pc, #244]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e06b      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f0a:	4b39      	ldr	r3, [pc, #228]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f023 0203 	bic.w	r2, r3, #3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	4936      	ldr	r1, [pc, #216]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f1c:	f7fe fae8 	bl	80024f0 <HAL_GetTick>
 8003f20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f22:	e00a      	b.n	8003f3a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f24:	f7fe fae4 	bl	80024f0 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e053      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f3a:	4b2d      	ldr	r3, [pc, #180]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f003 020c 	and.w	r2, r3, #12
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d1eb      	bne.n	8003f24 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f4c:	4b27      	ldr	r3, [pc, #156]	; (8003fec <HAL_RCC_ClockConfig+0x1c4>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 030f 	and.w	r3, r3, #15
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d210      	bcs.n	8003f7c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f5a:	4b24      	ldr	r3, [pc, #144]	; (8003fec <HAL_RCC_ClockConfig+0x1c4>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f023 020f 	bic.w	r2, r3, #15
 8003f62:	4922      	ldr	r1, [pc, #136]	; (8003fec <HAL_RCC_ClockConfig+0x1c4>)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f6a:	4b20      	ldr	r3, [pc, #128]	; (8003fec <HAL_RCC_ClockConfig+0x1c4>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 030f 	and.w	r3, r3, #15
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d001      	beq.n	8003f7c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e032      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0304 	and.w	r3, r3, #4
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d008      	beq.n	8003f9a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f88:	4b19      	ldr	r3, [pc, #100]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	4916      	ldr	r1, [pc, #88]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0308 	and.w	r3, r3, #8
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d009      	beq.n	8003fba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003fa6:	4b12      	ldr	r3, [pc, #72]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	490e      	ldr	r1, [pc, #56]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fba:	f000 f821 	bl	8004000 <HAL_RCC_GetSysClockFreq>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	4b0b      	ldr	r3, [pc, #44]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	091b      	lsrs	r3, r3, #4
 8003fc6:	f003 030f 	and.w	r3, r3, #15
 8003fca:	490a      	ldr	r1, [pc, #40]	; (8003ff4 <HAL_RCC_ClockConfig+0x1cc>)
 8003fcc:	5ccb      	ldrb	r3, [r1, r3]
 8003fce:	fa22 f303 	lsr.w	r3, r2, r3
 8003fd2:	4a09      	ldr	r2, [pc, #36]	; (8003ff8 <HAL_RCC_ClockConfig+0x1d0>)
 8003fd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003fd6:	4b09      	ldr	r3, [pc, #36]	; (8003ffc <HAL_RCC_ClockConfig+0x1d4>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fe fa44 	bl	8002468 <HAL_InitTick>

  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	40023c00 	.word	0x40023c00
 8003ff0:	40023800 	.word	0x40023800
 8003ff4:	08008e90 	.word	0x08008e90
 8003ff8:	2000001c 	.word	0x2000001c
 8003ffc:	20000020 	.word	0x20000020

08004000 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004000:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004004:	b090      	sub	sp, #64	; 0x40
 8004006:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004008:	2300      	movs	r3, #0
 800400a:	637b      	str	r3, [r7, #52]	; 0x34
 800400c:	2300      	movs	r3, #0
 800400e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004010:	2300      	movs	r3, #0
 8004012:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004014:	2300      	movs	r3, #0
 8004016:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004018:	4b59      	ldr	r3, [pc, #356]	; (8004180 <HAL_RCC_GetSysClockFreq+0x180>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f003 030c 	and.w	r3, r3, #12
 8004020:	2b08      	cmp	r3, #8
 8004022:	d00d      	beq.n	8004040 <HAL_RCC_GetSysClockFreq+0x40>
 8004024:	2b08      	cmp	r3, #8
 8004026:	f200 80a1 	bhi.w	800416c <HAL_RCC_GetSysClockFreq+0x16c>
 800402a:	2b00      	cmp	r3, #0
 800402c:	d002      	beq.n	8004034 <HAL_RCC_GetSysClockFreq+0x34>
 800402e:	2b04      	cmp	r3, #4
 8004030:	d003      	beq.n	800403a <HAL_RCC_GetSysClockFreq+0x3a>
 8004032:	e09b      	b.n	800416c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004034:	4b53      	ldr	r3, [pc, #332]	; (8004184 <HAL_RCC_GetSysClockFreq+0x184>)
 8004036:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004038:	e09b      	b.n	8004172 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800403a:	4b53      	ldr	r3, [pc, #332]	; (8004188 <HAL_RCC_GetSysClockFreq+0x188>)
 800403c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800403e:	e098      	b.n	8004172 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004040:	4b4f      	ldr	r3, [pc, #316]	; (8004180 <HAL_RCC_GetSysClockFreq+0x180>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004048:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800404a:	4b4d      	ldr	r3, [pc, #308]	; (8004180 <HAL_RCC_GetSysClockFreq+0x180>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d028      	beq.n	80040a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004056:	4b4a      	ldr	r3, [pc, #296]	; (8004180 <HAL_RCC_GetSysClockFreq+0x180>)
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	099b      	lsrs	r3, r3, #6
 800405c:	2200      	movs	r2, #0
 800405e:	623b      	str	r3, [r7, #32]
 8004060:	627a      	str	r2, [r7, #36]	; 0x24
 8004062:	6a3b      	ldr	r3, [r7, #32]
 8004064:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004068:	2100      	movs	r1, #0
 800406a:	4b47      	ldr	r3, [pc, #284]	; (8004188 <HAL_RCC_GetSysClockFreq+0x188>)
 800406c:	fb03 f201 	mul.w	r2, r3, r1
 8004070:	2300      	movs	r3, #0
 8004072:	fb00 f303 	mul.w	r3, r0, r3
 8004076:	4413      	add	r3, r2
 8004078:	4a43      	ldr	r2, [pc, #268]	; (8004188 <HAL_RCC_GetSysClockFreq+0x188>)
 800407a:	fba0 1202 	umull	r1, r2, r0, r2
 800407e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004080:	460a      	mov	r2, r1
 8004082:	62ba      	str	r2, [r7, #40]	; 0x28
 8004084:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004086:	4413      	add	r3, r2
 8004088:	62fb      	str	r3, [r7, #44]	; 0x2c
 800408a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800408c:	2200      	movs	r2, #0
 800408e:	61bb      	str	r3, [r7, #24]
 8004090:	61fa      	str	r2, [r7, #28]
 8004092:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004096:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800409a:	f7fc fdf5 	bl	8000c88 <__aeabi_uldivmod>
 800409e:	4602      	mov	r2, r0
 80040a0:	460b      	mov	r3, r1
 80040a2:	4613      	mov	r3, r2
 80040a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040a6:	e053      	b.n	8004150 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040a8:	4b35      	ldr	r3, [pc, #212]	; (8004180 <HAL_RCC_GetSysClockFreq+0x180>)
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	099b      	lsrs	r3, r3, #6
 80040ae:	2200      	movs	r2, #0
 80040b0:	613b      	str	r3, [r7, #16]
 80040b2:	617a      	str	r2, [r7, #20]
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80040ba:	f04f 0b00 	mov.w	fp, #0
 80040be:	4652      	mov	r2, sl
 80040c0:	465b      	mov	r3, fp
 80040c2:	f04f 0000 	mov.w	r0, #0
 80040c6:	f04f 0100 	mov.w	r1, #0
 80040ca:	0159      	lsls	r1, r3, #5
 80040cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040d0:	0150      	lsls	r0, r2, #5
 80040d2:	4602      	mov	r2, r0
 80040d4:	460b      	mov	r3, r1
 80040d6:	ebb2 080a 	subs.w	r8, r2, sl
 80040da:	eb63 090b 	sbc.w	r9, r3, fp
 80040de:	f04f 0200 	mov.w	r2, #0
 80040e2:	f04f 0300 	mov.w	r3, #0
 80040e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80040ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80040ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80040f2:	ebb2 0408 	subs.w	r4, r2, r8
 80040f6:	eb63 0509 	sbc.w	r5, r3, r9
 80040fa:	f04f 0200 	mov.w	r2, #0
 80040fe:	f04f 0300 	mov.w	r3, #0
 8004102:	00eb      	lsls	r3, r5, #3
 8004104:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004108:	00e2      	lsls	r2, r4, #3
 800410a:	4614      	mov	r4, r2
 800410c:	461d      	mov	r5, r3
 800410e:	eb14 030a 	adds.w	r3, r4, sl
 8004112:	603b      	str	r3, [r7, #0]
 8004114:	eb45 030b 	adc.w	r3, r5, fp
 8004118:	607b      	str	r3, [r7, #4]
 800411a:	f04f 0200 	mov.w	r2, #0
 800411e:	f04f 0300 	mov.w	r3, #0
 8004122:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004126:	4629      	mov	r1, r5
 8004128:	028b      	lsls	r3, r1, #10
 800412a:	4621      	mov	r1, r4
 800412c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004130:	4621      	mov	r1, r4
 8004132:	028a      	lsls	r2, r1, #10
 8004134:	4610      	mov	r0, r2
 8004136:	4619      	mov	r1, r3
 8004138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800413a:	2200      	movs	r2, #0
 800413c:	60bb      	str	r3, [r7, #8]
 800413e:	60fa      	str	r2, [r7, #12]
 8004140:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004144:	f7fc fda0 	bl	8000c88 <__aeabi_uldivmod>
 8004148:	4602      	mov	r2, r0
 800414a:	460b      	mov	r3, r1
 800414c:	4613      	mov	r3, r2
 800414e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004150:	4b0b      	ldr	r3, [pc, #44]	; (8004180 <HAL_RCC_GetSysClockFreq+0x180>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	0c1b      	lsrs	r3, r3, #16
 8004156:	f003 0303 	and.w	r3, r3, #3
 800415a:	3301      	adds	r3, #1
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004160:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004164:	fbb2 f3f3 	udiv	r3, r2, r3
 8004168:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800416a:	e002      	b.n	8004172 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800416c:	4b05      	ldr	r3, [pc, #20]	; (8004184 <HAL_RCC_GetSysClockFreq+0x184>)
 800416e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004170:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004174:	4618      	mov	r0, r3
 8004176:	3740      	adds	r7, #64	; 0x40
 8004178:	46bd      	mov	sp, r7
 800417a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800417e:	bf00      	nop
 8004180:	40023800 	.word	0x40023800
 8004184:	00f42400 	.word	0x00f42400
 8004188:	017d7840 	.word	0x017d7840

0800418c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004190:	4b03      	ldr	r3, [pc, #12]	; (80041a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004192:	681b      	ldr	r3, [r3, #0]
}
 8004194:	4618      	mov	r0, r3
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	2000001c 	.word	0x2000001c

080041a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041a8:	f7ff fff0 	bl	800418c <HAL_RCC_GetHCLKFreq>
 80041ac:	4602      	mov	r2, r0
 80041ae:	4b05      	ldr	r3, [pc, #20]	; (80041c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	0a9b      	lsrs	r3, r3, #10
 80041b4:	f003 0307 	and.w	r3, r3, #7
 80041b8:	4903      	ldr	r1, [pc, #12]	; (80041c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041ba:	5ccb      	ldrb	r3, [r1, r3]
 80041bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	40023800 	.word	0x40023800
 80041c8:	08008ea0 	.word	0x08008ea0

080041cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80041d0:	f7ff ffdc 	bl	800418c <HAL_RCC_GetHCLKFreq>
 80041d4:	4602      	mov	r2, r0
 80041d6:	4b05      	ldr	r3, [pc, #20]	; (80041ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	0b5b      	lsrs	r3, r3, #13
 80041dc:	f003 0307 	and.w	r3, r3, #7
 80041e0:	4903      	ldr	r1, [pc, #12]	; (80041f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041e2:	5ccb      	ldrb	r3, [r1, r3]
 80041e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	40023800 	.word	0x40023800
 80041f0:	08008ea0 	.word	0x08008ea0

080041f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b088      	sub	sp, #32
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80041fc:	2300      	movs	r3, #0
 80041fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004200:	2300      	movs	r3, #0
 8004202:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004204:	2300      	movs	r3, #0
 8004206:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004208:	2300      	movs	r3, #0
 800420a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800420c:	2300      	movs	r3, #0
 800420e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b00      	cmp	r3, #0
 800421a:	d012      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800421c:	4b69      	ldr	r3, [pc, #420]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	4a68      	ldr	r2, [pc, #416]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004222:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004226:	6093      	str	r3, [r2, #8]
 8004228:	4b66      	ldr	r3, [pc, #408]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800422a:	689a      	ldr	r2, [r3, #8]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004230:	4964      	ldr	r1, [pc, #400]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004232:	4313      	orrs	r3, r2
 8004234:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800423e:	2301      	movs	r3, #1
 8004240:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d017      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800424e:	4b5d      	ldr	r3, [pc, #372]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004254:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800425c:	4959      	ldr	r1, [pc, #356]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800425e:	4313      	orrs	r3, r2
 8004260:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004268:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800426c:	d101      	bne.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800426e:	2301      	movs	r3, #1
 8004270:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800427a:	2301      	movs	r3, #1
 800427c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d017      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800428a:	4b4e      	ldr	r3, [pc, #312]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800428c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004290:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004298:	494a      	ldr	r1, [pc, #296]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800429a:	4313      	orrs	r3, r2
 800429c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042a8:	d101      	bne.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80042aa:	2301      	movs	r3, #1
 80042ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80042b6:	2301      	movs	r3, #1
 80042b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80042c6:	2301      	movs	r3, #1
 80042c8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0320 	and.w	r3, r3, #32
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f000 808b 	beq.w	80043ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80042d8:	4b3a      	ldr	r3, [pc, #232]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042dc:	4a39      	ldr	r2, [pc, #228]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042e2:	6413      	str	r3, [r2, #64]	; 0x40
 80042e4:	4b37      	ldr	r3, [pc, #220]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ec:	60bb      	str	r3, [r7, #8]
 80042ee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80042f0:	4b35      	ldr	r3, [pc, #212]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a34      	ldr	r2, [pc, #208]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042fc:	f7fe f8f8 	bl	80024f0 <HAL_GetTick>
 8004300:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004302:	e008      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004304:	f7fe f8f4 	bl	80024f0 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b64      	cmp	r3, #100	; 0x64
 8004310:	d901      	bls.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e357      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004316:	4b2c      	ldr	r3, [pc, #176]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800431e:	2b00      	cmp	r3, #0
 8004320:	d0f0      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004322:	4b28      	ldr	r3, [pc, #160]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800432a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d035      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	429a      	cmp	r2, r3
 800433e:	d02e      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004340:	4b20      	ldr	r3, [pc, #128]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004344:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004348:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800434a:	4b1e      	ldr	r3, [pc, #120]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800434c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434e:	4a1d      	ldr	r2, [pc, #116]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004354:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004356:	4b1b      	ldr	r3, [pc, #108]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435a:	4a1a      	ldr	r2, [pc, #104]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800435c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004360:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004362:	4a18      	ldr	r2, [pc, #96]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004368:	4b16      	ldr	r3, [pc, #88]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800436a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436c:	f003 0301 	and.w	r3, r3, #1
 8004370:	2b01      	cmp	r3, #1
 8004372:	d114      	bne.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004374:	f7fe f8bc 	bl	80024f0 <HAL_GetTick>
 8004378:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800437a:	e00a      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800437c:	f7fe f8b8 	bl	80024f0 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	f241 3288 	movw	r2, #5000	; 0x1388
 800438a:	4293      	cmp	r3, r2
 800438c:	d901      	bls.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e319      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004392:	4b0c      	ldr	r3, [pc, #48]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d0ee      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043aa:	d111      	bne.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80043ac:	4b05      	ldr	r3, [pc, #20]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80043b8:	4b04      	ldr	r3, [pc, #16]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80043ba:	400b      	ands	r3, r1
 80043bc:	4901      	ldr	r1, [pc, #4]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	608b      	str	r3, [r1, #8]
 80043c2:	e00b      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80043c4:	40023800 	.word	0x40023800
 80043c8:	40007000 	.word	0x40007000
 80043cc:	0ffffcff 	.word	0x0ffffcff
 80043d0:	4baa      	ldr	r3, [pc, #680]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	4aa9      	ldr	r2, [pc, #676]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043d6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80043da:	6093      	str	r3, [r2, #8]
 80043dc:	4ba7      	ldr	r3, [pc, #668]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043e8:	49a4      	ldr	r1, [pc, #656]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0310 	and.w	r3, r3, #16
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d010      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80043fa:	4ba0      	ldr	r3, [pc, #640]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004400:	4a9e      	ldr	r2, [pc, #632]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004402:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004406:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800440a:	4b9c      	ldr	r3, [pc, #624]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800440c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004414:	4999      	ldr	r1, [pc, #612]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004416:	4313      	orrs	r3, r2
 8004418:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00a      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004428:	4b94      	ldr	r3, [pc, #592]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800442a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004436:	4991      	ldr	r1, [pc, #580]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004438:	4313      	orrs	r3, r2
 800443a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00a      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800444a:	4b8c      	ldr	r3, [pc, #560]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800444c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004450:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004458:	4988      	ldr	r1, [pc, #544]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800445a:	4313      	orrs	r3, r2
 800445c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00a      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800446c:	4b83      	ldr	r3, [pc, #524]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800446e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004472:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800447a:	4980      	ldr	r1, [pc, #512]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800447c:	4313      	orrs	r3, r2
 800447e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00a      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800448e:	4b7b      	ldr	r3, [pc, #492]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004494:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449c:	4977      	ldr	r1, [pc, #476]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00a      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044b0:	4b72      	ldr	r3, [pc, #456]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b6:	f023 0203 	bic.w	r2, r3, #3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044be:	496f      	ldr	r1, [pc, #444]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00a      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044d2:	4b6a      	ldr	r3, [pc, #424]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d8:	f023 020c 	bic.w	r2, r3, #12
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044e0:	4966      	ldr	r1, [pc, #408]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00a      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044f4:	4b61      	ldr	r3, [pc, #388]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044fa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004502:	495e      	ldr	r1, [pc, #376]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004504:	4313      	orrs	r3, r2
 8004506:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00a      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004516:	4b59      	ldr	r3, [pc, #356]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004524:	4955      	ldr	r1, [pc, #340]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004526:	4313      	orrs	r3, r2
 8004528:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00a      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004538:	4b50      	ldr	r3, [pc, #320]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800453a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800453e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004546:	494d      	ldr	r1, [pc, #308]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004548:	4313      	orrs	r3, r2
 800454a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00a      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800455a:	4b48      	ldr	r3, [pc, #288]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800455c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004560:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004568:	4944      	ldr	r1, [pc, #272]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800456a:	4313      	orrs	r3, r2
 800456c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00a      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800457c:	4b3f      	ldr	r3, [pc, #252]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800457e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004582:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800458a:	493c      	ldr	r1, [pc, #240]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800458c:	4313      	orrs	r3, r2
 800458e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00a      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800459e:	4b37      	ldr	r3, [pc, #220]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ac:	4933      	ldr	r1, [pc, #204]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00a      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80045c0:	4b2e      	ldr	r3, [pc, #184]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045ce:	492b      	ldr	r1, [pc, #172]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d011      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80045e2:	4b26      	ldr	r3, [pc, #152]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045f0:	4922      	ldr	r1, [pc, #136]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004600:	d101      	bne.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004602:	2301      	movs	r3, #1
 8004604:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0308 	and.w	r3, r3, #8
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004612:	2301      	movs	r3, #1
 8004614:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00a      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004622:	4b16      	ldr	r3, [pc, #88]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004628:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004630:	4912      	ldr	r1, [pc, #72]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004632:	4313      	orrs	r3, r2
 8004634:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00b      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004644:	4b0d      	ldr	r3, [pc, #52]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800464a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004654:	4909      	ldr	r1, [pc, #36]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004656:	4313      	orrs	r3, r2
 8004658:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d006      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800466a:	2b00      	cmp	r3, #0
 800466c:	f000 80d9 	beq.w	8004822 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004670:	4b02      	ldr	r3, [pc, #8]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a01      	ldr	r2, [pc, #4]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004676:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800467a:	e001      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800467c:	40023800 	.word	0x40023800
 8004680:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004682:	f7fd ff35 	bl	80024f0 <HAL_GetTick>
 8004686:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004688:	e008      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800468a:	f7fd ff31 	bl	80024f0 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b64      	cmp	r3, #100	; 0x64
 8004696:	d901      	bls.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e194      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800469c:	4b6c      	ldr	r3, [pc, #432]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1f0      	bne.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d021      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d11d      	bne.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80046bc:	4b64      	ldr	r3, [pc, #400]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046c2:	0c1b      	lsrs	r3, r3, #16
 80046c4:	f003 0303 	and.w	r3, r3, #3
 80046c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80046ca:	4b61      	ldr	r3, [pc, #388]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046d0:	0e1b      	lsrs	r3, r3, #24
 80046d2:	f003 030f 	and.w	r3, r3, #15
 80046d6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	019a      	lsls	r2, r3, #6
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	041b      	lsls	r3, r3, #16
 80046e2:	431a      	orrs	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	061b      	lsls	r3, r3, #24
 80046e8:	431a      	orrs	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	071b      	lsls	r3, r3, #28
 80046f0:	4957      	ldr	r1, [pc, #348]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d004      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004708:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800470c:	d00a      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004716:	2b00      	cmp	r3, #0
 8004718:	d02e      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004722:	d129      	bne.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004724:	4b4a      	ldr	r3, [pc, #296]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004726:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800472a:	0c1b      	lsrs	r3, r3, #16
 800472c:	f003 0303 	and.w	r3, r3, #3
 8004730:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004732:	4b47      	ldr	r3, [pc, #284]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004734:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004738:	0f1b      	lsrs	r3, r3, #28
 800473a:	f003 0307 	and.w	r3, r3, #7
 800473e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	019a      	lsls	r2, r3, #6
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	041b      	lsls	r3, r3, #16
 800474a:	431a      	orrs	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	061b      	lsls	r3, r3, #24
 8004752:	431a      	orrs	r2, r3
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	071b      	lsls	r3, r3, #28
 8004758:	493d      	ldr	r1, [pc, #244]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800475a:	4313      	orrs	r3, r2
 800475c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004760:	4b3b      	ldr	r3, [pc, #236]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004762:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004766:	f023 021f 	bic.w	r2, r3, #31
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476e:	3b01      	subs	r3, #1
 8004770:	4937      	ldr	r1, [pc, #220]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004772:	4313      	orrs	r3, r2
 8004774:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d01d      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004784:	4b32      	ldr	r3, [pc, #200]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004786:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800478a:	0e1b      	lsrs	r3, r3, #24
 800478c:	f003 030f 	and.w	r3, r3, #15
 8004790:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004792:	4b2f      	ldr	r3, [pc, #188]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004794:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004798:	0f1b      	lsrs	r3, r3, #28
 800479a:	f003 0307 	and.w	r3, r3, #7
 800479e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	019a      	lsls	r2, r3, #6
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	041b      	lsls	r3, r3, #16
 80047ac:	431a      	orrs	r2, r3
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	061b      	lsls	r3, r3, #24
 80047b2:	431a      	orrs	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	071b      	lsls	r3, r3, #28
 80047b8:	4925      	ldr	r1, [pc, #148]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d011      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	019a      	lsls	r2, r3, #6
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	041b      	lsls	r3, r3, #16
 80047d8:	431a      	orrs	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	061b      	lsls	r3, r3, #24
 80047e0:	431a      	orrs	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	071b      	lsls	r3, r3, #28
 80047e8:	4919      	ldr	r1, [pc, #100]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80047f0:	4b17      	ldr	r3, [pc, #92]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a16      	ldr	r2, [pc, #88]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047fc:	f7fd fe78 	bl	80024f0 <HAL_GetTick>
 8004800:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004802:	e008      	b.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004804:	f7fd fe74 	bl	80024f0 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b64      	cmp	r3, #100	; 0x64
 8004810:	d901      	bls.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e0d7      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004816:	4b0e      	ldr	r3, [pc, #56]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d0f0      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	2b01      	cmp	r3, #1
 8004826:	f040 80cd 	bne.w	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800482a:	4b09      	ldr	r3, [pc, #36]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a08      	ldr	r2, [pc, #32]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004830:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004834:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004836:	f7fd fe5b 	bl	80024f0 <HAL_GetTick>
 800483a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800483c:	e00a      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800483e:	f7fd fe57 	bl	80024f0 <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	2b64      	cmp	r3, #100	; 0x64
 800484a:	d903      	bls.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e0ba      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004850:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004854:	4b5e      	ldr	r3, [pc, #376]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800485c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004860:	d0ed      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004872:	2b00      	cmp	r3, #0
 8004874:	d009      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800487e:	2b00      	cmp	r3, #0
 8004880:	d02e      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004886:	2b00      	cmp	r3, #0
 8004888:	d12a      	bne.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800488a:	4b51      	ldr	r3, [pc, #324]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800488c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004890:	0c1b      	lsrs	r3, r3, #16
 8004892:	f003 0303 	and.w	r3, r3, #3
 8004896:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004898:	4b4d      	ldr	r3, [pc, #308]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800489a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800489e:	0f1b      	lsrs	r3, r3, #28
 80048a0:	f003 0307 	and.w	r3, r3, #7
 80048a4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	019a      	lsls	r2, r3, #6
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	041b      	lsls	r3, r3, #16
 80048b0:	431a      	orrs	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	061b      	lsls	r3, r3, #24
 80048b8:	431a      	orrs	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	071b      	lsls	r3, r3, #28
 80048be:	4944      	ldr	r1, [pc, #272]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80048c6:	4b42      	ldr	r3, [pc, #264]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048cc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d4:	3b01      	subs	r3, #1
 80048d6:	021b      	lsls	r3, r3, #8
 80048d8:	493d      	ldr	r1, [pc, #244]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d022      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048f4:	d11d      	bne.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80048f6:	4b36      	ldr	r3, [pc, #216]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048fc:	0e1b      	lsrs	r3, r3, #24
 80048fe:	f003 030f 	and.w	r3, r3, #15
 8004902:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004904:	4b32      	ldr	r3, [pc, #200]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800490a:	0f1b      	lsrs	r3, r3, #28
 800490c:	f003 0307 	and.w	r3, r3, #7
 8004910:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	019a      	lsls	r2, r3, #6
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a1b      	ldr	r3, [r3, #32]
 800491c:	041b      	lsls	r3, r3, #16
 800491e:	431a      	orrs	r2, r3
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	061b      	lsls	r3, r3, #24
 8004924:	431a      	orrs	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	071b      	lsls	r3, r3, #28
 800492a:	4929      	ldr	r1, [pc, #164]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800492c:	4313      	orrs	r3, r2
 800492e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0308 	and.w	r3, r3, #8
 800493a:	2b00      	cmp	r3, #0
 800493c:	d028      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800493e:	4b24      	ldr	r3, [pc, #144]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004944:	0e1b      	lsrs	r3, r3, #24
 8004946:	f003 030f 	and.w	r3, r3, #15
 800494a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800494c:	4b20      	ldr	r3, [pc, #128]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800494e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004952:	0c1b      	lsrs	r3, r3, #16
 8004954:	f003 0303 	and.w	r3, r3, #3
 8004958:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	019a      	lsls	r2, r3, #6
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	041b      	lsls	r3, r3, #16
 8004964:	431a      	orrs	r2, r3
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	061b      	lsls	r3, r3, #24
 800496a:	431a      	orrs	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	69db      	ldr	r3, [r3, #28]
 8004970:	071b      	lsls	r3, r3, #28
 8004972:	4917      	ldr	r1, [pc, #92]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004974:	4313      	orrs	r3, r2
 8004976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800497a:	4b15      	ldr	r3, [pc, #84]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800497c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004980:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004988:	4911      	ldr	r1, [pc, #68]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800498a:	4313      	orrs	r3, r2
 800498c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004990:	4b0f      	ldr	r3, [pc, #60]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a0e      	ldr	r2, [pc, #56]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800499a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800499c:	f7fd fda8 	bl	80024f0 <HAL_GetTick>
 80049a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80049a2:	e008      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80049a4:	f7fd fda4 	bl	80024f0 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b64      	cmp	r3, #100	; 0x64
 80049b0:	d901      	bls.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e007      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80049b6:	4b06      	ldr	r3, [pc, #24]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049c2:	d1ef      	bne.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3720      	adds	r7, #32
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	40023800 	.word	0x40023800

080049d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e09d      	b.n	8004b22 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d108      	bne.n	8004a00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049f6:	d009      	beq.n	8004a0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	61da      	str	r2, [r3, #28]
 80049fe:	e005      	b.n	8004a0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d106      	bne.n	8004a2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7fd faf0 	bl	800200c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a42:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a4c:	d902      	bls.n	8004a54 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	60fb      	str	r3, [r7, #12]
 8004a52:	e002      	b.n	8004a5a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004a54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a58:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004a62:	d007      	beq.n	8004a74 <HAL_SPI_Init+0xa0>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a6c:	d002      	beq.n	8004a74 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a84:	431a      	orrs	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	431a      	orrs	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004aac:	431a      	orrs	r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab6:	ea42 0103 	orr.w	r1, r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004abe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	0c1b      	lsrs	r3, r3, #16
 8004ad0:	f003 0204 	and.w	r2, r3, #4
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad8:	f003 0310 	and.w	r3, r3, #16
 8004adc:	431a      	orrs	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ae2:	f003 0308 	and.w	r3, r3, #8
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004af0:	ea42 0103 	orr.w	r1, r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	69da      	ldr	r2, [r3, #28]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b10:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b088      	sub	sp, #32
 8004b2e:	af02      	add	r7, sp, #8
 8004b30:	60f8      	str	r0, [r7, #12]
 8004b32:	60b9      	str	r1, [r7, #8]
 8004b34:	603b      	str	r3, [r7, #0]
 8004b36:	4613      	mov	r3, r2
 8004b38:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b46:	d112      	bne.n	8004b6e <HAL_SPI_Receive+0x44>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10e      	bne.n	8004b6e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2204      	movs	r2, #4
 8004b54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004b58:	88fa      	ldrh	r2, [r7, #6]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	68ba      	ldr	r2, [r7, #8]
 8004b62:	68b9      	ldr	r1, [r7, #8]
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f000 f910 	bl	8004d8a <HAL_SPI_TransmitReceive>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	e109      	b.n	8004d82 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d101      	bne.n	8004b7c <HAL_SPI_Receive+0x52>
 8004b78:	2302      	movs	r3, #2
 8004b7a:	e102      	b.n	8004d82 <HAL_SPI_Receive+0x258>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b84:	f7fd fcb4 	bl	80024f0 <HAL_GetTick>
 8004b88:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d002      	beq.n	8004b9c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004b96:	2302      	movs	r3, #2
 8004b98:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b9a:	e0e9      	b.n	8004d70 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d002      	beq.n	8004ba8 <HAL_SPI_Receive+0x7e>
 8004ba2:	88fb      	ldrh	r3, [r7, #6]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d102      	bne.n	8004bae <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004bac:	e0e0      	b.n	8004d70 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2204      	movs	r2, #4
 8004bb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	68ba      	ldr	r2, [r7, #8]
 8004bc0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	88fa      	ldrh	r2, [r7, #6]
 8004bc6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	88fa      	ldrh	r2, [r7, #6]
 8004bce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004bf8:	d908      	bls.n	8004c0c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c08:	605a      	str	r2, [r3, #4]
 8004c0a:	e007      	b.n	8004c1c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c1a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c24:	d10f      	bne.n	8004c46 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c44:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c50:	2b40      	cmp	r3, #64	; 0x40
 8004c52:	d007      	beq.n	8004c64 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c62:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c6c:	d867      	bhi.n	8004d3e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004c6e:	e030      	b.n	8004cd2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d117      	bne.n	8004cae <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f103 020c 	add.w	r2, r3, #12
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8a:	7812      	ldrb	r2, [r2, #0]
 8004c8c:	b2d2      	uxtb	r2, r2
 8004c8e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c94:	1c5a      	adds	r2, r3, #1
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004cac:	e011      	b.n	8004cd2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cae:	f7fd fc1f 	bl	80024f0 <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d803      	bhi.n	8004cc6 <HAL_SPI_Receive+0x19c>
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc4:	d102      	bne.n	8004ccc <HAL_SPI_Receive+0x1a2>
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d102      	bne.n	8004cd2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004cd0:	e04e      	b.n	8004d70 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1c8      	bne.n	8004c70 <HAL_SPI_Receive+0x146>
 8004cde:	e034      	b.n	8004d4a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d115      	bne.n	8004d1a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68da      	ldr	r2, [r3, #12]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf8:	b292      	uxth	r2, r2
 8004cfa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d00:	1c9a      	adds	r2, r3, #2
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004d18:	e011      	b.n	8004d3e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d1a:	f7fd fbe9 	bl	80024f0 <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	683a      	ldr	r2, [r7, #0]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d803      	bhi.n	8004d32 <HAL_SPI_Receive+0x208>
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d30:	d102      	bne.n	8004d38 <HAL_SPI_Receive+0x20e>
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d102      	bne.n	8004d3e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004d3c:	e018      	b.n	8004d70 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1ca      	bne.n	8004ce0 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	6839      	ldr	r1, [r7, #0]
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f000 fb4c 	bl	80053ec <SPI_EndRxTransaction>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d002      	beq.n	8004d60 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2220      	movs	r2, #32
 8004d5e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d002      	beq.n	8004d6e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	75fb      	strb	r3, [r7, #23]
 8004d6c:	e000      	b.n	8004d70 <HAL_SPI_Receive+0x246>
  }

error :
 8004d6e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004d80:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3718      	adds	r7, #24
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b08a      	sub	sp, #40	; 0x28
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	60f8      	str	r0, [r7, #12]
 8004d92:	60b9      	str	r1, [r7, #8]
 8004d94:	607a      	str	r2, [r7, #4]
 8004d96:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d101      	bne.n	8004db0 <HAL_SPI_TransmitReceive+0x26>
 8004dac:	2302      	movs	r3, #2
 8004dae:	e1fb      	b.n	80051a8 <HAL_SPI_TransmitReceive+0x41e>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004db8:	f7fd fb9a 	bl	80024f0 <HAL_GetTick>
 8004dbc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004dc4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004dcc:	887b      	ldrh	r3, [r7, #2]
 8004dce:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004dd0:	887b      	ldrh	r3, [r7, #2]
 8004dd2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004dd4:	7efb      	ldrb	r3, [r7, #27]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d00e      	beq.n	8004df8 <HAL_SPI_TransmitReceive+0x6e>
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004de0:	d106      	bne.n	8004df0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d102      	bne.n	8004df0 <HAL_SPI_TransmitReceive+0x66>
 8004dea:	7efb      	ldrb	r3, [r7, #27]
 8004dec:	2b04      	cmp	r3, #4
 8004dee:	d003      	beq.n	8004df8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004df0:	2302      	movs	r3, #2
 8004df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004df6:	e1cd      	b.n	8005194 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d005      	beq.n	8004e0a <HAL_SPI_TransmitReceive+0x80>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d002      	beq.n	8004e0a <HAL_SPI_TransmitReceive+0x80>
 8004e04:	887b      	ldrh	r3, [r7, #2]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d103      	bne.n	8004e12 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004e10:	e1c0      	b.n	8005194 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2b04      	cmp	r3, #4
 8004e1c:	d003      	beq.n	8004e26 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2205      	movs	r2, #5
 8004e22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	887a      	ldrh	r2, [r7, #2]
 8004e36:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	887a      	ldrh	r2, [r7, #2]
 8004e3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	887a      	ldrh	r2, [r7, #2]
 8004e4c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	887a      	ldrh	r2, [r7, #2]
 8004e52:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e68:	d802      	bhi.n	8004e70 <HAL_SPI_TransmitReceive+0xe6>
 8004e6a:	8a3b      	ldrh	r3, [r7, #16]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d908      	bls.n	8004e82 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e7e:	605a      	str	r2, [r3, #4]
 8004e80:	e007      	b.n	8004e92 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e90:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9c:	2b40      	cmp	r3, #64	; 0x40
 8004e9e:	d007      	beq.n	8004eb0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004eae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004eb8:	d97c      	bls.n	8004fb4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d002      	beq.n	8004ec8 <HAL_SPI_TransmitReceive+0x13e>
 8004ec2:	8a7b      	ldrh	r3, [r7, #18]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d169      	bne.n	8004f9c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ecc:	881a      	ldrh	r2, [r3, #0]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed8:	1c9a      	adds	r2, r3, #2
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004eec:	e056      	b.n	8004f9c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d11b      	bne.n	8004f34 <HAL_SPI_TransmitReceive+0x1aa>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d016      	beq.n	8004f34 <HAL_SPI_TransmitReceive+0x1aa>
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d113      	bne.n	8004f34 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f10:	881a      	ldrh	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1c:	1c9a      	adds	r2, r3, #2
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f30:	2300      	movs	r3, #0
 8004f32:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d11c      	bne.n	8004f7c <HAL_SPI_TransmitReceive+0x1f2>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d016      	beq.n	8004f7c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68da      	ldr	r2, [r3, #12]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f58:	b292      	uxth	r2, r2
 8004f5a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f60:	1c9a      	adds	r2, r3, #2
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f7c:	f7fd fab8 	bl	80024f0 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d807      	bhi.n	8004f9c <HAL_SPI_TransmitReceive+0x212>
 8004f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f92:	d003      	beq.n	8004f9c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004f9a:	e0fb      	b.n	8005194 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1a3      	bne.n	8004eee <HAL_SPI_TransmitReceive+0x164>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d19d      	bne.n	8004eee <HAL_SPI_TransmitReceive+0x164>
 8004fb2:	e0df      	b.n	8005174 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d003      	beq.n	8004fc4 <HAL_SPI_TransmitReceive+0x23a>
 8004fbc:	8a7b      	ldrh	r3, [r7, #18]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	f040 80cb 	bne.w	800515a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d912      	bls.n	8004ff4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd2:	881a      	ldrh	r2, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fde:	1c9a      	adds	r2, r3, #2
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	3b02      	subs	r3, #2
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ff2:	e0b2      	b.n	800515a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	330c      	adds	r3, #12
 8004ffe:	7812      	ldrb	r2, [r2, #0]
 8005000:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005006:	1c5a      	adds	r2, r3, #1
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005010:	b29b      	uxth	r3, r3
 8005012:	3b01      	subs	r3, #1
 8005014:	b29a      	uxth	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800501a:	e09e      	b.n	800515a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b02      	cmp	r3, #2
 8005028:	d134      	bne.n	8005094 <HAL_SPI_TransmitReceive+0x30a>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800502e:	b29b      	uxth	r3, r3
 8005030:	2b00      	cmp	r3, #0
 8005032:	d02f      	beq.n	8005094 <HAL_SPI_TransmitReceive+0x30a>
 8005034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005036:	2b01      	cmp	r3, #1
 8005038:	d12c      	bne.n	8005094 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800503e:	b29b      	uxth	r3, r3
 8005040:	2b01      	cmp	r3, #1
 8005042:	d912      	bls.n	800506a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005048:	881a      	ldrh	r2, [r3, #0]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005054:	1c9a      	adds	r2, r3, #2
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800505e:	b29b      	uxth	r3, r3
 8005060:	3b02      	subs	r3, #2
 8005062:	b29a      	uxth	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005068:	e012      	b.n	8005090 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	330c      	adds	r3, #12
 8005074:	7812      	ldrb	r2, [r2, #0]
 8005076:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507c:	1c5a      	adds	r2, r3, #1
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005086:	b29b      	uxth	r3, r3
 8005088:	3b01      	subs	r3, #1
 800508a:	b29a      	uxth	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005090:	2300      	movs	r3, #0
 8005092:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d148      	bne.n	8005134 <HAL_SPI_TransmitReceive+0x3aa>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d042      	beq.n	8005134 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d923      	bls.n	8005102 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68da      	ldr	r2, [r3, #12]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c4:	b292      	uxth	r2, r2
 80050c6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050cc:	1c9a      	adds	r2, r3, #2
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050d8:	b29b      	uxth	r3, r3
 80050da:	3b02      	subs	r3, #2
 80050dc:	b29a      	uxth	r2, r3
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d81f      	bhi.n	8005130 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	685a      	ldr	r2, [r3, #4]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80050fe:	605a      	str	r2, [r3, #4]
 8005100:	e016      	b.n	8005130 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f103 020c 	add.w	r2, r3, #12
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510e:	7812      	ldrb	r2, [r2, #0]
 8005110:	b2d2      	uxtb	r2, r2
 8005112:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005118:	1c5a      	adds	r2, r3, #1
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005124:	b29b      	uxth	r3, r3
 8005126:	3b01      	subs	r3, #1
 8005128:	b29a      	uxth	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005130:	2301      	movs	r3, #1
 8005132:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005134:	f7fd f9dc 	bl	80024f0 <HAL_GetTick>
 8005138:	4602      	mov	r2, r0
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005140:	429a      	cmp	r2, r3
 8005142:	d803      	bhi.n	800514c <HAL_SPI_TransmitReceive+0x3c2>
 8005144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514a:	d102      	bne.n	8005152 <HAL_SPI_TransmitReceive+0x3c8>
 800514c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514e:	2b00      	cmp	r3, #0
 8005150:	d103      	bne.n	800515a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005158:	e01c      	b.n	8005194 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800515e:	b29b      	uxth	r3, r3
 8005160:	2b00      	cmp	r3, #0
 8005162:	f47f af5b 	bne.w	800501c <HAL_SPI_TransmitReceive+0x292>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800516c:	b29b      	uxth	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	f47f af54 	bne.w	800501c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005174:	69fa      	ldr	r2, [r7, #28]
 8005176:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f000 f9b3 	bl	80054e4 <SPI_EndRxTxTransaction>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d006      	beq.n	8005192 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2220      	movs	r2, #32
 800518e:	661a      	str	r2, [r3, #96]	; 0x60
 8005190:	e000      	b.n	8005194 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005192:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80051a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3728      	adds	r7, #40	; 0x28
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b088      	sub	sp, #32
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	603b      	str	r3, [r7, #0]
 80051bc:	4613      	mov	r3, r2
 80051be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80051c0:	f7fd f996 	bl	80024f0 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c8:	1a9b      	subs	r3, r3, r2
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	4413      	add	r3, r2
 80051ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80051d0:	f7fd f98e 	bl	80024f0 <HAL_GetTick>
 80051d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80051d6:	4b39      	ldr	r3, [pc, #228]	; (80052bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	015b      	lsls	r3, r3, #5
 80051dc:	0d1b      	lsrs	r3, r3, #20
 80051de:	69fa      	ldr	r2, [r7, #28]
 80051e0:	fb02 f303 	mul.w	r3, r2, r3
 80051e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051e6:	e054      	b.n	8005292 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ee:	d050      	beq.n	8005292 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051f0:	f7fd f97e 	bl	80024f0 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	69fa      	ldr	r2, [r7, #28]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d902      	bls.n	8005206 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d13d      	bne.n	8005282 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005214:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800521e:	d111      	bne.n	8005244 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005228:	d004      	beq.n	8005234 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005232:	d107      	bne.n	8005244 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005242:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005248:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800524c:	d10f      	bne.n	800526e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800525c:	601a      	str	r2, [r3, #0]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800526c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e017      	b.n	80052b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d101      	bne.n	800528c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005288:	2300      	movs	r3, #0
 800528a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	3b01      	subs	r3, #1
 8005290:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	689a      	ldr	r2, [r3, #8]
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	4013      	ands	r3, r2
 800529c:	68ba      	ldr	r2, [r7, #8]
 800529e:	429a      	cmp	r2, r3
 80052a0:	bf0c      	ite	eq
 80052a2:	2301      	moveq	r3, #1
 80052a4:	2300      	movne	r3, #0
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	461a      	mov	r2, r3
 80052aa:	79fb      	ldrb	r3, [r7, #7]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d19b      	bne.n	80051e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3720      	adds	r7, #32
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	2000001c 	.word	0x2000001c

080052c0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b08a      	sub	sp, #40	; 0x28
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
 80052cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80052ce:	2300      	movs	r3, #0
 80052d0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80052d2:	f7fd f90d 	bl	80024f0 <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052da:	1a9b      	subs	r3, r3, r2
 80052dc:	683a      	ldr	r2, [r7, #0]
 80052de:	4413      	add	r3, r2
 80052e0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80052e2:	f7fd f905 	bl	80024f0 <HAL_GetTick>
 80052e6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	330c      	adds	r3, #12
 80052ee:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80052f0:	4b3d      	ldr	r3, [pc, #244]	; (80053e8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	4613      	mov	r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	4413      	add	r3, r2
 80052fa:	00da      	lsls	r2, r3, #3
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	0d1b      	lsrs	r3, r3, #20
 8005300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005302:	fb02 f303 	mul.w	r3, r2, r3
 8005306:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005308:	e060      	b.n	80053cc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005310:	d107      	bne.n	8005322 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d104      	bne.n	8005322 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	b2db      	uxtb	r3, r3
 800531e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005320:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005328:	d050      	beq.n	80053cc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800532a:	f7fd f8e1 	bl	80024f0 <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	6a3b      	ldr	r3, [r7, #32]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005336:	429a      	cmp	r2, r3
 8005338:	d902      	bls.n	8005340 <SPI_WaitFifoStateUntilTimeout+0x80>
 800533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533c:	2b00      	cmp	r3, #0
 800533e:	d13d      	bne.n	80053bc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	685a      	ldr	r2, [r3, #4]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800534e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005358:	d111      	bne.n	800537e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005362:	d004      	beq.n	800536e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800536c:	d107      	bne.n	800537e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800537c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005386:	d10f      	bne.n	80053a8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005396:	601a      	str	r2, [r3, #0]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e010      	b.n	80053de <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80053c2:	2300      	movs	r3, #0
 80053c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	3b01      	subs	r3, #1
 80053ca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689a      	ldr	r2, [r3, #8]
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	4013      	ands	r3, r2
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d196      	bne.n	800530a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3728      	adds	r7, #40	; 0x28
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	2000001c 	.word	0x2000001c

080053ec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b088      	sub	sp, #32
 80053f0:	af02      	add	r7, sp, #8
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005400:	d111      	bne.n	8005426 <SPI_EndRxTransaction+0x3a>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800540a:	d004      	beq.n	8005416 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005414:	d107      	bne.n	8005426 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005424:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800542e:	d112      	bne.n	8005456 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	9300      	str	r3, [sp, #0]
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	2200      	movs	r2, #0
 8005438:	2180      	movs	r1, #128	; 0x80
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f7ff feb8 	bl	80051b0 <SPI_WaitFlagStateUntilTimeout>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d021      	beq.n	800548a <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800544a:	f043 0220 	orr.w	r2, r3, #32
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	e03d      	b.n	80054d2 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005456:	4b21      	ldr	r3, [pc, #132]	; (80054dc <SPI_EndRxTransaction+0xf0>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a21      	ldr	r2, [pc, #132]	; (80054e0 <SPI_EndRxTransaction+0xf4>)
 800545c:	fba2 2303 	umull	r2, r3, r2, r3
 8005460:	0d5b      	lsrs	r3, r3, #21
 8005462:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005466:	fb02 f303 	mul.w	r3, r2, r3
 800546a:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00a      	beq.n	8005488 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	3b01      	subs	r3, #1
 8005476:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005482:	2b80      	cmp	r3, #128	; 0x80
 8005484:	d0f2      	beq.n	800546c <SPI_EndRxTransaction+0x80>
 8005486:	e000      	b.n	800548a <SPI_EndRxTransaction+0x9e>
        break;
 8005488:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005492:	d11d      	bne.n	80054d0 <SPI_EndRxTransaction+0xe4>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800549c:	d004      	beq.n	80054a8 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054a6:	d113      	bne.n	80054d0 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	9300      	str	r3, [sp, #0]
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f7ff ff03 	bl	80052c0 <SPI_WaitFifoStateUntilTimeout>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d007      	beq.n	80054d0 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054c4:	f043 0220 	orr.w	r2, r3, #32
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e000      	b.n	80054d2 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3718      	adds	r7, #24
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	2000001c 	.word	0x2000001c
 80054e0:	165e9f81 	.word	0x165e9f81

080054e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b088      	sub	sp, #32
 80054e8:	af02      	add	r7, sp, #8
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	9300      	str	r3, [sp, #0]
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f7ff fedf 	bl	80052c0 <SPI_WaitFifoStateUntilTimeout>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d007      	beq.n	8005518 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800550c:	f043 0220 	orr.w	r2, r3, #32
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e046      	b.n	80055a6 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005518:	4b25      	ldr	r3, [pc, #148]	; (80055b0 <SPI_EndRxTxTransaction+0xcc>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a25      	ldr	r2, [pc, #148]	; (80055b4 <SPI_EndRxTxTransaction+0xd0>)
 800551e:	fba2 2303 	umull	r2, r3, r2, r3
 8005522:	0d5b      	lsrs	r3, r3, #21
 8005524:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005528:	fb02 f303 	mul.w	r3, r2, r3
 800552c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005536:	d112      	bne.n	800555e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	9300      	str	r3, [sp, #0]
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	2200      	movs	r2, #0
 8005540:	2180      	movs	r1, #128	; 0x80
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f7ff fe34 	bl	80051b0 <SPI_WaitFlagStateUntilTimeout>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d016      	beq.n	800557c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005552:	f043 0220 	orr.w	r2, r3, #32
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e023      	b.n	80055a6 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00a      	beq.n	800557a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	3b01      	subs	r3, #1
 8005568:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005574:	2b80      	cmp	r3, #128	; 0x80
 8005576:	d0f2      	beq.n	800555e <SPI_EndRxTxTransaction+0x7a>
 8005578:	e000      	b.n	800557c <SPI_EndRxTxTransaction+0x98>
        break;
 800557a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	9300      	str	r3, [sp, #0]
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	2200      	movs	r2, #0
 8005584:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	f7ff fe99 	bl	80052c0 <SPI_WaitFifoStateUntilTimeout>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d007      	beq.n	80055a4 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005598:	f043 0220 	orr.w	r2, r3, #32
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e000      	b.n	80055a6 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3718      	adds	r7, #24
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	2000001c 	.word	0x2000001c
 80055b4:	165e9f81 	.word	0x165e9f81

080055b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e040      	b.n	800564c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d106      	bne.n	80055e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f7fc fd8a 	bl	80020f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2224      	movs	r2, #36	; 0x24
 80055e4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f022 0201 	bic.w	r2, r2, #1
 80055f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f8b0 	bl	800575c <UART_SetConfig>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d101      	bne.n	8005606 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e022      	b.n	800564c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560a:	2b00      	cmp	r3, #0
 800560c:	d002      	beq.n	8005614 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 fb08 	bl	8005c24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	685a      	ldr	r2, [r3, #4]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005622:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	689a      	ldr	r2, [r3, #8]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005632:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f042 0201 	orr.w	r2, r2, #1
 8005642:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 fb8f 	bl	8005d68 <UART_CheckIdleState>
 800564a:	4603      	mov	r3, r0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3708      	adds	r7, #8
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b08a      	sub	sp, #40	; 0x28
 8005658:	af02      	add	r7, sp, #8
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	603b      	str	r3, [r7, #0]
 8005660:	4613      	mov	r3, r2
 8005662:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005668:	2b20      	cmp	r3, #32
 800566a:	d171      	bne.n	8005750 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d002      	beq.n	8005678 <HAL_UART_Transmit+0x24>
 8005672:	88fb      	ldrh	r3, [r7, #6]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d101      	bne.n	800567c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e06a      	b.n	8005752 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2221      	movs	r2, #33	; 0x21
 8005688:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800568a:	f7fc ff31 	bl	80024f0 <HAL_GetTick>
 800568e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	88fa      	ldrh	r2, [r7, #6]
 8005694:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	88fa      	ldrh	r2, [r7, #6]
 800569c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056a8:	d108      	bne.n	80056bc <HAL_UART_Transmit+0x68>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d104      	bne.n	80056bc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80056b2:	2300      	movs	r3, #0
 80056b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	61bb      	str	r3, [r7, #24]
 80056ba:	e003      	b.n	80056c4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056c0:	2300      	movs	r3, #0
 80056c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80056c4:	e02c      	b.n	8005720 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	9300      	str	r3, [sp, #0]
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	2200      	movs	r2, #0
 80056ce:	2180      	movs	r1, #128	; 0x80
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f000 fb80 	bl	8005dd6 <UART_WaitOnFlagUntilTimeout>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d001      	beq.n	80056e0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e038      	b.n	8005752 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10b      	bne.n	80056fe <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	881b      	ldrh	r3, [r3, #0]
 80056ea:	461a      	mov	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056f4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	3302      	adds	r3, #2
 80056fa:	61bb      	str	r3, [r7, #24]
 80056fc:	e007      	b.n	800570e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	781a      	ldrb	r2, [r3, #0]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	3301      	adds	r3, #1
 800570c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005714:	b29b      	uxth	r3, r3
 8005716:	3b01      	subs	r3, #1
 8005718:	b29a      	uxth	r2, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005726:	b29b      	uxth	r3, r3
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1cc      	bne.n	80056c6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	9300      	str	r3, [sp, #0]
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	2200      	movs	r2, #0
 8005734:	2140      	movs	r1, #64	; 0x40
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f000 fb4d 	bl	8005dd6 <UART_WaitOnFlagUntilTimeout>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d001      	beq.n	8005746 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e005      	b.n	8005752 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2220      	movs	r2, #32
 800574a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800574c:	2300      	movs	r3, #0
 800574e:	e000      	b.n	8005752 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005750:	2302      	movs	r3, #2
  }
}
 8005752:	4618      	mov	r0, r3
 8005754:	3720      	adds	r7, #32
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
	...

0800575c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b088      	sub	sp, #32
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005764:	2300      	movs	r3, #0
 8005766:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	689a      	ldr	r2, [r3, #8]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	431a      	orrs	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	431a      	orrs	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	69db      	ldr	r3, [r3, #28]
 800577c:	4313      	orrs	r3, r2
 800577e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	4ba6      	ldr	r3, [pc, #664]	; (8005a20 <UART_SetConfig+0x2c4>)
 8005788:	4013      	ands	r3, r2
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	6812      	ldr	r2, [r2, #0]
 800578e:	6979      	ldr	r1, [r7, #20]
 8005790:	430b      	orrs	r3, r1
 8005792:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68da      	ldr	r2, [r3, #12]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	430a      	orrs	r2, r1
 80057a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a1b      	ldr	r3, [r3, #32]
 80057b4:	697a      	ldr	r2, [r7, #20]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	430a      	orrs	r2, r1
 80057cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a94      	ldr	r2, [pc, #592]	; (8005a24 <UART_SetConfig+0x2c8>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d120      	bne.n	800581a <UART_SetConfig+0xbe>
 80057d8:	4b93      	ldr	r3, [pc, #588]	; (8005a28 <UART_SetConfig+0x2cc>)
 80057da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057de:	f003 0303 	and.w	r3, r3, #3
 80057e2:	2b03      	cmp	r3, #3
 80057e4:	d816      	bhi.n	8005814 <UART_SetConfig+0xb8>
 80057e6:	a201      	add	r2, pc, #4	; (adr r2, 80057ec <UART_SetConfig+0x90>)
 80057e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ec:	080057fd 	.word	0x080057fd
 80057f0:	08005809 	.word	0x08005809
 80057f4:	08005803 	.word	0x08005803
 80057f8:	0800580f 	.word	0x0800580f
 80057fc:	2301      	movs	r3, #1
 80057fe:	77fb      	strb	r3, [r7, #31]
 8005800:	e150      	b.n	8005aa4 <UART_SetConfig+0x348>
 8005802:	2302      	movs	r3, #2
 8005804:	77fb      	strb	r3, [r7, #31]
 8005806:	e14d      	b.n	8005aa4 <UART_SetConfig+0x348>
 8005808:	2304      	movs	r3, #4
 800580a:	77fb      	strb	r3, [r7, #31]
 800580c:	e14a      	b.n	8005aa4 <UART_SetConfig+0x348>
 800580e:	2308      	movs	r3, #8
 8005810:	77fb      	strb	r3, [r7, #31]
 8005812:	e147      	b.n	8005aa4 <UART_SetConfig+0x348>
 8005814:	2310      	movs	r3, #16
 8005816:	77fb      	strb	r3, [r7, #31]
 8005818:	e144      	b.n	8005aa4 <UART_SetConfig+0x348>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a83      	ldr	r2, [pc, #524]	; (8005a2c <UART_SetConfig+0x2d0>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d132      	bne.n	800588a <UART_SetConfig+0x12e>
 8005824:	4b80      	ldr	r3, [pc, #512]	; (8005a28 <UART_SetConfig+0x2cc>)
 8005826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800582a:	f003 030c 	and.w	r3, r3, #12
 800582e:	2b0c      	cmp	r3, #12
 8005830:	d828      	bhi.n	8005884 <UART_SetConfig+0x128>
 8005832:	a201      	add	r2, pc, #4	; (adr r2, 8005838 <UART_SetConfig+0xdc>)
 8005834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005838:	0800586d 	.word	0x0800586d
 800583c:	08005885 	.word	0x08005885
 8005840:	08005885 	.word	0x08005885
 8005844:	08005885 	.word	0x08005885
 8005848:	08005879 	.word	0x08005879
 800584c:	08005885 	.word	0x08005885
 8005850:	08005885 	.word	0x08005885
 8005854:	08005885 	.word	0x08005885
 8005858:	08005873 	.word	0x08005873
 800585c:	08005885 	.word	0x08005885
 8005860:	08005885 	.word	0x08005885
 8005864:	08005885 	.word	0x08005885
 8005868:	0800587f 	.word	0x0800587f
 800586c:	2300      	movs	r3, #0
 800586e:	77fb      	strb	r3, [r7, #31]
 8005870:	e118      	b.n	8005aa4 <UART_SetConfig+0x348>
 8005872:	2302      	movs	r3, #2
 8005874:	77fb      	strb	r3, [r7, #31]
 8005876:	e115      	b.n	8005aa4 <UART_SetConfig+0x348>
 8005878:	2304      	movs	r3, #4
 800587a:	77fb      	strb	r3, [r7, #31]
 800587c:	e112      	b.n	8005aa4 <UART_SetConfig+0x348>
 800587e:	2308      	movs	r3, #8
 8005880:	77fb      	strb	r3, [r7, #31]
 8005882:	e10f      	b.n	8005aa4 <UART_SetConfig+0x348>
 8005884:	2310      	movs	r3, #16
 8005886:	77fb      	strb	r3, [r7, #31]
 8005888:	e10c      	b.n	8005aa4 <UART_SetConfig+0x348>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a68      	ldr	r2, [pc, #416]	; (8005a30 <UART_SetConfig+0x2d4>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d120      	bne.n	80058d6 <UART_SetConfig+0x17a>
 8005894:	4b64      	ldr	r3, [pc, #400]	; (8005a28 <UART_SetConfig+0x2cc>)
 8005896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800589a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800589e:	2b30      	cmp	r3, #48	; 0x30
 80058a0:	d013      	beq.n	80058ca <UART_SetConfig+0x16e>
 80058a2:	2b30      	cmp	r3, #48	; 0x30
 80058a4:	d814      	bhi.n	80058d0 <UART_SetConfig+0x174>
 80058a6:	2b20      	cmp	r3, #32
 80058a8:	d009      	beq.n	80058be <UART_SetConfig+0x162>
 80058aa:	2b20      	cmp	r3, #32
 80058ac:	d810      	bhi.n	80058d0 <UART_SetConfig+0x174>
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d002      	beq.n	80058b8 <UART_SetConfig+0x15c>
 80058b2:	2b10      	cmp	r3, #16
 80058b4:	d006      	beq.n	80058c4 <UART_SetConfig+0x168>
 80058b6:	e00b      	b.n	80058d0 <UART_SetConfig+0x174>
 80058b8:	2300      	movs	r3, #0
 80058ba:	77fb      	strb	r3, [r7, #31]
 80058bc:	e0f2      	b.n	8005aa4 <UART_SetConfig+0x348>
 80058be:	2302      	movs	r3, #2
 80058c0:	77fb      	strb	r3, [r7, #31]
 80058c2:	e0ef      	b.n	8005aa4 <UART_SetConfig+0x348>
 80058c4:	2304      	movs	r3, #4
 80058c6:	77fb      	strb	r3, [r7, #31]
 80058c8:	e0ec      	b.n	8005aa4 <UART_SetConfig+0x348>
 80058ca:	2308      	movs	r3, #8
 80058cc:	77fb      	strb	r3, [r7, #31]
 80058ce:	e0e9      	b.n	8005aa4 <UART_SetConfig+0x348>
 80058d0:	2310      	movs	r3, #16
 80058d2:	77fb      	strb	r3, [r7, #31]
 80058d4:	e0e6      	b.n	8005aa4 <UART_SetConfig+0x348>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a56      	ldr	r2, [pc, #344]	; (8005a34 <UART_SetConfig+0x2d8>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d120      	bne.n	8005922 <UART_SetConfig+0x1c6>
 80058e0:	4b51      	ldr	r3, [pc, #324]	; (8005a28 <UART_SetConfig+0x2cc>)
 80058e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80058ea:	2bc0      	cmp	r3, #192	; 0xc0
 80058ec:	d013      	beq.n	8005916 <UART_SetConfig+0x1ba>
 80058ee:	2bc0      	cmp	r3, #192	; 0xc0
 80058f0:	d814      	bhi.n	800591c <UART_SetConfig+0x1c0>
 80058f2:	2b80      	cmp	r3, #128	; 0x80
 80058f4:	d009      	beq.n	800590a <UART_SetConfig+0x1ae>
 80058f6:	2b80      	cmp	r3, #128	; 0x80
 80058f8:	d810      	bhi.n	800591c <UART_SetConfig+0x1c0>
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d002      	beq.n	8005904 <UART_SetConfig+0x1a8>
 80058fe:	2b40      	cmp	r3, #64	; 0x40
 8005900:	d006      	beq.n	8005910 <UART_SetConfig+0x1b4>
 8005902:	e00b      	b.n	800591c <UART_SetConfig+0x1c0>
 8005904:	2300      	movs	r3, #0
 8005906:	77fb      	strb	r3, [r7, #31]
 8005908:	e0cc      	b.n	8005aa4 <UART_SetConfig+0x348>
 800590a:	2302      	movs	r3, #2
 800590c:	77fb      	strb	r3, [r7, #31]
 800590e:	e0c9      	b.n	8005aa4 <UART_SetConfig+0x348>
 8005910:	2304      	movs	r3, #4
 8005912:	77fb      	strb	r3, [r7, #31]
 8005914:	e0c6      	b.n	8005aa4 <UART_SetConfig+0x348>
 8005916:	2308      	movs	r3, #8
 8005918:	77fb      	strb	r3, [r7, #31]
 800591a:	e0c3      	b.n	8005aa4 <UART_SetConfig+0x348>
 800591c:	2310      	movs	r3, #16
 800591e:	77fb      	strb	r3, [r7, #31]
 8005920:	e0c0      	b.n	8005aa4 <UART_SetConfig+0x348>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a44      	ldr	r2, [pc, #272]	; (8005a38 <UART_SetConfig+0x2dc>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d125      	bne.n	8005978 <UART_SetConfig+0x21c>
 800592c:	4b3e      	ldr	r3, [pc, #248]	; (8005a28 <UART_SetConfig+0x2cc>)
 800592e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005936:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800593a:	d017      	beq.n	800596c <UART_SetConfig+0x210>
 800593c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005940:	d817      	bhi.n	8005972 <UART_SetConfig+0x216>
 8005942:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005946:	d00b      	beq.n	8005960 <UART_SetConfig+0x204>
 8005948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800594c:	d811      	bhi.n	8005972 <UART_SetConfig+0x216>
 800594e:	2b00      	cmp	r3, #0
 8005950:	d003      	beq.n	800595a <UART_SetConfig+0x1fe>
 8005952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005956:	d006      	beq.n	8005966 <UART_SetConfig+0x20a>
 8005958:	e00b      	b.n	8005972 <UART_SetConfig+0x216>
 800595a:	2300      	movs	r3, #0
 800595c:	77fb      	strb	r3, [r7, #31]
 800595e:	e0a1      	b.n	8005aa4 <UART_SetConfig+0x348>
 8005960:	2302      	movs	r3, #2
 8005962:	77fb      	strb	r3, [r7, #31]
 8005964:	e09e      	b.n	8005aa4 <UART_SetConfig+0x348>
 8005966:	2304      	movs	r3, #4
 8005968:	77fb      	strb	r3, [r7, #31]
 800596a:	e09b      	b.n	8005aa4 <UART_SetConfig+0x348>
 800596c:	2308      	movs	r3, #8
 800596e:	77fb      	strb	r3, [r7, #31]
 8005970:	e098      	b.n	8005aa4 <UART_SetConfig+0x348>
 8005972:	2310      	movs	r3, #16
 8005974:	77fb      	strb	r3, [r7, #31]
 8005976:	e095      	b.n	8005aa4 <UART_SetConfig+0x348>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a2f      	ldr	r2, [pc, #188]	; (8005a3c <UART_SetConfig+0x2e0>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d125      	bne.n	80059ce <UART_SetConfig+0x272>
 8005982:	4b29      	ldr	r3, [pc, #164]	; (8005a28 <UART_SetConfig+0x2cc>)
 8005984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005988:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800598c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005990:	d017      	beq.n	80059c2 <UART_SetConfig+0x266>
 8005992:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005996:	d817      	bhi.n	80059c8 <UART_SetConfig+0x26c>
 8005998:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800599c:	d00b      	beq.n	80059b6 <UART_SetConfig+0x25a>
 800599e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059a2:	d811      	bhi.n	80059c8 <UART_SetConfig+0x26c>
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d003      	beq.n	80059b0 <UART_SetConfig+0x254>
 80059a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059ac:	d006      	beq.n	80059bc <UART_SetConfig+0x260>
 80059ae:	e00b      	b.n	80059c8 <UART_SetConfig+0x26c>
 80059b0:	2301      	movs	r3, #1
 80059b2:	77fb      	strb	r3, [r7, #31]
 80059b4:	e076      	b.n	8005aa4 <UART_SetConfig+0x348>
 80059b6:	2302      	movs	r3, #2
 80059b8:	77fb      	strb	r3, [r7, #31]
 80059ba:	e073      	b.n	8005aa4 <UART_SetConfig+0x348>
 80059bc:	2304      	movs	r3, #4
 80059be:	77fb      	strb	r3, [r7, #31]
 80059c0:	e070      	b.n	8005aa4 <UART_SetConfig+0x348>
 80059c2:	2308      	movs	r3, #8
 80059c4:	77fb      	strb	r3, [r7, #31]
 80059c6:	e06d      	b.n	8005aa4 <UART_SetConfig+0x348>
 80059c8:	2310      	movs	r3, #16
 80059ca:	77fb      	strb	r3, [r7, #31]
 80059cc:	e06a      	b.n	8005aa4 <UART_SetConfig+0x348>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a1b      	ldr	r2, [pc, #108]	; (8005a40 <UART_SetConfig+0x2e4>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d138      	bne.n	8005a4a <UART_SetConfig+0x2ee>
 80059d8:	4b13      	ldr	r3, [pc, #76]	; (8005a28 <UART_SetConfig+0x2cc>)
 80059da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059de:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80059e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80059e6:	d017      	beq.n	8005a18 <UART_SetConfig+0x2bc>
 80059e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80059ec:	d82a      	bhi.n	8005a44 <UART_SetConfig+0x2e8>
 80059ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059f2:	d00b      	beq.n	8005a0c <UART_SetConfig+0x2b0>
 80059f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059f8:	d824      	bhi.n	8005a44 <UART_SetConfig+0x2e8>
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d003      	beq.n	8005a06 <UART_SetConfig+0x2aa>
 80059fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a02:	d006      	beq.n	8005a12 <UART_SetConfig+0x2b6>
 8005a04:	e01e      	b.n	8005a44 <UART_SetConfig+0x2e8>
 8005a06:	2300      	movs	r3, #0
 8005a08:	77fb      	strb	r3, [r7, #31]
 8005a0a:	e04b      	b.n	8005aa4 <UART_SetConfig+0x348>
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	77fb      	strb	r3, [r7, #31]
 8005a10:	e048      	b.n	8005aa4 <UART_SetConfig+0x348>
 8005a12:	2304      	movs	r3, #4
 8005a14:	77fb      	strb	r3, [r7, #31]
 8005a16:	e045      	b.n	8005aa4 <UART_SetConfig+0x348>
 8005a18:	2308      	movs	r3, #8
 8005a1a:	77fb      	strb	r3, [r7, #31]
 8005a1c:	e042      	b.n	8005aa4 <UART_SetConfig+0x348>
 8005a1e:	bf00      	nop
 8005a20:	efff69f3 	.word	0xefff69f3
 8005a24:	40011000 	.word	0x40011000
 8005a28:	40023800 	.word	0x40023800
 8005a2c:	40004400 	.word	0x40004400
 8005a30:	40004800 	.word	0x40004800
 8005a34:	40004c00 	.word	0x40004c00
 8005a38:	40005000 	.word	0x40005000
 8005a3c:	40011400 	.word	0x40011400
 8005a40:	40007800 	.word	0x40007800
 8005a44:	2310      	movs	r3, #16
 8005a46:	77fb      	strb	r3, [r7, #31]
 8005a48:	e02c      	b.n	8005aa4 <UART_SetConfig+0x348>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a72      	ldr	r2, [pc, #456]	; (8005c18 <UART_SetConfig+0x4bc>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d125      	bne.n	8005aa0 <UART_SetConfig+0x344>
 8005a54:	4b71      	ldr	r3, [pc, #452]	; (8005c1c <UART_SetConfig+0x4c0>)
 8005a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a5a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005a5e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005a62:	d017      	beq.n	8005a94 <UART_SetConfig+0x338>
 8005a64:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005a68:	d817      	bhi.n	8005a9a <UART_SetConfig+0x33e>
 8005a6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a6e:	d00b      	beq.n	8005a88 <UART_SetConfig+0x32c>
 8005a70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a74:	d811      	bhi.n	8005a9a <UART_SetConfig+0x33e>
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d003      	beq.n	8005a82 <UART_SetConfig+0x326>
 8005a7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a7e:	d006      	beq.n	8005a8e <UART_SetConfig+0x332>
 8005a80:	e00b      	b.n	8005a9a <UART_SetConfig+0x33e>
 8005a82:	2300      	movs	r3, #0
 8005a84:	77fb      	strb	r3, [r7, #31]
 8005a86:	e00d      	b.n	8005aa4 <UART_SetConfig+0x348>
 8005a88:	2302      	movs	r3, #2
 8005a8a:	77fb      	strb	r3, [r7, #31]
 8005a8c:	e00a      	b.n	8005aa4 <UART_SetConfig+0x348>
 8005a8e:	2304      	movs	r3, #4
 8005a90:	77fb      	strb	r3, [r7, #31]
 8005a92:	e007      	b.n	8005aa4 <UART_SetConfig+0x348>
 8005a94:	2308      	movs	r3, #8
 8005a96:	77fb      	strb	r3, [r7, #31]
 8005a98:	e004      	b.n	8005aa4 <UART_SetConfig+0x348>
 8005a9a:	2310      	movs	r3, #16
 8005a9c:	77fb      	strb	r3, [r7, #31]
 8005a9e:	e001      	b.n	8005aa4 <UART_SetConfig+0x348>
 8005aa0:	2310      	movs	r3, #16
 8005aa2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	69db      	ldr	r3, [r3, #28]
 8005aa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005aac:	d15b      	bne.n	8005b66 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005aae:	7ffb      	ldrb	r3, [r7, #31]
 8005ab0:	2b08      	cmp	r3, #8
 8005ab2:	d828      	bhi.n	8005b06 <UART_SetConfig+0x3aa>
 8005ab4:	a201      	add	r2, pc, #4	; (adr r2, 8005abc <UART_SetConfig+0x360>)
 8005ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aba:	bf00      	nop
 8005abc:	08005ae1 	.word	0x08005ae1
 8005ac0:	08005ae9 	.word	0x08005ae9
 8005ac4:	08005af1 	.word	0x08005af1
 8005ac8:	08005b07 	.word	0x08005b07
 8005acc:	08005af7 	.word	0x08005af7
 8005ad0:	08005b07 	.word	0x08005b07
 8005ad4:	08005b07 	.word	0x08005b07
 8005ad8:	08005b07 	.word	0x08005b07
 8005adc:	08005aff 	.word	0x08005aff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ae0:	f7fe fb60 	bl	80041a4 <HAL_RCC_GetPCLK1Freq>
 8005ae4:	61b8      	str	r0, [r7, #24]
        break;
 8005ae6:	e013      	b.n	8005b10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ae8:	f7fe fb70 	bl	80041cc <HAL_RCC_GetPCLK2Freq>
 8005aec:	61b8      	str	r0, [r7, #24]
        break;
 8005aee:	e00f      	b.n	8005b10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005af0:	4b4b      	ldr	r3, [pc, #300]	; (8005c20 <UART_SetConfig+0x4c4>)
 8005af2:	61bb      	str	r3, [r7, #24]
        break;
 8005af4:	e00c      	b.n	8005b10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005af6:	f7fe fa83 	bl	8004000 <HAL_RCC_GetSysClockFreq>
 8005afa:	61b8      	str	r0, [r7, #24]
        break;
 8005afc:	e008      	b.n	8005b10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005afe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b02:	61bb      	str	r3, [r7, #24]
        break;
 8005b04:	e004      	b.n	8005b10 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005b06:	2300      	movs	r3, #0
 8005b08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	77bb      	strb	r3, [r7, #30]
        break;
 8005b0e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d074      	beq.n	8005c00 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	005a      	lsls	r2, r3, #1
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	085b      	lsrs	r3, r3, #1
 8005b20:	441a      	add	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b2a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	2b0f      	cmp	r3, #15
 8005b30:	d916      	bls.n	8005b60 <UART_SetConfig+0x404>
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b38:	d212      	bcs.n	8005b60 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	f023 030f 	bic.w	r3, r3, #15
 8005b42:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	085b      	lsrs	r3, r3, #1
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	f003 0307 	and.w	r3, r3, #7
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	89fb      	ldrh	r3, [r7, #14]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	89fa      	ldrh	r2, [r7, #14]
 8005b5c:	60da      	str	r2, [r3, #12]
 8005b5e:	e04f      	b.n	8005c00 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	77bb      	strb	r3, [r7, #30]
 8005b64:	e04c      	b.n	8005c00 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b66:	7ffb      	ldrb	r3, [r7, #31]
 8005b68:	2b08      	cmp	r3, #8
 8005b6a:	d828      	bhi.n	8005bbe <UART_SetConfig+0x462>
 8005b6c:	a201      	add	r2, pc, #4	; (adr r2, 8005b74 <UART_SetConfig+0x418>)
 8005b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b72:	bf00      	nop
 8005b74:	08005b99 	.word	0x08005b99
 8005b78:	08005ba1 	.word	0x08005ba1
 8005b7c:	08005ba9 	.word	0x08005ba9
 8005b80:	08005bbf 	.word	0x08005bbf
 8005b84:	08005baf 	.word	0x08005baf
 8005b88:	08005bbf 	.word	0x08005bbf
 8005b8c:	08005bbf 	.word	0x08005bbf
 8005b90:	08005bbf 	.word	0x08005bbf
 8005b94:	08005bb7 	.word	0x08005bb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b98:	f7fe fb04 	bl	80041a4 <HAL_RCC_GetPCLK1Freq>
 8005b9c:	61b8      	str	r0, [r7, #24]
        break;
 8005b9e:	e013      	b.n	8005bc8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ba0:	f7fe fb14 	bl	80041cc <HAL_RCC_GetPCLK2Freq>
 8005ba4:	61b8      	str	r0, [r7, #24]
        break;
 8005ba6:	e00f      	b.n	8005bc8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ba8:	4b1d      	ldr	r3, [pc, #116]	; (8005c20 <UART_SetConfig+0x4c4>)
 8005baa:	61bb      	str	r3, [r7, #24]
        break;
 8005bac:	e00c      	b.n	8005bc8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bae:	f7fe fa27 	bl	8004000 <HAL_RCC_GetSysClockFreq>
 8005bb2:	61b8      	str	r0, [r7, #24]
        break;
 8005bb4:	e008      	b.n	8005bc8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bba:	61bb      	str	r3, [r7, #24]
        break;
 8005bbc:	e004      	b.n	8005bc8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	77bb      	strb	r3, [r7, #30]
        break;
 8005bc6:	bf00      	nop
    }

    if (pclk != 0U)
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d018      	beq.n	8005c00 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	085a      	lsrs	r2, r3, #1
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	441a      	add	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005be0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	2b0f      	cmp	r3, #15
 8005be6:	d909      	bls.n	8005bfc <UART_SetConfig+0x4a0>
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bee:	d205      	bcs.n	8005bfc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	60da      	str	r2, [r3, #12]
 8005bfa:	e001      	b.n	8005c00 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005c0c:	7fbb      	ldrb	r3, [r7, #30]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3720      	adds	r7, #32
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	40007c00 	.word	0x40007c00
 8005c1c:	40023800 	.word	0x40023800
 8005c20:	00f42400 	.word	0x00f42400

08005c24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c30:	f003 0301 	and.w	r3, r3, #1
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00a      	beq.n	8005c4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c52:	f003 0302 	and.w	r3, r3, #2
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00a      	beq.n	8005c70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	430a      	orrs	r2, r1
 8005c6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c74:	f003 0304 	and.w	r3, r3, #4
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00a      	beq.n	8005c92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c96:	f003 0308 	and.w	r3, r3, #8
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00a      	beq.n	8005cb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	430a      	orrs	r2, r1
 8005cb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb8:	f003 0310 	and.w	r3, r3, #16
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00a      	beq.n	8005cd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	430a      	orrs	r2, r1
 8005cd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cda:	f003 0320 	and.w	r3, r3, #32
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00a      	beq.n	8005cf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	430a      	orrs	r2, r1
 8005cf6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d01a      	beq.n	8005d3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	430a      	orrs	r2, r1
 8005d18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d22:	d10a      	bne.n	8005d3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	430a      	orrs	r2, r1
 8005d38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00a      	beq.n	8005d5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	430a      	orrs	r2, r1
 8005d5a:	605a      	str	r2, [r3, #4]
  }
}
 8005d5c:	bf00      	nop
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b086      	sub	sp, #24
 8005d6c:	af02      	add	r7, sp, #8
 8005d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d78:	f7fc fbba 	bl	80024f0 <HAL_GetTick>
 8005d7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 0308 	and.w	r3, r3, #8
 8005d88:	2b08      	cmp	r3, #8
 8005d8a:	d10e      	bne.n	8005daa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d90:	9300      	str	r3, [sp, #0]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 f81b 	bl	8005dd6 <UART_WaitOnFlagUntilTimeout>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d001      	beq.n	8005daa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e011      	b.n	8005dce <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2220      	movs	r2, #32
 8005dae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2220      	movs	r2, #32
 8005db4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3710      	adds	r7, #16
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b09c      	sub	sp, #112	; 0x70
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	60f8      	str	r0, [r7, #12]
 8005dde:	60b9      	str	r1, [r7, #8]
 8005de0:	603b      	str	r3, [r7, #0]
 8005de2:	4613      	mov	r3, r2
 8005de4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005de6:	e0a7      	b.n	8005f38 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005de8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dee:	f000 80a3 	beq.w	8005f38 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005df2:	f7fc fb7d 	bl	80024f0 <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d302      	bcc.n	8005e08 <UART_WaitOnFlagUntilTimeout+0x32>
 8005e02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d13f      	bne.n	8005e88 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e10:	e853 3f00 	ldrex	r3, [r3]
 8005e14:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005e16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e1c:	667b      	str	r3, [r7, #100]	; 0x64
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	461a      	mov	r2, r3
 8005e24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e28:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005e2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005e2e:	e841 2300 	strex	r3, r2, [r1]
 8005e32:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005e34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d1e6      	bne.n	8005e08 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	3308      	adds	r3, #8
 8005e40:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e44:	e853 3f00 	ldrex	r3, [r3]
 8005e48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e4c:	f023 0301 	bic.w	r3, r3, #1
 8005e50:	663b      	str	r3, [r7, #96]	; 0x60
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	3308      	adds	r3, #8
 8005e58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e5a:	64ba      	str	r2, [r7, #72]	; 0x48
 8005e5c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e62:	e841 2300 	strex	r3, r2, [r1]
 8005e66:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005e68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1e5      	bne.n	8005e3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2220      	movs	r2, #32
 8005e72:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2220      	movs	r2, #32
 8005e78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e068      	b.n	8005f5a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0304 	and.w	r3, r3, #4
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d050      	beq.n	8005f38 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	69db      	ldr	r3, [r3, #28]
 8005e9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ea0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ea4:	d148      	bne.n	8005f38 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005eae:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb8:	e853 3f00 	ldrex	r3, [r3]
 8005ebc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ec4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	461a      	mov	r2, r3
 8005ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ece:	637b      	str	r3, [r7, #52]	; 0x34
 8005ed0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ed4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ed6:	e841 2300 	strex	r3, r2, [r1]
 8005eda:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1e6      	bne.n	8005eb0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	3308      	adds	r3, #8
 8005ee8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	e853 3f00 	ldrex	r3, [r3]
 8005ef0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	f023 0301 	bic.w	r3, r3, #1
 8005ef8:	66bb      	str	r3, [r7, #104]	; 0x68
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	3308      	adds	r3, #8
 8005f00:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005f02:	623a      	str	r2, [r7, #32]
 8005f04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f06:	69f9      	ldr	r1, [r7, #28]
 8005f08:	6a3a      	ldr	r2, [r7, #32]
 8005f0a:	e841 2300 	strex	r3, r2, [r1]
 8005f0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d1e5      	bne.n	8005ee2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2220      	movs	r2, #32
 8005f1a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2220      	movs	r2, #32
 8005f20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2220      	movs	r2, #32
 8005f28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	e010      	b.n	8005f5a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	69da      	ldr	r2, [r3, #28]
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	4013      	ands	r3, r2
 8005f42:	68ba      	ldr	r2, [r7, #8]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	bf0c      	ite	eq
 8005f48:	2301      	moveq	r3, #1
 8005f4a:	2300      	movne	r3, #0
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	461a      	mov	r2, r3
 8005f50:	79fb      	ldrb	r3, [r7, #7]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	f43f af48 	beq.w	8005de8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3770      	adds	r7, #112	; 0x70
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <__cvt>:
 8005f62:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f66:	ec55 4b10 	vmov	r4, r5, d0
 8005f6a:	2d00      	cmp	r5, #0
 8005f6c:	460e      	mov	r6, r1
 8005f6e:	4619      	mov	r1, r3
 8005f70:	462b      	mov	r3, r5
 8005f72:	bfbb      	ittet	lt
 8005f74:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005f78:	461d      	movlt	r5, r3
 8005f7a:	2300      	movge	r3, #0
 8005f7c:	232d      	movlt	r3, #45	; 0x2d
 8005f7e:	700b      	strb	r3, [r1, #0]
 8005f80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f82:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005f86:	4691      	mov	r9, r2
 8005f88:	f023 0820 	bic.w	r8, r3, #32
 8005f8c:	bfbc      	itt	lt
 8005f8e:	4622      	movlt	r2, r4
 8005f90:	4614      	movlt	r4, r2
 8005f92:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005f96:	d005      	beq.n	8005fa4 <__cvt+0x42>
 8005f98:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005f9c:	d100      	bne.n	8005fa0 <__cvt+0x3e>
 8005f9e:	3601      	adds	r6, #1
 8005fa0:	2102      	movs	r1, #2
 8005fa2:	e000      	b.n	8005fa6 <__cvt+0x44>
 8005fa4:	2103      	movs	r1, #3
 8005fa6:	ab03      	add	r3, sp, #12
 8005fa8:	9301      	str	r3, [sp, #4]
 8005faa:	ab02      	add	r3, sp, #8
 8005fac:	9300      	str	r3, [sp, #0]
 8005fae:	ec45 4b10 	vmov	d0, r4, r5
 8005fb2:	4653      	mov	r3, sl
 8005fb4:	4632      	mov	r2, r6
 8005fb6:	f000 fe9f 	bl	8006cf8 <_dtoa_r>
 8005fba:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005fbe:	4607      	mov	r7, r0
 8005fc0:	d102      	bne.n	8005fc8 <__cvt+0x66>
 8005fc2:	f019 0f01 	tst.w	r9, #1
 8005fc6:	d022      	beq.n	800600e <__cvt+0xac>
 8005fc8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005fcc:	eb07 0906 	add.w	r9, r7, r6
 8005fd0:	d110      	bne.n	8005ff4 <__cvt+0x92>
 8005fd2:	783b      	ldrb	r3, [r7, #0]
 8005fd4:	2b30      	cmp	r3, #48	; 0x30
 8005fd6:	d10a      	bne.n	8005fee <__cvt+0x8c>
 8005fd8:	2200      	movs	r2, #0
 8005fda:	2300      	movs	r3, #0
 8005fdc:	4620      	mov	r0, r4
 8005fde:	4629      	mov	r1, r5
 8005fe0:	f7fa fd92 	bl	8000b08 <__aeabi_dcmpeq>
 8005fe4:	b918      	cbnz	r0, 8005fee <__cvt+0x8c>
 8005fe6:	f1c6 0601 	rsb	r6, r6, #1
 8005fea:	f8ca 6000 	str.w	r6, [sl]
 8005fee:	f8da 3000 	ldr.w	r3, [sl]
 8005ff2:	4499      	add	r9, r3
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	4629      	mov	r1, r5
 8005ffc:	f7fa fd84 	bl	8000b08 <__aeabi_dcmpeq>
 8006000:	b108      	cbz	r0, 8006006 <__cvt+0xa4>
 8006002:	f8cd 900c 	str.w	r9, [sp, #12]
 8006006:	2230      	movs	r2, #48	; 0x30
 8006008:	9b03      	ldr	r3, [sp, #12]
 800600a:	454b      	cmp	r3, r9
 800600c:	d307      	bcc.n	800601e <__cvt+0xbc>
 800600e:	9b03      	ldr	r3, [sp, #12]
 8006010:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006012:	1bdb      	subs	r3, r3, r7
 8006014:	4638      	mov	r0, r7
 8006016:	6013      	str	r3, [r2, #0]
 8006018:	b004      	add	sp, #16
 800601a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800601e:	1c59      	adds	r1, r3, #1
 8006020:	9103      	str	r1, [sp, #12]
 8006022:	701a      	strb	r2, [r3, #0]
 8006024:	e7f0      	b.n	8006008 <__cvt+0xa6>

08006026 <__exponent>:
 8006026:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006028:	4603      	mov	r3, r0
 800602a:	2900      	cmp	r1, #0
 800602c:	bfb8      	it	lt
 800602e:	4249      	neglt	r1, r1
 8006030:	f803 2b02 	strb.w	r2, [r3], #2
 8006034:	bfb4      	ite	lt
 8006036:	222d      	movlt	r2, #45	; 0x2d
 8006038:	222b      	movge	r2, #43	; 0x2b
 800603a:	2909      	cmp	r1, #9
 800603c:	7042      	strb	r2, [r0, #1]
 800603e:	dd2a      	ble.n	8006096 <__exponent+0x70>
 8006040:	f10d 0207 	add.w	r2, sp, #7
 8006044:	4617      	mov	r7, r2
 8006046:	260a      	movs	r6, #10
 8006048:	4694      	mov	ip, r2
 800604a:	fb91 f5f6 	sdiv	r5, r1, r6
 800604e:	fb06 1415 	mls	r4, r6, r5, r1
 8006052:	3430      	adds	r4, #48	; 0x30
 8006054:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006058:	460c      	mov	r4, r1
 800605a:	2c63      	cmp	r4, #99	; 0x63
 800605c:	f102 32ff 	add.w	r2, r2, #4294967295
 8006060:	4629      	mov	r1, r5
 8006062:	dcf1      	bgt.n	8006048 <__exponent+0x22>
 8006064:	3130      	adds	r1, #48	; 0x30
 8006066:	f1ac 0402 	sub.w	r4, ip, #2
 800606a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800606e:	1c41      	adds	r1, r0, #1
 8006070:	4622      	mov	r2, r4
 8006072:	42ba      	cmp	r2, r7
 8006074:	d30a      	bcc.n	800608c <__exponent+0x66>
 8006076:	f10d 0209 	add.w	r2, sp, #9
 800607a:	eba2 020c 	sub.w	r2, r2, ip
 800607e:	42bc      	cmp	r4, r7
 8006080:	bf88      	it	hi
 8006082:	2200      	movhi	r2, #0
 8006084:	4413      	add	r3, r2
 8006086:	1a18      	subs	r0, r3, r0
 8006088:	b003      	add	sp, #12
 800608a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800608c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006090:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006094:	e7ed      	b.n	8006072 <__exponent+0x4c>
 8006096:	2330      	movs	r3, #48	; 0x30
 8006098:	3130      	adds	r1, #48	; 0x30
 800609a:	7083      	strb	r3, [r0, #2]
 800609c:	70c1      	strb	r1, [r0, #3]
 800609e:	1d03      	adds	r3, r0, #4
 80060a0:	e7f1      	b.n	8006086 <__exponent+0x60>
	...

080060a4 <_printf_float>:
 80060a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060a8:	ed2d 8b02 	vpush	{d8}
 80060ac:	b08d      	sub	sp, #52	; 0x34
 80060ae:	460c      	mov	r4, r1
 80060b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80060b4:	4616      	mov	r6, r2
 80060b6:	461f      	mov	r7, r3
 80060b8:	4605      	mov	r5, r0
 80060ba:	f000 fd1b 	bl	8006af4 <_localeconv_r>
 80060be:	f8d0 a000 	ldr.w	sl, [r0]
 80060c2:	4650      	mov	r0, sl
 80060c4:	f7fa f8f4 	bl	80002b0 <strlen>
 80060c8:	2300      	movs	r3, #0
 80060ca:	930a      	str	r3, [sp, #40]	; 0x28
 80060cc:	6823      	ldr	r3, [r4, #0]
 80060ce:	9305      	str	r3, [sp, #20]
 80060d0:	f8d8 3000 	ldr.w	r3, [r8]
 80060d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80060d8:	3307      	adds	r3, #7
 80060da:	f023 0307 	bic.w	r3, r3, #7
 80060de:	f103 0208 	add.w	r2, r3, #8
 80060e2:	f8c8 2000 	str.w	r2, [r8]
 80060e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80060ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80060ee:	9307      	str	r3, [sp, #28]
 80060f0:	f8cd 8018 	str.w	r8, [sp, #24]
 80060f4:	ee08 0a10 	vmov	s16, r0
 80060f8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80060fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006100:	4b9e      	ldr	r3, [pc, #632]	; (800637c <_printf_float+0x2d8>)
 8006102:	f04f 32ff 	mov.w	r2, #4294967295
 8006106:	f7fa fd31 	bl	8000b6c <__aeabi_dcmpun>
 800610a:	bb88      	cbnz	r0, 8006170 <_printf_float+0xcc>
 800610c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006110:	4b9a      	ldr	r3, [pc, #616]	; (800637c <_printf_float+0x2d8>)
 8006112:	f04f 32ff 	mov.w	r2, #4294967295
 8006116:	f7fa fd0b 	bl	8000b30 <__aeabi_dcmple>
 800611a:	bb48      	cbnz	r0, 8006170 <_printf_float+0xcc>
 800611c:	2200      	movs	r2, #0
 800611e:	2300      	movs	r3, #0
 8006120:	4640      	mov	r0, r8
 8006122:	4649      	mov	r1, r9
 8006124:	f7fa fcfa 	bl	8000b1c <__aeabi_dcmplt>
 8006128:	b110      	cbz	r0, 8006130 <_printf_float+0x8c>
 800612a:	232d      	movs	r3, #45	; 0x2d
 800612c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006130:	4a93      	ldr	r2, [pc, #588]	; (8006380 <_printf_float+0x2dc>)
 8006132:	4b94      	ldr	r3, [pc, #592]	; (8006384 <_printf_float+0x2e0>)
 8006134:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006138:	bf94      	ite	ls
 800613a:	4690      	movls	r8, r2
 800613c:	4698      	movhi	r8, r3
 800613e:	2303      	movs	r3, #3
 8006140:	6123      	str	r3, [r4, #16]
 8006142:	9b05      	ldr	r3, [sp, #20]
 8006144:	f023 0304 	bic.w	r3, r3, #4
 8006148:	6023      	str	r3, [r4, #0]
 800614a:	f04f 0900 	mov.w	r9, #0
 800614e:	9700      	str	r7, [sp, #0]
 8006150:	4633      	mov	r3, r6
 8006152:	aa0b      	add	r2, sp, #44	; 0x2c
 8006154:	4621      	mov	r1, r4
 8006156:	4628      	mov	r0, r5
 8006158:	f000 f9da 	bl	8006510 <_printf_common>
 800615c:	3001      	adds	r0, #1
 800615e:	f040 8090 	bne.w	8006282 <_printf_float+0x1de>
 8006162:	f04f 30ff 	mov.w	r0, #4294967295
 8006166:	b00d      	add	sp, #52	; 0x34
 8006168:	ecbd 8b02 	vpop	{d8}
 800616c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006170:	4642      	mov	r2, r8
 8006172:	464b      	mov	r3, r9
 8006174:	4640      	mov	r0, r8
 8006176:	4649      	mov	r1, r9
 8006178:	f7fa fcf8 	bl	8000b6c <__aeabi_dcmpun>
 800617c:	b140      	cbz	r0, 8006190 <_printf_float+0xec>
 800617e:	464b      	mov	r3, r9
 8006180:	2b00      	cmp	r3, #0
 8006182:	bfbc      	itt	lt
 8006184:	232d      	movlt	r3, #45	; 0x2d
 8006186:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800618a:	4a7f      	ldr	r2, [pc, #508]	; (8006388 <_printf_float+0x2e4>)
 800618c:	4b7f      	ldr	r3, [pc, #508]	; (800638c <_printf_float+0x2e8>)
 800618e:	e7d1      	b.n	8006134 <_printf_float+0x90>
 8006190:	6863      	ldr	r3, [r4, #4]
 8006192:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006196:	9206      	str	r2, [sp, #24]
 8006198:	1c5a      	adds	r2, r3, #1
 800619a:	d13f      	bne.n	800621c <_printf_float+0x178>
 800619c:	2306      	movs	r3, #6
 800619e:	6063      	str	r3, [r4, #4]
 80061a0:	9b05      	ldr	r3, [sp, #20]
 80061a2:	6861      	ldr	r1, [r4, #4]
 80061a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80061a8:	2300      	movs	r3, #0
 80061aa:	9303      	str	r3, [sp, #12]
 80061ac:	ab0a      	add	r3, sp, #40	; 0x28
 80061ae:	e9cd b301 	strd	fp, r3, [sp, #4]
 80061b2:	ab09      	add	r3, sp, #36	; 0x24
 80061b4:	ec49 8b10 	vmov	d0, r8, r9
 80061b8:	9300      	str	r3, [sp, #0]
 80061ba:	6022      	str	r2, [r4, #0]
 80061bc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80061c0:	4628      	mov	r0, r5
 80061c2:	f7ff fece 	bl	8005f62 <__cvt>
 80061c6:	9b06      	ldr	r3, [sp, #24]
 80061c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80061ca:	2b47      	cmp	r3, #71	; 0x47
 80061cc:	4680      	mov	r8, r0
 80061ce:	d108      	bne.n	80061e2 <_printf_float+0x13e>
 80061d0:	1cc8      	adds	r0, r1, #3
 80061d2:	db02      	blt.n	80061da <_printf_float+0x136>
 80061d4:	6863      	ldr	r3, [r4, #4]
 80061d6:	4299      	cmp	r1, r3
 80061d8:	dd41      	ble.n	800625e <_printf_float+0x1ba>
 80061da:	f1ab 0302 	sub.w	r3, fp, #2
 80061de:	fa5f fb83 	uxtb.w	fp, r3
 80061e2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80061e6:	d820      	bhi.n	800622a <_printf_float+0x186>
 80061e8:	3901      	subs	r1, #1
 80061ea:	465a      	mov	r2, fp
 80061ec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80061f0:	9109      	str	r1, [sp, #36]	; 0x24
 80061f2:	f7ff ff18 	bl	8006026 <__exponent>
 80061f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061f8:	1813      	adds	r3, r2, r0
 80061fa:	2a01      	cmp	r2, #1
 80061fc:	4681      	mov	r9, r0
 80061fe:	6123      	str	r3, [r4, #16]
 8006200:	dc02      	bgt.n	8006208 <_printf_float+0x164>
 8006202:	6822      	ldr	r2, [r4, #0]
 8006204:	07d2      	lsls	r2, r2, #31
 8006206:	d501      	bpl.n	800620c <_printf_float+0x168>
 8006208:	3301      	adds	r3, #1
 800620a:	6123      	str	r3, [r4, #16]
 800620c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006210:	2b00      	cmp	r3, #0
 8006212:	d09c      	beq.n	800614e <_printf_float+0xaa>
 8006214:	232d      	movs	r3, #45	; 0x2d
 8006216:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800621a:	e798      	b.n	800614e <_printf_float+0xaa>
 800621c:	9a06      	ldr	r2, [sp, #24]
 800621e:	2a47      	cmp	r2, #71	; 0x47
 8006220:	d1be      	bne.n	80061a0 <_printf_float+0xfc>
 8006222:	2b00      	cmp	r3, #0
 8006224:	d1bc      	bne.n	80061a0 <_printf_float+0xfc>
 8006226:	2301      	movs	r3, #1
 8006228:	e7b9      	b.n	800619e <_printf_float+0xfa>
 800622a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800622e:	d118      	bne.n	8006262 <_printf_float+0x1be>
 8006230:	2900      	cmp	r1, #0
 8006232:	6863      	ldr	r3, [r4, #4]
 8006234:	dd0b      	ble.n	800624e <_printf_float+0x1aa>
 8006236:	6121      	str	r1, [r4, #16]
 8006238:	b913      	cbnz	r3, 8006240 <_printf_float+0x19c>
 800623a:	6822      	ldr	r2, [r4, #0]
 800623c:	07d0      	lsls	r0, r2, #31
 800623e:	d502      	bpl.n	8006246 <_printf_float+0x1a2>
 8006240:	3301      	adds	r3, #1
 8006242:	440b      	add	r3, r1
 8006244:	6123      	str	r3, [r4, #16]
 8006246:	65a1      	str	r1, [r4, #88]	; 0x58
 8006248:	f04f 0900 	mov.w	r9, #0
 800624c:	e7de      	b.n	800620c <_printf_float+0x168>
 800624e:	b913      	cbnz	r3, 8006256 <_printf_float+0x1b2>
 8006250:	6822      	ldr	r2, [r4, #0]
 8006252:	07d2      	lsls	r2, r2, #31
 8006254:	d501      	bpl.n	800625a <_printf_float+0x1b6>
 8006256:	3302      	adds	r3, #2
 8006258:	e7f4      	b.n	8006244 <_printf_float+0x1a0>
 800625a:	2301      	movs	r3, #1
 800625c:	e7f2      	b.n	8006244 <_printf_float+0x1a0>
 800625e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006262:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006264:	4299      	cmp	r1, r3
 8006266:	db05      	blt.n	8006274 <_printf_float+0x1d0>
 8006268:	6823      	ldr	r3, [r4, #0]
 800626a:	6121      	str	r1, [r4, #16]
 800626c:	07d8      	lsls	r0, r3, #31
 800626e:	d5ea      	bpl.n	8006246 <_printf_float+0x1a2>
 8006270:	1c4b      	adds	r3, r1, #1
 8006272:	e7e7      	b.n	8006244 <_printf_float+0x1a0>
 8006274:	2900      	cmp	r1, #0
 8006276:	bfd4      	ite	le
 8006278:	f1c1 0202 	rsble	r2, r1, #2
 800627c:	2201      	movgt	r2, #1
 800627e:	4413      	add	r3, r2
 8006280:	e7e0      	b.n	8006244 <_printf_float+0x1a0>
 8006282:	6823      	ldr	r3, [r4, #0]
 8006284:	055a      	lsls	r2, r3, #21
 8006286:	d407      	bmi.n	8006298 <_printf_float+0x1f4>
 8006288:	6923      	ldr	r3, [r4, #16]
 800628a:	4642      	mov	r2, r8
 800628c:	4631      	mov	r1, r6
 800628e:	4628      	mov	r0, r5
 8006290:	47b8      	blx	r7
 8006292:	3001      	adds	r0, #1
 8006294:	d12c      	bne.n	80062f0 <_printf_float+0x24c>
 8006296:	e764      	b.n	8006162 <_printf_float+0xbe>
 8006298:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800629c:	f240 80e0 	bls.w	8006460 <_printf_float+0x3bc>
 80062a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80062a4:	2200      	movs	r2, #0
 80062a6:	2300      	movs	r3, #0
 80062a8:	f7fa fc2e 	bl	8000b08 <__aeabi_dcmpeq>
 80062ac:	2800      	cmp	r0, #0
 80062ae:	d034      	beq.n	800631a <_printf_float+0x276>
 80062b0:	4a37      	ldr	r2, [pc, #220]	; (8006390 <_printf_float+0x2ec>)
 80062b2:	2301      	movs	r3, #1
 80062b4:	4631      	mov	r1, r6
 80062b6:	4628      	mov	r0, r5
 80062b8:	47b8      	blx	r7
 80062ba:	3001      	adds	r0, #1
 80062bc:	f43f af51 	beq.w	8006162 <_printf_float+0xbe>
 80062c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062c4:	429a      	cmp	r2, r3
 80062c6:	db02      	blt.n	80062ce <_printf_float+0x22a>
 80062c8:	6823      	ldr	r3, [r4, #0]
 80062ca:	07d8      	lsls	r0, r3, #31
 80062cc:	d510      	bpl.n	80062f0 <_printf_float+0x24c>
 80062ce:	ee18 3a10 	vmov	r3, s16
 80062d2:	4652      	mov	r2, sl
 80062d4:	4631      	mov	r1, r6
 80062d6:	4628      	mov	r0, r5
 80062d8:	47b8      	blx	r7
 80062da:	3001      	adds	r0, #1
 80062dc:	f43f af41 	beq.w	8006162 <_printf_float+0xbe>
 80062e0:	f04f 0800 	mov.w	r8, #0
 80062e4:	f104 091a 	add.w	r9, r4, #26
 80062e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062ea:	3b01      	subs	r3, #1
 80062ec:	4543      	cmp	r3, r8
 80062ee:	dc09      	bgt.n	8006304 <_printf_float+0x260>
 80062f0:	6823      	ldr	r3, [r4, #0]
 80062f2:	079b      	lsls	r3, r3, #30
 80062f4:	f100 8107 	bmi.w	8006506 <_printf_float+0x462>
 80062f8:	68e0      	ldr	r0, [r4, #12]
 80062fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062fc:	4298      	cmp	r0, r3
 80062fe:	bfb8      	it	lt
 8006300:	4618      	movlt	r0, r3
 8006302:	e730      	b.n	8006166 <_printf_float+0xc2>
 8006304:	2301      	movs	r3, #1
 8006306:	464a      	mov	r2, r9
 8006308:	4631      	mov	r1, r6
 800630a:	4628      	mov	r0, r5
 800630c:	47b8      	blx	r7
 800630e:	3001      	adds	r0, #1
 8006310:	f43f af27 	beq.w	8006162 <_printf_float+0xbe>
 8006314:	f108 0801 	add.w	r8, r8, #1
 8006318:	e7e6      	b.n	80062e8 <_printf_float+0x244>
 800631a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800631c:	2b00      	cmp	r3, #0
 800631e:	dc39      	bgt.n	8006394 <_printf_float+0x2f0>
 8006320:	4a1b      	ldr	r2, [pc, #108]	; (8006390 <_printf_float+0x2ec>)
 8006322:	2301      	movs	r3, #1
 8006324:	4631      	mov	r1, r6
 8006326:	4628      	mov	r0, r5
 8006328:	47b8      	blx	r7
 800632a:	3001      	adds	r0, #1
 800632c:	f43f af19 	beq.w	8006162 <_printf_float+0xbe>
 8006330:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006334:	4313      	orrs	r3, r2
 8006336:	d102      	bne.n	800633e <_printf_float+0x29a>
 8006338:	6823      	ldr	r3, [r4, #0]
 800633a:	07d9      	lsls	r1, r3, #31
 800633c:	d5d8      	bpl.n	80062f0 <_printf_float+0x24c>
 800633e:	ee18 3a10 	vmov	r3, s16
 8006342:	4652      	mov	r2, sl
 8006344:	4631      	mov	r1, r6
 8006346:	4628      	mov	r0, r5
 8006348:	47b8      	blx	r7
 800634a:	3001      	adds	r0, #1
 800634c:	f43f af09 	beq.w	8006162 <_printf_float+0xbe>
 8006350:	f04f 0900 	mov.w	r9, #0
 8006354:	f104 0a1a 	add.w	sl, r4, #26
 8006358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800635a:	425b      	negs	r3, r3
 800635c:	454b      	cmp	r3, r9
 800635e:	dc01      	bgt.n	8006364 <_printf_float+0x2c0>
 8006360:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006362:	e792      	b.n	800628a <_printf_float+0x1e6>
 8006364:	2301      	movs	r3, #1
 8006366:	4652      	mov	r2, sl
 8006368:	4631      	mov	r1, r6
 800636a:	4628      	mov	r0, r5
 800636c:	47b8      	blx	r7
 800636e:	3001      	adds	r0, #1
 8006370:	f43f aef7 	beq.w	8006162 <_printf_float+0xbe>
 8006374:	f109 0901 	add.w	r9, r9, #1
 8006378:	e7ee      	b.n	8006358 <_printf_float+0x2b4>
 800637a:	bf00      	nop
 800637c:	7fefffff 	.word	0x7fefffff
 8006380:	08008ea8 	.word	0x08008ea8
 8006384:	08008eac 	.word	0x08008eac
 8006388:	08008eb0 	.word	0x08008eb0
 800638c:	08008eb4 	.word	0x08008eb4
 8006390:	08008eb8 	.word	0x08008eb8
 8006394:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006396:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006398:	429a      	cmp	r2, r3
 800639a:	bfa8      	it	ge
 800639c:	461a      	movge	r2, r3
 800639e:	2a00      	cmp	r2, #0
 80063a0:	4691      	mov	r9, r2
 80063a2:	dc37      	bgt.n	8006414 <_printf_float+0x370>
 80063a4:	f04f 0b00 	mov.w	fp, #0
 80063a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063ac:	f104 021a 	add.w	r2, r4, #26
 80063b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80063b2:	9305      	str	r3, [sp, #20]
 80063b4:	eba3 0309 	sub.w	r3, r3, r9
 80063b8:	455b      	cmp	r3, fp
 80063ba:	dc33      	bgt.n	8006424 <_printf_float+0x380>
 80063bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063c0:	429a      	cmp	r2, r3
 80063c2:	db3b      	blt.n	800643c <_printf_float+0x398>
 80063c4:	6823      	ldr	r3, [r4, #0]
 80063c6:	07da      	lsls	r2, r3, #31
 80063c8:	d438      	bmi.n	800643c <_printf_float+0x398>
 80063ca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80063ce:	eba2 0903 	sub.w	r9, r2, r3
 80063d2:	9b05      	ldr	r3, [sp, #20]
 80063d4:	1ad2      	subs	r2, r2, r3
 80063d6:	4591      	cmp	r9, r2
 80063d8:	bfa8      	it	ge
 80063da:	4691      	movge	r9, r2
 80063dc:	f1b9 0f00 	cmp.w	r9, #0
 80063e0:	dc35      	bgt.n	800644e <_printf_float+0x3aa>
 80063e2:	f04f 0800 	mov.w	r8, #0
 80063e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063ea:	f104 0a1a 	add.w	sl, r4, #26
 80063ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063f2:	1a9b      	subs	r3, r3, r2
 80063f4:	eba3 0309 	sub.w	r3, r3, r9
 80063f8:	4543      	cmp	r3, r8
 80063fa:	f77f af79 	ble.w	80062f0 <_printf_float+0x24c>
 80063fe:	2301      	movs	r3, #1
 8006400:	4652      	mov	r2, sl
 8006402:	4631      	mov	r1, r6
 8006404:	4628      	mov	r0, r5
 8006406:	47b8      	blx	r7
 8006408:	3001      	adds	r0, #1
 800640a:	f43f aeaa 	beq.w	8006162 <_printf_float+0xbe>
 800640e:	f108 0801 	add.w	r8, r8, #1
 8006412:	e7ec      	b.n	80063ee <_printf_float+0x34a>
 8006414:	4613      	mov	r3, r2
 8006416:	4631      	mov	r1, r6
 8006418:	4642      	mov	r2, r8
 800641a:	4628      	mov	r0, r5
 800641c:	47b8      	blx	r7
 800641e:	3001      	adds	r0, #1
 8006420:	d1c0      	bne.n	80063a4 <_printf_float+0x300>
 8006422:	e69e      	b.n	8006162 <_printf_float+0xbe>
 8006424:	2301      	movs	r3, #1
 8006426:	4631      	mov	r1, r6
 8006428:	4628      	mov	r0, r5
 800642a:	9205      	str	r2, [sp, #20]
 800642c:	47b8      	blx	r7
 800642e:	3001      	adds	r0, #1
 8006430:	f43f ae97 	beq.w	8006162 <_printf_float+0xbe>
 8006434:	9a05      	ldr	r2, [sp, #20]
 8006436:	f10b 0b01 	add.w	fp, fp, #1
 800643a:	e7b9      	b.n	80063b0 <_printf_float+0x30c>
 800643c:	ee18 3a10 	vmov	r3, s16
 8006440:	4652      	mov	r2, sl
 8006442:	4631      	mov	r1, r6
 8006444:	4628      	mov	r0, r5
 8006446:	47b8      	blx	r7
 8006448:	3001      	adds	r0, #1
 800644a:	d1be      	bne.n	80063ca <_printf_float+0x326>
 800644c:	e689      	b.n	8006162 <_printf_float+0xbe>
 800644e:	9a05      	ldr	r2, [sp, #20]
 8006450:	464b      	mov	r3, r9
 8006452:	4442      	add	r2, r8
 8006454:	4631      	mov	r1, r6
 8006456:	4628      	mov	r0, r5
 8006458:	47b8      	blx	r7
 800645a:	3001      	adds	r0, #1
 800645c:	d1c1      	bne.n	80063e2 <_printf_float+0x33e>
 800645e:	e680      	b.n	8006162 <_printf_float+0xbe>
 8006460:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006462:	2a01      	cmp	r2, #1
 8006464:	dc01      	bgt.n	800646a <_printf_float+0x3c6>
 8006466:	07db      	lsls	r3, r3, #31
 8006468:	d53a      	bpl.n	80064e0 <_printf_float+0x43c>
 800646a:	2301      	movs	r3, #1
 800646c:	4642      	mov	r2, r8
 800646e:	4631      	mov	r1, r6
 8006470:	4628      	mov	r0, r5
 8006472:	47b8      	blx	r7
 8006474:	3001      	adds	r0, #1
 8006476:	f43f ae74 	beq.w	8006162 <_printf_float+0xbe>
 800647a:	ee18 3a10 	vmov	r3, s16
 800647e:	4652      	mov	r2, sl
 8006480:	4631      	mov	r1, r6
 8006482:	4628      	mov	r0, r5
 8006484:	47b8      	blx	r7
 8006486:	3001      	adds	r0, #1
 8006488:	f43f ae6b 	beq.w	8006162 <_printf_float+0xbe>
 800648c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006490:	2200      	movs	r2, #0
 8006492:	2300      	movs	r3, #0
 8006494:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006498:	f7fa fb36 	bl	8000b08 <__aeabi_dcmpeq>
 800649c:	b9d8      	cbnz	r0, 80064d6 <_printf_float+0x432>
 800649e:	f10a 33ff 	add.w	r3, sl, #4294967295
 80064a2:	f108 0201 	add.w	r2, r8, #1
 80064a6:	4631      	mov	r1, r6
 80064a8:	4628      	mov	r0, r5
 80064aa:	47b8      	blx	r7
 80064ac:	3001      	adds	r0, #1
 80064ae:	d10e      	bne.n	80064ce <_printf_float+0x42a>
 80064b0:	e657      	b.n	8006162 <_printf_float+0xbe>
 80064b2:	2301      	movs	r3, #1
 80064b4:	4652      	mov	r2, sl
 80064b6:	4631      	mov	r1, r6
 80064b8:	4628      	mov	r0, r5
 80064ba:	47b8      	blx	r7
 80064bc:	3001      	adds	r0, #1
 80064be:	f43f ae50 	beq.w	8006162 <_printf_float+0xbe>
 80064c2:	f108 0801 	add.w	r8, r8, #1
 80064c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064c8:	3b01      	subs	r3, #1
 80064ca:	4543      	cmp	r3, r8
 80064cc:	dcf1      	bgt.n	80064b2 <_printf_float+0x40e>
 80064ce:	464b      	mov	r3, r9
 80064d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80064d4:	e6da      	b.n	800628c <_printf_float+0x1e8>
 80064d6:	f04f 0800 	mov.w	r8, #0
 80064da:	f104 0a1a 	add.w	sl, r4, #26
 80064de:	e7f2      	b.n	80064c6 <_printf_float+0x422>
 80064e0:	2301      	movs	r3, #1
 80064e2:	4642      	mov	r2, r8
 80064e4:	e7df      	b.n	80064a6 <_printf_float+0x402>
 80064e6:	2301      	movs	r3, #1
 80064e8:	464a      	mov	r2, r9
 80064ea:	4631      	mov	r1, r6
 80064ec:	4628      	mov	r0, r5
 80064ee:	47b8      	blx	r7
 80064f0:	3001      	adds	r0, #1
 80064f2:	f43f ae36 	beq.w	8006162 <_printf_float+0xbe>
 80064f6:	f108 0801 	add.w	r8, r8, #1
 80064fa:	68e3      	ldr	r3, [r4, #12]
 80064fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80064fe:	1a5b      	subs	r3, r3, r1
 8006500:	4543      	cmp	r3, r8
 8006502:	dcf0      	bgt.n	80064e6 <_printf_float+0x442>
 8006504:	e6f8      	b.n	80062f8 <_printf_float+0x254>
 8006506:	f04f 0800 	mov.w	r8, #0
 800650a:	f104 0919 	add.w	r9, r4, #25
 800650e:	e7f4      	b.n	80064fa <_printf_float+0x456>

08006510 <_printf_common>:
 8006510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006514:	4616      	mov	r6, r2
 8006516:	4699      	mov	r9, r3
 8006518:	688a      	ldr	r2, [r1, #8]
 800651a:	690b      	ldr	r3, [r1, #16]
 800651c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006520:	4293      	cmp	r3, r2
 8006522:	bfb8      	it	lt
 8006524:	4613      	movlt	r3, r2
 8006526:	6033      	str	r3, [r6, #0]
 8006528:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800652c:	4607      	mov	r7, r0
 800652e:	460c      	mov	r4, r1
 8006530:	b10a      	cbz	r2, 8006536 <_printf_common+0x26>
 8006532:	3301      	adds	r3, #1
 8006534:	6033      	str	r3, [r6, #0]
 8006536:	6823      	ldr	r3, [r4, #0]
 8006538:	0699      	lsls	r1, r3, #26
 800653a:	bf42      	ittt	mi
 800653c:	6833      	ldrmi	r3, [r6, #0]
 800653e:	3302      	addmi	r3, #2
 8006540:	6033      	strmi	r3, [r6, #0]
 8006542:	6825      	ldr	r5, [r4, #0]
 8006544:	f015 0506 	ands.w	r5, r5, #6
 8006548:	d106      	bne.n	8006558 <_printf_common+0x48>
 800654a:	f104 0a19 	add.w	sl, r4, #25
 800654e:	68e3      	ldr	r3, [r4, #12]
 8006550:	6832      	ldr	r2, [r6, #0]
 8006552:	1a9b      	subs	r3, r3, r2
 8006554:	42ab      	cmp	r3, r5
 8006556:	dc26      	bgt.n	80065a6 <_printf_common+0x96>
 8006558:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800655c:	1e13      	subs	r3, r2, #0
 800655e:	6822      	ldr	r2, [r4, #0]
 8006560:	bf18      	it	ne
 8006562:	2301      	movne	r3, #1
 8006564:	0692      	lsls	r2, r2, #26
 8006566:	d42b      	bmi.n	80065c0 <_printf_common+0xb0>
 8006568:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800656c:	4649      	mov	r1, r9
 800656e:	4638      	mov	r0, r7
 8006570:	47c0      	blx	r8
 8006572:	3001      	adds	r0, #1
 8006574:	d01e      	beq.n	80065b4 <_printf_common+0xa4>
 8006576:	6823      	ldr	r3, [r4, #0]
 8006578:	6922      	ldr	r2, [r4, #16]
 800657a:	f003 0306 	and.w	r3, r3, #6
 800657e:	2b04      	cmp	r3, #4
 8006580:	bf02      	ittt	eq
 8006582:	68e5      	ldreq	r5, [r4, #12]
 8006584:	6833      	ldreq	r3, [r6, #0]
 8006586:	1aed      	subeq	r5, r5, r3
 8006588:	68a3      	ldr	r3, [r4, #8]
 800658a:	bf0c      	ite	eq
 800658c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006590:	2500      	movne	r5, #0
 8006592:	4293      	cmp	r3, r2
 8006594:	bfc4      	itt	gt
 8006596:	1a9b      	subgt	r3, r3, r2
 8006598:	18ed      	addgt	r5, r5, r3
 800659a:	2600      	movs	r6, #0
 800659c:	341a      	adds	r4, #26
 800659e:	42b5      	cmp	r5, r6
 80065a0:	d11a      	bne.n	80065d8 <_printf_common+0xc8>
 80065a2:	2000      	movs	r0, #0
 80065a4:	e008      	b.n	80065b8 <_printf_common+0xa8>
 80065a6:	2301      	movs	r3, #1
 80065a8:	4652      	mov	r2, sl
 80065aa:	4649      	mov	r1, r9
 80065ac:	4638      	mov	r0, r7
 80065ae:	47c0      	blx	r8
 80065b0:	3001      	adds	r0, #1
 80065b2:	d103      	bne.n	80065bc <_printf_common+0xac>
 80065b4:	f04f 30ff 	mov.w	r0, #4294967295
 80065b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065bc:	3501      	adds	r5, #1
 80065be:	e7c6      	b.n	800654e <_printf_common+0x3e>
 80065c0:	18e1      	adds	r1, r4, r3
 80065c2:	1c5a      	adds	r2, r3, #1
 80065c4:	2030      	movs	r0, #48	; 0x30
 80065c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80065ca:	4422      	add	r2, r4
 80065cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065d4:	3302      	adds	r3, #2
 80065d6:	e7c7      	b.n	8006568 <_printf_common+0x58>
 80065d8:	2301      	movs	r3, #1
 80065da:	4622      	mov	r2, r4
 80065dc:	4649      	mov	r1, r9
 80065de:	4638      	mov	r0, r7
 80065e0:	47c0      	blx	r8
 80065e2:	3001      	adds	r0, #1
 80065e4:	d0e6      	beq.n	80065b4 <_printf_common+0xa4>
 80065e6:	3601      	adds	r6, #1
 80065e8:	e7d9      	b.n	800659e <_printf_common+0x8e>
	...

080065ec <_printf_i>:
 80065ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065f0:	7e0f      	ldrb	r7, [r1, #24]
 80065f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80065f4:	2f78      	cmp	r7, #120	; 0x78
 80065f6:	4691      	mov	r9, r2
 80065f8:	4680      	mov	r8, r0
 80065fa:	460c      	mov	r4, r1
 80065fc:	469a      	mov	sl, r3
 80065fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006602:	d807      	bhi.n	8006614 <_printf_i+0x28>
 8006604:	2f62      	cmp	r7, #98	; 0x62
 8006606:	d80a      	bhi.n	800661e <_printf_i+0x32>
 8006608:	2f00      	cmp	r7, #0
 800660a:	f000 80d4 	beq.w	80067b6 <_printf_i+0x1ca>
 800660e:	2f58      	cmp	r7, #88	; 0x58
 8006610:	f000 80c0 	beq.w	8006794 <_printf_i+0x1a8>
 8006614:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006618:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800661c:	e03a      	b.n	8006694 <_printf_i+0xa8>
 800661e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006622:	2b15      	cmp	r3, #21
 8006624:	d8f6      	bhi.n	8006614 <_printf_i+0x28>
 8006626:	a101      	add	r1, pc, #4	; (adr r1, 800662c <_printf_i+0x40>)
 8006628:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800662c:	08006685 	.word	0x08006685
 8006630:	08006699 	.word	0x08006699
 8006634:	08006615 	.word	0x08006615
 8006638:	08006615 	.word	0x08006615
 800663c:	08006615 	.word	0x08006615
 8006640:	08006615 	.word	0x08006615
 8006644:	08006699 	.word	0x08006699
 8006648:	08006615 	.word	0x08006615
 800664c:	08006615 	.word	0x08006615
 8006650:	08006615 	.word	0x08006615
 8006654:	08006615 	.word	0x08006615
 8006658:	0800679d 	.word	0x0800679d
 800665c:	080066c5 	.word	0x080066c5
 8006660:	08006757 	.word	0x08006757
 8006664:	08006615 	.word	0x08006615
 8006668:	08006615 	.word	0x08006615
 800666c:	080067bf 	.word	0x080067bf
 8006670:	08006615 	.word	0x08006615
 8006674:	080066c5 	.word	0x080066c5
 8006678:	08006615 	.word	0x08006615
 800667c:	08006615 	.word	0x08006615
 8006680:	0800675f 	.word	0x0800675f
 8006684:	682b      	ldr	r3, [r5, #0]
 8006686:	1d1a      	adds	r2, r3, #4
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	602a      	str	r2, [r5, #0]
 800668c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006690:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006694:	2301      	movs	r3, #1
 8006696:	e09f      	b.n	80067d8 <_printf_i+0x1ec>
 8006698:	6820      	ldr	r0, [r4, #0]
 800669a:	682b      	ldr	r3, [r5, #0]
 800669c:	0607      	lsls	r7, r0, #24
 800669e:	f103 0104 	add.w	r1, r3, #4
 80066a2:	6029      	str	r1, [r5, #0]
 80066a4:	d501      	bpl.n	80066aa <_printf_i+0xbe>
 80066a6:	681e      	ldr	r6, [r3, #0]
 80066a8:	e003      	b.n	80066b2 <_printf_i+0xc6>
 80066aa:	0646      	lsls	r6, r0, #25
 80066ac:	d5fb      	bpl.n	80066a6 <_printf_i+0xba>
 80066ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 80066b2:	2e00      	cmp	r6, #0
 80066b4:	da03      	bge.n	80066be <_printf_i+0xd2>
 80066b6:	232d      	movs	r3, #45	; 0x2d
 80066b8:	4276      	negs	r6, r6
 80066ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066be:	485a      	ldr	r0, [pc, #360]	; (8006828 <_printf_i+0x23c>)
 80066c0:	230a      	movs	r3, #10
 80066c2:	e012      	b.n	80066ea <_printf_i+0xfe>
 80066c4:	682b      	ldr	r3, [r5, #0]
 80066c6:	6820      	ldr	r0, [r4, #0]
 80066c8:	1d19      	adds	r1, r3, #4
 80066ca:	6029      	str	r1, [r5, #0]
 80066cc:	0605      	lsls	r5, r0, #24
 80066ce:	d501      	bpl.n	80066d4 <_printf_i+0xe8>
 80066d0:	681e      	ldr	r6, [r3, #0]
 80066d2:	e002      	b.n	80066da <_printf_i+0xee>
 80066d4:	0641      	lsls	r1, r0, #25
 80066d6:	d5fb      	bpl.n	80066d0 <_printf_i+0xe4>
 80066d8:	881e      	ldrh	r6, [r3, #0]
 80066da:	4853      	ldr	r0, [pc, #332]	; (8006828 <_printf_i+0x23c>)
 80066dc:	2f6f      	cmp	r7, #111	; 0x6f
 80066de:	bf0c      	ite	eq
 80066e0:	2308      	moveq	r3, #8
 80066e2:	230a      	movne	r3, #10
 80066e4:	2100      	movs	r1, #0
 80066e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80066ea:	6865      	ldr	r5, [r4, #4]
 80066ec:	60a5      	str	r5, [r4, #8]
 80066ee:	2d00      	cmp	r5, #0
 80066f0:	bfa2      	ittt	ge
 80066f2:	6821      	ldrge	r1, [r4, #0]
 80066f4:	f021 0104 	bicge.w	r1, r1, #4
 80066f8:	6021      	strge	r1, [r4, #0]
 80066fa:	b90e      	cbnz	r6, 8006700 <_printf_i+0x114>
 80066fc:	2d00      	cmp	r5, #0
 80066fe:	d04b      	beq.n	8006798 <_printf_i+0x1ac>
 8006700:	4615      	mov	r5, r2
 8006702:	fbb6 f1f3 	udiv	r1, r6, r3
 8006706:	fb03 6711 	mls	r7, r3, r1, r6
 800670a:	5dc7      	ldrb	r7, [r0, r7]
 800670c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006710:	4637      	mov	r7, r6
 8006712:	42bb      	cmp	r3, r7
 8006714:	460e      	mov	r6, r1
 8006716:	d9f4      	bls.n	8006702 <_printf_i+0x116>
 8006718:	2b08      	cmp	r3, #8
 800671a:	d10b      	bne.n	8006734 <_printf_i+0x148>
 800671c:	6823      	ldr	r3, [r4, #0]
 800671e:	07de      	lsls	r6, r3, #31
 8006720:	d508      	bpl.n	8006734 <_printf_i+0x148>
 8006722:	6923      	ldr	r3, [r4, #16]
 8006724:	6861      	ldr	r1, [r4, #4]
 8006726:	4299      	cmp	r1, r3
 8006728:	bfde      	ittt	le
 800672a:	2330      	movle	r3, #48	; 0x30
 800672c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006730:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006734:	1b52      	subs	r2, r2, r5
 8006736:	6122      	str	r2, [r4, #16]
 8006738:	f8cd a000 	str.w	sl, [sp]
 800673c:	464b      	mov	r3, r9
 800673e:	aa03      	add	r2, sp, #12
 8006740:	4621      	mov	r1, r4
 8006742:	4640      	mov	r0, r8
 8006744:	f7ff fee4 	bl	8006510 <_printf_common>
 8006748:	3001      	adds	r0, #1
 800674a:	d14a      	bne.n	80067e2 <_printf_i+0x1f6>
 800674c:	f04f 30ff 	mov.w	r0, #4294967295
 8006750:	b004      	add	sp, #16
 8006752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006756:	6823      	ldr	r3, [r4, #0]
 8006758:	f043 0320 	orr.w	r3, r3, #32
 800675c:	6023      	str	r3, [r4, #0]
 800675e:	4833      	ldr	r0, [pc, #204]	; (800682c <_printf_i+0x240>)
 8006760:	2778      	movs	r7, #120	; 0x78
 8006762:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006766:	6823      	ldr	r3, [r4, #0]
 8006768:	6829      	ldr	r1, [r5, #0]
 800676a:	061f      	lsls	r7, r3, #24
 800676c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006770:	d402      	bmi.n	8006778 <_printf_i+0x18c>
 8006772:	065f      	lsls	r7, r3, #25
 8006774:	bf48      	it	mi
 8006776:	b2b6      	uxthmi	r6, r6
 8006778:	07df      	lsls	r7, r3, #31
 800677a:	bf48      	it	mi
 800677c:	f043 0320 	orrmi.w	r3, r3, #32
 8006780:	6029      	str	r1, [r5, #0]
 8006782:	bf48      	it	mi
 8006784:	6023      	strmi	r3, [r4, #0]
 8006786:	b91e      	cbnz	r6, 8006790 <_printf_i+0x1a4>
 8006788:	6823      	ldr	r3, [r4, #0]
 800678a:	f023 0320 	bic.w	r3, r3, #32
 800678e:	6023      	str	r3, [r4, #0]
 8006790:	2310      	movs	r3, #16
 8006792:	e7a7      	b.n	80066e4 <_printf_i+0xf8>
 8006794:	4824      	ldr	r0, [pc, #144]	; (8006828 <_printf_i+0x23c>)
 8006796:	e7e4      	b.n	8006762 <_printf_i+0x176>
 8006798:	4615      	mov	r5, r2
 800679a:	e7bd      	b.n	8006718 <_printf_i+0x12c>
 800679c:	682b      	ldr	r3, [r5, #0]
 800679e:	6826      	ldr	r6, [r4, #0]
 80067a0:	6961      	ldr	r1, [r4, #20]
 80067a2:	1d18      	adds	r0, r3, #4
 80067a4:	6028      	str	r0, [r5, #0]
 80067a6:	0635      	lsls	r5, r6, #24
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	d501      	bpl.n	80067b0 <_printf_i+0x1c4>
 80067ac:	6019      	str	r1, [r3, #0]
 80067ae:	e002      	b.n	80067b6 <_printf_i+0x1ca>
 80067b0:	0670      	lsls	r0, r6, #25
 80067b2:	d5fb      	bpl.n	80067ac <_printf_i+0x1c0>
 80067b4:	8019      	strh	r1, [r3, #0]
 80067b6:	2300      	movs	r3, #0
 80067b8:	6123      	str	r3, [r4, #16]
 80067ba:	4615      	mov	r5, r2
 80067bc:	e7bc      	b.n	8006738 <_printf_i+0x14c>
 80067be:	682b      	ldr	r3, [r5, #0]
 80067c0:	1d1a      	adds	r2, r3, #4
 80067c2:	602a      	str	r2, [r5, #0]
 80067c4:	681d      	ldr	r5, [r3, #0]
 80067c6:	6862      	ldr	r2, [r4, #4]
 80067c8:	2100      	movs	r1, #0
 80067ca:	4628      	mov	r0, r5
 80067cc:	f7f9 fd20 	bl	8000210 <memchr>
 80067d0:	b108      	cbz	r0, 80067d6 <_printf_i+0x1ea>
 80067d2:	1b40      	subs	r0, r0, r5
 80067d4:	6060      	str	r0, [r4, #4]
 80067d6:	6863      	ldr	r3, [r4, #4]
 80067d8:	6123      	str	r3, [r4, #16]
 80067da:	2300      	movs	r3, #0
 80067dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067e0:	e7aa      	b.n	8006738 <_printf_i+0x14c>
 80067e2:	6923      	ldr	r3, [r4, #16]
 80067e4:	462a      	mov	r2, r5
 80067e6:	4649      	mov	r1, r9
 80067e8:	4640      	mov	r0, r8
 80067ea:	47d0      	blx	sl
 80067ec:	3001      	adds	r0, #1
 80067ee:	d0ad      	beq.n	800674c <_printf_i+0x160>
 80067f0:	6823      	ldr	r3, [r4, #0]
 80067f2:	079b      	lsls	r3, r3, #30
 80067f4:	d413      	bmi.n	800681e <_printf_i+0x232>
 80067f6:	68e0      	ldr	r0, [r4, #12]
 80067f8:	9b03      	ldr	r3, [sp, #12]
 80067fa:	4298      	cmp	r0, r3
 80067fc:	bfb8      	it	lt
 80067fe:	4618      	movlt	r0, r3
 8006800:	e7a6      	b.n	8006750 <_printf_i+0x164>
 8006802:	2301      	movs	r3, #1
 8006804:	4632      	mov	r2, r6
 8006806:	4649      	mov	r1, r9
 8006808:	4640      	mov	r0, r8
 800680a:	47d0      	blx	sl
 800680c:	3001      	adds	r0, #1
 800680e:	d09d      	beq.n	800674c <_printf_i+0x160>
 8006810:	3501      	adds	r5, #1
 8006812:	68e3      	ldr	r3, [r4, #12]
 8006814:	9903      	ldr	r1, [sp, #12]
 8006816:	1a5b      	subs	r3, r3, r1
 8006818:	42ab      	cmp	r3, r5
 800681a:	dcf2      	bgt.n	8006802 <_printf_i+0x216>
 800681c:	e7eb      	b.n	80067f6 <_printf_i+0x20a>
 800681e:	2500      	movs	r5, #0
 8006820:	f104 0619 	add.w	r6, r4, #25
 8006824:	e7f5      	b.n	8006812 <_printf_i+0x226>
 8006826:	bf00      	nop
 8006828:	08008eba 	.word	0x08008eba
 800682c:	08008ecb 	.word	0x08008ecb

08006830 <std>:
 8006830:	2300      	movs	r3, #0
 8006832:	b510      	push	{r4, lr}
 8006834:	4604      	mov	r4, r0
 8006836:	e9c0 3300 	strd	r3, r3, [r0]
 800683a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800683e:	6083      	str	r3, [r0, #8]
 8006840:	8181      	strh	r1, [r0, #12]
 8006842:	6643      	str	r3, [r0, #100]	; 0x64
 8006844:	81c2      	strh	r2, [r0, #14]
 8006846:	6183      	str	r3, [r0, #24]
 8006848:	4619      	mov	r1, r3
 800684a:	2208      	movs	r2, #8
 800684c:	305c      	adds	r0, #92	; 0x5c
 800684e:	f000 f948 	bl	8006ae2 <memset>
 8006852:	4b0d      	ldr	r3, [pc, #52]	; (8006888 <std+0x58>)
 8006854:	6263      	str	r3, [r4, #36]	; 0x24
 8006856:	4b0d      	ldr	r3, [pc, #52]	; (800688c <std+0x5c>)
 8006858:	62a3      	str	r3, [r4, #40]	; 0x28
 800685a:	4b0d      	ldr	r3, [pc, #52]	; (8006890 <std+0x60>)
 800685c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800685e:	4b0d      	ldr	r3, [pc, #52]	; (8006894 <std+0x64>)
 8006860:	6323      	str	r3, [r4, #48]	; 0x30
 8006862:	4b0d      	ldr	r3, [pc, #52]	; (8006898 <std+0x68>)
 8006864:	6224      	str	r4, [r4, #32]
 8006866:	429c      	cmp	r4, r3
 8006868:	d006      	beq.n	8006878 <std+0x48>
 800686a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800686e:	4294      	cmp	r4, r2
 8006870:	d002      	beq.n	8006878 <std+0x48>
 8006872:	33d0      	adds	r3, #208	; 0xd0
 8006874:	429c      	cmp	r4, r3
 8006876:	d105      	bne.n	8006884 <std+0x54>
 8006878:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800687c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006880:	f000 b9ac 	b.w	8006bdc <__retarget_lock_init_recursive>
 8006884:	bd10      	pop	{r4, pc}
 8006886:	bf00      	nop
 8006888:	08006a5d 	.word	0x08006a5d
 800688c:	08006a7f 	.word	0x08006a7f
 8006890:	08006ab7 	.word	0x08006ab7
 8006894:	08006adb 	.word	0x08006adb
 8006898:	2000042c 	.word	0x2000042c

0800689c <stdio_exit_handler>:
 800689c:	4a02      	ldr	r2, [pc, #8]	; (80068a8 <stdio_exit_handler+0xc>)
 800689e:	4903      	ldr	r1, [pc, #12]	; (80068ac <stdio_exit_handler+0x10>)
 80068a0:	4803      	ldr	r0, [pc, #12]	; (80068b0 <stdio_exit_handler+0x14>)
 80068a2:	f000 b869 	b.w	8006978 <_fwalk_sglue>
 80068a6:	bf00      	nop
 80068a8:	20000028 	.word	0x20000028
 80068ac:	08008591 	.word	0x08008591
 80068b0:	20000034 	.word	0x20000034

080068b4 <cleanup_stdio>:
 80068b4:	6841      	ldr	r1, [r0, #4]
 80068b6:	4b0c      	ldr	r3, [pc, #48]	; (80068e8 <cleanup_stdio+0x34>)
 80068b8:	4299      	cmp	r1, r3
 80068ba:	b510      	push	{r4, lr}
 80068bc:	4604      	mov	r4, r0
 80068be:	d001      	beq.n	80068c4 <cleanup_stdio+0x10>
 80068c0:	f001 fe66 	bl	8008590 <_fflush_r>
 80068c4:	68a1      	ldr	r1, [r4, #8]
 80068c6:	4b09      	ldr	r3, [pc, #36]	; (80068ec <cleanup_stdio+0x38>)
 80068c8:	4299      	cmp	r1, r3
 80068ca:	d002      	beq.n	80068d2 <cleanup_stdio+0x1e>
 80068cc:	4620      	mov	r0, r4
 80068ce:	f001 fe5f 	bl	8008590 <_fflush_r>
 80068d2:	68e1      	ldr	r1, [r4, #12]
 80068d4:	4b06      	ldr	r3, [pc, #24]	; (80068f0 <cleanup_stdio+0x3c>)
 80068d6:	4299      	cmp	r1, r3
 80068d8:	d004      	beq.n	80068e4 <cleanup_stdio+0x30>
 80068da:	4620      	mov	r0, r4
 80068dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068e0:	f001 be56 	b.w	8008590 <_fflush_r>
 80068e4:	bd10      	pop	{r4, pc}
 80068e6:	bf00      	nop
 80068e8:	2000042c 	.word	0x2000042c
 80068ec:	20000494 	.word	0x20000494
 80068f0:	200004fc 	.word	0x200004fc

080068f4 <global_stdio_init.part.0>:
 80068f4:	b510      	push	{r4, lr}
 80068f6:	4b0b      	ldr	r3, [pc, #44]	; (8006924 <global_stdio_init.part.0+0x30>)
 80068f8:	4c0b      	ldr	r4, [pc, #44]	; (8006928 <global_stdio_init.part.0+0x34>)
 80068fa:	4a0c      	ldr	r2, [pc, #48]	; (800692c <global_stdio_init.part.0+0x38>)
 80068fc:	601a      	str	r2, [r3, #0]
 80068fe:	4620      	mov	r0, r4
 8006900:	2200      	movs	r2, #0
 8006902:	2104      	movs	r1, #4
 8006904:	f7ff ff94 	bl	8006830 <std>
 8006908:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800690c:	2201      	movs	r2, #1
 800690e:	2109      	movs	r1, #9
 8006910:	f7ff ff8e 	bl	8006830 <std>
 8006914:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006918:	2202      	movs	r2, #2
 800691a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800691e:	2112      	movs	r1, #18
 8006920:	f7ff bf86 	b.w	8006830 <std>
 8006924:	20000564 	.word	0x20000564
 8006928:	2000042c 	.word	0x2000042c
 800692c:	0800689d 	.word	0x0800689d

08006930 <__sfp_lock_acquire>:
 8006930:	4801      	ldr	r0, [pc, #4]	; (8006938 <__sfp_lock_acquire+0x8>)
 8006932:	f000 b954 	b.w	8006bde <__retarget_lock_acquire_recursive>
 8006936:	bf00      	nop
 8006938:	2000056d 	.word	0x2000056d

0800693c <__sfp_lock_release>:
 800693c:	4801      	ldr	r0, [pc, #4]	; (8006944 <__sfp_lock_release+0x8>)
 800693e:	f000 b94f 	b.w	8006be0 <__retarget_lock_release_recursive>
 8006942:	bf00      	nop
 8006944:	2000056d 	.word	0x2000056d

08006948 <__sinit>:
 8006948:	b510      	push	{r4, lr}
 800694a:	4604      	mov	r4, r0
 800694c:	f7ff fff0 	bl	8006930 <__sfp_lock_acquire>
 8006950:	6a23      	ldr	r3, [r4, #32]
 8006952:	b11b      	cbz	r3, 800695c <__sinit+0x14>
 8006954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006958:	f7ff bff0 	b.w	800693c <__sfp_lock_release>
 800695c:	4b04      	ldr	r3, [pc, #16]	; (8006970 <__sinit+0x28>)
 800695e:	6223      	str	r3, [r4, #32]
 8006960:	4b04      	ldr	r3, [pc, #16]	; (8006974 <__sinit+0x2c>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1f5      	bne.n	8006954 <__sinit+0xc>
 8006968:	f7ff ffc4 	bl	80068f4 <global_stdio_init.part.0>
 800696c:	e7f2      	b.n	8006954 <__sinit+0xc>
 800696e:	bf00      	nop
 8006970:	080068b5 	.word	0x080068b5
 8006974:	20000564 	.word	0x20000564

08006978 <_fwalk_sglue>:
 8006978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800697c:	4607      	mov	r7, r0
 800697e:	4688      	mov	r8, r1
 8006980:	4614      	mov	r4, r2
 8006982:	2600      	movs	r6, #0
 8006984:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006988:	f1b9 0901 	subs.w	r9, r9, #1
 800698c:	d505      	bpl.n	800699a <_fwalk_sglue+0x22>
 800698e:	6824      	ldr	r4, [r4, #0]
 8006990:	2c00      	cmp	r4, #0
 8006992:	d1f7      	bne.n	8006984 <_fwalk_sglue+0xc>
 8006994:	4630      	mov	r0, r6
 8006996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800699a:	89ab      	ldrh	r3, [r5, #12]
 800699c:	2b01      	cmp	r3, #1
 800699e:	d907      	bls.n	80069b0 <_fwalk_sglue+0x38>
 80069a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80069a4:	3301      	adds	r3, #1
 80069a6:	d003      	beq.n	80069b0 <_fwalk_sglue+0x38>
 80069a8:	4629      	mov	r1, r5
 80069aa:	4638      	mov	r0, r7
 80069ac:	47c0      	blx	r8
 80069ae:	4306      	orrs	r6, r0
 80069b0:	3568      	adds	r5, #104	; 0x68
 80069b2:	e7e9      	b.n	8006988 <_fwalk_sglue+0x10>

080069b4 <sniprintf>:
 80069b4:	b40c      	push	{r2, r3}
 80069b6:	b530      	push	{r4, r5, lr}
 80069b8:	4b17      	ldr	r3, [pc, #92]	; (8006a18 <sniprintf+0x64>)
 80069ba:	1e0c      	subs	r4, r1, #0
 80069bc:	681d      	ldr	r5, [r3, #0]
 80069be:	b09d      	sub	sp, #116	; 0x74
 80069c0:	da08      	bge.n	80069d4 <sniprintf+0x20>
 80069c2:	238b      	movs	r3, #139	; 0x8b
 80069c4:	602b      	str	r3, [r5, #0]
 80069c6:	f04f 30ff 	mov.w	r0, #4294967295
 80069ca:	b01d      	add	sp, #116	; 0x74
 80069cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80069d0:	b002      	add	sp, #8
 80069d2:	4770      	bx	lr
 80069d4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80069d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80069dc:	bf14      	ite	ne
 80069de:	f104 33ff 	addne.w	r3, r4, #4294967295
 80069e2:	4623      	moveq	r3, r4
 80069e4:	9304      	str	r3, [sp, #16]
 80069e6:	9307      	str	r3, [sp, #28]
 80069e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80069ec:	9002      	str	r0, [sp, #8]
 80069ee:	9006      	str	r0, [sp, #24]
 80069f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80069f4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80069f6:	ab21      	add	r3, sp, #132	; 0x84
 80069f8:	a902      	add	r1, sp, #8
 80069fa:	4628      	mov	r0, r5
 80069fc:	9301      	str	r3, [sp, #4]
 80069fe:	f001 fc43 	bl	8008288 <_svfiprintf_r>
 8006a02:	1c43      	adds	r3, r0, #1
 8006a04:	bfbc      	itt	lt
 8006a06:	238b      	movlt	r3, #139	; 0x8b
 8006a08:	602b      	strlt	r3, [r5, #0]
 8006a0a:	2c00      	cmp	r4, #0
 8006a0c:	d0dd      	beq.n	80069ca <sniprintf+0x16>
 8006a0e:	9b02      	ldr	r3, [sp, #8]
 8006a10:	2200      	movs	r2, #0
 8006a12:	701a      	strb	r2, [r3, #0]
 8006a14:	e7d9      	b.n	80069ca <sniprintf+0x16>
 8006a16:	bf00      	nop
 8006a18:	20000080 	.word	0x20000080

08006a1c <siprintf>:
 8006a1c:	b40e      	push	{r1, r2, r3}
 8006a1e:	b500      	push	{lr}
 8006a20:	b09c      	sub	sp, #112	; 0x70
 8006a22:	ab1d      	add	r3, sp, #116	; 0x74
 8006a24:	9002      	str	r0, [sp, #8]
 8006a26:	9006      	str	r0, [sp, #24]
 8006a28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a2c:	4809      	ldr	r0, [pc, #36]	; (8006a54 <siprintf+0x38>)
 8006a2e:	9107      	str	r1, [sp, #28]
 8006a30:	9104      	str	r1, [sp, #16]
 8006a32:	4909      	ldr	r1, [pc, #36]	; (8006a58 <siprintf+0x3c>)
 8006a34:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a38:	9105      	str	r1, [sp, #20]
 8006a3a:	6800      	ldr	r0, [r0, #0]
 8006a3c:	9301      	str	r3, [sp, #4]
 8006a3e:	a902      	add	r1, sp, #8
 8006a40:	f001 fc22 	bl	8008288 <_svfiprintf_r>
 8006a44:	9b02      	ldr	r3, [sp, #8]
 8006a46:	2200      	movs	r2, #0
 8006a48:	701a      	strb	r2, [r3, #0]
 8006a4a:	b01c      	add	sp, #112	; 0x70
 8006a4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a50:	b003      	add	sp, #12
 8006a52:	4770      	bx	lr
 8006a54:	20000080 	.word	0x20000080
 8006a58:	ffff0208 	.word	0xffff0208

08006a5c <__sread>:
 8006a5c:	b510      	push	{r4, lr}
 8006a5e:	460c      	mov	r4, r1
 8006a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a64:	f000 f86c 	bl	8006b40 <_read_r>
 8006a68:	2800      	cmp	r0, #0
 8006a6a:	bfab      	itete	ge
 8006a6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006a6e:	89a3      	ldrhlt	r3, [r4, #12]
 8006a70:	181b      	addge	r3, r3, r0
 8006a72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006a76:	bfac      	ite	ge
 8006a78:	6563      	strge	r3, [r4, #84]	; 0x54
 8006a7a:	81a3      	strhlt	r3, [r4, #12]
 8006a7c:	bd10      	pop	{r4, pc}

08006a7e <__swrite>:
 8006a7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a82:	461f      	mov	r7, r3
 8006a84:	898b      	ldrh	r3, [r1, #12]
 8006a86:	05db      	lsls	r3, r3, #23
 8006a88:	4605      	mov	r5, r0
 8006a8a:	460c      	mov	r4, r1
 8006a8c:	4616      	mov	r6, r2
 8006a8e:	d505      	bpl.n	8006a9c <__swrite+0x1e>
 8006a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a94:	2302      	movs	r3, #2
 8006a96:	2200      	movs	r2, #0
 8006a98:	f000 f840 	bl	8006b1c <_lseek_r>
 8006a9c:	89a3      	ldrh	r3, [r4, #12]
 8006a9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006aa2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006aa6:	81a3      	strh	r3, [r4, #12]
 8006aa8:	4632      	mov	r2, r6
 8006aaa:	463b      	mov	r3, r7
 8006aac:	4628      	mov	r0, r5
 8006aae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ab2:	f000 b857 	b.w	8006b64 <_write_r>

08006ab6 <__sseek>:
 8006ab6:	b510      	push	{r4, lr}
 8006ab8:	460c      	mov	r4, r1
 8006aba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006abe:	f000 f82d 	bl	8006b1c <_lseek_r>
 8006ac2:	1c43      	adds	r3, r0, #1
 8006ac4:	89a3      	ldrh	r3, [r4, #12]
 8006ac6:	bf15      	itete	ne
 8006ac8:	6560      	strne	r0, [r4, #84]	; 0x54
 8006aca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006ace:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006ad2:	81a3      	strheq	r3, [r4, #12]
 8006ad4:	bf18      	it	ne
 8006ad6:	81a3      	strhne	r3, [r4, #12]
 8006ad8:	bd10      	pop	{r4, pc}

08006ada <__sclose>:
 8006ada:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ade:	f000 b80d 	b.w	8006afc <_close_r>

08006ae2 <memset>:
 8006ae2:	4402      	add	r2, r0
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d100      	bne.n	8006aec <memset+0xa>
 8006aea:	4770      	bx	lr
 8006aec:	f803 1b01 	strb.w	r1, [r3], #1
 8006af0:	e7f9      	b.n	8006ae6 <memset+0x4>
	...

08006af4 <_localeconv_r>:
 8006af4:	4800      	ldr	r0, [pc, #0]	; (8006af8 <_localeconv_r+0x4>)
 8006af6:	4770      	bx	lr
 8006af8:	20000174 	.word	0x20000174

08006afc <_close_r>:
 8006afc:	b538      	push	{r3, r4, r5, lr}
 8006afe:	4d06      	ldr	r5, [pc, #24]	; (8006b18 <_close_r+0x1c>)
 8006b00:	2300      	movs	r3, #0
 8006b02:	4604      	mov	r4, r0
 8006b04:	4608      	mov	r0, r1
 8006b06:	602b      	str	r3, [r5, #0]
 8006b08:	f7fb fbfb 	bl	8002302 <_close>
 8006b0c:	1c43      	adds	r3, r0, #1
 8006b0e:	d102      	bne.n	8006b16 <_close_r+0x1a>
 8006b10:	682b      	ldr	r3, [r5, #0]
 8006b12:	b103      	cbz	r3, 8006b16 <_close_r+0x1a>
 8006b14:	6023      	str	r3, [r4, #0]
 8006b16:	bd38      	pop	{r3, r4, r5, pc}
 8006b18:	20000568 	.word	0x20000568

08006b1c <_lseek_r>:
 8006b1c:	b538      	push	{r3, r4, r5, lr}
 8006b1e:	4d07      	ldr	r5, [pc, #28]	; (8006b3c <_lseek_r+0x20>)
 8006b20:	4604      	mov	r4, r0
 8006b22:	4608      	mov	r0, r1
 8006b24:	4611      	mov	r1, r2
 8006b26:	2200      	movs	r2, #0
 8006b28:	602a      	str	r2, [r5, #0]
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	f7fb fc10 	bl	8002350 <_lseek>
 8006b30:	1c43      	adds	r3, r0, #1
 8006b32:	d102      	bne.n	8006b3a <_lseek_r+0x1e>
 8006b34:	682b      	ldr	r3, [r5, #0]
 8006b36:	b103      	cbz	r3, 8006b3a <_lseek_r+0x1e>
 8006b38:	6023      	str	r3, [r4, #0]
 8006b3a:	bd38      	pop	{r3, r4, r5, pc}
 8006b3c:	20000568 	.word	0x20000568

08006b40 <_read_r>:
 8006b40:	b538      	push	{r3, r4, r5, lr}
 8006b42:	4d07      	ldr	r5, [pc, #28]	; (8006b60 <_read_r+0x20>)
 8006b44:	4604      	mov	r4, r0
 8006b46:	4608      	mov	r0, r1
 8006b48:	4611      	mov	r1, r2
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	602a      	str	r2, [r5, #0]
 8006b4e:	461a      	mov	r2, r3
 8006b50:	f7fb fb9e 	bl	8002290 <_read>
 8006b54:	1c43      	adds	r3, r0, #1
 8006b56:	d102      	bne.n	8006b5e <_read_r+0x1e>
 8006b58:	682b      	ldr	r3, [r5, #0]
 8006b5a:	b103      	cbz	r3, 8006b5e <_read_r+0x1e>
 8006b5c:	6023      	str	r3, [r4, #0]
 8006b5e:	bd38      	pop	{r3, r4, r5, pc}
 8006b60:	20000568 	.word	0x20000568

08006b64 <_write_r>:
 8006b64:	b538      	push	{r3, r4, r5, lr}
 8006b66:	4d07      	ldr	r5, [pc, #28]	; (8006b84 <_write_r+0x20>)
 8006b68:	4604      	mov	r4, r0
 8006b6a:	4608      	mov	r0, r1
 8006b6c:	4611      	mov	r1, r2
 8006b6e:	2200      	movs	r2, #0
 8006b70:	602a      	str	r2, [r5, #0]
 8006b72:	461a      	mov	r2, r3
 8006b74:	f7fb fba9 	bl	80022ca <_write>
 8006b78:	1c43      	adds	r3, r0, #1
 8006b7a:	d102      	bne.n	8006b82 <_write_r+0x1e>
 8006b7c:	682b      	ldr	r3, [r5, #0]
 8006b7e:	b103      	cbz	r3, 8006b82 <_write_r+0x1e>
 8006b80:	6023      	str	r3, [r4, #0]
 8006b82:	bd38      	pop	{r3, r4, r5, pc}
 8006b84:	20000568 	.word	0x20000568

08006b88 <__errno>:
 8006b88:	4b01      	ldr	r3, [pc, #4]	; (8006b90 <__errno+0x8>)
 8006b8a:	6818      	ldr	r0, [r3, #0]
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	20000080 	.word	0x20000080

08006b94 <__libc_init_array>:
 8006b94:	b570      	push	{r4, r5, r6, lr}
 8006b96:	4d0d      	ldr	r5, [pc, #52]	; (8006bcc <__libc_init_array+0x38>)
 8006b98:	4c0d      	ldr	r4, [pc, #52]	; (8006bd0 <__libc_init_array+0x3c>)
 8006b9a:	1b64      	subs	r4, r4, r5
 8006b9c:	10a4      	asrs	r4, r4, #2
 8006b9e:	2600      	movs	r6, #0
 8006ba0:	42a6      	cmp	r6, r4
 8006ba2:	d109      	bne.n	8006bb8 <__libc_init_array+0x24>
 8006ba4:	4d0b      	ldr	r5, [pc, #44]	; (8006bd4 <__libc_init_array+0x40>)
 8006ba6:	4c0c      	ldr	r4, [pc, #48]	; (8006bd8 <__libc_init_array+0x44>)
 8006ba8:	f002 f896 	bl	8008cd8 <_init>
 8006bac:	1b64      	subs	r4, r4, r5
 8006bae:	10a4      	asrs	r4, r4, #2
 8006bb0:	2600      	movs	r6, #0
 8006bb2:	42a6      	cmp	r6, r4
 8006bb4:	d105      	bne.n	8006bc2 <__libc_init_array+0x2e>
 8006bb6:	bd70      	pop	{r4, r5, r6, pc}
 8006bb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bbc:	4798      	blx	r3
 8006bbe:	3601      	adds	r6, #1
 8006bc0:	e7ee      	b.n	8006ba0 <__libc_init_array+0xc>
 8006bc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bc6:	4798      	blx	r3
 8006bc8:	3601      	adds	r6, #1
 8006bca:	e7f2      	b.n	8006bb2 <__libc_init_array+0x1e>
 8006bcc:	08009224 	.word	0x08009224
 8006bd0:	08009224 	.word	0x08009224
 8006bd4:	08009224 	.word	0x08009224
 8006bd8:	08009228 	.word	0x08009228

08006bdc <__retarget_lock_init_recursive>:
 8006bdc:	4770      	bx	lr

08006bde <__retarget_lock_acquire_recursive>:
 8006bde:	4770      	bx	lr

08006be0 <__retarget_lock_release_recursive>:
 8006be0:	4770      	bx	lr

08006be2 <quorem>:
 8006be2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006be6:	6903      	ldr	r3, [r0, #16]
 8006be8:	690c      	ldr	r4, [r1, #16]
 8006bea:	42a3      	cmp	r3, r4
 8006bec:	4607      	mov	r7, r0
 8006bee:	db7e      	blt.n	8006cee <quorem+0x10c>
 8006bf0:	3c01      	subs	r4, #1
 8006bf2:	f101 0814 	add.w	r8, r1, #20
 8006bf6:	f100 0514 	add.w	r5, r0, #20
 8006bfa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006bfe:	9301      	str	r3, [sp, #4]
 8006c00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006c04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006c10:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006c14:	fbb2 f6f3 	udiv	r6, r2, r3
 8006c18:	d331      	bcc.n	8006c7e <quorem+0x9c>
 8006c1a:	f04f 0e00 	mov.w	lr, #0
 8006c1e:	4640      	mov	r0, r8
 8006c20:	46ac      	mov	ip, r5
 8006c22:	46f2      	mov	sl, lr
 8006c24:	f850 2b04 	ldr.w	r2, [r0], #4
 8006c28:	b293      	uxth	r3, r2
 8006c2a:	fb06 e303 	mla	r3, r6, r3, lr
 8006c2e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006c32:	0c1a      	lsrs	r2, r3, #16
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	ebaa 0303 	sub.w	r3, sl, r3
 8006c3a:	f8dc a000 	ldr.w	sl, [ip]
 8006c3e:	fa13 f38a 	uxtah	r3, r3, sl
 8006c42:	fb06 220e 	mla	r2, r6, lr, r2
 8006c46:	9300      	str	r3, [sp, #0]
 8006c48:	9b00      	ldr	r3, [sp, #0]
 8006c4a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006c4e:	b292      	uxth	r2, r2
 8006c50:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006c54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c58:	f8bd 3000 	ldrh.w	r3, [sp]
 8006c5c:	4581      	cmp	r9, r0
 8006c5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c62:	f84c 3b04 	str.w	r3, [ip], #4
 8006c66:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006c6a:	d2db      	bcs.n	8006c24 <quorem+0x42>
 8006c6c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006c70:	b92b      	cbnz	r3, 8006c7e <quorem+0x9c>
 8006c72:	9b01      	ldr	r3, [sp, #4]
 8006c74:	3b04      	subs	r3, #4
 8006c76:	429d      	cmp	r5, r3
 8006c78:	461a      	mov	r2, r3
 8006c7a:	d32c      	bcc.n	8006cd6 <quorem+0xf4>
 8006c7c:	613c      	str	r4, [r7, #16]
 8006c7e:	4638      	mov	r0, r7
 8006c80:	f001 f9a8 	bl	8007fd4 <__mcmp>
 8006c84:	2800      	cmp	r0, #0
 8006c86:	db22      	blt.n	8006cce <quorem+0xec>
 8006c88:	3601      	adds	r6, #1
 8006c8a:	4629      	mov	r1, r5
 8006c8c:	2000      	movs	r0, #0
 8006c8e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006c92:	f8d1 c000 	ldr.w	ip, [r1]
 8006c96:	b293      	uxth	r3, r2
 8006c98:	1ac3      	subs	r3, r0, r3
 8006c9a:	0c12      	lsrs	r2, r2, #16
 8006c9c:	fa13 f38c 	uxtah	r3, r3, ip
 8006ca0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006ca4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006cae:	45c1      	cmp	r9, r8
 8006cb0:	f841 3b04 	str.w	r3, [r1], #4
 8006cb4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006cb8:	d2e9      	bcs.n	8006c8e <quorem+0xac>
 8006cba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006cbe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006cc2:	b922      	cbnz	r2, 8006cce <quorem+0xec>
 8006cc4:	3b04      	subs	r3, #4
 8006cc6:	429d      	cmp	r5, r3
 8006cc8:	461a      	mov	r2, r3
 8006cca:	d30a      	bcc.n	8006ce2 <quorem+0x100>
 8006ccc:	613c      	str	r4, [r7, #16]
 8006cce:	4630      	mov	r0, r6
 8006cd0:	b003      	add	sp, #12
 8006cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cd6:	6812      	ldr	r2, [r2, #0]
 8006cd8:	3b04      	subs	r3, #4
 8006cda:	2a00      	cmp	r2, #0
 8006cdc:	d1ce      	bne.n	8006c7c <quorem+0x9a>
 8006cde:	3c01      	subs	r4, #1
 8006ce0:	e7c9      	b.n	8006c76 <quorem+0x94>
 8006ce2:	6812      	ldr	r2, [r2, #0]
 8006ce4:	3b04      	subs	r3, #4
 8006ce6:	2a00      	cmp	r2, #0
 8006ce8:	d1f0      	bne.n	8006ccc <quorem+0xea>
 8006cea:	3c01      	subs	r4, #1
 8006cec:	e7eb      	b.n	8006cc6 <quorem+0xe4>
 8006cee:	2000      	movs	r0, #0
 8006cf0:	e7ee      	b.n	8006cd0 <quorem+0xee>
 8006cf2:	0000      	movs	r0, r0
 8006cf4:	0000      	movs	r0, r0
	...

08006cf8 <_dtoa_r>:
 8006cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cfc:	ed2d 8b04 	vpush	{d8-d9}
 8006d00:	69c5      	ldr	r5, [r0, #28]
 8006d02:	b093      	sub	sp, #76	; 0x4c
 8006d04:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006d08:	ec57 6b10 	vmov	r6, r7, d0
 8006d0c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006d10:	9107      	str	r1, [sp, #28]
 8006d12:	4604      	mov	r4, r0
 8006d14:	920a      	str	r2, [sp, #40]	; 0x28
 8006d16:	930d      	str	r3, [sp, #52]	; 0x34
 8006d18:	b975      	cbnz	r5, 8006d38 <_dtoa_r+0x40>
 8006d1a:	2010      	movs	r0, #16
 8006d1c:	f000 fe2a 	bl	8007974 <malloc>
 8006d20:	4602      	mov	r2, r0
 8006d22:	61e0      	str	r0, [r4, #28]
 8006d24:	b920      	cbnz	r0, 8006d30 <_dtoa_r+0x38>
 8006d26:	4bae      	ldr	r3, [pc, #696]	; (8006fe0 <_dtoa_r+0x2e8>)
 8006d28:	21ef      	movs	r1, #239	; 0xef
 8006d2a:	48ae      	ldr	r0, [pc, #696]	; (8006fe4 <_dtoa_r+0x2ec>)
 8006d2c:	f001 fc90 	bl	8008650 <__assert_func>
 8006d30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006d34:	6005      	str	r5, [r0, #0]
 8006d36:	60c5      	str	r5, [r0, #12]
 8006d38:	69e3      	ldr	r3, [r4, #28]
 8006d3a:	6819      	ldr	r1, [r3, #0]
 8006d3c:	b151      	cbz	r1, 8006d54 <_dtoa_r+0x5c>
 8006d3e:	685a      	ldr	r2, [r3, #4]
 8006d40:	604a      	str	r2, [r1, #4]
 8006d42:	2301      	movs	r3, #1
 8006d44:	4093      	lsls	r3, r2
 8006d46:	608b      	str	r3, [r1, #8]
 8006d48:	4620      	mov	r0, r4
 8006d4a:	f000 ff07 	bl	8007b5c <_Bfree>
 8006d4e:	69e3      	ldr	r3, [r4, #28]
 8006d50:	2200      	movs	r2, #0
 8006d52:	601a      	str	r2, [r3, #0]
 8006d54:	1e3b      	subs	r3, r7, #0
 8006d56:	bfbb      	ittet	lt
 8006d58:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006d5c:	9303      	strlt	r3, [sp, #12]
 8006d5e:	2300      	movge	r3, #0
 8006d60:	2201      	movlt	r2, #1
 8006d62:	bfac      	ite	ge
 8006d64:	f8c8 3000 	strge.w	r3, [r8]
 8006d68:	f8c8 2000 	strlt.w	r2, [r8]
 8006d6c:	4b9e      	ldr	r3, [pc, #632]	; (8006fe8 <_dtoa_r+0x2f0>)
 8006d6e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006d72:	ea33 0308 	bics.w	r3, r3, r8
 8006d76:	d11b      	bne.n	8006db0 <_dtoa_r+0xb8>
 8006d78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006d7a:	f242 730f 	movw	r3, #9999	; 0x270f
 8006d7e:	6013      	str	r3, [r2, #0]
 8006d80:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006d84:	4333      	orrs	r3, r6
 8006d86:	f000 8593 	beq.w	80078b0 <_dtoa_r+0xbb8>
 8006d8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d8c:	b963      	cbnz	r3, 8006da8 <_dtoa_r+0xb0>
 8006d8e:	4b97      	ldr	r3, [pc, #604]	; (8006fec <_dtoa_r+0x2f4>)
 8006d90:	e027      	b.n	8006de2 <_dtoa_r+0xea>
 8006d92:	4b97      	ldr	r3, [pc, #604]	; (8006ff0 <_dtoa_r+0x2f8>)
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	3308      	adds	r3, #8
 8006d98:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006d9a:	6013      	str	r3, [r2, #0]
 8006d9c:	9800      	ldr	r0, [sp, #0]
 8006d9e:	b013      	add	sp, #76	; 0x4c
 8006da0:	ecbd 8b04 	vpop	{d8-d9}
 8006da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006da8:	4b90      	ldr	r3, [pc, #576]	; (8006fec <_dtoa_r+0x2f4>)
 8006daa:	9300      	str	r3, [sp, #0]
 8006dac:	3303      	adds	r3, #3
 8006dae:	e7f3      	b.n	8006d98 <_dtoa_r+0xa0>
 8006db0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006db4:	2200      	movs	r2, #0
 8006db6:	ec51 0b17 	vmov	r0, r1, d7
 8006dba:	eeb0 8a47 	vmov.f32	s16, s14
 8006dbe:	eef0 8a67 	vmov.f32	s17, s15
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	f7f9 fea0 	bl	8000b08 <__aeabi_dcmpeq>
 8006dc8:	4681      	mov	r9, r0
 8006dca:	b160      	cbz	r0, 8006de6 <_dtoa_r+0xee>
 8006dcc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006dce:	2301      	movs	r3, #1
 8006dd0:	6013      	str	r3, [r2, #0]
 8006dd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f000 8568 	beq.w	80078aa <_dtoa_r+0xbb2>
 8006dda:	4b86      	ldr	r3, [pc, #536]	; (8006ff4 <_dtoa_r+0x2fc>)
 8006ddc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006dde:	6013      	str	r3, [r2, #0]
 8006de0:	3b01      	subs	r3, #1
 8006de2:	9300      	str	r3, [sp, #0]
 8006de4:	e7da      	b.n	8006d9c <_dtoa_r+0xa4>
 8006de6:	aa10      	add	r2, sp, #64	; 0x40
 8006de8:	a911      	add	r1, sp, #68	; 0x44
 8006dea:	4620      	mov	r0, r4
 8006dec:	eeb0 0a48 	vmov.f32	s0, s16
 8006df0:	eef0 0a68 	vmov.f32	s1, s17
 8006df4:	f001 f994 	bl	8008120 <__d2b>
 8006df8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006dfc:	4682      	mov	sl, r0
 8006dfe:	2d00      	cmp	r5, #0
 8006e00:	d07f      	beq.n	8006f02 <_dtoa_r+0x20a>
 8006e02:	ee18 3a90 	vmov	r3, s17
 8006e06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e0a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006e0e:	ec51 0b18 	vmov	r0, r1, d8
 8006e12:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006e16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006e1a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006e1e:	4619      	mov	r1, r3
 8006e20:	2200      	movs	r2, #0
 8006e22:	4b75      	ldr	r3, [pc, #468]	; (8006ff8 <_dtoa_r+0x300>)
 8006e24:	f7f9 fa50 	bl	80002c8 <__aeabi_dsub>
 8006e28:	a367      	add	r3, pc, #412	; (adr r3, 8006fc8 <_dtoa_r+0x2d0>)
 8006e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2e:	f7f9 fc03 	bl	8000638 <__aeabi_dmul>
 8006e32:	a367      	add	r3, pc, #412	; (adr r3, 8006fd0 <_dtoa_r+0x2d8>)
 8006e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e38:	f7f9 fa48 	bl	80002cc <__adddf3>
 8006e3c:	4606      	mov	r6, r0
 8006e3e:	4628      	mov	r0, r5
 8006e40:	460f      	mov	r7, r1
 8006e42:	f7f9 fb8f 	bl	8000564 <__aeabi_i2d>
 8006e46:	a364      	add	r3, pc, #400	; (adr r3, 8006fd8 <_dtoa_r+0x2e0>)
 8006e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e4c:	f7f9 fbf4 	bl	8000638 <__aeabi_dmul>
 8006e50:	4602      	mov	r2, r0
 8006e52:	460b      	mov	r3, r1
 8006e54:	4630      	mov	r0, r6
 8006e56:	4639      	mov	r1, r7
 8006e58:	f7f9 fa38 	bl	80002cc <__adddf3>
 8006e5c:	4606      	mov	r6, r0
 8006e5e:	460f      	mov	r7, r1
 8006e60:	f7f9 fe9a 	bl	8000b98 <__aeabi_d2iz>
 8006e64:	2200      	movs	r2, #0
 8006e66:	4683      	mov	fp, r0
 8006e68:	2300      	movs	r3, #0
 8006e6a:	4630      	mov	r0, r6
 8006e6c:	4639      	mov	r1, r7
 8006e6e:	f7f9 fe55 	bl	8000b1c <__aeabi_dcmplt>
 8006e72:	b148      	cbz	r0, 8006e88 <_dtoa_r+0x190>
 8006e74:	4658      	mov	r0, fp
 8006e76:	f7f9 fb75 	bl	8000564 <__aeabi_i2d>
 8006e7a:	4632      	mov	r2, r6
 8006e7c:	463b      	mov	r3, r7
 8006e7e:	f7f9 fe43 	bl	8000b08 <__aeabi_dcmpeq>
 8006e82:	b908      	cbnz	r0, 8006e88 <_dtoa_r+0x190>
 8006e84:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006e88:	f1bb 0f16 	cmp.w	fp, #22
 8006e8c:	d857      	bhi.n	8006f3e <_dtoa_r+0x246>
 8006e8e:	4b5b      	ldr	r3, [pc, #364]	; (8006ffc <_dtoa_r+0x304>)
 8006e90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e98:	ec51 0b18 	vmov	r0, r1, d8
 8006e9c:	f7f9 fe3e 	bl	8000b1c <__aeabi_dcmplt>
 8006ea0:	2800      	cmp	r0, #0
 8006ea2:	d04e      	beq.n	8006f42 <_dtoa_r+0x24a>
 8006ea4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	930c      	str	r3, [sp, #48]	; 0x30
 8006eac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006eae:	1b5b      	subs	r3, r3, r5
 8006eb0:	1e5a      	subs	r2, r3, #1
 8006eb2:	bf45      	ittet	mi
 8006eb4:	f1c3 0301 	rsbmi	r3, r3, #1
 8006eb8:	9305      	strmi	r3, [sp, #20]
 8006eba:	2300      	movpl	r3, #0
 8006ebc:	2300      	movmi	r3, #0
 8006ebe:	9206      	str	r2, [sp, #24]
 8006ec0:	bf54      	ite	pl
 8006ec2:	9305      	strpl	r3, [sp, #20]
 8006ec4:	9306      	strmi	r3, [sp, #24]
 8006ec6:	f1bb 0f00 	cmp.w	fp, #0
 8006eca:	db3c      	blt.n	8006f46 <_dtoa_r+0x24e>
 8006ecc:	9b06      	ldr	r3, [sp, #24]
 8006ece:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006ed2:	445b      	add	r3, fp
 8006ed4:	9306      	str	r3, [sp, #24]
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	9308      	str	r3, [sp, #32]
 8006eda:	9b07      	ldr	r3, [sp, #28]
 8006edc:	2b09      	cmp	r3, #9
 8006ede:	d868      	bhi.n	8006fb2 <_dtoa_r+0x2ba>
 8006ee0:	2b05      	cmp	r3, #5
 8006ee2:	bfc4      	itt	gt
 8006ee4:	3b04      	subgt	r3, #4
 8006ee6:	9307      	strgt	r3, [sp, #28]
 8006ee8:	9b07      	ldr	r3, [sp, #28]
 8006eea:	f1a3 0302 	sub.w	r3, r3, #2
 8006eee:	bfcc      	ite	gt
 8006ef0:	2500      	movgt	r5, #0
 8006ef2:	2501      	movle	r5, #1
 8006ef4:	2b03      	cmp	r3, #3
 8006ef6:	f200 8085 	bhi.w	8007004 <_dtoa_r+0x30c>
 8006efa:	e8df f003 	tbb	[pc, r3]
 8006efe:	3b2e      	.short	0x3b2e
 8006f00:	5839      	.short	0x5839
 8006f02:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006f06:	441d      	add	r5, r3
 8006f08:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006f0c:	2b20      	cmp	r3, #32
 8006f0e:	bfc1      	itttt	gt
 8006f10:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006f14:	fa08 f803 	lslgt.w	r8, r8, r3
 8006f18:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006f1c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006f20:	bfd6      	itet	le
 8006f22:	f1c3 0320 	rsble	r3, r3, #32
 8006f26:	ea48 0003 	orrgt.w	r0, r8, r3
 8006f2a:	fa06 f003 	lslle.w	r0, r6, r3
 8006f2e:	f7f9 fb09 	bl	8000544 <__aeabi_ui2d>
 8006f32:	2201      	movs	r2, #1
 8006f34:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006f38:	3d01      	subs	r5, #1
 8006f3a:	920e      	str	r2, [sp, #56]	; 0x38
 8006f3c:	e76f      	b.n	8006e1e <_dtoa_r+0x126>
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e7b3      	b.n	8006eaa <_dtoa_r+0x1b2>
 8006f42:	900c      	str	r0, [sp, #48]	; 0x30
 8006f44:	e7b2      	b.n	8006eac <_dtoa_r+0x1b4>
 8006f46:	9b05      	ldr	r3, [sp, #20]
 8006f48:	eba3 030b 	sub.w	r3, r3, fp
 8006f4c:	9305      	str	r3, [sp, #20]
 8006f4e:	f1cb 0300 	rsb	r3, fp, #0
 8006f52:	9308      	str	r3, [sp, #32]
 8006f54:	2300      	movs	r3, #0
 8006f56:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f58:	e7bf      	b.n	8006eda <_dtoa_r+0x1e2>
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	9309      	str	r3, [sp, #36]	; 0x24
 8006f5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	dc52      	bgt.n	800700a <_dtoa_r+0x312>
 8006f64:	2301      	movs	r3, #1
 8006f66:	9301      	str	r3, [sp, #4]
 8006f68:	9304      	str	r3, [sp, #16]
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	920a      	str	r2, [sp, #40]	; 0x28
 8006f6e:	e00b      	b.n	8006f88 <_dtoa_r+0x290>
 8006f70:	2301      	movs	r3, #1
 8006f72:	e7f3      	b.n	8006f5c <_dtoa_r+0x264>
 8006f74:	2300      	movs	r3, #0
 8006f76:	9309      	str	r3, [sp, #36]	; 0x24
 8006f78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f7a:	445b      	add	r3, fp
 8006f7c:	9301      	str	r3, [sp, #4]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	9304      	str	r3, [sp, #16]
 8006f84:	bfb8      	it	lt
 8006f86:	2301      	movlt	r3, #1
 8006f88:	69e0      	ldr	r0, [r4, #28]
 8006f8a:	2100      	movs	r1, #0
 8006f8c:	2204      	movs	r2, #4
 8006f8e:	f102 0614 	add.w	r6, r2, #20
 8006f92:	429e      	cmp	r6, r3
 8006f94:	d93d      	bls.n	8007012 <_dtoa_r+0x31a>
 8006f96:	6041      	str	r1, [r0, #4]
 8006f98:	4620      	mov	r0, r4
 8006f9a:	f000 fd9f 	bl	8007adc <_Balloc>
 8006f9e:	9000      	str	r0, [sp, #0]
 8006fa0:	2800      	cmp	r0, #0
 8006fa2:	d139      	bne.n	8007018 <_dtoa_r+0x320>
 8006fa4:	4b16      	ldr	r3, [pc, #88]	; (8007000 <_dtoa_r+0x308>)
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	f240 11af 	movw	r1, #431	; 0x1af
 8006fac:	e6bd      	b.n	8006d2a <_dtoa_r+0x32>
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e7e1      	b.n	8006f76 <_dtoa_r+0x27e>
 8006fb2:	2501      	movs	r5, #1
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	9307      	str	r3, [sp, #28]
 8006fb8:	9509      	str	r5, [sp, #36]	; 0x24
 8006fba:	f04f 33ff 	mov.w	r3, #4294967295
 8006fbe:	9301      	str	r3, [sp, #4]
 8006fc0:	9304      	str	r3, [sp, #16]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	2312      	movs	r3, #18
 8006fc6:	e7d1      	b.n	8006f6c <_dtoa_r+0x274>
 8006fc8:	636f4361 	.word	0x636f4361
 8006fcc:	3fd287a7 	.word	0x3fd287a7
 8006fd0:	8b60c8b3 	.word	0x8b60c8b3
 8006fd4:	3fc68a28 	.word	0x3fc68a28
 8006fd8:	509f79fb 	.word	0x509f79fb
 8006fdc:	3fd34413 	.word	0x3fd34413
 8006fe0:	08008ee9 	.word	0x08008ee9
 8006fe4:	08008f00 	.word	0x08008f00
 8006fe8:	7ff00000 	.word	0x7ff00000
 8006fec:	08008ee5 	.word	0x08008ee5
 8006ff0:	08008edc 	.word	0x08008edc
 8006ff4:	08008eb9 	.word	0x08008eb9
 8006ff8:	3ff80000 	.word	0x3ff80000
 8006ffc:	08008ff0 	.word	0x08008ff0
 8007000:	08008f58 	.word	0x08008f58
 8007004:	2301      	movs	r3, #1
 8007006:	9309      	str	r3, [sp, #36]	; 0x24
 8007008:	e7d7      	b.n	8006fba <_dtoa_r+0x2c2>
 800700a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800700c:	9301      	str	r3, [sp, #4]
 800700e:	9304      	str	r3, [sp, #16]
 8007010:	e7ba      	b.n	8006f88 <_dtoa_r+0x290>
 8007012:	3101      	adds	r1, #1
 8007014:	0052      	lsls	r2, r2, #1
 8007016:	e7ba      	b.n	8006f8e <_dtoa_r+0x296>
 8007018:	69e3      	ldr	r3, [r4, #28]
 800701a:	9a00      	ldr	r2, [sp, #0]
 800701c:	601a      	str	r2, [r3, #0]
 800701e:	9b04      	ldr	r3, [sp, #16]
 8007020:	2b0e      	cmp	r3, #14
 8007022:	f200 80a8 	bhi.w	8007176 <_dtoa_r+0x47e>
 8007026:	2d00      	cmp	r5, #0
 8007028:	f000 80a5 	beq.w	8007176 <_dtoa_r+0x47e>
 800702c:	f1bb 0f00 	cmp.w	fp, #0
 8007030:	dd38      	ble.n	80070a4 <_dtoa_r+0x3ac>
 8007032:	4bc0      	ldr	r3, [pc, #768]	; (8007334 <_dtoa_r+0x63c>)
 8007034:	f00b 020f 	and.w	r2, fp, #15
 8007038:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800703c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007040:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007044:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007048:	d019      	beq.n	800707e <_dtoa_r+0x386>
 800704a:	4bbb      	ldr	r3, [pc, #748]	; (8007338 <_dtoa_r+0x640>)
 800704c:	ec51 0b18 	vmov	r0, r1, d8
 8007050:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007054:	f7f9 fc1a 	bl	800088c <__aeabi_ddiv>
 8007058:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800705c:	f008 080f 	and.w	r8, r8, #15
 8007060:	2503      	movs	r5, #3
 8007062:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007338 <_dtoa_r+0x640>
 8007066:	f1b8 0f00 	cmp.w	r8, #0
 800706a:	d10a      	bne.n	8007082 <_dtoa_r+0x38a>
 800706c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007070:	4632      	mov	r2, r6
 8007072:	463b      	mov	r3, r7
 8007074:	f7f9 fc0a 	bl	800088c <__aeabi_ddiv>
 8007078:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800707c:	e02b      	b.n	80070d6 <_dtoa_r+0x3de>
 800707e:	2502      	movs	r5, #2
 8007080:	e7ef      	b.n	8007062 <_dtoa_r+0x36a>
 8007082:	f018 0f01 	tst.w	r8, #1
 8007086:	d008      	beq.n	800709a <_dtoa_r+0x3a2>
 8007088:	4630      	mov	r0, r6
 800708a:	4639      	mov	r1, r7
 800708c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007090:	f7f9 fad2 	bl	8000638 <__aeabi_dmul>
 8007094:	3501      	adds	r5, #1
 8007096:	4606      	mov	r6, r0
 8007098:	460f      	mov	r7, r1
 800709a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800709e:	f109 0908 	add.w	r9, r9, #8
 80070a2:	e7e0      	b.n	8007066 <_dtoa_r+0x36e>
 80070a4:	f000 809f 	beq.w	80071e6 <_dtoa_r+0x4ee>
 80070a8:	f1cb 0600 	rsb	r6, fp, #0
 80070ac:	4ba1      	ldr	r3, [pc, #644]	; (8007334 <_dtoa_r+0x63c>)
 80070ae:	4fa2      	ldr	r7, [pc, #648]	; (8007338 <_dtoa_r+0x640>)
 80070b0:	f006 020f 	and.w	r2, r6, #15
 80070b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070bc:	ec51 0b18 	vmov	r0, r1, d8
 80070c0:	f7f9 faba 	bl	8000638 <__aeabi_dmul>
 80070c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070c8:	1136      	asrs	r6, r6, #4
 80070ca:	2300      	movs	r3, #0
 80070cc:	2502      	movs	r5, #2
 80070ce:	2e00      	cmp	r6, #0
 80070d0:	d17e      	bne.n	80071d0 <_dtoa_r+0x4d8>
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d1d0      	bne.n	8007078 <_dtoa_r+0x380>
 80070d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80070d8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f000 8084 	beq.w	80071ea <_dtoa_r+0x4f2>
 80070e2:	4b96      	ldr	r3, [pc, #600]	; (800733c <_dtoa_r+0x644>)
 80070e4:	2200      	movs	r2, #0
 80070e6:	4640      	mov	r0, r8
 80070e8:	4649      	mov	r1, r9
 80070ea:	f7f9 fd17 	bl	8000b1c <__aeabi_dcmplt>
 80070ee:	2800      	cmp	r0, #0
 80070f0:	d07b      	beq.n	80071ea <_dtoa_r+0x4f2>
 80070f2:	9b04      	ldr	r3, [sp, #16]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d078      	beq.n	80071ea <_dtoa_r+0x4f2>
 80070f8:	9b01      	ldr	r3, [sp, #4]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	dd39      	ble.n	8007172 <_dtoa_r+0x47a>
 80070fe:	4b90      	ldr	r3, [pc, #576]	; (8007340 <_dtoa_r+0x648>)
 8007100:	2200      	movs	r2, #0
 8007102:	4640      	mov	r0, r8
 8007104:	4649      	mov	r1, r9
 8007106:	f7f9 fa97 	bl	8000638 <__aeabi_dmul>
 800710a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800710e:	9e01      	ldr	r6, [sp, #4]
 8007110:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007114:	3501      	adds	r5, #1
 8007116:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800711a:	4628      	mov	r0, r5
 800711c:	f7f9 fa22 	bl	8000564 <__aeabi_i2d>
 8007120:	4642      	mov	r2, r8
 8007122:	464b      	mov	r3, r9
 8007124:	f7f9 fa88 	bl	8000638 <__aeabi_dmul>
 8007128:	4b86      	ldr	r3, [pc, #536]	; (8007344 <_dtoa_r+0x64c>)
 800712a:	2200      	movs	r2, #0
 800712c:	f7f9 f8ce 	bl	80002cc <__adddf3>
 8007130:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007134:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007138:	9303      	str	r3, [sp, #12]
 800713a:	2e00      	cmp	r6, #0
 800713c:	d158      	bne.n	80071f0 <_dtoa_r+0x4f8>
 800713e:	4b82      	ldr	r3, [pc, #520]	; (8007348 <_dtoa_r+0x650>)
 8007140:	2200      	movs	r2, #0
 8007142:	4640      	mov	r0, r8
 8007144:	4649      	mov	r1, r9
 8007146:	f7f9 f8bf 	bl	80002c8 <__aeabi_dsub>
 800714a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800714e:	4680      	mov	r8, r0
 8007150:	4689      	mov	r9, r1
 8007152:	f7f9 fd01 	bl	8000b58 <__aeabi_dcmpgt>
 8007156:	2800      	cmp	r0, #0
 8007158:	f040 8296 	bne.w	8007688 <_dtoa_r+0x990>
 800715c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007160:	4640      	mov	r0, r8
 8007162:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007166:	4649      	mov	r1, r9
 8007168:	f7f9 fcd8 	bl	8000b1c <__aeabi_dcmplt>
 800716c:	2800      	cmp	r0, #0
 800716e:	f040 8289 	bne.w	8007684 <_dtoa_r+0x98c>
 8007172:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007176:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007178:	2b00      	cmp	r3, #0
 800717a:	f2c0 814e 	blt.w	800741a <_dtoa_r+0x722>
 800717e:	f1bb 0f0e 	cmp.w	fp, #14
 8007182:	f300 814a 	bgt.w	800741a <_dtoa_r+0x722>
 8007186:	4b6b      	ldr	r3, [pc, #428]	; (8007334 <_dtoa_r+0x63c>)
 8007188:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800718c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007192:	2b00      	cmp	r3, #0
 8007194:	f280 80dc 	bge.w	8007350 <_dtoa_r+0x658>
 8007198:	9b04      	ldr	r3, [sp, #16]
 800719a:	2b00      	cmp	r3, #0
 800719c:	f300 80d8 	bgt.w	8007350 <_dtoa_r+0x658>
 80071a0:	f040 826f 	bne.w	8007682 <_dtoa_r+0x98a>
 80071a4:	4b68      	ldr	r3, [pc, #416]	; (8007348 <_dtoa_r+0x650>)
 80071a6:	2200      	movs	r2, #0
 80071a8:	4640      	mov	r0, r8
 80071aa:	4649      	mov	r1, r9
 80071ac:	f7f9 fa44 	bl	8000638 <__aeabi_dmul>
 80071b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80071b4:	f7f9 fcc6 	bl	8000b44 <__aeabi_dcmpge>
 80071b8:	9e04      	ldr	r6, [sp, #16]
 80071ba:	4637      	mov	r7, r6
 80071bc:	2800      	cmp	r0, #0
 80071be:	f040 8245 	bne.w	800764c <_dtoa_r+0x954>
 80071c2:	9d00      	ldr	r5, [sp, #0]
 80071c4:	2331      	movs	r3, #49	; 0x31
 80071c6:	f805 3b01 	strb.w	r3, [r5], #1
 80071ca:	f10b 0b01 	add.w	fp, fp, #1
 80071ce:	e241      	b.n	8007654 <_dtoa_r+0x95c>
 80071d0:	07f2      	lsls	r2, r6, #31
 80071d2:	d505      	bpl.n	80071e0 <_dtoa_r+0x4e8>
 80071d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071d8:	f7f9 fa2e 	bl	8000638 <__aeabi_dmul>
 80071dc:	3501      	adds	r5, #1
 80071de:	2301      	movs	r3, #1
 80071e0:	1076      	asrs	r6, r6, #1
 80071e2:	3708      	adds	r7, #8
 80071e4:	e773      	b.n	80070ce <_dtoa_r+0x3d6>
 80071e6:	2502      	movs	r5, #2
 80071e8:	e775      	b.n	80070d6 <_dtoa_r+0x3de>
 80071ea:	9e04      	ldr	r6, [sp, #16]
 80071ec:	465f      	mov	r7, fp
 80071ee:	e792      	b.n	8007116 <_dtoa_r+0x41e>
 80071f0:	9900      	ldr	r1, [sp, #0]
 80071f2:	4b50      	ldr	r3, [pc, #320]	; (8007334 <_dtoa_r+0x63c>)
 80071f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80071f8:	4431      	add	r1, r6
 80071fa:	9102      	str	r1, [sp, #8]
 80071fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071fe:	eeb0 9a47 	vmov.f32	s18, s14
 8007202:	eef0 9a67 	vmov.f32	s19, s15
 8007206:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800720a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800720e:	2900      	cmp	r1, #0
 8007210:	d044      	beq.n	800729c <_dtoa_r+0x5a4>
 8007212:	494e      	ldr	r1, [pc, #312]	; (800734c <_dtoa_r+0x654>)
 8007214:	2000      	movs	r0, #0
 8007216:	f7f9 fb39 	bl	800088c <__aeabi_ddiv>
 800721a:	ec53 2b19 	vmov	r2, r3, d9
 800721e:	f7f9 f853 	bl	80002c8 <__aeabi_dsub>
 8007222:	9d00      	ldr	r5, [sp, #0]
 8007224:	ec41 0b19 	vmov	d9, r0, r1
 8007228:	4649      	mov	r1, r9
 800722a:	4640      	mov	r0, r8
 800722c:	f7f9 fcb4 	bl	8000b98 <__aeabi_d2iz>
 8007230:	4606      	mov	r6, r0
 8007232:	f7f9 f997 	bl	8000564 <__aeabi_i2d>
 8007236:	4602      	mov	r2, r0
 8007238:	460b      	mov	r3, r1
 800723a:	4640      	mov	r0, r8
 800723c:	4649      	mov	r1, r9
 800723e:	f7f9 f843 	bl	80002c8 <__aeabi_dsub>
 8007242:	3630      	adds	r6, #48	; 0x30
 8007244:	f805 6b01 	strb.w	r6, [r5], #1
 8007248:	ec53 2b19 	vmov	r2, r3, d9
 800724c:	4680      	mov	r8, r0
 800724e:	4689      	mov	r9, r1
 8007250:	f7f9 fc64 	bl	8000b1c <__aeabi_dcmplt>
 8007254:	2800      	cmp	r0, #0
 8007256:	d164      	bne.n	8007322 <_dtoa_r+0x62a>
 8007258:	4642      	mov	r2, r8
 800725a:	464b      	mov	r3, r9
 800725c:	4937      	ldr	r1, [pc, #220]	; (800733c <_dtoa_r+0x644>)
 800725e:	2000      	movs	r0, #0
 8007260:	f7f9 f832 	bl	80002c8 <__aeabi_dsub>
 8007264:	ec53 2b19 	vmov	r2, r3, d9
 8007268:	f7f9 fc58 	bl	8000b1c <__aeabi_dcmplt>
 800726c:	2800      	cmp	r0, #0
 800726e:	f040 80b6 	bne.w	80073de <_dtoa_r+0x6e6>
 8007272:	9b02      	ldr	r3, [sp, #8]
 8007274:	429d      	cmp	r5, r3
 8007276:	f43f af7c 	beq.w	8007172 <_dtoa_r+0x47a>
 800727a:	4b31      	ldr	r3, [pc, #196]	; (8007340 <_dtoa_r+0x648>)
 800727c:	ec51 0b19 	vmov	r0, r1, d9
 8007280:	2200      	movs	r2, #0
 8007282:	f7f9 f9d9 	bl	8000638 <__aeabi_dmul>
 8007286:	4b2e      	ldr	r3, [pc, #184]	; (8007340 <_dtoa_r+0x648>)
 8007288:	ec41 0b19 	vmov	d9, r0, r1
 800728c:	2200      	movs	r2, #0
 800728e:	4640      	mov	r0, r8
 8007290:	4649      	mov	r1, r9
 8007292:	f7f9 f9d1 	bl	8000638 <__aeabi_dmul>
 8007296:	4680      	mov	r8, r0
 8007298:	4689      	mov	r9, r1
 800729a:	e7c5      	b.n	8007228 <_dtoa_r+0x530>
 800729c:	ec51 0b17 	vmov	r0, r1, d7
 80072a0:	f7f9 f9ca 	bl	8000638 <__aeabi_dmul>
 80072a4:	9b02      	ldr	r3, [sp, #8]
 80072a6:	9d00      	ldr	r5, [sp, #0]
 80072a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80072aa:	ec41 0b19 	vmov	d9, r0, r1
 80072ae:	4649      	mov	r1, r9
 80072b0:	4640      	mov	r0, r8
 80072b2:	f7f9 fc71 	bl	8000b98 <__aeabi_d2iz>
 80072b6:	4606      	mov	r6, r0
 80072b8:	f7f9 f954 	bl	8000564 <__aeabi_i2d>
 80072bc:	3630      	adds	r6, #48	; 0x30
 80072be:	4602      	mov	r2, r0
 80072c0:	460b      	mov	r3, r1
 80072c2:	4640      	mov	r0, r8
 80072c4:	4649      	mov	r1, r9
 80072c6:	f7f8 ffff 	bl	80002c8 <__aeabi_dsub>
 80072ca:	f805 6b01 	strb.w	r6, [r5], #1
 80072ce:	9b02      	ldr	r3, [sp, #8]
 80072d0:	429d      	cmp	r5, r3
 80072d2:	4680      	mov	r8, r0
 80072d4:	4689      	mov	r9, r1
 80072d6:	f04f 0200 	mov.w	r2, #0
 80072da:	d124      	bne.n	8007326 <_dtoa_r+0x62e>
 80072dc:	4b1b      	ldr	r3, [pc, #108]	; (800734c <_dtoa_r+0x654>)
 80072de:	ec51 0b19 	vmov	r0, r1, d9
 80072e2:	f7f8 fff3 	bl	80002cc <__adddf3>
 80072e6:	4602      	mov	r2, r0
 80072e8:	460b      	mov	r3, r1
 80072ea:	4640      	mov	r0, r8
 80072ec:	4649      	mov	r1, r9
 80072ee:	f7f9 fc33 	bl	8000b58 <__aeabi_dcmpgt>
 80072f2:	2800      	cmp	r0, #0
 80072f4:	d173      	bne.n	80073de <_dtoa_r+0x6e6>
 80072f6:	ec53 2b19 	vmov	r2, r3, d9
 80072fa:	4914      	ldr	r1, [pc, #80]	; (800734c <_dtoa_r+0x654>)
 80072fc:	2000      	movs	r0, #0
 80072fe:	f7f8 ffe3 	bl	80002c8 <__aeabi_dsub>
 8007302:	4602      	mov	r2, r0
 8007304:	460b      	mov	r3, r1
 8007306:	4640      	mov	r0, r8
 8007308:	4649      	mov	r1, r9
 800730a:	f7f9 fc07 	bl	8000b1c <__aeabi_dcmplt>
 800730e:	2800      	cmp	r0, #0
 8007310:	f43f af2f 	beq.w	8007172 <_dtoa_r+0x47a>
 8007314:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007316:	1e6b      	subs	r3, r5, #1
 8007318:	930f      	str	r3, [sp, #60]	; 0x3c
 800731a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800731e:	2b30      	cmp	r3, #48	; 0x30
 8007320:	d0f8      	beq.n	8007314 <_dtoa_r+0x61c>
 8007322:	46bb      	mov	fp, r7
 8007324:	e04a      	b.n	80073bc <_dtoa_r+0x6c4>
 8007326:	4b06      	ldr	r3, [pc, #24]	; (8007340 <_dtoa_r+0x648>)
 8007328:	f7f9 f986 	bl	8000638 <__aeabi_dmul>
 800732c:	4680      	mov	r8, r0
 800732e:	4689      	mov	r9, r1
 8007330:	e7bd      	b.n	80072ae <_dtoa_r+0x5b6>
 8007332:	bf00      	nop
 8007334:	08008ff0 	.word	0x08008ff0
 8007338:	08008fc8 	.word	0x08008fc8
 800733c:	3ff00000 	.word	0x3ff00000
 8007340:	40240000 	.word	0x40240000
 8007344:	401c0000 	.word	0x401c0000
 8007348:	40140000 	.word	0x40140000
 800734c:	3fe00000 	.word	0x3fe00000
 8007350:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007354:	9d00      	ldr	r5, [sp, #0]
 8007356:	4642      	mov	r2, r8
 8007358:	464b      	mov	r3, r9
 800735a:	4630      	mov	r0, r6
 800735c:	4639      	mov	r1, r7
 800735e:	f7f9 fa95 	bl	800088c <__aeabi_ddiv>
 8007362:	f7f9 fc19 	bl	8000b98 <__aeabi_d2iz>
 8007366:	9001      	str	r0, [sp, #4]
 8007368:	f7f9 f8fc 	bl	8000564 <__aeabi_i2d>
 800736c:	4642      	mov	r2, r8
 800736e:	464b      	mov	r3, r9
 8007370:	f7f9 f962 	bl	8000638 <__aeabi_dmul>
 8007374:	4602      	mov	r2, r0
 8007376:	460b      	mov	r3, r1
 8007378:	4630      	mov	r0, r6
 800737a:	4639      	mov	r1, r7
 800737c:	f7f8 ffa4 	bl	80002c8 <__aeabi_dsub>
 8007380:	9e01      	ldr	r6, [sp, #4]
 8007382:	9f04      	ldr	r7, [sp, #16]
 8007384:	3630      	adds	r6, #48	; 0x30
 8007386:	f805 6b01 	strb.w	r6, [r5], #1
 800738a:	9e00      	ldr	r6, [sp, #0]
 800738c:	1bae      	subs	r6, r5, r6
 800738e:	42b7      	cmp	r7, r6
 8007390:	4602      	mov	r2, r0
 8007392:	460b      	mov	r3, r1
 8007394:	d134      	bne.n	8007400 <_dtoa_r+0x708>
 8007396:	f7f8 ff99 	bl	80002cc <__adddf3>
 800739a:	4642      	mov	r2, r8
 800739c:	464b      	mov	r3, r9
 800739e:	4606      	mov	r6, r0
 80073a0:	460f      	mov	r7, r1
 80073a2:	f7f9 fbd9 	bl	8000b58 <__aeabi_dcmpgt>
 80073a6:	b9c8      	cbnz	r0, 80073dc <_dtoa_r+0x6e4>
 80073a8:	4642      	mov	r2, r8
 80073aa:	464b      	mov	r3, r9
 80073ac:	4630      	mov	r0, r6
 80073ae:	4639      	mov	r1, r7
 80073b0:	f7f9 fbaa 	bl	8000b08 <__aeabi_dcmpeq>
 80073b4:	b110      	cbz	r0, 80073bc <_dtoa_r+0x6c4>
 80073b6:	9b01      	ldr	r3, [sp, #4]
 80073b8:	07db      	lsls	r3, r3, #31
 80073ba:	d40f      	bmi.n	80073dc <_dtoa_r+0x6e4>
 80073bc:	4651      	mov	r1, sl
 80073be:	4620      	mov	r0, r4
 80073c0:	f000 fbcc 	bl	8007b5c <_Bfree>
 80073c4:	2300      	movs	r3, #0
 80073c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80073c8:	702b      	strb	r3, [r5, #0]
 80073ca:	f10b 0301 	add.w	r3, fp, #1
 80073ce:	6013      	str	r3, [r2, #0]
 80073d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	f43f ace2 	beq.w	8006d9c <_dtoa_r+0xa4>
 80073d8:	601d      	str	r5, [r3, #0]
 80073da:	e4df      	b.n	8006d9c <_dtoa_r+0xa4>
 80073dc:	465f      	mov	r7, fp
 80073de:	462b      	mov	r3, r5
 80073e0:	461d      	mov	r5, r3
 80073e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80073e6:	2a39      	cmp	r2, #57	; 0x39
 80073e8:	d106      	bne.n	80073f8 <_dtoa_r+0x700>
 80073ea:	9a00      	ldr	r2, [sp, #0]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d1f7      	bne.n	80073e0 <_dtoa_r+0x6e8>
 80073f0:	9900      	ldr	r1, [sp, #0]
 80073f2:	2230      	movs	r2, #48	; 0x30
 80073f4:	3701      	adds	r7, #1
 80073f6:	700a      	strb	r2, [r1, #0]
 80073f8:	781a      	ldrb	r2, [r3, #0]
 80073fa:	3201      	adds	r2, #1
 80073fc:	701a      	strb	r2, [r3, #0]
 80073fe:	e790      	b.n	8007322 <_dtoa_r+0x62a>
 8007400:	4ba3      	ldr	r3, [pc, #652]	; (8007690 <_dtoa_r+0x998>)
 8007402:	2200      	movs	r2, #0
 8007404:	f7f9 f918 	bl	8000638 <__aeabi_dmul>
 8007408:	2200      	movs	r2, #0
 800740a:	2300      	movs	r3, #0
 800740c:	4606      	mov	r6, r0
 800740e:	460f      	mov	r7, r1
 8007410:	f7f9 fb7a 	bl	8000b08 <__aeabi_dcmpeq>
 8007414:	2800      	cmp	r0, #0
 8007416:	d09e      	beq.n	8007356 <_dtoa_r+0x65e>
 8007418:	e7d0      	b.n	80073bc <_dtoa_r+0x6c4>
 800741a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800741c:	2a00      	cmp	r2, #0
 800741e:	f000 80ca 	beq.w	80075b6 <_dtoa_r+0x8be>
 8007422:	9a07      	ldr	r2, [sp, #28]
 8007424:	2a01      	cmp	r2, #1
 8007426:	f300 80ad 	bgt.w	8007584 <_dtoa_r+0x88c>
 800742a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800742c:	2a00      	cmp	r2, #0
 800742e:	f000 80a5 	beq.w	800757c <_dtoa_r+0x884>
 8007432:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007436:	9e08      	ldr	r6, [sp, #32]
 8007438:	9d05      	ldr	r5, [sp, #20]
 800743a:	9a05      	ldr	r2, [sp, #20]
 800743c:	441a      	add	r2, r3
 800743e:	9205      	str	r2, [sp, #20]
 8007440:	9a06      	ldr	r2, [sp, #24]
 8007442:	2101      	movs	r1, #1
 8007444:	441a      	add	r2, r3
 8007446:	4620      	mov	r0, r4
 8007448:	9206      	str	r2, [sp, #24]
 800744a:	f000 fc3d 	bl	8007cc8 <__i2b>
 800744e:	4607      	mov	r7, r0
 8007450:	b165      	cbz	r5, 800746c <_dtoa_r+0x774>
 8007452:	9b06      	ldr	r3, [sp, #24]
 8007454:	2b00      	cmp	r3, #0
 8007456:	dd09      	ble.n	800746c <_dtoa_r+0x774>
 8007458:	42ab      	cmp	r3, r5
 800745a:	9a05      	ldr	r2, [sp, #20]
 800745c:	bfa8      	it	ge
 800745e:	462b      	movge	r3, r5
 8007460:	1ad2      	subs	r2, r2, r3
 8007462:	9205      	str	r2, [sp, #20]
 8007464:	9a06      	ldr	r2, [sp, #24]
 8007466:	1aed      	subs	r5, r5, r3
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	9306      	str	r3, [sp, #24]
 800746c:	9b08      	ldr	r3, [sp, #32]
 800746e:	b1f3      	cbz	r3, 80074ae <_dtoa_r+0x7b6>
 8007470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007472:	2b00      	cmp	r3, #0
 8007474:	f000 80a3 	beq.w	80075be <_dtoa_r+0x8c6>
 8007478:	2e00      	cmp	r6, #0
 800747a:	dd10      	ble.n	800749e <_dtoa_r+0x7a6>
 800747c:	4639      	mov	r1, r7
 800747e:	4632      	mov	r2, r6
 8007480:	4620      	mov	r0, r4
 8007482:	f000 fce1 	bl	8007e48 <__pow5mult>
 8007486:	4652      	mov	r2, sl
 8007488:	4601      	mov	r1, r0
 800748a:	4607      	mov	r7, r0
 800748c:	4620      	mov	r0, r4
 800748e:	f000 fc31 	bl	8007cf4 <__multiply>
 8007492:	4651      	mov	r1, sl
 8007494:	4680      	mov	r8, r0
 8007496:	4620      	mov	r0, r4
 8007498:	f000 fb60 	bl	8007b5c <_Bfree>
 800749c:	46c2      	mov	sl, r8
 800749e:	9b08      	ldr	r3, [sp, #32]
 80074a0:	1b9a      	subs	r2, r3, r6
 80074a2:	d004      	beq.n	80074ae <_dtoa_r+0x7b6>
 80074a4:	4651      	mov	r1, sl
 80074a6:	4620      	mov	r0, r4
 80074a8:	f000 fcce 	bl	8007e48 <__pow5mult>
 80074ac:	4682      	mov	sl, r0
 80074ae:	2101      	movs	r1, #1
 80074b0:	4620      	mov	r0, r4
 80074b2:	f000 fc09 	bl	8007cc8 <__i2b>
 80074b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	4606      	mov	r6, r0
 80074bc:	f340 8081 	ble.w	80075c2 <_dtoa_r+0x8ca>
 80074c0:	461a      	mov	r2, r3
 80074c2:	4601      	mov	r1, r0
 80074c4:	4620      	mov	r0, r4
 80074c6:	f000 fcbf 	bl	8007e48 <__pow5mult>
 80074ca:	9b07      	ldr	r3, [sp, #28]
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	4606      	mov	r6, r0
 80074d0:	dd7a      	ble.n	80075c8 <_dtoa_r+0x8d0>
 80074d2:	f04f 0800 	mov.w	r8, #0
 80074d6:	6933      	ldr	r3, [r6, #16]
 80074d8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80074dc:	6918      	ldr	r0, [r3, #16]
 80074de:	f000 fba5 	bl	8007c2c <__hi0bits>
 80074e2:	f1c0 0020 	rsb	r0, r0, #32
 80074e6:	9b06      	ldr	r3, [sp, #24]
 80074e8:	4418      	add	r0, r3
 80074ea:	f010 001f 	ands.w	r0, r0, #31
 80074ee:	f000 8094 	beq.w	800761a <_dtoa_r+0x922>
 80074f2:	f1c0 0320 	rsb	r3, r0, #32
 80074f6:	2b04      	cmp	r3, #4
 80074f8:	f340 8085 	ble.w	8007606 <_dtoa_r+0x90e>
 80074fc:	9b05      	ldr	r3, [sp, #20]
 80074fe:	f1c0 001c 	rsb	r0, r0, #28
 8007502:	4403      	add	r3, r0
 8007504:	9305      	str	r3, [sp, #20]
 8007506:	9b06      	ldr	r3, [sp, #24]
 8007508:	4403      	add	r3, r0
 800750a:	4405      	add	r5, r0
 800750c:	9306      	str	r3, [sp, #24]
 800750e:	9b05      	ldr	r3, [sp, #20]
 8007510:	2b00      	cmp	r3, #0
 8007512:	dd05      	ble.n	8007520 <_dtoa_r+0x828>
 8007514:	4651      	mov	r1, sl
 8007516:	461a      	mov	r2, r3
 8007518:	4620      	mov	r0, r4
 800751a:	f000 fcef 	bl	8007efc <__lshift>
 800751e:	4682      	mov	sl, r0
 8007520:	9b06      	ldr	r3, [sp, #24]
 8007522:	2b00      	cmp	r3, #0
 8007524:	dd05      	ble.n	8007532 <_dtoa_r+0x83a>
 8007526:	4631      	mov	r1, r6
 8007528:	461a      	mov	r2, r3
 800752a:	4620      	mov	r0, r4
 800752c:	f000 fce6 	bl	8007efc <__lshift>
 8007530:	4606      	mov	r6, r0
 8007532:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007534:	2b00      	cmp	r3, #0
 8007536:	d072      	beq.n	800761e <_dtoa_r+0x926>
 8007538:	4631      	mov	r1, r6
 800753a:	4650      	mov	r0, sl
 800753c:	f000 fd4a 	bl	8007fd4 <__mcmp>
 8007540:	2800      	cmp	r0, #0
 8007542:	da6c      	bge.n	800761e <_dtoa_r+0x926>
 8007544:	2300      	movs	r3, #0
 8007546:	4651      	mov	r1, sl
 8007548:	220a      	movs	r2, #10
 800754a:	4620      	mov	r0, r4
 800754c:	f000 fb28 	bl	8007ba0 <__multadd>
 8007550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007552:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007556:	4682      	mov	sl, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	f000 81b0 	beq.w	80078be <_dtoa_r+0xbc6>
 800755e:	2300      	movs	r3, #0
 8007560:	4639      	mov	r1, r7
 8007562:	220a      	movs	r2, #10
 8007564:	4620      	mov	r0, r4
 8007566:	f000 fb1b 	bl	8007ba0 <__multadd>
 800756a:	9b01      	ldr	r3, [sp, #4]
 800756c:	2b00      	cmp	r3, #0
 800756e:	4607      	mov	r7, r0
 8007570:	f300 8096 	bgt.w	80076a0 <_dtoa_r+0x9a8>
 8007574:	9b07      	ldr	r3, [sp, #28]
 8007576:	2b02      	cmp	r3, #2
 8007578:	dc59      	bgt.n	800762e <_dtoa_r+0x936>
 800757a:	e091      	b.n	80076a0 <_dtoa_r+0x9a8>
 800757c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800757e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007582:	e758      	b.n	8007436 <_dtoa_r+0x73e>
 8007584:	9b04      	ldr	r3, [sp, #16]
 8007586:	1e5e      	subs	r6, r3, #1
 8007588:	9b08      	ldr	r3, [sp, #32]
 800758a:	42b3      	cmp	r3, r6
 800758c:	bfbf      	itttt	lt
 800758e:	9b08      	ldrlt	r3, [sp, #32]
 8007590:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007592:	9608      	strlt	r6, [sp, #32]
 8007594:	1af3      	sublt	r3, r6, r3
 8007596:	bfb4      	ite	lt
 8007598:	18d2      	addlt	r2, r2, r3
 800759a:	1b9e      	subge	r6, r3, r6
 800759c:	9b04      	ldr	r3, [sp, #16]
 800759e:	bfbc      	itt	lt
 80075a0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80075a2:	2600      	movlt	r6, #0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	bfb7      	itett	lt
 80075a8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80075ac:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80075b0:	1a9d      	sublt	r5, r3, r2
 80075b2:	2300      	movlt	r3, #0
 80075b4:	e741      	b.n	800743a <_dtoa_r+0x742>
 80075b6:	9e08      	ldr	r6, [sp, #32]
 80075b8:	9d05      	ldr	r5, [sp, #20]
 80075ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80075bc:	e748      	b.n	8007450 <_dtoa_r+0x758>
 80075be:	9a08      	ldr	r2, [sp, #32]
 80075c0:	e770      	b.n	80074a4 <_dtoa_r+0x7ac>
 80075c2:	9b07      	ldr	r3, [sp, #28]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	dc19      	bgt.n	80075fc <_dtoa_r+0x904>
 80075c8:	9b02      	ldr	r3, [sp, #8]
 80075ca:	b9bb      	cbnz	r3, 80075fc <_dtoa_r+0x904>
 80075cc:	9b03      	ldr	r3, [sp, #12]
 80075ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075d2:	b99b      	cbnz	r3, 80075fc <_dtoa_r+0x904>
 80075d4:	9b03      	ldr	r3, [sp, #12]
 80075d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80075da:	0d1b      	lsrs	r3, r3, #20
 80075dc:	051b      	lsls	r3, r3, #20
 80075de:	b183      	cbz	r3, 8007602 <_dtoa_r+0x90a>
 80075e0:	9b05      	ldr	r3, [sp, #20]
 80075e2:	3301      	adds	r3, #1
 80075e4:	9305      	str	r3, [sp, #20]
 80075e6:	9b06      	ldr	r3, [sp, #24]
 80075e8:	3301      	adds	r3, #1
 80075ea:	9306      	str	r3, [sp, #24]
 80075ec:	f04f 0801 	mov.w	r8, #1
 80075f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f47f af6f 	bne.w	80074d6 <_dtoa_r+0x7de>
 80075f8:	2001      	movs	r0, #1
 80075fa:	e774      	b.n	80074e6 <_dtoa_r+0x7ee>
 80075fc:	f04f 0800 	mov.w	r8, #0
 8007600:	e7f6      	b.n	80075f0 <_dtoa_r+0x8f8>
 8007602:	4698      	mov	r8, r3
 8007604:	e7f4      	b.n	80075f0 <_dtoa_r+0x8f8>
 8007606:	d082      	beq.n	800750e <_dtoa_r+0x816>
 8007608:	9a05      	ldr	r2, [sp, #20]
 800760a:	331c      	adds	r3, #28
 800760c:	441a      	add	r2, r3
 800760e:	9205      	str	r2, [sp, #20]
 8007610:	9a06      	ldr	r2, [sp, #24]
 8007612:	441a      	add	r2, r3
 8007614:	441d      	add	r5, r3
 8007616:	9206      	str	r2, [sp, #24]
 8007618:	e779      	b.n	800750e <_dtoa_r+0x816>
 800761a:	4603      	mov	r3, r0
 800761c:	e7f4      	b.n	8007608 <_dtoa_r+0x910>
 800761e:	9b04      	ldr	r3, [sp, #16]
 8007620:	2b00      	cmp	r3, #0
 8007622:	dc37      	bgt.n	8007694 <_dtoa_r+0x99c>
 8007624:	9b07      	ldr	r3, [sp, #28]
 8007626:	2b02      	cmp	r3, #2
 8007628:	dd34      	ble.n	8007694 <_dtoa_r+0x99c>
 800762a:	9b04      	ldr	r3, [sp, #16]
 800762c:	9301      	str	r3, [sp, #4]
 800762e:	9b01      	ldr	r3, [sp, #4]
 8007630:	b963      	cbnz	r3, 800764c <_dtoa_r+0x954>
 8007632:	4631      	mov	r1, r6
 8007634:	2205      	movs	r2, #5
 8007636:	4620      	mov	r0, r4
 8007638:	f000 fab2 	bl	8007ba0 <__multadd>
 800763c:	4601      	mov	r1, r0
 800763e:	4606      	mov	r6, r0
 8007640:	4650      	mov	r0, sl
 8007642:	f000 fcc7 	bl	8007fd4 <__mcmp>
 8007646:	2800      	cmp	r0, #0
 8007648:	f73f adbb 	bgt.w	80071c2 <_dtoa_r+0x4ca>
 800764c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800764e:	9d00      	ldr	r5, [sp, #0]
 8007650:	ea6f 0b03 	mvn.w	fp, r3
 8007654:	f04f 0800 	mov.w	r8, #0
 8007658:	4631      	mov	r1, r6
 800765a:	4620      	mov	r0, r4
 800765c:	f000 fa7e 	bl	8007b5c <_Bfree>
 8007660:	2f00      	cmp	r7, #0
 8007662:	f43f aeab 	beq.w	80073bc <_dtoa_r+0x6c4>
 8007666:	f1b8 0f00 	cmp.w	r8, #0
 800766a:	d005      	beq.n	8007678 <_dtoa_r+0x980>
 800766c:	45b8      	cmp	r8, r7
 800766e:	d003      	beq.n	8007678 <_dtoa_r+0x980>
 8007670:	4641      	mov	r1, r8
 8007672:	4620      	mov	r0, r4
 8007674:	f000 fa72 	bl	8007b5c <_Bfree>
 8007678:	4639      	mov	r1, r7
 800767a:	4620      	mov	r0, r4
 800767c:	f000 fa6e 	bl	8007b5c <_Bfree>
 8007680:	e69c      	b.n	80073bc <_dtoa_r+0x6c4>
 8007682:	2600      	movs	r6, #0
 8007684:	4637      	mov	r7, r6
 8007686:	e7e1      	b.n	800764c <_dtoa_r+0x954>
 8007688:	46bb      	mov	fp, r7
 800768a:	4637      	mov	r7, r6
 800768c:	e599      	b.n	80071c2 <_dtoa_r+0x4ca>
 800768e:	bf00      	nop
 8007690:	40240000 	.word	0x40240000
 8007694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007696:	2b00      	cmp	r3, #0
 8007698:	f000 80c8 	beq.w	800782c <_dtoa_r+0xb34>
 800769c:	9b04      	ldr	r3, [sp, #16]
 800769e:	9301      	str	r3, [sp, #4]
 80076a0:	2d00      	cmp	r5, #0
 80076a2:	dd05      	ble.n	80076b0 <_dtoa_r+0x9b8>
 80076a4:	4639      	mov	r1, r7
 80076a6:	462a      	mov	r2, r5
 80076a8:	4620      	mov	r0, r4
 80076aa:	f000 fc27 	bl	8007efc <__lshift>
 80076ae:	4607      	mov	r7, r0
 80076b0:	f1b8 0f00 	cmp.w	r8, #0
 80076b4:	d05b      	beq.n	800776e <_dtoa_r+0xa76>
 80076b6:	6879      	ldr	r1, [r7, #4]
 80076b8:	4620      	mov	r0, r4
 80076ba:	f000 fa0f 	bl	8007adc <_Balloc>
 80076be:	4605      	mov	r5, r0
 80076c0:	b928      	cbnz	r0, 80076ce <_dtoa_r+0x9d6>
 80076c2:	4b83      	ldr	r3, [pc, #524]	; (80078d0 <_dtoa_r+0xbd8>)
 80076c4:	4602      	mov	r2, r0
 80076c6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80076ca:	f7ff bb2e 	b.w	8006d2a <_dtoa_r+0x32>
 80076ce:	693a      	ldr	r2, [r7, #16]
 80076d0:	3202      	adds	r2, #2
 80076d2:	0092      	lsls	r2, r2, #2
 80076d4:	f107 010c 	add.w	r1, r7, #12
 80076d8:	300c      	adds	r0, #12
 80076da:	f000 ffab 	bl	8008634 <memcpy>
 80076de:	2201      	movs	r2, #1
 80076e0:	4629      	mov	r1, r5
 80076e2:	4620      	mov	r0, r4
 80076e4:	f000 fc0a 	bl	8007efc <__lshift>
 80076e8:	9b00      	ldr	r3, [sp, #0]
 80076ea:	3301      	adds	r3, #1
 80076ec:	9304      	str	r3, [sp, #16]
 80076ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076f2:	4413      	add	r3, r2
 80076f4:	9308      	str	r3, [sp, #32]
 80076f6:	9b02      	ldr	r3, [sp, #8]
 80076f8:	f003 0301 	and.w	r3, r3, #1
 80076fc:	46b8      	mov	r8, r7
 80076fe:	9306      	str	r3, [sp, #24]
 8007700:	4607      	mov	r7, r0
 8007702:	9b04      	ldr	r3, [sp, #16]
 8007704:	4631      	mov	r1, r6
 8007706:	3b01      	subs	r3, #1
 8007708:	4650      	mov	r0, sl
 800770a:	9301      	str	r3, [sp, #4]
 800770c:	f7ff fa69 	bl	8006be2 <quorem>
 8007710:	4641      	mov	r1, r8
 8007712:	9002      	str	r0, [sp, #8]
 8007714:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007718:	4650      	mov	r0, sl
 800771a:	f000 fc5b 	bl	8007fd4 <__mcmp>
 800771e:	463a      	mov	r2, r7
 8007720:	9005      	str	r0, [sp, #20]
 8007722:	4631      	mov	r1, r6
 8007724:	4620      	mov	r0, r4
 8007726:	f000 fc71 	bl	800800c <__mdiff>
 800772a:	68c2      	ldr	r2, [r0, #12]
 800772c:	4605      	mov	r5, r0
 800772e:	bb02      	cbnz	r2, 8007772 <_dtoa_r+0xa7a>
 8007730:	4601      	mov	r1, r0
 8007732:	4650      	mov	r0, sl
 8007734:	f000 fc4e 	bl	8007fd4 <__mcmp>
 8007738:	4602      	mov	r2, r0
 800773a:	4629      	mov	r1, r5
 800773c:	4620      	mov	r0, r4
 800773e:	9209      	str	r2, [sp, #36]	; 0x24
 8007740:	f000 fa0c 	bl	8007b5c <_Bfree>
 8007744:	9b07      	ldr	r3, [sp, #28]
 8007746:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007748:	9d04      	ldr	r5, [sp, #16]
 800774a:	ea43 0102 	orr.w	r1, r3, r2
 800774e:	9b06      	ldr	r3, [sp, #24]
 8007750:	4319      	orrs	r1, r3
 8007752:	d110      	bne.n	8007776 <_dtoa_r+0xa7e>
 8007754:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007758:	d029      	beq.n	80077ae <_dtoa_r+0xab6>
 800775a:	9b05      	ldr	r3, [sp, #20]
 800775c:	2b00      	cmp	r3, #0
 800775e:	dd02      	ble.n	8007766 <_dtoa_r+0xa6e>
 8007760:	9b02      	ldr	r3, [sp, #8]
 8007762:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007766:	9b01      	ldr	r3, [sp, #4]
 8007768:	f883 9000 	strb.w	r9, [r3]
 800776c:	e774      	b.n	8007658 <_dtoa_r+0x960>
 800776e:	4638      	mov	r0, r7
 8007770:	e7ba      	b.n	80076e8 <_dtoa_r+0x9f0>
 8007772:	2201      	movs	r2, #1
 8007774:	e7e1      	b.n	800773a <_dtoa_r+0xa42>
 8007776:	9b05      	ldr	r3, [sp, #20]
 8007778:	2b00      	cmp	r3, #0
 800777a:	db04      	blt.n	8007786 <_dtoa_r+0xa8e>
 800777c:	9907      	ldr	r1, [sp, #28]
 800777e:	430b      	orrs	r3, r1
 8007780:	9906      	ldr	r1, [sp, #24]
 8007782:	430b      	orrs	r3, r1
 8007784:	d120      	bne.n	80077c8 <_dtoa_r+0xad0>
 8007786:	2a00      	cmp	r2, #0
 8007788:	dded      	ble.n	8007766 <_dtoa_r+0xa6e>
 800778a:	4651      	mov	r1, sl
 800778c:	2201      	movs	r2, #1
 800778e:	4620      	mov	r0, r4
 8007790:	f000 fbb4 	bl	8007efc <__lshift>
 8007794:	4631      	mov	r1, r6
 8007796:	4682      	mov	sl, r0
 8007798:	f000 fc1c 	bl	8007fd4 <__mcmp>
 800779c:	2800      	cmp	r0, #0
 800779e:	dc03      	bgt.n	80077a8 <_dtoa_r+0xab0>
 80077a0:	d1e1      	bne.n	8007766 <_dtoa_r+0xa6e>
 80077a2:	f019 0f01 	tst.w	r9, #1
 80077a6:	d0de      	beq.n	8007766 <_dtoa_r+0xa6e>
 80077a8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80077ac:	d1d8      	bne.n	8007760 <_dtoa_r+0xa68>
 80077ae:	9a01      	ldr	r2, [sp, #4]
 80077b0:	2339      	movs	r3, #57	; 0x39
 80077b2:	7013      	strb	r3, [r2, #0]
 80077b4:	462b      	mov	r3, r5
 80077b6:	461d      	mov	r5, r3
 80077b8:	3b01      	subs	r3, #1
 80077ba:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80077be:	2a39      	cmp	r2, #57	; 0x39
 80077c0:	d06c      	beq.n	800789c <_dtoa_r+0xba4>
 80077c2:	3201      	adds	r2, #1
 80077c4:	701a      	strb	r2, [r3, #0]
 80077c6:	e747      	b.n	8007658 <_dtoa_r+0x960>
 80077c8:	2a00      	cmp	r2, #0
 80077ca:	dd07      	ble.n	80077dc <_dtoa_r+0xae4>
 80077cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80077d0:	d0ed      	beq.n	80077ae <_dtoa_r+0xab6>
 80077d2:	9a01      	ldr	r2, [sp, #4]
 80077d4:	f109 0301 	add.w	r3, r9, #1
 80077d8:	7013      	strb	r3, [r2, #0]
 80077da:	e73d      	b.n	8007658 <_dtoa_r+0x960>
 80077dc:	9b04      	ldr	r3, [sp, #16]
 80077de:	9a08      	ldr	r2, [sp, #32]
 80077e0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d043      	beq.n	8007870 <_dtoa_r+0xb78>
 80077e8:	4651      	mov	r1, sl
 80077ea:	2300      	movs	r3, #0
 80077ec:	220a      	movs	r2, #10
 80077ee:	4620      	mov	r0, r4
 80077f0:	f000 f9d6 	bl	8007ba0 <__multadd>
 80077f4:	45b8      	cmp	r8, r7
 80077f6:	4682      	mov	sl, r0
 80077f8:	f04f 0300 	mov.w	r3, #0
 80077fc:	f04f 020a 	mov.w	r2, #10
 8007800:	4641      	mov	r1, r8
 8007802:	4620      	mov	r0, r4
 8007804:	d107      	bne.n	8007816 <_dtoa_r+0xb1e>
 8007806:	f000 f9cb 	bl	8007ba0 <__multadd>
 800780a:	4680      	mov	r8, r0
 800780c:	4607      	mov	r7, r0
 800780e:	9b04      	ldr	r3, [sp, #16]
 8007810:	3301      	adds	r3, #1
 8007812:	9304      	str	r3, [sp, #16]
 8007814:	e775      	b.n	8007702 <_dtoa_r+0xa0a>
 8007816:	f000 f9c3 	bl	8007ba0 <__multadd>
 800781a:	4639      	mov	r1, r7
 800781c:	4680      	mov	r8, r0
 800781e:	2300      	movs	r3, #0
 8007820:	220a      	movs	r2, #10
 8007822:	4620      	mov	r0, r4
 8007824:	f000 f9bc 	bl	8007ba0 <__multadd>
 8007828:	4607      	mov	r7, r0
 800782a:	e7f0      	b.n	800780e <_dtoa_r+0xb16>
 800782c:	9b04      	ldr	r3, [sp, #16]
 800782e:	9301      	str	r3, [sp, #4]
 8007830:	9d00      	ldr	r5, [sp, #0]
 8007832:	4631      	mov	r1, r6
 8007834:	4650      	mov	r0, sl
 8007836:	f7ff f9d4 	bl	8006be2 <quorem>
 800783a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800783e:	9b00      	ldr	r3, [sp, #0]
 8007840:	f805 9b01 	strb.w	r9, [r5], #1
 8007844:	1aea      	subs	r2, r5, r3
 8007846:	9b01      	ldr	r3, [sp, #4]
 8007848:	4293      	cmp	r3, r2
 800784a:	dd07      	ble.n	800785c <_dtoa_r+0xb64>
 800784c:	4651      	mov	r1, sl
 800784e:	2300      	movs	r3, #0
 8007850:	220a      	movs	r2, #10
 8007852:	4620      	mov	r0, r4
 8007854:	f000 f9a4 	bl	8007ba0 <__multadd>
 8007858:	4682      	mov	sl, r0
 800785a:	e7ea      	b.n	8007832 <_dtoa_r+0xb3a>
 800785c:	9b01      	ldr	r3, [sp, #4]
 800785e:	2b00      	cmp	r3, #0
 8007860:	bfc8      	it	gt
 8007862:	461d      	movgt	r5, r3
 8007864:	9b00      	ldr	r3, [sp, #0]
 8007866:	bfd8      	it	le
 8007868:	2501      	movle	r5, #1
 800786a:	441d      	add	r5, r3
 800786c:	f04f 0800 	mov.w	r8, #0
 8007870:	4651      	mov	r1, sl
 8007872:	2201      	movs	r2, #1
 8007874:	4620      	mov	r0, r4
 8007876:	f000 fb41 	bl	8007efc <__lshift>
 800787a:	4631      	mov	r1, r6
 800787c:	4682      	mov	sl, r0
 800787e:	f000 fba9 	bl	8007fd4 <__mcmp>
 8007882:	2800      	cmp	r0, #0
 8007884:	dc96      	bgt.n	80077b4 <_dtoa_r+0xabc>
 8007886:	d102      	bne.n	800788e <_dtoa_r+0xb96>
 8007888:	f019 0f01 	tst.w	r9, #1
 800788c:	d192      	bne.n	80077b4 <_dtoa_r+0xabc>
 800788e:	462b      	mov	r3, r5
 8007890:	461d      	mov	r5, r3
 8007892:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007896:	2a30      	cmp	r2, #48	; 0x30
 8007898:	d0fa      	beq.n	8007890 <_dtoa_r+0xb98>
 800789a:	e6dd      	b.n	8007658 <_dtoa_r+0x960>
 800789c:	9a00      	ldr	r2, [sp, #0]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d189      	bne.n	80077b6 <_dtoa_r+0xabe>
 80078a2:	f10b 0b01 	add.w	fp, fp, #1
 80078a6:	2331      	movs	r3, #49	; 0x31
 80078a8:	e796      	b.n	80077d8 <_dtoa_r+0xae0>
 80078aa:	4b0a      	ldr	r3, [pc, #40]	; (80078d4 <_dtoa_r+0xbdc>)
 80078ac:	f7ff ba99 	b.w	8006de2 <_dtoa_r+0xea>
 80078b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	f47f aa6d 	bne.w	8006d92 <_dtoa_r+0x9a>
 80078b8:	4b07      	ldr	r3, [pc, #28]	; (80078d8 <_dtoa_r+0xbe0>)
 80078ba:	f7ff ba92 	b.w	8006de2 <_dtoa_r+0xea>
 80078be:	9b01      	ldr	r3, [sp, #4]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	dcb5      	bgt.n	8007830 <_dtoa_r+0xb38>
 80078c4:	9b07      	ldr	r3, [sp, #28]
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	f73f aeb1 	bgt.w	800762e <_dtoa_r+0x936>
 80078cc:	e7b0      	b.n	8007830 <_dtoa_r+0xb38>
 80078ce:	bf00      	nop
 80078d0:	08008f58 	.word	0x08008f58
 80078d4:	08008eb8 	.word	0x08008eb8
 80078d8:	08008edc 	.word	0x08008edc

080078dc <_free_r>:
 80078dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80078de:	2900      	cmp	r1, #0
 80078e0:	d044      	beq.n	800796c <_free_r+0x90>
 80078e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078e6:	9001      	str	r0, [sp, #4]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	f1a1 0404 	sub.w	r4, r1, #4
 80078ee:	bfb8      	it	lt
 80078f0:	18e4      	addlt	r4, r4, r3
 80078f2:	f000 f8e7 	bl	8007ac4 <__malloc_lock>
 80078f6:	4a1e      	ldr	r2, [pc, #120]	; (8007970 <_free_r+0x94>)
 80078f8:	9801      	ldr	r0, [sp, #4]
 80078fa:	6813      	ldr	r3, [r2, #0]
 80078fc:	b933      	cbnz	r3, 800790c <_free_r+0x30>
 80078fe:	6063      	str	r3, [r4, #4]
 8007900:	6014      	str	r4, [r2, #0]
 8007902:	b003      	add	sp, #12
 8007904:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007908:	f000 b8e2 	b.w	8007ad0 <__malloc_unlock>
 800790c:	42a3      	cmp	r3, r4
 800790e:	d908      	bls.n	8007922 <_free_r+0x46>
 8007910:	6825      	ldr	r5, [r4, #0]
 8007912:	1961      	adds	r1, r4, r5
 8007914:	428b      	cmp	r3, r1
 8007916:	bf01      	itttt	eq
 8007918:	6819      	ldreq	r1, [r3, #0]
 800791a:	685b      	ldreq	r3, [r3, #4]
 800791c:	1949      	addeq	r1, r1, r5
 800791e:	6021      	streq	r1, [r4, #0]
 8007920:	e7ed      	b.n	80078fe <_free_r+0x22>
 8007922:	461a      	mov	r2, r3
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	b10b      	cbz	r3, 800792c <_free_r+0x50>
 8007928:	42a3      	cmp	r3, r4
 800792a:	d9fa      	bls.n	8007922 <_free_r+0x46>
 800792c:	6811      	ldr	r1, [r2, #0]
 800792e:	1855      	adds	r5, r2, r1
 8007930:	42a5      	cmp	r5, r4
 8007932:	d10b      	bne.n	800794c <_free_r+0x70>
 8007934:	6824      	ldr	r4, [r4, #0]
 8007936:	4421      	add	r1, r4
 8007938:	1854      	adds	r4, r2, r1
 800793a:	42a3      	cmp	r3, r4
 800793c:	6011      	str	r1, [r2, #0]
 800793e:	d1e0      	bne.n	8007902 <_free_r+0x26>
 8007940:	681c      	ldr	r4, [r3, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	6053      	str	r3, [r2, #4]
 8007946:	440c      	add	r4, r1
 8007948:	6014      	str	r4, [r2, #0]
 800794a:	e7da      	b.n	8007902 <_free_r+0x26>
 800794c:	d902      	bls.n	8007954 <_free_r+0x78>
 800794e:	230c      	movs	r3, #12
 8007950:	6003      	str	r3, [r0, #0]
 8007952:	e7d6      	b.n	8007902 <_free_r+0x26>
 8007954:	6825      	ldr	r5, [r4, #0]
 8007956:	1961      	adds	r1, r4, r5
 8007958:	428b      	cmp	r3, r1
 800795a:	bf04      	itt	eq
 800795c:	6819      	ldreq	r1, [r3, #0]
 800795e:	685b      	ldreq	r3, [r3, #4]
 8007960:	6063      	str	r3, [r4, #4]
 8007962:	bf04      	itt	eq
 8007964:	1949      	addeq	r1, r1, r5
 8007966:	6021      	streq	r1, [r4, #0]
 8007968:	6054      	str	r4, [r2, #4]
 800796a:	e7ca      	b.n	8007902 <_free_r+0x26>
 800796c:	b003      	add	sp, #12
 800796e:	bd30      	pop	{r4, r5, pc}
 8007970:	20000570 	.word	0x20000570

08007974 <malloc>:
 8007974:	4b02      	ldr	r3, [pc, #8]	; (8007980 <malloc+0xc>)
 8007976:	4601      	mov	r1, r0
 8007978:	6818      	ldr	r0, [r3, #0]
 800797a:	f000 b823 	b.w	80079c4 <_malloc_r>
 800797e:	bf00      	nop
 8007980:	20000080 	.word	0x20000080

08007984 <sbrk_aligned>:
 8007984:	b570      	push	{r4, r5, r6, lr}
 8007986:	4e0e      	ldr	r6, [pc, #56]	; (80079c0 <sbrk_aligned+0x3c>)
 8007988:	460c      	mov	r4, r1
 800798a:	6831      	ldr	r1, [r6, #0]
 800798c:	4605      	mov	r5, r0
 800798e:	b911      	cbnz	r1, 8007996 <sbrk_aligned+0x12>
 8007990:	f000 fe40 	bl	8008614 <_sbrk_r>
 8007994:	6030      	str	r0, [r6, #0]
 8007996:	4621      	mov	r1, r4
 8007998:	4628      	mov	r0, r5
 800799a:	f000 fe3b 	bl	8008614 <_sbrk_r>
 800799e:	1c43      	adds	r3, r0, #1
 80079a0:	d00a      	beq.n	80079b8 <sbrk_aligned+0x34>
 80079a2:	1cc4      	adds	r4, r0, #3
 80079a4:	f024 0403 	bic.w	r4, r4, #3
 80079a8:	42a0      	cmp	r0, r4
 80079aa:	d007      	beq.n	80079bc <sbrk_aligned+0x38>
 80079ac:	1a21      	subs	r1, r4, r0
 80079ae:	4628      	mov	r0, r5
 80079b0:	f000 fe30 	bl	8008614 <_sbrk_r>
 80079b4:	3001      	adds	r0, #1
 80079b6:	d101      	bne.n	80079bc <sbrk_aligned+0x38>
 80079b8:	f04f 34ff 	mov.w	r4, #4294967295
 80079bc:	4620      	mov	r0, r4
 80079be:	bd70      	pop	{r4, r5, r6, pc}
 80079c0:	20000574 	.word	0x20000574

080079c4 <_malloc_r>:
 80079c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079c8:	1ccd      	adds	r5, r1, #3
 80079ca:	f025 0503 	bic.w	r5, r5, #3
 80079ce:	3508      	adds	r5, #8
 80079d0:	2d0c      	cmp	r5, #12
 80079d2:	bf38      	it	cc
 80079d4:	250c      	movcc	r5, #12
 80079d6:	2d00      	cmp	r5, #0
 80079d8:	4607      	mov	r7, r0
 80079da:	db01      	blt.n	80079e0 <_malloc_r+0x1c>
 80079dc:	42a9      	cmp	r1, r5
 80079de:	d905      	bls.n	80079ec <_malloc_r+0x28>
 80079e0:	230c      	movs	r3, #12
 80079e2:	603b      	str	r3, [r7, #0]
 80079e4:	2600      	movs	r6, #0
 80079e6:	4630      	mov	r0, r6
 80079e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007ac0 <_malloc_r+0xfc>
 80079f0:	f000 f868 	bl	8007ac4 <__malloc_lock>
 80079f4:	f8d8 3000 	ldr.w	r3, [r8]
 80079f8:	461c      	mov	r4, r3
 80079fa:	bb5c      	cbnz	r4, 8007a54 <_malloc_r+0x90>
 80079fc:	4629      	mov	r1, r5
 80079fe:	4638      	mov	r0, r7
 8007a00:	f7ff ffc0 	bl	8007984 <sbrk_aligned>
 8007a04:	1c43      	adds	r3, r0, #1
 8007a06:	4604      	mov	r4, r0
 8007a08:	d155      	bne.n	8007ab6 <_malloc_r+0xf2>
 8007a0a:	f8d8 4000 	ldr.w	r4, [r8]
 8007a0e:	4626      	mov	r6, r4
 8007a10:	2e00      	cmp	r6, #0
 8007a12:	d145      	bne.n	8007aa0 <_malloc_r+0xdc>
 8007a14:	2c00      	cmp	r4, #0
 8007a16:	d048      	beq.n	8007aaa <_malloc_r+0xe6>
 8007a18:	6823      	ldr	r3, [r4, #0]
 8007a1a:	4631      	mov	r1, r6
 8007a1c:	4638      	mov	r0, r7
 8007a1e:	eb04 0903 	add.w	r9, r4, r3
 8007a22:	f000 fdf7 	bl	8008614 <_sbrk_r>
 8007a26:	4581      	cmp	r9, r0
 8007a28:	d13f      	bne.n	8007aaa <_malloc_r+0xe6>
 8007a2a:	6821      	ldr	r1, [r4, #0]
 8007a2c:	1a6d      	subs	r5, r5, r1
 8007a2e:	4629      	mov	r1, r5
 8007a30:	4638      	mov	r0, r7
 8007a32:	f7ff ffa7 	bl	8007984 <sbrk_aligned>
 8007a36:	3001      	adds	r0, #1
 8007a38:	d037      	beq.n	8007aaa <_malloc_r+0xe6>
 8007a3a:	6823      	ldr	r3, [r4, #0]
 8007a3c:	442b      	add	r3, r5
 8007a3e:	6023      	str	r3, [r4, #0]
 8007a40:	f8d8 3000 	ldr.w	r3, [r8]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d038      	beq.n	8007aba <_malloc_r+0xf6>
 8007a48:	685a      	ldr	r2, [r3, #4]
 8007a4a:	42a2      	cmp	r2, r4
 8007a4c:	d12b      	bne.n	8007aa6 <_malloc_r+0xe2>
 8007a4e:	2200      	movs	r2, #0
 8007a50:	605a      	str	r2, [r3, #4]
 8007a52:	e00f      	b.n	8007a74 <_malloc_r+0xb0>
 8007a54:	6822      	ldr	r2, [r4, #0]
 8007a56:	1b52      	subs	r2, r2, r5
 8007a58:	d41f      	bmi.n	8007a9a <_malloc_r+0xd6>
 8007a5a:	2a0b      	cmp	r2, #11
 8007a5c:	d917      	bls.n	8007a8e <_malloc_r+0xca>
 8007a5e:	1961      	adds	r1, r4, r5
 8007a60:	42a3      	cmp	r3, r4
 8007a62:	6025      	str	r5, [r4, #0]
 8007a64:	bf18      	it	ne
 8007a66:	6059      	strne	r1, [r3, #4]
 8007a68:	6863      	ldr	r3, [r4, #4]
 8007a6a:	bf08      	it	eq
 8007a6c:	f8c8 1000 	streq.w	r1, [r8]
 8007a70:	5162      	str	r2, [r4, r5]
 8007a72:	604b      	str	r3, [r1, #4]
 8007a74:	4638      	mov	r0, r7
 8007a76:	f104 060b 	add.w	r6, r4, #11
 8007a7a:	f000 f829 	bl	8007ad0 <__malloc_unlock>
 8007a7e:	f026 0607 	bic.w	r6, r6, #7
 8007a82:	1d23      	adds	r3, r4, #4
 8007a84:	1af2      	subs	r2, r6, r3
 8007a86:	d0ae      	beq.n	80079e6 <_malloc_r+0x22>
 8007a88:	1b9b      	subs	r3, r3, r6
 8007a8a:	50a3      	str	r3, [r4, r2]
 8007a8c:	e7ab      	b.n	80079e6 <_malloc_r+0x22>
 8007a8e:	42a3      	cmp	r3, r4
 8007a90:	6862      	ldr	r2, [r4, #4]
 8007a92:	d1dd      	bne.n	8007a50 <_malloc_r+0x8c>
 8007a94:	f8c8 2000 	str.w	r2, [r8]
 8007a98:	e7ec      	b.n	8007a74 <_malloc_r+0xb0>
 8007a9a:	4623      	mov	r3, r4
 8007a9c:	6864      	ldr	r4, [r4, #4]
 8007a9e:	e7ac      	b.n	80079fa <_malloc_r+0x36>
 8007aa0:	4634      	mov	r4, r6
 8007aa2:	6876      	ldr	r6, [r6, #4]
 8007aa4:	e7b4      	b.n	8007a10 <_malloc_r+0x4c>
 8007aa6:	4613      	mov	r3, r2
 8007aa8:	e7cc      	b.n	8007a44 <_malloc_r+0x80>
 8007aaa:	230c      	movs	r3, #12
 8007aac:	603b      	str	r3, [r7, #0]
 8007aae:	4638      	mov	r0, r7
 8007ab0:	f000 f80e 	bl	8007ad0 <__malloc_unlock>
 8007ab4:	e797      	b.n	80079e6 <_malloc_r+0x22>
 8007ab6:	6025      	str	r5, [r4, #0]
 8007ab8:	e7dc      	b.n	8007a74 <_malloc_r+0xb0>
 8007aba:	605b      	str	r3, [r3, #4]
 8007abc:	deff      	udf	#255	; 0xff
 8007abe:	bf00      	nop
 8007ac0:	20000570 	.word	0x20000570

08007ac4 <__malloc_lock>:
 8007ac4:	4801      	ldr	r0, [pc, #4]	; (8007acc <__malloc_lock+0x8>)
 8007ac6:	f7ff b88a 	b.w	8006bde <__retarget_lock_acquire_recursive>
 8007aca:	bf00      	nop
 8007acc:	2000056c 	.word	0x2000056c

08007ad0 <__malloc_unlock>:
 8007ad0:	4801      	ldr	r0, [pc, #4]	; (8007ad8 <__malloc_unlock+0x8>)
 8007ad2:	f7ff b885 	b.w	8006be0 <__retarget_lock_release_recursive>
 8007ad6:	bf00      	nop
 8007ad8:	2000056c 	.word	0x2000056c

08007adc <_Balloc>:
 8007adc:	b570      	push	{r4, r5, r6, lr}
 8007ade:	69c6      	ldr	r6, [r0, #28]
 8007ae0:	4604      	mov	r4, r0
 8007ae2:	460d      	mov	r5, r1
 8007ae4:	b976      	cbnz	r6, 8007b04 <_Balloc+0x28>
 8007ae6:	2010      	movs	r0, #16
 8007ae8:	f7ff ff44 	bl	8007974 <malloc>
 8007aec:	4602      	mov	r2, r0
 8007aee:	61e0      	str	r0, [r4, #28]
 8007af0:	b920      	cbnz	r0, 8007afc <_Balloc+0x20>
 8007af2:	4b18      	ldr	r3, [pc, #96]	; (8007b54 <_Balloc+0x78>)
 8007af4:	4818      	ldr	r0, [pc, #96]	; (8007b58 <_Balloc+0x7c>)
 8007af6:	216b      	movs	r1, #107	; 0x6b
 8007af8:	f000 fdaa 	bl	8008650 <__assert_func>
 8007afc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b00:	6006      	str	r6, [r0, #0]
 8007b02:	60c6      	str	r6, [r0, #12]
 8007b04:	69e6      	ldr	r6, [r4, #28]
 8007b06:	68f3      	ldr	r3, [r6, #12]
 8007b08:	b183      	cbz	r3, 8007b2c <_Balloc+0x50>
 8007b0a:	69e3      	ldr	r3, [r4, #28]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007b12:	b9b8      	cbnz	r0, 8007b44 <_Balloc+0x68>
 8007b14:	2101      	movs	r1, #1
 8007b16:	fa01 f605 	lsl.w	r6, r1, r5
 8007b1a:	1d72      	adds	r2, r6, #5
 8007b1c:	0092      	lsls	r2, r2, #2
 8007b1e:	4620      	mov	r0, r4
 8007b20:	f000 fdb4 	bl	800868c <_calloc_r>
 8007b24:	b160      	cbz	r0, 8007b40 <_Balloc+0x64>
 8007b26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007b2a:	e00e      	b.n	8007b4a <_Balloc+0x6e>
 8007b2c:	2221      	movs	r2, #33	; 0x21
 8007b2e:	2104      	movs	r1, #4
 8007b30:	4620      	mov	r0, r4
 8007b32:	f000 fdab 	bl	800868c <_calloc_r>
 8007b36:	69e3      	ldr	r3, [r4, #28]
 8007b38:	60f0      	str	r0, [r6, #12]
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d1e4      	bne.n	8007b0a <_Balloc+0x2e>
 8007b40:	2000      	movs	r0, #0
 8007b42:	bd70      	pop	{r4, r5, r6, pc}
 8007b44:	6802      	ldr	r2, [r0, #0]
 8007b46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b50:	e7f7      	b.n	8007b42 <_Balloc+0x66>
 8007b52:	bf00      	nop
 8007b54:	08008ee9 	.word	0x08008ee9
 8007b58:	08008f69 	.word	0x08008f69

08007b5c <_Bfree>:
 8007b5c:	b570      	push	{r4, r5, r6, lr}
 8007b5e:	69c6      	ldr	r6, [r0, #28]
 8007b60:	4605      	mov	r5, r0
 8007b62:	460c      	mov	r4, r1
 8007b64:	b976      	cbnz	r6, 8007b84 <_Bfree+0x28>
 8007b66:	2010      	movs	r0, #16
 8007b68:	f7ff ff04 	bl	8007974 <malloc>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	61e8      	str	r0, [r5, #28]
 8007b70:	b920      	cbnz	r0, 8007b7c <_Bfree+0x20>
 8007b72:	4b09      	ldr	r3, [pc, #36]	; (8007b98 <_Bfree+0x3c>)
 8007b74:	4809      	ldr	r0, [pc, #36]	; (8007b9c <_Bfree+0x40>)
 8007b76:	218f      	movs	r1, #143	; 0x8f
 8007b78:	f000 fd6a 	bl	8008650 <__assert_func>
 8007b7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b80:	6006      	str	r6, [r0, #0]
 8007b82:	60c6      	str	r6, [r0, #12]
 8007b84:	b13c      	cbz	r4, 8007b96 <_Bfree+0x3a>
 8007b86:	69eb      	ldr	r3, [r5, #28]
 8007b88:	6862      	ldr	r2, [r4, #4]
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b90:	6021      	str	r1, [r4, #0]
 8007b92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007b96:	bd70      	pop	{r4, r5, r6, pc}
 8007b98:	08008ee9 	.word	0x08008ee9
 8007b9c:	08008f69 	.word	0x08008f69

08007ba0 <__multadd>:
 8007ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ba4:	690d      	ldr	r5, [r1, #16]
 8007ba6:	4607      	mov	r7, r0
 8007ba8:	460c      	mov	r4, r1
 8007baa:	461e      	mov	r6, r3
 8007bac:	f101 0c14 	add.w	ip, r1, #20
 8007bb0:	2000      	movs	r0, #0
 8007bb2:	f8dc 3000 	ldr.w	r3, [ip]
 8007bb6:	b299      	uxth	r1, r3
 8007bb8:	fb02 6101 	mla	r1, r2, r1, r6
 8007bbc:	0c1e      	lsrs	r6, r3, #16
 8007bbe:	0c0b      	lsrs	r3, r1, #16
 8007bc0:	fb02 3306 	mla	r3, r2, r6, r3
 8007bc4:	b289      	uxth	r1, r1
 8007bc6:	3001      	adds	r0, #1
 8007bc8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007bcc:	4285      	cmp	r5, r0
 8007bce:	f84c 1b04 	str.w	r1, [ip], #4
 8007bd2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007bd6:	dcec      	bgt.n	8007bb2 <__multadd+0x12>
 8007bd8:	b30e      	cbz	r6, 8007c1e <__multadd+0x7e>
 8007bda:	68a3      	ldr	r3, [r4, #8]
 8007bdc:	42ab      	cmp	r3, r5
 8007bde:	dc19      	bgt.n	8007c14 <__multadd+0x74>
 8007be0:	6861      	ldr	r1, [r4, #4]
 8007be2:	4638      	mov	r0, r7
 8007be4:	3101      	adds	r1, #1
 8007be6:	f7ff ff79 	bl	8007adc <_Balloc>
 8007bea:	4680      	mov	r8, r0
 8007bec:	b928      	cbnz	r0, 8007bfa <__multadd+0x5a>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	4b0c      	ldr	r3, [pc, #48]	; (8007c24 <__multadd+0x84>)
 8007bf2:	480d      	ldr	r0, [pc, #52]	; (8007c28 <__multadd+0x88>)
 8007bf4:	21ba      	movs	r1, #186	; 0xba
 8007bf6:	f000 fd2b 	bl	8008650 <__assert_func>
 8007bfa:	6922      	ldr	r2, [r4, #16]
 8007bfc:	3202      	adds	r2, #2
 8007bfe:	f104 010c 	add.w	r1, r4, #12
 8007c02:	0092      	lsls	r2, r2, #2
 8007c04:	300c      	adds	r0, #12
 8007c06:	f000 fd15 	bl	8008634 <memcpy>
 8007c0a:	4621      	mov	r1, r4
 8007c0c:	4638      	mov	r0, r7
 8007c0e:	f7ff ffa5 	bl	8007b5c <_Bfree>
 8007c12:	4644      	mov	r4, r8
 8007c14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007c18:	3501      	adds	r5, #1
 8007c1a:	615e      	str	r6, [r3, #20]
 8007c1c:	6125      	str	r5, [r4, #16]
 8007c1e:	4620      	mov	r0, r4
 8007c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c24:	08008f58 	.word	0x08008f58
 8007c28:	08008f69 	.word	0x08008f69

08007c2c <__hi0bits>:
 8007c2c:	0c03      	lsrs	r3, r0, #16
 8007c2e:	041b      	lsls	r3, r3, #16
 8007c30:	b9d3      	cbnz	r3, 8007c68 <__hi0bits+0x3c>
 8007c32:	0400      	lsls	r0, r0, #16
 8007c34:	2310      	movs	r3, #16
 8007c36:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007c3a:	bf04      	itt	eq
 8007c3c:	0200      	lsleq	r0, r0, #8
 8007c3e:	3308      	addeq	r3, #8
 8007c40:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007c44:	bf04      	itt	eq
 8007c46:	0100      	lsleq	r0, r0, #4
 8007c48:	3304      	addeq	r3, #4
 8007c4a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007c4e:	bf04      	itt	eq
 8007c50:	0080      	lsleq	r0, r0, #2
 8007c52:	3302      	addeq	r3, #2
 8007c54:	2800      	cmp	r0, #0
 8007c56:	db05      	blt.n	8007c64 <__hi0bits+0x38>
 8007c58:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007c5c:	f103 0301 	add.w	r3, r3, #1
 8007c60:	bf08      	it	eq
 8007c62:	2320      	moveq	r3, #32
 8007c64:	4618      	mov	r0, r3
 8007c66:	4770      	bx	lr
 8007c68:	2300      	movs	r3, #0
 8007c6a:	e7e4      	b.n	8007c36 <__hi0bits+0xa>

08007c6c <__lo0bits>:
 8007c6c:	6803      	ldr	r3, [r0, #0]
 8007c6e:	f013 0207 	ands.w	r2, r3, #7
 8007c72:	d00c      	beq.n	8007c8e <__lo0bits+0x22>
 8007c74:	07d9      	lsls	r1, r3, #31
 8007c76:	d422      	bmi.n	8007cbe <__lo0bits+0x52>
 8007c78:	079a      	lsls	r2, r3, #30
 8007c7a:	bf49      	itett	mi
 8007c7c:	085b      	lsrmi	r3, r3, #1
 8007c7e:	089b      	lsrpl	r3, r3, #2
 8007c80:	6003      	strmi	r3, [r0, #0]
 8007c82:	2201      	movmi	r2, #1
 8007c84:	bf5c      	itt	pl
 8007c86:	6003      	strpl	r3, [r0, #0]
 8007c88:	2202      	movpl	r2, #2
 8007c8a:	4610      	mov	r0, r2
 8007c8c:	4770      	bx	lr
 8007c8e:	b299      	uxth	r1, r3
 8007c90:	b909      	cbnz	r1, 8007c96 <__lo0bits+0x2a>
 8007c92:	0c1b      	lsrs	r3, r3, #16
 8007c94:	2210      	movs	r2, #16
 8007c96:	b2d9      	uxtb	r1, r3
 8007c98:	b909      	cbnz	r1, 8007c9e <__lo0bits+0x32>
 8007c9a:	3208      	adds	r2, #8
 8007c9c:	0a1b      	lsrs	r3, r3, #8
 8007c9e:	0719      	lsls	r1, r3, #28
 8007ca0:	bf04      	itt	eq
 8007ca2:	091b      	lsreq	r3, r3, #4
 8007ca4:	3204      	addeq	r2, #4
 8007ca6:	0799      	lsls	r1, r3, #30
 8007ca8:	bf04      	itt	eq
 8007caa:	089b      	lsreq	r3, r3, #2
 8007cac:	3202      	addeq	r2, #2
 8007cae:	07d9      	lsls	r1, r3, #31
 8007cb0:	d403      	bmi.n	8007cba <__lo0bits+0x4e>
 8007cb2:	085b      	lsrs	r3, r3, #1
 8007cb4:	f102 0201 	add.w	r2, r2, #1
 8007cb8:	d003      	beq.n	8007cc2 <__lo0bits+0x56>
 8007cba:	6003      	str	r3, [r0, #0]
 8007cbc:	e7e5      	b.n	8007c8a <__lo0bits+0x1e>
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	e7e3      	b.n	8007c8a <__lo0bits+0x1e>
 8007cc2:	2220      	movs	r2, #32
 8007cc4:	e7e1      	b.n	8007c8a <__lo0bits+0x1e>
	...

08007cc8 <__i2b>:
 8007cc8:	b510      	push	{r4, lr}
 8007cca:	460c      	mov	r4, r1
 8007ccc:	2101      	movs	r1, #1
 8007cce:	f7ff ff05 	bl	8007adc <_Balloc>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	b928      	cbnz	r0, 8007ce2 <__i2b+0x1a>
 8007cd6:	4b05      	ldr	r3, [pc, #20]	; (8007cec <__i2b+0x24>)
 8007cd8:	4805      	ldr	r0, [pc, #20]	; (8007cf0 <__i2b+0x28>)
 8007cda:	f240 1145 	movw	r1, #325	; 0x145
 8007cde:	f000 fcb7 	bl	8008650 <__assert_func>
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	6144      	str	r4, [r0, #20]
 8007ce6:	6103      	str	r3, [r0, #16]
 8007ce8:	bd10      	pop	{r4, pc}
 8007cea:	bf00      	nop
 8007cec:	08008f58 	.word	0x08008f58
 8007cf0:	08008f69 	.word	0x08008f69

08007cf4 <__multiply>:
 8007cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf8:	4691      	mov	r9, r2
 8007cfa:	690a      	ldr	r2, [r1, #16]
 8007cfc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	bfb8      	it	lt
 8007d04:	460b      	movlt	r3, r1
 8007d06:	460c      	mov	r4, r1
 8007d08:	bfbc      	itt	lt
 8007d0a:	464c      	movlt	r4, r9
 8007d0c:	4699      	movlt	r9, r3
 8007d0e:	6927      	ldr	r7, [r4, #16]
 8007d10:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007d14:	68a3      	ldr	r3, [r4, #8]
 8007d16:	6861      	ldr	r1, [r4, #4]
 8007d18:	eb07 060a 	add.w	r6, r7, sl
 8007d1c:	42b3      	cmp	r3, r6
 8007d1e:	b085      	sub	sp, #20
 8007d20:	bfb8      	it	lt
 8007d22:	3101      	addlt	r1, #1
 8007d24:	f7ff feda 	bl	8007adc <_Balloc>
 8007d28:	b930      	cbnz	r0, 8007d38 <__multiply+0x44>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	4b44      	ldr	r3, [pc, #272]	; (8007e40 <__multiply+0x14c>)
 8007d2e:	4845      	ldr	r0, [pc, #276]	; (8007e44 <__multiply+0x150>)
 8007d30:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007d34:	f000 fc8c 	bl	8008650 <__assert_func>
 8007d38:	f100 0514 	add.w	r5, r0, #20
 8007d3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007d40:	462b      	mov	r3, r5
 8007d42:	2200      	movs	r2, #0
 8007d44:	4543      	cmp	r3, r8
 8007d46:	d321      	bcc.n	8007d8c <__multiply+0x98>
 8007d48:	f104 0314 	add.w	r3, r4, #20
 8007d4c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007d50:	f109 0314 	add.w	r3, r9, #20
 8007d54:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007d58:	9202      	str	r2, [sp, #8]
 8007d5a:	1b3a      	subs	r2, r7, r4
 8007d5c:	3a15      	subs	r2, #21
 8007d5e:	f022 0203 	bic.w	r2, r2, #3
 8007d62:	3204      	adds	r2, #4
 8007d64:	f104 0115 	add.w	r1, r4, #21
 8007d68:	428f      	cmp	r7, r1
 8007d6a:	bf38      	it	cc
 8007d6c:	2204      	movcc	r2, #4
 8007d6e:	9201      	str	r2, [sp, #4]
 8007d70:	9a02      	ldr	r2, [sp, #8]
 8007d72:	9303      	str	r3, [sp, #12]
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d80c      	bhi.n	8007d92 <__multiply+0x9e>
 8007d78:	2e00      	cmp	r6, #0
 8007d7a:	dd03      	ble.n	8007d84 <__multiply+0x90>
 8007d7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d05b      	beq.n	8007e3c <__multiply+0x148>
 8007d84:	6106      	str	r6, [r0, #16]
 8007d86:	b005      	add	sp, #20
 8007d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d8c:	f843 2b04 	str.w	r2, [r3], #4
 8007d90:	e7d8      	b.n	8007d44 <__multiply+0x50>
 8007d92:	f8b3 a000 	ldrh.w	sl, [r3]
 8007d96:	f1ba 0f00 	cmp.w	sl, #0
 8007d9a:	d024      	beq.n	8007de6 <__multiply+0xf2>
 8007d9c:	f104 0e14 	add.w	lr, r4, #20
 8007da0:	46a9      	mov	r9, r5
 8007da2:	f04f 0c00 	mov.w	ip, #0
 8007da6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007daa:	f8d9 1000 	ldr.w	r1, [r9]
 8007dae:	fa1f fb82 	uxth.w	fp, r2
 8007db2:	b289      	uxth	r1, r1
 8007db4:	fb0a 110b 	mla	r1, sl, fp, r1
 8007db8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007dbc:	f8d9 2000 	ldr.w	r2, [r9]
 8007dc0:	4461      	add	r1, ip
 8007dc2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007dc6:	fb0a c20b 	mla	r2, sl, fp, ip
 8007dca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007dce:	b289      	uxth	r1, r1
 8007dd0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007dd4:	4577      	cmp	r7, lr
 8007dd6:	f849 1b04 	str.w	r1, [r9], #4
 8007dda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007dde:	d8e2      	bhi.n	8007da6 <__multiply+0xb2>
 8007de0:	9a01      	ldr	r2, [sp, #4]
 8007de2:	f845 c002 	str.w	ip, [r5, r2]
 8007de6:	9a03      	ldr	r2, [sp, #12]
 8007de8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007dec:	3304      	adds	r3, #4
 8007dee:	f1b9 0f00 	cmp.w	r9, #0
 8007df2:	d021      	beq.n	8007e38 <__multiply+0x144>
 8007df4:	6829      	ldr	r1, [r5, #0]
 8007df6:	f104 0c14 	add.w	ip, r4, #20
 8007dfa:	46ae      	mov	lr, r5
 8007dfc:	f04f 0a00 	mov.w	sl, #0
 8007e00:	f8bc b000 	ldrh.w	fp, [ip]
 8007e04:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007e08:	fb09 220b 	mla	r2, r9, fp, r2
 8007e0c:	4452      	add	r2, sl
 8007e0e:	b289      	uxth	r1, r1
 8007e10:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007e14:	f84e 1b04 	str.w	r1, [lr], #4
 8007e18:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007e1c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007e20:	f8be 1000 	ldrh.w	r1, [lr]
 8007e24:	fb09 110a 	mla	r1, r9, sl, r1
 8007e28:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007e2c:	4567      	cmp	r7, ip
 8007e2e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007e32:	d8e5      	bhi.n	8007e00 <__multiply+0x10c>
 8007e34:	9a01      	ldr	r2, [sp, #4]
 8007e36:	50a9      	str	r1, [r5, r2]
 8007e38:	3504      	adds	r5, #4
 8007e3a:	e799      	b.n	8007d70 <__multiply+0x7c>
 8007e3c:	3e01      	subs	r6, #1
 8007e3e:	e79b      	b.n	8007d78 <__multiply+0x84>
 8007e40:	08008f58 	.word	0x08008f58
 8007e44:	08008f69 	.word	0x08008f69

08007e48 <__pow5mult>:
 8007e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e4c:	4615      	mov	r5, r2
 8007e4e:	f012 0203 	ands.w	r2, r2, #3
 8007e52:	4606      	mov	r6, r0
 8007e54:	460f      	mov	r7, r1
 8007e56:	d007      	beq.n	8007e68 <__pow5mult+0x20>
 8007e58:	4c25      	ldr	r4, [pc, #148]	; (8007ef0 <__pow5mult+0xa8>)
 8007e5a:	3a01      	subs	r2, #1
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e62:	f7ff fe9d 	bl	8007ba0 <__multadd>
 8007e66:	4607      	mov	r7, r0
 8007e68:	10ad      	asrs	r5, r5, #2
 8007e6a:	d03d      	beq.n	8007ee8 <__pow5mult+0xa0>
 8007e6c:	69f4      	ldr	r4, [r6, #28]
 8007e6e:	b97c      	cbnz	r4, 8007e90 <__pow5mult+0x48>
 8007e70:	2010      	movs	r0, #16
 8007e72:	f7ff fd7f 	bl	8007974 <malloc>
 8007e76:	4602      	mov	r2, r0
 8007e78:	61f0      	str	r0, [r6, #28]
 8007e7a:	b928      	cbnz	r0, 8007e88 <__pow5mult+0x40>
 8007e7c:	4b1d      	ldr	r3, [pc, #116]	; (8007ef4 <__pow5mult+0xac>)
 8007e7e:	481e      	ldr	r0, [pc, #120]	; (8007ef8 <__pow5mult+0xb0>)
 8007e80:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007e84:	f000 fbe4 	bl	8008650 <__assert_func>
 8007e88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e8c:	6004      	str	r4, [r0, #0]
 8007e8e:	60c4      	str	r4, [r0, #12]
 8007e90:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007e94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e98:	b94c      	cbnz	r4, 8007eae <__pow5mult+0x66>
 8007e9a:	f240 2171 	movw	r1, #625	; 0x271
 8007e9e:	4630      	mov	r0, r6
 8007ea0:	f7ff ff12 	bl	8007cc8 <__i2b>
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	f8c8 0008 	str.w	r0, [r8, #8]
 8007eaa:	4604      	mov	r4, r0
 8007eac:	6003      	str	r3, [r0, #0]
 8007eae:	f04f 0900 	mov.w	r9, #0
 8007eb2:	07eb      	lsls	r3, r5, #31
 8007eb4:	d50a      	bpl.n	8007ecc <__pow5mult+0x84>
 8007eb6:	4639      	mov	r1, r7
 8007eb8:	4622      	mov	r2, r4
 8007eba:	4630      	mov	r0, r6
 8007ebc:	f7ff ff1a 	bl	8007cf4 <__multiply>
 8007ec0:	4639      	mov	r1, r7
 8007ec2:	4680      	mov	r8, r0
 8007ec4:	4630      	mov	r0, r6
 8007ec6:	f7ff fe49 	bl	8007b5c <_Bfree>
 8007eca:	4647      	mov	r7, r8
 8007ecc:	106d      	asrs	r5, r5, #1
 8007ece:	d00b      	beq.n	8007ee8 <__pow5mult+0xa0>
 8007ed0:	6820      	ldr	r0, [r4, #0]
 8007ed2:	b938      	cbnz	r0, 8007ee4 <__pow5mult+0x9c>
 8007ed4:	4622      	mov	r2, r4
 8007ed6:	4621      	mov	r1, r4
 8007ed8:	4630      	mov	r0, r6
 8007eda:	f7ff ff0b 	bl	8007cf4 <__multiply>
 8007ede:	6020      	str	r0, [r4, #0]
 8007ee0:	f8c0 9000 	str.w	r9, [r0]
 8007ee4:	4604      	mov	r4, r0
 8007ee6:	e7e4      	b.n	8007eb2 <__pow5mult+0x6a>
 8007ee8:	4638      	mov	r0, r7
 8007eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eee:	bf00      	nop
 8007ef0:	080090b8 	.word	0x080090b8
 8007ef4:	08008ee9 	.word	0x08008ee9
 8007ef8:	08008f69 	.word	0x08008f69

08007efc <__lshift>:
 8007efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f00:	460c      	mov	r4, r1
 8007f02:	6849      	ldr	r1, [r1, #4]
 8007f04:	6923      	ldr	r3, [r4, #16]
 8007f06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007f0a:	68a3      	ldr	r3, [r4, #8]
 8007f0c:	4607      	mov	r7, r0
 8007f0e:	4691      	mov	r9, r2
 8007f10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007f14:	f108 0601 	add.w	r6, r8, #1
 8007f18:	42b3      	cmp	r3, r6
 8007f1a:	db0b      	blt.n	8007f34 <__lshift+0x38>
 8007f1c:	4638      	mov	r0, r7
 8007f1e:	f7ff fddd 	bl	8007adc <_Balloc>
 8007f22:	4605      	mov	r5, r0
 8007f24:	b948      	cbnz	r0, 8007f3a <__lshift+0x3e>
 8007f26:	4602      	mov	r2, r0
 8007f28:	4b28      	ldr	r3, [pc, #160]	; (8007fcc <__lshift+0xd0>)
 8007f2a:	4829      	ldr	r0, [pc, #164]	; (8007fd0 <__lshift+0xd4>)
 8007f2c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007f30:	f000 fb8e 	bl	8008650 <__assert_func>
 8007f34:	3101      	adds	r1, #1
 8007f36:	005b      	lsls	r3, r3, #1
 8007f38:	e7ee      	b.n	8007f18 <__lshift+0x1c>
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	f100 0114 	add.w	r1, r0, #20
 8007f40:	f100 0210 	add.w	r2, r0, #16
 8007f44:	4618      	mov	r0, r3
 8007f46:	4553      	cmp	r3, sl
 8007f48:	db33      	blt.n	8007fb2 <__lshift+0xb6>
 8007f4a:	6920      	ldr	r0, [r4, #16]
 8007f4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f50:	f104 0314 	add.w	r3, r4, #20
 8007f54:	f019 091f 	ands.w	r9, r9, #31
 8007f58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007f60:	d02b      	beq.n	8007fba <__lshift+0xbe>
 8007f62:	f1c9 0e20 	rsb	lr, r9, #32
 8007f66:	468a      	mov	sl, r1
 8007f68:	2200      	movs	r2, #0
 8007f6a:	6818      	ldr	r0, [r3, #0]
 8007f6c:	fa00 f009 	lsl.w	r0, r0, r9
 8007f70:	4310      	orrs	r0, r2
 8007f72:	f84a 0b04 	str.w	r0, [sl], #4
 8007f76:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f7a:	459c      	cmp	ip, r3
 8007f7c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007f80:	d8f3      	bhi.n	8007f6a <__lshift+0x6e>
 8007f82:	ebac 0304 	sub.w	r3, ip, r4
 8007f86:	3b15      	subs	r3, #21
 8007f88:	f023 0303 	bic.w	r3, r3, #3
 8007f8c:	3304      	adds	r3, #4
 8007f8e:	f104 0015 	add.w	r0, r4, #21
 8007f92:	4584      	cmp	ip, r0
 8007f94:	bf38      	it	cc
 8007f96:	2304      	movcc	r3, #4
 8007f98:	50ca      	str	r2, [r1, r3]
 8007f9a:	b10a      	cbz	r2, 8007fa0 <__lshift+0xa4>
 8007f9c:	f108 0602 	add.w	r6, r8, #2
 8007fa0:	3e01      	subs	r6, #1
 8007fa2:	4638      	mov	r0, r7
 8007fa4:	612e      	str	r6, [r5, #16]
 8007fa6:	4621      	mov	r1, r4
 8007fa8:	f7ff fdd8 	bl	8007b5c <_Bfree>
 8007fac:	4628      	mov	r0, r5
 8007fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fb2:	f842 0f04 	str.w	r0, [r2, #4]!
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	e7c5      	b.n	8007f46 <__lshift+0x4a>
 8007fba:	3904      	subs	r1, #4
 8007fbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fc0:	f841 2f04 	str.w	r2, [r1, #4]!
 8007fc4:	459c      	cmp	ip, r3
 8007fc6:	d8f9      	bhi.n	8007fbc <__lshift+0xc0>
 8007fc8:	e7ea      	b.n	8007fa0 <__lshift+0xa4>
 8007fca:	bf00      	nop
 8007fcc:	08008f58 	.word	0x08008f58
 8007fd0:	08008f69 	.word	0x08008f69

08007fd4 <__mcmp>:
 8007fd4:	b530      	push	{r4, r5, lr}
 8007fd6:	6902      	ldr	r2, [r0, #16]
 8007fd8:	690c      	ldr	r4, [r1, #16]
 8007fda:	1b12      	subs	r2, r2, r4
 8007fdc:	d10e      	bne.n	8007ffc <__mcmp+0x28>
 8007fde:	f100 0314 	add.w	r3, r0, #20
 8007fe2:	3114      	adds	r1, #20
 8007fe4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007fe8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007fec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007ff0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007ff4:	42a5      	cmp	r5, r4
 8007ff6:	d003      	beq.n	8008000 <__mcmp+0x2c>
 8007ff8:	d305      	bcc.n	8008006 <__mcmp+0x32>
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	4610      	mov	r0, r2
 8007ffe:	bd30      	pop	{r4, r5, pc}
 8008000:	4283      	cmp	r3, r0
 8008002:	d3f3      	bcc.n	8007fec <__mcmp+0x18>
 8008004:	e7fa      	b.n	8007ffc <__mcmp+0x28>
 8008006:	f04f 32ff 	mov.w	r2, #4294967295
 800800a:	e7f7      	b.n	8007ffc <__mcmp+0x28>

0800800c <__mdiff>:
 800800c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008010:	460c      	mov	r4, r1
 8008012:	4606      	mov	r6, r0
 8008014:	4611      	mov	r1, r2
 8008016:	4620      	mov	r0, r4
 8008018:	4690      	mov	r8, r2
 800801a:	f7ff ffdb 	bl	8007fd4 <__mcmp>
 800801e:	1e05      	subs	r5, r0, #0
 8008020:	d110      	bne.n	8008044 <__mdiff+0x38>
 8008022:	4629      	mov	r1, r5
 8008024:	4630      	mov	r0, r6
 8008026:	f7ff fd59 	bl	8007adc <_Balloc>
 800802a:	b930      	cbnz	r0, 800803a <__mdiff+0x2e>
 800802c:	4b3a      	ldr	r3, [pc, #232]	; (8008118 <__mdiff+0x10c>)
 800802e:	4602      	mov	r2, r0
 8008030:	f240 2137 	movw	r1, #567	; 0x237
 8008034:	4839      	ldr	r0, [pc, #228]	; (800811c <__mdiff+0x110>)
 8008036:	f000 fb0b 	bl	8008650 <__assert_func>
 800803a:	2301      	movs	r3, #1
 800803c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008040:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008044:	bfa4      	itt	ge
 8008046:	4643      	movge	r3, r8
 8008048:	46a0      	movge	r8, r4
 800804a:	4630      	mov	r0, r6
 800804c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008050:	bfa6      	itte	ge
 8008052:	461c      	movge	r4, r3
 8008054:	2500      	movge	r5, #0
 8008056:	2501      	movlt	r5, #1
 8008058:	f7ff fd40 	bl	8007adc <_Balloc>
 800805c:	b920      	cbnz	r0, 8008068 <__mdiff+0x5c>
 800805e:	4b2e      	ldr	r3, [pc, #184]	; (8008118 <__mdiff+0x10c>)
 8008060:	4602      	mov	r2, r0
 8008062:	f240 2145 	movw	r1, #581	; 0x245
 8008066:	e7e5      	b.n	8008034 <__mdiff+0x28>
 8008068:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800806c:	6926      	ldr	r6, [r4, #16]
 800806e:	60c5      	str	r5, [r0, #12]
 8008070:	f104 0914 	add.w	r9, r4, #20
 8008074:	f108 0514 	add.w	r5, r8, #20
 8008078:	f100 0e14 	add.w	lr, r0, #20
 800807c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008080:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008084:	f108 0210 	add.w	r2, r8, #16
 8008088:	46f2      	mov	sl, lr
 800808a:	2100      	movs	r1, #0
 800808c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008090:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008094:	fa11 f88b 	uxtah	r8, r1, fp
 8008098:	b299      	uxth	r1, r3
 800809a:	0c1b      	lsrs	r3, r3, #16
 800809c:	eba8 0801 	sub.w	r8, r8, r1
 80080a0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80080a4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80080a8:	fa1f f888 	uxth.w	r8, r8
 80080ac:	1419      	asrs	r1, r3, #16
 80080ae:	454e      	cmp	r6, r9
 80080b0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80080b4:	f84a 3b04 	str.w	r3, [sl], #4
 80080b8:	d8e8      	bhi.n	800808c <__mdiff+0x80>
 80080ba:	1b33      	subs	r3, r6, r4
 80080bc:	3b15      	subs	r3, #21
 80080be:	f023 0303 	bic.w	r3, r3, #3
 80080c2:	3304      	adds	r3, #4
 80080c4:	3415      	adds	r4, #21
 80080c6:	42a6      	cmp	r6, r4
 80080c8:	bf38      	it	cc
 80080ca:	2304      	movcc	r3, #4
 80080cc:	441d      	add	r5, r3
 80080ce:	4473      	add	r3, lr
 80080d0:	469e      	mov	lr, r3
 80080d2:	462e      	mov	r6, r5
 80080d4:	4566      	cmp	r6, ip
 80080d6:	d30e      	bcc.n	80080f6 <__mdiff+0xea>
 80080d8:	f10c 0203 	add.w	r2, ip, #3
 80080dc:	1b52      	subs	r2, r2, r5
 80080de:	f022 0203 	bic.w	r2, r2, #3
 80080e2:	3d03      	subs	r5, #3
 80080e4:	45ac      	cmp	ip, r5
 80080e6:	bf38      	it	cc
 80080e8:	2200      	movcc	r2, #0
 80080ea:	4413      	add	r3, r2
 80080ec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80080f0:	b17a      	cbz	r2, 8008112 <__mdiff+0x106>
 80080f2:	6107      	str	r7, [r0, #16]
 80080f4:	e7a4      	b.n	8008040 <__mdiff+0x34>
 80080f6:	f856 8b04 	ldr.w	r8, [r6], #4
 80080fa:	fa11 f288 	uxtah	r2, r1, r8
 80080fe:	1414      	asrs	r4, r2, #16
 8008100:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008104:	b292      	uxth	r2, r2
 8008106:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800810a:	f84e 2b04 	str.w	r2, [lr], #4
 800810e:	1421      	asrs	r1, r4, #16
 8008110:	e7e0      	b.n	80080d4 <__mdiff+0xc8>
 8008112:	3f01      	subs	r7, #1
 8008114:	e7ea      	b.n	80080ec <__mdiff+0xe0>
 8008116:	bf00      	nop
 8008118:	08008f58 	.word	0x08008f58
 800811c:	08008f69 	.word	0x08008f69

08008120 <__d2b>:
 8008120:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008124:	460f      	mov	r7, r1
 8008126:	2101      	movs	r1, #1
 8008128:	ec59 8b10 	vmov	r8, r9, d0
 800812c:	4616      	mov	r6, r2
 800812e:	f7ff fcd5 	bl	8007adc <_Balloc>
 8008132:	4604      	mov	r4, r0
 8008134:	b930      	cbnz	r0, 8008144 <__d2b+0x24>
 8008136:	4602      	mov	r2, r0
 8008138:	4b24      	ldr	r3, [pc, #144]	; (80081cc <__d2b+0xac>)
 800813a:	4825      	ldr	r0, [pc, #148]	; (80081d0 <__d2b+0xb0>)
 800813c:	f240 310f 	movw	r1, #783	; 0x30f
 8008140:	f000 fa86 	bl	8008650 <__assert_func>
 8008144:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008148:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800814c:	bb2d      	cbnz	r5, 800819a <__d2b+0x7a>
 800814e:	9301      	str	r3, [sp, #4]
 8008150:	f1b8 0300 	subs.w	r3, r8, #0
 8008154:	d026      	beq.n	80081a4 <__d2b+0x84>
 8008156:	4668      	mov	r0, sp
 8008158:	9300      	str	r3, [sp, #0]
 800815a:	f7ff fd87 	bl	8007c6c <__lo0bits>
 800815e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008162:	b1e8      	cbz	r0, 80081a0 <__d2b+0x80>
 8008164:	f1c0 0320 	rsb	r3, r0, #32
 8008168:	fa02 f303 	lsl.w	r3, r2, r3
 800816c:	430b      	orrs	r3, r1
 800816e:	40c2      	lsrs	r2, r0
 8008170:	6163      	str	r3, [r4, #20]
 8008172:	9201      	str	r2, [sp, #4]
 8008174:	9b01      	ldr	r3, [sp, #4]
 8008176:	61a3      	str	r3, [r4, #24]
 8008178:	2b00      	cmp	r3, #0
 800817a:	bf14      	ite	ne
 800817c:	2202      	movne	r2, #2
 800817e:	2201      	moveq	r2, #1
 8008180:	6122      	str	r2, [r4, #16]
 8008182:	b1bd      	cbz	r5, 80081b4 <__d2b+0x94>
 8008184:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008188:	4405      	add	r5, r0
 800818a:	603d      	str	r5, [r7, #0]
 800818c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008190:	6030      	str	r0, [r6, #0]
 8008192:	4620      	mov	r0, r4
 8008194:	b003      	add	sp, #12
 8008196:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800819a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800819e:	e7d6      	b.n	800814e <__d2b+0x2e>
 80081a0:	6161      	str	r1, [r4, #20]
 80081a2:	e7e7      	b.n	8008174 <__d2b+0x54>
 80081a4:	a801      	add	r0, sp, #4
 80081a6:	f7ff fd61 	bl	8007c6c <__lo0bits>
 80081aa:	9b01      	ldr	r3, [sp, #4]
 80081ac:	6163      	str	r3, [r4, #20]
 80081ae:	3020      	adds	r0, #32
 80081b0:	2201      	movs	r2, #1
 80081b2:	e7e5      	b.n	8008180 <__d2b+0x60>
 80081b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80081b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80081bc:	6038      	str	r0, [r7, #0]
 80081be:	6918      	ldr	r0, [r3, #16]
 80081c0:	f7ff fd34 	bl	8007c2c <__hi0bits>
 80081c4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80081c8:	e7e2      	b.n	8008190 <__d2b+0x70>
 80081ca:	bf00      	nop
 80081cc:	08008f58 	.word	0x08008f58
 80081d0:	08008f69 	.word	0x08008f69

080081d4 <__ssputs_r>:
 80081d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081d8:	688e      	ldr	r6, [r1, #8]
 80081da:	461f      	mov	r7, r3
 80081dc:	42be      	cmp	r6, r7
 80081de:	680b      	ldr	r3, [r1, #0]
 80081e0:	4682      	mov	sl, r0
 80081e2:	460c      	mov	r4, r1
 80081e4:	4690      	mov	r8, r2
 80081e6:	d82c      	bhi.n	8008242 <__ssputs_r+0x6e>
 80081e8:	898a      	ldrh	r2, [r1, #12]
 80081ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80081ee:	d026      	beq.n	800823e <__ssputs_r+0x6a>
 80081f0:	6965      	ldr	r5, [r4, #20]
 80081f2:	6909      	ldr	r1, [r1, #16]
 80081f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80081f8:	eba3 0901 	sub.w	r9, r3, r1
 80081fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008200:	1c7b      	adds	r3, r7, #1
 8008202:	444b      	add	r3, r9
 8008204:	106d      	asrs	r5, r5, #1
 8008206:	429d      	cmp	r5, r3
 8008208:	bf38      	it	cc
 800820a:	461d      	movcc	r5, r3
 800820c:	0553      	lsls	r3, r2, #21
 800820e:	d527      	bpl.n	8008260 <__ssputs_r+0x8c>
 8008210:	4629      	mov	r1, r5
 8008212:	f7ff fbd7 	bl	80079c4 <_malloc_r>
 8008216:	4606      	mov	r6, r0
 8008218:	b360      	cbz	r0, 8008274 <__ssputs_r+0xa0>
 800821a:	6921      	ldr	r1, [r4, #16]
 800821c:	464a      	mov	r2, r9
 800821e:	f000 fa09 	bl	8008634 <memcpy>
 8008222:	89a3      	ldrh	r3, [r4, #12]
 8008224:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800822c:	81a3      	strh	r3, [r4, #12]
 800822e:	6126      	str	r6, [r4, #16]
 8008230:	6165      	str	r5, [r4, #20]
 8008232:	444e      	add	r6, r9
 8008234:	eba5 0509 	sub.w	r5, r5, r9
 8008238:	6026      	str	r6, [r4, #0]
 800823a:	60a5      	str	r5, [r4, #8]
 800823c:	463e      	mov	r6, r7
 800823e:	42be      	cmp	r6, r7
 8008240:	d900      	bls.n	8008244 <__ssputs_r+0x70>
 8008242:	463e      	mov	r6, r7
 8008244:	6820      	ldr	r0, [r4, #0]
 8008246:	4632      	mov	r2, r6
 8008248:	4641      	mov	r1, r8
 800824a:	f000 f9c9 	bl	80085e0 <memmove>
 800824e:	68a3      	ldr	r3, [r4, #8]
 8008250:	1b9b      	subs	r3, r3, r6
 8008252:	60a3      	str	r3, [r4, #8]
 8008254:	6823      	ldr	r3, [r4, #0]
 8008256:	4433      	add	r3, r6
 8008258:	6023      	str	r3, [r4, #0]
 800825a:	2000      	movs	r0, #0
 800825c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008260:	462a      	mov	r2, r5
 8008262:	f000 fa3b 	bl	80086dc <_realloc_r>
 8008266:	4606      	mov	r6, r0
 8008268:	2800      	cmp	r0, #0
 800826a:	d1e0      	bne.n	800822e <__ssputs_r+0x5a>
 800826c:	6921      	ldr	r1, [r4, #16]
 800826e:	4650      	mov	r0, sl
 8008270:	f7ff fb34 	bl	80078dc <_free_r>
 8008274:	230c      	movs	r3, #12
 8008276:	f8ca 3000 	str.w	r3, [sl]
 800827a:	89a3      	ldrh	r3, [r4, #12]
 800827c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008280:	81a3      	strh	r3, [r4, #12]
 8008282:	f04f 30ff 	mov.w	r0, #4294967295
 8008286:	e7e9      	b.n	800825c <__ssputs_r+0x88>

08008288 <_svfiprintf_r>:
 8008288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800828c:	4698      	mov	r8, r3
 800828e:	898b      	ldrh	r3, [r1, #12]
 8008290:	061b      	lsls	r3, r3, #24
 8008292:	b09d      	sub	sp, #116	; 0x74
 8008294:	4607      	mov	r7, r0
 8008296:	460d      	mov	r5, r1
 8008298:	4614      	mov	r4, r2
 800829a:	d50e      	bpl.n	80082ba <_svfiprintf_r+0x32>
 800829c:	690b      	ldr	r3, [r1, #16]
 800829e:	b963      	cbnz	r3, 80082ba <_svfiprintf_r+0x32>
 80082a0:	2140      	movs	r1, #64	; 0x40
 80082a2:	f7ff fb8f 	bl	80079c4 <_malloc_r>
 80082a6:	6028      	str	r0, [r5, #0]
 80082a8:	6128      	str	r0, [r5, #16]
 80082aa:	b920      	cbnz	r0, 80082b6 <_svfiprintf_r+0x2e>
 80082ac:	230c      	movs	r3, #12
 80082ae:	603b      	str	r3, [r7, #0]
 80082b0:	f04f 30ff 	mov.w	r0, #4294967295
 80082b4:	e0d0      	b.n	8008458 <_svfiprintf_r+0x1d0>
 80082b6:	2340      	movs	r3, #64	; 0x40
 80082b8:	616b      	str	r3, [r5, #20]
 80082ba:	2300      	movs	r3, #0
 80082bc:	9309      	str	r3, [sp, #36]	; 0x24
 80082be:	2320      	movs	r3, #32
 80082c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80082c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80082c8:	2330      	movs	r3, #48	; 0x30
 80082ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008470 <_svfiprintf_r+0x1e8>
 80082ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082d2:	f04f 0901 	mov.w	r9, #1
 80082d6:	4623      	mov	r3, r4
 80082d8:	469a      	mov	sl, r3
 80082da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082de:	b10a      	cbz	r2, 80082e4 <_svfiprintf_r+0x5c>
 80082e0:	2a25      	cmp	r2, #37	; 0x25
 80082e2:	d1f9      	bne.n	80082d8 <_svfiprintf_r+0x50>
 80082e4:	ebba 0b04 	subs.w	fp, sl, r4
 80082e8:	d00b      	beq.n	8008302 <_svfiprintf_r+0x7a>
 80082ea:	465b      	mov	r3, fp
 80082ec:	4622      	mov	r2, r4
 80082ee:	4629      	mov	r1, r5
 80082f0:	4638      	mov	r0, r7
 80082f2:	f7ff ff6f 	bl	80081d4 <__ssputs_r>
 80082f6:	3001      	adds	r0, #1
 80082f8:	f000 80a9 	beq.w	800844e <_svfiprintf_r+0x1c6>
 80082fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082fe:	445a      	add	r2, fp
 8008300:	9209      	str	r2, [sp, #36]	; 0x24
 8008302:	f89a 3000 	ldrb.w	r3, [sl]
 8008306:	2b00      	cmp	r3, #0
 8008308:	f000 80a1 	beq.w	800844e <_svfiprintf_r+0x1c6>
 800830c:	2300      	movs	r3, #0
 800830e:	f04f 32ff 	mov.w	r2, #4294967295
 8008312:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008316:	f10a 0a01 	add.w	sl, sl, #1
 800831a:	9304      	str	r3, [sp, #16]
 800831c:	9307      	str	r3, [sp, #28]
 800831e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008322:	931a      	str	r3, [sp, #104]	; 0x68
 8008324:	4654      	mov	r4, sl
 8008326:	2205      	movs	r2, #5
 8008328:	f814 1b01 	ldrb.w	r1, [r4], #1
 800832c:	4850      	ldr	r0, [pc, #320]	; (8008470 <_svfiprintf_r+0x1e8>)
 800832e:	f7f7 ff6f 	bl	8000210 <memchr>
 8008332:	9a04      	ldr	r2, [sp, #16]
 8008334:	b9d8      	cbnz	r0, 800836e <_svfiprintf_r+0xe6>
 8008336:	06d0      	lsls	r0, r2, #27
 8008338:	bf44      	itt	mi
 800833a:	2320      	movmi	r3, #32
 800833c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008340:	0711      	lsls	r1, r2, #28
 8008342:	bf44      	itt	mi
 8008344:	232b      	movmi	r3, #43	; 0x2b
 8008346:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800834a:	f89a 3000 	ldrb.w	r3, [sl]
 800834e:	2b2a      	cmp	r3, #42	; 0x2a
 8008350:	d015      	beq.n	800837e <_svfiprintf_r+0xf6>
 8008352:	9a07      	ldr	r2, [sp, #28]
 8008354:	4654      	mov	r4, sl
 8008356:	2000      	movs	r0, #0
 8008358:	f04f 0c0a 	mov.w	ip, #10
 800835c:	4621      	mov	r1, r4
 800835e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008362:	3b30      	subs	r3, #48	; 0x30
 8008364:	2b09      	cmp	r3, #9
 8008366:	d94d      	bls.n	8008404 <_svfiprintf_r+0x17c>
 8008368:	b1b0      	cbz	r0, 8008398 <_svfiprintf_r+0x110>
 800836a:	9207      	str	r2, [sp, #28]
 800836c:	e014      	b.n	8008398 <_svfiprintf_r+0x110>
 800836e:	eba0 0308 	sub.w	r3, r0, r8
 8008372:	fa09 f303 	lsl.w	r3, r9, r3
 8008376:	4313      	orrs	r3, r2
 8008378:	9304      	str	r3, [sp, #16]
 800837a:	46a2      	mov	sl, r4
 800837c:	e7d2      	b.n	8008324 <_svfiprintf_r+0x9c>
 800837e:	9b03      	ldr	r3, [sp, #12]
 8008380:	1d19      	adds	r1, r3, #4
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	9103      	str	r1, [sp, #12]
 8008386:	2b00      	cmp	r3, #0
 8008388:	bfbb      	ittet	lt
 800838a:	425b      	neglt	r3, r3
 800838c:	f042 0202 	orrlt.w	r2, r2, #2
 8008390:	9307      	strge	r3, [sp, #28]
 8008392:	9307      	strlt	r3, [sp, #28]
 8008394:	bfb8      	it	lt
 8008396:	9204      	strlt	r2, [sp, #16]
 8008398:	7823      	ldrb	r3, [r4, #0]
 800839a:	2b2e      	cmp	r3, #46	; 0x2e
 800839c:	d10c      	bne.n	80083b8 <_svfiprintf_r+0x130>
 800839e:	7863      	ldrb	r3, [r4, #1]
 80083a0:	2b2a      	cmp	r3, #42	; 0x2a
 80083a2:	d134      	bne.n	800840e <_svfiprintf_r+0x186>
 80083a4:	9b03      	ldr	r3, [sp, #12]
 80083a6:	1d1a      	adds	r2, r3, #4
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	9203      	str	r2, [sp, #12]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	bfb8      	it	lt
 80083b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80083b4:	3402      	adds	r4, #2
 80083b6:	9305      	str	r3, [sp, #20]
 80083b8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008480 <_svfiprintf_r+0x1f8>
 80083bc:	7821      	ldrb	r1, [r4, #0]
 80083be:	2203      	movs	r2, #3
 80083c0:	4650      	mov	r0, sl
 80083c2:	f7f7 ff25 	bl	8000210 <memchr>
 80083c6:	b138      	cbz	r0, 80083d8 <_svfiprintf_r+0x150>
 80083c8:	9b04      	ldr	r3, [sp, #16]
 80083ca:	eba0 000a 	sub.w	r0, r0, sl
 80083ce:	2240      	movs	r2, #64	; 0x40
 80083d0:	4082      	lsls	r2, r0
 80083d2:	4313      	orrs	r3, r2
 80083d4:	3401      	adds	r4, #1
 80083d6:	9304      	str	r3, [sp, #16]
 80083d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083dc:	4825      	ldr	r0, [pc, #148]	; (8008474 <_svfiprintf_r+0x1ec>)
 80083de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083e2:	2206      	movs	r2, #6
 80083e4:	f7f7 ff14 	bl	8000210 <memchr>
 80083e8:	2800      	cmp	r0, #0
 80083ea:	d038      	beq.n	800845e <_svfiprintf_r+0x1d6>
 80083ec:	4b22      	ldr	r3, [pc, #136]	; (8008478 <_svfiprintf_r+0x1f0>)
 80083ee:	bb1b      	cbnz	r3, 8008438 <_svfiprintf_r+0x1b0>
 80083f0:	9b03      	ldr	r3, [sp, #12]
 80083f2:	3307      	adds	r3, #7
 80083f4:	f023 0307 	bic.w	r3, r3, #7
 80083f8:	3308      	adds	r3, #8
 80083fa:	9303      	str	r3, [sp, #12]
 80083fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083fe:	4433      	add	r3, r6
 8008400:	9309      	str	r3, [sp, #36]	; 0x24
 8008402:	e768      	b.n	80082d6 <_svfiprintf_r+0x4e>
 8008404:	fb0c 3202 	mla	r2, ip, r2, r3
 8008408:	460c      	mov	r4, r1
 800840a:	2001      	movs	r0, #1
 800840c:	e7a6      	b.n	800835c <_svfiprintf_r+0xd4>
 800840e:	2300      	movs	r3, #0
 8008410:	3401      	adds	r4, #1
 8008412:	9305      	str	r3, [sp, #20]
 8008414:	4619      	mov	r1, r3
 8008416:	f04f 0c0a 	mov.w	ip, #10
 800841a:	4620      	mov	r0, r4
 800841c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008420:	3a30      	subs	r2, #48	; 0x30
 8008422:	2a09      	cmp	r2, #9
 8008424:	d903      	bls.n	800842e <_svfiprintf_r+0x1a6>
 8008426:	2b00      	cmp	r3, #0
 8008428:	d0c6      	beq.n	80083b8 <_svfiprintf_r+0x130>
 800842a:	9105      	str	r1, [sp, #20]
 800842c:	e7c4      	b.n	80083b8 <_svfiprintf_r+0x130>
 800842e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008432:	4604      	mov	r4, r0
 8008434:	2301      	movs	r3, #1
 8008436:	e7f0      	b.n	800841a <_svfiprintf_r+0x192>
 8008438:	ab03      	add	r3, sp, #12
 800843a:	9300      	str	r3, [sp, #0]
 800843c:	462a      	mov	r2, r5
 800843e:	4b0f      	ldr	r3, [pc, #60]	; (800847c <_svfiprintf_r+0x1f4>)
 8008440:	a904      	add	r1, sp, #16
 8008442:	4638      	mov	r0, r7
 8008444:	f7fd fe2e 	bl	80060a4 <_printf_float>
 8008448:	1c42      	adds	r2, r0, #1
 800844a:	4606      	mov	r6, r0
 800844c:	d1d6      	bne.n	80083fc <_svfiprintf_r+0x174>
 800844e:	89ab      	ldrh	r3, [r5, #12]
 8008450:	065b      	lsls	r3, r3, #25
 8008452:	f53f af2d 	bmi.w	80082b0 <_svfiprintf_r+0x28>
 8008456:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008458:	b01d      	add	sp, #116	; 0x74
 800845a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800845e:	ab03      	add	r3, sp, #12
 8008460:	9300      	str	r3, [sp, #0]
 8008462:	462a      	mov	r2, r5
 8008464:	4b05      	ldr	r3, [pc, #20]	; (800847c <_svfiprintf_r+0x1f4>)
 8008466:	a904      	add	r1, sp, #16
 8008468:	4638      	mov	r0, r7
 800846a:	f7fe f8bf 	bl	80065ec <_printf_i>
 800846e:	e7eb      	b.n	8008448 <_svfiprintf_r+0x1c0>
 8008470:	080090c4 	.word	0x080090c4
 8008474:	080090ce 	.word	0x080090ce
 8008478:	080060a5 	.word	0x080060a5
 800847c:	080081d5 	.word	0x080081d5
 8008480:	080090ca 	.word	0x080090ca

08008484 <__sflush_r>:
 8008484:	898a      	ldrh	r2, [r1, #12]
 8008486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800848a:	4605      	mov	r5, r0
 800848c:	0710      	lsls	r0, r2, #28
 800848e:	460c      	mov	r4, r1
 8008490:	d458      	bmi.n	8008544 <__sflush_r+0xc0>
 8008492:	684b      	ldr	r3, [r1, #4]
 8008494:	2b00      	cmp	r3, #0
 8008496:	dc05      	bgt.n	80084a4 <__sflush_r+0x20>
 8008498:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800849a:	2b00      	cmp	r3, #0
 800849c:	dc02      	bgt.n	80084a4 <__sflush_r+0x20>
 800849e:	2000      	movs	r0, #0
 80084a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084a6:	2e00      	cmp	r6, #0
 80084a8:	d0f9      	beq.n	800849e <__sflush_r+0x1a>
 80084aa:	2300      	movs	r3, #0
 80084ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80084b0:	682f      	ldr	r7, [r5, #0]
 80084b2:	6a21      	ldr	r1, [r4, #32]
 80084b4:	602b      	str	r3, [r5, #0]
 80084b6:	d032      	beq.n	800851e <__sflush_r+0x9a>
 80084b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80084ba:	89a3      	ldrh	r3, [r4, #12]
 80084bc:	075a      	lsls	r2, r3, #29
 80084be:	d505      	bpl.n	80084cc <__sflush_r+0x48>
 80084c0:	6863      	ldr	r3, [r4, #4]
 80084c2:	1ac0      	subs	r0, r0, r3
 80084c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80084c6:	b10b      	cbz	r3, 80084cc <__sflush_r+0x48>
 80084c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80084ca:	1ac0      	subs	r0, r0, r3
 80084cc:	2300      	movs	r3, #0
 80084ce:	4602      	mov	r2, r0
 80084d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084d2:	6a21      	ldr	r1, [r4, #32]
 80084d4:	4628      	mov	r0, r5
 80084d6:	47b0      	blx	r6
 80084d8:	1c43      	adds	r3, r0, #1
 80084da:	89a3      	ldrh	r3, [r4, #12]
 80084dc:	d106      	bne.n	80084ec <__sflush_r+0x68>
 80084de:	6829      	ldr	r1, [r5, #0]
 80084e0:	291d      	cmp	r1, #29
 80084e2:	d82b      	bhi.n	800853c <__sflush_r+0xb8>
 80084e4:	4a29      	ldr	r2, [pc, #164]	; (800858c <__sflush_r+0x108>)
 80084e6:	410a      	asrs	r2, r1
 80084e8:	07d6      	lsls	r6, r2, #31
 80084ea:	d427      	bmi.n	800853c <__sflush_r+0xb8>
 80084ec:	2200      	movs	r2, #0
 80084ee:	6062      	str	r2, [r4, #4]
 80084f0:	04d9      	lsls	r1, r3, #19
 80084f2:	6922      	ldr	r2, [r4, #16]
 80084f4:	6022      	str	r2, [r4, #0]
 80084f6:	d504      	bpl.n	8008502 <__sflush_r+0x7e>
 80084f8:	1c42      	adds	r2, r0, #1
 80084fa:	d101      	bne.n	8008500 <__sflush_r+0x7c>
 80084fc:	682b      	ldr	r3, [r5, #0]
 80084fe:	b903      	cbnz	r3, 8008502 <__sflush_r+0x7e>
 8008500:	6560      	str	r0, [r4, #84]	; 0x54
 8008502:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008504:	602f      	str	r7, [r5, #0]
 8008506:	2900      	cmp	r1, #0
 8008508:	d0c9      	beq.n	800849e <__sflush_r+0x1a>
 800850a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800850e:	4299      	cmp	r1, r3
 8008510:	d002      	beq.n	8008518 <__sflush_r+0x94>
 8008512:	4628      	mov	r0, r5
 8008514:	f7ff f9e2 	bl	80078dc <_free_r>
 8008518:	2000      	movs	r0, #0
 800851a:	6360      	str	r0, [r4, #52]	; 0x34
 800851c:	e7c0      	b.n	80084a0 <__sflush_r+0x1c>
 800851e:	2301      	movs	r3, #1
 8008520:	4628      	mov	r0, r5
 8008522:	47b0      	blx	r6
 8008524:	1c41      	adds	r1, r0, #1
 8008526:	d1c8      	bne.n	80084ba <__sflush_r+0x36>
 8008528:	682b      	ldr	r3, [r5, #0]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d0c5      	beq.n	80084ba <__sflush_r+0x36>
 800852e:	2b1d      	cmp	r3, #29
 8008530:	d001      	beq.n	8008536 <__sflush_r+0xb2>
 8008532:	2b16      	cmp	r3, #22
 8008534:	d101      	bne.n	800853a <__sflush_r+0xb6>
 8008536:	602f      	str	r7, [r5, #0]
 8008538:	e7b1      	b.n	800849e <__sflush_r+0x1a>
 800853a:	89a3      	ldrh	r3, [r4, #12]
 800853c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008540:	81a3      	strh	r3, [r4, #12]
 8008542:	e7ad      	b.n	80084a0 <__sflush_r+0x1c>
 8008544:	690f      	ldr	r7, [r1, #16]
 8008546:	2f00      	cmp	r7, #0
 8008548:	d0a9      	beq.n	800849e <__sflush_r+0x1a>
 800854a:	0793      	lsls	r3, r2, #30
 800854c:	680e      	ldr	r6, [r1, #0]
 800854e:	bf08      	it	eq
 8008550:	694b      	ldreq	r3, [r1, #20]
 8008552:	600f      	str	r7, [r1, #0]
 8008554:	bf18      	it	ne
 8008556:	2300      	movne	r3, #0
 8008558:	eba6 0807 	sub.w	r8, r6, r7
 800855c:	608b      	str	r3, [r1, #8]
 800855e:	f1b8 0f00 	cmp.w	r8, #0
 8008562:	dd9c      	ble.n	800849e <__sflush_r+0x1a>
 8008564:	6a21      	ldr	r1, [r4, #32]
 8008566:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008568:	4643      	mov	r3, r8
 800856a:	463a      	mov	r2, r7
 800856c:	4628      	mov	r0, r5
 800856e:	47b0      	blx	r6
 8008570:	2800      	cmp	r0, #0
 8008572:	dc06      	bgt.n	8008582 <__sflush_r+0xfe>
 8008574:	89a3      	ldrh	r3, [r4, #12]
 8008576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800857a:	81a3      	strh	r3, [r4, #12]
 800857c:	f04f 30ff 	mov.w	r0, #4294967295
 8008580:	e78e      	b.n	80084a0 <__sflush_r+0x1c>
 8008582:	4407      	add	r7, r0
 8008584:	eba8 0800 	sub.w	r8, r8, r0
 8008588:	e7e9      	b.n	800855e <__sflush_r+0xda>
 800858a:	bf00      	nop
 800858c:	dfbffffe 	.word	0xdfbffffe

08008590 <_fflush_r>:
 8008590:	b538      	push	{r3, r4, r5, lr}
 8008592:	690b      	ldr	r3, [r1, #16]
 8008594:	4605      	mov	r5, r0
 8008596:	460c      	mov	r4, r1
 8008598:	b913      	cbnz	r3, 80085a0 <_fflush_r+0x10>
 800859a:	2500      	movs	r5, #0
 800859c:	4628      	mov	r0, r5
 800859e:	bd38      	pop	{r3, r4, r5, pc}
 80085a0:	b118      	cbz	r0, 80085aa <_fflush_r+0x1a>
 80085a2:	6a03      	ldr	r3, [r0, #32]
 80085a4:	b90b      	cbnz	r3, 80085aa <_fflush_r+0x1a>
 80085a6:	f7fe f9cf 	bl	8006948 <__sinit>
 80085aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d0f3      	beq.n	800859a <_fflush_r+0xa>
 80085b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80085b4:	07d0      	lsls	r0, r2, #31
 80085b6:	d404      	bmi.n	80085c2 <_fflush_r+0x32>
 80085b8:	0599      	lsls	r1, r3, #22
 80085ba:	d402      	bmi.n	80085c2 <_fflush_r+0x32>
 80085bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085be:	f7fe fb0e 	bl	8006bde <__retarget_lock_acquire_recursive>
 80085c2:	4628      	mov	r0, r5
 80085c4:	4621      	mov	r1, r4
 80085c6:	f7ff ff5d 	bl	8008484 <__sflush_r>
 80085ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085cc:	07da      	lsls	r2, r3, #31
 80085ce:	4605      	mov	r5, r0
 80085d0:	d4e4      	bmi.n	800859c <_fflush_r+0xc>
 80085d2:	89a3      	ldrh	r3, [r4, #12]
 80085d4:	059b      	lsls	r3, r3, #22
 80085d6:	d4e1      	bmi.n	800859c <_fflush_r+0xc>
 80085d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085da:	f7fe fb01 	bl	8006be0 <__retarget_lock_release_recursive>
 80085de:	e7dd      	b.n	800859c <_fflush_r+0xc>

080085e0 <memmove>:
 80085e0:	4288      	cmp	r0, r1
 80085e2:	b510      	push	{r4, lr}
 80085e4:	eb01 0402 	add.w	r4, r1, r2
 80085e8:	d902      	bls.n	80085f0 <memmove+0x10>
 80085ea:	4284      	cmp	r4, r0
 80085ec:	4623      	mov	r3, r4
 80085ee:	d807      	bhi.n	8008600 <memmove+0x20>
 80085f0:	1e43      	subs	r3, r0, #1
 80085f2:	42a1      	cmp	r1, r4
 80085f4:	d008      	beq.n	8008608 <memmove+0x28>
 80085f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80085fe:	e7f8      	b.n	80085f2 <memmove+0x12>
 8008600:	4402      	add	r2, r0
 8008602:	4601      	mov	r1, r0
 8008604:	428a      	cmp	r2, r1
 8008606:	d100      	bne.n	800860a <memmove+0x2a>
 8008608:	bd10      	pop	{r4, pc}
 800860a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800860e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008612:	e7f7      	b.n	8008604 <memmove+0x24>

08008614 <_sbrk_r>:
 8008614:	b538      	push	{r3, r4, r5, lr}
 8008616:	4d06      	ldr	r5, [pc, #24]	; (8008630 <_sbrk_r+0x1c>)
 8008618:	2300      	movs	r3, #0
 800861a:	4604      	mov	r4, r0
 800861c:	4608      	mov	r0, r1
 800861e:	602b      	str	r3, [r5, #0]
 8008620:	f7f9 fea4 	bl	800236c <_sbrk>
 8008624:	1c43      	adds	r3, r0, #1
 8008626:	d102      	bne.n	800862e <_sbrk_r+0x1a>
 8008628:	682b      	ldr	r3, [r5, #0]
 800862a:	b103      	cbz	r3, 800862e <_sbrk_r+0x1a>
 800862c:	6023      	str	r3, [r4, #0]
 800862e:	bd38      	pop	{r3, r4, r5, pc}
 8008630:	20000568 	.word	0x20000568

08008634 <memcpy>:
 8008634:	440a      	add	r2, r1
 8008636:	4291      	cmp	r1, r2
 8008638:	f100 33ff 	add.w	r3, r0, #4294967295
 800863c:	d100      	bne.n	8008640 <memcpy+0xc>
 800863e:	4770      	bx	lr
 8008640:	b510      	push	{r4, lr}
 8008642:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008646:	f803 4f01 	strb.w	r4, [r3, #1]!
 800864a:	4291      	cmp	r1, r2
 800864c:	d1f9      	bne.n	8008642 <memcpy+0xe>
 800864e:	bd10      	pop	{r4, pc}

08008650 <__assert_func>:
 8008650:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008652:	4614      	mov	r4, r2
 8008654:	461a      	mov	r2, r3
 8008656:	4b09      	ldr	r3, [pc, #36]	; (800867c <__assert_func+0x2c>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4605      	mov	r5, r0
 800865c:	68d8      	ldr	r0, [r3, #12]
 800865e:	b14c      	cbz	r4, 8008674 <__assert_func+0x24>
 8008660:	4b07      	ldr	r3, [pc, #28]	; (8008680 <__assert_func+0x30>)
 8008662:	9100      	str	r1, [sp, #0]
 8008664:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008668:	4906      	ldr	r1, [pc, #24]	; (8008684 <__assert_func+0x34>)
 800866a:	462b      	mov	r3, r5
 800866c:	f000 f872 	bl	8008754 <fiprintf>
 8008670:	f000 f882 	bl	8008778 <abort>
 8008674:	4b04      	ldr	r3, [pc, #16]	; (8008688 <__assert_func+0x38>)
 8008676:	461c      	mov	r4, r3
 8008678:	e7f3      	b.n	8008662 <__assert_func+0x12>
 800867a:	bf00      	nop
 800867c:	20000080 	.word	0x20000080
 8008680:	080090df 	.word	0x080090df
 8008684:	080090ec 	.word	0x080090ec
 8008688:	0800911a 	.word	0x0800911a

0800868c <_calloc_r>:
 800868c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800868e:	fba1 2402 	umull	r2, r4, r1, r2
 8008692:	b94c      	cbnz	r4, 80086a8 <_calloc_r+0x1c>
 8008694:	4611      	mov	r1, r2
 8008696:	9201      	str	r2, [sp, #4]
 8008698:	f7ff f994 	bl	80079c4 <_malloc_r>
 800869c:	9a01      	ldr	r2, [sp, #4]
 800869e:	4605      	mov	r5, r0
 80086a0:	b930      	cbnz	r0, 80086b0 <_calloc_r+0x24>
 80086a2:	4628      	mov	r0, r5
 80086a4:	b003      	add	sp, #12
 80086a6:	bd30      	pop	{r4, r5, pc}
 80086a8:	220c      	movs	r2, #12
 80086aa:	6002      	str	r2, [r0, #0]
 80086ac:	2500      	movs	r5, #0
 80086ae:	e7f8      	b.n	80086a2 <_calloc_r+0x16>
 80086b0:	4621      	mov	r1, r4
 80086b2:	f7fe fa16 	bl	8006ae2 <memset>
 80086b6:	e7f4      	b.n	80086a2 <_calloc_r+0x16>

080086b8 <__ascii_mbtowc>:
 80086b8:	b082      	sub	sp, #8
 80086ba:	b901      	cbnz	r1, 80086be <__ascii_mbtowc+0x6>
 80086bc:	a901      	add	r1, sp, #4
 80086be:	b142      	cbz	r2, 80086d2 <__ascii_mbtowc+0x1a>
 80086c0:	b14b      	cbz	r3, 80086d6 <__ascii_mbtowc+0x1e>
 80086c2:	7813      	ldrb	r3, [r2, #0]
 80086c4:	600b      	str	r3, [r1, #0]
 80086c6:	7812      	ldrb	r2, [r2, #0]
 80086c8:	1e10      	subs	r0, r2, #0
 80086ca:	bf18      	it	ne
 80086cc:	2001      	movne	r0, #1
 80086ce:	b002      	add	sp, #8
 80086d0:	4770      	bx	lr
 80086d2:	4610      	mov	r0, r2
 80086d4:	e7fb      	b.n	80086ce <__ascii_mbtowc+0x16>
 80086d6:	f06f 0001 	mvn.w	r0, #1
 80086da:	e7f8      	b.n	80086ce <__ascii_mbtowc+0x16>

080086dc <_realloc_r>:
 80086dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086e0:	4680      	mov	r8, r0
 80086e2:	4614      	mov	r4, r2
 80086e4:	460e      	mov	r6, r1
 80086e6:	b921      	cbnz	r1, 80086f2 <_realloc_r+0x16>
 80086e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086ec:	4611      	mov	r1, r2
 80086ee:	f7ff b969 	b.w	80079c4 <_malloc_r>
 80086f2:	b92a      	cbnz	r2, 8008700 <_realloc_r+0x24>
 80086f4:	f7ff f8f2 	bl	80078dc <_free_r>
 80086f8:	4625      	mov	r5, r4
 80086fa:	4628      	mov	r0, r5
 80086fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008700:	f000 f841 	bl	8008786 <_malloc_usable_size_r>
 8008704:	4284      	cmp	r4, r0
 8008706:	4607      	mov	r7, r0
 8008708:	d802      	bhi.n	8008710 <_realloc_r+0x34>
 800870a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800870e:	d812      	bhi.n	8008736 <_realloc_r+0x5a>
 8008710:	4621      	mov	r1, r4
 8008712:	4640      	mov	r0, r8
 8008714:	f7ff f956 	bl	80079c4 <_malloc_r>
 8008718:	4605      	mov	r5, r0
 800871a:	2800      	cmp	r0, #0
 800871c:	d0ed      	beq.n	80086fa <_realloc_r+0x1e>
 800871e:	42bc      	cmp	r4, r7
 8008720:	4622      	mov	r2, r4
 8008722:	4631      	mov	r1, r6
 8008724:	bf28      	it	cs
 8008726:	463a      	movcs	r2, r7
 8008728:	f7ff ff84 	bl	8008634 <memcpy>
 800872c:	4631      	mov	r1, r6
 800872e:	4640      	mov	r0, r8
 8008730:	f7ff f8d4 	bl	80078dc <_free_r>
 8008734:	e7e1      	b.n	80086fa <_realloc_r+0x1e>
 8008736:	4635      	mov	r5, r6
 8008738:	e7df      	b.n	80086fa <_realloc_r+0x1e>

0800873a <__ascii_wctomb>:
 800873a:	b149      	cbz	r1, 8008750 <__ascii_wctomb+0x16>
 800873c:	2aff      	cmp	r2, #255	; 0xff
 800873e:	bf85      	ittet	hi
 8008740:	238a      	movhi	r3, #138	; 0x8a
 8008742:	6003      	strhi	r3, [r0, #0]
 8008744:	700a      	strbls	r2, [r1, #0]
 8008746:	f04f 30ff 	movhi.w	r0, #4294967295
 800874a:	bf98      	it	ls
 800874c:	2001      	movls	r0, #1
 800874e:	4770      	bx	lr
 8008750:	4608      	mov	r0, r1
 8008752:	4770      	bx	lr

08008754 <fiprintf>:
 8008754:	b40e      	push	{r1, r2, r3}
 8008756:	b503      	push	{r0, r1, lr}
 8008758:	4601      	mov	r1, r0
 800875a:	ab03      	add	r3, sp, #12
 800875c:	4805      	ldr	r0, [pc, #20]	; (8008774 <fiprintf+0x20>)
 800875e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008762:	6800      	ldr	r0, [r0, #0]
 8008764:	9301      	str	r3, [sp, #4]
 8008766:	f000 f83f 	bl	80087e8 <_vfiprintf_r>
 800876a:	b002      	add	sp, #8
 800876c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008770:	b003      	add	sp, #12
 8008772:	4770      	bx	lr
 8008774:	20000080 	.word	0x20000080

08008778 <abort>:
 8008778:	b508      	push	{r3, lr}
 800877a:	2006      	movs	r0, #6
 800877c:	f000 fa0c 	bl	8008b98 <raise>
 8008780:	2001      	movs	r0, #1
 8008782:	f7f9 fd7b 	bl	800227c <_exit>

08008786 <_malloc_usable_size_r>:
 8008786:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800878a:	1f18      	subs	r0, r3, #4
 800878c:	2b00      	cmp	r3, #0
 800878e:	bfbc      	itt	lt
 8008790:	580b      	ldrlt	r3, [r1, r0]
 8008792:	18c0      	addlt	r0, r0, r3
 8008794:	4770      	bx	lr

08008796 <__sfputc_r>:
 8008796:	6893      	ldr	r3, [r2, #8]
 8008798:	3b01      	subs	r3, #1
 800879a:	2b00      	cmp	r3, #0
 800879c:	b410      	push	{r4}
 800879e:	6093      	str	r3, [r2, #8]
 80087a0:	da08      	bge.n	80087b4 <__sfputc_r+0x1e>
 80087a2:	6994      	ldr	r4, [r2, #24]
 80087a4:	42a3      	cmp	r3, r4
 80087a6:	db01      	blt.n	80087ac <__sfputc_r+0x16>
 80087a8:	290a      	cmp	r1, #10
 80087aa:	d103      	bne.n	80087b4 <__sfputc_r+0x1e>
 80087ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087b0:	f000 b934 	b.w	8008a1c <__swbuf_r>
 80087b4:	6813      	ldr	r3, [r2, #0]
 80087b6:	1c58      	adds	r0, r3, #1
 80087b8:	6010      	str	r0, [r2, #0]
 80087ba:	7019      	strb	r1, [r3, #0]
 80087bc:	4608      	mov	r0, r1
 80087be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <__sfputs_r>:
 80087c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087c6:	4606      	mov	r6, r0
 80087c8:	460f      	mov	r7, r1
 80087ca:	4614      	mov	r4, r2
 80087cc:	18d5      	adds	r5, r2, r3
 80087ce:	42ac      	cmp	r4, r5
 80087d0:	d101      	bne.n	80087d6 <__sfputs_r+0x12>
 80087d2:	2000      	movs	r0, #0
 80087d4:	e007      	b.n	80087e6 <__sfputs_r+0x22>
 80087d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087da:	463a      	mov	r2, r7
 80087dc:	4630      	mov	r0, r6
 80087de:	f7ff ffda 	bl	8008796 <__sfputc_r>
 80087e2:	1c43      	adds	r3, r0, #1
 80087e4:	d1f3      	bne.n	80087ce <__sfputs_r+0xa>
 80087e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080087e8 <_vfiprintf_r>:
 80087e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ec:	460d      	mov	r5, r1
 80087ee:	b09d      	sub	sp, #116	; 0x74
 80087f0:	4614      	mov	r4, r2
 80087f2:	4698      	mov	r8, r3
 80087f4:	4606      	mov	r6, r0
 80087f6:	b118      	cbz	r0, 8008800 <_vfiprintf_r+0x18>
 80087f8:	6a03      	ldr	r3, [r0, #32]
 80087fa:	b90b      	cbnz	r3, 8008800 <_vfiprintf_r+0x18>
 80087fc:	f7fe f8a4 	bl	8006948 <__sinit>
 8008800:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008802:	07d9      	lsls	r1, r3, #31
 8008804:	d405      	bmi.n	8008812 <_vfiprintf_r+0x2a>
 8008806:	89ab      	ldrh	r3, [r5, #12]
 8008808:	059a      	lsls	r2, r3, #22
 800880a:	d402      	bmi.n	8008812 <_vfiprintf_r+0x2a>
 800880c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800880e:	f7fe f9e6 	bl	8006bde <__retarget_lock_acquire_recursive>
 8008812:	89ab      	ldrh	r3, [r5, #12]
 8008814:	071b      	lsls	r3, r3, #28
 8008816:	d501      	bpl.n	800881c <_vfiprintf_r+0x34>
 8008818:	692b      	ldr	r3, [r5, #16]
 800881a:	b99b      	cbnz	r3, 8008844 <_vfiprintf_r+0x5c>
 800881c:	4629      	mov	r1, r5
 800881e:	4630      	mov	r0, r6
 8008820:	f000 f93a 	bl	8008a98 <__swsetup_r>
 8008824:	b170      	cbz	r0, 8008844 <_vfiprintf_r+0x5c>
 8008826:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008828:	07dc      	lsls	r4, r3, #31
 800882a:	d504      	bpl.n	8008836 <_vfiprintf_r+0x4e>
 800882c:	f04f 30ff 	mov.w	r0, #4294967295
 8008830:	b01d      	add	sp, #116	; 0x74
 8008832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008836:	89ab      	ldrh	r3, [r5, #12]
 8008838:	0598      	lsls	r0, r3, #22
 800883a:	d4f7      	bmi.n	800882c <_vfiprintf_r+0x44>
 800883c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800883e:	f7fe f9cf 	bl	8006be0 <__retarget_lock_release_recursive>
 8008842:	e7f3      	b.n	800882c <_vfiprintf_r+0x44>
 8008844:	2300      	movs	r3, #0
 8008846:	9309      	str	r3, [sp, #36]	; 0x24
 8008848:	2320      	movs	r3, #32
 800884a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800884e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008852:	2330      	movs	r3, #48	; 0x30
 8008854:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008a08 <_vfiprintf_r+0x220>
 8008858:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800885c:	f04f 0901 	mov.w	r9, #1
 8008860:	4623      	mov	r3, r4
 8008862:	469a      	mov	sl, r3
 8008864:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008868:	b10a      	cbz	r2, 800886e <_vfiprintf_r+0x86>
 800886a:	2a25      	cmp	r2, #37	; 0x25
 800886c:	d1f9      	bne.n	8008862 <_vfiprintf_r+0x7a>
 800886e:	ebba 0b04 	subs.w	fp, sl, r4
 8008872:	d00b      	beq.n	800888c <_vfiprintf_r+0xa4>
 8008874:	465b      	mov	r3, fp
 8008876:	4622      	mov	r2, r4
 8008878:	4629      	mov	r1, r5
 800887a:	4630      	mov	r0, r6
 800887c:	f7ff ffa2 	bl	80087c4 <__sfputs_r>
 8008880:	3001      	adds	r0, #1
 8008882:	f000 80a9 	beq.w	80089d8 <_vfiprintf_r+0x1f0>
 8008886:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008888:	445a      	add	r2, fp
 800888a:	9209      	str	r2, [sp, #36]	; 0x24
 800888c:	f89a 3000 	ldrb.w	r3, [sl]
 8008890:	2b00      	cmp	r3, #0
 8008892:	f000 80a1 	beq.w	80089d8 <_vfiprintf_r+0x1f0>
 8008896:	2300      	movs	r3, #0
 8008898:	f04f 32ff 	mov.w	r2, #4294967295
 800889c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088a0:	f10a 0a01 	add.w	sl, sl, #1
 80088a4:	9304      	str	r3, [sp, #16]
 80088a6:	9307      	str	r3, [sp, #28]
 80088a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088ac:	931a      	str	r3, [sp, #104]	; 0x68
 80088ae:	4654      	mov	r4, sl
 80088b0:	2205      	movs	r2, #5
 80088b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088b6:	4854      	ldr	r0, [pc, #336]	; (8008a08 <_vfiprintf_r+0x220>)
 80088b8:	f7f7 fcaa 	bl	8000210 <memchr>
 80088bc:	9a04      	ldr	r2, [sp, #16]
 80088be:	b9d8      	cbnz	r0, 80088f8 <_vfiprintf_r+0x110>
 80088c0:	06d1      	lsls	r1, r2, #27
 80088c2:	bf44      	itt	mi
 80088c4:	2320      	movmi	r3, #32
 80088c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088ca:	0713      	lsls	r3, r2, #28
 80088cc:	bf44      	itt	mi
 80088ce:	232b      	movmi	r3, #43	; 0x2b
 80088d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088d4:	f89a 3000 	ldrb.w	r3, [sl]
 80088d8:	2b2a      	cmp	r3, #42	; 0x2a
 80088da:	d015      	beq.n	8008908 <_vfiprintf_r+0x120>
 80088dc:	9a07      	ldr	r2, [sp, #28]
 80088de:	4654      	mov	r4, sl
 80088e0:	2000      	movs	r0, #0
 80088e2:	f04f 0c0a 	mov.w	ip, #10
 80088e6:	4621      	mov	r1, r4
 80088e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088ec:	3b30      	subs	r3, #48	; 0x30
 80088ee:	2b09      	cmp	r3, #9
 80088f0:	d94d      	bls.n	800898e <_vfiprintf_r+0x1a6>
 80088f2:	b1b0      	cbz	r0, 8008922 <_vfiprintf_r+0x13a>
 80088f4:	9207      	str	r2, [sp, #28]
 80088f6:	e014      	b.n	8008922 <_vfiprintf_r+0x13a>
 80088f8:	eba0 0308 	sub.w	r3, r0, r8
 80088fc:	fa09 f303 	lsl.w	r3, r9, r3
 8008900:	4313      	orrs	r3, r2
 8008902:	9304      	str	r3, [sp, #16]
 8008904:	46a2      	mov	sl, r4
 8008906:	e7d2      	b.n	80088ae <_vfiprintf_r+0xc6>
 8008908:	9b03      	ldr	r3, [sp, #12]
 800890a:	1d19      	adds	r1, r3, #4
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	9103      	str	r1, [sp, #12]
 8008910:	2b00      	cmp	r3, #0
 8008912:	bfbb      	ittet	lt
 8008914:	425b      	neglt	r3, r3
 8008916:	f042 0202 	orrlt.w	r2, r2, #2
 800891a:	9307      	strge	r3, [sp, #28]
 800891c:	9307      	strlt	r3, [sp, #28]
 800891e:	bfb8      	it	lt
 8008920:	9204      	strlt	r2, [sp, #16]
 8008922:	7823      	ldrb	r3, [r4, #0]
 8008924:	2b2e      	cmp	r3, #46	; 0x2e
 8008926:	d10c      	bne.n	8008942 <_vfiprintf_r+0x15a>
 8008928:	7863      	ldrb	r3, [r4, #1]
 800892a:	2b2a      	cmp	r3, #42	; 0x2a
 800892c:	d134      	bne.n	8008998 <_vfiprintf_r+0x1b0>
 800892e:	9b03      	ldr	r3, [sp, #12]
 8008930:	1d1a      	adds	r2, r3, #4
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	9203      	str	r2, [sp, #12]
 8008936:	2b00      	cmp	r3, #0
 8008938:	bfb8      	it	lt
 800893a:	f04f 33ff 	movlt.w	r3, #4294967295
 800893e:	3402      	adds	r4, #2
 8008940:	9305      	str	r3, [sp, #20]
 8008942:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008a18 <_vfiprintf_r+0x230>
 8008946:	7821      	ldrb	r1, [r4, #0]
 8008948:	2203      	movs	r2, #3
 800894a:	4650      	mov	r0, sl
 800894c:	f7f7 fc60 	bl	8000210 <memchr>
 8008950:	b138      	cbz	r0, 8008962 <_vfiprintf_r+0x17a>
 8008952:	9b04      	ldr	r3, [sp, #16]
 8008954:	eba0 000a 	sub.w	r0, r0, sl
 8008958:	2240      	movs	r2, #64	; 0x40
 800895a:	4082      	lsls	r2, r0
 800895c:	4313      	orrs	r3, r2
 800895e:	3401      	adds	r4, #1
 8008960:	9304      	str	r3, [sp, #16]
 8008962:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008966:	4829      	ldr	r0, [pc, #164]	; (8008a0c <_vfiprintf_r+0x224>)
 8008968:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800896c:	2206      	movs	r2, #6
 800896e:	f7f7 fc4f 	bl	8000210 <memchr>
 8008972:	2800      	cmp	r0, #0
 8008974:	d03f      	beq.n	80089f6 <_vfiprintf_r+0x20e>
 8008976:	4b26      	ldr	r3, [pc, #152]	; (8008a10 <_vfiprintf_r+0x228>)
 8008978:	bb1b      	cbnz	r3, 80089c2 <_vfiprintf_r+0x1da>
 800897a:	9b03      	ldr	r3, [sp, #12]
 800897c:	3307      	adds	r3, #7
 800897e:	f023 0307 	bic.w	r3, r3, #7
 8008982:	3308      	adds	r3, #8
 8008984:	9303      	str	r3, [sp, #12]
 8008986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008988:	443b      	add	r3, r7
 800898a:	9309      	str	r3, [sp, #36]	; 0x24
 800898c:	e768      	b.n	8008860 <_vfiprintf_r+0x78>
 800898e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008992:	460c      	mov	r4, r1
 8008994:	2001      	movs	r0, #1
 8008996:	e7a6      	b.n	80088e6 <_vfiprintf_r+0xfe>
 8008998:	2300      	movs	r3, #0
 800899a:	3401      	adds	r4, #1
 800899c:	9305      	str	r3, [sp, #20]
 800899e:	4619      	mov	r1, r3
 80089a0:	f04f 0c0a 	mov.w	ip, #10
 80089a4:	4620      	mov	r0, r4
 80089a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089aa:	3a30      	subs	r2, #48	; 0x30
 80089ac:	2a09      	cmp	r2, #9
 80089ae:	d903      	bls.n	80089b8 <_vfiprintf_r+0x1d0>
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d0c6      	beq.n	8008942 <_vfiprintf_r+0x15a>
 80089b4:	9105      	str	r1, [sp, #20]
 80089b6:	e7c4      	b.n	8008942 <_vfiprintf_r+0x15a>
 80089b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80089bc:	4604      	mov	r4, r0
 80089be:	2301      	movs	r3, #1
 80089c0:	e7f0      	b.n	80089a4 <_vfiprintf_r+0x1bc>
 80089c2:	ab03      	add	r3, sp, #12
 80089c4:	9300      	str	r3, [sp, #0]
 80089c6:	462a      	mov	r2, r5
 80089c8:	4b12      	ldr	r3, [pc, #72]	; (8008a14 <_vfiprintf_r+0x22c>)
 80089ca:	a904      	add	r1, sp, #16
 80089cc:	4630      	mov	r0, r6
 80089ce:	f7fd fb69 	bl	80060a4 <_printf_float>
 80089d2:	4607      	mov	r7, r0
 80089d4:	1c78      	adds	r0, r7, #1
 80089d6:	d1d6      	bne.n	8008986 <_vfiprintf_r+0x19e>
 80089d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089da:	07d9      	lsls	r1, r3, #31
 80089dc:	d405      	bmi.n	80089ea <_vfiprintf_r+0x202>
 80089de:	89ab      	ldrh	r3, [r5, #12]
 80089e0:	059a      	lsls	r2, r3, #22
 80089e2:	d402      	bmi.n	80089ea <_vfiprintf_r+0x202>
 80089e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089e6:	f7fe f8fb 	bl	8006be0 <__retarget_lock_release_recursive>
 80089ea:	89ab      	ldrh	r3, [r5, #12]
 80089ec:	065b      	lsls	r3, r3, #25
 80089ee:	f53f af1d 	bmi.w	800882c <_vfiprintf_r+0x44>
 80089f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089f4:	e71c      	b.n	8008830 <_vfiprintf_r+0x48>
 80089f6:	ab03      	add	r3, sp, #12
 80089f8:	9300      	str	r3, [sp, #0]
 80089fa:	462a      	mov	r2, r5
 80089fc:	4b05      	ldr	r3, [pc, #20]	; (8008a14 <_vfiprintf_r+0x22c>)
 80089fe:	a904      	add	r1, sp, #16
 8008a00:	4630      	mov	r0, r6
 8008a02:	f7fd fdf3 	bl	80065ec <_printf_i>
 8008a06:	e7e4      	b.n	80089d2 <_vfiprintf_r+0x1ea>
 8008a08:	080090c4 	.word	0x080090c4
 8008a0c:	080090ce 	.word	0x080090ce
 8008a10:	080060a5 	.word	0x080060a5
 8008a14:	080087c5 	.word	0x080087c5
 8008a18:	080090ca 	.word	0x080090ca

08008a1c <__swbuf_r>:
 8008a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a1e:	460e      	mov	r6, r1
 8008a20:	4614      	mov	r4, r2
 8008a22:	4605      	mov	r5, r0
 8008a24:	b118      	cbz	r0, 8008a2e <__swbuf_r+0x12>
 8008a26:	6a03      	ldr	r3, [r0, #32]
 8008a28:	b90b      	cbnz	r3, 8008a2e <__swbuf_r+0x12>
 8008a2a:	f7fd ff8d 	bl	8006948 <__sinit>
 8008a2e:	69a3      	ldr	r3, [r4, #24]
 8008a30:	60a3      	str	r3, [r4, #8]
 8008a32:	89a3      	ldrh	r3, [r4, #12]
 8008a34:	071a      	lsls	r2, r3, #28
 8008a36:	d525      	bpl.n	8008a84 <__swbuf_r+0x68>
 8008a38:	6923      	ldr	r3, [r4, #16]
 8008a3a:	b31b      	cbz	r3, 8008a84 <__swbuf_r+0x68>
 8008a3c:	6823      	ldr	r3, [r4, #0]
 8008a3e:	6922      	ldr	r2, [r4, #16]
 8008a40:	1a98      	subs	r0, r3, r2
 8008a42:	6963      	ldr	r3, [r4, #20]
 8008a44:	b2f6      	uxtb	r6, r6
 8008a46:	4283      	cmp	r3, r0
 8008a48:	4637      	mov	r7, r6
 8008a4a:	dc04      	bgt.n	8008a56 <__swbuf_r+0x3a>
 8008a4c:	4621      	mov	r1, r4
 8008a4e:	4628      	mov	r0, r5
 8008a50:	f7ff fd9e 	bl	8008590 <_fflush_r>
 8008a54:	b9e0      	cbnz	r0, 8008a90 <__swbuf_r+0x74>
 8008a56:	68a3      	ldr	r3, [r4, #8]
 8008a58:	3b01      	subs	r3, #1
 8008a5a:	60a3      	str	r3, [r4, #8]
 8008a5c:	6823      	ldr	r3, [r4, #0]
 8008a5e:	1c5a      	adds	r2, r3, #1
 8008a60:	6022      	str	r2, [r4, #0]
 8008a62:	701e      	strb	r6, [r3, #0]
 8008a64:	6962      	ldr	r2, [r4, #20]
 8008a66:	1c43      	adds	r3, r0, #1
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d004      	beq.n	8008a76 <__swbuf_r+0x5a>
 8008a6c:	89a3      	ldrh	r3, [r4, #12]
 8008a6e:	07db      	lsls	r3, r3, #31
 8008a70:	d506      	bpl.n	8008a80 <__swbuf_r+0x64>
 8008a72:	2e0a      	cmp	r6, #10
 8008a74:	d104      	bne.n	8008a80 <__swbuf_r+0x64>
 8008a76:	4621      	mov	r1, r4
 8008a78:	4628      	mov	r0, r5
 8008a7a:	f7ff fd89 	bl	8008590 <_fflush_r>
 8008a7e:	b938      	cbnz	r0, 8008a90 <__swbuf_r+0x74>
 8008a80:	4638      	mov	r0, r7
 8008a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a84:	4621      	mov	r1, r4
 8008a86:	4628      	mov	r0, r5
 8008a88:	f000 f806 	bl	8008a98 <__swsetup_r>
 8008a8c:	2800      	cmp	r0, #0
 8008a8e:	d0d5      	beq.n	8008a3c <__swbuf_r+0x20>
 8008a90:	f04f 37ff 	mov.w	r7, #4294967295
 8008a94:	e7f4      	b.n	8008a80 <__swbuf_r+0x64>
	...

08008a98 <__swsetup_r>:
 8008a98:	b538      	push	{r3, r4, r5, lr}
 8008a9a:	4b2a      	ldr	r3, [pc, #168]	; (8008b44 <__swsetup_r+0xac>)
 8008a9c:	4605      	mov	r5, r0
 8008a9e:	6818      	ldr	r0, [r3, #0]
 8008aa0:	460c      	mov	r4, r1
 8008aa2:	b118      	cbz	r0, 8008aac <__swsetup_r+0x14>
 8008aa4:	6a03      	ldr	r3, [r0, #32]
 8008aa6:	b90b      	cbnz	r3, 8008aac <__swsetup_r+0x14>
 8008aa8:	f7fd ff4e 	bl	8006948 <__sinit>
 8008aac:	89a3      	ldrh	r3, [r4, #12]
 8008aae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ab2:	0718      	lsls	r0, r3, #28
 8008ab4:	d422      	bmi.n	8008afc <__swsetup_r+0x64>
 8008ab6:	06d9      	lsls	r1, r3, #27
 8008ab8:	d407      	bmi.n	8008aca <__swsetup_r+0x32>
 8008aba:	2309      	movs	r3, #9
 8008abc:	602b      	str	r3, [r5, #0]
 8008abe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ac2:	81a3      	strh	r3, [r4, #12]
 8008ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ac8:	e034      	b.n	8008b34 <__swsetup_r+0x9c>
 8008aca:	0758      	lsls	r0, r3, #29
 8008acc:	d512      	bpl.n	8008af4 <__swsetup_r+0x5c>
 8008ace:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ad0:	b141      	cbz	r1, 8008ae4 <__swsetup_r+0x4c>
 8008ad2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ad6:	4299      	cmp	r1, r3
 8008ad8:	d002      	beq.n	8008ae0 <__swsetup_r+0x48>
 8008ada:	4628      	mov	r0, r5
 8008adc:	f7fe fefe 	bl	80078dc <_free_r>
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	6363      	str	r3, [r4, #52]	; 0x34
 8008ae4:	89a3      	ldrh	r3, [r4, #12]
 8008ae6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008aea:	81a3      	strh	r3, [r4, #12]
 8008aec:	2300      	movs	r3, #0
 8008aee:	6063      	str	r3, [r4, #4]
 8008af0:	6923      	ldr	r3, [r4, #16]
 8008af2:	6023      	str	r3, [r4, #0]
 8008af4:	89a3      	ldrh	r3, [r4, #12]
 8008af6:	f043 0308 	orr.w	r3, r3, #8
 8008afa:	81a3      	strh	r3, [r4, #12]
 8008afc:	6923      	ldr	r3, [r4, #16]
 8008afe:	b94b      	cbnz	r3, 8008b14 <__swsetup_r+0x7c>
 8008b00:	89a3      	ldrh	r3, [r4, #12]
 8008b02:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b0a:	d003      	beq.n	8008b14 <__swsetup_r+0x7c>
 8008b0c:	4621      	mov	r1, r4
 8008b0e:	4628      	mov	r0, r5
 8008b10:	f000 f884 	bl	8008c1c <__smakebuf_r>
 8008b14:	89a0      	ldrh	r0, [r4, #12]
 8008b16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b1a:	f010 0301 	ands.w	r3, r0, #1
 8008b1e:	d00a      	beq.n	8008b36 <__swsetup_r+0x9e>
 8008b20:	2300      	movs	r3, #0
 8008b22:	60a3      	str	r3, [r4, #8]
 8008b24:	6963      	ldr	r3, [r4, #20]
 8008b26:	425b      	negs	r3, r3
 8008b28:	61a3      	str	r3, [r4, #24]
 8008b2a:	6923      	ldr	r3, [r4, #16]
 8008b2c:	b943      	cbnz	r3, 8008b40 <__swsetup_r+0xa8>
 8008b2e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b32:	d1c4      	bne.n	8008abe <__swsetup_r+0x26>
 8008b34:	bd38      	pop	{r3, r4, r5, pc}
 8008b36:	0781      	lsls	r1, r0, #30
 8008b38:	bf58      	it	pl
 8008b3a:	6963      	ldrpl	r3, [r4, #20]
 8008b3c:	60a3      	str	r3, [r4, #8]
 8008b3e:	e7f4      	b.n	8008b2a <__swsetup_r+0x92>
 8008b40:	2000      	movs	r0, #0
 8008b42:	e7f7      	b.n	8008b34 <__swsetup_r+0x9c>
 8008b44:	20000080 	.word	0x20000080

08008b48 <_raise_r>:
 8008b48:	291f      	cmp	r1, #31
 8008b4a:	b538      	push	{r3, r4, r5, lr}
 8008b4c:	4604      	mov	r4, r0
 8008b4e:	460d      	mov	r5, r1
 8008b50:	d904      	bls.n	8008b5c <_raise_r+0x14>
 8008b52:	2316      	movs	r3, #22
 8008b54:	6003      	str	r3, [r0, #0]
 8008b56:	f04f 30ff 	mov.w	r0, #4294967295
 8008b5a:	bd38      	pop	{r3, r4, r5, pc}
 8008b5c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008b5e:	b112      	cbz	r2, 8008b66 <_raise_r+0x1e>
 8008b60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b64:	b94b      	cbnz	r3, 8008b7a <_raise_r+0x32>
 8008b66:	4620      	mov	r0, r4
 8008b68:	f000 f830 	bl	8008bcc <_getpid_r>
 8008b6c:	462a      	mov	r2, r5
 8008b6e:	4601      	mov	r1, r0
 8008b70:	4620      	mov	r0, r4
 8008b72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b76:	f000 b817 	b.w	8008ba8 <_kill_r>
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d00a      	beq.n	8008b94 <_raise_r+0x4c>
 8008b7e:	1c59      	adds	r1, r3, #1
 8008b80:	d103      	bne.n	8008b8a <_raise_r+0x42>
 8008b82:	2316      	movs	r3, #22
 8008b84:	6003      	str	r3, [r0, #0]
 8008b86:	2001      	movs	r0, #1
 8008b88:	e7e7      	b.n	8008b5a <_raise_r+0x12>
 8008b8a:	2400      	movs	r4, #0
 8008b8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008b90:	4628      	mov	r0, r5
 8008b92:	4798      	blx	r3
 8008b94:	2000      	movs	r0, #0
 8008b96:	e7e0      	b.n	8008b5a <_raise_r+0x12>

08008b98 <raise>:
 8008b98:	4b02      	ldr	r3, [pc, #8]	; (8008ba4 <raise+0xc>)
 8008b9a:	4601      	mov	r1, r0
 8008b9c:	6818      	ldr	r0, [r3, #0]
 8008b9e:	f7ff bfd3 	b.w	8008b48 <_raise_r>
 8008ba2:	bf00      	nop
 8008ba4:	20000080 	.word	0x20000080

08008ba8 <_kill_r>:
 8008ba8:	b538      	push	{r3, r4, r5, lr}
 8008baa:	4d07      	ldr	r5, [pc, #28]	; (8008bc8 <_kill_r+0x20>)
 8008bac:	2300      	movs	r3, #0
 8008bae:	4604      	mov	r4, r0
 8008bb0:	4608      	mov	r0, r1
 8008bb2:	4611      	mov	r1, r2
 8008bb4:	602b      	str	r3, [r5, #0]
 8008bb6:	f7f9 fb51 	bl	800225c <_kill>
 8008bba:	1c43      	adds	r3, r0, #1
 8008bbc:	d102      	bne.n	8008bc4 <_kill_r+0x1c>
 8008bbe:	682b      	ldr	r3, [r5, #0]
 8008bc0:	b103      	cbz	r3, 8008bc4 <_kill_r+0x1c>
 8008bc2:	6023      	str	r3, [r4, #0]
 8008bc4:	bd38      	pop	{r3, r4, r5, pc}
 8008bc6:	bf00      	nop
 8008bc8:	20000568 	.word	0x20000568

08008bcc <_getpid_r>:
 8008bcc:	f7f9 bb3e 	b.w	800224c <_getpid>

08008bd0 <__swhatbuf_r>:
 8008bd0:	b570      	push	{r4, r5, r6, lr}
 8008bd2:	460c      	mov	r4, r1
 8008bd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bd8:	2900      	cmp	r1, #0
 8008bda:	b096      	sub	sp, #88	; 0x58
 8008bdc:	4615      	mov	r5, r2
 8008bde:	461e      	mov	r6, r3
 8008be0:	da0d      	bge.n	8008bfe <__swhatbuf_r+0x2e>
 8008be2:	89a3      	ldrh	r3, [r4, #12]
 8008be4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008be8:	f04f 0100 	mov.w	r1, #0
 8008bec:	bf0c      	ite	eq
 8008bee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008bf2:	2340      	movne	r3, #64	; 0x40
 8008bf4:	2000      	movs	r0, #0
 8008bf6:	6031      	str	r1, [r6, #0]
 8008bf8:	602b      	str	r3, [r5, #0]
 8008bfa:	b016      	add	sp, #88	; 0x58
 8008bfc:	bd70      	pop	{r4, r5, r6, pc}
 8008bfe:	466a      	mov	r2, sp
 8008c00:	f000 f848 	bl	8008c94 <_fstat_r>
 8008c04:	2800      	cmp	r0, #0
 8008c06:	dbec      	blt.n	8008be2 <__swhatbuf_r+0x12>
 8008c08:	9901      	ldr	r1, [sp, #4]
 8008c0a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008c0e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008c12:	4259      	negs	r1, r3
 8008c14:	4159      	adcs	r1, r3
 8008c16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c1a:	e7eb      	b.n	8008bf4 <__swhatbuf_r+0x24>

08008c1c <__smakebuf_r>:
 8008c1c:	898b      	ldrh	r3, [r1, #12]
 8008c1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c20:	079d      	lsls	r5, r3, #30
 8008c22:	4606      	mov	r6, r0
 8008c24:	460c      	mov	r4, r1
 8008c26:	d507      	bpl.n	8008c38 <__smakebuf_r+0x1c>
 8008c28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008c2c:	6023      	str	r3, [r4, #0]
 8008c2e:	6123      	str	r3, [r4, #16]
 8008c30:	2301      	movs	r3, #1
 8008c32:	6163      	str	r3, [r4, #20]
 8008c34:	b002      	add	sp, #8
 8008c36:	bd70      	pop	{r4, r5, r6, pc}
 8008c38:	ab01      	add	r3, sp, #4
 8008c3a:	466a      	mov	r2, sp
 8008c3c:	f7ff ffc8 	bl	8008bd0 <__swhatbuf_r>
 8008c40:	9900      	ldr	r1, [sp, #0]
 8008c42:	4605      	mov	r5, r0
 8008c44:	4630      	mov	r0, r6
 8008c46:	f7fe febd 	bl	80079c4 <_malloc_r>
 8008c4a:	b948      	cbnz	r0, 8008c60 <__smakebuf_r+0x44>
 8008c4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c50:	059a      	lsls	r2, r3, #22
 8008c52:	d4ef      	bmi.n	8008c34 <__smakebuf_r+0x18>
 8008c54:	f023 0303 	bic.w	r3, r3, #3
 8008c58:	f043 0302 	orr.w	r3, r3, #2
 8008c5c:	81a3      	strh	r3, [r4, #12]
 8008c5e:	e7e3      	b.n	8008c28 <__smakebuf_r+0xc>
 8008c60:	89a3      	ldrh	r3, [r4, #12]
 8008c62:	6020      	str	r0, [r4, #0]
 8008c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c68:	81a3      	strh	r3, [r4, #12]
 8008c6a:	9b00      	ldr	r3, [sp, #0]
 8008c6c:	6163      	str	r3, [r4, #20]
 8008c6e:	9b01      	ldr	r3, [sp, #4]
 8008c70:	6120      	str	r0, [r4, #16]
 8008c72:	b15b      	cbz	r3, 8008c8c <__smakebuf_r+0x70>
 8008c74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c78:	4630      	mov	r0, r6
 8008c7a:	f000 f81d 	bl	8008cb8 <_isatty_r>
 8008c7e:	b128      	cbz	r0, 8008c8c <__smakebuf_r+0x70>
 8008c80:	89a3      	ldrh	r3, [r4, #12]
 8008c82:	f023 0303 	bic.w	r3, r3, #3
 8008c86:	f043 0301 	orr.w	r3, r3, #1
 8008c8a:	81a3      	strh	r3, [r4, #12]
 8008c8c:	89a3      	ldrh	r3, [r4, #12]
 8008c8e:	431d      	orrs	r5, r3
 8008c90:	81a5      	strh	r5, [r4, #12]
 8008c92:	e7cf      	b.n	8008c34 <__smakebuf_r+0x18>

08008c94 <_fstat_r>:
 8008c94:	b538      	push	{r3, r4, r5, lr}
 8008c96:	4d07      	ldr	r5, [pc, #28]	; (8008cb4 <_fstat_r+0x20>)
 8008c98:	2300      	movs	r3, #0
 8008c9a:	4604      	mov	r4, r0
 8008c9c:	4608      	mov	r0, r1
 8008c9e:	4611      	mov	r1, r2
 8008ca0:	602b      	str	r3, [r5, #0]
 8008ca2:	f7f9 fb3a 	bl	800231a <_fstat>
 8008ca6:	1c43      	adds	r3, r0, #1
 8008ca8:	d102      	bne.n	8008cb0 <_fstat_r+0x1c>
 8008caa:	682b      	ldr	r3, [r5, #0]
 8008cac:	b103      	cbz	r3, 8008cb0 <_fstat_r+0x1c>
 8008cae:	6023      	str	r3, [r4, #0]
 8008cb0:	bd38      	pop	{r3, r4, r5, pc}
 8008cb2:	bf00      	nop
 8008cb4:	20000568 	.word	0x20000568

08008cb8 <_isatty_r>:
 8008cb8:	b538      	push	{r3, r4, r5, lr}
 8008cba:	4d06      	ldr	r5, [pc, #24]	; (8008cd4 <_isatty_r+0x1c>)
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	4604      	mov	r4, r0
 8008cc0:	4608      	mov	r0, r1
 8008cc2:	602b      	str	r3, [r5, #0]
 8008cc4:	f7f9 fb39 	bl	800233a <_isatty>
 8008cc8:	1c43      	adds	r3, r0, #1
 8008cca:	d102      	bne.n	8008cd2 <_isatty_r+0x1a>
 8008ccc:	682b      	ldr	r3, [r5, #0]
 8008cce:	b103      	cbz	r3, 8008cd2 <_isatty_r+0x1a>
 8008cd0:	6023      	str	r3, [r4, #0]
 8008cd2:	bd38      	pop	{r3, r4, r5, pc}
 8008cd4:	20000568 	.word	0x20000568

08008cd8 <_init>:
 8008cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cda:	bf00      	nop
 8008cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cde:	bc08      	pop	{r3}
 8008ce0:	469e      	mov	lr, r3
 8008ce2:	4770      	bx	lr

08008ce4 <_fini>:
 8008ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ce6:	bf00      	nop
 8008ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cea:	bc08      	pop	{r3}
 8008cec:	469e      	mov	lr, r3
 8008cee:	4770      	bx	lr
