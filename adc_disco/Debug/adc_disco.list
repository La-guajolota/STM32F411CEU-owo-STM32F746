
adc_disco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045f0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080047c0  080047c0  000147c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004814  08004814  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004814  08004814  00014814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800481c  0800481c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800481c  0800481c  0001481c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004820  08004820  00014820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  2000005c  08004880  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08004880  0002029c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b39e  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b27  00000000  00000000  0002b46d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000850  00000000  00000000  0002cf98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000660  00000000  00000000  0002d7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002618a  00000000  00000000  0002de48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c00a  00000000  00000000  00053fd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed125  00000000  00000000  0005ffdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002628  00000000  00000000  0014d104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0014f72c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080047a8 	.word	0x080047a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	080047a8 	.word	0x080047a8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f000 ff33 	bl	800141a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f80c 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f000 f8f4 	bl	80007a4 <MX_GPIO_Init>
  MX_ADC3_Init();
 80005bc:	f000 f870 	bl	80006a0 <MX_ADC3_Init>
  MX_USART1_UART_Init();
 80005c0:	f000 f8c0 	bl	8000744 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc3);
 80005c4:	4801      	ldr	r0, [pc, #4]	; (80005cc <main+0x20>)
 80005c6:	f000 ffc9 	bl	800155c <HAL_ADC_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ca:	e7fe      	b.n	80005ca <main+0x1e>
 80005cc:	20000078 	.word	0x20000078

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b094      	sub	sp, #80	; 0x50
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 0320 	add.w	r3, r7, #32
 80005da:	2230      	movs	r2, #48	; 0x30
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f003 fc5e 	bl	8003ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	f107 030c 	add.w	r3, r7, #12
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f4:	4b28      	ldr	r3, [pc, #160]	; (8000698 <SystemClock_Config+0xc8>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	4a27      	ldr	r2, [pc, #156]	; (8000698 <SystemClock_Config+0xc8>)
 80005fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000600:	4b25      	ldr	r3, [pc, #148]	; (8000698 <SystemClock_Config+0xc8>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800060c:	4b23      	ldr	r3, [pc, #140]	; (800069c <SystemClock_Config+0xcc>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000614:	4a21      	ldr	r2, [pc, #132]	; (800069c <SystemClock_Config+0xcc>)
 8000616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800061a:	6013      	str	r3, [r2, #0]
 800061c:	4b1f      	ldr	r3, [pc, #124]	; (800069c <SystemClock_Config+0xcc>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000628:	2302      	movs	r3, #2
 800062a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062c:	2301      	movs	r3, #1
 800062e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000630:	2310      	movs	r3, #16
 8000632:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000634:	2302      	movs	r3, #2
 8000636:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000638:	2300      	movs	r3, #0
 800063a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 10;
 800063c:	230a      	movs	r3, #10
 800063e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 8000640:	23d2      	movs	r3, #210	; 0xd2
 8000642:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000644:	2302      	movs	r3, #2
 8000646:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000648:	2302      	movs	r3, #2
 800064a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064c:	f107 0320 	add.w	r3, r7, #32
 8000650:	4618      	mov	r0, r3
 8000652:	f001 feb5 	bl	80023c0 <HAL_RCC_OscConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800065c:	f000 fd2a 	bl	80010b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000660:	230f      	movs	r3, #15
 8000662:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000664:	2302      	movs	r3, #2
 8000666:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800066c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000670:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000672:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000676:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	2105      	movs	r1, #5
 800067e:	4618      	mov	r0, r3
 8000680:	f002 f942 	bl	8002908 <HAL_RCC_ClockConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800068a:	f000 fd13 	bl	80010b4 <Error_Handler>
  }
}
 800068e:	bf00      	nop
 8000690:	3750      	adds	r7, #80	; 0x50
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40023800 	.word	0x40023800
 800069c:	40007000 	.word	0x40007000

080006a0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006a6:	463b      	mov	r3, r7
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80006b2:	4b21      	ldr	r3, [pc, #132]	; (8000738 <MX_ADC3_Init+0x98>)
 80006b4:	4a21      	ldr	r2, [pc, #132]	; (800073c <MX_ADC3_Init+0x9c>)
 80006b6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006b8:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <MX_ADC3_Init+0x98>)
 80006ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006be:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80006c0:	4b1d      	ldr	r3, [pc, #116]	; (8000738 <MX_ADC3_Init+0x98>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006c6:	4b1c      	ldr	r3, [pc, #112]	; (8000738 <MX_ADC3_Init+0x98>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80006cc:	4b1a      	ldr	r3, [pc, #104]	; (8000738 <MX_ADC3_Init+0x98>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80006d2:	4b19      	ldr	r3, [pc, #100]	; (8000738 <MX_ADC3_Init+0x98>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006da:	4b17      	ldr	r3, [pc, #92]	; (8000738 <MX_ADC3_Init+0x98>)
 80006dc:	2200      	movs	r2, #0
 80006de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006e0:	4b15      	ldr	r3, [pc, #84]	; (8000738 <MX_ADC3_Init+0x98>)
 80006e2:	4a17      	ldr	r2, [pc, #92]	; (8000740 <MX_ADC3_Init+0xa0>)
 80006e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006e6:	4b14      	ldr	r3, [pc, #80]	; (8000738 <MX_ADC3_Init+0x98>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80006ec:	4b12      	ldr	r3, [pc, #72]	; (8000738 <MX_ADC3_Init+0x98>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_ADC3_Init+0x98>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006fa:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_ADC3_Init+0x98>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000700:	480d      	ldr	r0, [pc, #52]	; (8000738 <MX_ADC3_Init+0x98>)
 8000702:	f000 fee7 	bl	80014d4 <HAL_ADC_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800070c:	f000 fcd2 	bl	80010b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000710:	2300      	movs	r3, #0
 8000712:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000714:	2301      	movs	r3, #1
 8000716:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000718:	2300      	movs	r3, #0
 800071a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800071c:	463b      	mov	r3, r7
 800071e:	4619      	mov	r1, r3
 8000720:	4805      	ldr	r0, [pc, #20]	; (8000738 <MX_ADC3_Init+0x98>)
 8000722:	f001 f91b 	bl	800195c <HAL_ADC_ConfigChannel>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800072c:	f000 fcc2 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	3710      	adds	r7, #16
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000078 	.word	0x20000078
 800073c:	40012200 	.word	0x40012200
 8000740:	0f000001 	.word	0x0f000001

08000744 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_USART1_UART_Init+0x58>)
 800074a:	4a15      	ldr	r2, [pc, #84]	; (80007a0 <MX_USART1_UART_Init+0x5c>)
 800074c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <MX_USART1_UART_Init+0x58>)
 8000750:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000754:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_USART1_UART_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_USART1_UART_Init+0x58>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_USART1_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_USART1_UART_Init+0x58>)
 800076a:	220c      	movs	r2, #12
 800076c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MX_USART1_UART_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_USART1_UART_Init+0x58>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <MX_USART1_UART_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_USART1_UART_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000786:	4805      	ldr	r0, [pc, #20]	; (800079c <MX_USART1_UART_Init+0x58>)
 8000788:	f002 fe94 	bl	80034b4 <HAL_UART_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000792:	f000 fc8f 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200000c0 	.word	0x200000c0
 80007a0:	40011000 	.word	0x40011000

080007a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b090      	sub	sp, #64	; 0x40
 80007a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ba:	4bad      	ldr	r3, [pc, #692]	; (8000a70 <MX_GPIO_Init+0x2cc>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4aac      	ldr	r2, [pc, #688]	; (8000a70 <MX_GPIO_Init+0x2cc>)
 80007c0:	f043 0310 	orr.w	r3, r3, #16
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4baa      	ldr	r3, [pc, #680]	; (8000a70 <MX_GPIO_Init+0x2cc>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0310 	and.w	r3, r3, #16
 80007ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80007d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007d2:	4ba7      	ldr	r3, [pc, #668]	; (8000a70 <MX_GPIO_Init+0x2cc>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4aa6      	ldr	r2, [pc, #664]	; (8000a70 <MX_GPIO_Init+0x2cc>)
 80007d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4ba4      	ldr	r3, [pc, #656]	; (8000a70 <MX_GPIO_Init+0x2cc>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007e6:	627b      	str	r3, [r7, #36]	; 0x24
 80007e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ea:	4ba1      	ldr	r3, [pc, #644]	; (8000a70 <MX_GPIO_Init+0x2cc>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4aa0      	ldr	r2, [pc, #640]	; (8000a70 <MX_GPIO_Init+0x2cc>)
 80007f0:	f043 0302 	orr.w	r3, r3, #2
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b9e      	ldr	r3, [pc, #632]	; (8000a70 <MX_GPIO_Init+0x2cc>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0302 	and.w	r3, r3, #2
 80007fe:	623b      	str	r3, [r7, #32]
 8000800:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000802:	4b9b      	ldr	r3, [pc, #620]	; (8000a70 <MX_GPIO_Init+0x2cc>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a9a      	ldr	r2, [pc, #616]	; (8000a70 <MX_GPIO_Init+0x2cc>)
 8000808:	f043 0308 	orr.w	r3, r3, #8
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b98      	ldr	r3, [pc, #608]	; (8000a70 <MX_GPIO_Init+0x2cc>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0308 	and.w	r3, r3, #8
 8000816:	61fb      	str	r3, [r7, #28]
 8000818:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081a:	4b95      	ldr	r3, [pc, #596]	; (8000a70 <MX_GPIO_Init+0x2cc>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a94      	ldr	r2, [pc, #592]	; (8000a70 <MX_GPIO_Init+0x2cc>)
 8000820:	f043 0304 	orr.w	r3, r3, #4
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b92      	ldr	r3, [pc, #584]	; (8000a70 <MX_GPIO_Init+0x2cc>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0304 	and.w	r3, r3, #4
 800082e:	61bb      	str	r3, [r7, #24]
 8000830:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	4b8f      	ldr	r3, [pc, #572]	; (8000a70 <MX_GPIO_Init+0x2cc>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a8e      	ldr	r2, [pc, #568]	; (8000a70 <MX_GPIO_Init+0x2cc>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b8c      	ldr	r3, [pc, #560]	; (8000a70 <MX_GPIO_Init+0x2cc>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	617b      	str	r3, [r7, #20]
 8000848:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800084a:	4b89      	ldr	r3, [pc, #548]	; (8000a70 <MX_GPIO_Init+0x2cc>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a88      	ldr	r2, [pc, #544]	; (8000a70 <MX_GPIO_Init+0x2cc>)
 8000850:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b86      	ldr	r3, [pc, #536]	; (8000a70 <MX_GPIO_Init+0x2cc>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000862:	4b83      	ldr	r3, [pc, #524]	; (8000a70 <MX_GPIO_Init+0x2cc>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a82      	ldr	r2, [pc, #520]	; (8000a70 <MX_GPIO_Init+0x2cc>)
 8000868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b80      	ldr	r3, [pc, #512]	; (8000a70 <MX_GPIO_Init+0x2cc>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800087a:	4b7d      	ldr	r3, [pc, #500]	; (8000a70 <MX_GPIO_Init+0x2cc>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a7c      	ldr	r2, [pc, #496]	; (8000a70 <MX_GPIO_Init+0x2cc>)
 8000880:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b7a      	ldr	r3, [pc, #488]	; (8000a70 <MX_GPIO_Init+0x2cc>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000892:	4b77      	ldr	r3, [pc, #476]	; (8000a70 <MX_GPIO_Init+0x2cc>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a76      	ldr	r2, [pc, #472]	; (8000a70 <MX_GPIO_Init+0x2cc>)
 8000898:	f043 0320 	orr.w	r3, r3, #32
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b74      	ldr	r3, [pc, #464]	; (8000a70 <MX_GPIO_Init+0x2cc>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0320 	and.w	r3, r3, #32
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008aa:	4b71      	ldr	r3, [pc, #452]	; (8000a70 <MX_GPIO_Init+0x2cc>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a70      	ldr	r2, [pc, #448]	; (8000a70 <MX_GPIO_Init+0x2cc>)
 80008b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b6e      	ldr	r3, [pc, #440]	; (8000a70 <MX_GPIO_Init+0x2cc>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008c2:	2201      	movs	r2, #1
 80008c4:	2120      	movs	r1, #32
 80008c6:	486b      	ldr	r0, [pc, #428]	; (8000a74 <MX_GPIO_Init+0x2d0>)
 80008c8:	f001 fd60 	bl	800238c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 80008cc:	2200      	movs	r2, #0
 80008ce:	f241 010c 	movw	r1, #4108	; 0x100c
 80008d2:	4869      	ldr	r0, [pc, #420]	; (8000a78 <MX_GPIO_Init+0x2d4>)
 80008d4:	f001 fd5a 	bl	800238c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80008d8:	2200      	movs	r2, #0
 80008da:	2108      	movs	r1, #8
 80008dc:	4867      	ldr	r0, [pc, #412]	; (8000a7c <MX_GPIO_Init+0x2d8>)
 80008de:	f001 fd55 	bl	800238c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008e8:	4865      	ldr	r0, [pc, #404]	; (8000a80 <MX_GPIO_Init+0x2dc>)
 80008ea:	f001 fd4f 	bl	800238c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	21c8      	movs	r1, #200	; 0xc8
 80008f2:	4864      	ldr	r0, [pc, #400]	; (8000a84 <MX_GPIO_Init+0x2e0>)
 80008f4:	f001 fd4a 	bl	800238c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 80008f8:	2310      	movs	r3, #16
 80008fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	2302      	movs	r3, #2
 80008fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000908:	230e      	movs	r3, #14
 800090a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800090c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000910:	4619      	mov	r1, r3
 8000912:	485d      	ldr	r0, [pc, #372]	; (8000a88 <MX_GPIO_Init+0x2e4>)
 8000914:	f001 fb8e 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000918:	2308      	movs	r3, #8
 800091a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091c:	2300      	movs	r3, #0
 800091e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000924:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000928:	4619      	mov	r1, r3
 800092a:	4857      	ldr	r0, [pc, #348]	; (8000a88 <MX_GPIO_Init+0x2e4>)
 800092c:	f001 fb82 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000930:	2304      	movs	r3, #4
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000934:	2302      	movs	r3, #2
 8000936:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093c:	2303      	movs	r3, #3
 800093e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000940:	2309      	movs	r3, #9
 8000942:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000948:	4619      	mov	r1, r3
 800094a:	484f      	ldr	r0, [pc, #316]	; (8000a88 <MX_GPIO_Init+0x2e4>)
 800094c:	f001 fb72 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000950:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000954:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000956:	2302      	movs	r3, #2
 8000958:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095e:	2303      	movs	r3, #3
 8000960:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000962:	230b      	movs	r3, #11
 8000964:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000966:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800096a:	4619      	mov	r1, r3
 800096c:	4845      	ldr	r0, [pc, #276]	; (8000a84 <MX_GPIO_Init+0x2e0>)
 800096e:	f001 fb61 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000972:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000976:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000978:	2302      	movs	r3, #2
 800097a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000980:	2303      	movs	r3, #3
 8000982:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000984:	230c      	movs	r3, #12
 8000986:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000988:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800098c:	4619      	mov	r1, r3
 800098e:	483e      	ldr	r0, [pc, #248]	; (8000a88 <MX_GPIO_Init+0x2e4>)
 8000990:	f001 fb50 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000994:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800099a:	2312      	movs	r3, #18
 800099c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009a6:	2304      	movs	r3, #4
 80009a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009ae:	4619      	mov	r1, r3
 80009b0:	4836      	ldr	r0, [pc, #216]	; (8000a8c <MX_GPIO_Init+0x2e8>)
 80009b2:	f001 fb3f 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80009b6:	f643 4323 	movw	r3, #15395	; 0x3c23
 80009ba:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	2302      	movs	r3, #2
 80009be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c4:	2303      	movs	r3, #3
 80009c6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80009c8:	230a      	movs	r3, #10
 80009ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009d0:	4619      	mov	r1, r3
 80009d2:	482e      	ldr	r0, [pc, #184]	; (8000a8c <MX_GPIO_Init+0x2e8>)
 80009d4:	f001 fb2e 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80009d8:	2310      	movs	r3, #16
 80009da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009dc:	2302      	movs	r3, #2
 80009de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80009e8:	2302      	movs	r3, #2
 80009ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80009ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009f0:	4619      	mov	r1, r3
 80009f2:	4826      	ldr	r0, [pc, #152]	; (8000a8c <MX_GPIO_Init+0x2e8>)
 80009f4:	f001 fb1e 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80009f8:	2380      	movs	r3, #128	; 0x80
 80009fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fc:	2302      	movs	r3, #2
 80009fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2300      	movs	r3, #0
 8000a06:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000a08:	2308      	movs	r3, #8
 8000a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a10:	4619      	mov	r1, r3
 8000a12:	4818      	ldr	r0, [pc, #96]	; (8000a74 <MX_GPIO_Init+0x2d0>)
 8000a14:	f001 fb0e 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8000a18:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a26:	2303      	movs	r3, #3
 8000a28:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000a2a:	230c      	movs	r3, #12
 8000a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a32:	4619      	mov	r1, r3
 8000a34:	4816      	ldr	r0, [pc, #88]	; (8000a90 <MX_GPIO_Init+0x2ec>)
 8000a36:	f001 fafd 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a40:	2302      	movs	r3, #2
 8000a42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a54:	4619      	mov	r1, r3
 8000a56:	480f      	ldr	r0, [pc, #60]	; (8000a94 <MX_GPIO_Init+0x2f0>)
 8000a58:	f001 faec 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000a5c:	2360      	movs	r3, #96	; 0x60
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	2302      	movs	r3, #2
 8000a62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000a6c:	230d      	movs	r3, #13
 8000a6e:	e013      	b.n	8000a98 <MX_GPIO_Init+0x2f4>
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40020c00 	.word	0x40020c00
 8000a78:	40022000 	.word	0x40022000
 8000a7c:	40022800 	.word	0x40022800
 8000a80:	40021c00 	.word	0x40021c00
 8000a84:	40021800 	.word	0x40021800
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	40020400 	.word	0x40020400
 8000a90:	40020800 	.word	0x40020800
 8000a94:	40020000 	.word	0x40020000
 8000a98:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	48bc      	ldr	r0, [pc, #752]	; (8000d94 <MX_GPIO_Init+0x5f0>)
 8000aa2:	f001 fac7 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000aa6:	2340      	movs	r3, #64	; 0x40
 8000aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000ab6:	230a      	movs	r3, #10
 8000ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000aba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000abe:	4619      	mov	r1, r3
 8000ac0:	48b5      	ldr	r0, [pc, #724]	; (8000d98 <MX_GPIO_Init+0x5f4>)
 8000ac2:	f001 fab7 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000ac6:	f248 1333 	movw	r3, #33075	; 0x8133
 8000aca:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	2302      	movs	r3, #2
 8000ace:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ad8:	230c      	movs	r3, #12
 8000ada:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000adc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	48ae      	ldr	r0, [pc, #696]	; (8000d9c <MX_GPIO_Init+0x5f8>)
 8000ae4:	f001 faa6 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000ae8:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000aec:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	2302      	movs	r3, #2
 8000af0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000afa:	230e      	movs	r3, #14
 8000afc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000afe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b02:	4619      	mov	r1, r3
 8000b04:	48a6      	ldr	r0, [pc, #664]	; (8000da0 <MX_GPIO_Init+0x5fc>)
 8000b06:	f001 fa95 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000b0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b10:	2300      	movs	r3, #0
 8000b12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	48a0      	ldr	r0, [pc, #640]	; (8000da0 <MX_GPIO_Init+0x5fc>)
 8000b20:	f001 fa88 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000b24:	2340      	movs	r3, #64	; 0x40
 8000b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b28:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000b32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b36:	4619      	mov	r1, r3
 8000b38:	489a      	ldr	r0, [pc, #616]	; (8000da4 <MX_GPIO_Init+0x600>)
 8000b3a:	f001 fa7b 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000b3e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000b42:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	2302      	movs	r3, #2
 8000b46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b50:	230c      	movs	r3, #12
 8000b52:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4892      	ldr	r0, [pc, #584]	; (8000da4 <MX_GPIO_Init+0x600>)
 8000b5c:	f001 fa6a 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000b60:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000b64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b66:	2302      	movs	r3, #2
 8000b68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b72:	230a      	movs	r3, #10
 8000b74:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	488a      	ldr	r0, [pc, #552]	; (8000da8 <MX_GPIO_Init+0x604>)
 8000b7e:	f001 fa59 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000b82:	23f0      	movs	r3, #240	; 0xf0
 8000b84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	2302      	movs	r3, #2
 8000b88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000b92:	230a      	movs	r3, #10
 8000b94:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4883      	ldr	r0, [pc, #524]	; (8000dac <MX_GPIO_Init+0x608>)
 8000b9e:	f001 fa49 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000ba2:	23f7      	movs	r3, #247	; 0xf7
 8000ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bb2:	230e      	movs	r3, #14
 8000bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000bb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bba:	4619      	mov	r1, r3
 8000bbc:	487c      	ldr	r0, [pc, #496]	; (8000db0 <MX_GPIO_Init+0x60c>)
 8000bbe:	f001 fa39 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000bc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000bd4:	2309      	movs	r3, #9
 8000bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000bd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bdc:	4619      	mov	r1, r3
 8000bde:	486f      	ldr	r0, [pc, #444]	; (8000d9c <MX_GPIO_Init+0x5f8>)
 8000be0:	f001 fa28 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000be4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000bf6:	230a      	movs	r3, #10
 8000bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000bfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4866      	ldr	r0, [pc, #408]	; (8000d9c <MX_GPIO_Init+0x5f8>)
 8000c02:	f001 fa17 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000c06:	2320      	movs	r3, #32
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	2300      	movs	r3, #0
 8000c14:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4861      	ldr	r0, [pc, #388]	; (8000da4 <MX_GPIO_Init+0x600>)
 8000c1e:	f001 fa09 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000c22:	2308      	movs	r3, #8
 8000c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	2302      	movs	r3, #2
 8000c28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c32:	230d      	movs	r3, #13
 8000c34:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000c36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4859      	ldr	r0, [pc, #356]	; (8000da4 <MX_GPIO_Init+0x600>)
 8000c3e:	f001 f9f9 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000c42:	f241 030c 	movw	r3, #4108	; 0x100c
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4854      	ldr	r0, [pc, #336]	; (8000dac <MX_GPIO_Init+0x608>)
 8000c5c:	f001 f9ea 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000c60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c66:	2300      	movs	r3, #0
 8000c68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000c6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c72:	4619      	mov	r1, r3
 8000c74:	484f      	ldr	r0, [pc, #316]	; (8000db4 <MX_GPIO_Init+0x610>)
 8000c76:	f001 f9dd 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000c7a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c80:	2302      	movs	r3, #2
 8000c82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c8c:	230c      	movs	r3, #12
 8000c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c94:	4619      	mov	r1, r3
 8000c96:	4848      	ldr	r0, [pc, #288]	; (8000db8 <MX_GPIO_Init+0x614>)
 8000c98:	f001 f9cc 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000c9c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8000ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000cae:	230e      	movs	r3, #14
 8000cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000cb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	483c      	ldr	r0, [pc, #240]	; (8000dac <MX_GPIO_Init+0x608>)
 8000cba:	f001 f9bb 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000cbe:	2308      	movs	r3, #8
 8000cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000cce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4836      	ldr	r0, [pc, #216]	; (8000db0 <MX_GPIO_Init+0x60c>)
 8000cd6:	f001 f9ad 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000cda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000cec:	230d      	movs	r3, #13
 8000cee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000cf0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4829      	ldr	r0, [pc, #164]	; (8000d9c <MX_GPIO_Init+0x5f8>)
 8000cf8:	f001 f99c 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000cfc:	2310      	movs	r3, #16
 8000cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d00:	2300      	movs	r3, #0
 8000d02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4825      	ldr	r0, [pc, #148]	; (8000da4 <MX_GPIO_Init+0x600>)
 8000d10:	f001 f990 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000d14:	2304      	movs	r3, #4
 8000d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d20:	2303      	movs	r3, #3
 8000d22:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000d24:	230c      	movs	r3, #12
 8000d26:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000d28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	481d      	ldr	r0, [pc, #116]	; (8000da4 <MX_GPIO_Init+0x600>)
 8000d30:	f001 f980 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000d34:	f248 0304 	movw	r3, #32772	; 0x8004
 8000d38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d46:	4619      	mov	r1, r3
 8000d48:	481c      	ldr	r0, [pc, #112]	; (8000dbc <MX_GPIO_Init+0x618>)
 8000d4a:	f001 f973 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d5e:	2305      	movs	r3, #5
 8000d60:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8000d62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d66:	4619      	mov	r1, r3
 8000d68:	4810      	ldr	r0, [pc, #64]	; (8000dac <MX_GPIO_Init+0x608>)
 8000d6a:	f001 f963 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000d6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d74:	2301      	movs	r3, #1
 8000d76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d84:	4619      	mov	r1, r3
 8000d86:	480d      	ldr	r0, [pc, #52]	; (8000dbc <MX_GPIO_Init+0x618>)
 8000d88:	f001 f954 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000d8c:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8000d90:	e016      	b.n	8000dc0 <MX_GPIO_Init+0x61c>
 8000d92:	bf00      	nop
 8000d94:	40021000 	.word	0x40021000
 8000d98:	40020400 	.word	0x40020400
 8000d9c:	40021800 	.word	0x40021800
 8000da0:	40022400 	.word	0x40022400
 8000da4:	40020c00 	.word	0x40020c00
 8000da8:	40020000 	.word	0x40020000
 8000dac:	40022000 	.word	0x40022000
 8000db0:	40022800 	.word	0x40022800
 8000db4:	40020800 	.word	0x40020800
 8000db8:	40021400 	.word	0x40021400
 8000dbc:	40021c00 	.word	0x40021c00
 8000dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000dce:	230d      	movs	r3, #13
 8000dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000dd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4899      	ldr	r0, [pc, #612]	; (8001040 <MX_GPIO_Init+0x89c>)
 8000dda:	f001 f92b 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000dde:	2301      	movs	r3, #1
 8000de0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000dee:	2302      	movs	r3, #2
 8000df0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000df2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000df6:	4619      	mov	r1, r3
 8000df8:	4892      	ldr	r0, [pc, #584]	; (8001044 <MX_GPIO_Init+0x8a0>)
 8000dfa:	f001 f91b 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000dfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e04:	2302      	movs	r3, #2
 8000e06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e10:	2301      	movs	r3, #1
 8000e12:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000e14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e18:	4619      	mov	r1, r3
 8000e1a:	488b      	ldr	r0, [pc, #556]	; (8001048 <MX_GPIO_Init+0x8a4>)
 8000e1c:	f001 f90a 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000e20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e26:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000e30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e34:	4619      	mov	r1, r3
 8000e36:	4883      	ldr	r0, [pc, #524]	; (8001044 <MX_GPIO_Init+0x8a0>)
 8000e38:	f001 f8fc 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000e3c:	23c0      	movs	r3, #192	; 0xc0
 8000e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000e4c:	2308      	movs	r3, #8
 8000e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e54:	4619      	mov	r1, r3
 8000e56:	487d      	ldr	r0, [pc, #500]	; (800104c <MX_GPIO_Init+0x8a8>)
 8000e58:	f001 f8ec 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000e5c:	2310      	movs	r3, #16
 8000e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	2302      	movs	r3, #2
 8000e62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000e6c:	230a      	movs	r3, #10
 8000e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000e70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e74:	4619      	mov	r1, r3
 8000e76:	4872      	ldr	r0, [pc, #456]	; (8001040 <MX_GPIO_Init+0x89c>)
 8000e78:	f001 f8dc 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000e7c:	2328      	movs	r3, #40	; 0x28
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e80:	2302      	movs	r3, #2
 8000e82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e8c:	230c      	movs	r3, #12
 8000e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e94:	4619      	mov	r1, r3
 8000e96:	486a      	ldr	r0, [pc, #424]	; (8001040 <MX_GPIO_Init+0x89c>)
 8000e98:	f001 f8cc 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000e9c:	23c8      	movs	r3, #200	; 0xc8
 8000e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4867      	ldr	r0, [pc, #412]	; (8001050 <MX_GPIO_Init+0x8ac>)
 8000eb4:	f001 f8be 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000eb8:	2308      	movs	r3, #8
 8000eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ec8:	230c      	movs	r3, #12
 8000eca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000ecc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	485e      	ldr	r0, [pc, #376]	; (800104c <MX_GPIO_Init+0x8a8>)
 8000ed4:	f001 f8ae 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000ed8:	2305      	movs	r3, #5
 8000eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000edc:	2302      	movs	r3, #2
 8000ede:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000ee8:	230a      	movs	r3, #10
 8000eea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4856      	ldr	r0, [pc, #344]	; (800104c <MX_GPIO_Init+0x8a8>)
 8000ef4:	f001 f89e 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ef8:	2332      	movs	r3, #50	; 0x32
 8000efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efc:	2302      	movs	r3, #2
 8000efe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f04:	2303      	movs	r3, #3
 8000f06:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f08:	230b      	movs	r3, #11
 8000f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f10:	4619      	mov	r1, r3
 8000f12:	484e      	ldr	r0, [pc, #312]	; (800104c <MX_GPIO_Init+0x8a8>)
 8000f14:	f001 f88e 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f18:	2304      	movs	r3, #4
 8000f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f24:	2303      	movs	r3, #3
 8000f26:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000f28:	2309      	movs	r3, #9
 8000f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f30:	4619      	mov	r1, r3
 8000f32:	4848      	ldr	r0, [pc, #288]	; (8001054 <MX_GPIO_Init+0x8b0>)
 8000f34:	f001 f87e 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000f38:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f46:	2303      	movs	r3, #3
 8000f48:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000f4a:	2309      	movs	r3, #9
 8000f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f52:	4619      	mov	r1, r3
 8000f54:	4840      	ldr	r0, [pc, #256]	; (8001058 <MX_GPIO_Init+0x8b4>)
 8000f56:	f001 f86d 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000f5a:	2304      	movs	r3, #4
 8000f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000f66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4838      	ldr	r0, [pc, #224]	; (8001050 <MX_GPIO_Init+0x8ac>)
 8000f6e:	f001 f861 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000f72:	2386      	movs	r3, #134	; 0x86
 8000f74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f76:	2302      	movs	r3, #2
 8000f78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f82:	230b      	movs	r3, #11
 8000f84:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	482e      	ldr	r0, [pc, #184]	; (8001048 <MX_GPIO_Init+0x8a4>)
 8000f8e:	f001 f851 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000f92:	2350      	movs	r3, #80	; 0x50
 8000f94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f96:	2302      	movs	r3, #2
 8000f98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000fa2:	230d      	movs	r3, #13
 8000fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000faa:	4619      	mov	r1, r3
 8000fac:	4826      	ldr	r0, [pc, #152]	; (8001048 <MX_GPIO_Init+0x8a4>)
 8000fae:	f001 f841 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000fb2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fb8:	2312      	movs	r3, #18
 8000fba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000fc4:	2304      	movs	r3, #4
 8000fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000fc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fcc:	4619      	mov	r1, r3
 8000fce:	481c      	ldr	r0, [pc, #112]	; (8001040 <MX_GPIO_Init+0x89c>)
 8000fd0:	f001 f830 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000fd4:	2328      	movs	r3, #40	; 0x28
 8000fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000fe4:	230a      	movs	r3, #10
 8000fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fec:	4619      	mov	r1, r3
 8000fee:	4816      	ldr	r0, [pc, #88]	; (8001048 <MX_GPIO_Init+0x8a4>)
 8000ff0:	f001 f820 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000ff4:	2340      	movs	r3, #64	; 0x40
 8000ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001000:	2300      	movs	r3, #0
 8001002:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001004:	2309      	movs	r3, #9
 8001006:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001008:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800100c:	4619      	mov	r1, r3
 800100e:	480c      	ldr	r0, [pc, #48]	; (8001040 <MX_GPIO_Init+0x89c>)
 8001010:	f001 f810 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001014:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001018:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101a:	2302      	movs	r3, #2
 800101c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001022:	2300      	movs	r3, #0
 8001024:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001026:	2305      	movs	r3, #5
 8001028:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800102e:	4619      	mov	r1, r3
 8001030:	4808      	ldr	r0, [pc, #32]	; (8001054 <MX_GPIO_Init+0x8b0>)
 8001032:	f000 ffff 	bl	8002034 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001036:	bf00      	nop
 8001038:	3740      	adds	r7, #64	; 0x40
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40021c00 	.word	0x40021c00
 8001044:	40022000 	.word	0x40022000
 8001048:	40020000 	.word	0x40020000
 800104c:	40020800 	.word	0x40020800
 8001050:	40021800 	.word	0x40021800
 8001054:	40020400 	.word	0x40020400
 8001058:	40020c00 	.word	0x40020c00

0800105c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	raw_adc = HAL_ADC_GetValue(&hadc3);
 8001064:	480e      	ldr	r0, [pc, #56]	; (80010a0 <HAL_ADC_ConvCpltCallback+0x44>)
 8001066:	f000 fc57 	bl	8001918 <HAL_ADC_GetValue>
 800106a:	4603      	mov	r3, r0
 800106c:	b29a      	uxth	r2, r3
 800106e:	4b0d      	ldr	r3, [pc, #52]	; (80010a4 <HAL_ADC_ConvCpltCallback+0x48>)
 8001070:	801a      	strh	r2, [r3, #0]
	sprintf(buffer,"ADC: %d",raw_adc);
 8001072:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <HAL_ADC_ConvCpltCallback+0x4c>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <HAL_ADC_ConvCpltCallback+0x48>)
 800107a:	881b      	ldrh	r3, [r3, #0]
 800107c:	b29b      	uxth	r3, r3
 800107e:	461a      	mov	r2, r3
 8001080:	490a      	ldr	r1, [pc, #40]	; (80010ac <HAL_ADC_ConvCpltCallback+0x50>)
 8001082:	f002 feed 	bl	8003e60 <siprintf>
	HAL_UART_Transmit(&huart1, buffer, sizeof(buffer), 100);
 8001086:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <HAL_ADC_ConvCpltCallback+0x4c>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	4619      	mov	r1, r3
 800108c:	2364      	movs	r3, #100	; 0x64
 800108e:	2201      	movs	r2, #1
 8001090:	4807      	ldr	r0, [pc, #28]	; (80010b0 <HAL_ADC_ConvCpltCallback+0x54>)
 8001092:	f002 fa5d 	bl	8003550 <HAL_UART_Transmit>
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000078 	.word	0x20000078
 80010a4:	20000148 	.word	0x20000148
 80010a8:	2000014a 	.word	0x2000014a
 80010ac:	080047c0 	.word	0x080047c0
 80010b0:	200000c0 	.word	0x200000c0

080010b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b8:	b672      	cpsid	i
}
 80010ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010bc:	e7fe      	b.n	80010bc <Error_Handler+0x8>
	...

080010c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010c6:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <HAL_MspInit+0x44>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	4a0e      	ldr	r2, [pc, #56]	; (8001104 <HAL_MspInit+0x44>)
 80010cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d0:	6413      	str	r3, [r2, #64]	; 0x40
 80010d2:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <HAL_MspInit+0x44>)
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010de:	4b09      	ldr	r3, [pc, #36]	; (8001104 <HAL_MspInit+0x44>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	4a08      	ldr	r2, [pc, #32]	; (8001104 <HAL_MspInit+0x44>)
 80010e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_MspInit+0x44>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f2:	603b      	str	r3, [r7, #0]
 80010f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	40023800 	.word	0x40023800

08001108 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	; 0x28
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a25      	ldr	r2, [pc, #148]	; (80011bc <HAL_ADC_MspInit+0xb4>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d144      	bne.n	80011b4 <HAL_ADC_MspInit+0xac>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800112a:	4b25      	ldr	r3, [pc, #148]	; (80011c0 <HAL_ADC_MspInit+0xb8>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112e:	4a24      	ldr	r2, [pc, #144]	; (80011c0 <HAL_ADC_MspInit+0xb8>)
 8001130:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001134:	6453      	str	r3, [r2, #68]	; 0x44
 8001136:	4b22      	ldr	r3, [pc, #136]	; (80011c0 <HAL_ADC_MspInit+0xb8>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001142:	4b1f      	ldr	r3, [pc, #124]	; (80011c0 <HAL_ADC_MspInit+0xb8>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a1e      	ldr	r2, [pc, #120]	; (80011c0 <HAL_ADC_MspInit+0xb8>)
 8001148:	f043 0320 	orr.w	r3, r3, #32
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <HAL_ADC_MspInit+0xb8>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0320 	and.w	r3, r3, #32
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115a:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <HAL_ADC_MspInit+0xb8>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a18      	ldr	r2, [pc, #96]	; (80011c0 <HAL_ADC_MspInit+0xb8>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b16      	ldr	r3, [pc, #88]	; (80011c0 <HAL_ADC_MspInit+0xb8>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001172:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001176:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001178:	2303      	movs	r3, #3
 800117a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	4619      	mov	r1, r3
 8001186:	480f      	ldr	r0, [pc, #60]	; (80011c4 <HAL_ADC_MspInit+0xbc>)
 8001188:	f000 ff54 	bl	8002034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800118c:	2301      	movs	r3, #1
 800118e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001190:	2303      	movs	r3, #3
 8001192:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	4619      	mov	r1, r3
 800119e:	480a      	ldr	r0, [pc, #40]	; (80011c8 <HAL_ADC_MspInit+0xc0>)
 80011a0:	f000 ff48 	bl	8002034 <HAL_GPIO_Init>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2100      	movs	r1, #0
 80011a8:	2012      	movs	r0, #18
 80011aa:	f000 ff0c 	bl	8001fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80011ae:	2012      	movs	r0, #18
 80011b0:	f000 ff25 	bl	8001ffe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80011b4:	bf00      	nop
 80011b6:	3728      	adds	r7, #40	; 0x28
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40012200 	.word	0x40012200
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40021400 	.word	0x40021400
 80011c8:	40020000 	.word	0x40020000

080011cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b0ac      	sub	sp, #176	; 0xb0
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011e4:	f107 0318 	add.w	r3, r7, #24
 80011e8:	2284      	movs	r2, #132	; 0x84
 80011ea:	2100      	movs	r1, #0
 80011ec:	4618      	mov	r0, r3
 80011ee:	f002 fe57 	bl	8003ea0 <memset>
  if(huart->Instance==USART1)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a32      	ldr	r2, [pc, #200]	; (80012c0 <HAL_UART_MspInit+0xf4>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d15c      	bne.n	80012b6 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80011fc:	2340      	movs	r3, #64	; 0x40
 80011fe:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001200:	2300      	movs	r3, #0
 8001202:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001204:	f107 0318 	add.w	r3, r7, #24
 8001208:	4618      	mov	r0, r3
 800120a:	f001 fd63 	bl	8002cd4 <HAL_RCCEx_PeriphCLKConfig>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001214:	f7ff ff4e 	bl	80010b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001218:	4b2a      	ldr	r3, [pc, #168]	; (80012c4 <HAL_UART_MspInit+0xf8>)
 800121a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121c:	4a29      	ldr	r2, [pc, #164]	; (80012c4 <HAL_UART_MspInit+0xf8>)
 800121e:	f043 0310 	orr.w	r3, r3, #16
 8001222:	6453      	str	r3, [r2, #68]	; 0x44
 8001224:	4b27      	ldr	r3, [pc, #156]	; (80012c4 <HAL_UART_MspInit+0xf8>)
 8001226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001228:	f003 0310 	and.w	r3, r3, #16
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001230:	4b24      	ldr	r3, [pc, #144]	; (80012c4 <HAL_UART_MspInit+0xf8>)
 8001232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001234:	4a23      	ldr	r2, [pc, #140]	; (80012c4 <HAL_UART_MspInit+0xf8>)
 8001236:	f043 0302 	orr.w	r3, r3, #2
 800123a:	6313      	str	r3, [r2, #48]	; 0x30
 800123c:	4b21      	ldr	r3, [pc, #132]	; (80012c4 <HAL_UART_MspInit+0xf8>)
 800123e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001248:	4b1e      	ldr	r3, [pc, #120]	; (80012c4 <HAL_UART_MspInit+0xf8>)
 800124a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124c:	4a1d      	ldr	r2, [pc, #116]	; (80012c4 <HAL_UART_MspInit+0xf8>)
 800124e:	f043 0301 	orr.w	r3, r3, #1
 8001252:	6313      	str	r3, [r2, #48]	; 0x30
 8001254:	4b1b      	ldr	r3, [pc, #108]	; (80012c4 <HAL_UART_MspInit+0xf8>)
 8001256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001260:	2380      	movs	r3, #128	; 0x80
 8001262:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001266:	2302      	movs	r3, #2
 8001268:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001272:	2300      	movs	r3, #0
 8001274:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001278:	2307      	movs	r3, #7
 800127a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800127e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001282:	4619      	mov	r1, r3
 8001284:	4810      	ldr	r0, [pc, #64]	; (80012c8 <HAL_UART_MspInit+0xfc>)
 8001286:	f000 fed5 	bl	8002034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800128a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800128e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	2302      	movs	r3, #2
 8001294:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129e:	2300      	movs	r3, #0
 80012a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012a4:	2307      	movs	r3, #7
 80012a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80012aa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012ae:	4619      	mov	r1, r3
 80012b0:	4806      	ldr	r0, [pc, #24]	; (80012cc <HAL_UART_MspInit+0x100>)
 80012b2:	f000 febf 	bl	8002034 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012b6:	bf00      	nop
 80012b8:	37b0      	adds	r7, #176	; 0xb0
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40011000 	.word	0x40011000
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40020400 	.word	0x40020400
 80012cc:	40020000 	.word	0x40020000

080012d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012d4:	e7fe      	b.n	80012d4 <NMI_Handler+0x4>

080012d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012da:	e7fe      	b.n	80012da <HardFault_Handler+0x4>

080012dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e0:	e7fe      	b.n	80012e0 <MemManage_Handler+0x4>

080012e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012e6:	e7fe      	b.n	80012e6 <BusFault_Handler+0x4>

080012e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012ec:	e7fe      	b.n	80012ec <UsageFault_Handler+0x4>

080012ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800131c:	f000 f8ba 	bl	8001494 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}

08001324 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8001328:	4802      	ldr	r0, [pc, #8]	; (8001334 <ADC_IRQHandler+0x10>)
 800132a:	f000 f9e5 	bl	80016f8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000078 	.word	0x20000078

08001338 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001340:	4a14      	ldr	r2, [pc, #80]	; (8001394 <_sbrk+0x5c>)
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <_sbrk+0x60>)
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800134c:	4b13      	ldr	r3, [pc, #76]	; (800139c <_sbrk+0x64>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d102      	bne.n	800135a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <_sbrk+0x64>)
 8001356:	4a12      	ldr	r2, [pc, #72]	; (80013a0 <_sbrk+0x68>)
 8001358:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <_sbrk+0x64>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4413      	add	r3, r2
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	429a      	cmp	r2, r3
 8001366:	d207      	bcs.n	8001378 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001368:	f002 fda2 	bl	8003eb0 <__errno>
 800136c:	4603      	mov	r3, r0
 800136e:	220c      	movs	r2, #12
 8001370:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001372:	f04f 33ff 	mov.w	r3, #4294967295
 8001376:	e009      	b.n	800138c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001378:	4b08      	ldr	r3, [pc, #32]	; (800139c <_sbrk+0x64>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800137e:	4b07      	ldr	r3, [pc, #28]	; (800139c <_sbrk+0x64>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4413      	add	r3, r2
 8001386:	4a05      	ldr	r2, [pc, #20]	; (800139c <_sbrk+0x64>)
 8001388:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800138a:	68fb      	ldr	r3, [r7, #12]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3718      	adds	r7, #24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20050000 	.word	0x20050000
 8001398:	00000400 	.word	0x00000400
 800139c:	2000014c 	.word	0x2000014c
 80013a0:	200002a0 	.word	0x200002a0

080013a4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <SystemInit+0x20>)
 80013aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ae:	4a05      	ldr	r2, [pc, #20]	; (80013c4 <SystemInit+0x20>)
 80013b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001400 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013cc:	480d      	ldr	r0, [pc, #52]	; (8001404 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013ce:	490e      	ldr	r1, [pc, #56]	; (8001408 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013d0:	4a0e      	ldr	r2, [pc, #56]	; (800140c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d4:	e002      	b.n	80013dc <LoopCopyDataInit>

080013d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013da:	3304      	adds	r3, #4

080013dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e0:	d3f9      	bcc.n	80013d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013e2:	4a0b      	ldr	r2, [pc, #44]	; (8001410 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013e4:	4c0b      	ldr	r4, [pc, #44]	; (8001414 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013e8:	e001      	b.n	80013ee <LoopFillZerobss>

080013ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013ec:	3204      	adds	r2, #4

080013ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f0:	d3fb      	bcc.n	80013ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013f2:	f7ff ffd7 	bl	80013a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013f6:	f002 fd61 	bl	8003ebc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013fa:	f7ff f8d7 	bl	80005ac <main>
  bx  lr    
 80013fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001400:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001404:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001408:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800140c:	08004824 	.word	0x08004824
  ldr r2, =_sbss
 8001410:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001414:	2000029c 	.word	0x2000029c

08001418 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001418:	e7fe      	b.n	8001418 <CAN1_RX0_IRQHandler>

0800141a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800141e:	2003      	movs	r0, #3
 8001420:	f000 fdc6 	bl	8001fb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001424:	2000      	movs	r0, #0
 8001426:	f000 f805 	bl	8001434 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800142a:	f7ff fe49 	bl	80010c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	bd80      	pop	{r7, pc}

08001434 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800143c:	4b12      	ldr	r3, [pc, #72]	; (8001488 <HAL_InitTick+0x54>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4b12      	ldr	r3, [pc, #72]	; (800148c <HAL_InitTick+0x58>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	4619      	mov	r1, r3
 8001446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800144a:	fbb3 f3f1 	udiv	r3, r3, r1
 800144e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001452:	4618      	mov	r0, r3
 8001454:	f000 fde1 	bl	800201a <HAL_SYSTICK_Config>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e00e      	b.n	8001480 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2b0f      	cmp	r3, #15
 8001466:	d80a      	bhi.n	800147e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001468:	2200      	movs	r2, #0
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	f04f 30ff 	mov.w	r0, #4294967295
 8001470:	f000 fda9 	bl	8001fc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001474:	4a06      	ldr	r2, [pc, #24]	; (8001490 <HAL_InitTick+0x5c>)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800147a:	2300      	movs	r3, #0
 800147c:	e000      	b.n	8001480 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
}
 8001480:	4618      	mov	r0, r3
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000000 	.word	0x20000000
 800148c:	20000008 	.word	0x20000008
 8001490:	20000004 	.word	0x20000004

08001494 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <HAL_IncTick+0x20>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	461a      	mov	r2, r3
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_IncTick+0x24>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4413      	add	r3, r2
 80014a4:	4a04      	ldr	r2, [pc, #16]	; (80014b8 <HAL_IncTick+0x24>)
 80014a6:	6013      	str	r3, [r2, #0]
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	20000008 	.word	0x20000008
 80014b8:	20000150 	.word	0x20000150

080014bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  return uwTick;
 80014c0:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <HAL_GetTick+0x14>)
 80014c2:	681b      	ldr	r3, [r3, #0]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	20000150 	.word	0x20000150

080014d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014dc:	2300      	movs	r3, #0
 80014de:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e031      	b.n	800154e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d109      	bne.n	8001506 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff fe08 	bl	8001108 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	f003 0310 	and.w	r3, r3, #16
 800150e:	2b00      	cmp	r3, #0
 8001510:	d116      	bne.n	8001540 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001516:	4b10      	ldr	r3, [pc, #64]	; (8001558 <HAL_ADC_Init+0x84>)
 8001518:	4013      	ands	r3, r2
 800151a:	f043 0202 	orr.w	r2, r3, #2
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f000 fb70 	bl	8001c08 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	f023 0303 	bic.w	r3, r3, #3
 8001536:	f043 0201 	orr.w	r2, r3, #1
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	641a      	str	r2, [r3, #64]	; 0x40
 800153e:	e001      	b.n	8001544 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800154c:	7bfb      	ldrb	r3, [r7, #15]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	ffffeefd 	.word	0xffffeefd

0800155c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800156e:	2b01      	cmp	r3, #1
 8001570:	d101      	bne.n	8001576 <HAL_ADC_Start+0x1a>
 8001572:	2302      	movs	r3, #2
 8001574:	e0ad      	b.n	80016d2 <HAL_ADC_Start+0x176>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2201      	movs	r2, #1
 800157a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	2b01      	cmp	r3, #1
 800158a:	d018      	beq.n	80015be <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	689a      	ldr	r2, [r3, #8]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f042 0201 	orr.w	r2, r2, #1
 800159a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800159c:	4b50      	ldr	r3, [pc, #320]	; (80016e0 <HAL_ADC_Start+0x184>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a50      	ldr	r2, [pc, #320]	; (80016e4 <HAL_ADC_Start+0x188>)
 80015a2:	fba2 2303 	umull	r2, r3, r2, r3
 80015a6:	0c9a      	lsrs	r2, r3, #18
 80015a8:	4613      	mov	r3, r2
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	4413      	add	r3, r2
 80015ae:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80015b0:	e002      	b.n	80015b8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	3b01      	subs	r3, #1
 80015b6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f9      	bne.n	80015b2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d175      	bne.n	80016b8 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015d0:	4b45      	ldr	r3, [pc, #276]	; (80016e8 <HAL_ADC_Start+0x18c>)
 80015d2:	4013      	ands	r3, r2
 80015d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d007      	beq.n	80015fa <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015f2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001606:	d106      	bne.n	8001616 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160c:	f023 0206 	bic.w	r2, r3, #6
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	645a      	str	r2, [r3, #68]	; 0x44
 8001614:	e002      	b.n	800161c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800162c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800162e:	4b2f      	ldr	r3, [pc, #188]	; (80016ec <HAL_ADC_Start+0x190>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f003 031f 	and.w	r3, r3, #31
 8001636:	2b00      	cmp	r3, #0
 8001638:	d10f      	bne.n	800165a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d143      	bne.n	80016d0 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	e03a      	b.n	80016d0 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a24      	ldr	r2, [pc, #144]	; (80016f0 <HAL_ADC_Start+0x194>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d10e      	bne.n	8001682 <HAL_ADC_Start+0x126>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d107      	bne.n	8001682 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001680:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001682:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <HAL_ADC_Start+0x190>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f003 0310 	and.w	r3, r3, #16
 800168a:	2b00      	cmp	r3, #0
 800168c:	d120      	bne.n	80016d0 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a18      	ldr	r2, [pc, #96]	; (80016f4 <HAL_ADC_Start+0x198>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d11b      	bne.n	80016d0 <HAL_ADC_Start+0x174>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d114      	bne.n	80016d0 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	689a      	ldr	r2, [r3, #8]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	e00b      	b.n	80016d0 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016bc:	f043 0210 	orr.w	r2, r3, #16
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c8:	f043 0201 	orr.w	r2, r3, #1
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3714      	adds	r7, #20
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	20000000 	.word	0x20000000
 80016e4:	431bde83 	.word	0x431bde83
 80016e8:	fffff8fe 	.word	0xfffff8fe
 80016ec:	40012300 	.word	0x40012300
 80016f0:	40012000 	.word	0x40012000
 80016f4:	40012200 	.word	0x40012200

080016f8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	2300      	movs	r3, #0
 8001706:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	f003 0320 	and.w	r3, r3, #32
 8001726:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d049      	beq.n	80017c2 <HAL_ADC_IRQHandler+0xca>
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d046      	beq.n	80017c2 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001738:	f003 0310 	and.w	r3, r3, #16
 800173c:	2b00      	cmp	r3, #0
 800173e:	d105      	bne.n	800174c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001744:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d12b      	bne.n	80017b2 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800175e:	2b00      	cmp	r3, #0
 8001760:	d127      	bne.n	80017b2 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001768:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800176c:	2b00      	cmp	r3, #0
 800176e:	d006      	beq.n	800177e <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800177a:	2b00      	cmp	r3, #0
 800177c:	d119      	bne.n	80017b2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f022 0220 	bic.w	r2, r2, #32
 800178c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d105      	bne.n	80017b2 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	f043 0201 	orr.w	r2, r3, #1
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7ff fc52 	bl	800105c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f06f 0212 	mvn.w	r2, #18
 80017c0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017d0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d057      	beq.n	8001888 <HAL_ADC_IRQHandler+0x190>
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d054      	beq.n	8001888 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f003 0310 	and.w	r3, r3, #16
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d105      	bne.n	80017f6 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d139      	bne.n	8001878 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800180a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800180e:	2b00      	cmp	r3, #0
 8001810:	d006      	beq.n	8001820 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800181c:	2b00      	cmp	r3, #0
 800181e:	d12b      	bne.n	8001878 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800182a:	2b00      	cmp	r3, #0
 800182c:	d124      	bne.n	8001878 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001838:	2b00      	cmp	r3, #0
 800183a:	d11d      	bne.n	8001878 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001840:	2b00      	cmp	r3, #0
 8001842:	d119      	bne.n	8001878 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001852:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001858:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001868:	2b00      	cmp	r3, #0
 800186a:	d105      	bne.n	8001878 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001870:	f043 0201 	orr.w	r2, r3, #1
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 fabf 	bl	8001dfc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f06f 020c 	mvn.w	r2, #12
 8001886:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001896:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d017      	beq.n	80018ce <HAL_ADC_IRQHandler+0x1d6>
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d014      	beq.n	80018ce <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d10d      	bne.n	80018ce <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f000 f837 	bl	8001932 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f06f 0201 	mvn.w	r2, #1
 80018cc:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f003 0320 	and.w	r3, r3, #32
 80018d4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018dc:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d015      	beq.n	8001910 <HAL_ADC_IRQHandler+0x218>
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d012      	beq.n	8001910 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	f043 0202 	orr.w	r2, r3, #2
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f06f 0220 	mvn.w	r2, #32
 80018fe:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f000 f820 	bl	8001946 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f06f 0220 	mvn.w	r2, #32
 800190e:	601a      	str	r2, [r3, #0]
  }
}
 8001910:	bf00      	nop
 8001912:	3718      	adds	r7, #24
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001926:	4618      	mov	r0, r3
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
	...

0800195c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001970:	2b01      	cmp	r3, #1
 8001972:	d101      	bne.n	8001978 <HAL_ADC_ConfigChannel+0x1c>
 8001974:	2302      	movs	r3, #2
 8001976:	e136      	b.n	8001be6 <HAL_ADC_ConfigChannel+0x28a>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b09      	cmp	r3, #9
 8001986:	d93a      	bls.n	80019fe <HAL_ADC_ConfigChannel+0xa2>
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001990:	d035      	beq.n	80019fe <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	68d9      	ldr	r1, [r3, #12]
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	b29b      	uxth	r3, r3
 800199e:	461a      	mov	r2, r3
 80019a0:	4613      	mov	r3, r2
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	4413      	add	r3, r2
 80019a6:	3b1e      	subs	r3, #30
 80019a8:	2207      	movs	r2, #7
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43da      	mvns	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	400a      	ands	r2, r1
 80019b6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a8d      	ldr	r2, [pc, #564]	; (8001bf4 <HAL_ADC_ConfigChannel+0x298>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d10a      	bne.n	80019d8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68d9      	ldr	r1, [r3, #12]
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	061a      	lsls	r2, r3, #24
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	430a      	orrs	r2, r1
 80019d4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019d6:	e035      	b.n	8001a44 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68d9      	ldr	r1, [r3, #12]
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	689a      	ldr	r2, [r3, #8]
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	4618      	mov	r0, r3
 80019ea:	4603      	mov	r3, r0
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	4403      	add	r3, r0
 80019f0:	3b1e      	subs	r3, #30
 80019f2:	409a      	lsls	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	430a      	orrs	r2, r1
 80019fa:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019fc:	e022      	b.n	8001a44 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6919      	ldr	r1, [r3, #16]
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	4413      	add	r3, r2
 8001a12:	2207      	movs	r2, #7
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43da      	mvns	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	400a      	ands	r2, r1
 8001a20:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6919      	ldr	r1, [r3, #16]
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	4618      	mov	r0, r3
 8001a34:	4603      	mov	r3, r0
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	4403      	add	r3, r0
 8001a3a:	409a      	lsls	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	430a      	orrs	r2, r1
 8001a42:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	2b06      	cmp	r3, #6
 8001a4a:	d824      	bhi.n	8001a96 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685a      	ldr	r2, [r3, #4]
 8001a56:	4613      	mov	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	3b05      	subs	r3, #5
 8001a5e:	221f      	movs	r2, #31
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43da      	mvns	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	400a      	ands	r2, r1
 8001a6c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685a      	ldr	r2, [r3, #4]
 8001a80:	4613      	mov	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	3b05      	subs	r3, #5
 8001a88:	fa00 f203 	lsl.w	r2, r0, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	430a      	orrs	r2, r1
 8001a92:	635a      	str	r2, [r3, #52]	; 0x34
 8001a94:	e04c      	b.n	8001b30 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b0c      	cmp	r3, #12
 8001a9c:	d824      	bhi.n	8001ae8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685a      	ldr	r2, [r3, #4]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	3b23      	subs	r3, #35	; 0x23
 8001ab0:	221f      	movs	r2, #31
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43da      	mvns	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	400a      	ands	r2, r1
 8001abe:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	4618      	mov	r0, r3
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	3b23      	subs	r3, #35	; 0x23
 8001ada:	fa00 f203 	lsl.w	r2, r0, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	631a      	str	r2, [r3, #48]	; 0x30
 8001ae6:	e023      	b.n	8001b30 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	4613      	mov	r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4413      	add	r3, r2
 8001af8:	3b41      	subs	r3, #65	; 0x41
 8001afa:	221f      	movs	r2, #31
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43da      	mvns	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	400a      	ands	r2, r1
 8001b08:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	4618      	mov	r0, r3
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	3b41      	subs	r3, #65	; 0x41
 8001b24:	fa00 f203 	lsl.w	r2, r0, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a30      	ldr	r2, [pc, #192]	; (8001bf8 <HAL_ADC_ConfigChannel+0x29c>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d10a      	bne.n	8001b50 <HAL_ADC_ConfigChannel+0x1f4>
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b42:	d105      	bne.n	8001b50 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001b44:	4b2d      	ldr	r3, [pc, #180]	; (8001bfc <HAL_ADC_ConfigChannel+0x2a0>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	4a2c      	ldr	r2, [pc, #176]	; (8001bfc <HAL_ADC_ConfigChannel+0x2a0>)
 8001b4a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001b4e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a28      	ldr	r2, [pc, #160]	; (8001bf8 <HAL_ADC_ConfigChannel+0x29c>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d10f      	bne.n	8001b7a <HAL_ADC_ConfigChannel+0x21e>
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2b12      	cmp	r3, #18
 8001b60:	d10b      	bne.n	8001b7a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001b62:	4b26      	ldr	r3, [pc, #152]	; (8001bfc <HAL_ADC_ConfigChannel+0x2a0>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	4a25      	ldr	r2, [pc, #148]	; (8001bfc <HAL_ADC_ConfigChannel+0x2a0>)
 8001b68:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001b6c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001b6e:	4b23      	ldr	r3, [pc, #140]	; (8001bfc <HAL_ADC_ConfigChannel+0x2a0>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	4a22      	ldr	r2, [pc, #136]	; (8001bfc <HAL_ADC_ConfigChannel+0x2a0>)
 8001b74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b78:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a1e      	ldr	r2, [pc, #120]	; (8001bf8 <HAL_ADC_ConfigChannel+0x29c>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d12b      	bne.n	8001bdc <HAL_ADC_ConfigChannel+0x280>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a1a      	ldr	r2, [pc, #104]	; (8001bf4 <HAL_ADC_ConfigChannel+0x298>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d003      	beq.n	8001b96 <HAL_ADC_ConfigChannel+0x23a>
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2b11      	cmp	r3, #17
 8001b94:	d122      	bne.n	8001bdc <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001b96:	4b19      	ldr	r3, [pc, #100]	; (8001bfc <HAL_ADC_ConfigChannel+0x2a0>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	4a18      	ldr	r2, [pc, #96]	; (8001bfc <HAL_ADC_ConfigChannel+0x2a0>)
 8001b9c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001ba0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001ba2:	4b16      	ldr	r3, [pc, #88]	; (8001bfc <HAL_ADC_ConfigChannel+0x2a0>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	4a15      	ldr	r2, [pc, #84]	; (8001bfc <HAL_ADC_ConfigChannel+0x2a0>)
 8001ba8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001bac:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a10      	ldr	r2, [pc, #64]	; (8001bf4 <HAL_ADC_ConfigChannel+0x298>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d111      	bne.n	8001bdc <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001bb8:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <HAL_ADC_ConfigChannel+0x2a4>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a11      	ldr	r2, [pc, #68]	; (8001c04 <HAL_ADC_ConfigChannel+0x2a8>)
 8001bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc2:	0c9a      	lsrs	r2, r3, #18
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001bce:	e002      	b.n	8001bd6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1f9      	bne.n	8001bd0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3714      	adds	r7, #20
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	10000012 	.word	0x10000012
 8001bf8:	40012000 	.word	0x40012000
 8001bfc:	40012300 	.word	0x40012300
 8001c00:	20000000 	.word	0x20000000
 8001c04:	431bde83 	.word	0x431bde83

08001c08 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001c10:	4b78      	ldr	r3, [pc, #480]	; (8001df4 <ADC_Init+0x1ec>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	4a77      	ldr	r2, [pc, #476]	; (8001df4 <ADC_Init+0x1ec>)
 8001c16:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001c1a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001c1c:	4b75      	ldr	r3, [pc, #468]	; (8001df4 <ADC_Init+0x1ec>)
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	4973      	ldr	r1, [pc, #460]	; (8001df4 <ADC_Init+0x1ec>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6859      	ldr	r1, [r3, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	021a      	lsls	r2, r3, #8
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6859      	ldr	r1, [r3, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689a      	ldr	r2, [r3, #8]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6899      	ldr	r1, [r3, #8]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	68da      	ldr	r2, [r3, #12]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c96:	4a58      	ldr	r2, [pc, #352]	; (8001df8 <ADC_Init+0x1f0>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d022      	beq.n	8001ce2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	689a      	ldr	r2, [r3, #8]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001caa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6899      	ldr	r1, [r3, #8]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ccc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6899      	ldr	r1, [r3, #8]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	e00f      	b.n	8001d02 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cf0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d00:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 0202 	bic.w	r2, r2, #2
 8001d10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6899      	ldr	r1, [r3, #8]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	005a      	lsls	r2, r3, #1
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	430a      	orrs	r2, r1
 8001d24:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d01b      	beq.n	8001d68 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d3e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d4e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6859      	ldr	r1, [r3, #4]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	035a      	lsls	r2, r3, #13
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	430a      	orrs	r2, r1
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	e007      	b.n	8001d78 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	685a      	ldr	r2, [r3, #4]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d76:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	3b01      	subs	r3, #1
 8001d94:	051a      	lsls	r2, r3, #20
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001dac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6899      	ldr	r1, [r3, #8]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001dba:	025a      	lsls	r2, r3, #9
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	689a      	ldr	r2, [r3, #8]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dd2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6899      	ldr	r1, [r3, #8]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	029a      	lsls	r2, r3, #10
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	430a      	orrs	r2, r1
 8001de6:	609a      	str	r2, [r3, #8]
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	40012300 	.word	0x40012300
 8001df8:	0f000001 	.word	0x0f000001

08001dfc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e20:	4b0b      	ldr	r3, [pc, #44]	; (8001e50 <__NVIC_SetPriorityGrouping+0x40>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e26:	68ba      	ldr	r2, [r7, #8]
 8001e28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e38:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <__NVIC_SetPriorityGrouping+0x44>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e3e:	4a04      	ldr	r2, [pc, #16]	; (8001e50 <__NVIC_SetPriorityGrouping+0x40>)
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	60d3      	str	r3, [r2, #12]
}
 8001e44:	bf00      	nop
 8001e46:	3714      	adds	r7, #20
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	e000ed00 	.word	0xe000ed00
 8001e54:	05fa0000 	.word	0x05fa0000

08001e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e5c:	4b04      	ldr	r3, [pc, #16]	; (8001e70 <__NVIC_GetPriorityGrouping+0x18>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	0a1b      	lsrs	r3, r3, #8
 8001e62:	f003 0307 	and.w	r3, r3, #7
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	e000ed00 	.word	0xe000ed00

08001e74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	db0b      	blt.n	8001e9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e86:	79fb      	ldrb	r3, [r7, #7]
 8001e88:	f003 021f 	and.w	r2, r3, #31
 8001e8c:	4907      	ldr	r1, [pc, #28]	; (8001eac <__NVIC_EnableIRQ+0x38>)
 8001e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e92:	095b      	lsrs	r3, r3, #5
 8001e94:	2001      	movs	r0, #1
 8001e96:	fa00 f202 	lsl.w	r2, r0, r2
 8001e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	e000e100 	.word	0xe000e100

08001eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	6039      	str	r1, [r7, #0]
 8001eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	db0a      	blt.n	8001eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	490c      	ldr	r1, [pc, #48]	; (8001efc <__NVIC_SetPriority+0x4c>)
 8001eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ece:	0112      	lsls	r2, r2, #4
 8001ed0:	b2d2      	uxtb	r2, r2
 8001ed2:	440b      	add	r3, r1
 8001ed4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ed8:	e00a      	b.n	8001ef0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	4908      	ldr	r1, [pc, #32]	; (8001f00 <__NVIC_SetPriority+0x50>)
 8001ee0:	79fb      	ldrb	r3, [r7, #7]
 8001ee2:	f003 030f 	and.w	r3, r3, #15
 8001ee6:	3b04      	subs	r3, #4
 8001ee8:	0112      	lsls	r2, r2, #4
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	440b      	add	r3, r1
 8001eee:	761a      	strb	r2, [r3, #24]
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	e000e100 	.word	0xe000e100
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b089      	sub	sp, #36	; 0x24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	f1c3 0307 	rsb	r3, r3, #7
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	bf28      	it	cs
 8001f22:	2304      	movcs	r3, #4
 8001f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	3304      	adds	r3, #4
 8001f2a:	2b06      	cmp	r3, #6
 8001f2c:	d902      	bls.n	8001f34 <NVIC_EncodePriority+0x30>
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	3b03      	subs	r3, #3
 8001f32:	e000      	b.n	8001f36 <NVIC_EncodePriority+0x32>
 8001f34:	2300      	movs	r3, #0
 8001f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f38:	f04f 32ff 	mov.w	r2, #4294967295
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	43da      	mvns	r2, r3
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	401a      	ands	r2, r3
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	fa01 f303 	lsl.w	r3, r1, r3
 8001f56:	43d9      	mvns	r1, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f5c:	4313      	orrs	r3, r2
         );
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3724      	adds	r7, #36	; 0x24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
	...

08001f6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f7c:	d301      	bcc.n	8001f82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e00f      	b.n	8001fa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f82:	4a0a      	ldr	r2, [pc, #40]	; (8001fac <SysTick_Config+0x40>)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f8a:	210f      	movs	r1, #15
 8001f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f90:	f7ff ff8e 	bl	8001eb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f94:	4b05      	ldr	r3, [pc, #20]	; (8001fac <SysTick_Config+0x40>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f9a:	4b04      	ldr	r3, [pc, #16]	; (8001fac <SysTick_Config+0x40>)
 8001f9c:	2207      	movs	r2, #7
 8001f9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	e000e010 	.word	0xe000e010

08001fb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7ff ff29 	bl	8001e10 <__NVIC_SetPriorityGrouping>
}
 8001fbe:	bf00      	nop
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b086      	sub	sp, #24
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	4603      	mov	r3, r0
 8001fce:	60b9      	str	r1, [r7, #8]
 8001fd0:	607a      	str	r2, [r7, #4]
 8001fd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fd8:	f7ff ff3e 	bl	8001e58 <__NVIC_GetPriorityGrouping>
 8001fdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	68b9      	ldr	r1, [r7, #8]
 8001fe2:	6978      	ldr	r0, [r7, #20]
 8001fe4:	f7ff ff8e 	bl	8001f04 <NVIC_EncodePriority>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fee:	4611      	mov	r1, r2
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff ff5d 	bl	8001eb0 <__NVIC_SetPriority>
}
 8001ff6:	bf00      	nop
 8001ff8:	3718      	adds	r7, #24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b082      	sub	sp, #8
 8002002:	af00      	add	r7, sp, #0
 8002004:	4603      	mov	r3, r0
 8002006:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff ff31 	bl	8001e74 <__NVIC_EnableIRQ>
}
 8002012:	bf00      	nop
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b082      	sub	sp, #8
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7ff ffa2 	bl	8001f6c <SysTick_Config>
 8002028:	4603      	mov	r3, r0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
	...

08002034 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002034:	b480      	push	{r7}
 8002036:	b089      	sub	sp, #36	; 0x24
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800203e:	2300      	movs	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002046:	2300      	movs	r3, #0
 8002048:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800204a:	2300      	movs	r3, #0
 800204c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
 8002052:	e175      	b.n	8002340 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002054:	2201      	movs	r2, #1
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	4013      	ands	r3, r2
 8002066:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	429a      	cmp	r2, r3
 800206e:	f040 8164 	bne.w	800233a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	2b01      	cmp	r3, #1
 800207c:	d005      	beq.n	800208a <HAL_GPIO_Init+0x56>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d130      	bne.n	80020ec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	2203      	movs	r2, #3
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43db      	mvns	r3, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4013      	ands	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020c0:	2201      	movs	r2, #1
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	091b      	lsrs	r3, r3, #4
 80020d6:	f003 0201 	and.w	r2, r3, #1
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d017      	beq.n	8002128 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	2203      	movs	r2, #3
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 0303 	and.w	r3, r3, #3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d123      	bne.n	800217c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	08da      	lsrs	r2, r3, #3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3208      	adds	r2, #8
 800213c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	220f      	movs	r2, #15
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	691a      	ldr	r2, [r3, #16]
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	08da      	lsrs	r2, r3, #3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3208      	adds	r2, #8
 8002176:	69b9      	ldr	r1, [r7, #24]
 8002178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	2203      	movs	r2, #3
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 0203 	and.w	r2, r3, #3
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 80be 	beq.w	800233a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021be:	4b66      	ldr	r3, [pc, #408]	; (8002358 <HAL_GPIO_Init+0x324>)
 80021c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c2:	4a65      	ldr	r2, [pc, #404]	; (8002358 <HAL_GPIO_Init+0x324>)
 80021c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021c8:	6453      	str	r3, [r2, #68]	; 0x44
 80021ca:	4b63      	ldr	r3, [pc, #396]	; (8002358 <HAL_GPIO_Init+0x324>)
 80021cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80021d6:	4a61      	ldr	r2, [pc, #388]	; (800235c <HAL_GPIO_Init+0x328>)
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	089b      	lsrs	r3, r3, #2
 80021dc:	3302      	adds	r3, #2
 80021de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	220f      	movs	r2, #15
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43db      	mvns	r3, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4013      	ands	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a58      	ldr	r2, [pc, #352]	; (8002360 <HAL_GPIO_Init+0x32c>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d037      	beq.n	8002272 <HAL_GPIO_Init+0x23e>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a57      	ldr	r2, [pc, #348]	; (8002364 <HAL_GPIO_Init+0x330>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d031      	beq.n	800226e <HAL_GPIO_Init+0x23a>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a56      	ldr	r2, [pc, #344]	; (8002368 <HAL_GPIO_Init+0x334>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d02b      	beq.n	800226a <HAL_GPIO_Init+0x236>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a55      	ldr	r2, [pc, #340]	; (800236c <HAL_GPIO_Init+0x338>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d025      	beq.n	8002266 <HAL_GPIO_Init+0x232>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a54      	ldr	r2, [pc, #336]	; (8002370 <HAL_GPIO_Init+0x33c>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d01f      	beq.n	8002262 <HAL_GPIO_Init+0x22e>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a53      	ldr	r2, [pc, #332]	; (8002374 <HAL_GPIO_Init+0x340>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d019      	beq.n	800225e <HAL_GPIO_Init+0x22a>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a52      	ldr	r2, [pc, #328]	; (8002378 <HAL_GPIO_Init+0x344>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d013      	beq.n	800225a <HAL_GPIO_Init+0x226>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a51      	ldr	r2, [pc, #324]	; (800237c <HAL_GPIO_Init+0x348>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d00d      	beq.n	8002256 <HAL_GPIO_Init+0x222>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a50      	ldr	r2, [pc, #320]	; (8002380 <HAL_GPIO_Init+0x34c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d007      	beq.n	8002252 <HAL_GPIO_Init+0x21e>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a4f      	ldr	r2, [pc, #316]	; (8002384 <HAL_GPIO_Init+0x350>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d101      	bne.n	800224e <HAL_GPIO_Init+0x21a>
 800224a:	2309      	movs	r3, #9
 800224c:	e012      	b.n	8002274 <HAL_GPIO_Init+0x240>
 800224e:	230a      	movs	r3, #10
 8002250:	e010      	b.n	8002274 <HAL_GPIO_Init+0x240>
 8002252:	2308      	movs	r3, #8
 8002254:	e00e      	b.n	8002274 <HAL_GPIO_Init+0x240>
 8002256:	2307      	movs	r3, #7
 8002258:	e00c      	b.n	8002274 <HAL_GPIO_Init+0x240>
 800225a:	2306      	movs	r3, #6
 800225c:	e00a      	b.n	8002274 <HAL_GPIO_Init+0x240>
 800225e:	2305      	movs	r3, #5
 8002260:	e008      	b.n	8002274 <HAL_GPIO_Init+0x240>
 8002262:	2304      	movs	r3, #4
 8002264:	e006      	b.n	8002274 <HAL_GPIO_Init+0x240>
 8002266:	2303      	movs	r3, #3
 8002268:	e004      	b.n	8002274 <HAL_GPIO_Init+0x240>
 800226a:	2302      	movs	r3, #2
 800226c:	e002      	b.n	8002274 <HAL_GPIO_Init+0x240>
 800226e:	2301      	movs	r3, #1
 8002270:	e000      	b.n	8002274 <HAL_GPIO_Init+0x240>
 8002272:	2300      	movs	r3, #0
 8002274:	69fa      	ldr	r2, [r7, #28]
 8002276:	f002 0203 	and.w	r2, r2, #3
 800227a:	0092      	lsls	r2, r2, #2
 800227c:	4093      	lsls	r3, r2
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4313      	orrs	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002284:	4935      	ldr	r1, [pc, #212]	; (800235c <HAL_GPIO_Init+0x328>)
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	089b      	lsrs	r3, r3, #2
 800228a:	3302      	adds	r3, #2
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002292:	4b3d      	ldr	r3, [pc, #244]	; (8002388 <HAL_GPIO_Init+0x354>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	43db      	mvns	r3, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4013      	ands	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022b6:	4a34      	ldr	r2, [pc, #208]	; (8002388 <HAL_GPIO_Init+0x354>)
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022bc:	4b32      	ldr	r3, [pc, #200]	; (8002388 <HAL_GPIO_Init+0x354>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4313      	orrs	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022e0:	4a29      	ldr	r2, [pc, #164]	; (8002388 <HAL_GPIO_Init+0x354>)
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022e6:	4b28      	ldr	r3, [pc, #160]	; (8002388 <HAL_GPIO_Init+0x354>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	43db      	mvns	r3, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4013      	ands	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800230a:	4a1f      	ldr	r2, [pc, #124]	; (8002388 <HAL_GPIO_Init+0x354>)
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002310:	4b1d      	ldr	r3, [pc, #116]	; (8002388 <HAL_GPIO_Init+0x354>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	43db      	mvns	r3, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4013      	ands	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002334:	4a14      	ldr	r2, [pc, #80]	; (8002388 <HAL_GPIO_Init+0x354>)
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	3301      	adds	r3, #1
 800233e:	61fb      	str	r3, [r7, #28]
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	2b0f      	cmp	r3, #15
 8002344:	f67f ae86 	bls.w	8002054 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002348:	bf00      	nop
 800234a:	bf00      	nop
 800234c:	3724      	adds	r7, #36	; 0x24
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	40023800 	.word	0x40023800
 800235c:	40013800 	.word	0x40013800
 8002360:	40020000 	.word	0x40020000
 8002364:	40020400 	.word	0x40020400
 8002368:	40020800 	.word	0x40020800
 800236c:	40020c00 	.word	0x40020c00
 8002370:	40021000 	.word	0x40021000
 8002374:	40021400 	.word	0x40021400
 8002378:	40021800 	.word	0x40021800
 800237c:	40021c00 	.word	0x40021c00
 8002380:	40022000 	.word	0x40022000
 8002384:	40022400 	.word	0x40022400
 8002388:	40013c00 	.word	0x40013c00

0800238c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	460b      	mov	r3, r1
 8002396:	807b      	strh	r3, [r7, #2]
 8002398:	4613      	mov	r3, r2
 800239a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800239c:	787b      	ldrb	r3, [r7, #1]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023a2:	887a      	ldrh	r2, [r7, #2]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80023a8:	e003      	b.n	80023b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80023aa:	887b      	ldrh	r3, [r7, #2]
 80023ac:	041a      	lsls	r2, r3, #16
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	619a      	str	r2, [r3, #24]
}
 80023b2:	bf00      	nop
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
	...

080023c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80023c8:	2300      	movs	r3, #0
 80023ca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e291      	b.n	80028fa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 8087 	beq.w	80024f2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023e4:	4b96      	ldr	r3, [pc, #600]	; (8002640 <HAL_RCC_OscConfig+0x280>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f003 030c 	and.w	r3, r3, #12
 80023ec:	2b04      	cmp	r3, #4
 80023ee:	d00c      	beq.n	800240a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023f0:	4b93      	ldr	r3, [pc, #588]	; (8002640 <HAL_RCC_OscConfig+0x280>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f003 030c 	and.w	r3, r3, #12
 80023f8:	2b08      	cmp	r3, #8
 80023fa:	d112      	bne.n	8002422 <HAL_RCC_OscConfig+0x62>
 80023fc:	4b90      	ldr	r3, [pc, #576]	; (8002640 <HAL_RCC_OscConfig+0x280>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002404:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002408:	d10b      	bne.n	8002422 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800240a:	4b8d      	ldr	r3, [pc, #564]	; (8002640 <HAL_RCC_OscConfig+0x280>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d06c      	beq.n	80024f0 <HAL_RCC_OscConfig+0x130>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d168      	bne.n	80024f0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e26b      	b.n	80028fa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800242a:	d106      	bne.n	800243a <HAL_RCC_OscConfig+0x7a>
 800242c:	4b84      	ldr	r3, [pc, #528]	; (8002640 <HAL_RCC_OscConfig+0x280>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a83      	ldr	r2, [pc, #524]	; (8002640 <HAL_RCC_OscConfig+0x280>)
 8002432:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002436:	6013      	str	r3, [r2, #0]
 8002438:	e02e      	b.n	8002498 <HAL_RCC_OscConfig+0xd8>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10c      	bne.n	800245c <HAL_RCC_OscConfig+0x9c>
 8002442:	4b7f      	ldr	r3, [pc, #508]	; (8002640 <HAL_RCC_OscConfig+0x280>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a7e      	ldr	r2, [pc, #504]	; (8002640 <HAL_RCC_OscConfig+0x280>)
 8002448:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800244c:	6013      	str	r3, [r2, #0]
 800244e:	4b7c      	ldr	r3, [pc, #496]	; (8002640 <HAL_RCC_OscConfig+0x280>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a7b      	ldr	r2, [pc, #492]	; (8002640 <HAL_RCC_OscConfig+0x280>)
 8002454:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	e01d      	b.n	8002498 <HAL_RCC_OscConfig+0xd8>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002464:	d10c      	bne.n	8002480 <HAL_RCC_OscConfig+0xc0>
 8002466:	4b76      	ldr	r3, [pc, #472]	; (8002640 <HAL_RCC_OscConfig+0x280>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a75      	ldr	r2, [pc, #468]	; (8002640 <HAL_RCC_OscConfig+0x280>)
 800246c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	4b73      	ldr	r3, [pc, #460]	; (8002640 <HAL_RCC_OscConfig+0x280>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a72      	ldr	r2, [pc, #456]	; (8002640 <HAL_RCC_OscConfig+0x280>)
 8002478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	e00b      	b.n	8002498 <HAL_RCC_OscConfig+0xd8>
 8002480:	4b6f      	ldr	r3, [pc, #444]	; (8002640 <HAL_RCC_OscConfig+0x280>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a6e      	ldr	r2, [pc, #440]	; (8002640 <HAL_RCC_OscConfig+0x280>)
 8002486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800248a:	6013      	str	r3, [r2, #0]
 800248c:	4b6c      	ldr	r3, [pc, #432]	; (8002640 <HAL_RCC_OscConfig+0x280>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a6b      	ldr	r2, [pc, #428]	; (8002640 <HAL_RCC_OscConfig+0x280>)
 8002492:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002496:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d013      	beq.n	80024c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a0:	f7ff f80c 	bl	80014bc <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024a8:	f7ff f808 	bl	80014bc <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b64      	cmp	r3, #100	; 0x64
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e21f      	b.n	80028fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ba:	4b61      	ldr	r3, [pc, #388]	; (8002640 <HAL_RCC_OscConfig+0x280>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0f0      	beq.n	80024a8 <HAL_RCC_OscConfig+0xe8>
 80024c6:	e014      	b.n	80024f2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c8:	f7fe fff8 	bl	80014bc <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d0:	f7fe fff4 	bl	80014bc <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b64      	cmp	r3, #100	; 0x64
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e20b      	b.n	80028fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024e2:	4b57      	ldr	r3, [pc, #348]	; (8002640 <HAL_RCC_OscConfig+0x280>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f0      	bne.n	80024d0 <HAL_RCC_OscConfig+0x110>
 80024ee:	e000      	b.n	80024f2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d069      	beq.n	80025d2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024fe:	4b50      	ldr	r3, [pc, #320]	; (8002640 <HAL_RCC_OscConfig+0x280>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 030c 	and.w	r3, r3, #12
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00b      	beq.n	8002522 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800250a:	4b4d      	ldr	r3, [pc, #308]	; (8002640 <HAL_RCC_OscConfig+0x280>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 030c 	and.w	r3, r3, #12
 8002512:	2b08      	cmp	r3, #8
 8002514:	d11c      	bne.n	8002550 <HAL_RCC_OscConfig+0x190>
 8002516:	4b4a      	ldr	r3, [pc, #296]	; (8002640 <HAL_RCC_OscConfig+0x280>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d116      	bne.n	8002550 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002522:	4b47      	ldr	r3, [pc, #284]	; (8002640 <HAL_RCC_OscConfig+0x280>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d005      	beq.n	800253a <HAL_RCC_OscConfig+0x17a>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d001      	beq.n	800253a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e1df      	b.n	80028fa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800253a:	4b41      	ldr	r3, [pc, #260]	; (8002640 <HAL_RCC_OscConfig+0x280>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	493d      	ldr	r1, [pc, #244]	; (8002640 <HAL_RCC_OscConfig+0x280>)
 800254a:	4313      	orrs	r3, r2
 800254c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800254e:	e040      	b.n	80025d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d023      	beq.n	80025a0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002558:	4b39      	ldr	r3, [pc, #228]	; (8002640 <HAL_RCC_OscConfig+0x280>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a38      	ldr	r2, [pc, #224]	; (8002640 <HAL_RCC_OscConfig+0x280>)
 800255e:	f043 0301 	orr.w	r3, r3, #1
 8002562:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002564:	f7fe ffaa 	bl	80014bc <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800256c:	f7fe ffa6 	bl	80014bc <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e1bd      	b.n	80028fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800257e:	4b30      	ldr	r3, [pc, #192]	; (8002640 <HAL_RCC_OscConfig+0x280>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0f0      	beq.n	800256c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800258a:	4b2d      	ldr	r3, [pc, #180]	; (8002640 <HAL_RCC_OscConfig+0x280>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	4929      	ldr	r1, [pc, #164]	; (8002640 <HAL_RCC_OscConfig+0x280>)
 800259a:	4313      	orrs	r3, r2
 800259c:	600b      	str	r3, [r1, #0]
 800259e:	e018      	b.n	80025d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025a0:	4b27      	ldr	r3, [pc, #156]	; (8002640 <HAL_RCC_OscConfig+0x280>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a26      	ldr	r2, [pc, #152]	; (8002640 <HAL_RCC_OscConfig+0x280>)
 80025a6:	f023 0301 	bic.w	r3, r3, #1
 80025aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ac:	f7fe ff86 	bl	80014bc <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b4:	f7fe ff82 	bl	80014bc <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e199      	b.n	80028fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025c6:	4b1e      	ldr	r3, [pc, #120]	; (8002640 <HAL_RCC_OscConfig+0x280>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1f0      	bne.n	80025b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0308 	and.w	r3, r3, #8
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d038      	beq.n	8002650 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d019      	beq.n	800261a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025e6:	4b16      	ldr	r3, [pc, #88]	; (8002640 <HAL_RCC_OscConfig+0x280>)
 80025e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ea:	4a15      	ldr	r2, [pc, #84]	; (8002640 <HAL_RCC_OscConfig+0x280>)
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f2:	f7fe ff63 	bl	80014bc <HAL_GetTick>
 80025f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f8:	e008      	b.n	800260c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025fa:	f7fe ff5f 	bl	80014bc <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e176      	b.n	80028fa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800260c:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <HAL_RCC_OscConfig+0x280>)
 800260e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0f0      	beq.n	80025fa <HAL_RCC_OscConfig+0x23a>
 8002618:	e01a      	b.n	8002650 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800261a:	4b09      	ldr	r3, [pc, #36]	; (8002640 <HAL_RCC_OscConfig+0x280>)
 800261c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800261e:	4a08      	ldr	r2, [pc, #32]	; (8002640 <HAL_RCC_OscConfig+0x280>)
 8002620:	f023 0301 	bic.w	r3, r3, #1
 8002624:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002626:	f7fe ff49 	bl	80014bc <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800262c:	e00a      	b.n	8002644 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800262e:	f7fe ff45 	bl	80014bc <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d903      	bls.n	8002644 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e15c      	b.n	80028fa <HAL_RCC_OscConfig+0x53a>
 8002640:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002644:	4b91      	ldr	r3, [pc, #580]	; (800288c <HAL_RCC_OscConfig+0x4cc>)
 8002646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1ee      	bne.n	800262e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0304 	and.w	r3, r3, #4
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 80a4 	beq.w	80027a6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800265e:	4b8b      	ldr	r3, [pc, #556]	; (800288c <HAL_RCC_OscConfig+0x4cc>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10d      	bne.n	8002686 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800266a:	4b88      	ldr	r3, [pc, #544]	; (800288c <HAL_RCC_OscConfig+0x4cc>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	4a87      	ldr	r2, [pc, #540]	; (800288c <HAL_RCC_OscConfig+0x4cc>)
 8002670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002674:	6413      	str	r3, [r2, #64]	; 0x40
 8002676:	4b85      	ldr	r3, [pc, #532]	; (800288c <HAL_RCC_OscConfig+0x4cc>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267e:	60bb      	str	r3, [r7, #8]
 8002680:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002682:	2301      	movs	r3, #1
 8002684:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002686:	4b82      	ldr	r3, [pc, #520]	; (8002890 <HAL_RCC_OscConfig+0x4d0>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268e:	2b00      	cmp	r3, #0
 8002690:	d118      	bne.n	80026c4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002692:	4b7f      	ldr	r3, [pc, #508]	; (8002890 <HAL_RCC_OscConfig+0x4d0>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a7e      	ldr	r2, [pc, #504]	; (8002890 <HAL_RCC_OscConfig+0x4d0>)
 8002698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800269c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800269e:	f7fe ff0d 	bl	80014bc <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a6:	f7fe ff09 	bl	80014bc <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b64      	cmp	r3, #100	; 0x64
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e120      	b.n	80028fa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026b8:	4b75      	ldr	r3, [pc, #468]	; (8002890 <HAL_RCC_OscConfig+0x4d0>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0f0      	beq.n	80026a6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d106      	bne.n	80026da <HAL_RCC_OscConfig+0x31a>
 80026cc:	4b6f      	ldr	r3, [pc, #444]	; (800288c <HAL_RCC_OscConfig+0x4cc>)
 80026ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d0:	4a6e      	ldr	r2, [pc, #440]	; (800288c <HAL_RCC_OscConfig+0x4cc>)
 80026d2:	f043 0301 	orr.w	r3, r3, #1
 80026d6:	6713      	str	r3, [r2, #112]	; 0x70
 80026d8:	e02d      	b.n	8002736 <HAL_RCC_OscConfig+0x376>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10c      	bne.n	80026fc <HAL_RCC_OscConfig+0x33c>
 80026e2:	4b6a      	ldr	r3, [pc, #424]	; (800288c <HAL_RCC_OscConfig+0x4cc>)
 80026e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e6:	4a69      	ldr	r2, [pc, #420]	; (800288c <HAL_RCC_OscConfig+0x4cc>)
 80026e8:	f023 0301 	bic.w	r3, r3, #1
 80026ec:	6713      	str	r3, [r2, #112]	; 0x70
 80026ee:	4b67      	ldr	r3, [pc, #412]	; (800288c <HAL_RCC_OscConfig+0x4cc>)
 80026f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f2:	4a66      	ldr	r2, [pc, #408]	; (800288c <HAL_RCC_OscConfig+0x4cc>)
 80026f4:	f023 0304 	bic.w	r3, r3, #4
 80026f8:	6713      	str	r3, [r2, #112]	; 0x70
 80026fa:	e01c      	b.n	8002736 <HAL_RCC_OscConfig+0x376>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	2b05      	cmp	r3, #5
 8002702:	d10c      	bne.n	800271e <HAL_RCC_OscConfig+0x35e>
 8002704:	4b61      	ldr	r3, [pc, #388]	; (800288c <HAL_RCC_OscConfig+0x4cc>)
 8002706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002708:	4a60      	ldr	r2, [pc, #384]	; (800288c <HAL_RCC_OscConfig+0x4cc>)
 800270a:	f043 0304 	orr.w	r3, r3, #4
 800270e:	6713      	str	r3, [r2, #112]	; 0x70
 8002710:	4b5e      	ldr	r3, [pc, #376]	; (800288c <HAL_RCC_OscConfig+0x4cc>)
 8002712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002714:	4a5d      	ldr	r2, [pc, #372]	; (800288c <HAL_RCC_OscConfig+0x4cc>)
 8002716:	f043 0301 	orr.w	r3, r3, #1
 800271a:	6713      	str	r3, [r2, #112]	; 0x70
 800271c:	e00b      	b.n	8002736 <HAL_RCC_OscConfig+0x376>
 800271e:	4b5b      	ldr	r3, [pc, #364]	; (800288c <HAL_RCC_OscConfig+0x4cc>)
 8002720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002722:	4a5a      	ldr	r2, [pc, #360]	; (800288c <HAL_RCC_OscConfig+0x4cc>)
 8002724:	f023 0301 	bic.w	r3, r3, #1
 8002728:	6713      	str	r3, [r2, #112]	; 0x70
 800272a:	4b58      	ldr	r3, [pc, #352]	; (800288c <HAL_RCC_OscConfig+0x4cc>)
 800272c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272e:	4a57      	ldr	r2, [pc, #348]	; (800288c <HAL_RCC_OscConfig+0x4cc>)
 8002730:	f023 0304 	bic.w	r3, r3, #4
 8002734:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d015      	beq.n	800276a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273e:	f7fe febd 	bl	80014bc <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002744:	e00a      	b.n	800275c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002746:	f7fe feb9 	bl	80014bc <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	f241 3288 	movw	r2, #5000	; 0x1388
 8002754:	4293      	cmp	r3, r2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e0ce      	b.n	80028fa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800275c:	4b4b      	ldr	r3, [pc, #300]	; (800288c <HAL_RCC_OscConfig+0x4cc>)
 800275e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0ee      	beq.n	8002746 <HAL_RCC_OscConfig+0x386>
 8002768:	e014      	b.n	8002794 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800276a:	f7fe fea7 	bl	80014bc <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002770:	e00a      	b.n	8002788 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002772:	f7fe fea3 	bl	80014bc <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002780:	4293      	cmp	r3, r2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e0b8      	b.n	80028fa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002788:	4b40      	ldr	r3, [pc, #256]	; (800288c <HAL_RCC_OscConfig+0x4cc>)
 800278a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1ee      	bne.n	8002772 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002794:	7dfb      	ldrb	r3, [r7, #23]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d105      	bne.n	80027a6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800279a:	4b3c      	ldr	r3, [pc, #240]	; (800288c <HAL_RCC_OscConfig+0x4cc>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	4a3b      	ldr	r2, [pc, #236]	; (800288c <HAL_RCC_OscConfig+0x4cc>)
 80027a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f000 80a4 	beq.w	80028f8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027b0:	4b36      	ldr	r3, [pc, #216]	; (800288c <HAL_RCC_OscConfig+0x4cc>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 030c 	and.w	r3, r3, #12
 80027b8:	2b08      	cmp	r3, #8
 80027ba:	d06b      	beq.n	8002894 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d149      	bne.n	8002858 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c4:	4b31      	ldr	r3, [pc, #196]	; (800288c <HAL_RCC_OscConfig+0x4cc>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a30      	ldr	r2, [pc, #192]	; (800288c <HAL_RCC_OscConfig+0x4cc>)
 80027ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d0:	f7fe fe74 	bl	80014bc <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d8:	f7fe fe70 	bl	80014bc <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e087      	b.n	80028fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ea:	4b28      	ldr	r3, [pc, #160]	; (800288c <HAL_RCC_OscConfig+0x4cc>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f0      	bne.n	80027d8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69da      	ldr	r2, [r3, #28]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002804:	019b      	lsls	r3, r3, #6
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280c:	085b      	lsrs	r3, r3, #1
 800280e:	3b01      	subs	r3, #1
 8002810:	041b      	lsls	r3, r3, #16
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002818:	061b      	lsls	r3, r3, #24
 800281a:	4313      	orrs	r3, r2
 800281c:	4a1b      	ldr	r2, [pc, #108]	; (800288c <HAL_RCC_OscConfig+0x4cc>)
 800281e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002822:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002824:	4b19      	ldr	r3, [pc, #100]	; (800288c <HAL_RCC_OscConfig+0x4cc>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a18      	ldr	r2, [pc, #96]	; (800288c <HAL_RCC_OscConfig+0x4cc>)
 800282a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800282e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002830:	f7fe fe44 	bl	80014bc <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002838:	f7fe fe40 	bl	80014bc <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e057      	b.n	80028fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800284a:	4b10      	ldr	r3, [pc, #64]	; (800288c <HAL_RCC_OscConfig+0x4cc>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d0f0      	beq.n	8002838 <HAL_RCC_OscConfig+0x478>
 8002856:	e04f      	b.n	80028f8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002858:	4b0c      	ldr	r3, [pc, #48]	; (800288c <HAL_RCC_OscConfig+0x4cc>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a0b      	ldr	r2, [pc, #44]	; (800288c <HAL_RCC_OscConfig+0x4cc>)
 800285e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002862:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002864:	f7fe fe2a 	bl	80014bc <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800286c:	f7fe fe26 	bl	80014bc <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e03d      	b.n	80028fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800287e:	4b03      	ldr	r3, [pc, #12]	; (800288c <HAL_RCC_OscConfig+0x4cc>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f0      	bne.n	800286c <HAL_RCC_OscConfig+0x4ac>
 800288a:	e035      	b.n	80028f8 <HAL_RCC_OscConfig+0x538>
 800288c:	40023800 	.word	0x40023800
 8002890:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002894:	4b1b      	ldr	r3, [pc, #108]	; (8002904 <HAL_RCC_OscConfig+0x544>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d028      	beq.n	80028f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d121      	bne.n	80028f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d11a      	bne.n	80028f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028c4:	4013      	ands	r3, r2
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028ca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d111      	bne.n	80028f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028da:	085b      	lsrs	r3, r3, #1
 80028dc:	3b01      	subs	r3, #1
 80028de:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d107      	bne.n	80028f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d001      	beq.n	80028f8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e000      	b.n	80028fa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3718      	adds	r7, #24
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	40023800 	.word	0x40023800

08002908 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002912:	2300      	movs	r3, #0
 8002914:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e0d0      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002920:	4b6a      	ldr	r3, [pc, #424]	; (8002acc <HAL_RCC_ClockConfig+0x1c4>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 030f 	and.w	r3, r3, #15
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	d910      	bls.n	8002950 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292e:	4b67      	ldr	r3, [pc, #412]	; (8002acc <HAL_RCC_ClockConfig+0x1c4>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f023 020f 	bic.w	r2, r3, #15
 8002936:	4965      	ldr	r1, [pc, #404]	; (8002acc <HAL_RCC_ClockConfig+0x1c4>)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	4313      	orrs	r3, r2
 800293c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800293e:	4b63      	ldr	r3, [pc, #396]	; (8002acc <HAL_RCC_ClockConfig+0x1c4>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 030f 	and.w	r3, r3, #15
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	429a      	cmp	r2, r3
 800294a:	d001      	beq.n	8002950 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e0b8      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d020      	beq.n	800299e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0304 	and.w	r3, r3, #4
 8002964:	2b00      	cmp	r3, #0
 8002966:	d005      	beq.n	8002974 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002968:	4b59      	ldr	r3, [pc, #356]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c8>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	4a58      	ldr	r2, [pc, #352]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c8>)
 800296e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002972:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0308 	and.w	r3, r3, #8
 800297c:	2b00      	cmp	r3, #0
 800297e:	d005      	beq.n	800298c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002980:	4b53      	ldr	r3, [pc, #332]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	4a52      	ldr	r2, [pc, #328]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8002986:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800298a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800298c:	4b50      	ldr	r3, [pc, #320]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c8>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	494d      	ldr	r1, [pc, #308]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c8>)
 800299a:	4313      	orrs	r3, r2
 800299c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d040      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d107      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029b2:	4b47      	ldr	r3, [pc, #284]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c8>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d115      	bne.n	80029ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e07f      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d107      	bne.n	80029da <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ca:	4b41      	ldr	r3, [pc, #260]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c8>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d109      	bne.n	80029ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e073      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029da:	4b3d      	ldr	r3, [pc, #244]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c8>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e06b      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ea:	4b39      	ldr	r3, [pc, #228]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c8>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f023 0203 	bic.w	r2, r3, #3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	4936      	ldr	r1, [pc, #216]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c8>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029fc:	f7fe fd5e 	bl	80014bc <HAL_GetTick>
 8002a00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a02:	e00a      	b.n	8002a1a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a04:	f7fe fd5a 	bl	80014bc <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e053      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1a:	4b2d      	ldr	r3, [pc, #180]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 020c 	and.w	r2, r3, #12
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d1eb      	bne.n	8002a04 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a2c:	4b27      	ldr	r3, [pc, #156]	; (8002acc <HAL_RCC_ClockConfig+0x1c4>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 030f 	and.w	r3, r3, #15
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d210      	bcs.n	8002a5c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3a:	4b24      	ldr	r3, [pc, #144]	; (8002acc <HAL_RCC_ClockConfig+0x1c4>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f023 020f 	bic.w	r2, r3, #15
 8002a42:	4922      	ldr	r1, [pc, #136]	; (8002acc <HAL_RCC_ClockConfig+0x1c4>)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4a:	4b20      	ldr	r3, [pc, #128]	; (8002acc <HAL_RCC_ClockConfig+0x1c4>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 030f 	and.w	r3, r3, #15
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d001      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e032      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d008      	beq.n	8002a7a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a68:	4b19      	ldr	r3, [pc, #100]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	4916      	ldr	r1, [pc, #88]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d009      	beq.n	8002a9a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a86:	4b12      	ldr	r3, [pc, #72]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	490e      	ldr	r1, [pc, #56]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a9a:	f000 f821 	bl	8002ae0 <HAL_RCC_GetSysClockFreq>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	4b0b      	ldr	r3, [pc, #44]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	091b      	lsrs	r3, r3, #4
 8002aa6:	f003 030f 	and.w	r3, r3, #15
 8002aaa:	490a      	ldr	r1, [pc, #40]	; (8002ad4 <HAL_RCC_ClockConfig+0x1cc>)
 8002aac:	5ccb      	ldrb	r3, [r1, r3]
 8002aae:	fa22 f303 	lsr.w	r3, r2, r3
 8002ab2:	4a09      	ldr	r2, [pc, #36]	; (8002ad8 <HAL_RCC_ClockConfig+0x1d0>)
 8002ab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ab6:	4b09      	ldr	r3, [pc, #36]	; (8002adc <HAL_RCC_ClockConfig+0x1d4>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fe fcba 	bl	8001434 <HAL_InitTick>

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40023c00 	.word	0x40023c00
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	080047c8 	.word	0x080047c8
 8002ad8:	20000000 	.word	0x20000000
 8002adc:	20000004 	.word	0x20000004

08002ae0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ae4:	b090      	sub	sp, #64	; 0x40
 8002ae6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	637b      	str	r3, [r7, #52]	; 0x34
 8002aec:	2300      	movs	r3, #0
 8002aee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002af0:	2300      	movs	r3, #0
 8002af2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002af4:	2300      	movs	r3, #0
 8002af6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002af8:	4b59      	ldr	r3, [pc, #356]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 030c 	and.w	r3, r3, #12
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d00d      	beq.n	8002b20 <HAL_RCC_GetSysClockFreq+0x40>
 8002b04:	2b08      	cmp	r3, #8
 8002b06:	f200 80a1 	bhi.w	8002c4c <HAL_RCC_GetSysClockFreq+0x16c>
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d002      	beq.n	8002b14 <HAL_RCC_GetSysClockFreq+0x34>
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	d003      	beq.n	8002b1a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b12:	e09b      	b.n	8002c4c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b14:	4b53      	ldr	r3, [pc, #332]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b16:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b18:	e09b      	b.n	8002c52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b1a:	4b53      	ldr	r3, [pc, #332]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b1c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b1e:	e098      	b.n	8002c52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b20:	4b4f      	ldr	r3, [pc, #316]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b28:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002b2a:	4b4d      	ldr	r3, [pc, #308]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d028      	beq.n	8002b88 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b36:	4b4a      	ldr	r3, [pc, #296]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	099b      	lsrs	r3, r3, #6
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	623b      	str	r3, [r7, #32]
 8002b40:	627a      	str	r2, [r7, #36]	; 0x24
 8002b42:	6a3b      	ldr	r3, [r7, #32]
 8002b44:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b48:	2100      	movs	r1, #0
 8002b4a:	4b47      	ldr	r3, [pc, #284]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b4c:	fb03 f201 	mul.w	r2, r3, r1
 8002b50:	2300      	movs	r3, #0
 8002b52:	fb00 f303 	mul.w	r3, r0, r3
 8002b56:	4413      	add	r3, r2
 8002b58:	4a43      	ldr	r2, [pc, #268]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b5a:	fba0 1202 	umull	r1, r2, r0, r2
 8002b5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b60:	460a      	mov	r2, r1
 8002b62:	62ba      	str	r2, [r7, #40]	; 0x28
 8002b64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b66:	4413      	add	r3, r2
 8002b68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	61bb      	str	r3, [r7, #24]
 8002b70:	61fa      	str	r2, [r7, #28]
 8002b72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b76:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b7a:	f7fd fb99 	bl	80002b0 <__aeabi_uldivmod>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	460b      	mov	r3, r1
 8002b82:	4613      	mov	r3, r2
 8002b84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b86:	e053      	b.n	8002c30 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b88:	4b35      	ldr	r3, [pc, #212]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	099b      	lsrs	r3, r3, #6
 8002b8e:	2200      	movs	r2, #0
 8002b90:	613b      	str	r3, [r7, #16]
 8002b92:	617a      	str	r2, [r7, #20]
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002b9a:	f04f 0b00 	mov.w	fp, #0
 8002b9e:	4652      	mov	r2, sl
 8002ba0:	465b      	mov	r3, fp
 8002ba2:	f04f 0000 	mov.w	r0, #0
 8002ba6:	f04f 0100 	mov.w	r1, #0
 8002baa:	0159      	lsls	r1, r3, #5
 8002bac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bb0:	0150      	lsls	r0, r2, #5
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	ebb2 080a 	subs.w	r8, r2, sl
 8002bba:	eb63 090b 	sbc.w	r9, r3, fp
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	f04f 0300 	mov.w	r3, #0
 8002bc6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002bca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002bce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002bd2:	ebb2 0408 	subs.w	r4, r2, r8
 8002bd6:	eb63 0509 	sbc.w	r5, r3, r9
 8002bda:	f04f 0200 	mov.w	r2, #0
 8002bde:	f04f 0300 	mov.w	r3, #0
 8002be2:	00eb      	lsls	r3, r5, #3
 8002be4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002be8:	00e2      	lsls	r2, r4, #3
 8002bea:	4614      	mov	r4, r2
 8002bec:	461d      	mov	r5, r3
 8002bee:	eb14 030a 	adds.w	r3, r4, sl
 8002bf2:	603b      	str	r3, [r7, #0]
 8002bf4:	eb45 030b 	adc.w	r3, r5, fp
 8002bf8:	607b      	str	r3, [r7, #4]
 8002bfa:	f04f 0200 	mov.w	r2, #0
 8002bfe:	f04f 0300 	mov.w	r3, #0
 8002c02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c06:	4629      	mov	r1, r5
 8002c08:	028b      	lsls	r3, r1, #10
 8002c0a:	4621      	mov	r1, r4
 8002c0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c10:	4621      	mov	r1, r4
 8002c12:	028a      	lsls	r2, r1, #10
 8002c14:	4610      	mov	r0, r2
 8002c16:	4619      	mov	r1, r3
 8002c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	60bb      	str	r3, [r7, #8]
 8002c1e:	60fa      	str	r2, [r7, #12]
 8002c20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c24:	f7fd fb44 	bl	80002b0 <__aeabi_uldivmod>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002c30:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	0c1b      	lsrs	r3, r3, #16
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002c40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c48:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c4a:	e002      	b.n	8002c52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c4c:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c4e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3740      	adds	r7, #64	; 0x40
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c5e:	bf00      	nop
 8002c60:	40023800 	.word	0x40023800
 8002c64:	00f42400 	.word	0x00f42400
 8002c68:	017d7840 	.word	0x017d7840

08002c6c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c70:	4b03      	ldr	r3, [pc, #12]	; (8002c80 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c72:	681b      	ldr	r3, [r3, #0]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	20000000 	.word	0x20000000

08002c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c88:	f7ff fff0 	bl	8002c6c <HAL_RCC_GetHCLKFreq>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	4b05      	ldr	r3, [pc, #20]	; (8002ca4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	0a9b      	lsrs	r3, r3, #10
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	4903      	ldr	r1, [pc, #12]	; (8002ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c9a:	5ccb      	ldrb	r3, [r1, r3]
 8002c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	080047d8 	.word	0x080047d8

08002cac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cb0:	f7ff ffdc 	bl	8002c6c <HAL_RCC_GetHCLKFreq>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	0b5b      	lsrs	r3, r3, #13
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	4903      	ldr	r1, [pc, #12]	; (8002cd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cc2:	5ccb      	ldrb	r3, [r1, r3]
 8002cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	080047d8 	.word	0x080047d8

08002cd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b088      	sub	sp, #32
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002cec:	2300      	movs	r3, #0
 8002cee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d012      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002cfc:	4b69      	ldr	r3, [pc, #420]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	4a68      	ldr	r2, [pc, #416]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d02:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002d06:	6093      	str	r3, [r2, #8]
 8002d08:	4b66      	ldr	r3, [pc, #408]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d10:	4964      	ldr	r1, [pc, #400]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d017      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d2e:	4b5d      	ldr	r3, [pc, #372]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d3c:	4959      	ldr	r1, [pc, #356]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d4c:	d101      	bne.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d017      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d6a:	4b4e      	ldr	r3, [pc, #312]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d70:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d78:	494a      	ldr	r1, [pc, #296]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d88:	d101      	bne.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002d96:	2301      	movs	r3, #1
 8002d98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002da6:	2301      	movs	r3, #1
 8002da8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0320 	and.w	r3, r3, #32
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f000 808b 	beq.w	8002ece <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002db8:	4b3a      	ldr	r3, [pc, #232]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbc:	4a39      	ldr	r2, [pc, #228]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dc2:	6413      	str	r3, [r2, #64]	; 0x40
 8002dc4:	4b37      	ldr	r3, [pc, #220]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dcc:	60bb      	str	r3, [r7, #8]
 8002dce:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002dd0:	4b35      	ldr	r3, [pc, #212]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a34      	ldr	r2, [pc, #208]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ddc:	f7fe fb6e 	bl	80014bc <HAL_GetTick>
 8002de0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002de2:	e008      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002de4:	f7fe fb6a 	bl	80014bc <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b64      	cmp	r3, #100	; 0x64
 8002df0:	d901      	bls.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e357      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002df6:	4b2c      	ldr	r3, [pc, #176]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0f0      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e02:	4b28      	ldr	r3, [pc, #160]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e0a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d035      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d02e      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e20:	4b20      	ldr	r3, [pc, #128]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e28:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e2a:	4b1e      	ldr	r3, [pc, #120]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2e:	4a1d      	ldr	r2, [pc, #116]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e34:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e36:	4b1b      	ldr	r3, [pc, #108]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3a:	4a1a      	ldr	r2, [pc, #104]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e40:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002e42:	4a18      	ldr	r2, [pc, #96]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e48:	4b16      	ldr	r3, [pc, #88]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d114      	bne.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e54:	f7fe fb32 	bl	80014bc <HAL_GetTick>
 8002e58:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e5a:	e00a      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e5c:	f7fe fb2e 	bl	80014bc <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e319      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e72:	4b0c      	ldr	r3, [pc, #48]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0ee      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e8a:	d111      	bne.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002e8c:	4b05      	ldr	r3, [pc, #20]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e98:	4b04      	ldr	r3, [pc, #16]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e9a:	400b      	ands	r3, r1
 8002e9c:	4901      	ldr	r1, [pc, #4]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	608b      	str	r3, [r1, #8]
 8002ea2:	e00b      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	40007000 	.word	0x40007000
 8002eac:	0ffffcff 	.word	0x0ffffcff
 8002eb0:	4baa      	ldr	r3, [pc, #680]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	4aa9      	ldr	r2, [pc, #676]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eb6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002eba:	6093      	str	r3, [r2, #8]
 8002ebc:	4ba7      	ldr	r3, [pc, #668]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ebe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec8:	49a4      	ldr	r1, [pc, #656]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0310 	and.w	r3, r3, #16
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d010      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002eda:	4ba0      	ldr	r3, [pc, #640]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ee0:	4a9e      	ldr	r2, [pc, #632]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ee2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ee6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002eea:	4b9c      	ldr	r3, [pc, #624]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eec:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef4:	4999      	ldr	r1, [pc, #612]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00a      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f08:	4b94      	ldr	r3, [pc, #592]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f16:	4991      	ldr	r1, [pc, #580]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00a      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f2a:	4b8c      	ldr	r3, [pc, #560]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f30:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f38:	4988      	ldr	r1, [pc, #544]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00a      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f4c:	4b83      	ldr	r3, [pc, #524]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f52:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f5a:	4980      	ldr	r1, [pc, #512]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00a      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f6e:	4b7b      	ldr	r3, [pc, #492]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f74:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7c:	4977      	ldr	r1, [pc, #476]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00a      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f90:	4b72      	ldr	r3, [pc, #456]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f96:	f023 0203 	bic.w	r2, r3, #3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9e:	496f      	ldr	r1, [pc, #444]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00a      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fb2:	4b6a      	ldr	r3, [pc, #424]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb8:	f023 020c 	bic.w	r2, r3, #12
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fc0:	4966      	ldr	r1, [pc, #408]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00a      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002fd4:	4b61      	ldr	r3, [pc, #388]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fda:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fe2:	495e      	ldr	r1, [pc, #376]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00a      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ff6:	4b59      	ldr	r3, [pc, #356]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003004:	4955      	ldr	r1, [pc, #340]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003006:	4313      	orrs	r3, r2
 8003008:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00a      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003018:	4b50      	ldr	r3, [pc, #320]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800301a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003026:	494d      	ldr	r1, [pc, #308]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003028:	4313      	orrs	r3, r2
 800302a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00a      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800303a:	4b48      	ldr	r3, [pc, #288]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800303c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003040:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003048:	4944      	ldr	r1, [pc, #272]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800304a:	4313      	orrs	r3, r2
 800304c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00a      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800305c:	4b3f      	ldr	r3, [pc, #252]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800305e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003062:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800306a:	493c      	ldr	r1, [pc, #240]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800306c:	4313      	orrs	r3, r2
 800306e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00a      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800307e:	4b37      	ldr	r3, [pc, #220]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003084:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800308c:	4933      	ldr	r1, [pc, #204]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800308e:	4313      	orrs	r3, r2
 8003090:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00a      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80030a0:	4b2e      	ldr	r3, [pc, #184]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030ae:	492b      	ldr	r1, [pc, #172]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d011      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80030c2:	4b26      	ldr	r3, [pc, #152]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030d0:	4922      	ldr	r1, [pc, #136]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030e0:	d101      	bne.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80030e2:	2301      	movs	r3, #1
 80030e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0308 	and.w	r3, r3, #8
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80030f2:	2301      	movs	r3, #1
 80030f4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00a      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003102:	4b16      	ldr	r3, [pc, #88]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003108:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003110:	4912      	ldr	r1, [pc, #72]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003112:	4313      	orrs	r3, r2
 8003114:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00b      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003124:	4b0d      	ldr	r3, [pc, #52]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800312a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003134:	4909      	ldr	r1, [pc, #36]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003136:	4313      	orrs	r3, r2
 8003138:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d006      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	f000 80d9 	beq.w	8003302 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003150:	4b02      	ldr	r3, [pc, #8]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a01      	ldr	r2, [pc, #4]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003156:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800315a:	e001      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800315c:	40023800 	.word	0x40023800
 8003160:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003162:	f7fe f9ab 	bl	80014bc <HAL_GetTick>
 8003166:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003168:	e008      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800316a:	f7fe f9a7 	bl	80014bc <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b64      	cmp	r3, #100	; 0x64
 8003176:	d901      	bls.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e194      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800317c:	4b6c      	ldr	r3, [pc, #432]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1f0      	bne.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b00      	cmp	r3, #0
 8003192:	d021      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003198:	2b00      	cmp	r3, #0
 800319a:	d11d      	bne.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800319c:	4b64      	ldr	r3, [pc, #400]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800319e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031a2:	0c1b      	lsrs	r3, r3, #16
 80031a4:	f003 0303 	and.w	r3, r3, #3
 80031a8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80031aa:	4b61      	ldr	r3, [pc, #388]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031b0:	0e1b      	lsrs	r3, r3, #24
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	019a      	lsls	r2, r3, #6
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	041b      	lsls	r3, r3, #16
 80031c2:	431a      	orrs	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	061b      	lsls	r3, r3, #24
 80031c8:	431a      	orrs	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	071b      	lsls	r3, r3, #28
 80031d0:	4957      	ldr	r1, [pc, #348]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d004      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031ec:	d00a      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d02e      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003202:	d129      	bne.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003204:	4b4a      	ldr	r3, [pc, #296]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003206:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800320a:	0c1b      	lsrs	r3, r3, #16
 800320c:	f003 0303 	and.w	r3, r3, #3
 8003210:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003212:	4b47      	ldr	r3, [pc, #284]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003214:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003218:	0f1b      	lsrs	r3, r3, #28
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	019a      	lsls	r2, r3, #6
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	041b      	lsls	r3, r3, #16
 800322a:	431a      	orrs	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	061b      	lsls	r3, r3, #24
 8003232:	431a      	orrs	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	071b      	lsls	r3, r3, #28
 8003238:	493d      	ldr	r1, [pc, #244]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800323a:	4313      	orrs	r3, r2
 800323c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003240:	4b3b      	ldr	r3, [pc, #236]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003242:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003246:	f023 021f 	bic.w	r2, r3, #31
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324e:	3b01      	subs	r3, #1
 8003250:	4937      	ldr	r1, [pc, #220]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003252:	4313      	orrs	r3, r2
 8003254:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d01d      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003264:	4b32      	ldr	r3, [pc, #200]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003266:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800326a:	0e1b      	lsrs	r3, r3, #24
 800326c:	f003 030f 	and.w	r3, r3, #15
 8003270:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003272:	4b2f      	ldr	r3, [pc, #188]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003274:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003278:	0f1b      	lsrs	r3, r3, #28
 800327a:	f003 0307 	and.w	r3, r3, #7
 800327e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	019a      	lsls	r2, r3, #6
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	041b      	lsls	r3, r3, #16
 800328c:	431a      	orrs	r2, r3
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	061b      	lsls	r3, r3, #24
 8003292:	431a      	orrs	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	071b      	lsls	r3, r3, #28
 8003298:	4925      	ldr	r1, [pc, #148]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800329a:	4313      	orrs	r3, r2
 800329c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d011      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	019a      	lsls	r2, r3, #6
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	041b      	lsls	r3, r3, #16
 80032b8:	431a      	orrs	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	061b      	lsls	r3, r3, #24
 80032c0:	431a      	orrs	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	071b      	lsls	r3, r3, #28
 80032c8:	4919      	ldr	r1, [pc, #100]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80032d0:	4b17      	ldr	r3, [pc, #92]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a16      	ldr	r2, [pc, #88]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032dc:	f7fe f8ee 	bl	80014bc <HAL_GetTick>
 80032e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032e2:	e008      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80032e4:	f7fe f8ea 	bl	80014bc <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b64      	cmp	r3, #100	; 0x64
 80032f0:	d901      	bls.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e0d7      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032f6:	4b0e      	ldr	r3, [pc, #56]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d0f0      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	2b01      	cmp	r3, #1
 8003306:	f040 80cd 	bne.w	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800330a:	4b09      	ldr	r3, [pc, #36]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a08      	ldr	r2, [pc, #32]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003310:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003314:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003316:	f7fe f8d1 	bl	80014bc <HAL_GetTick>
 800331a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800331c:	e00a      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800331e:	f7fe f8cd 	bl	80014bc <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b64      	cmp	r3, #100	; 0x64
 800332a:	d903      	bls.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e0ba      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003330:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003334:	4b5e      	ldr	r3, [pc, #376]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800333c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003340:	d0ed      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003352:	2b00      	cmp	r3, #0
 8003354:	d009      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800335e:	2b00      	cmp	r3, #0
 8003360:	d02e      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	2b00      	cmp	r3, #0
 8003368:	d12a      	bne.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800336a:	4b51      	ldr	r3, [pc, #324]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800336c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003370:	0c1b      	lsrs	r3, r3, #16
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003378:	4b4d      	ldr	r3, [pc, #308]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800337a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337e:	0f1b      	lsrs	r3, r3, #28
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	019a      	lsls	r2, r3, #6
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	041b      	lsls	r3, r3, #16
 8003390:	431a      	orrs	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	061b      	lsls	r3, r3, #24
 8003398:	431a      	orrs	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	071b      	lsls	r3, r3, #28
 800339e:	4944      	ldr	r1, [pc, #272]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80033a6:	4b42      	ldr	r3, [pc, #264]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033ac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b4:	3b01      	subs	r3, #1
 80033b6:	021b      	lsls	r3, r3, #8
 80033b8:	493d      	ldr	r1, [pc, #244]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d022      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033d4:	d11d      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80033d6:	4b36      	ldr	r3, [pc, #216]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033dc:	0e1b      	lsrs	r3, r3, #24
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80033e4:	4b32      	ldr	r3, [pc, #200]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ea:	0f1b      	lsrs	r3, r3, #28
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	019a      	lsls	r2, r3, #6
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a1b      	ldr	r3, [r3, #32]
 80033fc:	041b      	lsls	r3, r3, #16
 80033fe:	431a      	orrs	r2, r3
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	061b      	lsls	r3, r3, #24
 8003404:	431a      	orrs	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	071b      	lsls	r3, r3, #28
 800340a:	4929      	ldr	r1, [pc, #164]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800340c:	4313      	orrs	r3, r2
 800340e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0308 	and.w	r3, r3, #8
 800341a:	2b00      	cmp	r3, #0
 800341c:	d028      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800341e:	4b24      	ldr	r3, [pc, #144]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003424:	0e1b      	lsrs	r3, r3, #24
 8003426:	f003 030f 	and.w	r3, r3, #15
 800342a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800342c:	4b20      	ldr	r3, [pc, #128]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800342e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003432:	0c1b      	lsrs	r3, r3, #16
 8003434:	f003 0303 	and.w	r3, r3, #3
 8003438:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	019a      	lsls	r2, r3, #6
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	041b      	lsls	r3, r3, #16
 8003444:	431a      	orrs	r2, r3
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	061b      	lsls	r3, r3, #24
 800344a:	431a      	orrs	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	69db      	ldr	r3, [r3, #28]
 8003450:	071b      	lsls	r3, r3, #28
 8003452:	4917      	ldr	r1, [pc, #92]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003454:	4313      	orrs	r3, r2
 8003456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800345a:	4b15      	ldr	r3, [pc, #84]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800345c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003460:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003468:	4911      	ldr	r1, [pc, #68]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800346a:	4313      	orrs	r3, r2
 800346c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003470:	4b0f      	ldr	r3, [pc, #60]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a0e      	ldr	r2, [pc, #56]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800347a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800347c:	f7fe f81e 	bl	80014bc <HAL_GetTick>
 8003480:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003484:	f7fe f81a 	bl	80014bc <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b64      	cmp	r3, #100	; 0x64
 8003490:	d901      	bls.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e007      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003496:	4b06      	ldr	r3, [pc, #24]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800349e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034a2:	d1ef      	bne.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3720      	adds	r7, #32
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	40023800 	.word	0x40023800

080034b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e040      	b.n	8003548 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d106      	bne.n	80034dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7fd fe78 	bl	80011cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2224      	movs	r2, #36	; 0x24
 80034e0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 0201 	bic.w	r2, r2, #1
 80034f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f8b0 	bl	8003658 <UART_SetConfig>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d101      	bne.n	8003502 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e022      	b.n	8003548 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	2b00      	cmp	r3, #0
 8003508:	d002      	beq.n	8003510 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 fb08 	bl	8003b20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800351e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689a      	ldr	r2, [r3, #8]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800352e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f042 0201 	orr.w	r2, r2, #1
 800353e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 fb8f 	bl	8003c64 <UART_CheckIdleState>
 8003546:	4603      	mov	r3, r0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08a      	sub	sp, #40	; 0x28
 8003554:	af02      	add	r7, sp, #8
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	603b      	str	r3, [r7, #0]
 800355c:	4613      	mov	r3, r2
 800355e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003564:	2b20      	cmp	r3, #32
 8003566:	d171      	bne.n	800364c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d002      	beq.n	8003574 <HAL_UART_Transmit+0x24>
 800356e:	88fb      	ldrh	r3, [r7, #6]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e06a      	b.n	800364e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2221      	movs	r2, #33	; 0x21
 8003584:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003586:	f7fd ff99 	bl	80014bc <HAL_GetTick>
 800358a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	88fa      	ldrh	r2, [r7, #6]
 8003590:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	88fa      	ldrh	r2, [r7, #6]
 8003598:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a4:	d108      	bne.n	80035b8 <HAL_UART_Transmit+0x68>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d104      	bne.n	80035b8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80035ae:	2300      	movs	r3, #0
 80035b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	61bb      	str	r3, [r7, #24]
 80035b6:	e003      	b.n	80035c0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035bc:	2300      	movs	r3, #0
 80035be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035c0:	e02c      	b.n	800361c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	2200      	movs	r2, #0
 80035ca:	2180      	movs	r1, #128	; 0x80
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f000 fb80 	bl	8003cd2 <UART_WaitOnFlagUntilTimeout>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e038      	b.n	800364e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10b      	bne.n	80035fa <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	881b      	ldrh	r3, [r3, #0]
 80035e6:	461a      	mov	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035f0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	3302      	adds	r3, #2
 80035f6:	61bb      	str	r3, [r7, #24]
 80035f8:	e007      	b.n	800360a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	781a      	ldrb	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	3301      	adds	r3, #1
 8003608:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003610:	b29b      	uxth	r3, r3
 8003612:	3b01      	subs	r3, #1
 8003614:	b29a      	uxth	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003622:	b29b      	uxth	r3, r3
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1cc      	bne.n	80035c2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	2200      	movs	r2, #0
 8003630:	2140      	movs	r1, #64	; 0x40
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f000 fb4d 	bl	8003cd2 <UART_WaitOnFlagUntilTimeout>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e005      	b.n	800364e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2220      	movs	r2, #32
 8003646:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003648:	2300      	movs	r3, #0
 800364a:	e000      	b.n	800364e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800364c:	2302      	movs	r3, #2
  }
}
 800364e:	4618      	mov	r0, r3
 8003650:	3720      	adds	r7, #32
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
	...

08003658 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b088      	sub	sp, #32
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003660:	2300      	movs	r3, #0
 8003662:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	431a      	orrs	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	431a      	orrs	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	4313      	orrs	r3, r2
 800367a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	4ba6      	ldr	r3, [pc, #664]	; (800391c <UART_SetConfig+0x2c4>)
 8003684:	4013      	ands	r3, r2
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	6812      	ldr	r2, [r2, #0]
 800368a:	6979      	ldr	r1, [r7, #20]
 800368c:	430b      	orrs	r3, r1
 800368e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68da      	ldr	r2, [r3, #12]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a94      	ldr	r2, [pc, #592]	; (8003920 <UART_SetConfig+0x2c8>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d120      	bne.n	8003716 <UART_SetConfig+0xbe>
 80036d4:	4b93      	ldr	r3, [pc, #588]	; (8003924 <UART_SetConfig+0x2cc>)
 80036d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036da:	f003 0303 	and.w	r3, r3, #3
 80036de:	2b03      	cmp	r3, #3
 80036e0:	d816      	bhi.n	8003710 <UART_SetConfig+0xb8>
 80036e2:	a201      	add	r2, pc, #4	; (adr r2, 80036e8 <UART_SetConfig+0x90>)
 80036e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e8:	080036f9 	.word	0x080036f9
 80036ec:	08003705 	.word	0x08003705
 80036f0:	080036ff 	.word	0x080036ff
 80036f4:	0800370b 	.word	0x0800370b
 80036f8:	2301      	movs	r3, #1
 80036fa:	77fb      	strb	r3, [r7, #31]
 80036fc:	e150      	b.n	80039a0 <UART_SetConfig+0x348>
 80036fe:	2302      	movs	r3, #2
 8003700:	77fb      	strb	r3, [r7, #31]
 8003702:	e14d      	b.n	80039a0 <UART_SetConfig+0x348>
 8003704:	2304      	movs	r3, #4
 8003706:	77fb      	strb	r3, [r7, #31]
 8003708:	e14a      	b.n	80039a0 <UART_SetConfig+0x348>
 800370a:	2308      	movs	r3, #8
 800370c:	77fb      	strb	r3, [r7, #31]
 800370e:	e147      	b.n	80039a0 <UART_SetConfig+0x348>
 8003710:	2310      	movs	r3, #16
 8003712:	77fb      	strb	r3, [r7, #31]
 8003714:	e144      	b.n	80039a0 <UART_SetConfig+0x348>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a83      	ldr	r2, [pc, #524]	; (8003928 <UART_SetConfig+0x2d0>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d132      	bne.n	8003786 <UART_SetConfig+0x12e>
 8003720:	4b80      	ldr	r3, [pc, #512]	; (8003924 <UART_SetConfig+0x2cc>)
 8003722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003726:	f003 030c 	and.w	r3, r3, #12
 800372a:	2b0c      	cmp	r3, #12
 800372c:	d828      	bhi.n	8003780 <UART_SetConfig+0x128>
 800372e:	a201      	add	r2, pc, #4	; (adr r2, 8003734 <UART_SetConfig+0xdc>)
 8003730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003734:	08003769 	.word	0x08003769
 8003738:	08003781 	.word	0x08003781
 800373c:	08003781 	.word	0x08003781
 8003740:	08003781 	.word	0x08003781
 8003744:	08003775 	.word	0x08003775
 8003748:	08003781 	.word	0x08003781
 800374c:	08003781 	.word	0x08003781
 8003750:	08003781 	.word	0x08003781
 8003754:	0800376f 	.word	0x0800376f
 8003758:	08003781 	.word	0x08003781
 800375c:	08003781 	.word	0x08003781
 8003760:	08003781 	.word	0x08003781
 8003764:	0800377b 	.word	0x0800377b
 8003768:	2300      	movs	r3, #0
 800376a:	77fb      	strb	r3, [r7, #31]
 800376c:	e118      	b.n	80039a0 <UART_SetConfig+0x348>
 800376e:	2302      	movs	r3, #2
 8003770:	77fb      	strb	r3, [r7, #31]
 8003772:	e115      	b.n	80039a0 <UART_SetConfig+0x348>
 8003774:	2304      	movs	r3, #4
 8003776:	77fb      	strb	r3, [r7, #31]
 8003778:	e112      	b.n	80039a0 <UART_SetConfig+0x348>
 800377a:	2308      	movs	r3, #8
 800377c:	77fb      	strb	r3, [r7, #31]
 800377e:	e10f      	b.n	80039a0 <UART_SetConfig+0x348>
 8003780:	2310      	movs	r3, #16
 8003782:	77fb      	strb	r3, [r7, #31]
 8003784:	e10c      	b.n	80039a0 <UART_SetConfig+0x348>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a68      	ldr	r2, [pc, #416]	; (800392c <UART_SetConfig+0x2d4>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d120      	bne.n	80037d2 <UART_SetConfig+0x17a>
 8003790:	4b64      	ldr	r3, [pc, #400]	; (8003924 <UART_SetConfig+0x2cc>)
 8003792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003796:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800379a:	2b30      	cmp	r3, #48	; 0x30
 800379c:	d013      	beq.n	80037c6 <UART_SetConfig+0x16e>
 800379e:	2b30      	cmp	r3, #48	; 0x30
 80037a0:	d814      	bhi.n	80037cc <UART_SetConfig+0x174>
 80037a2:	2b20      	cmp	r3, #32
 80037a4:	d009      	beq.n	80037ba <UART_SetConfig+0x162>
 80037a6:	2b20      	cmp	r3, #32
 80037a8:	d810      	bhi.n	80037cc <UART_SetConfig+0x174>
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d002      	beq.n	80037b4 <UART_SetConfig+0x15c>
 80037ae:	2b10      	cmp	r3, #16
 80037b0:	d006      	beq.n	80037c0 <UART_SetConfig+0x168>
 80037b2:	e00b      	b.n	80037cc <UART_SetConfig+0x174>
 80037b4:	2300      	movs	r3, #0
 80037b6:	77fb      	strb	r3, [r7, #31]
 80037b8:	e0f2      	b.n	80039a0 <UART_SetConfig+0x348>
 80037ba:	2302      	movs	r3, #2
 80037bc:	77fb      	strb	r3, [r7, #31]
 80037be:	e0ef      	b.n	80039a0 <UART_SetConfig+0x348>
 80037c0:	2304      	movs	r3, #4
 80037c2:	77fb      	strb	r3, [r7, #31]
 80037c4:	e0ec      	b.n	80039a0 <UART_SetConfig+0x348>
 80037c6:	2308      	movs	r3, #8
 80037c8:	77fb      	strb	r3, [r7, #31]
 80037ca:	e0e9      	b.n	80039a0 <UART_SetConfig+0x348>
 80037cc:	2310      	movs	r3, #16
 80037ce:	77fb      	strb	r3, [r7, #31]
 80037d0:	e0e6      	b.n	80039a0 <UART_SetConfig+0x348>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a56      	ldr	r2, [pc, #344]	; (8003930 <UART_SetConfig+0x2d8>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d120      	bne.n	800381e <UART_SetConfig+0x1c6>
 80037dc:	4b51      	ldr	r3, [pc, #324]	; (8003924 <UART_SetConfig+0x2cc>)
 80037de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80037e6:	2bc0      	cmp	r3, #192	; 0xc0
 80037e8:	d013      	beq.n	8003812 <UART_SetConfig+0x1ba>
 80037ea:	2bc0      	cmp	r3, #192	; 0xc0
 80037ec:	d814      	bhi.n	8003818 <UART_SetConfig+0x1c0>
 80037ee:	2b80      	cmp	r3, #128	; 0x80
 80037f0:	d009      	beq.n	8003806 <UART_SetConfig+0x1ae>
 80037f2:	2b80      	cmp	r3, #128	; 0x80
 80037f4:	d810      	bhi.n	8003818 <UART_SetConfig+0x1c0>
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d002      	beq.n	8003800 <UART_SetConfig+0x1a8>
 80037fa:	2b40      	cmp	r3, #64	; 0x40
 80037fc:	d006      	beq.n	800380c <UART_SetConfig+0x1b4>
 80037fe:	e00b      	b.n	8003818 <UART_SetConfig+0x1c0>
 8003800:	2300      	movs	r3, #0
 8003802:	77fb      	strb	r3, [r7, #31]
 8003804:	e0cc      	b.n	80039a0 <UART_SetConfig+0x348>
 8003806:	2302      	movs	r3, #2
 8003808:	77fb      	strb	r3, [r7, #31]
 800380a:	e0c9      	b.n	80039a0 <UART_SetConfig+0x348>
 800380c:	2304      	movs	r3, #4
 800380e:	77fb      	strb	r3, [r7, #31]
 8003810:	e0c6      	b.n	80039a0 <UART_SetConfig+0x348>
 8003812:	2308      	movs	r3, #8
 8003814:	77fb      	strb	r3, [r7, #31]
 8003816:	e0c3      	b.n	80039a0 <UART_SetConfig+0x348>
 8003818:	2310      	movs	r3, #16
 800381a:	77fb      	strb	r3, [r7, #31]
 800381c:	e0c0      	b.n	80039a0 <UART_SetConfig+0x348>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a44      	ldr	r2, [pc, #272]	; (8003934 <UART_SetConfig+0x2dc>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d125      	bne.n	8003874 <UART_SetConfig+0x21c>
 8003828:	4b3e      	ldr	r3, [pc, #248]	; (8003924 <UART_SetConfig+0x2cc>)
 800382a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003832:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003836:	d017      	beq.n	8003868 <UART_SetConfig+0x210>
 8003838:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800383c:	d817      	bhi.n	800386e <UART_SetConfig+0x216>
 800383e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003842:	d00b      	beq.n	800385c <UART_SetConfig+0x204>
 8003844:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003848:	d811      	bhi.n	800386e <UART_SetConfig+0x216>
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <UART_SetConfig+0x1fe>
 800384e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003852:	d006      	beq.n	8003862 <UART_SetConfig+0x20a>
 8003854:	e00b      	b.n	800386e <UART_SetConfig+0x216>
 8003856:	2300      	movs	r3, #0
 8003858:	77fb      	strb	r3, [r7, #31]
 800385a:	e0a1      	b.n	80039a0 <UART_SetConfig+0x348>
 800385c:	2302      	movs	r3, #2
 800385e:	77fb      	strb	r3, [r7, #31]
 8003860:	e09e      	b.n	80039a0 <UART_SetConfig+0x348>
 8003862:	2304      	movs	r3, #4
 8003864:	77fb      	strb	r3, [r7, #31]
 8003866:	e09b      	b.n	80039a0 <UART_SetConfig+0x348>
 8003868:	2308      	movs	r3, #8
 800386a:	77fb      	strb	r3, [r7, #31]
 800386c:	e098      	b.n	80039a0 <UART_SetConfig+0x348>
 800386e:	2310      	movs	r3, #16
 8003870:	77fb      	strb	r3, [r7, #31]
 8003872:	e095      	b.n	80039a0 <UART_SetConfig+0x348>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a2f      	ldr	r2, [pc, #188]	; (8003938 <UART_SetConfig+0x2e0>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d125      	bne.n	80038ca <UART_SetConfig+0x272>
 800387e:	4b29      	ldr	r3, [pc, #164]	; (8003924 <UART_SetConfig+0x2cc>)
 8003880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003884:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003888:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800388c:	d017      	beq.n	80038be <UART_SetConfig+0x266>
 800388e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003892:	d817      	bhi.n	80038c4 <UART_SetConfig+0x26c>
 8003894:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003898:	d00b      	beq.n	80038b2 <UART_SetConfig+0x25a>
 800389a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800389e:	d811      	bhi.n	80038c4 <UART_SetConfig+0x26c>
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d003      	beq.n	80038ac <UART_SetConfig+0x254>
 80038a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038a8:	d006      	beq.n	80038b8 <UART_SetConfig+0x260>
 80038aa:	e00b      	b.n	80038c4 <UART_SetConfig+0x26c>
 80038ac:	2301      	movs	r3, #1
 80038ae:	77fb      	strb	r3, [r7, #31]
 80038b0:	e076      	b.n	80039a0 <UART_SetConfig+0x348>
 80038b2:	2302      	movs	r3, #2
 80038b4:	77fb      	strb	r3, [r7, #31]
 80038b6:	e073      	b.n	80039a0 <UART_SetConfig+0x348>
 80038b8:	2304      	movs	r3, #4
 80038ba:	77fb      	strb	r3, [r7, #31]
 80038bc:	e070      	b.n	80039a0 <UART_SetConfig+0x348>
 80038be:	2308      	movs	r3, #8
 80038c0:	77fb      	strb	r3, [r7, #31]
 80038c2:	e06d      	b.n	80039a0 <UART_SetConfig+0x348>
 80038c4:	2310      	movs	r3, #16
 80038c6:	77fb      	strb	r3, [r7, #31]
 80038c8:	e06a      	b.n	80039a0 <UART_SetConfig+0x348>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a1b      	ldr	r2, [pc, #108]	; (800393c <UART_SetConfig+0x2e4>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d138      	bne.n	8003946 <UART_SetConfig+0x2ee>
 80038d4:	4b13      	ldr	r3, [pc, #76]	; (8003924 <UART_SetConfig+0x2cc>)
 80038d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038da:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80038de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80038e2:	d017      	beq.n	8003914 <UART_SetConfig+0x2bc>
 80038e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80038e8:	d82a      	bhi.n	8003940 <UART_SetConfig+0x2e8>
 80038ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ee:	d00b      	beq.n	8003908 <UART_SetConfig+0x2b0>
 80038f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038f4:	d824      	bhi.n	8003940 <UART_SetConfig+0x2e8>
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d003      	beq.n	8003902 <UART_SetConfig+0x2aa>
 80038fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038fe:	d006      	beq.n	800390e <UART_SetConfig+0x2b6>
 8003900:	e01e      	b.n	8003940 <UART_SetConfig+0x2e8>
 8003902:	2300      	movs	r3, #0
 8003904:	77fb      	strb	r3, [r7, #31]
 8003906:	e04b      	b.n	80039a0 <UART_SetConfig+0x348>
 8003908:	2302      	movs	r3, #2
 800390a:	77fb      	strb	r3, [r7, #31]
 800390c:	e048      	b.n	80039a0 <UART_SetConfig+0x348>
 800390e:	2304      	movs	r3, #4
 8003910:	77fb      	strb	r3, [r7, #31]
 8003912:	e045      	b.n	80039a0 <UART_SetConfig+0x348>
 8003914:	2308      	movs	r3, #8
 8003916:	77fb      	strb	r3, [r7, #31]
 8003918:	e042      	b.n	80039a0 <UART_SetConfig+0x348>
 800391a:	bf00      	nop
 800391c:	efff69f3 	.word	0xefff69f3
 8003920:	40011000 	.word	0x40011000
 8003924:	40023800 	.word	0x40023800
 8003928:	40004400 	.word	0x40004400
 800392c:	40004800 	.word	0x40004800
 8003930:	40004c00 	.word	0x40004c00
 8003934:	40005000 	.word	0x40005000
 8003938:	40011400 	.word	0x40011400
 800393c:	40007800 	.word	0x40007800
 8003940:	2310      	movs	r3, #16
 8003942:	77fb      	strb	r3, [r7, #31]
 8003944:	e02c      	b.n	80039a0 <UART_SetConfig+0x348>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a72      	ldr	r2, [pc, #456]	; (8003b14 <UART_SetConfig+0x4bc>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d125      	bne.n	800399c <UART_SetConfig+0x344>
 8003950:	4b71      	ldr	r3, [pc, #452]	; (8003b18 <UART_SetConfig+0x4c0>)
 8003952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003956:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800395a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800395e:	d017      	beq.n	8003990 <UART_SetConfig+0x338>
 8003960:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003964:	d817      	bhi.n	8003996 <UART_SetConfig+0x33e>
 8003966:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800396a:	d00b      	beq.n	8003984 <UART_SetConfig+0x32c>
 800396c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003970:	d811      	bhi.n	8003996 <UART_SetConfig+0x33e>
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <UART_SetConfig+0x326>
 8003976:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800397a:	d006      	beq.n	800398a <UART_SetConfig+0x332>
 800397c:	e00b      	b.n	8003996 <UART_SetConfig+0x33e>
 800397e:	2300      	movs	r3, #0
 8003980:	77fb      	strb	r3, [r7, #31]
 8003982:	e00d      	b.n	80039a0 <UART_SetConfig+0x348>
 8003984:	2302      	movs	r3, #2
 8003986:	77fb      	strb	r3, [r7, #31]
 8003988:	e00a      	b.n	80039a0 <UART_SetConfig+0x348>
 800398a:	2304      	movs	r3, #4
 800398c:	77fb      	strb	r3, [r7, #31]
 800398e:	e007      	b.n	80039a0 <UART_SetConfig+0x348>
 8003990:	2308      	movs	r3, #8
 8003992:	77fb      	strb	r3, [r7, #31]
 8003994:	e004      	b.n	80039a0 <UART_SetConfig+0x348>
 8003996:	2310      	movs	r3, #16
 8003998:	77fb      	strb	r3, [r7, #31]
 800399a:	e001      	b.n	80039a0 <UART_SetConfig+0x348>
 800399c:	2310      	movs	r3, #16
 800399e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	69db      	ldr	r3, [r3, #28]
 80039a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039a8:	d15b      	bne.n	8003a62 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80039aa:	7ffb      	ldrb	r3, [r7, #31]
 80039ac:	2b08      	cmp	r3, #8
 80039ae:	d828      	bhi.n	8003a02 <UART_SetConfig+0x3aa>
 80039b0:	a201      	add	r2, pc, #4	; (adr r2, 80039b8 <UART_SetConfig+0x360>)
 80039b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b6:	bf00      	nop
 80039b8:	080039dd 	.word	0x080039dd
 80039bc:	080039e5 	.word	0x080039e5
 80039c0:	080039ed 	.word	0x080039ed
 80039c4:	08003a03 	.word	0x08003a03
 80039c8:	080039f3 	.word	0x080039f3
 80039cc:	08003a03 	.word	0x08003a03
 80039d0:	08003a03 	.word	0x08003a03
 80039d4:	08003a03 	.word	0x08003a03
 80039d8:	080039fb 	.word	0x080039fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039dc:	f7ff f952 	bl	8002c84 <HAL_RCC_GetPCLK1Freq>
 80039e0:	61b8      	str	r0, [r7, #24]
        break;
 80039e2:	e013      	b.n	8003a0c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039e4:	f7ff f962 	bl	8002cac <HAL_RCC_GetPCLK2Freq>
 80039e8:	61b8      	str	r0, [r7, #24]
        break;
 80039ea:	e00f      	b.n	8003a0c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039ec:	4b4b      	ldr	r3, [pc, #300]	; (8003b1c <UART_SetConfig+0x4c4>)
 80039ee:	61bb      	str	r3, [r7, #24]
        break;
 80039f0:	e00c      	b.n	8003a0c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039f2:	f7ff f875 	bl	8002ae0 <HAL_RCC_GetSysClockFreq>
 80039f6:	61b8      	str	r0, [r7, #24]
        break;
 80039f8:	e008      	b.n	8003a0c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039fe:	61bb      	str	r3, [r7, #24]
        break;
 8003a00:	e004      	b.n	8003a0c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	77bb      	strb	r3, [r7, #30]
        break;
 8003a0a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d074      	beq.n	8003afc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	005a      	lsls	r2, r3, #1
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	085b      	lsrs	r3, r3, #1
 8003a1c:	441a      	add	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a26:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	2b0f      	cmp	r3, #15
 8003a2c:	d916      	bls.n	8003a5c <UART_SetConfig+0x404>
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a34:	d212      	bcs.n	8003a5c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	f023 030f 	bic.w	r3, r3, #15
 8003a3e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	085b      	lsrs	r3, r3, #1
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	f003 0307 	and.w	r3, r3, #7
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	89fb      	ldrh	r3, [r7, #14]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	89fa      	ldrh	r2, [r7, #14]
 8003a58:	60da      	str	r2, [r3, #12]
 8003a5a:	e04f      	b.n	8003afc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	77bb      	strb	r3, [r7, #30]
 8003a60:	e04c      	b.n	8003afc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a62:	7ffb      	ldrb	r3, [r7, #31]
 8003a64:	2b08      	cmp	r3, #8
 8003a66:	d828      	bhi.n	8003aba <UART_SetConfig+0x462>
 8003a68:	a201      	add	r2, pc, #4	; (adr r2, 8003a70 <UART_SetConfig+0x418>)
 8003a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6e:	bf00      	nop
 8003a70:	08003a95 	.word	0x08003a95
 8003a74:	08003a9d 	.word	0x08003a9d
 8003a78:	08003aa5 	.word	0x08003aa5
 8003a7c:	08003abb 	.word	0x08003abb
 8003a80:	08003aab 	.word	0x08003aab
 8003a84:	08003abb 	.word	0x08003abb
 8003a88:	08003abb 	.word	0x08003abb
 8003a8c:	08003abb 	.word	0x08003abb
 8003a90:	08003ab3 	.word	0x08003ab3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a94:	f7ff f8f6 	bl	8002c84 <HAL_RCC_GetPCLK1Freq>
 8003a98:	61b8      	str	r0, [r7, #24]
        break;
 8003a9a:	e013      	b.n	8003ac4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a9c:	f7ff f906 	bl	8002cac <HAL_RCC_GetPCLK2Freq>
 8003aa0:	61b8      	str	r0, [r7, #24]
        break;
 8003aa2:	e00f      	b.n	8003ac4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003aa4:	4b1d      	ldr	r3, [pc, #116]	; (8003b1c <UART_SetConfig+0x4c4>)
 8003aa6:	61bb      	str	r3, [r7, #24]
        break;
 8003aa8:	e00c      	b.n	8003ac4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aaa:	f7ff f819 	bl	8002ae0 <HAL_RCC_GetSysClockFreq>
 8003aae:	61b8      	str	r0, [r7, #24]
        break;
 8003ab0:	e008      	b.n	8003ac4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ab2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ab6:	61bb      	str	r3, [r7, #24]
        break;
 8003ab8:	e004      	b.n	8003ac4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003aba:	2300      	movs	r3, #0
 8003abc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	77bb      	strb	r3, [r7, #30]
        break;
 8003ac2:	bf00      	nop
    }

    if (pclk != 0U)
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d018      	beq.n	8003afc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	085a      	lsrs	r2, r3, #1
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	441a      	add	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003adc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	2b0f      	cmp	r3, #15
 8003ae2:	d909      	bls.n	8003af8 <UART_SetConfig+0x4a0>
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aea:	d205      	bcs.n	8003af8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	60da      	str	r2, [r3, #12]
 8003af6:	e001      	b.n	8003afc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003b08:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3720      	adds	r7, #32
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40007c00 	.word	0x40007c00
 8003b18:	40023800 	.word	0x40023800
 8003b1c:	00f42400 	.word	0x00f42400

08003b20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00a      	beq.n	8003b4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00a      	beq.n	8003b6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	f003 0304 	and.w	r3, r3, #4
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00a      	beq.n	8003b8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b92:	f003 0308 	and.w	r3, r3, #8
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00a      	beq.n	8003bb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb4:	f003 0310 	and.w	r3, r3, #16
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00a      	beq.n	8003bd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd6:	f003 0320 	and.w	r3, r3, #32
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00a      	beq.n	8003bf4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d01a      	beq.n	8003c36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c1e:	d10a      	bne.n	8003c36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00a      	beq.n	8003c58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	430a      	orrs	r2, r1
 8003c56:	605a      	str	r2, [r3, #4]
  }
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af02      	add	r7, sp, #8
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c74:	f7fd fc22 	bl	80014bc <HAL_GetTick>
 8003c78:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0308 	and.w	r3, r3, #8
 8003c84:	2b08      	cmp	r3, #8
 8003c86:	d10e      	bne.n	8003ca6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f81b 	bl	8003cd2 <UART_WaitOnFlagUntilTimeout>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d001      	beq.n	8003ca6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e011      	b.n	8003cca <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2220      	movs	r2, #32
 8003caa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b09c      	sub	sp, #112	; 0x70
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	60f8      	str	r0, [r7, #12]
 8003cda:	60b9      	str	r1, [r7, #8]
 8003cdc:	603b      	str	r3, [r7, #0]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ce2:	e0a7      	b.n	8003e34 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ce4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cea:	f000 80a3 	beq.w	8003e34 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cee:	f7fd fbe5 	bl	80014bc <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d302      	bcc.n	8003d04 <UART_WaitOnFlagUntilTimeout+0x32>
 8003cfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d13f      	bne.n	8003d84 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d0c:	e853 3f00 	ldrex	r3, [r3]
 8003d10:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d18:	667b      	str	r3, [r7, #100]	; 0x64
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d24:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d26:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d2a:	e841 2300 	strex	r3, r2, [r1]
 8003d2e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003d30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1e6      	bne.n	8003d04 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	3308      	adds	r3, #8
 8003d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d40:	e853 3f00 	ldrex	r3, [r3]
 8003d44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d48:	f023 0301 	bic.w	r3, r3, #1
 8003d4c:	663b      	str	r3, [r7, #96]	; 0x60
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	3308      	adds	r3, #8
 8003d54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d56:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d58:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d5e:	e841 2300 	strex	r3, r2, [r1]
 8003d62:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003d64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1e5      	bne.n	8003d36 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2220      	movs	r2, #32
 8003d6e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2220      	movs	r2, #32
 8003d74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e068      	b.n	8003e56 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0304 	and.w	r3, r3, #4
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d050      	beq.n	8003e34 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69db      	ldr	r3, [r3, #28]
 8003d98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003da0:	d148      	bne.n	8003e34 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003daa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db4:	e853 3f00 	ldrex	r3, [r3]
 8003db8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003dc0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dca:	637b      	str	r3, [r7, #52]	; 0x34
 8003dcc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dd2:	e841 2300 	strex	r3, r2, [r1]
 8003dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1e6      	bne.n	8003dac <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	3308      	adds	r3, #8
 8003de4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	e853 3f00 	ldrex	r3, [r3]
 8003dec:	613b      	str	r3, [r7, #16]
   return(result);
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	f023 0301 	bic.w	r3, r3, #1
 8003df4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	3308      	adds	r3, #8
 8003dfc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003dfe:	623a      	str	r2, [r7, #32]
 8003e00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e02:	69f9      	ldr	r1, [r7, #28]
 8003e04:	6a3a      	ldr	r2, [r7, #32]
 8003e06:	e841 2300 	strex	r3, r2, [r1]
 8003e0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1e5      	bne.n	8003dde <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2220      	movs	r2, #32
 8003e16:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2220      	movs	r2, #32
 8003e24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e010      	b.n	8003e56 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	69da      	ldr	r2, [r3, #28]
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	bf0c      	ite	eq
 8003e44:	2301      	moveq	r3, #1
 8003e46:	2300      	movne	r3, #0
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	79fb      	ldrb	r3, [r7, #7]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	f43f af48 	beq.w	8003ce4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3770      	adds	r7, #112	; 0x70
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
	...

08003e60 <siprintf>:
 8003e60:	b40e      	push	{r1, r2, r3}
 8003e62:	b500      	push	{lr}
 8003e64:	b09c      	sub	sp, #112	; 0x70
 8003e66:	ab1d      	add	r3, sp, #116	; 0x74
 8003e68:	9002      	str	r0, [sp, #8]
 8003e6a:	9006      	str	r0, [sp, #24]
 8003e6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e70:	4809      	ldr	r0, [pc, #36]	; (8003e98 <siprintf+0x38>)
 8003e72:	9107      	str	r1, [sp, #28]
 8003e74:	9104      	str	r1, [sp, #16]
 8003e76:	4909      	ldr	r1, [pc, #36]	; (8003e9c <siprintf+0x3c>)
 8003e78:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e7c:	9105      	str	r1, [sp, #20]
 8003e7e:	6800      	ldr	r0, [r0, #0]
 8003e80:	9301      	str	r3, [sp, #4]
 8003e82:	a902      	add	r1, sp, #8
 8003e84:	f000 f992 	bl	80041ac <_svfiprintf_r>
 8003e88:	9b02      	ldr	r3, [sp, #8]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	701a      	strb	r2, [r3, #0]
 8003e8e:	b01c      	add	sp, #112	; 0x70
 8003e90:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e94:	b003      	add	sp, #12
 8003e96:	4770      	bx	lr
 8003e98:	20000058 	.word	0x20000058
 8003e9c:	ffff0208 	.word	0xffff0208

08003ea0 <memset>:
 8003ea0:	4402      	add	r2, r0
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d100      	bne.n	8003eaa <memset+0xa>
 8003ea8:	4770      	bx	lr
 8003eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8003eae:	e7f9      	b.n	8003ea4 <memset+0x4>

08003eb0 <__errno>:
 8003eb0:	4b01      	ldr	r3, [pc, #4]	; (8003eb8 <__errno+0x8>)
 8003eb2:	6818      	ldr	r0, [r3, #0]
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	20000058 	.word	0x20000058

08003ebc <__libc_init_array>:
 8003ebc:	b570      	push	{r4, r5, r6, lr}
 8003ebe:	4d0d      	ldr	r5, [pc, #52]	; (8003ef4 <__libc_init_array+0x38>)
 8003ec0:	4c0d      	ldr	r4, [pc, #52]	; (8003ef8 <__libc_init_array+0x3c>)
 8003ec2:	1b64      	subs	r4, r4, r5
 8003ec4:	10a4      	asrs	r4, r4, #2
 8003ec6:	2600      	movs	r6, #0
 8003ec8:	42a6      	cmp	r6, r4
 8003eca:	d109      	bne.n	8003ee0 <__libc_init_array+0x24>
 8003ecc:	4d0b      	ldr	r5, [pc, #44]	; (8003efc <__libc_init_array+0x40>)
 8003ece:	4c0c      	ldr	r4, [pc, #48]	; (8003f00 <__libc_init_array+0x44>)
 8003ed0:	f000 fc6a 	bl	80047a8 <_init>
 8003ed4:	1b64      	subs	r4, r4, r5
 8003ed6:	10a4      	asrs	r4, r4, #2
 8003ed8:	2600      	movs	r6, #0
 8003eda:	42a6      	cmp	r6, r4
 8003edc:	d105      	bne.n	8003eea <__libc_init_array+0x2e>
 8003ede:	bd70      	pop	{r4, r5, r6, pc}
 8003ee0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ee4:	4798      	blx	r3
 8003ee6:	3601      	adds	r6, #1
 8003ee8:	e7ee      	b.n	8003ec8 <__libc_init_array+0xc>
 8003eea:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eee:	4798      	blx	r3
 8003ef0:	3601      	adds	r6, #1
 8003ef2:	e7f2      	b.n	8003eda <__libc_init_array+0x1e>
 8003ef4:	0800481c 	.word	0x0800481c
 8003ef8:	0800481c 	.word	0x0800481c
 8003efc:	0800481c 	.word	0x0800481c
 8003f00:	08004820 	.word	0x08004820

08003f04 <__retarget_lock_acquire_recursive>:
 8003f04:	4770      	bx	lr

08003f06 <__retarget_lock_release_recursive>:
 8003f06:	4770      	bx	lr

08003f08 <_free_r>:
 8003f08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f0a:	2900      	cmp	r1, #0
 8003f0c:	d044      	beq.n	8003f98 <_free_r+0x90>
 8003f0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f12:	9001      	str	r0, [sp, #4]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f1a1 0404 	sub.w	r4, r1, #4
 8003f1a:	bfb8      	it	lt
 8003f1c:	18e4      	addlt	r4, r4, r3
 8003f1e:	f000 f8df 	bl	80040e0 <__malloc_lock>
 8003f22:	4a1e      	ldr	r2, [pc, #120]	; (8003f9c <_free_r+0x94>)
 8003f24:	9801      	ldr	r0, [sp, #4]
 8003f26:	6813      	ldr	r3, [r2, #0]
 8003f28:	b933      	cbnz	r3, 8003f38 <_free_r+0x30>
 8003f2a:	6063      	str	r3, [r4, #4]
 8003f2c:	6014      	str	r4, [r2, #0]
 8003f2e:	b003      	add	sp, #12
 8003f30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f34:	f000 b8da 	b.w	80040ec <__malloc_unlock>
 8003f38:	42a3      	cmp	r3, r4
 8003f3a:	d908      	bls.n	8003f4e <_free_r+0x46>
 8003f3c:	6825      	ldr	r5, [r4, #0]
 8003f3e:	1961      	adds	r1, r4, r5
 8003f40:	428b      	cmp	r3, r1
 8003f42:	bf01      	itttt	eq
 8003f44:	6819      	ldreq	r1, [r3, #0]
 8003f46:	685b      	ldreq	r3, [r3, #4]
 8003f48:	1949      	addeq	r1, r1, r5
 8003f4a:	6021      	streq	r1, [r4, #0]
 8003f4c:	e7ed      	b.n	8003f2a <_free_r+0x22>
 8003f4e:	461a      	mov	r2, r3
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	b10b      	cbz	r3, 8003f58 <_free_r+0x50>
 8003f54:	42a3      	cmp	r3, r4
 8003f56:	d9fa      	bls.n	8003f4e <_free_r+0x46>
 8003f58:	6811      	ldr	r1, [r2, #0]
 8003f5a:	1855      	adds	r5, r2, r1
 8003f5c:	42a5      	cmp	r5, r4
 8003f5e:	d10b      	bne.n	8003f78 <_free_r+0x70>
 8003f60:	6824      	ldr	r4, [r4, #0]
 8003f62:	4421      	add	r1, r4
 8003f64:	1854      	adds	r4, r2, r1
 8003f66:	42a3      	cmp	r3, r4
 8003f68:	6011      	str	r1, [r2, #0]
 8003f6a:	d1e0      	bne.n	8003f2e <_free_r+0x26>
 8003f6c:	681c      	ldr	r4, [r3, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	6053      	str	r3, [r2, #4]
 8003f72:	440c      	add	r4, r1
 8003f74:	6014      	str	r4, [r2, #0]
 8003f76:	e7da      	b.n	8003f2e <_free_r+0x26>
 8003f78:	d902      	bls.n	8003f80 <_free_r+0x78>
 8003f7a:	230c      	movs	r3, #12
 8003f7c:	6003      	str	r3, [r0, #0]
 8003f7e:	e7d6      	b.n	8003f2e <_free_r+0x26>
 8003f80:	6825      	ldr	r5, [r4, #0]
 8003f82:	1961      	adds	r1, r4, r5
 8003f84:	428b      	cmp	r3, r1
 8003f86:	bf04      	itt	eq
 8003f88:	6819      	ldreq	r1, [r3, #0]
 8003f8a:	685b      	ldreq	r3, [r3, #4]
 8003f8c:	6063      	str	r3, [r4, #4]
 8003f8e:	bf04      	itt	eq
 8003f90:	1949      	addeq	r1, r1, r5
 8003f92:	6021      	streq	r1, [r4, #0]
 8003f94:	6054      	str	r4, [r2, #4]
 8003f96:	e7ca      	b.n	8003f2e <_free_r+0x26>
 8003f98:	b003      	add	sp, #12
 8003f9a:	bd30      	pop	{r4, r5, pc}
 8003f9c:	20000294 	.word	0x20000294

08003fa0 <sbrk_aligned>:
 8003fa0:	b570      	push	{r4, r5, r6, lr}
 8003fa2:	4e0e      	ldr	r6, [pc, #56]	; (8003fdc <sbrk_aligned+0x3c>)
 8003fa4:	460c      	mov	r4, r1
 8003fa6:	6831      	ldr	r1, [r6, #0]
 8003fa8:	4605      	mov	r5, r0
 8003faa:	b911      	cbnz	r1, 8003fb2 <sbrk_aligned+0x12>
 8003fac:	f000 fba6 	bl	80046fc <_sbrk_r>
 8003fb0:	6030      	str	r0, [r6, #0]
 8003fb2:	4621      	mov	r1, r4
 8003fb4:	4628      	mov	r0, r5
 8003fb6:	f000 fba1 	bl	80046fc <_sbrk_r>
 8003fba:	1c43      	adds	r3, r0, #1
 8003fbc:	d00a      	beq.n	8003fd4 <sbrk_aligned+0x34>
 8003fbe:	1cc4      	adds	r4, r0, #3
 8003fc0:	f024 0403 	bic.w	r4, r4, #3
 8003fc4:	42a0      	cmp	r0, r4
 8003fc6:	d007      	beq.n	8003fd8 <sbrk_aligned+0x38>
 8003fc8:	1a21      	subs	r1, r4, r0
 8003fca:	4628      	mov	r0, r5
 8003fcc:	f000 fb96 	bl	80046fc <_sbrk_r>
 8003fd0:	3001      	adds	r0, #1
 8003fd2:	d101      	bne.n	8003fd8 <sbrk_aligned+0x38>
 8003fd4:	f04f 34ff 	mov.w	r4, #4294967295
 8003fd8:	4620      	mov	r0, r4
 8003fda:	bd70      	pop	{r4, r5, r6, pc}
 8003fdc:	20000298 	.word	0x20000298

08003fe0 <_malloc_r>:
 8003fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fe4:	1ccd      	adds	r5, r1, #3
 8003fe6:	f025 0503 	bic.w	r5, r5, #3
 8003fea:	3508      	adds	r5, #8
 8003fec:	2d0c      	cmp	r5, #12
 8003fee:	bf38      	it	cc
 8003ff0:	250c      	movcc	r5, #12
 8003ff2:	2d00      	cmp	r5, #0
 8003ff4:	4607      	mov	r7, r0
 8003ff6:	db01      	blt.n	8003ffc <_malloc_r+0x1c>
 8003ff8:	42a9      	cmp	r1, r5
 8003ffa:	d905      	bls.n	8004008 <_malloc_r+0x28>
 8003ffc:	230c      	movs	r3, #12
 8003ffe:	603b      	str	r3, [r7, #0]
 8004000:	2600      	movs	r6, #0
 8004002:	4630      	mov	r0, r6
 8004004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004008:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80040dc <_malloc_r+0xfc>
 800400c:	f000 f868 	bl	80040e0 <__malloc_lock>
 8004010:	f8d8 3000 	ldr.w	r3, [r8]
 8004014:	461c      	mov	r4, r3
 8004016:	bb5c      	cbnz	r4, 8004070 <_malloc_r+0x90>
 8004018:	4629      	mov	r1, r5
 800401a:	4638      	mov	r0, r7
 800401c:	f7ff ffc0 	bl	8003fa0 <sbrk_aligned>
 8004020:	1c43      	adds	r3, r0, #1
 8004022:	4604      	mov	r4, r0
 8004024:	d155      	bne.n	80040d2 <_malloc_r+0xf2>
 8004026:	f8d8 4000 	ldr.w	r4, [r8]
 800402a:	4626      	mov	r6, r4
 800402c:	2e00      	cmp	r6, #0
 800402e:	d145      	bne.n	80040bc <_malloc_r+0xdc>
 8004030:	2c00      	cmp	r4, #0
 8004032:	d048      	beq.n	80040c6 <_malloc_r+0xe6>
 8004034:	6823      	ldr	r3, [r4, #0]
 8004036:	4631      	mov	r1, r6
 8004038:	4638      	mov	r0, r7
 800403a:	eb04 0903 	add.w	r9, r4, r3
 800403e:	f000 fb5d 	bl	80046fc <_sbrk_r>
 8004042:	4581      	cmp	r9, r0
 8004044:	d13f      	bne.n	80040c6 <_malloc_r+0xe6>
 8004046:	6821      	ldr	r1, [r4, #0]
 8004048:	1a6d      	subs	r5, r5, r1
 800404a:	4629      	mov	r1, r5
 800404c:	4638      	mov	r0, r7
 800404e:	f7ff ffa7 	bl	8003fa0 <sbrk_aligned>
 8004052:	3001      	adds	r0, #1
 8004054:	d037      	beq.n	80040c6 <_malloc_r+0xe6>
 8004056:	6823      	ldr	r3, [r4, #0]
 8004058:	442b      	add	r3, r5
 800405a:	6023      	str	r3, [r4, #0]
 800405c:	f8d8 3000 	ldr.w	r3, [r8]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d038      	beq.n	80040d6 <_malloc_r+0xf6>
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	42a2      	cmp	r2, r4
 8004068:	d12b      	bne.n	80040c2 <_malloc_r+0xe2>
 800406a:	2200      	movs	r2, #0
 800406c:	605a      	str	r2, [r3, #4]
 800406e:	e00f      	b.n	8004090 <_malloc_r+0xb0>
 8004070:	6822      	ldr	r2, [r4, #0]
 8004072:	1b52      	subs	r2, r2, r5
 8004074:	d41f      	bmi.n	80040b6 <_malloc_r+0xd6>
 8004076:	2a0b      	cmp	r2, #11
 8004078:	d917      	bls.n	80040aa <_malloc_r+0xca>
 800407a:	1961      	adds	r1, r4, r5
 800407c:	42a3      	cmp	r3, r4
 800407e:	6025      	str	r5, [r4, #0]
 8004080:	bf18      	it	ne
 8004082:	6059      	strne	r1, [r3, #4]
 8004084:	6863      	ldr	r3, [r4, #4]
 8004086:	bf08      	it	eq
 8004088:	f8c8 1000 	streq.w	r1, [r8]
 800408c:	5162      	str	r2, [r4, r5]
 800408e:	604b      	str	r3, [r1, #4]
 8004090:	4638      	mov	r0, r7
 8004092:	f104 060b 	add.w	r6, r4, #11
 8004096:	f000 f829 	bl	80040ec <__malloc_unlock>
 800409a:	f026 0607 	bic.w	r6, r6, #7
 800409e:	1d23      	adds	r3, r4, #4
 80040a0:	1af2      	subs	r2, r6, r3
 80040a2:	d0ae      	beq.n	8004002 <_malloc_r+0x22>
 80040a4:	1b9b      	subs	r3, r3, r6
 80040a6:	50a3      	str	r3, [r4, r2]
 80040a8:	e7ab      	b.n	8004002 <_malloc_r+0x22>
 80040aa:	42a3      	cmp	r3, r4
 80040ac:	6862      	ldr	r2, [r4, #4]
 80040ae:	d1dd      	bne.n	800406c <_malloc_r+0x8c>
 80040b0:	f8c8 2000 	str.w	r2, [r8]
 80040b4:	e7ec      	b.n	8004090 <_malloc_r+0xb0>
 80040b6:	4623      	mov	r3, r4
 80040b8:	6864      	ldr	r4, [r4, #4]
 80040ba:	e7ac      	b.n	8004016 <_malloc_r+0x36>
 80040bc:	4634      	mov	r4, r6
 80040be:	6876      	ldr	r6, [r6, #4]
 80040c0:	e7b4      	b.n	800402c <_malloc_r+0x4c>
 80040c2:	4613      	mov	r3, r2
 80040c4:	e7cc      	b.n	8004060 <_malloc_r+0x80>
 80040c6:	230c      	movs	r3, #12
 80040c8:	603b      	str	r3, [r7, #0]
 80040ca:	4638      	mov	r0, r7
 80040cc:	f000 f80e 	bl	80040ec <__malloc_unlock>
 80040d0:	e797      	b.n	8004002 <_malloc_r+0x22>
 80040d2:	6025      	str	r5, [r4, #0]
 80040d4:	e7dc      	b.n	8004090 <_malloc_r+0xb0>
 80040d6:	605b      	str	r3, [r3, #4]
 80040d8:	deff      	udf	#255	; 0xff
 80040da:	bf00      	nop
 80040dc:	20000294 	.word	0x20000294

080040e0 <__malloc_lock>:
 80040e0:	4801      	ldr	r0, [pc, #4]	; (80040e8 <__malloc_lock+0x8>)
 80040e2:	f7ff bf0f 	b.w	8003f04 <__retarget_lock_acquire_recursive>
 80040e6:	bf00      	nop
 80040e8:	20000290 	.word	0x20000290

080040ec <__malloc_unlock>:
 80040ec:	4801      	ldr	r0, [pc, #4]	; (80040f4 <__malloc_unlock+0x8>)
 80040ee:	f7ff bf0a 	b.w	8003f06 <__retarget_lock_release_recursive>
 80040f2:	bf00      	nop
 80040f4:	20000290 	.word	0x20000290

080040f8 <__ssputs_r>:
 80040f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040fc:	688e      	ldr	r6, [r1, #8]
 80040fe:	461f      	mov	r7, r3
 8004100:	42be      	cmp	r6, r7
 8004102:	680b      	ldr	r3, [r1, #0]
 8004104:	4682      	mov	sl, r0
 8004106:	460c      	mov	r4, r1
 8004108:	4690      	mov	r8, r2
 800410a:	d82c      	bhi.n	8004166 <__ssputs_r+0x6e>
 800410c:	898a      	ldrh	r2, [r1, #12]
 800410e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004112:	d026      	beq.n	8004162 <__ssputs_r+0x6a>
 8004114:	6965      	ldr	r5, [r4, #20]
 8004116:	6909      	ldr	r1, [r1, #16]
 8004118:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800411c:	eba3 0901 	sub.w	r9, r3, r1
 8004120:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004124:	1c7b      	adds	r3, r7, #1
 8004126:	444b      	add	r3, r9
 8004128:	106d      	asrs	r5, r5, #1
 800412a:	429d      	cmp	r5, r3
 800412c:	bf38      	it	cc
 800412e:	461d      	movcc	r5, r3
 8004130:	0553      	lsls	r3, r2, #21
 8004132:	d527      	bpl.n	8004184 <__ssputs_r+0x8c>
 8004134:	4629      	mov	r1, r5
 8004136:	f7ff ff53 	bl	8003fe0 <_malloc_r>
 800413a:	4606      	mov	r6, r0
 800413c:	b360      	cbz	r0, 8004198 <__ssputs_r+0xa0>
 800413e:	6921      	ldr	r1, [r4, #16]
 8004140:	464a      	mov	r2, r9
 8004142:	f000 faeb 	bl	800471c <memcpy>
 8004146:	89a3      	ldrh	r3, [r4, #12]
 8004148:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800414c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004150:	81a3      	strh	r3, [r4, #12]
 8004152:	6126      	str	r6, [r4, #16]
 8004154:	6165      	str	r5, [r4, #20]
 8004156:	444e      	add	r6, r9
 8004158:	eba5 0509 	sub.w	r5, r5, r9
 800415c:	6026      	str	r6, [r4, #0]
 800415e:	60a5      	str	r5, [r4, #8]
 8004160:	463e      	mov	r6, r7
 8004162:	42be      	cmp	r6, r7
 8004164:	d900      	bls.n	8004168 <__ssputs_r+0x70>
 8004166:	463e      	mov	r6, r7
 8004168:	6820      	ldr	r0, [r4, #0]
 800416a:	4632      	mov	r2, r6
 800416c:	4641      	mov	r1, r8
 800416e:	f000 faab 	bl	80046c8 <memmove>
 8004172:	68a3      	ldr	r3, [r4, #8]
 8004174:	1b9b      	subs	r3, r3, r6
 8004176:	60a3      	str	r3, [r4, #8]
 8004178:	6823      	ldr	r3, [r4, #0]
 800417a:	4433      	add	r3, r6
 800417c:	6023      	str	r3, [r4, #0]
 800417e:	2000      	movs	r0, #0
 8004180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004184:	462a      	mov	r2, r5
 8004186:	f000 fad7 	bl	8004738 <_realloc_r>
 800418a:	4606      	mov	r6, r0
 800418c:	2800      	cmp	r0, #0
 800418e:	d1e0      	bne.n	8004152 <__ssputs_r+0x5a>
 8004190:	6921      	ldr	r1, [r4, #16]
 8004192:	4650      	mov	r0, sl
 8004194:	f7ff feb8 	bl	8003f08 <_free_r>
 8004198:	230c      	movs	r3, #12
 800419a:	f8ca 3000 	str.w	r3, [sl]
 800419e:	89a3      	ldrh	r3, [r4, #12]
 80041a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041a4:	81a3      	strh	r3, [r4, #12]
 80041a6:	f04f 30ff 	mov.w	r0, #4294967295
 80041aa:	e7e9      	b.n	8004180 <__ssputs_r+0x88>

080041ac <_svfiprintf_r>:
 80041ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041b0:	4698      	mov	r8, r3
 80041b2:	898b      	ldrh	r3, [r1, #12]
 80041b4:	061b      	lsls	r3, r3, #24
 80041b6:	b09d      	sub	sp, #116	; 0x74
 80041b8:	4607      	mov	r7, r0
 80041ba:	460d      	mov	r5, r1
 80041bc:	4614      	mov	r4, r2
 80041be:	d50e      	bpl.n	80041de <_svfiprintf_r+0x32>
 80041c0:	690b      	ldr	r3, [r1, #16]
 80041c2:	b963      	cbnz	r3, 80041de <_svfiprintf_r+0x32>
 80041c4:	2140      	movs	r1, #64	; 0x40
 80041c6:	f7ff ff0b 	bl	8003fe0 <_malloc_r>
 80041ca:	6028      	str	r0, [r5, #0]
 80041cc:	6128      	str	r0, [r5, #16]
 80041ce:	b920      	cbnz	r0, 80041da <_svfiprintf_r+0x2e>
 80041d0:	230c      	movs	r3, #12
 80041d2:	603b      	str	r3, [r7, #0]
 80041d4:	f04f 30ff 	mov.w	r0, #4294967295
 80041d8:	e0d0      	b.n	800437c <_svfiprintf_r+0x1d0>
 80041da:	2340      	movs	r3, #64	; 0x40
 80041dc:	616b      	str	r3, [r5, #20]
 80041de:	2300      	movs	r3, #0
 80041e0:	9309      	str	r3, [sp, #36]	; 0x24
 80041e2:	2320      	movs	r3, #32
 80041e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80041ec:	2330      	movs	r3, #48	; 0x30
 80041ee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004394 <_svfiprintf_r+0x1e8>
 80041f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041f6:	f04f 0901 	mov.w	r9, #1
 80041fa:	4623      	mov	r3, r4
 80041fc:	469a      	mov	sl, r3
 80041fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004202:	b10a      	cbz	r2, 8004208 <_svfiprintf_r+0x5c>
 8004204:	2a25      	cmp	r2, #37	; 0x25
 8004206:	d1f9      	bne.n	80041fc <_svfiprintf_r+0x50>
 8004208:	ebba 0b04 	subs.w	fp, sl, r4
 800420c:	d00b      	beq.n	8004226 <_svfiprintf_r+0x7a>
 800420e:	465b      	mov	r3, fp
 8004210:	4622      	mov	r2, r4
 8004212:	4629      	mov	r1, r5
 8004214:	4638      	mov	r0, r7
 8004216:	f7ff ff6f 	bl	80040f8 <__ssputs_r>
 800421a:	3001      	adds	r0, #1
 800421c:	f000 80a9 	beq.w	8004372 <_svfiprintf_r+0x1c6>
 8004220:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004222:	445a      	add	r2, fp
 8004224:	9209      	str	r2, [sp, #36]	; 0x24
 8004226:	f89a 3000 	ldrb.w	r3, [sl]
 800422a:	2b00      	cmp	r3, #0
 800422c:	f000 80a1 	beq.w	8004372 <_svfiprintf_r+0x1c6>
 8004230:	2300      	movs	r3, #0
 8004232:	f04f 32ff 	mov.w	r2, #4294967295
 8004236:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800423a:	f10a 0a01 	add.w	sl, sl, #1
 800423e:	9304      	str	r3, [sp, #16]
 8004240:	9307      	str	r3, [sp, #28]
 8004242:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004246:	931a      	str	r3, [sp, #104]	; 0x68
 8004248:	4654      	mov	r4, sl
 800424a:	2205      	movs	r2, #5
 800424c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004250:	4850      	ldr	r0, [pc, #320]	; (8004394 <_svfiprintf_r+0x1e8>)
 8004252:	f7fb ffdd 	bl	8000210 <memchr>
 8004256:	9a04      	ldr	r2, [sp, #16]
 8004258:	b9d8      	cbnz	r0, 8004292 <_svfiprintf_r+0xe6>
 800425a:	06d0      	lsls	r0, r2, #27
 800425c:	bf44      	itt	mi
 800425e:	2320      	movmi	r3, #32
 8004260:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004264:	0711      	lsls	r1, r2, #28
 8004266:	bf44      	itt	mi
 8004268:	232b      	movmi	r3, #43	; 0x2b
 800426a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800426e:	f89a 3000 	ldrb.w	r3, [sl]
 8004272:	2b2a      	cmp	r3, #42	; 0x2a
 8004274:	d015      	beq.n	80042a2 <_svfiprintf_r+0xf6>
 8004276:	9a07      	ldr	r2, [sp, #28]
 8004278:	4654      	mov	r4, sl
 800427a:	2000      	movs	r0, #0
 800427c:	f04f 0c0a 	mov.w	ip, #10
 8004280:	4621      	mov	r1, r4
 8004282:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004286:	3b30      	subs	r3, #48	; 0x30
 8004288:	2b09      	cmp	r3, #9
 800428a:	d94d      	bls.n	8004328 <_svfiprintf_r+0x17c>
 800428c:	b1b0      	cbz	r0, 80042bc <_svfiprintf_r+0x110>
 800428e:	9207      	str	r2, [sp, #28]
 8004290:	e014      	b.n	80042bc <_svfiprintf_r+0x110>
 8004292:	eba0 0308 	sub.w	r3, r0, r8
 8004296:	fa09 f303 	lsl.w	r3, r9, r3
 800429a:	4313      	orrs	r3, r2
 800429c:	9304      	str	r3, [sp, #16]
 800429e:	46a2      	mov	sl, r4
 80042a0:	e7d2      	b.n	8004248 <_svfiprintf_r+0x9c>
 80042a2:	9b03      	ldr	r3, [sp, #12]
 80042a4:	1d19      	adds	r1, r3, #4
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	9103      	str	r1, [sp, #12]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	bfbb      	ittet	lt
 80042ae:	425b      	neglt	r3, r3
 80042b0:	f042 0202 	orrlt.w	r2, r2, #2
 80042b4:	9307      	strge	r3, [sp, #28]
 80042b6:	9307      	strlt	r3, [sp, #28]
 80042b8:	bfb8      	it	lt
 80042ba:	9204      	strlt	r2, [sp, #16]
 80042bc:	7823      	ldrb	r3, [r4, #0]
 80042be:	2b2e      	cmp	r3, #46	; 0x2e
 80042c0:	d10c      	bne.n	80042dc <_svfiprintf_r+0x130>
 80042c2:	7863      	ldrb	r3, [r4, #1]
 80042c4:	2b2a      	cmp	r3, #42	; 0x2a
 80042c6:	d134      	bne.n	8004332 <_svfiprintf_r+0x186>
 80042c8:	9b03      	ldr	r3, [sp, #12]
 80042ca:	1d1a      	adds	r2, r3, #4
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	9203      	str	r2, [sp, #12]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	bfb8      	it	lt
 80042d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80042d8:	3402      	adds	r4, #2
 80042da:	9305      	str	r3, [sp, #20]
 80042dc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80043a4 <_svfiprintf_r+0x1f8>
 80042e0:	7821      	ldrb	r1, [r4, #0]
 80042e2:	2203      	movs	r2, #3
 80042e4:	4650      	mov	r0, sl
 80042e6:	f7fb ff93 	bl	8000210 <memchr>
 80042ea:	b138      	cbz	r0, 80042fc <_svfiprintf_r+0x150>
 80042ec:	9b04      	ldr	r3, [sp, #16]
 80042ee:	eba0 000a 	sub.w	r0, r0, sl
 80042f2:	2240      	movs	r2, #64	; 0x40
 80042f4:	4082      	lsls	r2, r0
 80042f6:	4313      	orrs	r3, r2
 80042f8:	3401      	adds	r4, #1
 80042fa:	9304      	str	r3, [sp, #16]
 80042fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004300:	4825      	ldr	r0, [pc, #148]	; (8004398 <_svfiprintf_r+0x1ec>)
 8004302:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004306:	2206      	movs	r2, #6
 8004308:	f7fb ff82 	bl	8000210 <memchr>
 800430c:	2800      	cmp	r0, #0
 800430e:	d038      	beq.n	8004382 <_svfiprintf_r+0x1d6>
 8004310:	4b22      	ldr	r3, [pc, #136]	; (800439c <_svfiprintf_r+0x1f0>)
 8004312:	bb1b      	cbnz	r3, 800435c <_svfiprintf_r+0x1b0>
 8004314:	9b03      	ldr	r3, [sp, #12]
 8004316:	3307      	adds	r3, #7
 8004318:	f023 0307 	bic.w	r3, r3, #7
 800431c:	3308      	adds	r3, #8
 800431e:	9303      	str	r3, [sp, #12]
 8004320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004322:	4433      	add	r3, r6
 8004324:	9309      	str	r3, [sp, #36]	; 0x24
 8004326:	e768      	b.n	80041fa <_svfiprintf_r+0x4e>
 8004328:	fb0c 3202 	mla	r2, ip, r2, r3
 800432c:	460c      	mov	r4, r1
 800432e:	2001      	movs	r0, #1
 8004330:	e7a6      	b.n	8004280 <_svfiprintf_r+0xd4>
 8004332:	2300      	movs	r3, #0
 8004334:	3401      	adds	r4, #1
 8004336:	9305      	str	r3, [sp, #20]
 8004338:	4619      	mov	r1, r3
 800433a:	f04f 0c0a 	mov.w	ip, #10
 800433e:	4620      	mov	r0, r4
 8004340:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004344:	3a30      	subs	r2, #48	; 0x30
 8004346:	2a09      	cmp	r2, #9
 8004348:	d903      	bls.n	8004352 <_svfiprintf_r+0x1a6>
 800434a:	2b00      	cmp	r3, #0
 800434c:	d0c6      	beq.n	80042dc <_svfiprintf_r+0x130>
 800434e:	9105      	str	r1, [sp, #20]
 8004350:	e7c4      	b.n	80042dc <_svfiprintf_r+0x130>
 8004352:	fb0c 2101 	mla	r1, ip, r1, r2
 8004356:	4604      	mov	r4, r0
 8004358:	2301      	movs	r3, #1
 800435a:	e7f0      	b.n	800433e <_svfiprintf_r+0x192>
 800435c:	ab03      	add	r3, sp, #12
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	462a      	mov	r2, r5
 8004362:	4b0f      	ldr	r3, [pc, #60]	; (80043a0 <_svfiprintf_r+0x1f4>)
 8004364:	a904      	add	r1, sp, #16
 8004366:	4638      	mov	r0, r7
 8004368:	f3af 8000 	nop.w
 800436c:	1c42      	adds	r2, r0, #1
 800436e:	4606      	mov	r6, r0
 8004370:	d1d6      	bne.n	8004320 <_svfiprintf_r+0x174>
 8004372:	89ab      	ldrh	r3, [r5, #12]
 8004374:	065b      	lsls	r3, r3, #25
 8004376:	f53f af2d 	bmi.w	80041d4 <_svfiprintf_r+0x28>
 800437a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800437c:	b01d      	add	sp, #116	; 0x74
 800437e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004382:	ab03      	add	r3, sp, #12
 8004384:	9300      	str	r3, [sp, #0]
 8004386:	462a      	mov	r2, r5
 8004388:	4b05      	ldr	r3, [pc, #20]	; (80043a0 <_svfiprintf_r+0x1f4>)
 800438a:	a904      	add	r1, sp, #16
 800438c:	4638      	mov	r0, r7
 800438e:	f000 f879 	bl	8004484 <_printf_i>
 8004392:	e7eb      	b.n	800436c <_svfiprintf_r+0x1c0>
 8004394:	080047e0 	.word	0x080047e0
 8004398:	080047ea 	.word	0x080047ea
 800439c:	00000000 	.word	0x00000000
 80043a0:	080040f9 	.word	0x080040f9
 80043a4:	080047e6 	.word	0x080047e6

080043a8 <_printf_common>:
 80043a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043ac:	4616      	mov	r6, r2
 80043ae:	4699      	mov	r9, r3
 80043b0:	688a      	ldr	r2, [r1, #8]
 80043b2:	690b      	ldr	r3, [r1, #16]
 80043b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043b8:	4293      	cmp	r3, r2
 80043ba:	bfb8      	it	lt
 80043bc:	4613      	movlt	r3, r2
 80043be:	6033      	str	r3, [r6, #0]
 80043c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043c4:	4607      	mov	r7, r0
 80043c6:	460c      	mov	r4, r1
 80043c8:	b10a      	cbz	r2, 80043ce <_printf_common+0x26>
 80043ca:	3301      	adds	r3, #1
 80043cc:	6033      	str	r3, [r6, #0]
 80043ce:	6823      	ldr	r3, [r4, #0]
 80043d0:	0699      	lsls	r1, r3, #26
 80043d2:	bf42      	ittt	mi
 80043d4:	6833      	ldrmi	r3, [r6, #0]
 80043d6:	3302      	addmi	r3, #2
 80043d8:	6033      	strmi	r3, [r6, #0]
 80043da:	6825      	ldr	r5, [r4, #0]
 80043dc:	f015 0506 	ands.w	r5, r5, #6
 80043e0:	d106      	bne.n	80043f0 <_printf_common+0x48>
 80043e2:	f104 0a19 	add.w	sl, r4, #25
 80043e6:	68e3      	ldr	r3, [r4, #12]
 80043e8:	6832      	ldr	r2, [r6, #0]
 80043ea:	1a9b      	subs	r3, r3, r2
 80043ec:	42ab      	cmp	r3, r5
 80043ee:	dc26      	bgt.n	800443e <_printf_common+0x96>
 80043f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80043f4:	1e13      	subs	r3, r2, #0
 80043f6:	6822      	ldr	r2, [r4, #0]
 80043f8:	bf18      	it	ne
 80043fa:	2301      	movne	r3, #1
 80043fc:	0692      	lsls	r2, r2, #26
 80043fe:	d42b      	bmi.n	8004458 <_printf_common+0xb0>
 8004400:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004404:	4649      	mov	r1, r9
 8004406:	4638      	mov	r0, r7
 8004408:	47c0      	blx	r8
 800440a:	3001      	adds	r0, #1
 800440c:	d01e      	beq.n	800444c <_printf_common+0xa4>
 800440e:	6823      	ldr	r3, [r4, #0]
 8004410:	6922      	ldr	r2, [r4, #16]
 8004412:	f003 0306 	and.w	r3, r3, #6
 8004416:	2b04      	cmp	r3, #4
 8004418:	bf02      	ittt	eq
 800441a:	68e5      	ldreq	r5, [r4, #12]
 800441c:	6833      	ldreq	r3, [r6, #0]
 800441e:	1aed      	subeq	r5, r5, r3
 8004420:	68a3      	ldr	r3, [r4, #8]
 8004422:	bf0c      	ite	eq
 8004424:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004428:	2500      	movne	r5, #0
 800442a:	4293      	cmp	r3, r2
 800442c:	bfc4      	itt	gt
 800442e:	1a9b      	subgt	r3, r3, r2
 8004430:	18ed      	addgt	r5, r5, r3
 8004432:	2600      	movs	r6, #0
 8004434:	341a      	adds	r4, #26
 8004436:	42b5      	cmp	r5, r6
 8004438:	d11a      	bne.n	8004470 <_printf_common+0xc8>
 800443a:	2000      	movs	r0, #0
 800443c:	e008      	b.n	8004450 <_printf_common+0xa8>
 800443e:	2301      	movs	r3, #1
 8004440:	4652      	mov	r2, sl
 8004442:	4649      	mov	r1, r9
 8004444:	4638      	mov	r0, r7
 8004446:	47c0      	blx	r8
 8004448:	3001      	adds	r0, #1
 800444a:	d103      	bne.n	8004454 <_printf_common+0xac>
 800444c:	f04f 30ff 	mov.w	r0, #4294967295
 8004450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004454:	3501      	adds	r5, #1
 8004456:	e7c6      	b.n	80043e6 <_printf_common+0x3e>
 8004458:	18e1      	adds	r1, r4, r3
 800445a:	1c5a      	adds	r2, r3, #1
 800445c:	2030      	movs	r0, #48	; 0x30
 800445e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004462:	4422      	add	r2, r4
 8004464:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004468:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800446c:	3302      	adds	r3, #2
 800446e:	e7c7      	b.n	8004400 <_printf_common+0x58>
 8004470:	2301      	movs	r3, #1
 8004472:	4622      	mov	r2, r4
 8004474:	4649      	mov	r1, r9
 8004476:	4638      	mov	r0, r7
 8004478:	47c0      	blx	r8
 800447a:	3001      	adds	r0, #1
 800447c:	d0e6      	beq.n	800444c <_printf_common+0xa4>
 800447e:	3601      	adds	r6, #1
 8004480:	e7d9      	b.n	8004436 <_printf_common+0x8e>
	...

08004484 <_printf_i>:
 8004484:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004488:	7e0f      	ldrb	r7, [r1, #24]
 800448a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800448c:	2f78      	cmp	r7, #120	; 0x78
 800448e:	4691      	mov	r9, r2
 8004490:	4680      	mov	r8, r0
 8004492:	460c      	mov	r4, r1
 8004494:	469a      	mov	sl, r3
 8004496:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800449a:	d807      	bhi.n	80044ac <_printf_i+0x28>
 800449c:	2f62      	cmp	r7, #98	; 0x62
 800449e:	d80a      	bhi.n	80044b6 <_printf_i+0x32>
 80044a0:	2f00      	cmp	r7, #0
 80044a2:	f000 80d4 	beq.w	800464e <_printf_i+0x1ca>
 80044a6:	2f58      	cmp	r7, #88	; 0x58
 80044a8:	f000 80c0 	beq.w	800462c <_printf_i+0x1a8>
 80044ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80044b4:	e03a      	b.n	800452c <_printf_i+0xa8>
 80044b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80044ba:	2b15      	cmp	r3, #21
 80044bc:	d8f6      	bhi.n	80044ac <_printf_i+0x28>
 80044be:	a101      	add	r1, pc, #4	; (adr r1, 80044c4 <_printf_i+0x40>)
 80044c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044c4:	0800451d 	.word	0x0800451d
 80044c8:	08004531 	.word	0x08004531
 80044cc:	080044ad 	.word	0x080044ad
 80044d0:	080044ad 	.word	0x080044ad
 80044d4:	080044ad 	.word	0x080044ad
 80044d8:	080044ad 	.word	0x080044ad
 80044dc:	08004531 	.word	0x08004531
 80044e0:	080044ad 	.word	0x080044ad
 80044e4:	080044ad 	.word	0x080044ad
 80044e8:	080044ad 	.word	0x080044ad
 80044ec:	080044ad 	.word	0x080044ad
 80044f0:	08004635 	.word	0x08004635
 80044f4:	0800455d 	.word	0x0800455d
 80044f8:	080045ef 	.word	0x080045ef
 80044fc:	080044ad 	.word	0x080044ad
 8004500:	080044ad 	.word	0x080044ad
 8004504:	08004657 	.word	0x08004657
 8004508:	080044ad 	.word	0x080044ad
 800450c:	0800455d 	.word	0x0800455d
 8004510:	080044ad 	.word	0x080044ad
 8004514:	080044ad 	.word	0x080044ad
 8004518:	080045f7 	.word	0x080045f7
 800451c:	682b      	ldr	r3, [r5, #0]
 800451e:	1d1a      	adds	r2, r3, #4
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	602a      	str	r2, [r5, #0]
 8004524:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004528:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800452c:	2301      	movs	r3, #1
 800452e:	e09f      	b.n	8004670 <_printf_i+0x1ec>
 8004530:	6820      	ldr	r0, [r4, #0]
 8004532:	682b      	ldr	r3, [r5, #0]
 8004534:	0607      	lsls	r7, r0, #24
 8004536:	f103 0104 	add.w	r1, r3, #4
 800453a:	6029      	str	r1, [r5, #0]
 800453c:	d501      	bpl.n	8004542 <_printf_i+0xbe>
 800453e:	681e      	ldr	r6, [r3, #0]
 8004540:	e003      	b.n	800454a <_printf_i+0xc6>
 8004542:	0646      	lsls	r6, r0, #25
 8004544:	d5fb      	bpl.n	800453e <_printf_i+0xba>
 8004546:	f9b3 6000 	ldrsh.w	r6, [r3]
 800454a:	2e00      	cmp	r6, #0
 800454c:	da03      	bge.n	8004556 <_printf_i+0xd2>
 800454e:	232d      	movs	r3, #45	; 0x2d
 8004550:	4276      	negs	r6, r6
 8004552:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004556:	485a      	ldr	r0, [pc, #360]	; (80046c0 <_printf_i+0x23c>)
 8004558:	230a      	movs	r3, #10
 800455a:	e012      	b.n	8004582 <_printf_i+0xfe>
 800455c:	682b      	ldr	r3, [r5, #0]
 800455e:	6820      	ldr	r0, [r4, #0]
 8004560:	1d19      	adds	r1, r3, #4
 8004562:	6029      	str	r1, [r5, #0]
 8004564:	0605      	lsls	r5, r0, #24
 8004566:	d501      	bpl.n	800456c <_printf_i+0xe8>
 8004568:	681e      	ldr	r6, [r3, #0]
 800456a:	e002      	b.n	8004572 <_printf_i+0xee>
 800456c:	0641      	lsls	r1, r0, #25
 800456e:	d5fb      	bpl.n	8004568 <_printf_i+0xe4>
 8004570:	881e      	ldrh	r6, [r3, #0]
 8004572:	4853      	ldr	r0, [pc, #332]	; (80046c0 <_printf_i+0x23c>)
 8004574:	2f6f      	cmp	r7, #111	; 0x6f
 8004576:	bf0c      	ite	eq
 8004578:	2308      	moveq	r3, #8
 800457a:	230a      	movne	r3, #10
 800457c:	2100      	movs	r1, #0
 800457e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004582:	6865      	ldr	r5, [r4, #4]
 8004584:	60a5      	str	r5, [r4, #8]
 8004586:	2d00      	cmp	r5, #0
 8004588:	bfa2      	ittt	ge
 800458a:	6821      	ldrge	r1, [r4, #0]
 800458c:	f021 0104 	bicge.w	r1, r1, #4
 8004590:	6021      	strge	r1, [r4, #0]
 8004592:	b90e      	cbnz	r6, 8004598 <_printf_i+0x114>
 8004594:	2d00      	cmp	r5, #0
 8004596:	d04b      	beq.n	8004630 <_printf_i+0x1ac>
 8004598:	4615      	mov	r5, r2
 800459a:	fbb6 f1f3 	udiv	r1, r6, r3
 800459e:	fb03 6711 	mls	r7, r3, r1, r6
 80045a2:	5dc7      	ldrb	r7, [r0, r7]
 80045a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80045a8:	4637      	mov	r7, r6
 80045aa:	42bb      	cmp	r3, r7
 80045ac:	460e      	mov	r6, r1
 80045ae:	d9f4      	bls.n	800459a <_printf_i+0x116>
 80045b0:	2b08      	cmp	r3, #8
 80045b2:	d10b      	bne.n	80045cc <_printf_i+0x148>
 80045b4:	6823      	ldr	r3, [r4, #0]
 80045b6:	07de      	lsls	r6, r3, #31
 80045b8:	d508      	bpl.n	80045cc <_printf_i+0x148>
 80045ba:	6923      	ldr	r3, [r4, #16]
 80045bc:	6861      	ldr	r1, [r4, #4]
 80045be:	4299      	cmp	r1, r3
 80045c0:	bfde      	ittt	le
 80045c2:	2330      	movle	r3, #48	; 0x30
 80045c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80045c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80045cc:	1b52      	subs	r2, r2, r5
 80045ce:	6122      	str	r2, [r4, #16]
 80045d0:	f8cd a000 	str.w	sl, [sp]
 80045d4:	464b      	mov	r3, r9
 80045d6:	aa03      	add	r2, sp, #12
 80045d8:	4621      	mov	r1, r4
 80045da:	4640      	mov	r0, r8
 80045dc:	f7ff fee4 	bl	80043a8 <_printf_common>
 80045e0:	3001      	adds	r0, #1
 80045e2:	d14a      	bne.n	800467a <_printf_i+0x1f6>
 80045e4:	f04f 30ff 	mov.w	r0, #4294967295
 80045e8:	b004      	add	sp, #16
 80045ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045ee:	6823      	ldr	r3, [r4, #0]
 80045f0:	f043 0320 	orr.w	r3, r3, #32
 80045f4:	6023      	str	r3, [r4, #0]
 80045f6:	4833      	ldr	r0, [pc, #204]	; (80046c4 <_printf_i+0x240>)
 80045f8:	2778      	movs	r7, #120	; 0x78
 80045fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80045fe:	6823      	ldr	r3, [r4, #0]
 8004600:	6829      	ldr	r1, [r5, #0]
 8004602:	061f      	lsls	r7, r3, #24
 8004604:	f851 6b04 	ldr.w	r6, [r1], #4
 8004608:	d402      	bmi.n	8004610 <_printf_i+0x18c>
 800460a:	065f      	lsls	r7, r3, #25
 800460c:	bf48      	it	mi
 800460e:	b2b6      	uxthmi	r6, r6
 8004610:	07df      	lsls	r7, r3, #31
 8004612:	bf48      	it	mi
 8004614:	f043 0320 	orrmi.w	r3, r3, #32
 8004618:	6029      	str	r1, [r5, #0]
 800461a:	bf48      	it	mi
 800461c:	6023      	strmi	r3, [r4, #0]
 800461e:	b91e      	cbnz	r6, 8004628 <_printf_i+0x1a4>
 8004620:	6823      	ldr	r3, [r4, #0]
 8004622:	f023 0320 	bic.w	r3, r3, #32
 8004626:	6023      	str	r3, [r4, #0]
 8004628:	2310      	movs	r3, #16
 800462a:	e7a7      	b.n	800457c <_printf_i+0xf8>
 800462c:	4824      	ldr	r0, [pc, #144]	; (80046c0 <_printf_i+0x23c>)
 800462e:	e7e4      	b.n	80045fa <_printf_i+0x176>
 8004630:	4615      	mov	r5, r2
 8004632:	e7bd      	b.n	80045b0 <_printf_i+0x12c>
 8004634:	682b      	ldr	r3, [r5, #0]
 8004636:	6826      	ldr	r6, [r4, #0]
 8004638:	6961      	ldr	r1, [r4, #20]
 800463a:	1d18      	adds	r0, r3, #4
 800463c:	6028      	str	r0, [r5, #0]
 800463e:	0635      	lsls	r5, r6, #24
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	d501      	bpl.n	8004648 <_printf_i+0x1c4>
 8004644:	6019      	str	r1, [r3, #0]
 8004646:	e002      	b.n	800464e <_printf_i+0x1ca>
 8004648:	0670      	lsls	r0, r6, #25
 800464a:	d5fb      	bpl.n	8004644 <_printf_i+0x1c0>
 800464c:	8019      	strh	r1, [r3, #0]
 800464e:	2300      	movs	r3, #0
 8004650:	6123      	str	r3, [r4, #16]
 8004652:	4615      	mov	r5, r2
 8004654:	e7bc      	b.n	80045d0 <_printf_i+0x14c>
 8004656:	682b      	ldr	r3, [r5, #0]
 8004658:	1d1a      	adds	r2, r3, #4
 800465a:	602a      	str	r2, [r5, #0]
 800465c:	681d      	ldr	r5, [r3, #0]
 800465e:	6862      	ldr	r2, [r4, #4]
 8004660:	2100      	movs	r1, #0
 8004662:	4628      	mov	r0, r5
 8004664:	f7fb fdd4 	bl	8000210 <memchr>
 8004668:	b108      	cbz	r0, 800466e <_printf_i+0x1ea>
 800466a:	1b40      	subs	r0, r0, r5
 800466c:	6060      	str	r0, [r4, #4]
 800466e:	6863      	ldr	r3, [r4, #4]
 8004670:	6123      	str	r3, [r4, #16]
 8004672:	2300      	movs	r3, #0
 8004674:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004678:	e7aa      	b.n	80045d0 <_printf_i+0x14c>
 800467a:	6923      	ldr	r3, [r4, #16]
 800467c:	462a      	mov	r2, r5
 800467e:	4649      	mov	r1, r9
 8004680:	4640      	mov	r0, r8
 8004682:	47d0      	blx	sl
 8004684:	3001      	adds	r0, #1
 8004686:	d0ad      	beq.n	80045e4 <_printf_i+0x160>
 8004688:	6823      	ldr	r3, [r4, #0]
 800468a:	079b      	lsls	r3, r3, #30
 800468c:	d413      	bmi.n	80046b6 <_printf_i+0x232>
 800468e:	68e0      	ldr	r0, [r4, #12]
 8004690:	9b03      	ldr	r3, [sp, #12]
 8004692:	4298      	cmp	r0, r3
 8004694:	bfb8      	it	lt
 8004696:	4618      	movlt	r0, r3
 8004698:	e7a6      	b.n	80045e8 <_printf_i+0x164>
 800469a:	2301      	movs	r3, #1
 800469c:	4632      	mov	r2, r6
 800469e:	4649      	mov	r1, r9
 80046a0:	4640      	mov	r0, r8
 80046a2:	47d0      	blx	sl
 80046a4:	3001      	adds	r0, #1
 80046a6:	d09d      	beq.n	80045e4 <_printf_i+0x160>
 80046a8:	3501      	adds	r5, #1
 80046aa:	68e3      	ldr	r3, [r4, #12]
 80046ac:	9903      	ldr	r1, [sp, #12]
 80046ae:	1a5b      	subs	r3, r3, r1
 80046b0:	42ab      	cmp	r3, r5
 80046b2:	dcf2      	bgt.n	800469a <_printf_i+0x216>
 80046b4:	e7eb      	b.n	800468e <_printf_i+0x20a>
 80046b6:	2500      	movs	r5, #0
 80046b8:	f104 0619 	add.w	r6, r4, #25
 80046bc:	e7f5      	b.n	80046aa <_printf_i+0x226>
 80046be:	bf00      	nop
 80046c0:	080047f1 	.word	0x080047f1
 80046c4:	08004802 	.word	0x08004802

080046c8 <memmove>:
 80046c8:	4288      	cmp	r0, r1
 80046ca:	b510      	push	{r4, lr}
 80046cc:	eb01 0402 	add.w	r4, r1, r2
 80046d0:	d902      	bls.n	80046d8 <memmove+0x10>
 80046d2:	4284      	cmp	r4, r0
 80046d4:	4623      	mov	r3, r4
 80046d6:	d807      	bhi.n	80046e8 <memmove+0x20>
 80046d8:	1e43      	subs	r3, r0, #1
 80046da:	42a1      	cmp	r1, r4
 80046dc:	d008      	beq.n	80046f0 <memmove+0x28>
 80046de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80046e6:	e7f8      	b.n	80046da <memmove+0x12>
 80046e8:	4402      	add	r2, r0
 80046ea:	4601      	mov	r1, r0
 80046ec:	428a      	cmp	r2, r1
 80046ee:	d100      	bne.n	80046f2 <memmove+0x2a>
 80046f0:	bd10      	pop	{r4, pc}
 80046f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80046f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80046fa:	e7f7      	b.n	80046ec <memmove+0x24>

080046fc <_sbrk_r>:
 80046fc:	b538      	push	{r3, r4, r5, lr}
 80046fe:	4d06      	ldr	r5, [pc, #24]	; (8004718 <_sbrk_r+0x1c>)
 8004700:	2300      	movs	r3, #0
 8004702:	4604      	mov	r4, r0
 8004704:	4608      	mov	r0, r1
 8004706:	602b      	str	r3, [r5, #0]
 8004708:	f7fc fe16 	bl	8001338 <_sbrk>
 800470c:	1c43      	adds	r3, r0, #1
 800470e:	d102      	bne.n	8004716 <_sbrk_r+0x1a>
 8004710:	682b      	ldr	r3, [r5, #0]
 8004712:	b103      	cbz	r3, 8004716 <_sbrk_r+0x1a>
 8004714:	6023      	str	r3, [r4, #0]
 8004716:	bd38      	pop	{r3, r4, r5, pc}
 8004718:	2000028c 	.word	0x2000028c

0800471c <memcpy>:
 800471c:	440a      	add	r2, r1
 800471e:	4291      	cmp	r1, r2
 8004720:	f100 33ff 	add.w	r3, r0, #4294967295
 8004724:	d100      	bne.n	8004728 <memcpy+0xc>
 8004726:	4770      	bx	lr
 8004728:	b510      	push	{r4, lr}
 800472a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800472e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004732:	4291      	cmp	r1, r2
 8004734:	d1f9      	bne.n	800472a <memcpy+0xe>
 8004736:	bd10      	pop	{r4, pc}

08004738 <_realloc_r>:
 8004738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800473c:	4680      	mov	r8, r0
 800473e:	4614      	mov	r4, r2
 8004740:	460e      	mov	r6, r1
 8004742:	b921      	cbnz	r1, 800474e <_realloc_r+0x16>
 8004744:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004748:	4611      	mov	r1, r2
 800474a:	f7ff bc49 	b.w	8003fe0 <_malloc_r>
 800474e:	b92a      	cbnz	r2, 800475c <_realloc_r+0x24>
 8004750:	f7ff fbda 	bl	8003f08 <_free_r>
 8004754:	4625      	mov	r5, r4
 8004756:	4628      	mov	r0, r5
 8004758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800475c:	f000 f81b 	bl	8004796 <_malloc_usable_size_r>
 8004760:	4284      	cmp	r4, r0
 8004762:	4607      	mov	r7, r0
 8004764:	d802      	bhi.n	800476c <_realloc_r+0x34>
 8004766:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800476a:	d812      	bhi.n	8004792 <_realloc_r+0x5a>
 800476c:	4621      	mov	r1, r4
 800476e:	4640      	mov	r0, r8
 8004770:	f7ff fc36 	bl	8003fe0 <_malloc_r>
 8004774:	4605      	mov	r5, r0
 8004776:	2800      	cmp	r0, #0
 8004778:	d0ed      	beq.n	8004756 <_realloc_r+0x1e>
 800477a:	42bc      	cmp	r4, r7
 800477c:	4622      	mov	r2, r4
 800477e:	4631      	mov	r1, r6
 8004780:	bf28      	it	cs
 8004782:	463a      	movcs	r2, r7
 8004784:	f7ff ffca 	bl	800471c <memcpy>
 8004788:	4631      	mov	r1, r6
 800478a:	4640      	mov	r0, r8
 800478c:	f7ff fbbc 	bl	8003f08 <_free_r>
 8004790:	e7e1      	b.n	8004756 <_realloc_r+0x1e>
 8004792:	4635      	mov	r5, r6
 8004794:	e7df      	b.n	8004756 <_realloc_r+0x1e>

08004796 <_malloc_usable_size_r>:
 8004796:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800479a:	1f18      	subs	r0, r3, #4
 800479c:	2b00      	cmp	r3, #0
 800479e:	bfbc      	itt	lt
 80047a0:	580b      	ldrlt	r3, [r1, r0]
 80047a2:	18c0      	addlt	r0, r0, r3
 80047a4:	4770      	bx	lr
	...

080047a8 <_init>:
 80047a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047aa:	bf00      	nop
 80047ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ae:	bc08      	pop	{r3}
 80047b0:	469e      	mov	lr, r3
 80047b2:	4770      	bx	lr

080047b4 <_fini>:
 80047b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047b6:	bf00      	nop
 80047b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ba:	bc08      	pop	{r3}
 80047bc:	469e      	mov	lr, r3
 80047be:	4770      	bx	lr
